
SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000080d4  0800c128  0800c128  0001c128  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141fc  080141fc  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080141fc  080141fc  000241fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014204  08014204  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014204  08014204  00024204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014208  08014208  00024208  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0801420c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d08  200001e0  080143ec  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ee8  080143ec  00030ee8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e93  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec3  00000000  00000000  000450a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00047f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00048c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002479c  00000000  00000000  000497b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f6c  00000000  00000000  0006df4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce641  00000000  00000000  0007feb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e4f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ac  00000000  00000000  0014e54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c10c 	.word	0x0800c10c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800c10c 	.word	0x0800c10c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (src <= 0x80) {	/* ASCII */
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	2b80      	cmp	r3, #128	; 0x80
 8000f10:	d802      	bhi.n	8000f18 <ff_convert+0x18>
		c = src;
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	837b      	strh	r3, [r7, #26]
 8000f16:	e053      	b.n	8000fc0 <ff_convert+0xc0>
			else
				hi = i;
		}
		c = n ? p[i * 2 + 1] : 0;
#else
		if (dir) {		/* OEMCP to unicode (Incremental search)*/
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d015      	beq.n	8000f4a <ff_convert+0x4a>
			p = &uni2sjis[1];
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <ff_convert+0xd0>)
 8000f20:	61fb      	str	r3, [r7, #28]
			do {
				c = *p;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	837b      	strh	r3, [r7, #26]
				p += 2;
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	61fb      	str	r3, [r7, #28]
			} while (c && c != src);
 8000f2e:	8b7b      	ldrh	r3, [r7, #26]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <ff_convert+0x3c>
 8000f34:	8b7a      	ldrh	r2, [r7, #26]
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d1f2      	bne.n	8000f22 <ff_convert+0x22>
			p -= 3;
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	3b06      	subs	r3, #6
 8000f40:	61fb      	str	r3, [r7, #28]
			c = *p;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	837b      	strh	r3, [r7, #26]
 8000f48:	e03a      	b.n	8000fc0 <ff_convert+0xc0>
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 8000f52:	60bb      	str	r3, [r7, #8]
			for (n = 16; n; n--) {
 8000f54:	2310      	movs	r3, #16
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	e021      	b.n	8000f9e <ff_convert+0x9e>
				i = li + (hi - li) / 2;
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	0fda      	lsrs	r2, r3, #31
 8000f62:	4413      	add	r3, r2
 8000f64:	105b      	asrs	r3, r3, #1
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
				if (src == uni2sjis[i * 2]) break;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <ff_convert+0xd4>)
 8000f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d013      	beq.n	8000fa6 <ff_convert+0xa6>
				if (src > uni2sjis[i * 2])
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <ff_convert+0xd4>)
 8000f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f88:	88fa      	ldrh	r2, [r7, #6]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d902      	bls.n	8000f94 <ff_convert+0x94>
					li = i;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	e001      	b.n	8000f98 <ff_convert+0x98>
				else
					hi = i;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	60bb      	str	r3, [r7, #8]
			for (n = 16; n; n--) {
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1da      	bne.n	8000f5a <ff_convert+0x5a>
 8000fa4:	e000      	b.n	8000fa8 <ff_convert+0xa8>
				if (src == uni2sjis[i * 2]) break;
 8000fa6:	bf00      	nop
			}
			c = n ? uni2sjis[i * 2 + 1] : 0;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <ff_convert+0xbc>
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <ff_convert+0xd4>)
 8000fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fba:	e000      	b.n	8000fbe <ff_convert+0xbe>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	837b      	strh	r3, [r7, #26]
		}
#endif
	}

	return c;
 8000fc0:	8b7b      	ldrh	r3, [r7, #26]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	0800c9f2 	.word	0x0800c9f2
 8000fd4:	0800c9f0 	.word	0x0800c9f0

08000fd8 <ff_wtoupper>:

WCHAR ff_wtoupper(WCHAR chr)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
	if(chr >= 'a' && chr <= 'z')
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	2b60      	cmp	r3, #96	; 0x60
 8000fe6:	d906      	bls.n	8000ff6 <ff_wtoupper+0x1e>
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	2b7a      	cmp	r3, #122	; 0x7a
 8000fec:	d803      	bhi.n	8000ff6 <ff_wtoupper+0x1e>
		return (chr - 32);
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	3b20      	subs	r3, #32
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	e000      	b.n	8000ff8 <ff_wtoupper+0x20>
	else
		return chr;
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <Mount_SD>:
//Debugging
const short sdioPrints = 0;


FRESULT Mount_SD (const TCHAR* path)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	480e      	ldr	r0, [pc, #56]	; (800104c <Mount_SD+0x48>)
 8001012:	f007 f9b9 	bl	8008388 <f_mount>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <Mount_SD+0x4c>)
 800101c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <Mount_SD+0x4c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d006      	beq.n	8001034 <Mount_SD+0x30>
		if(sdioPrints) printf("ERROR!!! in mounting SD CARD...\n");
 8001026:	2300      	movs	r3, #0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d009      	beq.n	8001040 <Mount_SD+0x3c>
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <Mount_SD+0x50>)
 800102e:	f008 feb3 	bl	8009d98 <puts>
 8001032:	e005      	b.n	8001040 <Mount_SD+0x3c>
	}
	else if(sdioPrints) printf("SD CARD mounted successfully...\n");
 8001034:	2300      	movs	r3, #0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <Mount_SD+0x3c>
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <Mount_SD+0x54>)
 800103c:	f008 feac 	bl	8009d98 <puts>

	return fresult;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <Mount_SD+0x4c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000434 	.word	0x20000434
 8001050:	20000678 	.word	0x20000678
 8001054:	0800c128 	.word	0x0800c128
 8001058:	0800c148 	.word	0x0800c148

0800105c <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001064:	2201      	movs	r2, #1
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	2000      	movs	r0, #0
 800106a:	f007 f98d 	bl	8008388 <f_mount>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <Unmount_SD+0x44>)
 8001074:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <Unmount_SD+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d106      	bne.n	800108c <Unmount_SD+0x30>
		if(sdioPrints) printf("SD CARD UNMOUNTED successfully...\n\n");
 800107e:	2300      	movs	r3, #0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d009      	beq.n	8001098 <Unmount_SD+0x3c>
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <Unmount_SD+0x48>)
 8001086:	f008 fe87 	bl	8009d98 <puts>
	}
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 800108a:	e005      	b.n	8001098 <Unmount_SD+0x3c>
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 800108c:	2300      	movs	r3, #0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <Unmount_SD+0x3c>
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <Unmount_SD+0x4c>)
 8001094:	f008 fe80 	bl	8009d98 <puts>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000678 	.word	0x20000678
 80010a4:	0800c168 	.word	0x0800c168
 80010a8:	0800c18c 	.word	0x0800c18c

080010ac <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	; 0x38
 80010b0:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 80010b2:	2014      	movs	r0, #20
 80010b4:	f008 f8be 	bl	8009234 <malloc>
 80010b8:	4603      	mov	r3, r0
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 80010bc:	4a28      	ldr	r2, [pc, #160]	; (8001160 <Format_SD+0xb4>)
 80010be:	4929      	ldr	r1, [pc, #164]	; (8001164 <Format_SD+0xb8>)
 80010c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010c2:	f008 feb5 	bl	8009e30 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80010c6:	463b      	mov	r3, r7
 80010c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010ca:	4618      	mov	r0, r3
 80010cc:	f007 fe09 	bl	8008ce2 <f_opendir>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <Format_SD+0xbc>)
 80010d6:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <Format_SD+0xbc>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d136      	bne.n	800114e <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80010e0:	463b      	mov	r3, r7
 80010e2:	4922      	ldr	r1, [pc, #136]	; (800116c <Format_SD+0xc0>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f007 fec0 	bl	8008e6a <f_readdir>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <Format_SD+0xbc>)
 80010f0:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <Format_SD+0xbc>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d125      	bne.n	8001146 <Format_SD+0x9a>
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <Format_SD+0xc0>)
 80010fc:	7d9b      	ldrb	r3, [r3, #22]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d021      	beq.n	8001146 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <Format_SD+0xc0>)
 8001104:	7a1b      	ldrb	r3, [r3, #8]
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	d011      	beq.n	8001132 <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800110e:	4918      	ldr	r1, [pc, #96]	; (8001170 <Format_SD+0xc4>)
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <Format_SD+0xc8>)
 8001112:	f7ff f87d 	bl	8000210 <strcmp>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d012      	beq.n	8001142 <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 800111c:	4814      	ldr	r0, [pc, #80]	; (8001170 <Format_SD+0xc4>)
 800111e:	f007 ff41 	bl	8008fa4 <f_unlink>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <Format_SD+0xbc>)
 8001128:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <Format_SD+0xbc>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b07      	cmp	r3, #7
 8001130:	e7d6      	b.n	80010e0 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8001132:	480f      	ldr	r0, [pc, #60]	; (8001170 <Format_SD+0xc4>)
 8001134:	f007 ff36 	bl	8008fa4 <f_unlink>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <Format_SD+0xbc>)
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e7ce      	b.n	80010e0 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001142:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001144:	e7cc      	b.n	80010e0 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8001146:	463b      	mov	r3, r7
 8001148:	4618      	mov	r0, r3
 800114a:	f007 fe68 	bl	8008e1e <f_closedir>
    }
    free(path);
 800114e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001150:	f008 f878 	bl	8009244 <free>
    return fresult;
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <Format_SD+0xbc>)
 8001156:	781b      	ldrb	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3738      	adds	r7, #56	; 0x38
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	0800c1dc 	.word	0x0800c1dc
 8001164:	0800c1ac 	.word	0x0800c1ac
 8001168:	20000678 	.word	0x20000678
 800116c:	2000031c 	.word	0x2000031c
 8001170:	20000332 	.word	0x20000332
 8001174:	0800c1b0 	.word	0x0800c1b0

08001178 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001180:	494a      	ldr	r1, [pc, #296]	; (80012ac <Create_File+0x134>)
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f007 fec9 	bl	8008f1a <f_stat>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <Create_File+0x138>)
 800118e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001190:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <Create_File+0x138>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d115      	bne.n	80011c4 <Create_File+0x4c>
	{
		char *buf = malloc(100*sizeof(char));
 8001198:	2064      	movs	r0, #100	; 0x64
 800119a:	f008 f84b 	bl	8009234 <malloc>
 800119e:	4603      	mov	r3, r0
 80011a0:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",name);
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4943      	ldr	r1, [pc, #268]	; (80012b4 <Create_File+0x13c>)
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f008 fe42 	bl	8009e30 <siprintf>
		if(sdioPrints) printf(buf);
 80011ac:	2300      	movs	r3, #0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <Create_File+0x40>
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f008 fd6a 	bl	8009c8c <iprintf>
		free(buf);
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f008 f843 	bl	8009244 <free>
	    return fresult;
 80011be:	4b3c      	ldr	r3, [pc, #240]	; (80012b0 <Create_File+0x138>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	e06f      	b.n	80012a4 <Create_File+0x12c>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80011c4:	220b      	movs	r2, #11
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	483b      	ldr	r0, [pc, #236]	; (80012b8 <Create_File+0x140>)
 80011ca:	f007 f923 	bl	8008414 <f_open>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b37      	ldr	r3, [pc, #220]	; (80012b0 <Create_File+0x138>)
 80011d4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011d6:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <Create_File+0x138>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d018      	beq.n	8001210 <Create_File+0x98>
		{
			char *buf = malloc(100*sizeof(char));
 80011de:	2064      	movs	r0, #100	; 0x64
 80011e0:	f008 f828 	bl	8009234 <malloc>
 80011e4:	4603      	mov	r3, r0
 80011e6:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n", fresult, name);
 80011e8:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <Create_File+0x138>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4932      	ldr	r1, [pc, #200]	; (80012bc <Create_File+0x144>)
 80011f2:	6938      	ldr	r0, [r7, #16]
 80011f4:	f008 fe1c 	bl	8009e30 <siprintf>
			if(sdioPrints) printf(buf);
 80011f8:	2300      	movs	r3, #0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d002      	beq.n	8001204 <Create_File+0x8c>
 80011fe:	6938      	ldr	r0, [r7, #16]
 8001200:	f008 fd44 	bl	8009c8c <iprintf>
			free(buf);
 8001204:	6938      	ldr	r0, [r7, #16]
 8001206:	f008 f81d 	bl	8009244 <free>
		    return fresult;
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <Create_File+0x138>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	e049      	b.n	80012a4 <Create_File+0x12c>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f008 f80f 	bl	8009234 <malloc>
 8001216:	4603      	mov	r3, r0
 8001218:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4928      	ldr	r1, [pc, #160]	; (80012c0 <Create_File+0x148>)
 800121e:	69f8      	ldr	r0, [r7, #28]
 8001220:	f008 fe06 	bl	8009e30 <siprintf>
			if(sdioPrints) printf(buf);
 8001224:	2300      	movs	r3, #0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <Create_File+0xb8>
 800122a:	69f8      	ldr	r0, [r7, #28]
 800122c:	f008 fd2e 	bl	8009c8c <iprintf>
			free(buf);
 8001230:	69f8      	ldr	r0, [r7, #28]
 8001232:	f008 f807 	bl	8009244 <free>
		}

		fresult = f_close(&fil);
 8001236:	4820      	ldr	r0, [pc, #128]	; (80012b8 <Create_File+0x140>)
 8001238:	f007 fd29 	bl	8008c8e <f_close>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <Create_File+0x138>)
 8001242:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <Create_File+0x138>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d016      	beq.n	800127a <Create_File+0x102>
		{
			char *buf = malloc(100*sizeof(char));
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f007 fff1 	bl	8009234 <malloc>
 8001252:	4603      	mov	r3, r0
 8001254:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <Create_File+0x138>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4919      	ldr	r1, [pc, #100]	; (80012c4 <Create_File+0x14c>)
 8001260:	6978      	ldr	r0, [r7, #20]
 8001262:	f008 fde5 	bl	8009e30 <siprintf>
			if(sdioPrints) printf(buf);
 8001266:	2300      	movs	r3, #0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <Create_File+0xfa>
 800126c:	6978      	ldr	r0, [r7, #20]
 800126e:	f008 fd0d 	bl	8009c8c <iprintf>
			free(buf);
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f007 ffe6 	bl	8009244 <free>
 8001278:	e012      	b.n	80012a0 <Create_File+0x128>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f007 ffda 	bl	8009234 <malloc>
 8001280:	4603      	mov	r3, r0
 8001282:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	4910      	ldr	r1, [pc, #64]	; (80012c8 <Create_File+0x150>)
 8001288:	69b8      	ldr	r0, [r7, #24]
 800128a:	f008 fdd1 	bl	8009e30 <siprintf>
			if(sdioPrints) printf(buf);
 800128e:	2300      	movs	r3, #0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <Create_File+0x122>
 8001294:	69b8      	ldr	r0, [r7, #24]
 8001296:	f008 fcf9 	bl	8009c8c <iprintf>
			free(buf);
 800129a:	69b8      	ldr	r0, [r7, #24]
 800129c:	f007 ffd2 	bl	8009244 <free>
		}
	}
    return fresult;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <Create_File+0x138>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000031c 	.word	0x2000031c
 80012b0:	20000678 	.word	0x20000678
 80012b4:	0800c350 	.word	0x0800c350
 80012b8:	20000680 	.word	0x20000680
 80012bc:	0800c384 	.word	0x0800c384
 80012c0:	0800c3ac 	.word	0x0800c3ac
 80012c4:	0800c3ec 	.word	0x0800c3ec
 80012c8:	0800c330 	.word	0x0800c330

080012cc <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80012d6:	495f      	ldr	r1, [pc, #380]	; (8001454 <Update_File+0x188>)
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f007 fe1e 	bl	8008f1a <f_stat>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <Update_File+0x18c>)
 80012e4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80012e6:	4b5c      	ldr	r3, [pc, #368]	; (8001458 <Update_File+0x18c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d015      	beq.n	800131a <Update_File+0x4e>
	{
		char *buf = malloc(100*sizeof(char));
 80012ee:	2064      	movs	r0, #100	; 0x64
 80012f0:	f007 ffa0 	bl	8009234 <malloc>
 80012f4:	4603      	mov	r3, r0
 80012f6:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n", name);
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4958      	ldr	r1, [pc, #352]	; (800145c <Update_File+0x190>)
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f008 fd97 	bl	8009e30 <siprintf>
		if(sdioPrints) printf (buf);
 8001302:	2300      	movs	r3, #0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <Update_File+0x42>
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f008 fcbf 	bl	8009c8c <iprintf>
		free(buf);
 800130e:	68b8      	ldr	r0, [r7, #8]
 8001310:	f007 ff98 	bl	8009244 <free>
	    return fresult;
 8001314:	4b50      	ldr	r3, [pc, #320]	; (8001458 <Update_File+0x18c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	e097      	b.n	800144a <Update_File+0x17e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 800131a:	2232      	movs	r2, #50	; 0x32
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4850      	ldr	r0, [pc, #320]	; (8001460 <Update_File+0x194>)
 8001320:	f007 f878 	bl	8008414 <f_open>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <Update_File+0x18c>)
 800132a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800132c:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <Update_File+0x18c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d018      	beq.n	8001366 <Update_File+0x9a>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001334:	2064      	movs	r0, #100	; 0x64
 8001336:	f007 ff7d 	bl	8009234 <malloc>
 800133a:	4603      	mov	r3, r0
 800133c:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n", fresult, name);
 800133e:	4b46      	ldr	r3, [pc, #280]	; (8001458 <Update_File+0x18c>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4947      	ldr	r1, [pc, #284]	; (8001464 <Update_File+0x198>)
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f008 fd71 	bl	8009e30 <siprintf>
	    	if(sdioPrints) printf(buf);
 800134e:	2300      	movs	r3, #0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <Update_File+0x8e>
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f008 fc99 	bl	8009c8c <iprintf>
	        free(buf);
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f007 ff72 	bl	8009244 <free>
	        return fresult;
 8001360:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <Update_File+0x18c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	e071      	b.n	800144a <Update_File+0x17e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001366:	6838      	ldr	r0, [r7, #0]
 8001368:	f7fe ff5c 	bl	8000224 <strlen>
 800136c:	4602      	mov	r2, r0
 800136e:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <Update_File+0x19c>)
 8001370:	6839      	ldr	r1, [r7, #0]
 8001372:	483b      	ldr	r0, [pc, #236]	; (8001460 <Update_File+0x194>)
 8001374:	f007 fa98 	bl	80088a8 <f_write>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <Update_File+0x18c>)
 800137e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001380:	4b35      	ldr	r3, [pc, #212]	; (8001458 <Update_File+0x18c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d016      	beq.n	80013b6 <Update_File+0xea>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001388:	2064      	movs	r0, #100	; 0x64
 800138a:	f007 ff53 	bl	8009234 <malloc>
 800138e:	4603      	mov	r3, r0
 8001390:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n", fresult, name);
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <Update_File+0x18c>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4934      	ldr	r1, [pc, #208]	; (800146c <Update_File+0x1a0>)
 800139c:	69b8      	ldr	r0, [r7, #24]
 800139e:	f008 fd47 	bl	8009e30 <siprintf>
	    	if(sdioPrints) printf(buf);
 80013a2:	2300      	movs	r3, #0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <Update_File+0xe2>
 80013a8:	69b8      	ldr	r0, [r7, #24]
 80013aa:	f008 fc6f 	bl	8009c8c <iprintf>
	    	free(buf);
 80013ae:	69b8      	ldr	r0, [r7, #24]
 80013b0:	f007 ff48 	bl	8009244 <free>
 80013b4:	e012      	b.n	80013dc <Update_File+0x110>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f007 ff3c 	bl	8009234 <malloc>
 80013bc:	4603      	mov	r3, r0
 80013be:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	492b      	ldr	r1, [pc, #172]	; (8001470 <Update_File+0x1a4>)
 80013c4:	69f8      	ldr	r0, [r7, #28]
 80013c6:	f008 fd33 	bl	8009e30 <siprintf>
	    	if(sdioPrints) printf(buf);
 80013ca:	2300      	movs	r3, #0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <Update_File+0x10a>
 80013d0:	69f8      	ldr	r0, [r7, #28]
 80013d2:	f008 fc5b 	bl	8009c8c <iprintf>
	    	free(buf);
 80013d6:	69f8      	ldr	r0, [r7, #28]
 80013d8:	f007 ff34 	bl	8009244 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80013dc:	4820      	ldr	r0, [pc, #128]	; (8001460 <Update_File+0x194>)
 80013de:	f007 fc56 	bl	8008c8e <f_close>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <Update_File+0x18c>)
 80013e8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <Update_File+0x18c>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d016      	beq.n	8001420 <Update_File+0x154>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013f2:	2064      	movs	r0, #100	; 0x64
 80013f4:	f007 ff1e 	bl	8009234 <malloc>
 80013f8:	4603      	mov	r3, r0
 80013fa:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n", fresult, name);
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <Update_File+0x18c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	491b      	ldr	r1, [pc, #108]	; (8001474 <Update_File+0x1a8>)
 8001406:	6938      	ldr	r0, [r7, #16]
 8001408:	f008 fd12 	bl	8009e30 <siprintf>
	    	if(sdioPrints) printf(buf);
 800140c:	2300      	movs	r3, #0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <Update_File+0x14c>
 8001412:	6938      	ldr	r0, [r7, #16]
 8001414:	f008 fc3a 	bl	8009c8c <iprintf>
	    	free(buf);
 8001418:	6938      	ldr	r0, [r7, #16]
 800141a:	f007 ff13 	bl	8009244 <free>
 800141e:	e012      	b.n	8001446 <Update_File+0x17a>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001420:	2064      	movs	r0, #100	; 0x64
 8001422:	f007 ff07 	bl	8009234 <malloc>
 8001426:	4603      	mov	r3, r0
 8001428:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4912      	ldr	r1, [pc, #72]	; (8001478 <Update_File+0x1ac>)
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f008 fcfe 	bl	8009e30 <siprintf>
	    	if(sdioPrints) printf(buf);
 8001434:	2300      	movs	r3, #0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <Update_File+0x174>
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f008 fc26 	bl	8009c8c <iprintf>
	    	free(buf);
 8001440:	6978      	ldr	r0, [r7, #20]
 8001442:	f007 feff 	bl	8009244 <free>
	     }
	}
    return fresult;
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <Update_File+0x18c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	2000031c 	.word	0x2000031c
 8001458:	20000678 	.word	0x20000678
 800145c:	0800c1e0 	.word	0x0800c1e0
 8001460:	20000680 	.word	0x20000680
 8001464:	0800c200 	.word	0x0800c200
 8001468:	20000670 	.word	0x20000670
 800146c:	0800c410 	.word	0x0800c410
 8001470:	0800c438 	.word	0x0800c438
 8001474:	0800c308 	.word	0x0800c308
 8001478:	0800c330 	.word	0x0800c330

0800147c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001484:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001488:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001494:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001498:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800149c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00b      	beq.n	80014bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014a4:	e000      	b.n	80014a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f9      	beq.n	80014a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e009      	b.n	80014f0 <_write+0x26>
		ITM_SendChar((*ptr++));
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffc9 	bl	800147c <ITM_SendChar>
	for(int i=0; i<len; i++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf1      	blt.n	80014dc <_write+0x12>

	return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b099      	sub	sp, #100	; 0x64
 8001508:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150a:	f000 ffc5 	bl	8002498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150e:	f000 f981 	bl	8001814 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001512:	f000 fa2b 	bl	800196c <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8001516:	f000 fa09 	bl	800192c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800151a:	f004 fa5b 	bl	80059d4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	/* Initialize all configured peripherals */
    MX_GPIO_Init();
 800151e:	f000 fa25 	bl	800196c <MX_GPIO_Init>
    MX_SDIO_SD_Init();
 8001522:	f000 fa03 	bl	800192c <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8001526:	f004 fa55 	bl	80059d4 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */

    //Check if the card is already inserted or not
    if(Mount_SD("/")==FR_OK) {
 800152a:	48a3      	ldr	r0, [pc, #652]	; (80017b8 <main+0x2b4>)
 800152c:	f7ff fd6a 	bl	8001004 <Mount_SD>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10a      	bne.n	800154c <main+0x48>
		detect = 1;
 8001536:	4ba1      	ldr	r3, [pc, #644]	; (80017bc <main+0x2b8>)
 8001538:	2201      	movs	r2, #1
 800153a:	801a      	strh	r2, [r3, #0]
		printf("%d) Card is already detected\n\n",detect);
 800153c:	4b9f      	ldr	r3, [pc, #636]	; (80017bc <main+0x2b8>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	4619      	mov	r1, r3
 8001544:	489e      	ldr	r0, [pc, #632]	; (80017c0 <main+0x2bc>)
 8001546:	f008 fba1 	bl	8009c8c <iprintf>
 800154a:	e009      	b.n	8001560 <main+0x5c>
	}
	else {
		detect = 0;
 800154c:	4b9b      	ldr	r3, [pc, #620]	; (80017bc <main+0x2b8>)
 800154e:	2200      	movs	r2, #0
 8001550:	801a      	strh	r2, [r3, #0]
		printf("%d) No card detected\n\n",detect);
 8001552:	4b9a      	ldr	r3, [pc, #616]	; (80017bc <main+0x2b8>)
 8001554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001558:	4619      	mov	r1, r3
 800155a:	489a      	ldr	r0, [pc, #616]	; (80017c4 <main+0x2c0>)
 800155c:	f008 fb96 	bl	8009c8c <iprintf>
	}

	Unmount_SD("/");
 8001560:	4895      	ldr	r0, [pc, #596]	; (80017b8 <main+0x2b4>)
 8001562:	f7ff fd7b 	bl	800105c <Unmount_SD>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8001566:	2140      	movs	r1, #64	; 0x40
 8001568:	4897      	ldr	r0, [pc, #604]	; (80017c8 <main+0x2c4>)
 800156a:	f001 faa5 	bl	8002ab8 <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 8103 	beq.w	800177c <main+0x278>
			Unmount_SD("/");
 8001576:	4890      	ldr	r0, [pc, #576]	; (80017b8 <main+0x2b4>)
 8001578:	f7ff fd70 	bl	800105c <Unmount_SD>
			fresult = Mount_SD("/");
 800157c:	488e      	ldr	r0, [pc, #568]	; (80017b8 <main+0x2b4>)
 800157e:	f7ff fd41 	bl	8001004 <Mount_SD>
 8001582:	4603      	mov	r3, r0
 8001584:	461a      	mov	r2, r3
 8001586:	4b91      	ldr	r3, [pc, #580]	; (80017cc <main+0x2c8>)
 8001588:	701a      	strb	r2, [r3, #0]
			if (fresult == FR_OK) {
 800158a:	4b90      	ldr	r3, [pc, #576]	; (80017cc <main+0x2c8>)
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	f040 80e3 	bne.w	800175a <main+0x256>

				detect = 1;
 8001594:	4b89      	ldr	r3, [pc, #548]	; (80017bc <main+0x2b8>)
 8001596:	2201      	movs	r2, #1
 8001598:	801a      	strh	r2, [r3, #0]
				if (((previousDetect == 0 && detect == 1) || !FileName)) {
 800159a:	4b8d      	ldr	r3, [pc, #564]	; (80017d0 <main+0x2cc>)
 800159c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d104      	bne.n	80015ae <main+0xaa>
 80015a4:	4b85      	ldr	r3, [pc, #532]	; (80017bc <main+0x2b8>)
 80015a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d004      	beq.n	80015b8 <main+0xb4>
 80015ae:	4b89      	ldr	r3, [pc, #548]	; (80017d4 <main+0x2d0>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 80b8 	bne.w	8001728 <main+0x224>
					printf("Creating a new file...\n");
 80015b8:	4887      	ldr	r0, [pc, #540]	; (80017d8 <main+0x2d4>)
 80015ba:	f008 fbed 	bl	8009d98 <puts>

					//Create new file with a GPS naming convention
					second = 53;
 80015be:	4b87      	ldr	r3, [pc, #540]	; (80017dc <main+0x2d8>)
 80015c0:	2235      	movs	r2, #53	; 0x35
 80015c2:	601a      	str	r2, [r3, #0]
					minute = 33;
 80015c4:	4b86      	ldr	r3, [pc, #536]	; (80017e0 <main+0x2dc>)
 80015c6:	2221      	movs	r2, #33	; 0x21
 80015c8:	601a      	str	r2, [r3, #0]
					hour = 14;
 80015ca:	4b86      	ldr	r3, [pc, #536]	; (80017e4 <main+0x2e0>)
 80015cc:	220e      	movs	r2, #14
 80015ce:	601a      	str	r2, [r3, #0]
					day = 24;
 80015d0:	4b85      	ldr	r3, [pc, #532]	; (80017e8 <main+0x2e4>)
 80015d2:	2218      	movs	r2, #24
 80015d4:	601a      	str	r2, [r3, #0]
					month = 3;
 80015d6:	4b85      	ldr	r3, [pc, #532]	; (80017ec <main+0x2e8>)
 80015d8:	2203      	movs	r2, #3
 80015da:	601a      	str	r2, [r3, #0]
					year = 2021;
 80015dc:	4b84      	ldr	r3, [pc, #528]	; (80017f0 <main+0x2ec>)
 80015de:	f240 72e5 	movw	r2, #2021	; 0x7e5
 80015e2:	601a      	str	r2, [r3, #0]
					char dayS[12], monthS[12], yearS[12], hourS[12], minuteS[12], secondS[12];
					sprintf(dayS, "%d", indx);
 80015e4:	4b83      	ldr	r3, [pc, #524]	; (80017f4 <main+0x2f0>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015ec:	4982      	ldr	r1, [pc, #520]	; (80017f8 <main+0x2f4>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f008 fc1e 	bl	8009e30 <siprintf>
					sprintf(monthS, "%d", month);
 80015f4:	4b7d      	ldr	r3, [pc, #500]	; (80017ec <main+0x2e8>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015fc:	497e      	ldr	r1, [pc, #504]	; (80017f8 <main+0x2f4>)
 80015fe:	4618      	mov	r0, r3
 8001600:	f008 fc16 	bl	8009e30 <siprintf>
					sprintf(yearS, "%d", year);
 8001604:	4b7a      	ldr	r3, [pc, #488]	; (80017f0 <main+0x2ec>)
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	497a      	ldr	r1, [pc, #488]	; (80017f8 <main+0x2f4>)
 800160e:	4618      	mov	r0, r3
 8001610:	f008 fc0e 	bl	8009e30 <siprintf>
					sprintf(hourS, "%d", hour);
 8001614:	4b73      	ldr	r3, [pc, #460]	; (80017e4 <main+0x2e0>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	f107 0318 	add.w	r3, r7, #24
 800161c:	4976      	ldr	r1, [pc, #472]	; (80017f8 <main+0x2f4>)
 800161e:	4618      	mov	r0, r3
 8001620:	f008 fc06 	bl	8009e30 <siprintf>
					sprintf(minuteS, "%d", minute);
 8001624:	4b6e      	ldr	r3, [pc, #440]	; (80017e0 <main+0x2dc>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	4972      	ldr	r1, [pc, #456]	; (80017f8 <main+0x2f4>)
 800162e:	4618      	mov	r0, r3
 8001630:	f008 fbfe 	bl	8009e30 <siprintf>
					sprintf(secondS, "%d", second);
 8001634:	4b69      	ldr	r3, [pc, #420]	; (80017dc <main+0x2d8>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	463b      	mov	r3, r7
 800163a:	496f      	ldr	r1, [pc, #444]	; (80017f8 <main+0x2f4>)
 800163c:	4618      	mov	r0, r3
 800163e:	f008 fbf7 	bl	8009e30 <siprintf>
					lenF = strlen("DFR_")+strlen(dayS)+strlen("-")+strlen(monthS)+strlen("-")+strlen(yearS)+strlen("_")+strlen(secondS)+strlen("-")+strlen(minuteS)+strlen("-")+strlen(hourS)+strlen(".csv")+1;
 8001642:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fdec 	bl	8000224 <strlen>
 800164c:	4604      	mov	r4, r0
 800164e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001652:	4618      	mov	r0, r3
 8001654:	f7fe fde6 	bl	8000224 <strlen>
 8001658:	4603      	mov	r3, r0
 800165a:	441c      	add	r4, r3
 800165c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fddf 	bl	8000224 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	441c      	add	r4, r3
 800166a:	463b      	mov	r3, r7
 800166c:	4618      	mov	r0, r3
 800166e:	f7fe fdd9 	bl	8000224 <strlen>
 8001672:	4603      	mov	r3, r0
 8001674:	441c      	add	r4, r3
 8001676:	f107 030c 	add.w	r3, r7, #12
 800167a:	4618      	mov	r0, r3
 800167c:	f7fe fdd2 	bl	8000224 <strlen>
 8001680:	4603      	mov	r3, r0
 8001682:	441c      	add	r4, r3
 8001684:	f107 0318 	add.w	r3, r7, #24
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fdcb 	bl	8000224 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	4423      	add	r3, r4
 8001692:	330e      	adds	r3, #14
 8001694:	461a      	mov	r2, r3
 8001696:	4b59      	ldr	r3, [pc, #356]	; (80017fc <main+0x2f8>)
 8001698:	601a      	str	r2, [r3, #0]
					FileName = (char*)malloc(lenF * sizeof(char));
 800169a:	4b58      	ldr	r3, [pc, #352]	; (80017fc <main+0x2f8>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f007 fdc8 	bl	8009234 <malloc>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b4a      	ldr	r3, [pc, #296]	; (80017d4 <main+0x2d0>)
 80016aa:	601a      	str	r2, [r3, #0]
					snprintf(FileName,lenF,"DFR_%s-%s-%s_%s-%s-%s.CSV", dayS, monthS, yearS, secondS, minuteS, hourS);
 80016ac:	4b49      	ldr	r3, [pc, #292]	; (80017d4 <main+0x2d0>)
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	4b52      	ldr	r3, [pc, #328]	; (80017fc <main+0x2f8>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4619      	mov	r1, r3
 80016b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80016ba:	f107 0318 	add.w	r3, r7, #24
 80016be:	9304      	str	r3, [sp, #16]
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	9303      	str	r3, [sp, #12]
 80016c6:	463b      	mov	r3, r7
 80016c8:	9302      	str	r3, [sp, #8]
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	9301      	str	r3, [sp, #4]
 80016d0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	4613      	mov	r3, r2
 80016d8:	4a49      	ldr	r2, [pc, #292]	; (8001800 <main+0x2fc>)
 80016da:	f008 fb75 	bl	8009dc8 <sniprintf>


					SD_Check(fresult);
 80016de:	4b3b      	ldr	r3, [pc, #236]	; (80017cc <main+0x2c8>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f9de 	bl	8001aa4 <SD_Check>
					Format_SD();
 80016e8:	f7ff fce0 	bl	80010ac <Format_SD>
					fresult = Create_File(FileName);
 80016ec:	4b39      	ldr	r3, [pc, #228]	; (80017d4 <main+0x2d0>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4618      	mov	r0, r3
 80016f2:	f7ff fd41 	bl	8001178 <Create_File>
 80016f6:	4603      	mov	r3, r0
 80016f8:	461a      	mov	r2, r3
 80016fa:	4b34      	ldr	r3, [pc, #208]	; (80017cc <main+0x2c8>)
 80016fc:	701a      	strb	r2, [r3, #0]
					SD_Check(fresult);
 80016fe:	4b33      	ldr	r3, [pc, #204]	; (80017cc <main+0x2c8>)
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f000 f9ce 	bl	8001aa4 <SD_Check>
					Unmount_SD("/");
 8001708:	482b      	ldr	r0, [pc, #172]	; (80017b8 <main+0x2b4>)
 800170a:	f7ff fca7 	bl	800105c <Unmount_SD>

					csvHeader(FileName, lenF);
 800170e:	4b31      	ldr	r3, [pc, #196]	; (80017d4 <main+0x2d0>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a3a      	ldr	r2, [pc, #232]	; (80017fc <main+0x2f8>)
 8001714:	6812      	ldr	r2, [r2, #0]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f000 f9ef 	bl	8001afc <csvHeader>

					previousDetect = detect;
 800171e:	4b27      	ldr	r3, [pc, #156]	; (80017bc <main+0x2b8>)
 8001720:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001724:	4b2a      	ldr	r3, [pc, #168]	; (80017d0 <main+0x2cc>)
 8001726:	801a      	strh	r2, [r3, #0]

				}



				HAL_GPIO_WritePin(GPIOA, LD2_Pin, 1);
 8001728:	2201      	movs	r2, #1
 800172a:	2120      	movs	r1, #32
 800172c:	4835      	ldr	r0, [pc, #212]	; (8001804 <main+0x300>)
 800172e:	f001 f9db 	bl	8002ae8 <HAL_GPIO_WritePin>
				csvUpdate(FileName, lenF);
 8001732:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <main+0x2d0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a31      	ldr	r2, [pc, #196]	; (80017fc <main+0x2f8>)
 8001738:	6812      	ldr	r2, [r2, #0]
 800173a:	4611      	mov	r1, r2
 800173c:	4618      	mov	r0, r3
 800173e:	f000 fadf 	bl	8001d00 <csvUpdate>
				indx++;
 8001742:	4b2c      	ldr	r3, [pc, #176]	; (80017f4 <main+0x2f0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a2a      	ldr	r2, [pc, #168]	; (80017f4 <main+0x2f0>)
 800174a:	6013      	str	r3, [r2, #0]
				printf("\n Count: %d \n", indx);
 800174c:	4b29      	ldr	r3, [pc, #164]	; (80017f4 <main+0x2f0>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4619      	mov	r1, r3
 8001752:	482d      	ldr	r0, [pc, #180]	; (8001808 <main+0x304>)
 8001754:	f008 fa9a 	bl	8009c8c <iprintf>
 8001758:	e705      	b.n	8001566 <main+0x62>

			}
			else {
				detect = 0;
 800175a:	4b18      	ldr	r3, [pc, #96]	; (80017bc <main+0x2b8>)
 800175c:	2200      	movs	r2, #0
 800175e:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, LD2_Pin, 0);
 8001760:	2200      	movs	r2, #0
 8001762:	2120      	movs	r1, #32
 8001764:	4827      	ldr	r0, [pc, #156]	; (8001804 <main+0x300>)
 8001766:	f001 f9bf 	bl	8002ae8 <HAL_GPIO_WritePin>
				printf("ERROR - Failed to mount...\n");
 800176a:	4828      	ldr	r0, [pc, #160]	; (800180c <main+0x308>)
 800176c:	f008 fb14 	bl	8009d98 <puts>

				previousDetect = detect;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <main+0x2b8>)
 8001772:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001776:	4b16      	ldr	r3, [pc, #88]	; (80017d0 <main+0x2cc>)
 8001778:	801a      	strh	r2, [r3, #0]
 800177a:	e6f4      	b.n	8001566 <main+0x62>
			}
		}
		else {
			if(FileName) {
 800177c:	4b15      	ldr	r3, [pc, #84]	; (80017d4 <main+0x2d0>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d007      	beq.n	8001794 <main+0x290>
				free(FileName);
 8001784:	4b13      	ldr	r3, [pc, #76]	; (80017d4 <main+0x2d0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f007 fd5b 	bl	8009244 <free>
				FileName = NULL;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <main+0x2d0>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]
			}

			detect = 0;
 8001794:	4b09      	ldr	r3, [pc, #36]	; (80017bc <main+0x2b8>)
 8001796:	2200      	movs	r2, #0
 8001798:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, LD2_Pin, 0);
 800179a:	2200      	movs	r2, #0
 800179c:	2120      	movs	r1, #32
 800179e:	4819      	ldr	r0, [pc, #100]	; (8001804 <main+0x300>)
 80017a0:	f001 f9a2 	bl	8002ae8 <HAL_GPIO_WritePin>
			printf("ERROR - No card inserted...\n");
 80017a4:	481a      	ldr	r0, [pc, #104]	; (8001810 <main+0x30c>)
 80017a6:	f008 faf7 	bl	8009d98 <puts>

			previousDetect = detect;
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <main+0x2b8>)
 80017ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80017b0:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <main+0x2cc>)
 80017b2:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 80017b4:	e6d7      	b.n	8001566 <main+0x62>
 80017b6:	bf00      	nop
 80017b8:	0800c524 	.word	0x0800c524
 80017bc:	200002c6 	.word	0x200002c6
 80017c0:	0800c528 	.word	0x0800c528
 80017c4:	0800c548 	.word	0x0800c548
 80017c8:	40020400 	.word	0x40020400
 80017cc:	20000678 	.word	0x20000678
 80017d0:	200002c8 	.word	0x200002c8
 80017d4:	200002cc 	.word	0x200002cc
 80017d8:	0800c560 	.word	0x0800c560
 80017dc:	200008dc 	.word	0x200008dc
 80017e0:	200008e4 	.word	0x200008e4
 80017e4:	20000974 	.word	0x20000974
 80017e8:	20000a28 	.word	0x20000a28
 80017ec:	200008d8 	.word	0x200008d8
 80017f0:	20000a1c 	.word	0x20000a1c
 80017f4:	200002d4 	.word	0x200002d4
 80017f8:	0800c578 	.word	0x0800c578
 80017fc:	200002d0 	.word	0x200002d0
 8001800:	0800c57c 	.word	0x0800c57c
 8001804:	40020000 	.word	0x40020000
 8001808:	0800c598 	.word	0x0800c598
 800180c:	0800c5a8 	.word	0x0800c5a8
 8001810:	0800c5c4 	.word	0x0800c5c4

08001814 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b0ac      	sub	sp, #176	; 0xb0
 8001818:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800181a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800181e:	2234      	movs	r2, #52	; 0x34
 8001820:	2100      	movs	r1, #0
 8001822:	4618      	mov	r0, r3
 8001824:	f007 fd16 	bl	8009254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001828:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	60da      	str	r2, [r3, #12]
 8001836:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	225c      	movs	r2, #92	; 0x5c
 800183e:	2100      	movs	r1, #0
 8001840:	4618      	mov	r0, r3
 8001842:	f007 fd07 	bl	8009254 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b36      	ldr	r3, [pc, #216]	; (8001924 <SystemClock_Config+0x110>)
 800184c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184e:	4a35      	ldr	r2, [pc, #212]	; (8001924 <SystemClock_Config+0x110>)
 8001850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001854:	6413      	str	r3, [r2, #64]	; 0x40
 8001856:	4b33      	ldr	r3, [pc, #204]	; (8001924 <SystemClock_Config+0x110>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	4b30      	ldr	r3, [pc, #192]	; (8001928 <SystemClock_Config+0x114>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800186e:	4a2e      	ldr	r2, [pc, #184]	; (8001928 <SystemClock_Config+0x114>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b2c      	ldr	r3, [pc, #176]	; (8001928 <SystemClock_Config+0x114>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800187e:	607b      	str	r3, [r7, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001882:	2301      	movs	r3, #1
 8001884:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001886:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800188a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800188e:	2302      	movs	r3, #2
 8001890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001894:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 800189c:	2308      	movs	r3, #8
 800189e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 100;
 80018a2:	2364      	movs	r3, #100	; 0x64
 80018a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018a8:	2302      	movs	r3, #2
 80018aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80018ae:	2303      	movs	r3, #3
 80018b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018b4:	2302      	movs	r3, #2
 80018b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018ba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80018be:	4618      	mov	r0, r3
 80018c0:	f001 feee 	bl	80036a0 <HAL_RCC_OscConfig>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <SystemClock_Config+0xba>
  {
    Error_Handler();
 80018ca:	f000 fc35 	bl	8002138 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ce:	230f      	movs	r3, #15
 80018d0:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018d2:	2302      	movs	r3, #2
 80018d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018d6:	2300      	movs	r3, #0
 80018d8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018de:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018e0:	2300      	movs	r3, #0
 80018e2:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018e4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018e8:	2101      	movs	r1, #1
 80018ea:	4618      	mov	r0, r3
 80018ec:	f001 f916 	bl	8002b1c <HAL_RCC_ClockConfig>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d001      	beq.n	80018fa <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80018f6:	f000 fc1f 	bl	8002138 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80018fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018fe:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001900:	2300      	movs	r3, #0
 8001902:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001904:	2300      	movs	r3, #0
 8001906:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	4618      	mov	r0, r3
 800190e:	f001 f9eb 	bl	8002ce8 <HAL_RCCEx_PeriphCLKConfig>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001918:	f000 fc0e 	bl	8002138 <Error_Handler>
  }
}
 800191c:	bf00      	nop
 800191e:	37b0      	adds	r7, #176	; 0xb0
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800
 8001928:	40007000 	.word	0x40007000

0800192c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001930:	4b0c      	ldr	r3, [pc, #48]	; (8001964 <MX_SDIO_SD_Init+0x38>)
 8001932:	4a0d      	ldr	r2, [pc, #52]	; (8001968 <MX_SDIO_SD_Init+0x3c>)
 8001934:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001936:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <MX_SDIO_SD_Init+0x38>)
 8001938:	2200      	movs	r2, #0
 800193a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <MX_SDIO_SD_Init+0x38>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <MX_SDIO_SD_Init+0x38>)
 8001944:	2200      	movs	r2, #0
 8001946:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <MX_SDIO_SD_Init+0x38>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800194e:	4b05      	ldr	r3, [pc, #20]	; (8001964 <MX_SDIO_SD_Init+0x38>)
 8001950:	2200      	movs	r2, #0
 8001952:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 16;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <MX_SDIO_SD_Init+0x38>)
 8001956:	2210      	movs	r2, #16
 8001958:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	20000988 	.word	0x20000988
 8001968:	40012c00 	.word	0x40012c00

0800196c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b08a      	sub	sp, #40	; 0x28
 8001970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
 800197a:	605a      	str	r2, [r3, #4]
 800197c:	609a      	str	r2, [r3, #8]
 800197e:	60da      	str	r2, [r3, #12]
 8001980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b42      	ldr	r3, [pc, #264]	; (8001a90 <MX_GPIO_Init+0x124>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a41      	ldr	r2, [pc, #260]	; (8001a90 <MX_GPIO_Init+0x124>)
 800198c:	f043 0304 	orr.w	r3, r3, #4
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b3f      	ldr	r3, [pc, #252]	; (8001a90 <MX_GPIO_Init+0x124>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a3a      	ldr	r2, [pc, #232]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a33      	ldr	r2, [pc, #204]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	60bb      	str	r3, [r7, #8]
 80019d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a2c      	ldr	r2, [pc, #176]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019e0:	f043 0308 	orr.w	r3, r3, #8
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0308 	and.w	r3, r3, #8
 80019ee:	607b      	str	r3, [r7, #4]
 80019f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	603b      	str	r3, [r7, #0]
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a25      	ldr	r2, [pc, #148]	; (8001a90 <MX_GPIO_Init+0x124>)
 80019fc:	f043 0302 	orr.w	r3, r3, #2
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b23      	ldr	r3, [pc, #140]	; (8001a90 <MX_GPIO_Init+0x124>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2120      	movs	r1, #32
 8001a12:	4820      	ldr	r0, [pc, #128]	; (8001a94 <MX_GPIO_Init+0x128>)
 8001a14:	f001 f868 	bl	8002ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <MX_GPIO_Init+0x12c>)
 8001a20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a26:	f107 0314 	add.w	r3, r7, #20
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	481b      	ldr	r0, [pc, #108]	; (8001a9c <MX_GPIO_Init+0x130>)
 8001a2e:	f000 feaf 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 8001a32:	2308      	movs	r3, #8
 8001a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a36:	2302      	movs	r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a42:	2307      	movs	r3, #7
 8001a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001a46:	f107 0314 	add.w	r3, r7, #20
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	4811      	ldr	r0, [pc, #68]	; (8001a94 <MX_GPIO_Init+0x128>)
 8001a4e:	f000 fe9f 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a52:	2320      	movs	r3, #32
 8001a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a56:	2301      	movs	r3, #1
 8001a58:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a62:	f107 0314 	add.w	r3, r7, #20
 8001a66:	4619      	mov	r1, r3
 8001a68:	480a      	ldr	r0, [pc, #40]	; (8001a94 <MX_GPIO_Init+0x128>)
 8001a6a:	f000 fe91 	bl	8002790 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a6e:	2340      	movs	r3, #64	; 0x40
 8001a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a76:	2300      	movs	r3, #0
 8001a78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a7a:	f107 0314 	add.w	r3, r7, #20
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4807      	ldr	r0, [pc, #28]	; (8001aa0 <MX_GPIO_Init+0x134>)
 8001a82:	f000 fe85 	bl	8002790 <HAL_GPIO_Init>

}
 8001a86:	bf00      	nop
 8001a88:	3728      	adds	r7, #40	; 0x28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020000 	.word	0x40020000
 8001a98:	10210000 	.word	0x10210000
 8001a9c:	40020800 	.word	0x40020800
 8001aa0:	40020400 	.word	0x40020400

08001aa4 <SD_Check>:

/* USER CODE BEGIN 4 */


void SD_Check(FRESULT fresult) {
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4603      	mov	r3, r0
 8001aac:	71fb      	strb	r3, [r7, #7]
	if(fresult != FR_OK) {
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d00b      	beq.n	8001acc <SD_Check+0x28>
		isSaving = 0;
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <SD_Check+0x48>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	801a      	strh	r2, [r3, #0]
		if(enablePrintf)
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <SD_Check+0x4c>)
 8001abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d00e      	beq.n	8001ae2 <SD_Check+0x3e>
			printf("ERROR - SD card is NOT saving!\n");
 8001ac4:	480b      	ldr	r0, [pc, #44]	; (8001af4 <SD_Check+0x50>)
 8001ac6:	f008 f967 	bl	8009d98 <puts>
	else {
		isSaving = 1;
		if(enablePrintf)
			printf("Successfully saved to SD Card\n");
	}
}
 8001aca:	e00a      	b.n	8001ae2 <SD_Check+0x3e>
		isSaving = 1;
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <SD_Check+0x48>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	801a      	strh	r2, [r3, #0]
		if(enablePrintf)
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <SD_Check+0x4c>)
 8001ad4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d002      	beq.n	8001ae2 <SD_Check+0x3e>
			printf("Successfully saved to SD Card\n");
 8001adc:	4806      	ldr	r0, [pc, #24]	; (8001af8 <SD_Check+0x54>)
 8001ade:	f008 f95b 	bl	8009d98 <puts>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	200002c4 	.word	0x200002c4
 8001af0:	20000000 	.word	0x20000000
 8001af4:	0800c5e0 	.word	0x0800c5e0
 8001af8:	0800c600 	.word	0x0800c600

08001afc <csvHeader>:

int SD_Status() { return isSaving; }

void csvHeader(char* FileName, int lenF) {
 8001afc:	b5b0      	push	{r4, r5, r7, lr}
 8001afe:	b084      	sub	sp, #16
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	466b      	mov	r3, sp
 8001b08:	461d      	mov	r5, r3

	char name[lenF];
 8001b0a:	683c      	ldr	r4, [r7, #0]
 8001b0c:	1e63      	subs	r3, r4, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	4623      	mov	r3, r4
 8001b12:	4618      	mov	r0, r3
 8001b14:	f04f 0100 	mov.w	r1, #0
 8001b18:	f04f 0200 	mov.w	r2, #0
 8001b1c:	f04f 0300 	mov.w	r3, #0
 8001b20:	00cb      	lsls	r3, r1, #3
 8001b22:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b26:	00c2      	lsls	r2, r0, #3
 8001b28:	4623      	mov	r3, r4
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f04f 0100 	mov.w	r1, #0
 8001b30:	f04f 0200 	mov.w	r2, #0
 8001b34:	f04f 0300 	mov.w	r3, #0
 8001b38:	00cb      	lsls	r3, r1, #3
 8001b3a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b3e:	00c2      	lsls	r2, r0, #3
 8001b40:	4623      	mov	r3, r4
 8001b42:	3307      	adds	r3, #7
 8001b44:	08db      	lsrs	r3, r3, #3
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	ebad 0d03 	sub.w	sp, sp, r3
 8001b4c:	466b      	mov	r3, sp
 8001b4e:	3300      	adds	r3, #0
 8001b50:	60bb      	str	r3, [r7, #8]
	strcpy(name, FileName);
 8001b52:	68bb      	ldr	r3, [r7, #8]
 8001b54:	6879      	ldr	r1, [r7, #4]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f008 f98a 	bl	8009e70 <strcpy>


	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8001b5c:	2140      	movs	r1, #64	; 0x40
 8001b5e:	4855      	ldr	r0, [pc, #340]	; (8001cb4 <csvHeader+0x1b8>)
 8001b60:	f000 ffaa 	bl	8002ab8 <HAL_GPIO_ReadPin>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	f000 809f 	beq.w	8001caa <csvHeader+0x1ae>
		fresult = Mount_SD("/");
 8001b6c:	4852      	ldr	r0, [pc, #328]	; (8001cb8 <csvHeader+0x1bc>)
 8001b6e:	f7ff fa49 	bl	8001004 <Mount_SD>
 8001b72:	4603      	mov	r3, r0
 8001b74:	461a      	mov	r2, r3
 8001b76:	4b51      	ldr	r3, [pc, #324]	; (8001cbc <csvHeader+0x1c0>)
 8001b78:	701a      	strb	r2, [r3, #0]
		SD_Check(fresult);
 8001b7a:	4b50      	ldr	r3, [pc, #320]	; (8001cbc <csvHeader+0x1c0>)
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff90 	bl	8001aa4 <SD_Check>

		//CAN Bus
		sprintf(buffer, "Time, RPM, TPS (%%), Fuel Open Time (ms), Ignition Angle (Degrees),");
 8001b84:	494e      	ldr	r1, [pc, #312]	; (8001cc0 <csvHeader+0x1c4>)
 8001b86:	484f      	ldr	r0, [pc, #316]	; (8001cc4 <csvHeader+0x1c8>)
 8001b88:	f008 f952 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	494d      	ldr	r1, [pc, #308]	; (8001cc4 <csvHeader+0x1c8>)
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fb9b 	bl	80012cc <Update_File>
		sprintf(buffer, "Barometer (PSI), MAP (PSI), Pressure Type,");
 8001b96:	494c      	ldr	r1, [pc, #304]	; (8001cc8 <csvHeader+0x1cc>)
 8001b98:	484a      	ldr	r0, [pc, #296]	; (8001cc4 <csvHeader+0x1c8>)
 8001b9a:	f008 f949 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	4948      	ldr	r1, [pc, #288]	; (8001cc4 <csvHeader+0x1c8>)
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fb92 	bl	80012cc <Update_File>
		sprintf(buffer, "Pre Radiator Air Temp (C), Post Radiator Air Temp (C),");
 8001ba8:	4948      	ldr	r1, [pc, #288]	; (8001ccc <csvHeader+0x1d0>)
 8001baa:	4846      	ldr	r0, [pc, #280]	; (8001cc4 <csvHeader+0x1c8>)
 8001bac:	f008 f940 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	4944      	ldr	r1, [pc, #272]	; (8001cc4 <csvHeader+0x1c8>)
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff fb89 	bl	80012cc <Update_File>
		sprintf(buffer, "Labmda #1 (A/F R), Lambda #2 (A/F R),");
 8001bba:	4945      	ldr	r1, [pc, #276]	; (8001cd0 <csvHeader+0x1d4>)
 8001bbc:	4841      	ldr	r0, [pc, #260]	; (8001cc4 <csvHeader+0x1c8>)
 8001bbe:	f008 f937 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	493f      	ldr	r1, [pc, #252]	; (8001cc4 <csvHeader+0x1c8>)
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fb80 	bl	80012cc <Update_File>
		sprintf(buffer, "Pre Radiator Coolant Temp (C), Post Radiator Coolant Temp (C),");
 8001bcc:	4941      	ldr	r1, [pc, #260]	; (8001cd4 <csvHeader+0x1d8>)
 8001bce:	483d      	ldr	r0, [pc, #244]	; (8001cc4 <csvHeader+0x1c8>)
 8001bd0:	f008 f92e 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	493b      	ldr	r1, [pc, #236]	; (8001cc4 <csvHeader+0x1c8>)
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fb77 	bl	80012cc <Update_File>
		sprintf(buffer, "Oil Pressure (PSI), Mass Air Flow Sensor (kg/s),");
 8001bde:	493e      	ldr	r1, [pc, #248]	; (8001cd8 <csvHeader+0x1dc>)
 8001be0:	4838      	ldr	r0, [pc, #224]	; (8001cc4 <csvHeader+0x1c8>)
 8001be2:	f008 f925 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	4936      	ldr	r1, [pc, #216]	; (8001cc4 <csvHeader+0x1c8>)
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff fb6e 	bl	80012cc <Update_File>
		sprintf(buffer, "FR Wheel Speed (mph), FL Wheel Speed (mph),");
 8001bf0:	493a      	ldr	r1, [pc, #232]	; (8001cdc <csvHeader+0x1e0>)
 8001bf2:	4834      	ldr	r0, [pc, #208]	; (8001cc4 <csvHeader+0x1c8>)
 8001bf4:	f008 f91c 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4932      	ldr	r1, [pc, #200]	; (8001cc4 <csvHeader+0x1c8>)
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f7ff fb65 	bl	80012cc <Update_File>
		sprintf(buffer, "RR Wheel Speed (mph), RL Wheel Speed (mph),");
 8001c02:	4937      	ldr	r1, [pc, #220]	; (8001ce0 <csvHeader+0x1e4>)
 8001c04:	482f      	ldr	r0, [pc, #188]	; (8001cc4 <csvHeader+0x1c8>)
 8001c06:	f008 f913 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	492d      	ldr	r1, [pc, #180]	; (8001cc4 <csvHeader+0x1c8>)
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fb5c 	bl	80012cc <Update_File>
		sprintf(buffer, "Battery Voltage (V), Air Temp (C), Coolant Temp (C),");
 8001c14:	4933      	ldr	r1, [pc, #204]	; (8001ce4 <csvHeader+0x1e8>)
 8001c16:	482b      	ldr	r0, [pc, #172]	; (8001cc4 <csvHeader+0x1c8>)
 8001c18:	f008 f90a 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	4929      	ldr	r1, [pc, #164]	; (8001cc4 <csvHeader+0x1c8>)
 8001c20:	4618      	mov	r0, r3
 8001c22:	f7ff fb53 	bl	80012cc <Update_File>

		//GPS
		sprintf(buffer, "Day, Month, Year, Hour, Minute, Second, gSpeed,");
 8001c26:	4930      	ldr	r1, [pc, #192]	; (8001ce8 <csvHeader+0x1ec>)
 8001c28:	4826      	ldr	r0, [pc, #152]	; (8001cc4 <csvHeader+0x1c8>)
 8001c2a:	f008 f901 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	4924      	ldr	r1, [pc, #144]	; (8001cc4 <csvHeader+0x1c8>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff fb4a 	bl	80012cc <Update_File>
		sprintf(buffer, "Latitude, Longitude, Height Ellipsoid, Height Sea Level,");
 8001c38:	492c      	ldr	r1, [pc, #176]	; (8001cec <csvHeader+0x1f0>)
 8001c3a:	4822      	ldr	r0, [pc, #136]	; (8001cc4 <csvHeader+0x1c8>)
 8001c3c:	f008 f8f8 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	4920      	ldr	r1, [pc, #128]	; (8001cc4 <csvHeader+0x1c8>)
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7ff fb41 	bl	80012cc <Update_File>

		//ADC1
		sprintf(buffer, "FL Damper Sensor, FR Damper Sensor,");
 8001c4a:	4929      	ldr	r1, [pc, #164]	; (8001cf0 <csvHeader+0x1f4>)
 8001c4c:	481d      	ldr	r0, [pc, #116]	; (8001cc4 <csvHeader+0x1c8>)
 8001c4e:	f008 f8ef 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	491b      	ldr	r1, [pc, #108]	; (8001cc4 <csvHeader+0x1c8>)
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff fb38 	bl	80012cc <Update_File>
		sprintf(buffer, "RL Damper Sensor, RR Damper Sensor,");
 8001c5c:	4925      	ldr	r1, [pc, #148]	; (8001cf4 <csvHeader+0x1f8>)
 8001c5e:	4819      	ldr	r0, [pc, #100]	; (8001cc4 <csvHeader+0x1c8>)
 8001c60:	f008 f8e6 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	4917      	ldr	r1, [pc, #92]	; (8001cc4 <csvHeader+0x1c8>)
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fb2f 	bl	80012cc <Update_File>

		//ADC2
		sprintf(buffer, "Steering Sensor, Brake Sensor #1, Brake Sensor #2,");
 8001c6e:	4922      	ldr	r1, [pc, #136]	; (8001cf8 <csvHeader+0x1fc>)
 8001c70:	4814      	ldr	r0, [pc, #80]	; (8001cc4 <csvHeader+0x1c8>)
 8001c72:	f008 f8dd 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	4912      	ldr	r1, [pc, #72]	; (8001cc4 <csvHeader+0x1c8>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fb26 	bl	80012cc <Update_File>

		//Ask about Unused #1 and #2

		//Accelerometer & Gyroscope
		sprintf(buffer, "X, Y, Z, Roll, Pitch, Yaw\n\n");
 8001c80:	491e      	ldr	r1, [pc, #120]	; (8001cfc <csvHeader+0x200>)
 8001c82:	4810      	ldr	r0, [pc, #64]	; (8001cc4 <csvHeader+0x1c8>)
 8001c84:	f008 f8d4 	bl	8009e30 <siprintf>
		fresult = Update_File(name, buffer);
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	490e      	ldr	r1, [pc, #56]	; (8001cc4 <csvHeader+0x1c8>)
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fb1d 	bl	80012cc <Update_File>
 8001c92:	4603      	mov	r3, r0
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <csvHeader+0x1c0>)
 8001c98:	701a      	strb	r2, [r3, #0]
		SD_Check(fresult);
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <csvHeader+0x1c0>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff ff00 	bl	8001aa4 <SD_Check>


		Unmount_SD("/");
 8001ca4:	4804      	ldr	r0, [pc, #16]	; (8001cb8 <csvHeader+0x1bc>)
 8001ca6:	f7ff f9d9 	bl	800105c <Unmount_SD>
 8001caa:	46ad      	mov	sp, r5

	}

}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb4:	40020400 	.word	0x40020400
 8001cb8:	0800c524 	.word	0x0800c524
 8001cbc:	20000678 	.word	0x20000678
 8001cc0:	0800c620 	.word	0x0800c620
 8001cc4:	200008e8 	.word	0x200008e8
 8001cc8:	0800c664 	.word	0x0800c664
 8001ccc:	0800c690 	.word	0x0800c690
 8001cd0:	0800c6c8 	.word	0x0800c6c8
 8001cd4:	0800c6f0 	.word	0x0800c6f0
 8001cd8:	0800c730 	.word	0x0800c730
 8001cdc:	0800c764 	.word	0x0800c764
 8001ce0:	0800c790 	.word	0x0800c790
 8001ce4:	0800c7bc 	.word	0x0800c7bc
 8001ce8:	0800c7f4 	.word	0x0800c7f4
 8001cec:	0800c824 	.word	0x0800c824
 8001cf0:	0800c860 	.word	0x0800c860
 8001cf4:	0800c884 	.word	0x0800c884
 8001cf8:	0800c8a8 	.word	0x0800c8a8
 8001cfc:	0800c8dc 	.word	0x0800c8dc

08001d00 <csvUpdate>:

void csvUpdate(char* FileName, int lenF) {
 8001d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d04:	b097      	sub	sp, #92	; 0x5c
 8001d06:	af0e      	add	r7, sp, #56	; 0x38
 8001d08:	6178      	str	r0, [r7, #20]
 8001d0a:	6139      	str	r1, [r7, #16]
 8001d0c:	466b      	mov	r3, sp
 8001d0e:	60fb      	str	r3, [r7, #12]

	char name[lenF];
 8001d10:	693c      	ldr	r4, [r7, #16]
 8001d12:	1e63      	subs	r3, r4, #1
 8001d14:	61fb      	str	r3, [r7, #28]
 8001d16:	4623      	mov	r3, r4
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f04f 0100 	mov.w	r1, #0
 8001d1e:	f04f 0200 	mov.w	r2, #0
 8001d22:	f04f 0300 	mov.w	r3, #0
 8001d26:	00cb      	lsls	r3, r1, #3
 8001d28:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d2c:	00c2      	lsls	r2, r0, #3
 8001d2e:	4623      	mov	r3, r4
 8001d30:	4618      	mov	r0, r3
 8001d32:	f04f 0100 	mov.w	r1, #0
 8001d36:	f04f 0200 	mov.w	r2, #0
 8001d3a:	f04f 0300 	mov.w	r3, #0
 8001d3e:	00cb      	lsls	r3, r1, #3
 8001d40:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d44:	00c2      	lsls	r2, r0, #3
 8001d46:	4623      	mov	r3, r4
 8001d48:	3307      	adds	r3, #7
 8001d4a:	08db      	lsrs	r3, r3, #3
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	ebad 0d03 	sub.w	sp, sp, r3
 8001d52:	ab0e      	add	r3, sp, #56	; 0x38
 8001d54:	3300      	adds	r3, #0
 8001d56:	61bb      	str	r3, [r7, #24]
	strcpy(name, FileName);
 8001d58:	69bb      	ldr	r3, [r7, #24]
 8001d5a:	6979      	ldr	r1, [r7, #20]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f008 f887 	bl	8009e70 <strcpy>


	if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8001d62:	2140      	movs	r1, #64	; 0x40
 8001d64:	4899      	ldr	r0, [pc, #612]	; (8001fcc <csvUpdate+0x2cc>)
 8001d66:	f000 fea7 	bl	8002ab8 <HAL_GPIO_ReadPin>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 81d0 	beq.w	8002112 <csvUpdate+0x412>
		fresult = Mount_SD("/");
 8001d72:	4897      	ldr	r0, [pc, #604]	; (8001fd0 <csvUpdate+0x2d0>)
 8001d74:	f7ff f946 	bl	8001004 <Mount_SD>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	4b95      	ldr	r3, [pc, #596]	; (8001fd4 <csvUpdate+0x2d4>)
 8001d7e:	701a      	strb	r2, [r3, #0]
		SD_Check(fresult);
 8001d80:	4b94      	ldr	r3, [pc, #592]	; (8001fd4 <csvUpdate+0x2d4>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fe8d 	bl	8001aa4 <SD_Check>


		sprintf(buffer, "%d,%hu,%f,%f,%f,", indx, RPM, TPS, fuelOpenTime, ignitionAngle);
 8001d8a:	4b93      	ldr	r3, [pc, #588]	; (8001fd8 <csvUpdate+0x2d8>)
 8001d8c:	681e      	ldr	r6, [r3, #0]
 8001d8e:	4b93      	ldr	r3, [pc, #588]	; (8001fdc <csvUpdate+0x2dc>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4b92      	ldr	r3, [pc, #584]	; (8001fe0 <csvUpdate+0x2e0>)
 8001d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9a:	4992      	ldr	r1, [pc, #584]	; (8001fe4 <csvUpdate+0x2e4>)
 8001d9c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001da0:	4c91      	ldr	r4, [pc, #580]	; (8001fe8 <csvUpdate+0x2e8>)
 8001da2:	e9d4 4500 	ldrd	r4, r5, [r4]
 8001da6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001daa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001dae:	e9cd 2300 	strd	r2, r3, [sp]
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	4632      	mov	r2, r6
 8001db6:	498d      	ldr	r1, [pc, #564]	; (8001fec <csvUpdate+0x2ec>)
 8001db8:	488d      	ldr	r0, [pc, #564]	; (8001ff0 <csvUpdate+0x2f0>)
 8001dba:	f008 f839 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	498b      	ldr	r1, [pc, #556]	; (8001ff0 <csvUpdate+0x2f0>)
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fa82 	bl	80012cc <Update_File>
		sprintf(buffer, "%f,%f,%i,", barometer, MAP, pressureType);
 8001dc8:	4b8a      	ldr	r3, [pc, #552]	; (8001ff4 <csvUpdate+0x2f4>)
 8001dca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dce:	4b8a      	ldr	r3, [pc, #552]	; (8001ff8 <csvUpdate+0x2f8>)
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	4c89      	ldr	r4, [pc, #548]	; (8001ffc <csvUpdate+0x2fc>)
 8001dd6:	6824      	ldr	r4, [r4, #0]
 8001dd8:	9402      	str	r4, [sp, #8]
 8001dda:	e9cd 2300 	strd	r2, r3, [sp]
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	4987      	ldr	r1, [pc, #540]	; (8002000 <csvUpdate+0x300>)
 8001de4:	4882      	ldr	r0, [pc, #520]	; (8001ff0 <csvUpdate+0x2f0>)
 8001de6:	f008 f823 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	4980      	ldr	r1, [pc, #512]	; (8001ff0 <csvUpdate+0x2f0>)
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fa6c 	bl	80012cc <Update_File>
		sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,", AnIn1, AnIn2, AnIn3, AnIn4, AnIn5, AnIn6, AnIn7, AnIn8);
 8001df4:	4b83      	ldr	r3, [pc, #524]	; (8002004 <csvUpdate+0x304>)
 8001df6:	ed93 7b00 	vldr	d7, [r3]
 8001dfa:	ed87 7b00 	vstr	d7, [r7]
 8001dfe:	4b82      	ldr	r3, [pc, #520]	; (8002008 <csvUpdate+0x308>)
 8001e00:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001e04:	4b81      	ldr	r3, [pc, #516]	; (800200c <csvUpdate+0x30c>)
 8001e06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001e0a:	4b81      	ldr	r3, [pc, #516]	; (8002010 <csvUpdate+0x310>)
 8001e0c:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001e10:	4b80      	ldr	r3, [pc, #512]	; (8002014 <csvUpdate+0x314>)
 8001e12:	ed93 7b00 	vldr	d7, [r3]
 8001e16:	4b80      	ldr	r3, [pc, #512]	; (8002018 <csvUpdate+0x318>)
 8001e18:	ed93 6b00 	vldr	d6, [r3]
 8001e1c:	4b7f      	ldr	r3, [pc, #508]	; (800201c <csvUpdate+0x31c>)
 8001e1e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e22:	4b7f      	ldr	r3, [pc, #508]	; (8002020 <csvUpdate+0x320>)
 8001e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e28:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001e2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001e30:	ed8d 6b08 	vstr	d6, [sp, #32]
 8001e34:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001e38:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001e3c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001e40:	e9cd 4500 	strd	r4, r5, [sp]
 8001e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e48:	4976      	ldr	r1, [pc, #472]	; (8002024 <csvUpdate+0x324>)
 8001e4a:	4869      	ldr	r0, [pc, #420]	; (8001ff0 <csvUpdate+0x2f0>)
 8001e4c:	f007 fff0 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001e50:	69bb      	ldr	r3, [r7, #24]
 8001e52:	4967      	ldr	r1, [pc, #412]	; (8001ff0 <csvUpdate+0x2f0>)
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fa39 	bl	80012cc <Update_File>
		sprintf(buffer, "%f,%f,%f,%f,%f,", freq1, freq2, freq3, freq4, batteryVoltage);
 8001e5a:	4b73      	ldr	r3, [pc, #460]	; (8002028 <csvUpdate+0x328>)
 8001e5c:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001e60:	4b72      	ldr	r3, [pc, #456]	; (800202c <csvUpdate+0x32c>)
 8001e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e66:	4972      	ldr	r1, [pc, #456]	; (8002030 <csvUpdate+0x330>)
 8001e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e6c:	4c71      	ldr	r4, [pc, #452]	; (8002034 <csvUpdate+0x334>)
 8001e6e:	e9d4 4500 	ldrd	r4, r5, [r4]
 8001e72:	4e71      	ldr	r6, [pc, #452]	; (8002038 <csvUpdate+0x338>)
 8001e74:	e9d6 8900 	ldrd	r8, r9, [r6]
 8001e78:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001e7c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001e80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e84:	e9cd 2300 	strd	r2, r3, [sp]
 8001e88:	4652      	mov	r2, sl
 8001e8a:	465b      	mov	r3, fp
 8001e8c:	496b      	ldr	r1, [pc, #428]	; (800203c <csvUpdate+0x33c>)
 8001e8e:	4858      	ldr	r0, [pc, #352]	; (8001ff0 <csvUpdate+0x2f0>)
 8001e90:	f007 ffce 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	4956      	ldr	r1, [pc, #344]	; (8001ff0 <csvUpdate+0x2f0>)
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7ff fa17 	bl	80012cc <Update_File>
		sprintf(buffer, "%f,%f,", airTemp, coolantTemp);
 8001e9e:	4b68      	ldr	r3, [pc, #416]	; (8002040 <csvUpdate+0x340>)
 8001ea0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ea4:	4b67      	ldr	r3, [pc, #412]	; (8002044 <csvUpdate+0x344>)
 8001ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eaa:	e9cd 2300 	strd	r2, r3, [sp]
 8001eae:	4602      	mov	r2, r0
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	4965      	ldr	r1, [pc, #404]	; (8002048 <csvUpdate+0x348>)
 8001eb4:	484e      	ldr	r0, [pc, #312]	; (8001ff0 <csvUpdate+0x2f0>)
 8001eb6:	f007 ffbb 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001eba:	69bb      	ldr	r3, [r7, #24]
 8001ebc:	494c      	ldr	r1, [pc, #304]	; (8001ff0 <csvUpdate+0x2f0>)
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff fa04 	bl	80012cc <Update_File>

		sprintf(buffer, "%d,%d,%d,%d,%d,%d,%d,", day, month, year, hour, minute, second, gSpeed);
 8001ec4:	4b61      	ldr	r3, [pc, #388]	; (800204c <csvUpdate+0x34c>)
 8001ec6:	681d      	ldr	r5, [r3, #0]
 8001ec8:	4b61      	ldr	r3, [pc, #388]	; (8002050 <csvUpdate+0x350>)
 8001eca:	681e      	ldr	r6, [r3, #0]
 8001ecc:	4b61      	ldr	r3, [pc, #388]	; (8002054 <csvUpdate+0x354>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a61      	ldr	r2, [pc, #388]	; (8002058 <csvUpdate+0x358>)
 8001ed2:	6812      	ldr	r2, [r2, #0]
 8001ed4:	4961      	ldr	r1, [pc, #388]	; (800205c <csvUpdate+0x35c>)
 8001ed6:	6809      	ldr	r1, [r1, #0]
 8001ed8:	4861      	ldr	r0, [pc, #388]	; (8002060 <csvUpdate+0x360>)
 8001eda:	6800      	ldr	r0, [r0, #0]
 8001edc:	4c61      	ldr	r4, [pc, #388]	; (8002064 <csvUpdate+0x364>)
 8001ede:	6824      	ldr	r4, [r4, #0]
 8001ee0:	9404      	str	r4, [sp, #16]
 8001ee2:	9003      	str	r0, [sp, #12]
 8001ee4:	9102      	str	r1, [sp, #8]
 8001ee6:	9201      	str	r2, [sp, #4]
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	4633      	mov	r3, r6
 8001eec:	462a      	mov	r2, r5
 8001eee:	495e      	ldr	r1, [pc, #376]	; (8002068 <csvUpdate+0x368>)
 8001ef0:	483f      	ldr	r0, [pc, #252]	; (8001ff0 <csvUpdate+0x2f0>)
 8001ef2:	f007 ff9d 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	493d      	ldr	r1, [pc, #244]	; (8001ff0 <csvUpdate+0x2f0>)
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff f9e6 	bl	80012cc <Update_File>
		sprintf(buffer, "%f,%f,%f,%f,", latitude, longitude, height_Ellipsoid, height_SeaLvl);
 8001f00:	4b5a      	ldr	r3, [pc, #360]	; (800206c <csvUpdate+0x36c>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe fb4f 	bl	80005a8 <__aeabi_f2d>
 8001f0a:	4682      	mov	sl, r0
 8001f0c:	468b      	mov	fp, r1
 8001f0e:	4b58      	ldr	r3, [pc, #352]	; (8002070 <csvUpdate+0x370>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7fe fb48 	bl	80005a8 <__aeabi_f2d>
 8001f18:	4604      	mov	r4, r0
 8001f1a:	460d      	mov	r5, r1
 8001f1c:	4b55      	ldr	r3, [pc, #340]	; (8002074 <csvUpdate+0x374>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f7fe fb41 	bl	80005a8 <__aeabi_f2d>
 8001f26:	4680      	mov	r8, r0
 8001f28:	4689      	mov	r9, r1
 8001f2a:	4b53      	ldr	r3, [pc, #332]	; (8002078 <csvUpdate+0x378>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe fb3a 	bl	80005a8 <__aeabi_f2d>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f3c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001f40:	e9cd 4500 	strd	r4, r5, [sp]
 8001f44:	4652      	mov	r2, sl
 8001f46:	465b      	mov	r3, fp
 8001f48:	494c      	ldr	r1, [pc, #304]	; (800207c <csvUpdate+0x37c>)
 8001f4a:	4829      	ldr	r0, [pc, #164]	; (8001ff0 <csvUpdate+0x2f0>)
 8001f4c:	f007 ff70 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001f50:	69bb      	ldr	r3, [r7, #24]
 8001f52:	4927      	ldr	r1, [pc, #156]	; (8001ff0 <csvUpdate+0x2f0>)
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff f9b9 	bl	80012cc <Update_File>

		sprintf(buffer, "%d,%d,%d,%d,", damperT_Sense_FL, damperT_Sense_FR, damperT_Sense_RL, damperT_Sense_RR);
 8001f5a:	4b49      	ldr	r3, [pc, #292]	; (8002080 <csvUpdate+0x380>)
 8001f5c:	6819      	ldr	r1, [r3, #0]
 8001f5e:	4b49      	ldr	r3, [pc, #292]	; (8002084 <csvUpdate+0x384>)
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	4b49      	ldr	r3, [pc, #292]	; (8002088 <csvUpdate+0x388>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a49      	ldr	r2, [pc, #292]	; (800208c <csvUpdate+0x38c>)
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	9201      	str	r2, [sp, #4]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	4603      	mov	r3, r0
 8001f70:	460a      	mov	r2, r1
 8001f72:	4947      	ldr	r1, [pc, #284]	; (8002090 <csvUpdate+0x390>)
 8001f74:	481e      	ldr	r0, [pc, #120]	; (8001ff0 <csvUpdate+0x2f0>)
 8001f76:	f007 ff5b 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001f7a:	69bb      	ldr	r3, [r7, #24]
 8001f7c:	491c      	ldr	r1, [pc, #112]	; (8001ff0 <csvUpdate+0x2f0>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7ff f9a4 	bl	80012cc <Update_File>

		sprintf(buffer, "%d,%d,%d,", steeringA_Sense, brakeP_Sense1, brakeP_Sense2);
 8001f84:	4b43      	ldr	r3, [pc, #268]	; (8002094 <csvUpdate+0x394>)
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	4b43      	ldr	r3, [pc, #268]	; (8002098 <csvUpdate+0x398>)
 8001f8a:	6819      	ldr	r1, [r3, #0]
 8001f8c:	4b43      	ldr	r3, [pc, #268]	; (800209c <csvUpdate+0x39c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	460b      	mov	r3, r1
 8001f94:	4942      	ldr	r1, [pc, #264]	; (80020a0 <csvUpdate+0x3a0>)
 8001f96:	4816      	ldr	r0, [pc, #88]	; (8001ff0 <csvUpdate+0x2f0>)
 8001f98:	f007 ff4a 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	4914      	ldr	r1, [pc, #80]	; (8001ff0 <csvUpdate+0x2f0>)
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f7ff f993 	bl	80012cc <Update_File>

		sprintf(buffer, "%f,%f,%f,%f,%f,%f", x_LS, y_LS, z_LS, roll_LS, pitch_LS, yaw_LS);
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	; (80020a4 <csvUpdate+0x3a4>)
 8001fa8:	ed93 7b00 	vldr	d7, [r3]
 8001fac:	ed87 7b00 	vstr	d7, [r7]
 8001fb0:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <csvUpdate+0x3a8>)
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	493d      	ldr	r1, [pc, #244]	; (80020ac <csvUpdate+0x3ac>)
 8001fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fbc:	4c3c      	ldr	r4, [pc, #240]	; (80020b0 <csvUpdate+0x3b0>)
 8001fbe:	e9d4 4500 	ldrd	r4, r5, [r4]
 8001fc2:	4e3c      	ldr	r6, [pc, #240]	; (80020b4 <csvUpdate+0x3b4>)
 8001fc4:	e9d6 8900 	ldrd	r8, r9, [r6]
 8001fc8:	e076      	b.n	80020b8 <csvUpdate+0x3b8>
 8001fca:	bf00      	nop
 8001fcc:	40020400 	.word	0x40020400
 8001fd0:	0800c524 	.word	0x0800c524
 8001fd4:	20000678 	.word	0x20000678
 8001fd8:	200002d4 	.word	0x200002d4
 8001fdc:	200001fc 	.word	0x200001fc
 8001fe0:	20000200 	.word	0x20000200
 8001fe4:	20000208 	.word	0x20000208
 8001fe8:	20000210 	.word	0x20000210
 8001fec:	0800c8f8 	.word	0x0800c8f8
 8001ff0:	200008e8 	.word	0x200008e8
 8001ff4:	20000218 	.word	0x20000218
 8001ff8:	20000220 	.word	0x20000220
 8001ffc:	20000228 	.word	0x20000228
 8002000:	0800c90c 	.word	0x0800c90c
 8002004:	20000230 	.word	0x20000230
 8002008:	20000238 	.word	0x20000238
 800200c:	20000240 	.word	0x20000240
 8002010:	20000248 	.word	0x20000248
 8002014:	20000250 	.word	0x20000250
 8002018:	20000258 	.word	0x20000258
 800201c:	20000260 	.word	0x20000260
 8002020:	20000268 	.word	0x20000268
 8002024:	0800c918 	.word	0x0800c918
 8002028:	20000270 	.word	0x20000270
 800202c:	20000278 	.word	0x20000278
 8002030:	20000280 	.word	0x20000280
 8002034:	20000288 	.word	0x20000288
 8002038:	20000290 	.word	0x20000290
 800203c:	0800c934 	.word	0x0800c934
 8002040:	20000298 	.word	0x20000298
 8002044:	200002a0 	.word	0x200002a0
 8002048:	0800c944 	.word	0x0800c944
 800204c:	20000a28 	.word	0x20000a28
 8002050:	200008d8 	.word	0x200008d8
 8002054:	20000a1c 	.word	0x20000a1c
 8002058:	20000974 	.word	0x20000974
 800205c:	200008e4 	.word	0x200008e4
 8002060:	200008dc 	.word	0x200008dc
 8002064:	200008e0 	.word	0x200008e0
 8002068:	0800c94c 	.word	0x0800c94c
 800206c:	20000a24 	.word	0x20000a24
 8002070:	20000978 	.word	0x20000978
 8002074:	200008bc 	.word	0x200008bc
 8002078:	2000094c 	.word	0x2000094c
 800207c:	0800c964 	.word	0x0800c964
 8002080:	200002a8 	.word	0x200002a8
 8002084:	200002ac 	.word	0x200002ac
 8002088:	200002b0 	.word	0x200002b0
 800208c:	200002b4 	.word	0x200002b4
 8002090:	0800c974 	.word	0x0800c974
 8002094:	200002b8 	.word	0x200002b8
 8002098:	200002bc 	.word	0x200002bc
 800209c:	200002c0 	.word	0x200002c0
 80020a0:	0800c984 	.word	0x0800c984
 80020a4:	20000980 	.word	0x20000980
 80020a8:	20000a10 	.word	0x20000a10
 80020ac:	200008b0 	.word	0x200008b0
 80020b0:	20000a30 	.word	0x20000a30
 80020b4:	20000950 	.word	0x20000950
 80020b8:	4e19      	ldr	r6, [pc, #100]	; (8002120 <csvUpdate+0x420>)
 80020ba:	e9d6 ab00 	ldrd	sl, fp, [r6]
 80020be:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80020c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80020c6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80020ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80020ce:	e9cd 2300 	strd	r2, r3, [sp]
 80020d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020d6:	4913      	ldr	r1, [pc, #76]	; (8002124 <csvUpdate+0x424>)
 80020d8:	4813      	ldr	r0, [pc, #76]	; (8002128 <csvUpdate+0x428>)
 80020da:	f007 fea9 	bl	8009e30 <siprintf>
		Update_File(name, buffer);
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4911      	ldr	r1, [pc, #68]	; (8002128 <csvUpdate+0x428>)
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff f8f2 	bl	80012cc <Update_File>

		sprintf(buffer, "\n\n");
 80020e8:	4910      	ldr	r1, [pc, #64]	; (800212c <csvUpdate+0x42c>)
 80020ea:	480f      	ldr	r0, [pc, #60]	; (8002128 <csvUpdate+0x428>)
 80020ec:	f007 fea0 	bl	8009e30 <siprintf>
		fresult = Update_File(name, buffer);
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	490d      	ldr	r1, [pc, #52]	; (8002128 <csvUpdate+0x428>)
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff f8e9 	bl	80012cc <Update_File>
 80020fa:	4603      	mov	r3, r0
 80020fc:	461a      	mov	r2, r3
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <csvUpdate+0x430>)
 8002100:	701a      	strb	r2, [r3, #0]
		SD_Check(fresult);
 8002102:	4b0b      	ldr	r3, [pc, #44]	; (8002130 <csvUpdate+0x430>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff fccc 	bl	8001aa4 <SD_Check>


		Unmount_SD("/");
 800210c:	4809      	ldr	r0, [pc, #36]	; (8002134 <csvUpdate+0x434>)
 800210e:	f7fe ffa5 	bl	800105c <Unmount_SD>
 8002112:	f8d7 d00c 	ldr.w	sp, [r7, #12]
	}

}
 8002116:	bf00      	nop
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002120:	20000968 	.word	0x20000968
 8002124:	0800c990 	.word	0x0800c990
 8002128:	200008e8 	.word	0x200008e8
 800212c:	0800c9a4 	.word	0x0800c9a4
 8002130:	20000678 	.word	0x20000678
 8002134:	0800c524 	.word	0x0800c524

08002138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	4b10      	ldr	r3, [pc, #64]	; (8002194 <HAL_MspInit+0x4c>)
 8002154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002156:	4a0f      	ldr	r2, [pc, #60]	; (8002194 <HAL_MspInit+0x4c>)
 8002158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800215c:	6453      	str	r3, [r2, #68]	; 0x44
 800215e:	4b0d      	ldr	r3, [pc, #52]	; (8002194 <HAL_MspInit+0x4c>)
 8002160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002166:	607b      	str	r3, [r7, #4]
 8002168:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	603b      	str	r3, [r7, #0]
 800216e:	4b09      	ldr	r3, [pc, #36]	; (8002194 <HAL_MspInit+0x4c>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	4a08      	ldr	r2, [pc, #32]	; (8002194 <HAL_MspInit+0x4c>)
 8002174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002178:	6413      	str	r3, [r2, #64]	; 0x40
 800217a:	4b06      	ldr	r3, [pc, #24]	; (8002194 <HAL_MspInit+0x4c>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002182:	603b      	str	r3, [r7, #0]
 8002184:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002186:	2007      	movs	r0, #7
 8002188:	f000 face 	bl	8002728 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40023800 	.word	0x40023800

08002198 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b08a      	sub	sp, #40	; 0x28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a0:	f107 0314 	add.w	r3, r7, #20
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	605a      	str	r2, [r3, #4]
 80021aa:	609a      	str	r2, [r3, #8]
 80021ac:	60da      	str	r2, [r3, #12]
 80021ae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a28      	ldr	r2, [pc, #160]	; (8002258 <HAL_SD_MspInit+0xc0>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d14a      	bne.n	8002250 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	613b      	str	r3, [r7, #16]
 80021be:	4b27      	ldr	r3, [pc, #156]	; (800225c <HAL_SD_MspInit+0xc4>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c2:	4a26      	ldr	r2, [pc, #152]	; (800225c <HAL_SD_MspInit+0xc4>)
 80021c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80021c8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ca:	4b24      	ldr	r3, [pc, #144]	; (800225c <HAL_SD_MspInit+0xc4>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021d2:	613b      	str	r3, [r7, #16]
 80021d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	4b20      	ldr	r3, [pc, #128]	; (800225c <HAL_SD_MspInit+0xc4>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a1f      	ldr	r2, [pc, #124]	; (800225c <HAL_SD_MspInit+0xc4>)
 80021e0:	f043 0304 	orr.w	r3, r3, #4
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b1d      	ldr	r3, [pc, #116]	; (800225c <HAL_SD_MspInit+0xc4>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	4b19      	ldr	r3, [pc, #100]	; (800225c <HAL_SD_MspInit+0xc4>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a18      	ldr	r2, [pc, #96]	; (800225c <HAL_SD_MspInit+0xc4>)
 80021fc:	f043 0308 	orr.w	r3, r3, #8
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b16      	ldr	r3, [pc, #88]	; (800225c <HAL_SD_MspInit+0xc4>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	60bb      	str	r3, [r7, #8]
 800220c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800220e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002212:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002214:	2302      	movs	r3, #2
 8002216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002218:	2300      	movs	r3, #0
 800221a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221c:	2303      	movs	r3, #3
 800221e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002220:	230c      	movs	r3, #12
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002224:	f107 0314 	add.w	r3, r7, #20
 8002228:	4619      	mov	r1, r3
 800222a:	480d      	ldr	r0, [pc, #52]	; (8002260 <HAL_SD_MspInit+0xc8>)
 800222c:	f000 fab0 	bl	8002790 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002230:	2304      	movs	r3, #4
 8002232:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002234:	2302      	movs	r3, #2
 8002236:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002238:	2300      	movs	r3, #0
 800223a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223c:	2303      	movs	r3, #3
 800223e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002240:	230c      	movs	r3, #12
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4619      	mov	r1, r3
 800224a:	4806      	ldr	r0, [pc, #24]	; (8002264 <HAL_SD_MspInit+0xcc>)
 800224c:	f000 faa0 	bl	8002790 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002250:	bf00      	nop
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}
 8002258:	40012c00 	.word	0x40012c00
 800225c:	40023800 	.word	0x40023800
 8002260:	40020800 	.word	0x40020800
 8002264:	40020c00 	.word	0x40020c00

08002268 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <HardFault_Handler+0x4>

0800227c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <MemManage_Handler+0x4>

08002282 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <BusFault_Handler+0x4>

08002288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <UsageFault_Handler+0x4>

0800228e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr

080022aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022bc:	f000 f93e 	bl	800253c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
	return 1;
 80022c8:	2301      	movs	r3, #1
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_kill>:

int _kill(int pid, int sig)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b082      	sub	sp, #8
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80022de:	f006 ff7f 	bl	80091e0 <__errno>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2216      	movs	r2, #22
 80022e6:	601a      	str	r2, [r3, #0]
	return -1;
 80022e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3708      	adds	r7, #8
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <_exit>:

void _exit (int status)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f7ff ffe7 	bl	80022d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002306:	e7fe      	b.n	8002306 <_exit+0x12>

08002308 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002314:	2300      	movs	r3, #0
 8002316:	617b      	str	r3, [r7, #20]
 8002318:	e00a      	b.n	8002330 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800231a:	f3af 8000 	nop.w
 800231e:	4601      	mov	r1, r0
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	60ba      	str	r2, [r7, #8]
 8002326:	b2ca      	uxtb	r2, r1
 8002328:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	3301      	adds	r3, #1
 800232e:	617b      	str	r3, [r7, #20]
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	429a      	cmp	r2, r3
 8002336:	dbf0      	blt.n	800231a <_read+0x12>
	}

return len;
 8002338:	687b      	ldr	r3, [r7, #4]
}
 800233a:	4618      	mov	r0, r3
 800233c:	3718      	adds	r7, #24
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
	return -1;
 800234a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800234e:	4618      	mov	r0, r3
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr

0800235a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800235a:	b480      	push	{r7}
 800235c:	b083      	sub	sp, #12
 800235e:	af00      	add	r7, sp, #0
 8002360:	6078      	str	r0, [r7, #4]
 8002362:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800236a:	605a      	str	r2, [r3, #4]
	return 0;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	370c      	adds	r7, #12
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr

0800237a <_isatty>:

int _isatty(int file)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
	return 1;
 8002382:	2301      	movs	r3, #1
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
	return 0;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023b4:	4a14      	ldr	r2, [pc, #80]	; (8002408 <_sbrk+0x5c>)
 80023b6:	4b15      	ldr	r3, [pc, #84]	; (800240c <_sbrk+0x60>)
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <_sbrk+0x64>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d102      	bne.n	80023ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <_sbrk+0x64>)
 80023ca:	4a12      	ldr	r2, [pc, #72]	; (8002414 <_sbrk+0x68>)
 80023cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023ce:	4b10      	ldr	r3, [pc, #64]	; (8002410 <_sbrk+0x64>)
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4413      	add	r3, r2
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d207      	bcs.n	80023ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023dc:	f006 ff00 	bl	80091e0 <__errno>
 80023e0:	4603      	mov	r3, r0
 80023e2:	220c      	movs	r2, #12
 80023e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023e6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ea:	e009      	b.n	8002400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <_sbrk+0x64>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023f2:	4b07      	ldr	r3, [pc, #28]	; (8002410 <_sbrk+0x64>)
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4413      	add	r3, r2
 80023fa:	4a05      	ldr	r2, [pc, #20]	; (8002410 <_sbrk+0x64>)
 80023fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023fe:	68fb      	ldr	r3, [r7, #12]
}
 8002400:	4618      	mov	r0, r3
 8002402:	3718      	adds	r7, #24
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20020000 	.word	0x20020000
 800240c:	00000400 	.word	0x00000400
 8002410:	200002d8 	.word	0x200002d8
 8002414:	20000ee8 	.word	0x20000ee8

08002418 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800241c:	4b08      	ldr	r3, [pc, #32]	; (8002440 <SystemInit+0x28>)
 800241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002422:	4a07      	ldr	r2, [pc, #28]	; (8002440 <SystemInit+0x28>)
 8002424:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002428:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800242c:	4b04      	ldr	r3, [pc, #16]	; (8002440 <SystemInit+0x28>)
 800242e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002432:	609a      	str	r2, [r3, #8]
#endif
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	e000ed00 	.word	0xe000ed00

08002444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800247c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002448:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800244a:	e003      	b.n	8002454 <LoopCopyDataInit>

0800244c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800244e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002450:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002452:	3104      	adds	r1, #4

08002454 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002454:	480b      	ldr	r0, [pc, #44]	; (8002484 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002458:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800245a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800245c:	d3f6      	bcc.n	800244c <CopyDataInit>
  ldr  r2, =_sbss
 800245e:	4a0b      	ldr	r2, [pc, #44]	; (800248c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002460:	e002      	b.n	8002468 <LoopFillZerobss>

08002462 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002462:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002464:	f842 3b04 	str.w	r3, [r2], #4

08002468 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002468:	4b09      	ldr	r3, [pc, #36]	; (8002490 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800246a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800246c:	d3f9      	bcc.n	8002462 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800246e:	f7ff ffd3 	bl	8002418 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002472:	f006 febb 	bl	80091ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002476:	f7ff f845 	bl	8001504 <main>
  bx  lr    
 800247a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800247c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002480:	0801420c 	.word	0x0801420c
  ldr  r0, =_sdata
 8002484:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002488:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 800248c:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002490:	20000ee8 	.word	0x20000ee8

08002494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002494:	e7fe      	b.n	8002494 <ADC_IRQHandler>
	...

08002498 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800249c:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <HAL_Init+0x40>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a0d      	ldr	r2, [pc, #52]	; (80024d8 <HAL_Init+0x40>)
 80024a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024a8:	4b0b      	ldr	r3, [pc, #44]	; (80024d8 <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <HAL_Init+0x40>)
 80024ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <HAL_Init+0x40>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a07      	ldr	r2, [pc, #28]	; (80024d8 <HAL_Init+0x40>)
 80024ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c0:	2003      	movs	r0, #3
 80024c2:	f000 f931 	bl	8002728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f000 f808 	bl	80024dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024cc:	f7ff fe3c 	bl	8002148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d0:	2300      	movs	r3, #0
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40023c00 	.word	0x40023c00

080024dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024e4:	4b12      	ldr	r3, [pc, #72]	; (8002530 <HAL_InitTick+0x54>)
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	4b12      	ldr	r3, [pc, #72]	; (8002534 <HAL_InitTick+0x58>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4619      	mov	r1, r3
 80024ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f93b 	bl	8002776 <HAL_SYSTICK_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e00e      	b.n	8002528 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2b0f      	cmp	r3, #15
 800250e:	d80a      	bhi.n	8002526 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002510:	2200      	movs	r2, #0
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f000 f911 	bl	800273e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800251c:	4a06      	ldr	r2, [pc, #24]	; (8002538 <HAL_InitTick+0x5c>)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	e000      	b.n	8002528 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
}
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000004 	.word	0x20000004
 8002534:	2000000c 	.word	0x2000000c
 8002538:	20000008 	.word	0x20000008

0800253c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <HAL_IncTick+0x20>)
 8002542:	781b      	ldrb	r3, [r3, #0]
 8002544:	461a      	mov	r2, r3
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <HAL_IncTick+0x24>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4413      	add	r3, r2
 800254c:	4a04      	ldr	r2, [pc, #16]	; (8002560 <HAL_IncTick+0x24>)
 800254e:	6013      	str	r3, [r2, #0]
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	2000000c 	.word	0x2000000c
 8002560:	20000a68 	.word	0x20000a68

08002564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return uwTick;
 8002568:	4b03      	ldr	r3, [pc, #12]	; (8002578 <HAL_GetTick+0x14>)
 800256a:	681b      	ldr	r3, [r3, #0]
}
 800256c:	4618      	mov	r0, r3
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	20000a68 	.word	0x20000a68

0800257c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002584:	f7ff ffee 	bl	8002564 <HAL_GetTick>
 8002588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002594:	d005      	beq.n	80025a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002596:	4b0a      	ldr	r3, [pc, #40]	; (80025c0 <HAL_Delay+0x44>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	461a      	mov	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4413      	add	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025a2:	bf00      	nop
 80025a4:	f7ff ffde 	bl	8002564 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d8f7      	bhi.n	80025a4 <HAL_Delay+0x28>
  {
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2000000c 	.word	0x2000000c

080025c4 <__NVIC_SetPriorityGrouping>:
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025f6:	4a04      	ldr	r2, [pc, #16]	; (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	60d3      	str	r3, [r2, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_GetPriorityGrouping>:
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002610:	4b04      	ldr	r3, [pc, #16]	; (8002624 <__NVIC_GetPriorityGrouping+0x18>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f003 0307 	and.w	r3, r3, #7
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_SetPriority>:
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	6039      	str	r1, [r7, #0]
 8002632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002638:	2b00      	cmp	r3, #0
 800263a:	db0a      	blt.n	8002652 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	b2da      	uxtb	r2, r3
 8002640:	490c      	ldr	r1, [pc, #48]	; (8002674 <__NVIC_SetPriority+0x4c>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	0112      	lsls	r2, r2, #4
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	440b      	add	r3, r1
 800264c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002650:	e00a      	b.n	8002668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4908      	ldr	r1, [pc, #32]	; (8002678 <__NVIC_SetPriority+0x50>)
 8002658:	79fb      	ldrb	r3, [r7, #7]
 800265a:	f003 030f 	and.w	r3, r3, #15
 800265e:	3b04      	subs	r3, #4
 8002660:	0112      	lsls	r2, r2, #4
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	440b      	add	r3, r1
 8002666:	761a      	strb	r2, [r3, #24]
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	e000e100 	.word	0xe000e100
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <NVIC_EncodePriority>:
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	; 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	60f8      	str	r0, [r7, #12]
 8002684:	60b9      	str	r1, [r7, #8]
 8002686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002690:	69fb      	ldr	r3, [r7, #28]
 8002692:	f1c3 0307 	rsb	r3, r3, #7
 8002696:	2b04      	cmp	r3, #4
 8002698:	bf28      	it	cs
 800269a:	2304      	movcs	r3, #4
 800269c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3304      	adds	r3, #4
 80026a2:	2b06      	cmp	r3, #6
 80026a4:	d902      	bls.n	80026ac <NVIC_EncodePriority+0x30>
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3b03      	subs	r3, #3
 80026aa:	e000      	b.n	80026ae <NVIC_EncodePriority+0x32>
 80026ac:	2300      	movs	r3, #0
 80026ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b0:	f04f 32ff 	mov.w	r2, #4294967295
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ba:	43da      	mvns	r2, r3
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	401a      	ands	r2, r3
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c4:	f04f 31ff 	mov.w	r1, #4294967295
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	fa01 f303 	lsl.w	r3, r1, r3
 80026ce:	43d9      	mvns	r1, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d4:	4313      	orrs	r3, r2
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3724      	adds	r7, #36	; 0x24
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr
	...

080026e4 <SysTick_Config>:
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f4:	d301      	bcc.n	80026fa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00f      	b.n	800271a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fa:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <SysTick_Config+0x40>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002702:	210f      	movs	r1, #15
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	f7ff ff8e 	bl	8002628 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <SysTick_Config+0x40>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002712:	4b04      	ldr	r3, [pc, #16]	; (8002724 <SysTick_Config+0x40>)
 8002714:	2207      	movs	r2, #7
 8002716:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	e000e010 	.word	0xe000e010

08002728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ff47 	bl	80025c4 <__NVIC_SetPriorityGrouping>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002750:	f7ff ff5c 	bl	800260c <__NVIC_GetPriorityGrouping>
 8002754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	6978      	ldr	r0, [r7, #20]
 800275c:	f7ff ff8e 	bl	800267c <NVIC_EncodePriority>
 8002760:	4602      	mov	r2, r0
 8002762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff5d 	bl	8002628 <__NVIC_SetPriority>
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff ffb0 	bl	80026e4 <SysTick_Config>
 8002784:	4603      	mov	r3, r0
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
	...

08002790 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002790:	b480      	push	{r7}
 8002792:	b089      	sub	sp, #36	; 0x24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279a:	2300      	movs	r3, #0
 800279c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027a6:	2300      	movs	r3, #0
 80027a8:	61fb      	str	r3, [r7, #28]
 80027aa:	e165      	b.n	8002a78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027ac:	2201      	movs	r2, #1
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	fa02 f303 	lsl.w	r3, r2, r3
 80027b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	697a      	ldr	r2, [r7, #20]
 80027bc:	4013      	ands	r3, r2
 80027be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c0:	693a      	ldr	r2, [r7, #16]
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	f040 8154 	bne.w	8002a72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d005      	beq.n	80027e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d130      	bne.n	8002844 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68da      	ldr	r2, [r3, #12]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	fa02 f303 	lsl.w	r3, r2, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4313      	orrs	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002818:	2201      	movs	r2, #1
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	fa02 f303 	lsl.w	r3, r2, r3
 8002820:	43db      	mvns	r3, r3
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4013      	ands	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	091b      	lsrs	r3, r3, #4
 800282e:	f003 0201 	and.w	r2, r3, #1
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	69ba      	ldr	r2, [r7, #24]
 800283a:	4313      	orrs	r3, r2
 800283c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f003 0303 	and.w	r3, r3, #3
 800284c:	2b03      	cmp	r3, #3
 800284e:	d017      	beq.n	8002880 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f003 0303 	and.w	r3, r3, #3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d123      	bne.n	80028d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800288c:	69fb      	ldr	r3, [r7, #28]
 800288e:	08da      	lsrs	r2, r3, #3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	3208      	adds	r2, #8
 8002894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	220f      	movs	r2, #15
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	08da      	lsrs	r2, r3, #3
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3208      	adds	r2, #8
 80028ce:	69b9      	ldr	r1, [r7, #24]
 80028d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	005b      	lsls	r3, r3, #1
 80028de:	2203      	movs	r2, #3
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43db      	mvns	r3, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4013      	ands	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	005b      	lsls	r3, r3, #1
 80028f8:	fa02 f303 	lsl.w	r3, r2, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4313      	orrs	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80ae 	beq.w	8002a72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002916:	2300      	movs	r3, #0
 8002918:	60fb      	str	r3, [r7, #12]
 800291a:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <HAL_GPIO_Init+0x300>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	4a5c      	ldr	r2, [pc, #368]	; (8002a90 <HAL_GPIO_Init+0x300>)
 8002920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002924:	6453      	str	r3, [r2, #68]	; 0x44
 8002926:	4b5a      	ldr	r3, [pc, #360]	; (8002a90 <HAL_GPIO_Init+0x300>)
 8002928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800292e:	60fb      	str	r3, [r7, #12]
 8002930:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002932:	4a58      	ldr	r2, [pc, #352]	; (8002a94 <HAL_GPIO_Init+0x304>)
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	089b      	lsrs	r3, r3, #2
 8002938:	3302      	adds	r3, #2
 800293a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	f003 0303 	and.w	r3, r3, #3
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	220f      	movs	r2, #15
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43db      	mvns	r3, r3
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4013      	ands	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4f      	ldr	r2, [pc, #316]	; (8002a98 <HAL_GPIO_Init+0x308>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d025      	beq.n	80029aa <HAL_GPIO_Init+0x21a>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4e      	ldr	r2, [pc, #312]	; (8002a9c <HAL_GPIO_Init+0x30c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d01f      	beq.n	80029a6 <HAL_GPIO_Init+0x216>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a4d      	ldr	r2, [pc, #308]	; (8002aa0 <HAL_GPIO_Init+0x310>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d019      	beq.n	80029a2 <HAL_GPIO_Init+0x212>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a4c      	ldr	r2, [pc, #304]	; (8002aa4 <HAL_GPIO_Init+0x314>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d013      	beq.n	800299e <HAL_GPIO_Init+0x20e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a4b      	ldr	r2, [pc, #300]	; (8002aa8 <HAL_GPIO_Init+0x318>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d00d      	beq.n	800299a <HAL_GPIO_Init+0x20a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a4a      	ldr	r2, [pc, #296]	; (8002aac <HAL_GPIO_Init+0x31c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <HAL_GPIO_Init+0x206>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a49      	ldr	r2, [pc, #292]	; (8002ab0 <HAL_GPIO_Init+0x320>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d101      	bne.n	8002992 <HAL_GPIO_Init+0x202>
 800298e:	2306      	movs	r3, #6
 8002990:	e00c      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 8002992:	2307      	movs	r3, #7
 8002994:	e00a      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 8002996:	2305      	movs	r3, #5
 8002998:	e008      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 800299a:	2304      	movs	r3, #4
 800299c:	e006      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 800299e:	2303      	movs	r3, #3
 80029a0:	e004      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 80029a2:	2302      	movs	r3, #2
 80029a4:	e002      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_GPIO_Init+0x21c>
 80029aa:	2300      	movs	r3, #0
 80029ac:	69fa      	ldr	r2, [r7, #28]
 80029ae:	f002 0203 	and.w	r2, r2, #3
 80029b2:	0092      	lsls	r2, r2, #2
 80029b4:	4093      	lsls	r3, r2
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4313      	orrs	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029bc:	4935      	ldr	r1, [pc, #212]	; (8002a94 <HAL_GPIO_Init+0x304>)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	089b      	lsrs	r3, r3, #2
 80029c2:	3302      	adds	r3, #2
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ca:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	43db      	mvns	r3, r3
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4013      	ands	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d003      	beq.n	80029ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80029e6:	69ba      	ldr	r2, [r7, #24]
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ee:	4a31      	ldr	r2, [pc, #196]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029f4:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a18:	4a26      	ldr	r2, [pc, #152]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a1e:	4b25      	ldr	r3, [pc, #148]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a42:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a48:	4b1a      	ldr	r3, [pc, #104]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a4e:	693b      	ldr	r3, [r7, #16]
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a6c:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <HAL_GPIO_Init+0x324>)
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3301      	adds	r3, #1
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	2b0f      	cmp	r3, #15
 8002a7c:	f67f ae96 	bls.w	80027ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3724      	adds	r7, #36	; 0x24
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	40023800 	.word	0x40023800
 8002a94:	40013800 	.word	0x40013800
 8002a98:	40020000 	.word	0x40020000
 8002a9c:	40020400 	.word	0x40020400
 8002aa0:	40020800 	.word	0x40020800
 8002aa4:	40020c00 	.word	0x40020c00
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40021400 	.word	0x40021400
 8002ab0:	40021800 	.word	0x40021800
 8002ab4:	40013c00 	.word	0x40013c00

08002ab8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	691a      	ldr	r2, [r3, #16]
 8002ac8:	887b      	ldrh	r3, [r7, #2]
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	73fb      	strb	r3, [r7, #15]
 8002ad4:	e001      	b.n	8002ada <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3714      	adds	r7, #20
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	460b      	mov	r3, r1
 8002af2:	807b      	strh	r3, [r7, #2]
 8002af4:	4613      	mov	r3, r2
 8002af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002af8:	787b      	ldrb	r3, [r7, #1]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002afe:	887a      	ldrh	r2, [r7, #2]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b04:	e003      	b.n	8002b0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b06:	887b      	ldrh	r3, [r7, #2]
 8002b08:	041a      	lsls	r2, r3, #16
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	619a      	str	r2, [r3, #24]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e0cc      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b30:	4b68      	ldr	r3, [pc, #416]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d90c      	bls.n	8002b58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3e:	4b65      	ldr	r3, [pc, #404]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b46:	4b63      	ldr	r3, [pc, #396]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	683a      	ldr	r2, [r7, #0]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d001      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e0b8      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d020      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d005      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b70:	4b59      	ldr	r3, [pc, #356]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a58      	ldr	r2, [pc, #352]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b88:	4b53      	ldr	r3, [pc, #332]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a52      	ldr	r2, [pc, #328]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b94:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	494d      	ldr	r1, [pc, #308]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0301 	and.w	r3, r3, #1
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d044      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d107      	bne.n	8002bca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d119      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e07f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d003      	beq.n	8002bda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d107      	bne.n	8002bea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bda:	4b3f      	ldr	r3, [pc, #252]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d109      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bea:	4b3b      	ldr	r3, [pc, #236]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e067      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bfa:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f023 0203 	bic.w	r2, r3, #3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	4934      	ldr	r1, [pc, #208]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c0c:	f7ff fcaa 	bl	8002564 <HAL_GetTick>
 8002c10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c12:	e00a      	b.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c14:	f7ff fca6 	bl	8002564 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d901      	bls.n	8002c2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e04f      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	4b2b      	ldr	r3, [pc, #172]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 020c 	and.w	r2, r3, #12
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d1eb      	bne.n	8002c14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c3c:	4b25      	ldr	r3, [pc, #148]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f003 030f 	and.w	r3, r3, #15
 8002c44:	683a      	ldr	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d20c      	bcs.n	8002c64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c4a:	4b22      	ldr	r3, [pc, #136]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_RCC_ClockConfig+0x1b8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	683a      	ldr	r2, [r7, #0]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e032      	b.n	8002cca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d008      	beq.n	8002c82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c70:	4b19      	ldr	r3, [pc, #100]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4916      	ldr	r1, [pc, #88]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0308 	and.w	r3, r3, #8
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d009      	beq.n	8002ca2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c8e:	4b12      	ldr	r3, [pc, #72]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	490e      	ldr	r1, [pc, #56]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ca2:	f000 fb4b 	bl	800333c <HAL_RCC_GetSysClockFreq>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	4b0b      	ldr	r3, [pc, #44]	; (8002cd8 <HAL_RCC_ClockConfig+0x1bc>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	490a      	ldr	r1, [pc, #40]	; (8002cdc <HAL_RCC_ClockConfig+0x1c0>)
 8002cb4:	5ccb      	ldrb	r3, [r1, r3]
 8002cb6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cba:	4a09      	ldr	r2, [pc, #36]	; (8002ce0 <HAL_RCC_ClockConfig+0x1c4>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cbe:	4b09      	ldr	r3, [pc, #36]	; (8002ce4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fc0a 	bl	80024dc <HAL_InitTick>

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40023c00 	.word	0x40023c00
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	08013d68 	.word	0x08013d68
 8002ce0:	20000004 	.word	0x20000004
 8002ce4:	20000008 	.word	0x20000008

08002ce8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b08c      	sub	sp, #48	; 0x30
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002d00:	2300      	movs	r3, #0
 8002d02:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d010      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002d20:	4b6f      	ldr	r3, [pc, #444]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d26:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2e:	496c      	ldr	r1, [pc, #432]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d30:	4313      	orrs	r3, r2
 8002d32:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d010      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002d4e:	4b64      	ldr	r3, [pc, #400]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d54:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d5c:	4960      	ldr	r1, [pc, #384]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d101      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d017      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d7c:	4b58      	ldr	r3, [pc, #352]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8a:	4955      	ldr	r1, [pc, #340]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9a:	d101      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002da8:	2301      	movs	r3, #1
 8002daa:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0308 	and.w	r3, r3, #8
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d017      	beq.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002db8:	4b49      	ldr	r3, [pc, #292]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dbe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc6:	4946      	ldr	r1, [pc, #280]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dd2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd6:	d101      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d101      	bne.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002de4:	2301      	movs	r3, #1
 8002de6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0320 	and.w	r3, r3, #32
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	f000 808a 	beq.w	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002df6:	2300      	movs	r3, #0
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	4b39      	ldr	r3, [pc, #228]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	4a38      	ldr	r2, [pc, #224]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e04:	6413      	str	r3, [r2, #64]	; 0x40
 8002e06:	4b36      	ldr	r3, [pc, #216]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0e:	60bb      	str	r3, [r7, #8]
 8002e10:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e12:	4b34      	ldr	r3, [pc, #208]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a33      	ldr	r2, [pc, #204]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e1e:	f7ff fba1 	bl	8002564 <HAL_GetTick>
 8002e22:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e24:	e008      	b.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e26:	f7ff fb9d 	bl	8002564 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	1ad3      	subs	r3, r2, r3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d901      	bls.n	8002e38 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002e34:	2303      	movs	r3, #3
 8002e36:	e278      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e38:	4b2a      	ldr	r3, [pc, #168]	; (8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d0f0      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e44:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e4c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d02f      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5c:	6a3a      	ldr	r2, [r7, #32]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d028      	beq.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e62:	4b1f      	ldr	r3, [pc, #124]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e6a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e6c:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e6e:	2201      	movs	r2, #1
 8002e70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e72:	4b1d      	ldr	r3, [pc, #116]	; (8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e78:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e7e:	4b18      	ldr	r3, [pc, #96]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d114      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e8a:	f7ff fb6b 	bl	8002564 <HAL_GetTick>
 8002e8e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	e00a      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e92:	f7ff fb67 	bl	8002564 <HAL_GetTick>
 8002e96:	4602      	mov	r2, r0
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e240      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d0ee      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ebc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec0:	d114      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002ec2:	4b07      	ldr	r3, [pc, #28]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002ed2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ed6:	4902      	ldr	r1, [pc, #8]	; (8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	608b      	str	r3, [r1, #8]
 8002edc:	e00c      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002ede:	bf00      	nop
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40007000 	.word	0x40007000
 8002ee8:	42470e40 	.word	0x42470e40
 8002eec:	4b4a      	ldr	r3, [pc, #296]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	4a49      	ldr	r2, [pc, #292]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ef2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002ef6:	6093      	str	r3, [r2, #8]
 8002ef8:	4b47      	ldr	r3, [pc, #284]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002efa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f04:	4944      	ldr	r1, [pc, #272]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0310 	and.w	r3, r3, #16
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d004      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002f1c:	4b3f      	ldr	r3, [pc, #252]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002f1e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002f2c:	4b3a      	ldr	r3, [pc, #232]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f32:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	4937      	ldr	r1, [pc, #220]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f4e:	4b32      	ldr	r3, [pc, #200]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f54:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f5c:	492e      	ldr	r1, [pc, #184]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d011      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f70:	4b29      	ldr	r3, [pc, #164]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f76:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f7e:	4926      	ldr	r1, [pc, #152]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f8e:	d101      	bne.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002f90:	2301      	movs	r3, #1
 8002f92:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fa6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	491a      	ldr	r1, [pc, #104]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d011      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002fc2:	4b15      	ldr	r3, [pc, #84]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fc8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd0:	4911      	ldr	r1, [pc, #68]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002fe0:	d101      	bne.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d005      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff4:	f040 80ff 	bne.w	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ff8:	4b09      	ldr	r3, [pc, #36]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002ffe:	f7ff fab1 	bl	8002564 <HAL_GetTick>
 8003002:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003004:	e00e      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003006:	f7ff faad 	bl	8002564 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b02      	cmp	r3, #2
 8003012:	d907      	bls.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e188      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003018:	40023800 	.word	0x40023800
 800301c:	424711e0 	.word	0x424711e0
 8003020:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003024:	4b7e      	ldr	r3, [pc, #504]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d1ea      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003040:	2b00      	cmp	r3, #0
 8003042:	d009      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 800304c:	2b00      	cmp	r3, #0
 800304e:	d028      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003054:	2b00      	cmp	r3, #0
 8003056:	d124      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003058:	4b71      	ldr	r3, [pc, #452]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800305a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800305e:	0c1b      	lsrs	r3, r3, #16
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	3301      	adds	r3, #1
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800306a:	4b6d      	ldr	r3, [pc, #436]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800306c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003070:	0e1b      	lsrs	r3, r3, #24
 8003072:	f003 030f 	and.w	r3, r3, #15
 8003076:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	019b      	lsls	r3, r3, #6
 8003082:	431a      	orrs	r2, r3
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	3b01      	subs	r3, #1
 800308a:	041b      	lsls	r3, r3, #16
 800308c:	431a      	orrs	r2, r3
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	061b      	lsls	r3, r3, #24
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	695b      	ldr	r3, [r3, #20]
 8003098:	071b      	lsls	r3, r3, #28
 800309a:	4961      	ldr	r1, [pc, #388]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0304 	and.w	r3, r3, #4
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d004      	beq.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030b6:	d00a      	beq.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d035      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030cc:	d130      	bne.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80030ce:	4b54      	ldr	r3, [pc, #336]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030d4:	0c1b      	lsrs	r3, r3, #16
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	3301      	adds	r3, #1
 80030dc:	005b      	lsls	r3, r3, #1
 80030de:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030e0:	4b4f      	ldr	r3, [pc, #316]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030e6:	0f1b      	lsrs	r3, r3, #28
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	689b      	ldr	r3, [r3, #8]
 80030f6:	019b      	lsls	r3, r3, #6
 80030f8:	431a      	orrs	r2, r3
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	085b      	lsrs	r3, r3, #1
 80030fe:	3b01      	subs	r3, #1
 8003100:	041b      	lsls	r3, r3, #16
 8003102:	431a      	orrs	r2, r3
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	691b      	ldr	r3, [r3, #16]
 8003108:	061b      	lsls	r3, r3, #24
 800310a:	431a      	orrs	r2, r3
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	071b      	lsls	r3, r3, #28
 8003110:	4943      	ldr	r1, [pc, #268]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003118:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800311a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800311e:	f023 021f 	bic.w	r2, r3, #31
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003126:	3b01      	subs	r3, #1
 8003128:	493d      	ldr	r1, [pc, #244]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800312a:	4313      	orrs	r3, r2
 800312c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003138:	2b00      	cmp	r3, #0
 800313a:	d029      	beq.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003140:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003144:	d124      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003146:	4b36      	ldr	r3, [pc, #216]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003148:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800314c:	0c1b      	lsrs	r3, r3, #16
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	3301      	adds	r3, #1
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003158:	4b31      	ldr	r3, [pc, #196]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800315a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800315e:	0f1b      	lsrs	r3, r3, #28
 8003160:	f003 0307 	and.w	r3, r3, #7
 8003164:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	019b      	lsls	r3, r3, #6
 8003170:	431a      	orrs	r2, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	085b      	lsrs	r3, r3, #1
 8003178:	3b01      	subs	r3, #1
 800317a:	041b      	lsls	r3, r3, #16
 800317c:	431a      	orrs	r2, r3
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	061b      	lsls	r3, r3, #24
 8003182:	431a      	orrs	r2, r3
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	071b      	lsls	r3, r3, #28
 8003188:	4925      	ldr	r1, [pc, #148]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800318a:	4313      	orrs	r3, r2
 800318c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003198:	2b00      	cmp	r3, #0
 800319a:	d016      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	019b      	lsls	r3, r3, #6
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	085b      	lsrs	r3, r3, #1
 80031ae:	3b01      	subs	r3, #1
 80031b0:	041b      	lsls	r3, r3, #16
 80031b2:	431a      	orrs	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	061b      	lsls	r3, r3, #24
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	071b      	lsls	r3, r3, #28
 80031c2:	4917      	ldr	r1, [pc, #92]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031ca:	4b16      	ldr	r3, [pc, #88]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80031cc:	2201      	movs	r2, #1
 80031ce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031d0:	f7ff f9c8 	bl	8002564 <HAL_GetTick>
 80031d4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031d6:	e008      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031d8:	f7ff f9c4 	bl	8002564 <HAL_GetTick>
 80031dc:	4602      	mov	r2, r0
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	1ad3      	subs	r3, r2, r3
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d901      	bls.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e09f      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031ea:	4b0d      	ldr	r3, [pc, #52]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0f0      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80031f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	f040 8095 	bne.w	8003328 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003200:	2200      	movs	r2, #0
 8003202:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003204:	f7ff f9ae 	bl	8002564 <HAL_GetTick>
 8003208:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800320a:	e00f      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800320c:	f7ff f9aa 	bl	8002564 <HAL_GetTick>
 8003210:	4602      	mov	r2, r0
 8003212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	2b02      	cmp	r3, #2
 8003218:	d908      	bls.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800321a:	2303      	movs	r3, #3
 800321c:	e085      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	42470068 	.word	0x42470068
 8003228:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800322c:	4b41      	ldr	r3, [pc, #260]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003238:	d0e8      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0304 	and.w	r3, r3, #4
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	2b00      	cmp	r3, #0
 800324c:	d009      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003256:	2b00      	cmp	r3, #0
 8003258:	d02b      	beq.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800325e:	2b00      	cmp	r3, #0
 8003260:	d127      	bne.n	80032b2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003262:	4b34      	ldr	r3, [pc, #208]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003268:	0c1b      	lsrs	r3, r3, #16
 800326a:	f003 0303 	and.w	r3, r3, #3
 800326e:	3301      	adds	r3, #1
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	69db      	ldr	r3, [r3, #28]
 800327c:	019b      	lsls	r3, r3, #6
 800327e:	431a      	orrs	r2, r3
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	085b      	lsrs	r3, r3, #1
 8003284:	3b01      	subs	r3, #1
 8003286:	041b      	lsls	r3, r3, #16
 8003288:	431a      	orrs	r2, r3
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328e:	061b      	lsls	r3, r3, #24
 8003290:	4928      	ldr	r1, [pc, #160]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003298:	4b26      	ldr	r3, [pc, #152]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800329a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800329e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a6:	3b01      	subs	r3, #1
 80032a8:	021b      	lsls	r3, r3, #8
 80032aa:	4922      	ldr	r1, [pc, #136]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01d      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x612>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032c6:	d118      	bne.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032c8:	4b1a      	ldr	r3, [pc, #104]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ce:	0e1b      	lsrs	r3, r3, #24
 80032d0:	f003 030f 	and.w	r3, r3, #15
 80032d4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	699a      	ldr	r2, [r3, #24]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	019b      	lsls	r3, r3, #6
 80032e0:	431a      	orrs	r2, r3
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
 80032ec:	431a      	orrs	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	061b      	lsls	r3, r3, #24
 80032f2:	4910      	ldr	r1, [pc, #64]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032f4:	4313      	orrs	r3, r2
 80032f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80032fc:	2201      	movs	r2, #1
 80032fe:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003300:	f7ff f930 	bl	8002564 <HAL_GetTick>
 8003304:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003306:	e008      	b.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003308:	f7ff f92c 	bl	8002564 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e007      	b.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003322:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003326:	d1ef      	bne.n	8003308 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3730      	adds	r7, #48	; 0x30
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023800 	.word	0x40023800
 8003338:	42470070 	.word	0x42470070

0800333c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800333c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003340:	b088      	sub	sp, #32
 8003342:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003344:	2300      	movs	r3, #0
 8003346:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003358:	4bce      	ldr	r3, [pc, #824]	; (8003694 <HAL_RCC_GetSysClockFreq+0x358>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	f003 030c 	and.w	r3, r3, #12
 8003360:	2b0c      	cmp	r3, #12
 8003362:	f200 818d 	bhi.w	8003680 <HAL_RCC_GetSysClockFreq+0x344>
 8003366:	a201      	add	r2, pc, #4	; (adr r2, 800336c <HAL_RCC_GetSysClockFreq+0x30>)
 8003368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336c:	080033a1 	.word	0x080033a1
 8003370:	08003681 	.word	0x08003681
 8003374:	08003681 	.word	0x08003681
 8003378:	08003681 	.word	0x08003681
 800337c:	080033a7 	.word	0x080033a7
 8003380:	08003681 	.word	0x08003681
 8003384:	08003681 	.word	0x08003681
 8003388:	08003681 	.word	0x08003681
 800338c:	080033ad 	.word	0x080033ad
 8003390:	08003681 	.word	0x08003681
 8003394:	08003681 	.word	0x08003681
 8003398:	08003681 	.word	0x08003681
 800339c:	08003521 	.word	0x08003521
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033a0:	4bbd      	ldr	r3, [pc, #756]	; (8003698 <HAL_RCC_GetSysClockFreq+0x35c>)
 80033a2:	61bb      	str	r3, [r7, #24]
       break;
 80033a4:	e16f      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033a6:	4bbd      	ldr	r3, [pc, #756]	; (800369c <HAL_RCC_GetSysClockFreq+0x360>)
 80033a8:	61bb      	str	r3, [r7, #24]
      break;
 80033aa:	e16c      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ac:	4bb9      	ldr	r3, [pc, #740]	; (8003694 <HAL_RCC_GetSysClockFreq+0x358>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033b4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033b6:	4bb7      	ldr	r3, [pc, #732]	; (8003694 <HAL_RCC_GetSysClockFreq+0x358>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d053      	beq.n	800346a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033c2:	4bb4      	ldr	r3, [pc, #720]	; (8003694 <HAL_RCC_GetSysClockFreq+0x358>)
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	099b      	lsrs	r3, r3, #6
 80033c8:	461a      	mov	r2, r3
 80033ca:	f04f 0300 	mov.w	r3, #0
 80033ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	ea02 0400 	and.w	r4, r2, r0
 80033da:	603c      	str	r4, [r7, #0]
 80033dc:	400b      	ands	r3, r1
 80033de:	607b      	str	r3, [r7, #4]
 80033e0:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033e4:	4620      	mov	r0, r4
 80033e6:	4629      	mov	r1, r5
 80033e8:	f04f 0200 	mov.w	r2, #0
 80033ec:	f04f 0300 	mov.w	r3, #0
 80033f0:	014b      	lsls	r3, r1, #5
 80033f2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033f6:	0142      	lsls	r2, r0, #5
 80033f8:	4610      	mov	r0, r2
 80033fa:	4619      	mov	r1, r3
 80033fc:	4623      	mov	r3, r4
 80033fe:	1ac0      	subs	r0, r0, r3
 8003400:	462b      	mov	r3, r5
 8003402:	eb61 0103 	sbc.w	r1, r1, r3
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	018b      	lsls	r3, r1, #6
 8003410:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003414:	0182      	lsls	r2, r0, #6
 8003416:	1a12      	subs	r2, r2, r0
 8003418:	eb63 0301 	sbc.w	r3, r3, r1
 800341c:	f04f 0000 	mov.w	r0, #0
 8003420:	f04f 0100 	mov.w	r1, #0
 8003424:	00d9      	lsls	r1, r3, #3
 8003426:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800342a:	00d0      	lsls	r0, r2, #3
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4621      	mov	r1, r4
 8003432:	1852      	adds	r2, r2, r1
 8003434:	4629      	mov	r1, r5
 8003436:	eb43 0101 	adc.w	r1, r3, r1
 800343a:	460b      	mov	r3, r1
 800343c:	f04f 0000 	mov.w	r0, #0
 8003440:	f04f 0100 	mov.w	r1, #0
 8003444:	0259      	lsls	r1, r3, #9
 8003446:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800344a:	0250      	lsls	r0, r2, #9
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4610      	mov	r0, r2
 8003452:	4619      	mov	r1, r3
 8003454:	697b      	ldr	r3, [r7, #20]
 8003456:	461a      	mov	r2, r3
 8003458:	f04f 0300 	mov.w	r3, #0
 800345c:	f7fd fbd4 	bl	8000c08 <__aeabi_uldivmod>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4613      	mov	r3, r2
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	e04c      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346a:	4b8a      	ldr	r3, [pc, #552]	; (8003694 <HAL_RCC_GetSysClockFreq+0x358>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	099b      	lsrs	r3, r3, #6
 8003470:	461a      	mov	r2, r3
 8003472:	f04f 0300 	mov.w	r3, #0
 8003476:	f240 10ff 	movw	r0, #511	; 0x1ff
 800347a:	f04f 0100 	mov.w	r1, #0
 800347e:	ea02 0a00 	and.w	sl, r2, r0
 8003482:	ea03 0b01 	and.w	fp, r3, r1
 8003486:	4650      	mov	r0, sl
 8003488:	4659      	mov	r1, fp
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	014b      	lsls	r3, r1, #5
 8003494:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003498:	0142      	lsls	r2, r0, #5
 800349a:	4610      	mov	r0, r2
 800349c:	4619      	mov	r1, r3
 800349e:	ebb0 000a 	subs.w	r0, r0, sl
 80034a2:	eb61 010b 	sbc.w	r1, r1, fp
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	018b      	lsls	r3, r1, #6
 80034b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034b4:	0182      	lsls	r2, r0, #6
 80034b6:	1a12      	subs	r2, r2, r0
 80034b8:	eb63 0301 	sbc.w	r3, r3, r1
 80034bc:	f04f 0000 	mov.w	r0, #0
 80034c0:	f04f 0100 	mov.w	r1, #0
 80034c4:	00d9      	lsls	r1, r3, #3
 80034c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034ca:	00d0      	lsls	r0, r2, #3
 80034cc:	4602      	mov	r2, r0
 80034ce:	460b      	mov	r3, r1
 80034d0:	eb12 020a 	adds.w	r2, r2, sl
 80034d4:	eb43 030b 	adc.w	r3, r3, fp
 80034d8:	f04f 0000 	mov.w	r0, #0
 80034dc:	f04f 0100 	mov.w	r1, #0
 80034e0:	0299      	lsls	r1, r3, #10
 80034e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80034e6:	0290      	lsls	r0, r2, #10
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	461a      	mov	r2, r3
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	f7fd fb86 	bl	8000c08 <__aeabi_uldivmod>
 80034fc:	4602      	mov	r2, r0
 80034fe:	460b      	mov	r3, r1
 8003500:	4613      	mov	r3, r2
 8003502:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003504:	4b63      	ldr	r3, [pc, #396]	; (8003694 <HAL_RCC_GetSysClockFreq+0x358>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	0c1b      	lsrs	r3, r3, #16
 800350a:	f003 0303 	and.w	r3, r3, #3
 800350e:	3301      	adds	r3, #1
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	fbb2 f3f3 	udiv	r3, r2, r3
 800351c:	61bb      	str	r3, [r7, #24]
      break;
 800351e:	e0b2      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003520:	4b5c      	ldr	r3, [pc, #368]	; (8003694 <HAL_RCC_GetSysClockFreq+0x358>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003528:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352a:	4b5a      	ldr	r3, [pc, #360]	; (8003694 <HAL_RCC_GetSysClockFreq+0x358>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d04d      	beq.n	80035d2 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b57      	ldr	r3, [pc, #348]	; (8003694 <HAL_RCC_GetSysClockFreq+0x358>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	461a      	mov	r2, r3
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003546:	f04f 0100 	mov.w	r1, #0
 800354a:	ea02 0800 	and.w	r8, r2, r0
 800354e:	ea03 0901 	and.w	r9, r3, r1
 8003552:	4640      	mov	r0, r8
 8003554:	4649      	mov	r1, r9
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	014b      	lsls	r3, r1, #5
 8003560:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003564:	0142      	lsls	r2, r0, #5
 8003566:	4610      	mov	r0, r2
 8003568:	4619      	mov	r1, r3
 800356a:	ebb0 0008 	subs.w	r0, r0, r8
 800356e:	eb61 0109 	sbc.w	r1, r1, r9
 8003572:	f04f 0200 	mov.w	r2, #0
 8003576:	f04f 0300 	mov.w	r3, #0
 800357a:	018b      	lsls	r3, r1, #6
 800357c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003580:	0182      	lsls	r2, r0, #6
 8003582:	1a12      	subs	r2, r2, r0
 8003584:	eb63 0301 	sbc.w	r3, r3, r1
 8003588:	f04f 0000 	mov.w	r0, #0
 800358c:	f04f 0100 	mov.w	r1, #0
 8003590:	00d9      	lsls	r1, r3, #3
 8003592:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003596:	00d0      	lsls	r0, r2, #3
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	eb12 0208 	adds.w	r2, r2, r8
 80035a0:	eb43 0309 	adc.w	r3, r3, r9
 80035a4:	f04f 0000 	mov.w	r0, #0
 80035a8:	f04f 0100 	mov.w	r1, #0
 80035ac:	0259      	lsls	r1, r3, #9
 80035ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80035b2:	0250      	lsls	r0, r2, #9
 80035b4:	4602      	mov	r2, r0
 80035b6:	460b      	mov	r3, r1
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	461a      	mov	r2, r3
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	f7fd fb20 	bl	8000c08 <__aeabi_uldivmod>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	4613      	mov	r3, r2
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	e04a      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035d2:	4b30      	ldr	r3, [pc, #192]	; (8003694 <HAL_RCC_GetSysClockFreq+0x358>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	099b      	lsrs	r3, r3, #6
 80035d8:	461a      	mov	r2, r3
 80035da:	f04f 0300 	mov.w	r3, #0
 80035de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80035e2:	f04f 0100 	mov.w	r1, #0
 80035e6:	ea02 0400 	and.w	r4, r2, r0
 80035ea:	ea03 0501 	and.w	r5, r3, r1
 80035ee:	4620      	mov	r0, r4
 80035f0:	4629      	mov	r1, r5
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	014b      	lsls	r3, r1, #5
 80035fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003600:	0142      	lsls	r2, r0, #5
 8003602:	4610      	mov	r0, r2
 8003604:	4619      	mov	r1, r3
 8003606:	1b00      	subs	r0, r0, r4
 8003608:	eb61 0105 	sbc.w	r1, r1, r5
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	f04f 0300 	mov.w	r3, #0
 8003614:	018b      	lsls	r3, r1, #6
 8003616:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800361a:	0182      	lsls	r2, r0, #6
 800361c:	1a12      	subs	r2, r2, r0
 800361e:	eb63 0301 	sbc.w	r3, r3, r1
 8003622:	f04f 0000 	mov.w	r0, #0
 8003626:	f04f 0100 	mov.w	r1, #0
 800362a:	00d9      	lsls	r1, r3, #3
 800362c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003630:	00d0      	lsls	r0, r2, #3
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	1912      	adds	r2, r2, r4
 8003638:	eb45 0303 	adc.w	r3, r5, r3
 800363c:	f04f 0000 	mov.w	r0, #0
 8003640:	f04f 0100 	mov.w	r1, #0
 8003644:	0299      	lsls	r1, r3, #10
 8003646:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800364a:	0290      	lsls	r0, r2, #10
 800364c:	4602      	mov	r2, r0
 800364e:	460b      	mov	r3, r1
 8003650:	4610      	mov	r0, r2
 8003652:	4619      	mov	r1, r3
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	461a      	mov	r2, r3
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	f7fd fad4 	bl	8000c08 <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4613      	mov	r3, r2
 8003666:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003668:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <HAL_RCC_GetSysClockFreq+0x358>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	0f1b      	lsrs	r3, r3, #28
 800366e:	f003 0307 	and.w	r3, r3, #7
 8003672:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003674:	69fa      	ldr	r2, [r7, #28]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	61bb      	str	r3, [r7, #24]
      break;
 800367e:	e002      	b.n	8003686 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003680:	4b05      	ldr	r3, [pc, #20]	; (8003698 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003682:	61bb      	str	r3, [r7, #24]
      break;
 8003684:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003686:	69bb      	ldr	r3, [r7, #24]
}
 8003688:	4618      	mov	r0, r3
 800368a:	3720      	adds	r7, #32
 800368c:	46bd      	mov	sp, r7
 800368e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003692:	bf00      	nop
 8003694:	40023800 	.word	0x40023800
 8003698:	00f42400 	.word	0x00f42400
 800369c:	007a1200 	.word	0x007a1200

080036a0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e28d      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	f000 8083 	beq.w	80037c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036c0:	4b94      	ldr	r3, [pc, #592]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	f003 030c 	and.w	r3, r3, #12
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d019      	beq.n	8003700 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036cc:	4b91      	ldr	r3, [pc, #580]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d106      	bne.n	80036e6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036d8:	4b8e      	ldr	r3, [pc, #568]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036e4:	d00c      	beq.n	8003700 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036e6:	4b8b      	ldr	r3, [pc, #556]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036ee:	2b0c      	cmp	r3, #12
 80036f0:	d112      	bne.n	8003718 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036f2:	4b88      	ldr	r3, [pc, #544]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036fe:	d10b      	bne.n	8003718 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	4b84      	ldr	r3, [pc, #528]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d05b      	beq.n	80037c4 <HAL_RCC_OscConfig+0x124>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d157      	bne.n	80037c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e25a      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003720:	d106      	bne.n	8003730 <HAL_RCC_OscConfig+0x90>
 8003722:	4b7c      	ldr	r3, [pc, #496]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a7b      	ldr	r2, [pc, #492]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372c:	6013      	str	r3, [r2, #0]
 800372e:	e01d      	b.n	800376c <HAL_RCC_OscConfig+0xcc>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003738:	d10c      	bne.n	8003754 <HAL_RCC_OscConfig+0xb4>
 800373a:	4b76      	ldr	r3, [pc, #472]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a75      	ldr	r2, [pc, #468]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003744:	6013      	str	r3, [r2, #0]
 8003746:	4b73      	ldr	r3, [pc, #460]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a72      	ldr	r2, [pc, #456]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 800374c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	e00b      	b.n	800376c <HAL_RCC_OscConfig+0xcc>
 8003754:	4b6f      	ldr	r3, [pc, #444]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a6e      	ldr	r2, [pc, #440]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 800375a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375e:	6013      	str	r3, [r2, #0]
 8003760:	4b6c      	ldr	r3, [pc, #432]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a6b      	ldr	r2, [pc, #428]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800376a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d013      	beq.n	800379c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7fe fef6 	bl	8002564 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800377c:	f7fe fef2 	bl	8002564 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e21f      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378e:	4b61      	ldr	r3, [pc, #388]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0xdc>
 800379a:	e014      	b.n	80037c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fe fee2 	bl	8002564 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037a4:	f7fe fede 	bl	8002564 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b64      	cmp	r3, #100	; 0x64
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e20b      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037b6:	4b57      	ldr	r3, [pc, #348]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x104>
 80037c2:	e000      	b.n	80037c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d06f      	beq.n	80038b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037d2:	4b50      	ldr	r3, [pc, #320]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 030c 	and.w	r3, r3, #12
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d017      	beq.n	800380e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037de:	4b4d      	ldr	r3, [pc, #308]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d105      	bne.n	80037f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037ea:	4b4a      	ldr	r3, [pc, #296]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d00b      	beq.n	800380e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037f6:	4b47      	ldr	r3, [pc, #284]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037fe:	2b0c      	cmp	r3, #12
 8003800:	d11c      	bne.n	800383c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003802:	4b44      	ldr	r3, [pc, #272]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d116      	bne.n	800383c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800380e:	4b41      	ldr	r3, [pc, #260]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0302 	and.w	r3, r3, #2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d005      	beq.n	8003826 <HAL_RCC_OscConfig+0x186>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d001      	beq.n	8003826 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e1d3      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003826:	4b3b      	ldr	r3, [pc, #236]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4937      	ldr	r1, [pc, #220]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800383a:	e03a      	b.n	80038b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68db      	ldr	r3, [r3, #12]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d020      	beq.n	8003886 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003844:	4b34      	ldr	r3, [pc, #208]	; (8003918 <HAL_RCC_OscConfig+0x278>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384a:	f7fe fe8b 	bl	8002564 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003850:	e008      	b.n	8003864 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003852:	f7fe fe87 	bl	8002564 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e1b4      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003864:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0f0      	beq.n	8003852 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003870:	4b28      	ldr	r3, [pc, #160]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	00db      	lsls	r3, r3, #3
 800387e:	4925      	ldr	r1, [pc, #148]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 8003880:	4313      	orrs	r3, r2
 8003882:	600b      	str	r3, [r1, #0]
 8003884:	e015      	b.n	80038b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003886:	4b24      	ldr	r3, [pc, #144]	; (8003918 <HAL_RCC_OscConfig+0x278>)
 8003888:	2200      	movs	r2, #0
 800388a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800388c:	f7fe fe6a 	bl	8002564 <HAL_GetTick>
 8003890:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003892:	e008      	b.n	80038a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003894:	f7fe fe66 	bl	8002564 <HAL_GetTick>
 8003898:	4602      	mov	r2, r0
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d901      	bls.n	80038a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e193      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038a6:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f003 0302 	and.w	r3, r3, #2
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d1f0      	bne.n	8003894 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d036      	beq.n	800392c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038c6:	4b15      	ldr	r3, [pc, #84]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fe fe4a 	bl	8002564 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d2:	e008      	b.n	80038e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038d4:	f7fe fe46 	bl	8002564 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	2b02      	cmp	r3, #2
 80038e0:	d901      	bls.n	80038e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e173      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <HAL_RCC_OscConfig+0x274>)
 80038e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ea:	f003 0302 	and.w	r3, r3, #2
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0f0      	beq.n	80038d4 <HAL_RCC_OscConfig+0x234>
 80038f2:	e01b      	b.n	800392c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f4:	4b09      	ldr	r3, [pc, #36]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fa:	f7fe fe33 	bl	8002564 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003900:	e00e      	b.n	8003920 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003902:	f7fe fe2f 	bl	8002564 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d907      	bls.n	8003920 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e15c      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
 8003914:	40023800 	.word	0x40023800
 8003918:	42470000 	.word	0x42470000
 800391c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003920:	4b8a      	ldr	r3, [pc, #552]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003922:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1ea      	bne.n	8003902 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0304 	and.w	r3, r3, #4
 8003934:	2b00      	cmp	r3, #0
 8003936:	f000 8097 	beq.w	8003a68 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800393a:	2300      	movs	r3, #0
 800393c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800393e:	4b83      	ldr	r3, [pc, #524]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003942:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d10f      	bne.n	800396a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	4b7f      	ldr	r3, [pc, #508]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003952:	4a7e      	ldr	r2, [pc, #504]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003958:	6413      	str	r3, [r2, #64]	; 0x40
 800395a:	4b7c      	ldr	r3, [pc, #496]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003966:	2301      	movs	r3, #1
 8003968:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800396a:	4b79      	ldr	r3, [pc, #484]	; (8003b50 <HAL_RCC_OscConfig+0x4b0>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003972:	2b00      	cmp	r3, #0
 8003974:	d118      	bne.n	80039a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003976:	4b76      	ldr	r3, [pc, #472]	; (8003b50 <HAL_RCC_OscConfig+0x4b0>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a75      	ldr	r2, [pc, #468]	; (8003b50 <HAL_RCC_OscConfig+0x4b0>)
 800397c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003980:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003982:	f7fe fdef 	bl	8002564 <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800398a:	f7fe fdeb 	bl	8002564 <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e118      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800399c:	4b6c      	ldr	r3, [pc, #432]	; (8003b50 <HAL_RCC_OscConfig+0x4b0>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d106      	bne.n	80039be <HAL_RCC_OscConfig+0x31e>
 80039b0:	4b66      	ldr	r3, [pc, #408]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 80039b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b4:	4a65      	ldr	r2, [pc, #404]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 80039b6:	f043 0301 	orr.w	r3, r3, #1
 80039ba:	6713      	str	r3, [r2, #112]	; 0x70
 80039bc:	e01c      	b.n	80039f8 <HAL_RCC_OscConfig+0x358>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	2b05      	cmp	r3, #5
 80039c4:	d10c      	bne.n	80039e0 <HAL_RCC_OscConfig+0x340>
 80039c6:	4b61      	ldr	r3, [pc, #388]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	4a60      	ldr	r2, [pc, #384]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	f043 0304 	orr.w	r3, r3, #4
 80039d0:	6713      	str	r3, [r2, #112]	; 0x70
 80039d2:	4b5e      	ldr	r3, [pc, #376]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	4a5d      	ldr	r2, [pc, #372]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	f043 0301 	orr.w	r3, r3, #1
 80039dc:	6713      	str	r3, [r2, #112]	; 0x70
 80039de:	e00b      	b.n	80039f8 <HAL_RCC_OscConfig+0x358>
 80039e0:	4b5a      	ldr	r3, [pc, #360]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 80039e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039e4:	4a59      	ldr	r2, [pc, #356]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 80039e6:	f023 0301 	bic.w	r3, r3, #1
 80039ea:	6713      	str	r3, [r2, #112]	; 0x70
 80039ec:	4b57      	ldr	r3, [pc, #348]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 80039ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039f0:	4a56      	ldr	r2, [pc, #344]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 80039f2:	f023 0304 	bic.w	r3, r3, #4
 80039f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d015      	beq.n	8003a2c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a00:	f7fe fdb0 	bl	8002564 <HAL_GetTick>
 8003a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a06:	e00a      	b.n	8003a1e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a08:	f7fe fdac 	bl	8002564 <HAL_GetTick>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	1ad3      	subs	r3, r2, r3
 8003a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e0d7      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a1e:	4b4b      	ldr	r3, [pc, #300]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d0ee      	beq.n	8003a08 <HAL_RCC_OscConfig+0x368>
 8003a2a:	e014      	b.n	8003a56 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fe fd9a 	bl	8002564 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a32:	e00a      	b.n	8003a4a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a34:	f7fe fd96 	bl	8002564 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d901      	bls.n	8003a4a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e0c1      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a4a:	4b40      	ldr	r3, [pc, #256]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1ee      	bne.n	8003a34 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a56:	7dfb      	ldrb	r3, [r7, #23]
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d105      	bne.n	8003a68 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5c:	4b3b      	ldr	r3, [pc, #236]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a60:	4a3a      	ldr	r2, [pc, #232]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003a62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	699b      	ldr	r3, [r3, #24]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	f000 80ad 	beq.w	8003bcc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a72:	4b36      	ldr	r3, [pc, #216]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f003 030c 	and.w	r3, r3, #12
 8003a7a:	2b08      	cmp	r3, #8
 8003a7c:	d060      	beq.n	8003b40 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	2b02      	cmp	r3, #2
 8003a84:	d145      	bne.n	8003b12 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a86:	4b33      	ldr	r3, [pc, #204]	; (8003b54 <HAL_RCC_OscConfig+0x4b4>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a8c:	f7fe fd6a 	bl	8002564 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a94:	f7fe fd66 	bl	8002564 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e093      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aa6:	4b29      	ldr	r3, [pc, #164]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d1f0      	bne.n	8003a94 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69da      	ldr	r2, [r3, #28]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	019b      	lsls	r3, r3, #6
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac8:	085b      	lsrs	r3, r3, #1
 8003aca:	3b01      	subs	r3, #1
 8003acc:	041b      	lsls	r3, r3, #16
 8003ace:	431a      	orrs	r2, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	061b      	lsls	r3, r3, #24
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003adc:	071b      	lsls	r3, r3, #28
 8003ade:	491b      	ldr	r1, [pc, #108]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ae4:	4b1b      	ldr	r3, [pc, #108]	; (8003b54 <HAL_RCC_OscConfig+0x4b4>)
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aea:	f7fe fd3b 	bl	8002564 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003af2:	f7fe fd37 	bl	8002564 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e064      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b04:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0f0      	beq.n	8003af2 <HAL_RCC_OscConfig+0x452>
 8003b10:	e05c      	b.n	8003bcc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b12:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <HAL_RCC_OscConfig+0x4b4>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b18:	f7fe fd24 	bl	8002564 <HAL_GetTick>
 8003b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	e008      	b.n	8003b32 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b20:	f7fe fd20 	bl	8002564 <HAL_GetTick>
 8003b24:	4602      	mov	r2, r0
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	1ad3      	subs	r3, r2, r3
 8003b2a:	2b02      	cmp	r3, #2
 8003b2c:	d901      	bls.n	8003b32 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e04d      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b32:	4b06      	ldr	r3, [pc, #24]	; (8003b4c <HAL_RCC_OscConfig+0x4ac>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1f0      	bne.n	8003b20 <HAL_RCC_OscConfig+0x480>
 8003b3e:	e045      	b.n	8003bcc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d107      	bne.n	8003b58 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e040      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
 8003b4c:	40023800 	.word	0x40023800
 8003b50:	40007000 	.word	0x40007000
 8003b54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b58:	4b1f      	ldr	r3, [pc, #124]	; (8003bd8 <HAL_RCC_OscConfig+0x538>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d030      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d129      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b7e:	429a      	cmp	r2, r3
 8003b80:	d122      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b88:	4013      	ands	r3, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d119      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d10f      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d107      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d001      	beq.n	8003bcc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3718      	adds	r7, #24
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	40023800 	.word	0x40023800

08003bdc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e022      	b.n	8003c34 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d105      	bne.n	8003c06 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f7fe fac9 	bl	8002198 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2203      	movs	r2, #3
 8003c0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f814 	bl	8003c3c <HAL_SD_InitCard>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e00a      	b.n	8003c34 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2200      	movs	r2, #0
 8003c22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c32:	2300      	movs	r3, #0
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c3c:	b5b0      	push	{r4, r5, r7, lr}
 8003c3e:	b08e      	sub	sp, #56	; 0x38
 8003c40:	af04      	add	r7, sp, #16
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003c44:	2300      	movs	r3, #0
 8003c46:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003c50:	2300      	movs	r3, #0
 8003c52:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c54:	2300      	movs	r3, #0
 8003c56:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003c58:	2376      	movs	r3, #118	; 0x76
 8003c5a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681d      	ldr	r5, [r3, #0]
 8003c60:	466c      	mov	r4, sp
 8003c62:	f107 0314 	add.w	r3, r7, #20
 8003c66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c6e:	f107 0308 	add.w	r3, r7, #8
 8003c72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c74:	4628      	mov	r0, r5
 8003c76:	f001 f938 	bl	8004eea <SDIO_Init>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e04c      	b.n	8003d26 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003c8c:	4b28      	ldr	r3, [pc, #160]	; (8003d30 <HAL_SD_InitCard+0xf4>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f001 f970 	bl	8004f7c <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003c9c:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <HAL_SD_InitCard+0xf4>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 ff02 	bl	8004aac <SD_PowerON>
 8003ca8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cbc:	6a3b      	ldr	r3, [r7, #32]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e02e      	b.n	8003d26 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fe23 	bl	8004914 <SD_InitCard>
 8003cce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ce2:	6a3b      	ldr	r3, [r7, #32]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e01b      	b.n	8003d26 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f001 f9d3 	bl	80050a2 <SDMMC_CmdBlockLength>
 8003cfc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cfe:	6a3b      	ldr	r3, [r7, #32]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d00f      	beq.n	8003d24 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a0a      	ldr	r2, [pc, #40]	; (8003d34 <HAL_SD_InitCard+0xf8>)
 8003d0a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	431a      	orrs	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e000      	b.n	8003d26 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3728      	adds	r7, #40	; 0x28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	422580a0 	.word	0x422580a0
 8003d34:	004005ff 	.word	0x004005ff

08003d38 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b092      	sub	sp, #72	; 0x48
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	60f8      	str	r0, [r7, #12]
 8003d40:	60b9      	str	r1, [r7, #8]
 8003d42:	607a      	str	r2, [r7, #4]
 8003d44:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003d46:	f7fe fc0d 	bl	8002564 <HAL_GetTick>
 8003d4a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d107      	bne.n	8003d6a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e1bd      	b.n	80040e6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b01      	cmp	r3, #1
 8003d74:	f040 81b0 	bne.w	80040d8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	441a      	add	r2, r3
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d907      	bls.n	8003d9c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d90:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e1a4      	b.n	80040e6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2203      	movs	r2, #3
 8003da0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	2200      	movs	r2, #0
 8003daa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d002      	beq.n	8003dba <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db6:	025b      	lsls	r3, r3, #9
 8003db8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003dba:	f04f 33ff 	mov.w	r3, #4294967295
 8003dbe:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	025b      	lsls	r3, r3, #9
 8003dc4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003dc6:	2390      	movs	r3, #144	; 0x90
 8003dc8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003dca:	2302      	movs	r3, #2
 8003dcc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003dce:	2300      	movs	r3, #0
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f107 0214 	add.w	r2, r7, #20
 8003dde:	4611      	mov	r1, r2
 8003de0:	4618      	mov	r0, r3
 8003de2:	f001 f932 	bl	800504a <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d90a      	bls.n	8003e02 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2202      	movs	r2, #2
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f001 f996 	bl	800512a <SDMMC_CmdReadMultiBlock>
 8003dfe:	6478      	str	r0, [r7, #68]	; 0x44
 8003e00:	e009      	b.n	8003e16 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f001 f969 	bl	80050e6 <SDMMC_CmdReadSingleBlock>
 8003e14:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d012      	beq.n	8003e42 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a7a      	ldr	r2, [pc, #488]	; (800400c <HAL_SD_ReadBlocks+0x2d4>)
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e151      	b.n	80040e6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003e46:	e061      	b.n	8003f0c <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d03c      	beq.n	8003ed0 <HAL_SD_ReadBlocks+0x198>
 8003e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d039      	beq.n	8003ed0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	643b      	str	r3, [r7, #64]	; 0x40
 8003e60:	e033      	b.n	8003eca <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f001 f86a 	bl	8004f40 <SDIO_ReadFIFO>
 8003e6c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003e6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e74:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e78:	3301      	adds	r3, #1
 8003e7a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e7e:	3b01      	subs	r3, #1
 8003e80:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e84:	0a1b      	lsrs	r3, r3, #8
 8003e86:	b2da      	uxtb	r2, r3
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8e:	3301      	adds	r3, #1
 8003e90:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e94:	3b01      	subs	r3, #1
 8003e96:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e9a:	0c1b      	lsrs	r3, r3, #16
 8003e9c:	b2da      	uxtb	r2, r3
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea4:	3301      	adds	r3, #1
 8003ea6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eaa:	3b01      	subs	r3, #1
 8003eac:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb0:	0e1b      	lsrs	r3, r3, #24
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003eb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eba:	3301      	adds	r3, #1
 8003ebc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003ec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	643b      	str	r3, [r7, #64]	; 0x40
 8003eca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ecc:	2b07      	cmp	r3, #7
 8003ece:	d9c8      	bls.n	8003e62 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003ed0:	f7fe fb48 	bl	8002564 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d902      	bls.n	8003ee6 <HAL_SD_ReadBlocks+0x1ae>
 8003ee0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d112      	bne.n	8003f0c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a48      	ldr	r2, [pc, #288]	; (800400c <HAL_SD_ReadBlocks+0x2d4>)
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e0ec      	b.n	80040e6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f12:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d096      	beq.n	8003e48 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d022      	beq.n	8003f6e <HAL_SD_ReadBlocks+0x236>
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d91f      	bls.n	8003f6e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f32:	2b03      	cmp	r3, #3
 8003f34:	d01b      	beq.n	8003f6e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f001 f95c 	bl	80051f8 <SDMMC_CmdStopTransfer>
 8003f40:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d012      	beq.n	8003f6e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a2f      	ldr	r2, [pc, #188]	; (800400c <HAL_SD_ReadBlocks+0x2d4>)
 8003f4e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f56:	431a      	orrs	r2, r3
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	2200      	movs	r2, #0
 8003f68:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	e0bb      	b.n	80040e6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f74:	f003 0308 	and.w	r3, r3, #8
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d012      	beq.n	8003fa2 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a22      	ldr	r2, [pc, #136]	; (800400c <HAL_SD_ReadBlocks+0x2d4>)
 8003f82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f88:	f043 0208 	orr.w	r2, r3, #8
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e0a1      	b.n	80040e6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d012      	beq.n	8003fd6 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a15      	ldr	r2, [pc, #84]	; (800400c <HAL_SD_ReadBlocks+0x2d4>)
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	f043 0202 	orr.w	r2, r3, #2
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e087      	b.n	80040e6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fdc:	f003 0320 	and.w	r3, r3, #32
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d064      	beq.n	80040ae <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a08      	ldr	r2, [pc, #32]	; (800400c <HAL_SD_ReadBlocks+0x2d4>)
 8003fea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ff0:	f043 0220 	orr.w	r2, r3, #32
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e06d      	b.n	80040e6 <HAL_SD_ReadBlocks+0x3ae>
 800400a:	bf00      	nop
 800400c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f000 ff93 	bl	8004f40 <SDIO_ReadFIFO>
 800401a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 800401c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800401e:	b2da      	uxtb	r2, r3
 8004020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004022:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004024:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004026:	3301      	adds	r3, #1
 8004028:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800402a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800402c:	3b01      	subs	r3, #1
 800402e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8004030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004032:	0a1b      	lsrs	r3, r3, #8
 8004034:	b2da      	uxtb	r2, r3
 8004036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004038:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800403a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800403c:	3301      	adds	r3, #1
 800403e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004042:	3b01      	subs	r3, #1
 8004044:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8004046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004048:	0c1b      	lsrs	r3, r3, #16
 800404a:	b2da      	uxtb	r2, r3
 800404c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004052:	3301      	adds	r3, #1
 8004054:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004058:	3b01      	subs	r3, #1
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800405c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800405e:	0e1b      	lsrs	r3, r3, #24
 8004060:	b2da      	uxtb	r2, r3
 8004062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004064:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004068:	3301      	adds	r3, #1
 800406a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800406c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406e:	3b01      	subs	r3, #1
 8004070:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004072:	f7fe fa77 	bl	8002564 <HAL_GetTick>
 8004076:	4602      	mov	r2, r0
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800407e:	429a      	cmp	r2, r3
 8004080:	d902      	bls.n	8004088 <HAL_SD_ReadBlocks+0x350>
 8004082:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004084:	2b00      	cmp	r3, #0
 8004086:	d112      	bne.n	80040ae <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a18      	ldr	r2, [pc, #96]	; (80040f0 <HAL_SD_ReadBlocks+0x3b8>)
 800408e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2200      	movs	r2, #0
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e01b      	b.n	80040e6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d002      	beq.n	80040c2 <HAL_SD_ReadBlocks+0x38a>
 80040bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d1a6      	bne.n	8004010 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e006      	b.n	80040e6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
  }
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3748      	adds	r7, #72	; 0x48
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	004005ff 	.word	0x004005ff

080040f4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b092      	sub	sp, #72	; 0x48
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
 8004100:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004102:	f7fe fa2f 	bl	8002564 <HAL_GetTick>
 8004106:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d107      	bne.n	8004126 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800411a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e165      	b.n	80043f2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	f040 8158 	bne.w	80043e4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2200      	movs	r2, #0
 8004138:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800413a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	441a      	add	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004144:	429a      	cmp	r2, r3
 8004146:	d907      	bls.n	8004158 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800414c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e14c      	b.n	80043f2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2203      	movs	r2, #3
 800415c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2200      	movs	r2, #0
 8004166:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416c:	2b01      	cmp	r3, #1
 800416e:	d002      	beq.n	8004176 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	025b      	lsls	r3, r3, #9
 8004174:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004176:	f04f 33ff 	mov.w	r3, #4294967295
 800417a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	025b      	lsls	r3, r3, #9
 8004180:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004182:	2390      	movs	r3, #144	; 0x90
 8004184:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004186:	2300      	movs	r3, #0
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800418a:	2300      	movs	r3, #0
 800418c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800418e:	2301      	movs	r3, #1
 8004190:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f107 0218 	add.w	r2, r7, #24
 800419a:	4611      	mov	r1, r2
 800419c:	4618      	mov	r0, r3
 800419e:	f000 ff54 	bl	800504a <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d90a      	bls.n	80041be <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2220      	movs	r2, #32
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041b4:	4618      	mov	r0, r3
 80041b6:	f000 fffc 	bl	80051b2 <SDMMC_CmdWriteMultiBlock>
 80041ba:	6478      	str	r0, [r7, #68]	; 0x44
 80041bc:	e009      	b.n	80041d2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2210      	movs	r2, #16
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041ca:	4618      	mov	r0, r3
 80041cc:	f000 ffcf 	bl	800516e <SDMMC_CmdWriteSingleBlock>
 80041d0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80041d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d012      	beq.n	80041fe <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a87      	ldr	r2, [pc, #540]	; (80043fc <HAL_SD_WriteBlocks+0x308>)
 80041de:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e6:	431a      	orrs	r2, r3
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2200      	movs	r2, #0
 80041f8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e0f9      	b.n	80043f2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004202:	e065      	b.n	80042d0 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800420a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d040      	beq.n	8004294 <HAL_SD_WriteBlocks+0x1a0>
 8004212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d03d      	beq.n	8004294 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004218:	2300      	movs	r3, #0
 800421a:	643b      	str	r3, [r7, #64]	; 0x40
 800421c:	e037      	b.n	800428e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800421e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004226:	3301      	adds	r3, #1
 8004228:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800422a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800422c:	3b01      	subs	r3, #1
 800422e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8004230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	021a      	lsls	r2, r3, #8
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800423c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423e:	3301      	adds	r3, #1
 8004240:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004244:	3b01      	subs	r3, #1
 8004246:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004248:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	041a      	lsls	r2, r3, #16
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	4313      	orrs	r3, r2
 8004252:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004256:	3301      	adds	r3, #1
 8004258:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800425a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425c:	3b01      	subs	r3, #1
 800425e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	061a      	lsls	r2, r3, #24
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	3301      	adds	r3, #1
 8004270:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004274:	3b01      	subs	r3, #1
 8004276:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f107 0214 	add.w	r2, r7, #20
 8004280:	4611      	mov	r1, r2
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fe69 	bl	8004f5a <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428a:	3301      	adds	r3, #1
 800428c:	643b      	str	r3, [r7, #64]	; 0x40
 800428e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004290:	2b07      	cmp	r3, #7
 8004292:	d9c4      	bls.n	800421e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004294:	f7fe f966 	bl	8002564 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d902      	bls.n	80042aa <HAL_SD_WriteBlocks+0x1b6>
 80042a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d112      	bne.n	80042d0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a53      	ldr	r2, [pc, #332]	; (80043fc <HAL_SD_WriteBlocks+0x308>)
 80042b0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b8:	431a      	orrs	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2201      	movs	r2, #1
 80042c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e090      	b.n	80043f2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d092      	beq.n	8004204 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d022      	beq.n	8004332 <HAL_SD_WriteBlocks+0x23e>
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d91f      	bls.n	8004332 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	2b03      	cmp	r3, #3
 80042f8:	d01b      	beq.n	8004332 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 ff7a 	bl	80051f8 <SDMMC_CmdStopTransfer>
 8004304:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004306:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004308:	2b00      	cmp	r3, #0
 800430a:	d012      	beq.n	8004332 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a3a      	ldr	r2, [pc, #232]	; (80043fc <HAL_SD_WriteBlocks+0x308>)
 8004312:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004318:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800431a:	431a      	orrs	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e05f      	b.n	80043f2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d012      	beq.n	8004366 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a2d      	ldr	r2, [pc, #180]	; (80043fc <HAL_SD_WriteBlocks+0x308>)
 8004346:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434c:	f043 0208 	orr.w	r2, r3, #8
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2200      	movs	r2, #0
 8004360:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e045      	b.n	80043f2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d012      	beq.n	800439a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a20      	ldr	r2, [pc, #128]	; (80043fc <HAL_SD_WriteBlocks+0x308>)
 800437a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004380:	f043 0202 	orr.w	r2, r3, #2
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2201      	movs	r2, #1
 800438c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e02b      	b.n	80043f2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a0:	f003 0310 	and.w	r3, r3, #16
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d012      	beq.n	80043ce <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a13      	ldr	r2, [pc, #76]	; (80043fc <HAL_SD_WriteBlocks+0x308>)
 80043ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b4:	f043 0210 	orr.w	r2, r3, #16
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80043ca:	2301      	movs	r3, #1
 80043cc:	e011      	b.n	80043f2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f240 523a 	movw	r2, #1338	; 0x53a
 80043d6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80043e0:	2300      	movs	r3, #0
 80043e2:	e006      	b.n	80043f2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
  }
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3748      	adds	r7, #72	; 0x48
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	004005ff 	.word	0x004005ff

08004400 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800440e:	0f9b      	lsrs	r3, r3, #30
 8004410:	b2da      	uxtb	r2, r3
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800441a:	0e9b      	lsrs	r3, r3, #26
 800441c:	b2db      	uxtb	r3, r3
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	b2da      	uxtb	r2, r3
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800442c:	0e1b      	lsrs	r3, r3, #24
 800442e:	b2db      	uxtb	r3, r3
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	b2da      	uxtb	r2, r3
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800443e:	0c1b      	lsrs	r3, r3, #16
 8004440:	b2da      	uxtb	r2, r3
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800444a:	0a1b      	lsrs	r3, r3, #8
 800444c:	b2da      	uxtb	r2, r3
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004456:	b2da      	uxtb	r2, r3
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004460:	0d1b      	lsrs	r3, r3, #20
 8004462:	b29a      	uxth	r2, r3
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800446c:	0c1b      	lsrs	r3, r3, #16
 800446e:	b2db      	uxtb	r3, r3
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	b2da      	uxtb	r2, r3
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800447e:	0bdb      	lsrs	r3, r3, #15
 8004480:	b2db      	uxtb	r3, r3
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	b2da      	uxtb	r2, r3
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004490:	0b9b      	lsrs	r3, r3, #14
 8004492:	b2db      	uxtb	r3, r3
 8004494:	f003 0301 	and.w	r3, r3, #1
 8004498:	b2da      	uxtb	r2, r3
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044a2:	0b5b      	lsrs	r3, r3, #13
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	b2da      	uxtb	r2, r3
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b4:	0b1b      	lsrs	r3, r3, #12
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	b2da      	uxtb	r2, r3
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2200      	movs	r2, #0
 80044c6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d163      	bne.n	8004598 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044d4:	009a      	lsls	r2, r3, #2
 80044d6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044da:	4013      	ands	r3, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80044e0:	0f92      	lsrs	r2, r2, #30
 80044e2:	431a      	orrs	r2, r3
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ec:	0edb      	lsrs	r3, r3, #27
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044fe:	0e1b      	lsrs	r3, r3, #24
 8004500:	b2db      	uxtb	r3, r3
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	b2da      	uxtb	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004510:	0d5b      	lsrs	r3, r3, #21
 8004512:	b2db      	uxtb	r3, r3
 8004514:	f003 0307 	and.w	r3, r3, #7
 8004518:	b2da      	uxtb	r2, r3
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004522:	0c9b      	lsrs	r3, r3, #18
 8004524:	b2db      	uxtb	r3, r3
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	b2da      	uxtb	r2, r3
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004534:	0bdb      	lsrs	r3, r3, #15
 8004536:	b2db      	uxtb	r3, r3
 8004538:	f003 0307 	and.w	r3, r3, #7
 800453c:	b2da      	uxtb	r2, r3
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	1c5a      	adds	r2, r3, #1
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	7e1b      	ldrb	r3, [r3, #24]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	3302      	adds	r3, #2
 8004558:	2201      	movs	r2, #1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	687a      	ldr	r2, [r7, #4]
 8004560:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004562:	fb02 f203 	mul.w	r2, r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	7a1b      	ldrb	r3, [r3, #8]
 800456e:	b2db      	uxtb	r3, r3
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	2201      	movs	r2, #1
 8004576:	409a      	lsls	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004584:	0a52      	lsrs	r2, r2, #9
 8004586:	fb02 f203 	mul.w	r2, r2, r3
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004594:	661a      	str	r2, [r3, #96]	; 0x60
 8004596:	e031      	b.n	80045fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459c:	2b01      	cmp	r3, #1
 800459e:	d11d      	bne.n	80045dc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a4:	041b      	lsls	r3, r3, #16
 80045a6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ae:	0c1b      	lsrs	r3, r3, #16
 80045b0:	431a      	orrs	r2, r3
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	3301      	adds	r3, #1
 80045bc:	029a      	lsls	r2, r3, #10
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045d0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	661a      	str	r2, [r3, #96]	; 0x60
 80045da:	e00f      	b.n	80045fc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a58      	ldr	r2, [pc, #352]	; (8004744 <HAL_SD_GetCardCSD+0x344>)
 80045e2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e09d      	b.n	8004738 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004600:	0b9b      	lsrs	r3, r3, #14
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f003 0301 	and.w	r3, r3, #1
 8004608:	b2da      	uxtb	r2, r3
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004612:	09db      	lsrs	r3, r3, #7
 8004614:	b2db      	uxtb	r3, r3
 8004616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800461a:	b2da      	uxtb	r2, r3
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004624:	b2db      	uxtb	r3, r3
 8004626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800462a:	b2da      	uxtb	r2, r3
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	0fdb      	lsrs	r3, r3, #31
 8004636:	b2da      	uxtb	r2, r3
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	0f5b      	lsrs	r3, r3, #29
 8004642:	b2db      	uxtb	r3, r3
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	b2da      	uxtb	r2, r3
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	0e9b      	lsrs	r3, r3, #26
 8004654:	b2db      	uxtb	r3, r3
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	b2da      	uxtb	r2, r3
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004664:	0d9b      	lsrs	r3, r3, #22
 8004666:	b2db      	uxtb	r3, r3
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	b2da      	uxtb	r2, r3
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004676:	0d5b      	lsrs	r3, r3, #21
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	b2da      	uxtb	r2, r3
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004692:	0c1b      	lsrs	r3, r3, #16
 8004694:	b2db      	uxtb	r3, r3
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	b2da      	uxtb	r2, r3
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a6:	0bdb      	lsrs	r3, r3, #15
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	b2da      	uxtb	r2, r3
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ba:	0b9b      	lsrs	r3, r3, #14
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ce:	0b5b      	lsrs	r3, r3, #13
 80046d0:	b2db      	uxtb	r3, r3
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e2:	0b1b      	lsrs	r3, r3, #12
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	f003 0301 	and.w	r3, r3, #1
 80046ea:	b2da      	uxtb	r2, r3
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	0a9b      	lsrs	r3, r3, #10
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f003 0303 	and.w	r3, r3, #3
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800470a:	0a1b      	lsrs	r3, r3, #8
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	b2da      	uxtb	r2, r3
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471e:	085b      	lsrs	r3, r3, #1
 8004720:	b2db      	uxtb	r3, r3
 8004722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004726:	b2da      	uxtb	r2, r3
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2201      	movs	r2, #1
 8004732:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	370c      	adds	r7, #12
 800473c:	46bd      	mov	sp, r7
 800473e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004742:	4770      	bx	lr
 8004744:	004005ff 	.word	0x004005ff

08004748 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004792:	2300      	movs	r3, #0
}
 8004794:	4618      	mov	r0, r3
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80047a0:	b5b0      	push	{r4, r5, r7, lr}
 80047a2:	b08e      	sub	sp, #56	; 0x38
 80047a4:	af04      	add	r7, sp, #16
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80047aa:	2300      	movs	r3, #0
 80047ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2203      	movs	r2, #3
 80047b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d02e      	beq.n	800481e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c6:	d106      	bne.n	80047d6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	639a      	str	r2, [r3, #56]	; 0x38
 80047d4:	e029      	b.n	800482a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047dc:	d10a      	bne.n	80047f4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 fa1a 	bl	8004c18 <SD_WideBus_Enable>
 80047e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ea:	6a3b      	ldr	r3, [r7, #32]
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	639a      	str	r2, [r3, #56]	; 0x38
 80047f2:	e01a      	b.n	800482a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d10a      	bne.n	8004810 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f000 fa57 	bl	8004cae <SD_WideBus_Disable>
 8004800:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	639a      	str	r2, [r3, #56]	; 0x38
 800480e:	e00c      	b.n	800482a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004814:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	639a      	str	r2, [r3, #56]	; 0x38
 800481c:	e005      	b.n	800482a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00b      	beq.n	800484a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a26      	ldr	r2, [pc, #152]	; (80048d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8004838:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004848:	e01f      	b.n	800488a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	699b      	ldr	r3, [r3, #24]
 800486a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681d      	ldr	r5, [r3, #0]
 8004870:	466c      	mov	r4, sp
 8004872:	f107 0314 	add.w	r3, r7, #20
 8004876:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800487a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800487e:	f107 0308 	add.w	r3, r7, #8
 8004882:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004884:	4628      	mov	r0, r5
 8004886:	f000 fb30 	bl	8004eea <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fc05 	bl	80050a2 <SDMMC_CmdBlockLength>
 8004898:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800489a:	6a3b      	ldr	r3, [r7, #32]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00c      	beq.n	80048ba <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a0a      	ldr	r2, [pc, #40]	; (80048d0 <HAL_SD_ConfigWideBusOperation+0x130>)
 80048a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ac:	6a3b      	ldr	r3, [r7, #32]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80048c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3728      	adds	r7, #40	; 0x28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bdb0      	pop	{r4, r5, r7, pc}
 80048ce:	bf00      	nop
 80048d0:	004005ff 	.word	0x004005ff

080048d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80048e0:	f107 030c 	add.w	r3, r7, #12
 80048e4:	4619      	mov	r1, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f96e 	bl	8004bc8 <SD_SendStatus>
 80048ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	0a5b      	lsrs	r3, r3, #9
 8004904:	f003 030f 	and.w	r3, r3, #15
 8004908:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800490a:	693b      	ldr	r3, [r7, #16]
}
 800490c:	4618      	mov	r0, r3
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004914:	b5b0      	push	{r4, r5, r7, lr}
 8004916:	b094      	sub	sp, #80	; 0x50
 8004918:	af04      	add	r7, sp, #16
 800491a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800491c:	2301      	movs	r3, #1
 800491e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4618      	mov	r0, r3
 8004926:	f000 fb38 	bl	8004f9a <SDIO_GetPowerState>
 800492a:	4603      	mov	r3, r0
 800492c:	2b00      	cmp	r3, #0
 800492e:	d102      	bne.n	8004936 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004930:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004934:	e0b6      	b.n	8004aa4 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800493a:	2b03      	cmp	r3, #3
 800493c:	d02f      	beq.n	800499e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f000 fd62 	bl	800540c <SDMMC_CmdSendCID>
 8004948:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800494a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d001      	beq.n	8004954 <SD_InitCard+0x40>
    {
      return errorstate;
 8004950:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004952:	e0a7      	b.n	8004aa4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2100      	movs	r1, #0
 800495a:	4618      	mov	r0, r3
 800495c:	f000 fb62 	bl	8005024 <SDIO_GetResponse>
 8004960:	4602      	mov	r2, r0
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2104      	movs	r1, #4
 800496c:	4618      	mov	r0, r3
 800496e:	f000 fb59 	bl	8005024 <SDIO_GetResponse>
 8004972:	4602      	mov	r2, r0
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2108      	movs	r1, #8
 800497e:	4618      	mov	r0, r3
 8004980:	f000 fb50 	bl	8005024 <SDIO_GetResponse>
 8004984:	4602      	mov	r2, r0
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	210c      	movs	r1, #12
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fb47 	bl	8005024 <SDIO_GetResponse>
 8004996:	4602      	mov	r2, r0
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d00d      	beq.n	80049c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f107 020e 	add.w	r2, r7, #14
 80049ae:	4611      	mov	r1, r2
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fd68 	bl	8005486 <SDMMC_CmdSetRelAdd>
 80049b6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <SD_InitCard+0xae>
    {
      return errorstate;
 80049be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049c0:	e070      	b.n	8004aa4 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d036      	beq.n	8004a38 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80049ca:	89fb      	ldrh	r3, [r7, #14]
 80049cc:	461a      	mov	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049da:	041b      	lsls	r3, r3, #16
 80049dc:	4619      	mov	r1, r3
 80049de:	4610      	mov	r0, r2
 80049e0:	f000 fd32 	bl	8005448 <SDMMC_CmdSendCSD>
 80049e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80049ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ee:	e059      	b.n	8004aa4 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2100      	movs	r1, #0
 80049f6:	4618      	mov	r0, r3
 80049f8:	f000 fb14 	bl	8005024 <SDIO_GetResponse>
 80049fc:	4602      	mov	r2, r0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2104      	movs	r1, #4
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fb0b 	bl	8005024 <SDIO_GetResponse>
 8004a0e:	4602      	mov	r2, r0
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2108      	movs	r1, #8
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fb02 	bl	8005024 <SDIO_GetResponse>
 8004a20:	4602      	mov	r2, r0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	210c      	movs	r1, #12
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 faf9 	bl	8005024 <SDIO_GetResponse>
 8004a32:	4602      	mov	r2, r0
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	2104      	movs	r1, #4
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f000 faf0 	bl	8005024 <SDIO_GetResponse>
 8004a44:	4603      	mov	r3, r0
 8004a46:	0d1a      	lsrs	r2, r3, #20
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004a4c:	f107 0310 	add.w	r3, r7, #16
 8004a50:	4619      	mov	r1, r3
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f7ff fcd4 	bl	8004400 <HAL_SD_GetCardCSD>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a62:	e01f      	b.n	8004aa4 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6819      	ldr	r1, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6c:	041b      	lsls	r3, r3, #16
 8004a6e:	461a      	mov	r2, r3
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	4608      	mov	r0, r1
 8004a76:	f000 fbe1 	bl	800523c <SDMMC_CmdSelDesel>
 8004a7a:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <SD_InitCard+0x172>
  {
    return errorstate;
 8004a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a84:	e00e      	b.n	8004aa4 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681d      	ldr	r5, [r3, #0]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	466c      	mov	r4, sp
 8004a8e:	f103 0210 	add.w	r2, r3, #16
 8004a92:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a94:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a98:	3304      	adds	r3, #4
 8004a9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a9c:	4628      	mov	r0, r5
 8004a9e:	f000 fa24 	bl	8004eea <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3740      	adds	r7, #64	; 0x40
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bdb0      	pop	{r4, r5, r7, pc}

08004aac <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	617b      	str	r3, [r7, #20]
 8004abc:	2300      	movs	r3, #0
 8004abe:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fbdc 	bl	8005282 <SDMMC_CmdGoIdleState>
 8004aca:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	e072      	b.n	8004bbc <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fbef 	bl	80052be <SDMMC_CmdOperCond>
 8004ae0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00d      	beq.n	8004b04 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fbc5 	bl	8005282 <SDMMC_CmdGoIdleState>
 8004af8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d004      	beq.n	8004b0a <SD_PowerON+0x5e>
    {
      return errorstate;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	e05b      	b.n	8004bbc <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2201      	movs	r2, #1
 8004b08:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0e:	2b01      	cmp	r3, #1
 8004b10:	d137      	bne.n	8004b82 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fbef 	bl	80052fc <SDMMC_CmdAppCommand>
 8004b1e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d02d      	beq.n	8004b82 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b2a:	e047      	b.n	8004bbc <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2100      	movs	r1, #0
 8004b32:	4618      	mov	r0, r3
 8004b34:	f000 fbe2 	bl	80052fc <SDMMC_CmdAppCommand>
 8004b38:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d001      	beq.n	8004b44 <SD_PowerON+0x98>
    {
      return errorstate;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	e03b      	b.n	8004bbc <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	491e      	ldr	r1, [pc, #120]	; (8004bc4 <SD_PowerON+0x118>)
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 fbf8 	bl	8005340 <SDMMC_CmdAppOperCommand>
 8004b50:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b5c:	e02e      	b.n	8004bbc <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2100      	movs	r1, #0
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 fa5d 	bl	8005024 <SDIO_GetResponse>
 8004b6a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	0fdb      	lsrs	r3, r3, #31
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d101      	bne.n	8004b78 <SD_PowerON+0xcc>
 8004b74:	2301      	movs	r3, #1
 8004b76:	e000      	b.n	8004b7a <SD_PowerON+0xce>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	613b      	str	r3, [r7, #16]

    count++;
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	3301      	adds	r3, #1
 8004b80:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d802      	bhi.n	8004b92 <SD_PowerON+0xe6>
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d0cc      	beq.n	8004b2c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d902      	bls.n	8004ba2 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004ba0:	e00c      	b.n	8004bbc <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	645a      	str	r2, [r3, #68]	; 0x44
 8004bb2:	e002      	b.n	8004bba <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004bba:	2300      	movs	r3, #0
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3718      	adds	r7, #24
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}
 8004bc4:	c1100000 	.word	0xc1100000

08004bc8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b084      	sub	sp, #16
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d102      	bne.n	8004bde <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004bd8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004bdc:	e018      	b.n	8004c10 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004be6:	041b      	lsls	r3, r3, #16
 8004be8:	4619      	mov	r1, r3
 8004bea:	4610      	mov	r0, r2
 8004bec:	f000 fc6c 	bl	80054c8 <SDMMC_CmdSendStatus>
 8004bf0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d001      	beq.n	8004bfc <SD_SendStatus+0x34>
  {
    return errorstate;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	e009      	b.n	8004c10 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2100      	movs	r1, #0
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fa0e 	bl	8005024 <SDIO_GetResponse>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3710      	adds	r7, #16
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]
 8004c24:	2300      	movs	r3, #0
 8004c26:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f000 f9f8 	bl	8005024 <SDIO_GetResponse>
 8004c34:	4603      	mov	r3, r0
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c3e:	d102      	bne.n	8004c46 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c40:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c44:	e02f      	b.n	8004ca6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c46:	f107 030c 	add.w	r3, r7, #12
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	6878      	ldr	r0, [r7, #4]
 8004c4e:	f000 f879 	bl	8004d44 <SD_FindSCR>
 8004c52:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	e023      	b.n	8004ca6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d01c      	beq.n	8004ca2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f000 fb41 	bl	80052fc <SDMMC_CmdAppCommand>
 8004c7a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	e00f      	b.n	8004ca6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	2102      	movs	r1, #2
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fb7a 	bl	8005386 <SDMMC_CmdBusWidth>
 8004c92:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d001      	beq.n	8004c9e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	e003      	b.n	8004ca6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	e001      	b.n	8004ca6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004ca2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3718      	adds	r7, #24
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}

08004cae <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b086      	sub	sp, #24
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60fb      	str	r3, [r7, #12]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2100      	movs	r1, #0
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 f9ad 	bl	8005024 <SDIO_GetResponse>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cd4:	d102      	bne.n	8004cdc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004cd6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004cda:	e02f      	b.n	8004d3c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004cdc:	f107 030c 	add.w	r3, r7, #12
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f000 f82e 	bl	8004d44 <SD_FindSCR>
 8004ce8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d001      	beq.n	8004cf4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	e023      	b.n	8004d3c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d01c      	beq.n	8004d38 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d06:	041b      	lsls	r3, r3, #16
 8004d08:	4619      	mov	r1, r3
 8004d0a:	4610      	mov	r0, r2
 8004d0c:	f000 faf6 	bl	80052fc <SDMMC_CmdAppCommand>
 8004d10:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	e00f      	b.n	8004d3c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2100      	movs	r1, #0
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 fb2f 	bl	8005386 <SDMMC_CmdBusWidth>
 8004d28:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d001      	beq.n	8004d34 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	e003      	b.n	8004d3c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004d34:	2300      	movs	r3, #0
 8004d36:	e001      	b.n	8004d3c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004d38:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3718      	adds	r7, #24
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004d44:	b590      	push	{r4, r7, lr}
 8004d46:	b08f      	sub	sp, #60	; 0x3c
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004d4e:	f7fd fc09 	bl	8002564 <HAL_GetTick>
 8004d52:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004d58:	2300      	movs	r3, #0
 8004d5a:	60bb      	str	r3, [r7, #8]
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2108      	movs	r1, #8
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f000 f999 	bl	80050a2 <SDMMC_CmdBlockLength>
 8004d70:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	e0b2      	b.n	8004ee2 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d84:	041b      	lsls	r3, r3, #16
 8004d86:	4619      	mov	r1, r3
 8004d88:	4610      	mov	r0, r2
 8004d8a:	f000 fab7 	bl	80052fc <SDMMC_CmdAppCommand>
 8004d8e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d001      	beq.n	8004d9a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d98:	e0a3      	b.n	8004ee2 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d9e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004da0:	2308      	movs	r3, #8
 8004da2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004da4:	2330      	movs	r3, #48	; 0x30
 8004da6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004da8:	2302      	movs	r3, #2
 8004daa:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004dac:	2300      	movs	r3, #0
 8004dae:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004db0:	2301      	movs	r3, #1
 8004db2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f107 0210 	add.w	r2, r7, #16
 8004dbc:	4611      	mov	r1, r2
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	f000 f943 	bl	800504a <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f000 fafe 	bl	80053ca <SDMMC_CmdSendSCR>
 8004dce:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d02a      	beq.n	8004e2c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	e083      	b.n	8004ee2 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00f      	beq.n	8004e08 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6819      	ldr	r1, [r3, #0]
 8004dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	f107 0208 	add.w	r2, r7, #8
 8004df4:	18d4      	adds	r4, r2, r3
 8004df6:	4608      	mov	r0, r1
 8004df8:	f000 f8a2 	bl	8004f40 <SDIO_ReadFIFO>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	6023      	str	r3, [r4, #0]
      index++;
 8004e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e02:	3301      	adds	r3, #1
 8004e04:	637b      	str	r3, [r7, #52]	; 0x34
 8004e06:	e006      	b.n	8004e16 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d012      	beq.n	8004e3c <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004e16:	f7fd fba5 	bl	8002564 <HAL_GetTick>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1e:	1ad3      	subs	r3, r2, r3
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d102      	bne.n	8004e2c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004e26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e2a:	e05a      	b.n	8004ee2 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e32:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0cf      	beq.n	8004dda <SD_FindSCR+0x96>
 8004e3a:	e000      	b.n	8004e3e <SD_FindSCR+0xfa>
      break;
 8004e3c:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d005      	beq.n	8004e58 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2208      	movs	r2, #8
 8004e52:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004e54:	2308      	movs	r3, #8
 8004e56:	e044      	b.n	8004ee2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d005      	beq.n	8004e72 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	2202      	movs	r2, #2
 8004e6c:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e6e:	2302      	movs	r3, #2
 8004e70:	e037      	b.n	8004ee2 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2220      	movs	r2, #32
 8004e86:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004e88:	2320      	movs	r3, #32
 8004e8a:	e02a      	b.n	8004ee2 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e94:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	061a      	lsls	r2, r3, #24
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	021b      	lsls	r3, r3, #8
 8004e9e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ea2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	0a1b      	lsrs	r3, r3, #8
 8004ea8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004eac:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	0e1b      	lsrs	r3, r3, #24
 8004eb2:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb6:	601a      	str	r2, [r3, #0]
    scr++;
 8004eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eba:	3304      	adds	r3, #4
 8004ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	061a      	lsls	r2, r3, #24
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004eca:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	0a1b      	lsrs	r3, r3, #8
 8004ed0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004ed4:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	0e1b      	lsrs	r3, r3, #24
 8004eda:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ede:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	373c      	adds	r7, #60	; 0x3c
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd90      	pop	{r4, r7, pc}

08004eea <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004eea:	b084      	sub	sp, #16
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
 8004ef4:	f107 001c 	add.w	r0, r7, #28
 8004ef8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004efc:	2300      	movs	r3, #0
 8004efe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004f00:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004f02:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004f04:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004f08:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004f0c:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004f10:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004f14:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004f24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	431a      	orrs	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3714      	adds	r7, #20
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	b004      	add	sp, #16
 8004f3e:	4770      	bx	lr

08004f40 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
 8004f62:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr

08004f7c <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2203      	movs	r2, #3
 8004f88:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004f8a:	2002      	movs	r0, #2
 8004f8c:	f7fd faf6 	bl	800257c <HAL_Delay>
  
  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3708      	adds	r7, #8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}

08004f9a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f003 0303 	and.w	r3, r3, #3
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
 8004fbe:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004fd4:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004fda:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004fe0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004ff0:	f023 030f 	bic.w	r3, r3, #15
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	431a      	orrs	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr

0800500a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	b2db      	uxtb	r3, r3
}
 8005018:	4618      	mov	r0, r3
 800501a:	370c      	adds	r7, #12
 800501c:	46bd      	mov	sp, r7
 800501e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005022:	4770      	bx	lr

08005024 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005024:	b480      	push	{r7}
 8005026:	b085      	sub	sp, #20
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	3314      	adds	r3, #20
 8005032:	461a      	mov	r2, r3
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	4413      	add	r3, r2
 8005038:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
}  
 800503e:	4618      	mov	r0, r3
 8005040:	3714      	adds	r7, #20
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800504a:	b480      	push	{r7}
 800504c:	b085      	sub	sp, #20
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
 8005052:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005054:	2300      	movs	r3, #0
 8005056:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005070:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005076:	431a      	orrs	r2, r3
                       Data->DPSM);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800507c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	4313      	orrs	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005088:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005094:	2300      	movs	r3, #0

}
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b088      	sub	sp, #32
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80050b0:	2310      	movs	r3, #16
 80050b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050b4:	2340      	movs	r3, #64	; 0x40
 80050b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050b8:	2300      	movs	r3, #0
 80050ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050c2:	f107 0308 	add.w	r3, r7, #8
 80050c6:	4619      	mov	r1, r3
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7ff ff74 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80050ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80050d2:	2110      	movs	r1, #16
 80050d4:	6878      	ldr	r0, [r7, #4]
 80050d6:	f000 fa45 	bl	8005564 <SDMMC_GetCmdResp1>
 80050da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050dc:	69fb      	ldr	r3, [r7, #28]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3720      	adds	r7, #32
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b088      	sub	sp, #32
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	6078      	str	r0, [r7, #4]
 80050ee:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80050f4:	2311      	movs	r3, #17
 80050f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050f8:	2340      	movs	r3, #64	; 0x40
 80050fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050fc:	2300      	movs	r3, #0
 80050fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005100:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005104:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005106:	f107 0308 	add.w	r3, r7, #8
 800510a:	4619      	mov	r1, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff ff52 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005112:	f241 3288 	movw	r2, #5000	; 0x1388
 8005116:	2111      	movs	r1, #17
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	f000 fa23 	bl	8005564 <SDMMC_GetCmdResp1>
 800511e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005120:	69fb      	ldr	r3, [r7, #28]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3720      	adds	r7, #32
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b088      	sub	sp, #32
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005138:	2312      	movs	r3, #18
 800513a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800513c:	2340      	movs	r3, #64	; 0x40
 800513e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005140:	2300      	movs	r3, #0
 8005142:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005148:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800514a:	f107 0308 	add.w	r3, r7, #8
 800514e:	4619      	mov	r1, r3
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ff30 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005156:	f241 3288 	movw	r2, #5000	; 0x1388
 800515a:	2112      	movs	r1, #18
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 fa01 	bl	8005564 <SDMMC_GetCmdResp1>
 8005162:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005164:	69fb      	ldr	r3, [r7, #28]
}
 8005166:	4618      	mov	r0, r3
 8005168:	3720      	adds	r7, #32
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b088      	sub	sp, #32
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800517c:	2318      	movs	r3, #24
 800517e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005180:	2340      	movs	r3, #64	; 0x40
 8005182:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005188:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800518c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800518e:	f107 0308 	add.w	r3, r7, #8
 8005192:	4619      	mov	r1, r3
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f7ff ff0e 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800519a:	f241 3288 	movw	r2, #5000	; 0x1388
 800519e:	2118      	movs	r1, #24
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f9df 	bl	8005564 <SDMMC_GetCmdResp1>
 80051a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051a8:	69fb      	ldr	r3, [r7, #28]
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3720      	adds	r7, #32
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b088      	sub	sp, #32
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80051c0:	2319      	movs	r3, #25
 80051c2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051c4:	2340      	movs	r3, #64	; 0x40
 80051c6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051c8:	2300      	movs	r3, #0
 80051ca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051d2:	f107 0308 	add.w	r3, r7, #8
 80051d6:	4619      	mov	r1, r3
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f7ff feec 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80051de:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e2:	2119      	movs	r1, #25
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 f9bd 	bl	8005564 <SDMMC_GetCmdResp1>
 80051ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051ec:	69fb      	ldr	r3, [r7, #28]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3720      	adds	r7, #32
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
	...

080051f8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b088      	sub	sp, #32
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005204:	230c      	movs	r3, #12
 8005206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005208:	2340      	movs	r3, #64	; 0x40
 800520a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005214:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005216:	f107 0308 	add.w	r3, r7, #8
 800521a:	4619      	mov	r1, r3
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff feca 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005222:	4a05      	ldr	r2, [pc, #20]	; (8005238 <SDMMC_CmdStopTransfer+0x40>)
 8005224:	210c      	movs	r1, #12
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f99c 	bl	8005564 <SDMMC_GetCmdResp1>
 800522c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800522e:	69fb      	ldr	r3, [r7, #28]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3720      	adds	r7, #32
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	05f5e100 	.word	0x05f5e100

0800523c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08a      	sub	sp, #40	; 0x28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800524c:	2307      	movs	r3, #7
 800524e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005250:	2340      	movs	r3, #64	; 0x40
 8005252:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005254:	2300      	movs	r3, #0
 8005256:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005258:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800525c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800525e:	f107 0310 	add.w	r3, r7, #16
 8005262:	4619      	mov	r1, r3
 8005264:	68f8      	ldr	r0, [r7, #12]
 8005266:	f7ff fea6 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800526a:	f241 3288 	movw	r2, #5000	; 0x1388
 800526e:	2107      	movs	r1, #7
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f000 f977 	bl	8005564 <SDMMC_GetCmdResp1>
 8005276:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800527a:	4618      	mov	r0, r3
 800527c:	3728      	adds	r7, #40	; 0x28
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}

08005282 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b088      	sub	sp, #32
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800528e:	2300      	movs	r3, #0
 8005290:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005292:	2300      	movs	r3, #0
 8005294:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005296:	2300      	movs	r3, #0
 8005298:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800529a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800529e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052a0:	f107 0308 	add.w	r3, r7, #8
 80052a4:	4619      	mov	r1, r3
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f7ff fe85 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f92d 	bl	800550c <SDMMC_GetCmdError>
 80052b2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052b4:	69fb      	ldr	r3, [r7, #28]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3720      	adds	r7, #32
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}

080052be <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80052be:	b580      	push	{r7, lr}
 80052c0:	b088      	sub	sp, #32
 80052c2:	af00      	add	r7, sp, #0
 80052c4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80052c6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80052ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80052cc:	2308      	movs	r3, #8
 80052ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052d0:	2340      	movs	r3, #64	; 0x40
 80052d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052de:	f107 0308 	add.w	r3, r7, #8
 80052e2:	4619      	mov	r1, r3
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7ff fe66 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 fb24 	bl	8005938 <SDMMC_GetCmdResp7>
 80052f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052f2:	69fb      	ldr	r3, [r7, #28]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3720      	adds	r7, #32
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800530a:	2337      	movs	r3, #55	; 0x37
 800530c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800530e:	2340      	movs	r3, #64	; 0x40
 8005310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800531a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800531c:	f107 0308 	add.w	r3, r7, #8
 8005320:	4619      	mov	r1, r3
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff fe47 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005328:	f241 3288 	movw	r2, #5000	; 0x1388
 800532c:	2137      	movs	r1, #55	; 0x37
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f918 	bl	8005564 <SDMMC_GetCmdResp1>
 8005334:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005336:	69fb      	ldr	r3, [r7, #28]
}
 8005338:	4618      	mov	r0, r3
 800533a:	3720      	adds	r7, #32
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}

08005340 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b088      	sub	sp, #32
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005354:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005356:	2329      	movs	r3, #41	; 0x29
 8005358:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800535a:	2340      	movs	r3, #64	; 0x40
 800535c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800535e:	2300      	movs	r3, #0
 8005360:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005366:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005368:	f107 0308 	add.w	r3, r7, #8
 800536c:	4619      	mov	r1, r3
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f7ff fe21 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fa2b 	bl	80057d0 <SDMMC_GetCmdResp3>
 800537a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800537c:	69fb      	ldr	r3, [r7, #28]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3720      	adds	r7, #32
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b088      	sub	sp, #32
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
 800538e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005394:	2306      	movs	r3, #6
 8005396:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005398:	2340      	movs	r3, #64	; 0x40
 800539a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800539c:	2300      	movs	r3, #0
 800539e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053a6:	f107 0308 	add.w	r3, r7, #8
 80053aa:	4619      	mov	r1, r3
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f7ff fe02 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80053b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053b6:	2106      	movs	r1, #6
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 f8d3 	bl	8005564 <SDMMC_GetCmdResp1>
 80053be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053c0:	69fb      	ldr	r3, [r7, #28]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3720      	adds	r7, #32
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}

080053ca <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80053ca:	b580      	push	{r7, lr}
 80053cc:	b088      	sub	sp, #32
 80053ce:	af00      	add	r7, sp, #0
 80053d0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80053d6:	2333      	movs	r3, #51	; 0x33
 80053d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053da:	2340      	movs	r3, #64	; 0x40
 80053dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053e8:	f107 0308 	add.w	r3, r7, #8
 80053ec:	4619      	mov	r1, r3
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7ff fde1 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80053f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f8:	2133      	movs	r1, #51	; 0x33
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 f8b2 	bl	8005564 <SDMMC_GetCmdResp1>
 8005400:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005402:	69fb      	ldr	r3, [r7, #28]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3720      	adds	r7, #32
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b088      	sub	sp, #32
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005418:	2302      	movs	r3, #2
 800541a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800541c:	23c0      	movs	r3, #192	; 0xc0
 800541e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005428:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800542a:	f107 0308 	add.w	r3, r7, #8
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fdc0 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 f982 	bl	8005740 <SDMMC_GetCmdResp2>
 800543c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800543e:	69fb      	ldr	r3, [r7, #28]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3720      	adds	r7, #32
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005456:	2309      	movs	r3, #9
 8005458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800545a:	23c0      	movs	r3, #192	; 0xc0
 800545c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005466:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005468:	f107 0308 	add.w	r3, r7, #8
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff fda1 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f000 f963 	bl	8005740 <SDMMC_GetCmdResp2>
 800547a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800547c:	69fb      	ldr	r3, [r7, #28]
}
 800547e:	4618      	mov	r0, r3
 8005480:	3720      	adds	r7, #32
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}

08005486 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005486:	b580      	push	{r7, lr}
 8005488:	b088      	sub	sp, #32
 800548a:	af00      	add	r7, sp, #0
 800548c:	6078      	str	r0, [r7, #4]
 800548e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005494:	2303      	movs	r3, #3
 8005496:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005498:	2340      	movs	r3, #64	; 0x40
 800549a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054a6:	f107 0308 	add.w	r3, r7, #8
 80054aa:	4619      	mov	r1, r3
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7ff fd82 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80054b2:	683a      	ldr	r2, [r7, #0]
 80054b4:	2103      	movs	r1, #3
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f9c8 	bl	800584c <SDMMC_GetCmdResp6>
 80054bc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054be:	69fb      	ldr	r3, [r7, #28]
}
 80054c0:	4618      	mov	r0, r3
 80054c2:	3720      	adds	r7, #32
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bd80      	pop	{r7, pc}

080054c8 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b088      	sub	sp, #32
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80054d6:	230d      	movs	r3, #13
 80054d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054da:	2340      	movs	r3, #64	; 0x40
 80054dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054e6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054e8:	f107 0308 	add.w	r3, r7, #8
 80054ec:	4619      	mov	r1, r3
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7ff fd61 	bl	8004fb6 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80054f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054f8:	210d      	movs	r1, #13
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 f832 	bl	8005564 <SDMMC_GetCmdResp1>
 8005500:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005502:	69fb      	ldr	r3, [r7, #28]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}

0800550c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005514:	4b11      	ldr	r3, [pc, #68]	; (800555c <SDMMC_GetCmdError+0x50>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a11      	ldr	r2, [pc, #68]	; (8005560 <SDMMC_GetCmdError+0x54>)
 800551a:	fba2 2303 	umull	r2, r3, r2, r3
 800551e:	0a5b      	lsrs	r3, r3, #9
 8005520:	f241 3288 	movw	r2, #5000	; 0x1388
 8005524:	fb02 f303 	mul.w	r3, r2, r3
 8005528:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1e5a      	subs	r2, r3, #1
 800552e:	60fa      	str	r2, [r7, #12]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005534:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005538:	e009      	b.n	800554e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	2b00      	cmp	r3, #0
 8005544:	d0f1      	beq.n	800552a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	22c5      	movs	r2, #197	; 0xc5
 800554a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800554c:	2300      	movs	r3, #0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	20000004 	.word	0x20000004
 8005560:	10624dd3 	.word	0x10624dd3

08005564 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b088      	sub	sp, #32
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	460b      	mov	r3, r1
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005572:	4b70      	ldr	r3, [pc, #448]	; (8005734 <SDMMC_GetCmdResp1+0x1d0>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a70      	ldr	r2, [pc, #448]	; (8005738 <SDMMC_GetCmdResp1+0x1d4>)
 8005578:	fba2 2303 	umull	r2, r3, r2, r3
 800557c:	0a5a      	lsrs	r2, r3, #9
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	fb02 f303 	mul.w	r3, r2, r3
 8005584:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005586:	69fb      	ldr	r3, [r7, #28]
 8005588:	1e5a      	subs	r2, r3, #1
 800558a:	61fa      	str	r2, [r7, #28]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d102      	bne.n	8005596 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005590:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005594:	e0c9      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800559a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800559c:	69bb      	ldr	r3, [r7, #24]
 800559e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d0ef      	beq.n	8005586 <SDMMC_GetCmdResp1+0x22>
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1ea      	bne.n	8005586 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d004      	beq.n	80055c6 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2204      	movs	r2, #4
 80055c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055c2:	2304      	movs	r3, #4
 80055c4:	e0b1      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d004      	beq.n	80055dc <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0a6      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	22c5      	movs	r2, #197	; 0xc5
 80055e0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f7ff fd11 	bl	800500a <SDIO_GetCommandResponse>
 80055e8:	4603      	mov	r3, r0
 80055ea:	461a      	mov	r2, r3
 80055ec:	7afb      	ldrb	r3, [r7, #11]
 80055ee:	4293      	cmp	r3, r2
 80055f0:	d001      	beq.n	80055f6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e099      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80055f6:	2100      	movs	r1, #0
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f7ff fd13 	bl	8005024 <SDIO_GetResponse>
 80055fe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4b4e      	ldr	r3, [pc, #312]	; (800573c <SDMMC_GetCmdResp1+0x1d8>)
 8005604:	4013      	ands	r3, r2
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800560a:	2300      	movs	r3, #0
 800560c:	e08d      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	2b00      	cmp	r3, #0
 8005612:	da02      	bge.n	800561a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005614:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005618:	e087      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d001      	beq.n	8005628 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005624:	2340      	movs	r3, #64	; 0x40
 8005626:	e080      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d001      	beq.n	8005636 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005632:	2380      	movs	r3, #128	; 0x80
 8005634:	e079      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005640:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005644:	e071      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800564c:	2b00      	cmp	r3, #0
 800564e:	d002      	beq.n	8005656 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005650:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005654:	e069      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005660:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005664:	e061      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800566c:	2b00      	cmp	r3, #0
 800566e:	d002      	beq.n	8005676 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005670:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005674:	e059      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d002      	beq.n	8005686 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005684:	e051      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005694:	e049      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d002      	beq.n	80056a6 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80056a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056a4:	e041      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80056b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056b4:	e039      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d002      	beq.n	80056c6 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80056c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056c4:	e031      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d002      	beq.n	80056d6 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80056d0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80056d4:	e029      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d002      	beq.n	80056e6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80056e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80056e4:	e021      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d002      	beq.n	80056f6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80056f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80056f4:	e019      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d002      	beq.n	8005706 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005700:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005704:	e011      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005710:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005714:	e009      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f003 0308 	and.w	r3, r3, #8
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005720:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005724:	e001      	b.n	800572a <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005726:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800572a:	4618      	mov	r0, r3
 800572c:	3720      	adds	r7, #32
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000004 	.word	0x20000004
 8005738:	10624dd3 	.word	0x10624dd3
 800573c:	fdffe008 	.word	0xfdffe008

08005740 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005748:	4b1f      	ldr	r3, [pc, #124]	; (80057c8 <SDMMC_GetCmdResp2+0x88>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a1f      	ldr	r2, [pc, #124]	; (80057cc <SDMMC_GetCmdResp2+0x8c>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	0a5b      	lsrs	r3, r3, #9
 8005754:	f241 3288 	movw	r2, #5000	; 0x1388
 8005758:	fb02 f303 	mul.w	r3, r2, r3
 800575c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1e5a      	subs	r2, r3, #1
 8005762:	60fa      	str	r2, [r7, #12]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d102      	bne.n	800576e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005768:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800576c:	e026      	b.n	80057bc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005772:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0ef      	beq.n	800575e <SDMMC_GetCmdResp2+0x1e>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1ea      	bne.n	800575e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578c:	f003 0304 	and.w	r3, r3, #4
 8005790:	2b00      	cmp	r3, #0
 8005792:	d004      	beq.n	800579e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2204      	movs	r2, #4
 8005798:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800579a:	2304      	movs	r3, #4
 800579c:	e00e      	b.n	80057bc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e003      	b.n	80057bc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	22c5      	movs	r2, #197	; 0xc5
 80057b8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80057ba:	2300      	movs	r3, #0
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3714      	adds	r7, #20
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr
 80057c8:	20000004 	.word	0x20000004
 80057cc:	10624dd3 	.word	0x10624dd3

080057d0 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b085      	sub	sp, #20
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057d8:	4b1a      	ldr	r3, [pc, #104]	; (8005844 <SDMMC_GetCmdResp3+0x74>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a1a      	ldr	r2, [pc, #104]	; (8005848 <SDMMC_GetCmdResp3+0x78>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	0a5b      	lsrs	r3, r3, #9
 80057e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057e8:	fb02 f303 	mul.w	r3, r2, r3
 80057ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	1e5a      	subs	r2, r3, #1
 80057f2:	60fa      	str	r2, [r7, #12]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d102      	bne.n	80057fe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057fc:	e01b      	b.n	8005836 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005802:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800580a:	2b00      	cmp	r3, #0
 800580c:	d0ef      	beq.n	80057ee <SDMMC_GetCmdResp3+0x1e>
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005814:	2b00      	cmp	r3, #0
 8005816:	d1ea      	bne.n	80057ee <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800581c:	f003 0304 	and.w	r3, r3, #4
 8005820:	2b00      	cmp	r3, #0
 8005822:	d004      	beq.n	800582e <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2204      	movs	r2, #4
 8005828:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800582a:	2304      	movs	r3, #4
 800582c:	e003      	b.n	8005836 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	22c5      	movs	r2, #197	; 0xc5
 8005832:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3714      	adds	r7, #20
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	20000004 	.word	0x20000004
 8005848:	10624dd3 	.word	0x10624dd3

0800584c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b088      	sub	sp, #32
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	460b      	mov	r3, r1
 8005856:	607a      	str	r2, [r7, #4]
 8005858:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800585a:	4b35      	ldr	r3, [pc, #212]	; (8005930 <SDMMC_GetCmdResp6+0xe4>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a35      	ldr	r2, [pc, #212]	; (8005934 <SDMMC_GetCmdResp6+0xe8>)
 8005860:	fba2 2303 	umull	r2, r3, r2, r3
 8005864:	0a5b      	lsrs	r3, r3, #9
 8005866:	f241 3288 	movw	r2, #5000	; 0x1388
 800586a:	fb02 f303 	mul.w	r3, r2, r3
 800586e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	1e5a      	subs	r2, r3, #1
 8005874:	61fa      	str	r2, [r7, #28]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d102      	bne.n	8005880 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800587a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800587e:	e052      	b.n	8005926 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005884:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0ef      	beq.n	8005870 <SDMMC_GetCmdResp6+0x24>
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1ea      	bne.n	8005870 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d004      	beq.n	80058b0 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2204      	movs	r2, #4
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058ac:	2304      	movs	r3, #4
 80058ae:	e03a      	b.n	8005926 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b4:	f003 0301 	and.w	r3, r3, #1
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d004      	beq.n	80058c6 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e02f      	b.n	8005926 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f7ff fb9f 	bl	800500a <SDIO_GetCommandResponse>
 80058cc:	4603      	mov	r3, r0
 80058ce:	461a      	mov	r2, r3
 80058d0:	7afb      	ldrb	r3, [r7, #11]
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d001      	beq.n	80058da <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e025      	b.n	8005926 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	22c5      	movs	r2, #197	; 0xc5
 80058de:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80058e0:	2100      	movs	r1, #0
 80058e2:	68f8      	ldr	r0, [r7, #12]
 80058e4:	f7ff fb9e 	bl	8005024 <SDIO_GetResponse>
 80058e8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	0c1b      	lsrs	r3, r3, #16
 80058f8:	b29a      	uxth	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80058fe:	2300      	movs	r3, #0
 8005900:	e011      	b.n	8005926 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800590c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005910:	e009      	b.n	8005926 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d002      	beq.n	8005922 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800591c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005920:	e001      	b.n	8005926 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005922:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005926:	4618      	mov	r0, r3
 8005928:	3720      	adds	r7, #32
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop
 8005930:	20000004 	.word	0x20000004
 8005934:	10624dd3 	.word	0x10624dd3

08005938 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005940:	4b22      	ldr	r3, [pc, #136]	; (80059cc <SDMMC_GetCmdResp7+0x94>)
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a22      	ldr	r2, [pc, #136]	; (80059d0 <SDMMC_GetCmdResp7+0x98>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	0a5b      	lsrs	r3, r3, #9
 800594c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005950:	fb02 f303 	mul.w	r3, r2, r3
 8005954:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	1e5a      	subs	r2, r3, #1
 800595a:	60fa      	str	r2, [r7, #12]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d102      	bne.n	8005966 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005960:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005964:	e02c      	b.n	80059c0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0ef      	beq.n	8005956 <SDMMC_GetCmdResp7+0x1e>
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800597c:	2b00      	cmp	r3, #0
 800597e:	d1ea      	bne.n	8005956 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005984:	f003 0304 	and.w	r3, r3, #4
 8005988:	2b00      	cmp	r3, #0
 800598a:	d004      	beq.n	8005996 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2204      	movs	r2, #4
 8005990:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005992:	2304      	movs	r3, #4
 8005994:	e014      	b.n	80059c0 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d004      	beq.n	80059ac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e009      	b.n	80059c0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2240      	movs	r2, #64	; 0x40
 80059bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80059be:	2300      	movs	r3, #0
  
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ca:	4770      	bx	lr
 80059cc:	20000004 	.word	0x20000004
 80059d0:	10624dd3 	.word	0x10624dd3

080059d4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80059d8:	4904      	ldr	r1, [pc, #16]	; (80059ec <MX_FATFS_Init+0x18>)
 80059da:	4805      	ldr	r0, [pc, #20]	; (80059f0 <MX_FATFS_Init+0x1c>)
 80059dc:	f003 fbf0 	bl	80091c0 <FATFS_LinkDriver>
 80059e0:	4603      	mov	r3, r0
 80059e2:	461a      	mov	r2, r3
 80059e4:	4b03      	ldr	r3, [pc, #12]	; (80059f4 <MX_FATFS_Init+0x20>)
 80059e6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80059e8:	bf00      	nop
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	20000a70 	.word	0x20000a70
 80059f0:	08013d78 	.word	0x08013d78
 80059f4:	20000a6c 	.word	0x20000a6c

080059f8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80059fc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005a12:	f000 f879 	bl	8005b08 <BSP_SD_IsDetected>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d001      	beq.n	8005a20 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e012      	b.n	8005a46 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005a20:	480b      	ldr	r0, [pc, #44]	; (8005a50 <BSP_SD_Init+0x48>)
 8005a22:	f7fe f8db 	bl	8003bdc <HAL_SD_Init>
 8005a26:	4603      	mov	r3, r0
 8005a28:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005a2a:	79fb      	ldrb	r3, [r7, #7]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d109      	bne.n	8005a44 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005a30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005a34:	4806      	ldr	r0, [pc, #24]	; (8005a50 <BSP_SD_Init+0x48>)
 8005a36:	f7fe feb3 	bl	80047a0 <HAL_SD_ConfigWideBusOperation>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005a44:	79fb      	ldrb	r3, [r7, #7]
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000988 	.word	0x20000988

08005a54 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b088      	sub	sp, #32
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
 8005a60:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	9300      	str	r3, [sp, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	68ba      	ldr	r2, [r7, #8]
 8005a6e:	68f9      	ldr	r1, [r7, #12]
 8005a70:	4806      	ldr	r0, [pc, #24]	; (8005a8c <BSP_SD_ReadBlocks+0x38>)
 8005a72:	f7fe f961 	bl	8003d38 <HAL_SD_ReadBlocks>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d001      	beq.n	8005a80 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a82:	4618      	mov	r0, r3
 8005a84:	3718      	adds	r7, #24
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20000988 	.word	0x20000988

08005a90 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b088      	sub	sp, #32
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	607a      	str	r2, [r7, #4]
 8005a9c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68ba      	ldr	r2, [r7, #8]
 8005aaa:	68f9      	ldr	r1, [r7, #12]
 8005aac:	4806      	ldr	r0, [pc, #24]	; (8005ac8 <BSP_SD_WriteBlocks+0x38>)
 8005aae:	f7fe fb21 	bl	80040f4 <HAL_SD_WriteBlocks>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d001      	beq.n	8005abc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3718      	adds	r7, #24
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	20000988 	.word	0x20000988

08005acc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005ad0:	4805      	ldr	r0, [pc, #20]	; (8005ae8 <BSP_SD_GetCardState+0x1c>)
 8005ad2:	f7fe feff 	bl	80048d4 <HAL_SD_GetCardState>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	2b04      	cmp	r3, #4
 8005ada:	bf14      	ite	ne
 8005adc:	2301      	movne	r3, #1
 8005ade:	2300      	moveq	r3, #0
 8005ae0:	b2db      	uxtb	r3, r3
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	20000988 	.word	0x20000988

08005aec <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005af4:	6879      	ldr	r1, [r7, #4]
 8005af6:	4803      	ldr	r0, [pc, #12]	; (8005b04 <BSP_SD_GetCardInfo+0x18>)
 8005af8:	f7fe fe26 	bl	8004748 <HAL_SD_GetCardInfo>
}
 8005afc:	bf00      	nop
 8005afe:	3708      	adds	r7, #8
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000988 	.word	0x20000988

08005b08 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005b12:	79fb      	ldrb	r3, [r7, #7]
 8005b14:	b2db      	uxtb	r3, r3
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	370c      	adds	r7, #12
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005b2e:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <SD_CheckStatus+0x38>)
 8005b30:	2201      	movs	r2, #1
 8005b32:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005b34:	f7ff ffca 	bl	8005acc <BSP_SD_GetCardState>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d107      	bne.n	8005b4e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005b3e:	4b07      	ldr	r3, [pc, #28]	; (8005b5c <SD_CheckStatus+0x38>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	4b04      	ldr	r3, [pc, #16]	; (8005b5c <SD_CheckStatus+0x38>)
 8005b4c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005b4e:	4b03      	ldr	r3, [pc, #12]	; (8005b5c <SD_CheckStatus+0x38>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	b2db      	uxtb	r3, r3
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	2000000d 	.word	0x2000000d

08005b60 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	4603      	mov	r3, r0
 8005b68:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005b6a:	4b0b      	ldr	r3, [pc, #44]	; (8005b98 <SD_initialize+0x38>)
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005b70:	f7ff ff4a 	bl	8005a08 <BSP_SD_Init>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d107      	bne.n	8005b8a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff ffd1 	bl	8005b24 <SD_CheckStatus>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461a      	mov	r2, r3
 8005b86:	4b04      	ldr	r3, [pc, #16]	; (8005b98 <SD_initialize+0x38>)
 8005b88:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005b8a:	4b03      	ldr	r3, [pc, #12]	; (8005b98 <SD_initialize+0x38>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	b2db      	uxtb	r3, r3
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	2000000d 	.word	0x2000000d

08005b9c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff ffbb 	bl	8005b24 <SD_CheckStatus>
 8005bae:	4603      	mov	r3, r0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	3708      	adds	r7, #8
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}

08005bb8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b086      	sub	sp, #24
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	60b9      	str	r1, [r7, #8]
 8005bc0:	607a      	str	r2, [r7, #4]
 8005bc2:	603b      	str	r3, [r7, #0]
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005bcc:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd0:	683a      	ldr	r2, [r7, #0]
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	68b8      	ldr	r0, [r7, #8]
 8005bd6:	f7ff ff3d 	bl	8005a54 <BSP_SD_ReadBlocks>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d107      	bne.n	8005bf0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005be0:	bf00      	nop
 8005be2:	f7ff ff73 	bl	8005acc <BSP_SD_GetCardState>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1fa      	bne.n	8005be2 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005bec:	2300      	movs	r3, #0
 8005bee:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005bf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3718      	adds	r7, #24
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}

08005bfa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005bfa:	b580      	push	{r7, lr}
 8005bfc:	b086      	sub	sp, #24
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
 8005c06:	4603      	mov	r3, r0
 8005c08:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	68b8      	ldr	r0, [r7, #8]
 8005c18:	f7ff ff3a 	bl	8005a90 <BSP_SD_WriteBlocks>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d107      	bne.n	8005c32 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005c22:	bf00      	nop
 8005c24:	f7ff ff52 	bl	8005acc <BSP_SD_GetCardState>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d1fa      	bne.n	8005c24 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3718      	adds	r7, #24
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	bd80      	pop	{r7, pc}

08005c3c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b08c      	sub	sp, #48	; 0x30
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	603a      	str	r2, [r7, #0]
 8005c46:	71fb      	strb	r3, [r7, #7]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005c52:	4b25      	ldr	r3, [pc, #148]	; (8005ce8 <SD_ioctl+0xac>)
 8005c54:	781b      	ldrb	r3, [r3, #0]
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	f003 0301 	and.w	r3, r3, #1
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <SD_ioctl+0x28>
 8005c60:	2303      	movs	r3, #3
 8005c62:	e03c      	b.n	8005cde <SD_ioctl+0xa2>

  switch (cmd)
 8005c64:	79bb      	ldrb	r3, [r7, #6]
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d834      	bhi.n	8005cd4 <SD_ioctl+0x98>
 8005c6a:	a201      	add	r2, pc, #4	; (adr r2, 8005c70 <SD_ioctl+0x34>)
 8005c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c70:	08005c81 	.word	0x08005c81
 8005c74:	08005c89 	.word	0x08005c89
 8005c78:	08005ca1 	.word	0x08005ca1
 8005c7c:	08005cbb 	.word	0x08005cbb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c86:	e028      	b.n	8005cda <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c88:	f107 030c 	add.w	r3, r7, #12
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7ff ff2d 	bl	8005aec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c9e:	e01c      	b.n	8005cda <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005ca0:	f107 030c 	add.w	r3, r7, #12
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7ff ff21 	bl	8005aec <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	b29a      	uxth	r2, r3
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005cb8:	e00f      	b.n	8005cda <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005cba:	f107 030c 	add.w	r3, r7, #12
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f7ff ff14 	bl	8005aec <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cc6:	0a5a      	lsrs	r2, r3, #9
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005ccc:	2300      	movs	r3, #0
 8005cce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005cd2:	e002      	b.n	8005cda <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005cd4:	2304      	movs	r3, #4
 8005cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005cda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3730      	adds	r7, #48	; 0x30
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	2000000d 	.word	0x2000000d

08005cec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005cf6:	79fb      	ldrb	r3, [r7, #7]
 8005cf8:	4a08      	ldr	r2, [pc, #32]	; (8005d1c <disk_status+0x30>)
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	79fa      	ldrb	r2, [r7, #7]
 8005d04:	4905      	ldr	r1, [pc, #20]	; (8005d1c <disk_status+0x30>)
 8005d06:	440a      	add	r2, r1
 8005d08:	7a12      	ldrb	r2, [r2, #8]
 8005d0a:	4610      	mov	r0, r2
 8005d0c:	4798      	blx	r3
 8005d0e:	4603      	mov	r3, r0
 8005d10:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005d12:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	3710      	adds	r7, #16
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}
 8005d1c:	20000304 	.word	0x20000304

08005d20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	4603      	mov	r3, r0
 8005d28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005d2e:	79fb      	ldrb	r3, [r7, #7]
 8005d30:	4a0d      	ldr	r2, [pc, #52]	; (8005d68 <disk_initialize+0x48>)
 8005d32:	5cd3      	ldrb	r3, [r2, r3]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d111      	bne.n	8005d5c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	4a0b      	ldr	r2, [pc, #44]	; (8005d68 <disk_initialize+0x48>)
 8005d3c:	2101      	movs	r1, #1
 8005d3e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005d40:	79fb      	ldrb	r3, [r7, #7]
 8005d42:	4a09      	ldr	r2, [pc, #36]	; (8005d68 <disk_initialize+0x48>)
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	4413      	add	r3, r2
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	79fa      	ldrb	r2, [r7, #7]
 8005d4e:	4906      	ldr	r1, [pc, #24]	; (8005d68 <disk_initialize+0x48>)
 8005d50:	440a      	add	r2, r1
 8005d52:	7a12      	ldrb	r2, [r2, #8]
 8005d54:	4610      	mov	r0, r2
 8005d56:	4798      	blx	r3
 8005d58:	4603      	mov	r3, r0
 8005d5a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3710      	adds	r7, #16
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	20000304 	.word	0x20000304

08005d6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005d6c:	b590      	push	{r4, r7, lr}
 8005d6e:	b087      	sub	sp, #28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60b9      	str	r1, [r7, #8]
 8005d74:	607a      	str	r2, [r7, #4]
 8005d76:	603b      	str	r3, [r7, #0]
 8005d78:	4603      	mov	r3, r0
 8005d7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	4a0a      	ldr	r2, [pc, #40]	; (8005da8 <disk_read+0x3c>)
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	689c      	ldr	r4, [r3, #8]
 8005d88:	7bfb      	ldrb	r3, [r7, #15]
 8005d8a:	4a07      	ldr	r2, [pc, #28]	; (8005da8 <disk_read+0x3c>)
 8005d8c:	4413      	add	r3, r2
 8005d8e:	7a18      	ldrb	r0, [r3, #8]
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	47a0      	blx	r4
 8005d98:	4603      	mov	r3, r0
 8005d9a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd90      	pop	{r4, r7, pc}
 8005da6:	bf00      	nop
 8005da8:	20000304 	.word	0x20000304

08005dac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005dac:	b590      	push	{r4, r7, lr}
 8005dae:	b087      	sub	sp, #28
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60b9      	str	r1, [r7, #8]
 8005db4:	607a      	str	r2, [r7, #4]
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	4603      	mov	r3, r0
 8005dba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005dbc:	7bfb      	ldrb	r3, [r7, #15]
 8005dbe:	4a0a      	ldr	r2, [pc, #40]	; (8005de8 <disk_write+0x3c>)
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	4413      	add	r3, r2
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	68dc      	ldr	r4, [r3, #12]
 8005dc8:	7bfb      	ldrb	r3, [r7, #15]
 8005dca:	4a07      	ldr	r2, [pc, #28]	; (8005de8 <disk_write+0x3c>)
 8005dcc:	4413      	add	r3, r2
 8005dce:	7a18      	ldrb	r0, [r3, #8]
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	68b9      	ldr	r1, [r7, #8]
 8005dd6:	47a0      	blx	r4
 8005dd8:	4603      	mov	r3, r0
 8005dda:	75fb      	strb	r3, [r7, #23]
  return res;
 8005ddc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	371c      	adds	r7, #28
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd90      	pop	{r4, r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20000304 	.word	0x20000304

08005dec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	4603      	mov	r3, r0
 8005df4:	603a      	str	r2, [r7, #0]
 8005df6:	71fb      	strb	r3, [r7, #7]
 8005df8:	460b      	mov	r3, r1
 8005dfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005dfc:	79fb      	ldrb	r3, [r7, #7]
 8005dfe:	4a09      	ldr	r2, [pc, #36]	; (8005e24 <disk_ioctl+0x38>)
 8005e00:	009b      	lsls	r3, r3, #2
 8005e02:	4413      	add	r3, r2
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	691b      	ldr	r3, [r3, #16]
 8005e08:	79fa      	ldrb	r2, [r7, #7]
 8005e0a:	4906      	ldr	r1, [pc, #24]	; (8005e24 <disk_ioctl+0x38>)
 8005e0c:	440a      	add	r2, r1
 8005e0e:	7a10      	ldrb	r0, [r2, #8]
 8005e10:	79b9      	ldrb	r1, [r7, #6]
 8005e12:	683a      	ldr	r2, [r7, #0]
 8005e14:	4798      	blx	r3
 8005e16:	4603      	mov	r3, r0
 8005e18:	73fb      	strb	r3, [r7, #15]
  return res;
 8005e1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3710      	adds	r7, #16
 8005e20:	46bd      	mov	sp, r7
 8005e22:	bd80      	pop	{r7, pc}
 8005e24:	20000304 	.word	0x20000304

08005e28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	3301      	adds	r3, #1
 8005e34:	781b      	ldrb	r3, [r3, #0]
 8005e36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005e38:	89fb      	ldrh	r3, [r7, #14]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	b21a      	sxth	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	b21b      	sxth	r3, r3
 8005e44:	4313      	orrs	r3, r2
 8005e46:	b21b      	sxth	r3, r3
 8005e48:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005e4a:	89fb      	ldrh	r3, [r7, #14]
}
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr

08005e58 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b085      	sub	sp, #20
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3303      	adds	r3, #3
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	021b      	lsls	r3, r3, #8
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	3202      	adds	r2, #2
 8005e70:	7812      	ldrb	r2, [r2, #0]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	3201      	adds	r2, #1
 8005e7e:	7812      	ldrb	r2, [r2, #0]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	021b      	lsls	r3, r3, #8
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	7812      	ldrb	r2, [r2, #0]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005e90:	68fb      	ldr	r3, [r7, #12]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3714      	adds	r7, #20
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr

08005e9e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005e9e:	b480      	push	{r7}
 8005ea0:	b083      	sub	sp, #12
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	1c5a      	adds	r2, r3, #1
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	887a      	ldrh	r2, [r7, #2]
 8005eb2:	b2d2      	uxtb	r2, r2
 8005eb4:	701a      	strb	r2, [r3, #0]
 8005eb6:	887b      	ldrh	r3, [r7, #2]
 8005eb8:	0a1b      	lsrs	r3, r3, #8
 8005eba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	1c5a      	adds	r2, r3, #1
 8005ec0:	607a      	str	r2, [r7, #4]
 8005ec2:	887a      	ldrh	r2, [r7, #2]
 8005ec4:	b2d2      	uxtb	r2, r2
 8005ec6:	701a      	strb	r2, [r3, #0]
}
 8005ec8:	bf00      	nop
 8005eca:	370c      	adds	r7, #12
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr

08005ed4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]
 8005edc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	1c5a      	adds	r2, r3, #1
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	683a      	ldr	r2, [r7, #0]
 8005ee6:	b2d2      	uxtb	r2, r2
 8005ee8:	701a      	strb	r2, [r3, #0]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	0a1b      	lsrs	r3, r3, #8
 8005eee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	1c5a      	adds	r2, r3, #1
 8005ef4:	607a      	str	r2, [r7, #4]
 8005ef6:	683a      	ldr	r2, [r7, #0]
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	701a      	strb	r2, [r3, #0]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	0a1b      	lsrs	r3, r3, #8
 8005f00:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	1c5a      	adds	r2, r3, #1
 8005f06:	607a      	str	r2, [r7, #4]
 8005f08:	683a      	ldr	r2, [r7, #0]
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	0a1b      	lsrs	r3, r3, #8
 8005f12:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	1c5a      	adds	r2, r3, #1
 8005f18:	607a      	str	r2, [r7, #4]
 8005f1a:	683a      	ldr	r2, [r7, #0]
 8005f1c:	b2d2      	uxtb	r2, r2
 8005f1e:	701a      	strb	r2, [r3, #0]
}
 8005f20:	bf00      	nop
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005f2c:	b480      	push	{r7}
 8005f2e:	b087      	sub	sp, #28
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00d      	beq.n	8005f62 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005f46:	693a      	ldr	r2, [r7, #16]
 8005f48:	1c53      	adds	r3, r2, #1
 8005f4a:	613b      	str	r3, [r7, #16]
 8005f4c:	697b      	ldr	r3, [r7, #20]
 8005f4e:	1c59      	adds	r1, r3, #1
 8005f50:	6179      	str	r1, [r7, #20]
 8005f52:	7812      	ldrb	r2, [r2, #0]
 8005f54:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3b01      	subs	r3, #1
 8005f5a:	607b      	str	r3, [r7, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d1f1      	bne.n	8005f46 <mem_cpy+0x1a>
	}
}
 8005f62:	bf00      	nop
 8005f64:	371c      	adds	r7, #28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005f6e:	b480      	push	{r7}
 8005f70:	b087      	sub	sp, #28
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	617a      	str	r2, [r7, #20]
 8005f84:	68ba      	ldr	r2, [r7, #8]
 8005f86:	b2d2      	uxtb	r2, r2
 8005f88:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	3b01      	subs	r3, #1
 8005f8e:	607b      	str	r3, [r7, #4]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1f3      	bne.n	8005f7e <mem_set+0x10>
}
 8005f96:	bf00      	nop
 8005f98:	bf00      	nop
 8005f9a:	371c      	adds	r7, #28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005fa4:	b480      	push	{r7}
 8005fa6:	b089      	sub	sp, #36	; 0x24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	60b9      	str	r1, [r7, #8]
 8005fae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	61fb      	str	r3, [r7, #28]
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	1c5a      	adds	r2, r3, #1
 8005fc0:	61fa      	str	r2, [r7, #28]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	69bb      	ldr	r3, [r7, #24]
 8005fc8:	1c5a      	adds	r2, r3, #1
 8005fca:	61ba      	str	r2, [r7, #24]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	1acb      	subs	r3, r1, r3
 8005fd0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	607b      	str	r3, [r7, #4]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d002      	beq.n	8005fe4 <mem_cmp+0x40>
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d0eb      	beq.n	8005fbc <mem_cmp+0x18>

	return r;
 8005fe4:	697b      	ldr	r3, [r7, #20]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3724      	adds	r7, #36	; 0x24
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
 8005ffa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005ffc:	e002      	b.n	8006004 <chk_chr+0x12>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	3301      	adds	r3, #1
 8006002:	607b      	str	r3, [r7, #4]
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d005      	beq.n	8006018 <chk_chr+0x26>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	461a      	mov	r2, r3
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	4293      	cmp	r3, r2
 8006016:	d1f2      	bne.n	8005ffe <chk_chr+0xc>
	return *str;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	781b      	ldrb	r3, [r3, #0]
}
 800601c:	4618      	mov	r0, r3
 800601e:	370c      	adds	r7, #12
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006032:	2300      	movs	r3, #0
 8006034:	60bb      	str	r3, [r7, #8]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	e029      	b.n	8006090 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800603c:	4a27      	ldr	r2, [pc, #156]	; (80060dc <chk_lock+0xb4>)
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	011b      	lsls	r3, r3, #4
 8006042:	4413      	add	r3, r2
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d01d      	beq.n	8006086 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800604a:	4a24      	ldr	r2, [pc, #144]	; (80060dc <chk_lock+0xb4>)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	011b      	lsls	r3, r3, #4
 8006050:	4413      	add	r3, r2
 8006052:	681a      	ldr	r2, [r3, #0]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	429a      	cmp	r2, r3
 800605a:	d116      	bne.n	800608a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800605c:	4a1f      	ldr	r2, [pc, #124]	; (80060dc <chk_lock+0xb4>)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	011b      	lsls	r3, r3, #4
 8006062:	4413      	add	r3, r2
 8006064:	3304      	adds	r3, #4
 8006066:	681a      	ldr	r2, [r3, #0]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800606c:	429a      	cmp	r2, r3
 800606e:	d10c      	bne.n	800608a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006070:	4a1a      	ldr	r2, [pc, #104]	; (80060dc <chk_lock+0xb4>)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	4413      	add	r3, r2
 8006078:	3308      	adds	r3, #8
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006080:	429a      	cmp	r2, r3
 8006082:	d102      	bne.n	800608a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006084:	e007      	b.n	8006096 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006086:	2301      	movs	r3, #1
 8006088:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	3301      	adds	r3, #1
 800608e:	60fb      	str	r3, [r7, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d9d2      	bls.n	800603c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b02      	cmp	r3, #2
 800609a:	d109      	bne.n	80060b0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d102      	bne.n	80060a8 <chk_lock+0x80>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d101      	bne.n	80060ac <chk_lock+0x84>
 80060a8:	2300      	movs	r3, #0
 80060aa:	e010      	b.n	80060ce <chk_lock+0xa6>
 80060ac:	2312      	movs	r3, #18
 80060ae:	e00e      	b.n	80060ce <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d108      	bne.n	80060c8 <chk_lock+0xa0>
 80060b6:	4a09      	ldr	r2, [pc, #36]	; (80060dc <chk_lock+0xb4>)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	4413      	add	r3, r2
 80060be:	330c      	adds	r3, #12
 80060c0:	881b      	ldrh	r3, [r3, #0]
 80060c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060c6:	d101      	bne.n	80060cc <chk_lock+0xa4>
 80060c8:	2310      	movs	r3, #16
 80060ca:	e000      	b.n	80060ce <chk_lock+0xa6>
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3714      	adds	r7, #20
 80060d2:	46bd      	mov	sp, r7
 80060d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d8:	4770      	bx	lr
 80060da:	bf00      	nop
 80060dc:	200002e4 	.word	0x200002e4

080060e0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80060e6:	2300      	movs	r3, #0
 80060e8:	607b      	str	r3, [r7, #4]
 80060ea:	e002      	b.n	80060f2 <enq_lock+0x12>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	3301      	adds	r3, #1
 80060f0:	607b      	str	r3, [r7, #4]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d806      	bhi.n	8006106 <enq_lock+0x26>
 80060f8:	4a09      	ldr	r2, [pc, #36]	; (8006120 <enq_lock+0x40>)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	011b      	lsls	r3, r3, #4
 80060fe:	4413      	add	r3, r2
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d1f2      	bne.n	80060ec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	2b02      	cmp	r3, #2
 800610a:	bf14      	ite	ne
 800610c:	2301      	movne	r3, #1
 800610e:	2300      	moveq	r3, #0
 8006110:	b2db      	uxtb	r3, r3
}
 8006112:	4618      	mov	r0, r3
 8006114:	370c      	adds	r7, #12
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop
 8006120:	200002e4 	.word	0x200002e4

08006124 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
 8006132:	e01f      	b.n	8006174 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006134:	4a41      	ldr	r2, [pc, #260]	; (800623c <inc_lock+0x118>)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	011b      	lsls	r3, r3, #4
 800613a:	4413      	add	r3, r2
 800613c:	681a      	ldr	r2, [r3, #0]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d113      	bne.n	800616e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006146:	4a3d      	ldr	r2, [pc, #244]	; (800623c <inc_lock+0x118>)
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	011b      	lsls	r3, r3, #4
 800614c:	4413      	add	r3, r2
 800614e:	3304      	adds	r3, #4
 8006150:	681a      	ldr	r2, [r3, #0]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006156:	429a      	cmp	r2, r3
 8006158:	d109      	bne.n	800616e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800615a:	4a38      	ldr	r2, [pc, #224]	; (800623c <inc_lock+0x118>)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	4413      	add	r3, r2
 8006162:	3308      	adds	r3, #8
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800616a:	429a      	cmp	r2, r3
 800616c:	d006      	beq.n	800617c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	3301      	adds	r3, #1
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2b01      	cmp	r3, #1
 8006178:	d9dc      	bls.n	8006134 <inc_lock+0x10>
 800617a:	e000      	b.n	800617e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800617c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b02      	cmp	r3, #2
 8006182:	d132      	bne.n	80061ea <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	e002      	b.n	8006190 <inc_lock+0x6c>
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3301      	adds	r3, #1
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d806      	bhi.n	80061a4 <inc_lock+0x80>
 8006196:	4a29      	ldr	r2, [pc, #164]	; (800623c <inc_lock+0x118>)
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	4413      	add	r3, r2
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d1f2      	bne.n	800618a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d101      	bne.n	80061ae <inc_lock+0x8a>
 80061aa:	2300      	movs	r3, #0
 80061ac:	e040      	b.n	8006230 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	4922      	ldr	r1, [pc, #136]	; (800623c <inc_lock+0x118>)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	440b      	add	r3, r1
 80061ba:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	689a      	ldr	r2, [r3, #8]
 80061c0:	491e      	ldr	r1, [pc, #120]	; (800623c <inc_lock+0x118>)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	440b      	add	r3, r1
 80061c8:	3304      	adds	r3, #4
 80061ca:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	695a      	ldr	r2, [r3, #20]
 80061d0:	491a      	ldr	r1, [pc, #104]	; (800623c <inc_lock+0x118>)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	011b      	lsls	r3, r3, #4
 80061d6:	440b      	add	r3, r1
 80061d8:	3308      	adds	r3, #8
 80061da:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80061dc:	4a17      	ldr	r2, [pc, #92]	; (800623c <inc_lock+0x118>)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	4413      	add	r3, r2
 80061e4:	330c      	adds	r3, #12
 80061e6:	2200      	movs	r2, #0
 80061e8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d009      	beq.n	8006204 <inc_lock+0xe0>
 80061f0:	4a12      	ldr	r2, [pc, #72]	; (800623c <inc_lock+0x118>)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	4413      	add	r3, r2
 80061f8:	330c      	adds	r3, #12
 80061fa:	881b      	ldrh	r3, [r3, #0]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d001      	beq.n	8006204 <inc_lock+0xe0>
 8006200:	2300      	movs	r3, #0
 8006202:	e015      	b.n	8006230 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d108      	bne.n	800621c <inc_lock+0xf8>
 800620a:	4a0c      	ldr	r2, [pc, #48]	; (800623c <inc_lock+0x118>)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	4413      	add	r3, r2
 8006212:	330c      	adds	r3, #12
 8006214:	881b      	ldrh	r3, [r3, #0]
 8006216:	3301      	adds	r3, #1
 8006218:	b29a      	uxth	r2, r3
 800621a:	e001      	b.n	8006220 <inc_lock+0xfc>
 800621c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006220:	4906      	ldr	r1, [pc, #24]	; (800623c <inc_lock+0x118>)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	440b      	add	r3, r1
 8006228:	330c      	adds	r3, #12
 800622a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	3301      	adds	r3, #1
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	200002e4 	.word	0x200002e4

08006240 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	3b01      	subs	r3, #1
 800624c:	607b      	str	r3, [r7, #4]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d825      	bhi.n	80062a0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006254:	4a17      	ldr	r2, [pc, #92]	; (80062b4 <dec_lock+0x74>)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	011b      	lsls	r3, r3, #4
 800625a:	4413      	add	r3, r2
 800625c:	330c      	adds	r3, #12
 800625e:	881b      	ldrh	r3, [r3, #0]
 8006260:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006262:	89fb      	ldrh	r3, [r7, #14]
 8006264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006268:	d101      	bne.n	800626e <dec_lock+0x2e>
 800626a:	2300      	movs	r3, #0
 800626c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800626e:	89fb      	ldrh	r3, [r7, #14]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <dec_lock+0x3a>
 8006274:	89fb      	ldrh	r3, [r7, #14]
 8006276:	3b01      	subs	r3, #1
 8006278:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800627a:	4a0e      	ldr	r2, [pc, #56]	; (80062b4 <dec_lock+0x74>)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	4413      	add	r3, r2
 8006282:	330c      	adds	r3, #12
 8006284:	89fa      	ldrh	r2, [r7, #14]
 8006286:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006288:	89fb      	ldrh	r3, [r7, #14]
 800628a:	2b00      	cmp	r3, #0
 800628c:	d105      	bne.n	800629a <dec_lock+0x5a>
 800628e:	4a09      	ldr	r2, [pc, #36]	; (80062b4 <dec_lock+0x74>)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	4413      	add	r3, r2
 8006296:	2200      	movs	r2, #0
 8006298:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	737b      	strb	r3, [r7, #13]
 800629e:	e001      	b.n	80062a4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80062a0:	2302      	movs	r3, #2
 80062a2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80062a4:	7b7b      	ldrb	r3, [r7, #13]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3714      	adds	r7, #20
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	200002e4 	.word	0x200002e4

080062b8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80062b8:	b480      	push	{r7}
 80062ba:	b085      	sub	sp, #20
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80062c0:	2300      	movs	r3, #0
 80062c2:	60fb      	str	r3, [r7, #12]
 80062c4:	e010      	b.n	80062e8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80062c6:	4a0d      	ldr	r2, [pc, #52]	; (80062fc <clear_lock+0x44>)
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	4413      	add	r3, r2
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d105      	bne.n	80062e2 <clear_lock+0x2a>
 80062d6:	4a09      	ldr	r2, [pc, #36]	; (80062fc <clear_lock+0x44>)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	011b      	lsls	r3, r3, #4
 80062dc:	4413      	add	r3, r2
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3301      	adds	r3, #1
 80062e6:	60fb      	str	r3, [r7, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d9eb      	bls.n	80062c6 <clear_lock+0xe>
	}
}
 80062ee:	bf00      	nop
 80062f0:	bf00      	nop
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	200002e4 	.word	0x200002e4

08006300 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b086      	sub	sp, #24
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006308:	2300      	movs	r3, #0
 800630a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	78db      	ldrb	r3, [r3, #3]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d034      	beq.n	800637e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006318:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	7858      	ldrb	r0, [r3, #1]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006324:	2301      	movs	r3, #1
 8006326:	697a      	ldr	r2, [r7, #20]
 8006328:	f7ff fd40 	bl	8005dac <disk_write>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	d002      	beq.n	8006338 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006332:	2301      	movs	r3, #1
 8006334:	73fb      	strb	r3, [r7, #15]
 8006336:	e022      	b.n	800637e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	1ad2      	subs	r2, r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	69db      	ldr	r3, [r3, #28]
 800634a:	429a      	cmp	r2, r3
 800634c:	d217      	bcs.n	800637e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	789b      	ldrb	r3, [r3, #2]
 8006352:	613b      	str	r3, [r7, #16]
 8006354:	e010      	b.n	8006378 <sync_window+0x78>
					wsect += fs->fsize;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	69db      	ldr	r3, [r3, #28]
 800635a:	697a      	ldr	r2, [r7, #20]
 800635c:	4413      	add	r3, r2
 800635e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	7858      	ldrb	r0, [r3, #1]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800636a:	2301      	movs	r3, #1
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	f7ff fd1d 	bl	8005dac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	3b01      	subs	r3, #1
 8006376:	613b      	str	r3, [r7, #16]
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d8eb      	bhi.n	8006356 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800637e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006380:	4618      	mov	r0, r3
 8006382:	3718      	adds	r7, #24
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}

08006388 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
 8006390:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006392:	2300      	movs	r3, #0
 8006394:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	429a      	cmp	r2, r3
 800639e:	d01b      	beq.n	80063d8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff ffad 	bl	8006300 <sync_window>
 80063a6:	4603      	mov	r3, r0
 80063a8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d113      	bne.n	80063d8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	7858      	ldrb	r0, [r3, #1]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80063ba:	2301      	movs	r3, #1
 80063bc:	683a      	ldr	r2, [r7, #0]
 80063be:	f7ff fcd5 	bl	8005d6c <disk_read>
 80063c2:	4603      	mov	r3, r0
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d004      	beq.n	80063d2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80063c8:	f04f 33ff 	mov.w	r3, #4294967295
 80063cc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80063d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b084      	sub	sp, #16
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff ff87 	bl	8006300 <sync_window>
 80063f2:	4603      	mov	r3, r0
 80063f4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80063f6:	7bfb      	ldrb	r3, [r7, #15]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d158      	bne.n	80064ae <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	781b      	ldrb	r3, [r3, #0]
 8006400:	2b03      	cmp	r3, #3
 8006402:	d148      	bne.n	8006496 <sync_fs+0xb2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	791b      	ldrb	r3, [r3, #4]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d144      	bne.n	8006496 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3334      	adds	r3, #52	; 0x34
 8006410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006414:	2100      	movs	r1, #0
 8006416:	4618      	mov	r0, r3
 8006418:	f7ff fda9 	bl	8005f6e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	3334      	adds	r3, #52	; 0x34
 8006420:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006424:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff fd38 	bl	8005e9e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3334      	adds	r3, #52	; 0x34
 8006432:	4921      	ldr	r1, [pc, #132]	; (80064b8 <sync_fs+0xd4>)
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff fd4d 	bl	8005ed4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	3334      	adds	r3, #52	; 0x34
 800643e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006442:	491e      	ldr	r1, [pc, #120]	; (80064bc <sync_fs+0xd8>)
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff fd45 	bl	8005ed4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	3334      	adds	r3, #52	; 0x34
 800644e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	695b      	ldr	r3, [r3, #20]
 8006456:	4619      	mov	r1, r3
 8006458:	4610      	mov	r0, r2
 800645a:	f7ff fd3b 	bl	8005ed4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	3334      	adds	r3, #52	; 0x34
 8006462:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	4619      	mov	r1, r3
 800646c:	4610      	mov	r0, r2
 800646e:	f7ff fd31 	bl	8005ed4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a1b      	ldr	r3, [r3, #32]
 8006476:	1c5a      	adds	r2, r3, #1
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	7858      	ldrb	r0, [r3, #1]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800648a:	2301      	movs	r3, #1
 800648c:	f7ff fc8e 	bl	8005dac <disk_write>
			fs->fsi_flag = 0;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	785b      	ldrb	r3, [r3, #1]
 800649a:	2200      	movs	r2, #0
 800649c:	2100      	movs	r1, #0
 800649e:	4618      	mov	r0, r3
 80064a0:	f7ff fca4 	bl	8005dec <disk_ioctl>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <sync_fs+0xca>
 80064aa:	2301      	movs	r3, #1
 80064ac:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80064ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	41615252 	.word	0x41615252
 80064bc:	61417272 	.word	0x61417272

080064c0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	3b02      	subs	r3, #2
 80064ce:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	3b02      	subs	r3, #2
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d301      	bcc.n	80064e0 <clust2sect+0x20>
 80064dc:	2300      	movs	r3, #0
 80064de:	e008      	b.n	80064f2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	895b      	ldrh	r3, [r3, #10]
 80064e4:	461a      	mov	r2, r3
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	fb03 f202 	mul.w	r2, r3, r2
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f0:	4413      	add	r3, r2
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr

080064fe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80064fe:	b580      	push	{r7, lr}
 8006500:	b086      	sub	sp, #24
 8006502:	af00      	add	r7, sp, #0
 8006504:	6078      	str	r0, [r7, #4]
 8006506:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d904      	bls.n	800651e <get_fat+0x20>
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	699b      	ldr	r3, [r3, #24]
 8006518:	683a      	ldr	r2, [r7, #0]
 800651a:	429a      	cmp	r2, r3
 800651c:	d302      	bcc.n	8006524 <get_fat+0x26>
		val = 1;	/* Internal error */
 800651e:	2301      	movs	r3, #1
 8006520:	617b      	str	r3, [r7, #20]
 8006522:	e08f      	b.n	8006644 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006524:	f04f 33ff 	mov.w	r3, #4294967295
 8006528:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	781b      	ldrb	r3, [r3, #0]
 800652e:	2b03      	cmp	r3, #3
 8006530:	d062      	beq.n	80065f8 <get_fat+0xfa>
 8006532:	2b03      	cmp	r3, #3
 8006534:	dc7c      	bgt.n	8006630 <get_fat+0x132>
 8006536:	2b01      	cmp	r3, #1
 8006538:	d002      	beq.n	8006540 <get_fat+0x42>
 800653a:	2b02      	cmp	r3, #2
 800653c:	d042      	beq.n	80065c4 <get_fat+0xc6>
 800653e:	e077      	b.n	8006630 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	085b      	lsrs	r3, r3, #1
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	4413      	add	r3, r2
 800654c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	0a5b      	lsrs	r3, r3, #9
 8006556:	4413      	add	r3, r2
 8006558:	4619      	mov	r1, r3
 800655a:	6938      	ldr	r0, [r7, #16]
 800655c:	f7ff ff14 	bl	8006388 <move_window>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d167      	bne.n	8006636 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	1c5a      	adds	r2, r3, #1
 800656a:	60fa      	str	r2, [r7, #12]
 800656c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006570:	693a      	ldr	r2, [r7, #16]
 8006572:	4413      	add	r3, r2
 8006574:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006578:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	0a5b      	lsrs	r3, r3, #9
 8006582:	4413      	add	r3, r2
 8006584:	4619      	mov	r1, r3
 8006586:	6938      	ldr	r0, [r7, #16]
 8006588:	f7ff fefe 	bl	8006388 <move_window>
 800658c:	4603      	mov	r3, r0
 800658e:	2b00      	cmp	r3, #0
 8006590:	d153      	bne.n	800663a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4413      	add	r3, r2
 800659c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80065a0:	021b      	lsls	r3, r3, #8
 80065a2:	461a      	mov	r2, r3
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	4313      	orrs	r3, r2
 80065a8:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	f003 0301 	and.w	r3, r3, #1
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d002      	beq.n	80065ba <get_fat+0xbc>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	091b      	lsrs	r3, r3, #4
 80065b8:	e002      	b.n	80065c0 <get_fat+0xc2>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065c0:	617b      	str	r3, [r7, #20]
			break;
 80065c2:	e03f      	b.n	8006644 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	0a1b      	lsrs	r3, r3, #8
 80065cc:	4413      	add	r3, r2
 80065ce:	4619      	mov	r1, r3
 80065d0:	6938      	ldr	r0, [r7, #16]
 80065d2:	f7ff fed9 	bl	8006388 <move_window>
 80065d6:	4603      	mov	r3, r0
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d130      	bne.n	800663e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80065ea:	4413      	add	r3, r2
 80065ec:	4618      	mov	r0, r3
 80065ee:	f7ff fc1b 	bl	8005e28 <ld_word>
 80065f2:	4603      	mov	r3, r0
 80065f4:	617b      	str	r3, [r7, #20]
			break;
 80065f6:	e025      	b.n	8006644 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	09db      	lsrs	r3, r3, #7
 8006600:	4413      	add	r3, r2
 8006602:	4619      	mov	r1, r3
 8006604:	6938      	ldr	r0, [r7, #16]
 8006606:	f7ff febf 	bl	8006388 <move_window>
 800660a:	4603      	mov	r3, r0
 800660c:	2b00      	cmp	r3, #0
 800660e:	d118      	bne.n	8006642 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800661e:	4413      	add	r3, r2
 8006620:	4618      	mov	r0, r3
 8006622:	f7ff fc19 	bl	8005e58 <ld_dword>
 8006626:	4603      	mov	r3, r0
 8006628:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800662c:	617b      	str	r3, [r7, #20]
			break;
 800662e:	e009      	b.n	8006644 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006630:	2301      	movs	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	e006      	b.n	8006644 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006636:	bf00      	nop
 8006638:	e004      	b.n	8006644 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800663a:	bf00      	nop
 800663c:	e002      	b.n	8006644 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800663e:	bf00      	nop
 8006640:	e000      	b.n	8006644 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006642:	bf00      	nop
		}
	}

	return val;
 8006644:	697b      	ldr	r3, [r7, #20]
}
 8006646:	4618      	mov	r0, r3
 8006648:	3718      	adds	r7, #24
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}

0800664e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800664e:	b590      	push	{r4, r7, lr}
 8006650:	b089      	sub	sp, #36	; 0x24
 8006652:	af00      	add	r7, sp, #0
 8006654:	60f8      	str	r0, [r7, #12]
 8006656:	60b9      	str	r1, [r7, #8]
 8006658:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800665a:	2302      	movs	r3, #2
 800665c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b01      	cmp	r3, #1
 8006662:	f240 80d2 	bls.w	800680a <put_fat+0x1bc>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	68ba      	ldr	r2, [r7, #8]
 800666c:	429a      	cmp	r2, r3
 800666e:	f080 80cc 	bcs.w	800680a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	781b      	ldrb	r3, [r3, #0]
 8006676:	2b03      	cmp	r3, #3
 8006678:	f000 8096 	beq.w	80067a8 <put_fat+0x15a>
 800667c:	2b03      	cmp	r3, #3
 800667e:	f300 80cd 	bgt.w	800681c <put_fat+0x1ce>
 8006682:	2b01      	cmp	r3, #1
 8006684:	d002      	beq.n	800668c <put_fat+0x3e>
 8006686:	2b02      	cmp	r3, #2
 8006688:	d06e      	beq.n	8006768 <put_fat+0x11a>
 800668a:	e0c7      	b.n	800681c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	69bb      	ldr	r3, [r7, #24]
 8006692:	085b      	lsrs	r3, r3, #1
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	4413      	add	r3, r2
 8006698:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800669e:	69bb      	ldr	r3, [r7, #24]
 80066a0:	0a5b      	lsrs	r3, r3, #9
 80066a2:	4413      	add	r3, r2
 80066a4:	4619      	mov	r1, r3
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f7ff fe6e 	bl	8006388 <move_window>
 80066ac:	4603      	mov	r3, r0
 80066ae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066b0:	7ffb      	ldrb	r3, [r7, #31]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f040 80ab 	bne.w	800680e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	1c59      	adds	r1, r3, #1
 80066c2:	61b9      	str	r1, [r7, #24]
 80066c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066c8:	4413      	add	r3, r2
 80066ca:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00d      	beq.n	80066f2 <put_fat+0xa4>
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	b25b      	sxtb	r3, r3
 80066dc:	f003 030f 	and.w	r3, r3, #15
 80066e0:	b25a      	sxtb	r2, r3
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	b25b      	sxtb	r3, r3
 80066ea:	4313      	orrs	r3, r2
 80066ec:	b25b      	sxtb	r3, r3
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	e001      	b.n	80066f6 <put_fat+0xa8>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2201      	movs	r2, #1
 80066fe:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	0a5b      	lsrs	r3, r3, #9
 8006708:	4413      	add	r3, r2
 800670a:	4619      	mov	r1, r3
 800670c:	68f8      	ldr	r0, [r7, #12]
 800670e:	f7ff fe3b 	bl	8006388 <move_window>
 8006712:	4603      	mov	r3, r0
 8006714:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006716:	7ffb      	ldrb	r3, [r7, #31]
 8006718:	2b00      	cmp	r3, #0
 800671a:	d17a      	bne.n	8006812 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006728:	4413      	add	r3, r2
 800672a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f003 0301 	and.w	r3, r3, #1
 8006732:	2b00      	cmp	r3, #0
 8006734:	d003      	beq.n	800673e <put_fat+0xf0>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	091b      	lsrs	r3, r3, #4
 800673a:	b2db      	uxtb	r3, r3
 800673c:	e00e      	b.n	800675c <put_fat+0x10e>
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	b25b      	sxtb	r3, r3
 8006744:	f023 030f 	bic.w	r3, r3, #15
 8006748:	b25a      	sxtb	r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	0a1b      	lsrs	r3, r3, #8
 800674e:	b25b      	sxtb	r3, r3
 8006750:	f003 030f 	and.w	r3, r3, #15
 8006754:	b25b      	sxtb	r3, r3
 8006756:	4313      	orrs	r3, r2
 8006758:	b25b      	sxtb	r3, r3
 800675a:	b2db      	uxtb	r3, r3
 800675c:	697a      	ldr	r2, [r7, #20]
 800675e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2201      	movs	r2, #1
 8006764:	70da      	strb	r2, [r3, #3]
			break;
 8006766:	e059      	b.n	800681c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	0a1b      	lsrs	r3, r3, #8
 8006770:	4413      	add	r3, r2
 8006772:	4619      	mov	r1, r3
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	f7ff fe07 	bl	8006388 <move_window>
 800677a:	4603      	mov	r3, r0
 800677c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800677e:	7ffb      	ldrb	r3, [r7, #31]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d148      	bne.n	8006816 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	005b      	lsls	r3, r3, #1
 800678e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006792:	4413      	add	r3, r2
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	b292      	uxth	r2, r2
 8006798:	4611      	mov	r1, r2
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fb7f 	bl	8005e9e <st_word>
			fs->wflag = 1;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2201      	movs	r2, #1
 80067a4:	70da      	strb	r2, [r3, #3]
			break;
 80067a6:	e039      	b.n	800681c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	09db      	lsrs	r3, r3, #7
 80067b0:	4413      	add	r3, r2
 80067b2:	4619      	mov	r1, r3
 80067b4:	68f8      	ldr	r0, [r7, #12]
 80067b6:	f7ff fde7 	bl	8006388 <move_window>
 80067ba:	4603      	mov	r3, r0
 80067bc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067be:	7ffb      	ldrb	r3, [r7, #31]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d12a      	bne.n	800681a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80067d8:	4413      	add	r3, r2
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff fb3c 	bl	8005e58 <ld_dword>
 80067e0:	4603      	mov	r3, r0
 80067e2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80067e6:	4323      	orrs	r3, r4
 80067e8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80067f8:	4413      	add	r3, r2
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	4618      	mov	r0, r3
 80067fe:	f7ff fb69 	bl	8005ed4 <st_dword>
			fs->wflag = 1;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2201      	movs	r2, #1
 8006806:	70da      	strb	r2, [r3, #3]
			break;
 8006808:	e008      	b.n	800681c <put_fat+0x1ce>
		}
	}
 800680a:	bf00      	nop
 800680c:	e006      	b.n	800681c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800680e:	bf00      	nop
 8006810:	e004      	b.n	800681c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006812:	bf00      	nop
 8006814:	e002      	b.n	800681c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006816:	bf00      	nop
 8006818:	e000      	b.n	800681c <put_fat+0x1ce>
			if (res != FR_OK) break;
 800681a:	bf00      	nop
	return res;
 800681c:	7ffb      	ldrb	r3, [r7, #31]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3724      	adds	r7, #36	; 0x24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd90      	pop	{r4, r7, pc}

08006826 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b088      	sub	sp, #32
 800682a:	af00      	add	r7, sp, #0
 800682c:	60f8      	str	r0, [r7, #12]
 800682e:	60b9      	str	r1, [r7, #8]
 8006830:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006832:	2300      	movs	r3, #0
 8006834:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d904      	bls.n	800684c <remove_chain+0x26>
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	429a      	cmp	r2, r3
 800684a:	d301      	bcc.n	8006850 <remove_chain+0x2a>
 800684c:	2302      	movs	r3, #2
 800684e:	e04b      	b.n	80068e8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00c      	beq.n	8006870 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006856:	f04f 32ff 	mov.w	r2, #4294967295
 800685a:	6879      	ldr	r1, [r7, #4]
 800685c:	69b8      	ldr	r0, [r7, #24]
 800685e:	f7ff fef6 	bl	800664e <put_fat>
 8006862:	4603      	mov	r3, r0
 8006864:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006866:	7ffb      	ldrb	r3, [r7, #31]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d001      	beq.n	8006870 <remove_chain+0x4a>
 800686c:	7ffb      	ldrb	r3, [r7, #31]
 800686e:	e03b      	b.n	80068e8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006870:	68b9      	ldr	r1, [r7, #8]
 8006872:	68f8      	ldr	r0, [r7, #12]
 8006874:	f7ff fe43 	bl	80064fe <get_fat>
 8006878:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d031      	beq.n	80068e4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	2b01      	cmp	r3, #1
 8006884:	d101      	bne.n	800688a <remove_chain+0x64>
 8006886:	2302      	movs	r3, #2
 8006888:	e02e      	b.n	80068e8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006890:	d101      	bne.n	8006896 <remove_chain+0x70>
 8006892:	2301      	movs	r3, #1
 8006894:	e028      	b.n	80068e8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006896:	2200      	movs	r2, #0
 8006898:	68b9      	ldr	r1, [r7, #8]
 800689a:	69b8      	ldr	r0, [r7, #24]
 800689c:	f7ff fed7 	bl	800664e <put_fat>
 80068a0:	4603      	mov	r3, r0
 80068a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80068a4:	7ffb      	ldrb	r3, [r7, #31]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d001      	beq.n	80068ae <remove_chain+0x88>
 80068aa:	7ffb      	ldrb	r3, [r7, #31]
 80068ac:	e01c      	b.n	80068e8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	695a      	ldr	r2, [r3, #20]
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	3b02      	subs	r3, #2
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d20b      	bcs.n	80068d4 <remove_chain+0xae>
			fs->free_clst++;
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	1c5a      	adds	r2, r3, #1
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	791b      	ldrb	r3, [r3, #4]
 80068ca:	f043 0301 	orr.w	r3, r3, #1
 80068ce:	b2da      	uxtb	r2, r3
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d3c6      	bcc.n	8006870 <remove_chain+0x4a>
 80068e2:	e000      	b.n	80068e6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80068e4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3720      	adds	r7, #32
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b088      	sub	sp, #32
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
 80068f8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	2b00      	cmp	r3, #0
 8006904:	d10d      	bne.n	8006922 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	691b      	ldr	r3, [r3, #16]
 800690a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d004      	beq.n	800691c <create_chain+0x2c>
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	429a      	cmp	r2, r3
 800691a:	d31b      	bcc.n	8006954 <create_chain+0x64>
 800691c:	2301      	movs	r3, #1
 800691e:	61bb      	str	r3, [r7, #24]
 8006920:	e018      	b.n	8006954 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	6878      	ldr	r0, [r7, #4]
 8006926:	f7ff fdea 	bl	80064fe <get_fat>
 800692a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	2b01      	cmp	r3, #1
 8006930:	d801      	bhi.n	8006936 <create_chain+0x46>
 8006932:	2301      	movs	r3, #1
 8006934:	e070      	b.n	8006a18 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800693c:	d101      	bne.n	8006942 <create_chain+0x52>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	e06a      	b.n	8006a18 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	699b      	ldr	r3, [r3, #24]
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	429a      	cmp	r2, r3
 800694a:	d201      	bcs.n	8006950 <create_chain+0x60>
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	e063      	b.n	8006a18 <create_chain+0x128>
		scl = clst;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006954:	69bb      	ldr	r3, [r7, #24]
 8006956:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	3301      	adds	r3, #1
 800695c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	429a      	cmp	r2, r3
 8006966:	d307      	bcc.n	8006978 <create_chain+0x88>
				ncl = 2;
 8006968:	2302      	movs	r3, #2
 800696a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800696c:	69fa      	ldr	r2, [r7, #28]
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	429a      	cmp	r2, r3
 8006972:	d901      	bls.n	8006978 <create_chain+0x88>
 8006974:	2300      	movs	r3, #0
 8006976:	e04f      	b.n	8006a18 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006978:	69f9      	ldr	r1, [r7, #28]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff fdbf 	bl	80064fe <get_fat>
 8006980:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00e      	beq.n	80069a6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d003      	beq.n	8006996 <create_chain+0xa6>
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006994:	d101      	bne.n	800699a <create_chain+0xaa>
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	e03e      	b.n	8006a18 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800699a:	69fa      	ldr	r2, [r7, #28]
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d1da      	bne.n	8006958 <create_chain+0x68>
 80069a2:	2300      	movs	r3, #0
 80069a4:	e038      	b.n	8006a18 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80069a6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80069a8:	f04f 32ff 	mov.w	r2, #4294967295
 80069ac:	69f9      	ldr	r1, [r7, #28]
 80069ae:	6938      	ldr	r0, [r7, #16]
 80069b0:	f7ff fe4d 	bl	800664e <put_fat>
 80069b4:	4603      	mov	r3, r0
 80069b6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80069b8:	7dfb      	ldrb	r3, [r7, #23]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d109      	bne.n	80069d2 <create_chain+0xe2>
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d006      	beq.n	80069d2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80069c4:	69fa      	ldr	r2, [r7, #28]
 80069c6:	6839      	ldr	r1, [r7, #0]
 80069c8:	6938      	ldr	r0, [r7, #16]
 80069ca:	f7ff fe40 	bl	800664e <put_fat>
 80069ce:	4603      	mov	r3, r0
 80069d0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80069d2:	7dfb      	ldrb	r3, [r7, #23]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d116      	bne.n	8006a06 <create_chain+0x116>
		fs->last_clst = ncl;
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	695a      	ldr	r2, [r3, #20]
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	3b02      	subs	r3, #2
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d804      	bhi.n	80069f6 <create_chain+0x106>
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	695b      	ldr	r3, [r3, #20]
 80069f0:	1e5a      	subs	r2, r3, #1
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	791b      	ldrb	r3, [r3, #4]
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	b2da      	uxtb	r2, r3
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	711a      	strb	r2, [r3, #4]
 8006a04:	e007      	b.n	8006a16 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006a06:	7dfb      	ldrb	r3, [r7, #23]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d102      	bne.n	8006a12 <create_chain+0x122>
 8006a0c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a10:	e000      	b.n	8006a14 <create_chain+0x124>
 8006a12:	2301      	movs	r3, #1
 8006a14:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006a16:	69fb      	ldr	r3, [r7, #28]
}
 8006a18:	4618      	mov	r0, r3
 8006a1a:	3720      	adds	r7, #32
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	bd80      	pop	{r7, pc}

08006a20 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a34:	3304      	adds	r3, #4
 8006a36:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	0a5b      	lsrs	r3, r3, #9
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	8952      	ldrh	r2, [r2, #10]
 8006a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a44:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	1d1a      	adds	r2, r3, #4
 8006a4a:	613a      	str	r2, [r7, #16]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d101      	bne.n	8006a5a <clmt_clust+0x3a>
 8006a56:	2300      	movs	r3, #0
 8006a58:	e010      	b.n	8006a7c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	429a      	cmp	r2, r3
 8006a60:	d307      	bcc.n	8006a72 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006a62:	697a      	ldr	r2, [r7, #20]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	617b      	str	r3, [r7, #20]
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a70:	e7e9      	b.n	8006a46 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006a72:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	4413      	add	r3, r2
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	371c      	adds	r7, #28
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b086      	sub	sp, #24
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a9e:	d204      	bcs.n	8006aaa <dir_sdi+0x22>
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	f003 031f 	and.w	r3, r3, #31
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <dir_sdi+0x26>
		return FR_INT_ERR;
 8006aaa:	2302      	movs	r3, #2
 8006aac:	e063      	b.n	8006b76 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	683a      	ldr	r2, [r7, #0]
 8006ab2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d106      	bne.n	8006ace <dir_sdi+0x46>
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d902      	bls.n	8006ace <dir_sdi+0x46>
		clst = fs->dirbase;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d10c      	bne.n	8006aee <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	8912      	ldrh	r2, [r2, #8]
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d301      	bcc.n	8006ae4 <dir_sdi+0x5c>
 8006ae0:	2302      	movs	r3, #2
 8006ae2:	e048      	b.n	8006b76 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	61da      	str	r2, [r3, #28]
 8006aec:	e029      	b.n	8006b42 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	895b      	ldrh	r3, [r3, #10]
 8006af2:	025b      	lsls	r3, r3, #9
 8006af4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006af6:	e019      	b.n	8006b2c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6979      	ldr	r1, [r7, #20]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff fcfe 	bl	80064fe <get_fat>
 8006b02:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b0a:	d101      	bne.n	8006b10 <dir_sdi+0x88>
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e032      	b.n	8006b76 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2b01      	cmp	r3, #1
 8006b14:	d904      	bls.n	8006b20 <dir_sdi+0x98>
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	699b      	ldr	r3, [r3, #24]
 8006b1a:	697a      	ldr	r2, [r7, #20]
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d301      	bcc.n	8006b24 <dir_sdi+0x9c>
 8006b20:	2302      	movs	r3, #2
 8006b22:	e028      	b.n	8006b76 <dir_sdi+0xee>
			ofs -= csz;
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	429a      	cmp	r2, r3
 8006b32:	d2e1      	bcs.n	8006af8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006b34:	6979      	ldr	r1, [r7, #20]
 8006b36:	6938      	ldr	r0, [r7, #16]
 8006b38:	f7ff fcc2 	bl	80064c0 <clust2sect>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	697a      	ldr	r2, [r7, #20]
 8006b46:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	69db      	ldr	r3, [r3, #28]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <dir_sdi+0xcc>
 8006b50:	2302      	movs	r3, #2
 8006b52:	e010      	b.n	8006b76 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	69da      	ldr	r2, [r3, #28]
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	0a5b      	lsrs	r3, r3, #9
 8006b5c:	441a      	add	r2, r3
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006b62:	693b      	ldr	r3, [r7, #16]
 8006b64:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6e:	441a      	add	r2, r3
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3718      	adds	r7, #24
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}

08006b7e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b086      	sub	sp, #24
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
 8006b86:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	695b      	ldr	r3, [r3, #20]
 8006b92:	3320      	adds	r3, #32
 8006b94:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	69db      	ldr	r3, [r3, #28]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d003      	beq.n	8006ba6 <dir_next+0x28>
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ba4:	d301      	bcc.n	8006baa <dir_next+0x2c>
 8006ba6:	2304      	movs	r3, #4
 8006ba8:	e0aa      	b.n	8006d00 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	f040 8098 	bne.w	8006ce6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69db      	ldr	r3, [r3, #28]
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d10b      	bne.n	8006be0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006bc8:	68bb      	ldr	r3, [r7, #8]
 8006bca:	095b      	lsrs	r3, r3, #5
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	8912      	ldrh	r2, [r2, #8]
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	f0c0 8088 	bcc.w	8006ce6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	61da      	str	r2, [r3, #28]
 8006bdc:	2304      	movs	r3, #4
 8006bde:	e08f      	b.n	8006d00 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	0a5b      	lsrs	r3, r3, #9
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	8952      	ldrh	r2, [r2, #10]
 8006be8:	3a01      	subs	r2, #1
 8006bea:	4013      	ands	r3, r2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d17a      	bne.n	8006ce6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	f7ff fc80 	bl	80064fe <get_fat>
 8006bfe:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006c00:	697b      	ldr	r3, [r7, #20]
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d801      	bhi.n	8006c0a <dir_next+0x8c>
 8006c06:	2302      	movs	r3, #2
 8006c08:	e07a      	b.n	8006d00 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c10:	d101      	bne.n	8006c16 <dir_next+0x98>
 8006c12:	2301      	movs	r3, #1
 8006c14:	e074      	b.n	8006d00 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	699b      	ldr	r3, [r3, #24]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	d358      	bcc.n	8006cd2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d104      	bne.n	8006c30 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	61da      	str	r2, [r3, #28]
 8006c2c:	2304      	movs	r3, #4
 8006c2e:	e067      	b.n	8006d00 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006c30:	687a      	ldr	r2, [r7, #4]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	699b      	ldr	r3, [r3, #24]
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f7ff fe59 	bl	80068f0 <create_chain>
 8006c3e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d101      	bne.n	8006c4a <dir_next+0xcc>
 8006c46:	2307      	movs	r3, #7
 8006c48:	e05a      	b.n	8006d00 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d101      	bne.n	8006c54 <dir_next+0xd6>
 8006c50:	2302      	movs	r3, #2
 8006c52:	e055      	b.n	8006d00 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c54:	697b      	ldr	r3, [r7, #20]
 8006c56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5a:	d101      	bne.n	8006c60 <dir_next+0xe2>
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e04f      	b.n	8006d00 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006c60:	68f8      	ldr	r0, [r7, #12]
 8006c62:	f7ff fb4d 	bl	8006300 <sync_window>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d001      	beq.n	8006c70 <dir_next+0xf2>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	e047      	b.n	8006d00 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	3334      	adds	r3, #52	; 0x34
 8006c74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c78:	2100      	movs	r1, #0
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7ff f977 	bl	8005f6e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c80:	2300      	movs	r3, #0
 8006c82:	613b      	str	r3, [r7, #16]
 8006c84:	6979      	ldr	r1, [r7, #20]
 8006c86:	68f8      	ldr	r0, [r7, #12]
 8006c88:	f7ff fc1a 	bl	80064c0 <clust2sect>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	631a      	str	r2, [r3, #48]	; 0x30
 8006c92:	e012      	b.n	8006cba <dir_next+0x13c>
						fs->wflag = 1;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2201      	movs	r2, #1
 8006c98:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006c9a:	68f8      	ldr	r0, [r7, #12]
 8006c9c:	f7ff fb30 	bl	8006300 <sync_window>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d001      	beq.n	8006caa <dir_next+0x12c>
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	e02a      	b.n	8006d00 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	3301      	adds	r3, #1
 8006cae:	613b      	str	r3, [r7, #16]
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb4:	1c5a      	adds	r2, r3, #1
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	631a      	str	r2, [r3, #48]	; 0x30
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	895b      	ldrh	r3, [r3, #10]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d3e6      	bcc.n	8006c94 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	1ad2      	subs	r2, r2, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	697a      	ldr	r2, [r7, #20]
 8006cd6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006cd8:	6979      	ldr	r1, [r7, #20]
 8006cda:	68f8      	ldr	r0, [r7, #12]
 8006cdc:	f7ff fbf0 	bl	80064c0 <clust2sect>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cf8:	441a      	add	r2, r3
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3718      	adds	r7, #24
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b086      	sub	sp, #24
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006d18:	2100      	movs	r1, #0
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f7ff feb4 	bl	8006a88 <dir_sdi>
 8006d20:	4603      	mov	r3, r0
 8006d22:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d24:	7dfb      	ldrb	r3, [r7, #23]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d12b      	bne.n	8006d82 <dir_alloc+0x7a>
		n = 0;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	69db      	ldr	r3, [r3, #28]
 8006d32:	4619      	mov	r1, r3
 8006d34:	68f8      	ldr	r0, [r7, #12]
 8006d36:	f7ff fb27 	bl	8006388 <move_window>
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d11d      	bne.n	8006d80 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2be5      	cmp	r3, #229	; 0xe5
 8006d4c:	d004      	beq.n	8006d58 <dir_alloc+0x50>
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	6a1b      	ldr	r3, [r3, #32]
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d107      	bne.n	8006d68 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	613b      	str	r3, [r7, #16]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	429a      	cmp	r2, r3
 8006d64:	d102      	bne.n	8006d6c <dir_alloc+0x64>
 8006d66:	e00c      	b.n	8006d82 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006d68:	2300      	movs	r3, #0
 8006d6a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006d6c:	2101      	movs	r1, #1
 8006d6e:	6878      	ldr	r0, [r7, #4]
 8006d70:	f7ff ff05 	bl	8006b7e <dir_next>
 8006d74:	4603      	mov	r3, r0
 8006d76:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006d78:	7dfb      	ldrb	r3, [r7, #23]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d0d7      	beq.n	8006d2e <dir_alloc+0x26>
 8006d7e:	e000      	b.n	8006d82 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006d80:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006d82:	7dfb      	ldrb	r3, [r7, #23]
 8006d84:	2b04      	cmp	r3, #4
 8006d86:	d101      	bne.n	8006d8c <dir_alloc+0x84>
 8006d88:	2307      	movs	r3, #7
 8006d8a:	75fb      	strb	r3, [r7, #23]
	return res;
 8006d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3718      	adds	r7, #24
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	331a      	adds	r3, #26
 8006da4:	4618      	mov	r0, r3
 8006da6:	f7ff f83f 	bl	8005e28 <ld_word>
 8006daa:	4603      	mov	r3, r0
 8006dac:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	781b      	ldrb	r3, [r3, #0]
 8006db2:	2b03      	cmp	r3, #3
 8006db4:	d109      	bne.n	8006dca <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	3314      	adds	r3, #20
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f7ff f834 	bl	8005e28 <ld_word>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	041b      	lsls	r3, r3, #16
 8006dc4:	68fa      	ldr	r2, [r7, #12]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006dca:	68fb      	ldr	r3, [r7, #12]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b084      	sub	sp, #16
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	60b9      	str	r1, [r7, #8]
 8006dde:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	331a      	adds	r3, #26
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	b292      	uxth	r2, r2
 8006de8:	4611      	mov	r1, r2
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7ff f857 	bl	8005e9e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b03      	cmp	r3, #3
 8006df6:	d109      	bne.n	8006e0c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f103 0214 	add.w	r2, r3, #20
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	0c1b      	lsrs	r3, r3, #16
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	4619      	mov	r1, r3
 8006e06:	4610      	mov	r0, r2
 8006e08:	f7ff f849 	bl	8005e9e <st_word>
	}
}
 8006e0c:	bf00      	nop
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006e14:	b590      	push	{r4, r7, lr}
 8006e16:	b087      	sub	sp, #28
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	331a      	adds	r3, #26
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7ff f800 	bl	8005e28 <ld_word>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <cmp_lfn+0x1e>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	e059      	b.n	8006ee6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e3a:	1e5a      	subs	r2, r3, #1
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	4413      	add	r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006e48:	2301      	movs	r3, #1
 8006e4a:	81fb      	strh	r3, [r7, #14]
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	613b      	str	r3, [r7, #16]
 8006e50:	e033      	b.n	8006eba <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006e52:	4a27      	ldr	r2, [pc, #156]	; (8006ef0 <cmp_lfn+0xdc>)
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	4413      	add	r3, r2
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	461a      	mov	r2, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	4413      	add	r3, r2
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7fe ffe1 	bl	8005e28 <ld_word>
 8006e66:	4603      	mov	r3, r0
 8006e68:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006e6a:	89fb      	ldrh	r3, [r7, #14]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d01a      	beq.n	8006ea6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	2bfe      	cmp	r3, #254	; 0xfe
 8006e74:	d812      	bhi.n	8006e9c <cmp_lfn+0x88>
 8006e76:	89bb      	ldrh	r3, [r7, #12]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f7fa f8ad 	bl	8000fd8 <ff_wtoupper>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	461c      	mov	r4, r3
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	1c5a      	adds	r2, r3, #1
 8006e86:	617a      	str	r2, [r7, #20]
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f7fa f8a1 	bl	8000fd8 <ff_wtoupper>
 8006e96:	4603      	mov	r3, r0
 8006e98:	429c      	cmp	r4, r3
 8006e9a:	d001      	beq.n	8006ea0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	e022      	b.n	8006ee6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006ea0:	89bb      	ldrh	r3, [r7, #12]
 8006ea2:	81fb      	strh	r3, [r7, #14]
 8006ea4:	e006      	b.n	8006eb4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006ea6:	89bb      	ldrh	r3, [r7, #12]
 8006ea8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d001      	beq.n	8006eb4 <cmp_lfn+0xa0>
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	e018      	b.n	8006ee6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	613b      	str	r3, [r7, #16]
 8006eba:	693b      	ldr	r3, [r7, #16]
 8006ebc:	2b0c      	cmp	r3, #12
 8006ebe:	d9c8      	bls.n	8006e52 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00b      	beq.n	8006ee4 <cmp_lfn+0xd0>
 8006ecc:	89fb      	ldrh	r3, [r7, #14]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d008      	beq.n	8006ee4 <cmp_lfn+0xd0>
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	005b      	lsls	r3, r3, #1
 8006ed6:	687a      	ldr	r2, [r7, #4]
 8006ed8:	4413      	add	r3, r2
 8006eda:	881b      	ldrh	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d001      	beq.n	8006ee4 <cmp_lfn+0xd0>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	e000      	b.n	8006ee6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006ee4:	2301      	movs	r3, #1
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	bd90      	pop	{r4, r7, pc}
 8006eee:	bf00      	nop
 8006ef0:	08013e0c 	.word	0x08013e0c

08006ef4 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b086      	sub	sp, #24
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	331a      	adds	r3, #26
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fe ff90 	bl	8005e28 <ld_word>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d001      	beq.n	8006f12 <pick_lfn+0x1e>
 8006f0e:	2300      	movs	r3, #0
 8006f10:	e04d      	b.n	8006fae <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f1a:	1e5a      	subs	r2, r3, #1
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	005b      	lsls	r3, r3, #1
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006f28:	2301      	movs	r3, #1
 8006f2a:	81fb      	strh	r3, [r7, #14]
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	613b      	str	r3, [r7, #16]
 8006f30:	e028      	b.n	8006f84 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006f32:	4a21      	ldr	r2, [pc, #132]	; (8006fb8 <pick_lfn+0xc4>)
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	4413      	add	r3, r2
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	4413      	add	r3, r2
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe ff71 	bl	8005e28 <ld_word>
 8006f46:	4603      	mov	r3, r0
 8006f48:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006f4a:	89fb      	ldrh	r3, [r7, #14]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00f      	beq.n	8006f70 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	2bfe      	cmp	r3, #254	; 0xfe
 8006f54:	d901      	bls.n	8006f5a <pick_lfn+0x66>
 8006f56:	2300      	movs	r3, #0
 8006f58:	e029      	b.n	8006fae <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006f5a:	89bb      	ldrh	r3, [r7, #12]
 8006f5c:	81fb      	strh	r3, [r7, #14]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	1c5a      	adds	r2, r3, #1
 8006f62:	617a      	str	r2, [r7, #20]
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	4413      	add	r3, r2
 8006f6a:	89fa      	ldrh	r2, [r7, #14]
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	e006      	b.n	8006f7e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006f70:	89bb      	ldrh	r3, [r7, #12]
 8006f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d001      	beq.n	8006f7e <pick_lfn+0x8a>
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	e017      	b.n	8006fae <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006f7e:	693b      	ldr	r3, [r7, #16]
 8006f80:	3301      	adds	r3, #1
 8006f82:	613b      	str	r3, [r7, #16]
 8006f84:	693b      	ldr	r3, [r7, #16]
 8006f86:	2b0c      	cmp	r3, #12
 8006f88:	d9d3      	bls.n	8006f32 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	781b      	ldrb	r3, [r3, #0]
 8006f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2bfe      	cmp	r3, #254	; 0xfe
 8006f9a:	d901      	bls.n	8006fa0 <pick_lfn+0xac>
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	e006      	b.n	8006fae <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006fa0:	697b      	ldr	r3, [r7, #20]
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	2200      	movs	r2, #0
 8006faa:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006fac:	2301      	movs	r3, #1
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop
 8006fb8:	08013e0c 	.word	0x08013e0c

08006fbc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b088      	sub	sp, #32
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	60f8      	str	r0, [r7, #12]
 8006fc4:	60b9      	str	r1, [r7, #8]
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	461a      	mov	r2, r3
 8006fca:	460b      	mov	r3, r1
 8006fcc:	71fb      	strb	r3, [r7, #7]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	330d      	adds	r3, #13
 8006fd6:	79ba      	ldrb	r2, [r7, #6]
 8006fd8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	330b      	adds	r3, #11
 8006fde:	220f      	movs	r2, #15
 8006fe0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	330c      	adds	r3, #12
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	331a      	adds	r3, #26
 8006fee:	2100      	movs	r1, #0
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fe ff54 	bl	8005e9e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	1e5a      	subs	r2, r3, #1
 8006ffa:	4613      	mov	r3, r2
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	4413      	add	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8007006:	2300      	movs	r3, #0
 8007008:	82fb      	strh	r3, [r7, #22]
 800700a:	2300      	movs	r3, #0
 800700c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800700e:	8afb      	ldrh	r3, [r7, #22]
 8007010:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007014:	4293      	cmp	r3, r2
 8007016:	d007      	beq.n	8007028 <put_lfn+0x6c>
 8007018:	69fb      	ldr	r3, [r7, #28]
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	61fa      	str	r2, [r7, #28]
 800701e:	005b      	lsls	r3, r3, #1
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	881b      	ldrh	r3, [r3, #0]
 8007026:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8007028:	4a17      	ldr	r2, [pc, #92]	; (8007088 <put_lfn+0xcc>)
 800702a:	69bb      	ldr	r3, [r7, #24]
 800702c:	4413      	add	r3, r2
 800702e:	781b      	ldrb	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	4413      	add	r3, r2
 8007036:	8afa      	ldrh	r2, [r7, #22]
 8007038:	4611      	mov	r1, r2
 800703a:	4618      	mov	r0, r3
 800703c:	f7fe ff2f 	bl	8005e9e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8007040:	8afb      	ldrh	r3, [r7, #22]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d102      	bne.n	800704c <put_lfn+0x90>
 8007046:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800704a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	3301      	adds	r3, #1
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	2b0c      	cmp	r3, #12
 8007056:	d9da      	bls.n	800700e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8007058:	8afb      	ldrh	r3, [r7, #22]
 800705a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800705e:	4293      	cmp	r3, r2
 8007060:	d006      	beq.n	8007070 <put_lfn+0xb4>
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	4413      	add	r3, r2
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d103      	bne.n	8007078 <put_lfn+0xbc>
 8007070:	79fb      	ldrb	r3, [r7, #7]
 8007072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007076:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	79fa      	ldrb	r2, [r7, #7]
 800707c:	701a      	strb	r2, [r3, #0]
}
 800707e:	bf00      	nop
 8007080:	3720      	adds	r7, #32
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	08013e0c 	.word	0x08013e0c

0800708c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b08c      	sub	sp, #48	; 0x30
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
 8007098:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800709a:	220b      	movs	r2, #11
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7fe ff44 	bl	8005f2c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2b05      	cmp	r3, #5
 80070a8:	d92b      	bls.n	8007102 <gen_numname+0x76>
		sr = seq;
 80070aa:	683b      	ldr	r3, [r7, #0]
 80070ac:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 80070ae:	e022      	b.n	80070f6 <gen_numname+0x6a>
			wc = *lfn++;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	1c9a      	adds	r2, r3, #2
 80070b4:	607a      	str	r2, [r7, #4]
 80070b6:	881b      	ldrh	r3, [r3, #0]
 80070b8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 80070ba:	2300      	movs	r3, #0
 80070bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80070be:	e017      	b.n	80070f0 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 80070c0:	69fb      	ldr	r3, [r7, #28]
 80070c2:	005a      	lsls	r2, r3, #1
 80070c4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070c6:	f003 0301 	and.w	r3, r3, #1
 80070ca:	4413      	add	r3, r2
 80070cc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 80070ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80070d0:	085b      	lsrs	r3, r3, #1
 80070d2:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d005      	beq.n	80070ea <gen_numname+0x5e>
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 80070e4:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 80070e8:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 80070ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ec:	3301      	adds	r3, #1
 80070ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80070f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f2:	2b0f      	cmp	r3, #15
 80070f4:	d9e4      	bls.n	80070c0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	881b      	ldrh	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d1d8      	bne.n	80070b0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007102:	2307      	movs	r3, #7
 8007104:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	b2db      	uxtb	r3, r3
 800710a:	f003 030f 	and.w	r3, r3, #15
 800710e:	b2db      	uxtb	r3, r3
 8007110:	3330      	adds	r3, #48	; 0x30
 8007112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007116:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800711a:	2b39      	cmp	r3, #57	; 0x39
 800711c:	d904      	bls.n	8007128 <gen_numname+0x9c>
 800711e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007122:	3307      	adds	r3, #7
 8007124:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	1e5a      	subs	r2, r3, #1
 800712c:	62ba      	str	r2, [r7, #40]	; 0x28
 800712e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007132:	4413      	add	r3, r2
 8007134:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007138:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	091b      	lsrs	r3, r3, #4
 8007140:	603b      	str	r3, [r7, #0]
	} while (seq);
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1de      	bne.n	8007106 <gen_numname+0x7a>
	ns[i] = '~';
 8007148:	f107 0214 	add.w	r2, r7, #20
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	4413      	add	r3, r2
 8007150:	227e      	movs	r2, #126	; 0x7e
 8007152:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007154:	2300      	movs	r3, #0
 8007156:	627b      	str	r3, [r7, #36]	; 0x24
 8007158:	e002      	b.n	8007160 <gen_numname+0xd4>
 800715a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715c:	3301      	adds	r3, #1
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
 8007160:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007162:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007164:	429a      	cmp	r2, r3
 8007166:	d205      	bcs.n	8007174 <gen_numname+0xe8>
 8007168:	68fa      	ldr	r2, [r7, #12]
 800716a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716c:	4413      	add	r3, r2
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	2b20      	cmp	r3, #32
 8007172:	d1f2      	bne.n	800715a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007176:	2b07      	cmp	r3, #7
 8007178:	d808      	bhi.n	800718c <gen_numname+0x100>
 800717a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007180:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007184:	4413      	add	r3, r2
 8007186:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800718a:	e000      	b.n	800718e <gen_numname+0x102>
 800718c:	2120      	movs	r1, #32
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	627a      	str	r2, [r7, #36]	; 0x24
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	4413      	add	r3, r2
 8007198:	460a      	mov	r2, r1
 800719a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800719c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800719e:	2b07      	cmp	r3, #7
 80071a0:	d9e8      	bls.n	8007174 <gen_numname+0xe8>
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	3730      	adds	r7, #48	; 0x30
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b085      	sub	sp, #20
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80071b4:	2300      	movs	r3, #0
 80071b6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80071b8:	230b      	movs	r3, #11
 80071ba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	b2da      	uxtb	r2, r3
 80071c0:	0852      	lsrs	r2, r2, #1
 80071c2:	01db      	lsls	r3, r3, #7
 80071c4:	4313      	orrs	r3, r2
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	1c59      	adds	r1, r3, #1
 80071cc:	6079      	str	r1, [r7, #4]
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	4413      	add	r3, r2
 80071d2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80071d4:	68bb      	ldr	r3, [r7, #8]
 80071d6:	3b01      	subs	r3, #1
 80071d8:	60bb      	str	r3, [r7, #8]
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d1ed      	bne.n	80071bc <sum_sfn+0x10>
	return sum;
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3714      	adds	r7, #20
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr

080071ee <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80071ee:	b580      	push	{r7, lr}
 80071f0:	b086      	sub	sp, #24
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
 80071f6:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80071f8:	2304      	movs	r3, #4
 80071fa:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8007202:	23ff      	movs	r3, #255	; 0xff
 8007204:	757b      	strb	r3, [r7, #21]
 8007206:	23ff      	movs	r3, #255	; 0xff
 8007208:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800720a:	e081      	b.n	8007310 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	69db      	ldr	r3, [r3, #28]
 8007210:	4619      	mov	r1, r3
 8007212:	6938      	ldr	r0, [r7, #16]
 8007214:	f7ff f8b8 	bl	8006388 <move_window>
 8007218:	4603      	mov	r3, r0
 800721a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800721c:	7dfb      	ldrb	r3, [r7, #23]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d17c      	bne.n	800731c <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a1b      	ldr	r3, [r3, #32]
 8007226:	781b      	ldrb	r3, [r3, #0]
 8007228:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800722a:	7dbb      	ldrb	r3, [r7, #22]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d102      	bne.n	8007236 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007230:	2304      	movs	r3, #4
 8007232:	75fb      	strb	r3, [r7, #23]
 8007234:	e077      	b.n	8007326 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6a1b      	ldr	r3, [r3, #32]
 800723a:	330b      	adds	r3, #11
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007242:	73fb      	strb	r3, [r7, #15]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	7bfa      	ldrb	r2, [r7, #15]
 8007248:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800724a:	7dbb      	ldrb	r3, [r7, #22]
 800724c:	2be5      	cmp	r3, #229	; 0xe5
 800724e:	d00e      	beq.n	800726e <dir_read+0x80>
 8007250:	7dbb      	ldrb	r3, [r7, #22]
 8007252:	2b2e      	cmp	r3, #46	; 0x2e
 8007254:	d00b      	beq.n	800726e <dir_read+0x80>
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	f023 0320 	bic.w	r3, r3, #32
 800725c:	2b08      	cmp	r3, #8
 800725e:	bf0c      	ite	eq
 8007260:	2301      	moveq	r3, #1
 8007262:	2300      	movne	r3, #0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	461a      	mov	r2, r3
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	4293      	cmp	r3, r2
 800726c:	d002      	beq.n	8007274 <dir_read+0x86>
				ord = 0xFF;
 800726e:	23ff      	movs	r3, #255	; 0xff
 8007270:	757b      	strb	r3, [r7, #21]
 8007272:	e044      	b.n	80072fe <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007274:	7bfb      	ldrb	r3, [r7, #15]
 8007276:	2b0f      	cmp	r3, #15
 8007278:	d12f      	bne.n	80072da <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800727a:	7dbb      	ldrb	r3, [r7, #22]
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d00d      	beq.n	80072a0 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	7b5b      	ldrb	r3, [r3, #13]
 800728a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800728c:	7dbb      	ldrb	r3, [r7, #22]
 800728e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007292:	75bb      	strb	r3, [r7, #22]
 8007294:	7dbb      	ldrb	r3, [r7, #22]
 8007296:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	695a      	ldr	r2, [r3, #20]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80072a0:	7dba      	ldrb	r2, [r7, #22]
 80072a2:	7d7b      	ldrb	r3, [r7, #21]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d115      	bne.n	80072d4 <dir_read+0xe6>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	330d      	adds	r3, #13
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	7d3a      	ldrb	r2, [r7, #20]
 80072b2:	429a      	cmp	r2, r3
 80072b4:	d10e      	bne.n	80072d4 <dir_read+0xe6>
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	4619      	mov	r1, r3
 80072c0:	4610      	mov	r0, r2
 80072c2:	f7ff fe17 	bl	8006ef4 <pick_lfn>
 80072c6:	4603      	mov	r3, r0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <dir_read+0xe6>
 80072cc:	7d7b      	ldrb	r3, [r7, #21]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	e000      	b.n	80072d6 <dir_read+0xe8>
 80072d4:	23ff      	movs	r3, #255	; 0xff
 80072d6:	757b      	strb	r3, [r7, #21]
 80072d8:	e011      	b.n	80072fe <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80072da:	7d7b      	ldrb	r3, [r7, #21]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d109      	bne.n	80072f4 <dir_read+0x106>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f7ff ff61 	bl	80071ac <sum_sfn>
 80072ea:	4603      	mov	r3, r0
 80072ec:	461a      	mov	r2, r3
 80072ee:	7d3b      	ldrb	r3, [r7, #20]
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d015      	beq.n	8007320 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f04f 32ff 	mov.w	r2, #4294967295
 80072fa:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80072fc:	e010      	b.n	8007320 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80072fe:	2100      	movs	r1, #0
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff fc3c 	bl	8006b7e <dir_next>
 8007306:	4603      	mov	r3, r0
 8007308:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d109      	bne.n	8007324 <dir_read+0x136>
	while (dp->sect) {
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	69db      	ldr	r3, [r3, #28]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f47f af79 	bne.w	800720c <dir_read+0x1e>
 800731a:	e004      	b.n	8007326 <dir_read+0x138>
		if (res != FR_OK) break;
 800731c:	bf00      	nop
 800731e:	e002      	b.n	8007326 <dir_read+0x138>
					break;
 8007320:	bf00      	nop
 8007322:	e000      	b.n	8007326 <dir_read+0x138>
		if (res != FR_OK) break;
 8007324:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007326:	7dfb      	ldrb	r3, [r7, #23]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <dir_read+0x144>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	61da      	str	r2, [r3, #28]
	return res;
 8007332:	7dfb      	ldrb	r3, [r7, #23]
}
 8007334:	4618      	mov	r0, r3
 8007336:	3718      	adds	r7, #24
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b086      	sub	sp, #24
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800734a:	2100      	movs	r1, #0
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7ff fb9b 	bl	8006a88 <dir_sdi>
 8007352:	4603      	mov	r3, r0
 8007354:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007356:	7dfb      	ldrb	r3, [r7, #23]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <dir_find+0x24>
 800735c:	7dfb      	ldrb	r3, [r7, #23]
 800735e:	e0a9      	b.n	80074b4 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007360:	23ff      	movs	r3, #255	; 0xff
 8007362:	753b      	strb	r3, [r7, #20]
 8007364:	7d3b      	ldrb	r3, [r7, #20]
 8007366:	757b      	strb	r3, [r7, #21]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f04f 32ff 	mov.w	r2, #4294967295
 800736e:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	69db      	ldr	r3, [r3, #28]
 8007374:	4619      	mov	r1, r3
 8007376:	6938      	ldr	r0, [r7, #16]
 8007378:	f7ff f806 	bl	8006388 <move_window>
 800737c:	4603      	mov	r3, r0
 800737e:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007380:	7dfb      	ldrb	r3, [r7, #23]
 8007382:	2b00      	cmp	r3, #0
 8007384:	f040 8090 	bne.w	80074a8 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6a1b      	ldr	r3, [r3, #32]
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007390:	7dbb      	ldrb	r3, [r7, #22]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d102      	bne.n	800739c <dir_find+0x60>
 8007396:	2304      	movs	r3, #4
 8007398:	75fb      	strb	r3, [r7, #23]
 800739a:	e08a      	b.n	80074b2 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6a1b      	ldr	r3, [r3, #32]
 80073a0:	330b      	adds	r3, #11
 80073a2:	781b      	ldrb	r3, [r3, #0]
 80073a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80073a8:	73fb      	strb	r3, [r7, #15]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	7bfa      	ldrb	r2, [r7, #15]
 80073ae:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80073b0:	7dbb      	ldrb	r3, [r7, #22]
 80073b2:	2be5      	cmp	r3, #229	; 0xe5
 80073b4:	d007      	beq.n	80073c6 <dir_find+0x8a>
 80073b6:	7bfb      	ldrb	r3, [r7, #15]
 80073b8:	f003 0308 	and.w	r3, r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d009      	beq.n	80073d4 <dir_find+0x98>
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b0f      	cmp	r3, #15
 80073c4:	d006      	beq.n	80073d4 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80073c6:	23ff      	movs	r3, #255	; 0xff
 80073c8:	757b      	strb	r3, [r7, #21]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f04f 32ff 	mov.w	r2, #4294967295
 80073d0:	631a      	str	r2, [r3, #48]	; 0x30
 80073d2:	e05e      	b.n	8007492 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80073d4:	7bfb      	ldrb	r3, [r7, #15]
 80073d6:	2b0f      	cmp	r3, #15
 80073d8:	d136      	bne.n	8007448 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80073e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d154      	bne.n	8007492 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80073e8:	7dbb      	ldrb	r3, [r7, #22]
 80073ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d00d      	beq.n	800740e <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6a1b      	ldr	r3, [r3, #32]
 80073f6:	7b5b      	ldrb	r3, [r3, #13]
 80073f8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80073fa:	7dbb      	ldrb	r3, [r7, #22]
 80073fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007400:	75bb      	strb	r3, [r7, #22]
 8007402:	7dbb      	ldrb	r3, [r7, #22]
 8007404:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	695a      	ldr	r2, [r3, #20]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800740e:	7dba      	ldrb	r2, [r7, #22]
 8007410:	7d7b      	ldrb	r3, [r7, #21]
 8007412:	429a      	cmp	r2, r3
 8007414:	d115      	bne.n	8007442 <dir_find+0x106>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	330d      	adds	r3, #13
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	7d3a      	ldrb	r2, [r7, #20]
 8007420:	429a      	cmp	r2, r3
 8007422:	d10e      	bne.n	8007442 <dir_find+0x106>
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	68da      	ldr	r2, [r3, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a1b      	ldr	r3, [r3, #32]
 800742c:	4619      	mov	r1, r3
 800742e:	4610      	mov	r0, r2
 8007430:	f7ff fcf0 	bl	8006e14 <cmp_lfn>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <dir_find+0x106>
 800743a:	7d7b      	ldrb	r3, [r7, #21]
 800743c:	3b01      	subs	r3, #1
 800743e:	b2db      	uxtb	r3, r3
 8007440:	e000      	b.n	8007444 <dir_find+0x108>
 8007442:	23ff      	movs	r3, #255	; 0xff
 8007444:	757b      	strb	r3, [r7, #21]
 8007446:	e024      	b.n	8007492 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007448:	7d7b      	ldrb	r3, [r7, #21]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d109      	bne.n	8007462 <dir_find+0x126>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a1b      	ldr	r3, [r3, #32]
 8007452:	4618      	mov	r0, r3
 8007454:	f7ff feaa 	bl	80071ac <sum_sfn>
 8007458:	4603      	mov	r3, r0
 800745a:	461a      	mov	r2, r3
 800745c:	7d3b      	ldrb	r3, [r7, #20]
 800745e:	4293      	cmp	r3, r2
 8007460:	d024      	beq.n	80074ac <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d10a      	bne.n	8007486 <dir_find+0x14a>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6a18      	ldr	r0, [r3, #32]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3324      	adds	r3, #36	; 0x24
 8007478:	220b      	movs	r2, #11
 800747a:	4619      	mov	r1, r3
 800747c:	f7fe fd92 	bl	8005fa4 <mem_cmp>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d014      	beq.n	80074b0 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007486:	23ff      	movs	r3, #255	; 0xff
 8007488:	757b      	strb	r3, [r7, #21]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f04f 32ff 	mov.w	r2, #4294967295
 8007490:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007492:	2100      	movs	r1, #0
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f7ff fb72 	bl	8006b7e <dir_next>
 800749a:	4603      	mov	r3, r0
 800749c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800749e:	7dfb      	ldrb	r3, [r7, #23]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	f43f af65 	beq.w	8007370 <dir_find+0x34>
 80074a6:	e004      	b.n	80074b2 <dir_find+0x176>
		if (res != FR_OK) break;
 80074a8:	bf00      	nop
 80074aa:	e002      	b.n	80074b2 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80074ac:	bf00      	nop
 80074ae:	e000      	b.n	80074b2 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80074b0:	bf00      	nop

	return res;
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80074b4:	4618      	mov	r0, r3
 80074b6:	3718      	adds	r7, #24
 80074b8:	46bd      	mov	sp, r7
 80074ba:	bd80      	pop	{r7, pc}

080074bc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b08c      	sub	sp, #48	; 0x30
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80074d0:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d001      	beq.n	80074dc <dir_register+0x20>
 80074d8:	2306      	movs	r3, #6
 80074da:	e0e0      	b.n	800769e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80074dc:	2300      	movs	r3, #0
 80074de:	627b      	str	r3, [r7, #36]	; 0x24
 80074e0:	e002      	b.n	80074e8 <dir_register+0x2c>
 80074e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e4:	3301      	adds	r3, #1
 80074e6:	627b      	str	r3, [r7, #36]	; 0x24
 80074e8:	69fb      	ldr	r3, [r7, #28]
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ee:	005b      	lsls	r3, r3, #1
 80074f0:	4413      	add	r3, r2
 80074f2:	881b      	ldrh	r3, [r3, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d1f4      	bne.n	80074e2 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80074fe:	f107 030c 	add.w	r3, r7, #12
 8007502:	220c      	movs	r2, #12
 8007504:	4618      	mov	r0, r3
 8007506:	f7fe fd11 	bl	8005f2c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800750a:	7dfb      	ldrb	r3, [r7, #23]
 800750c:	f003 0301 	and.w	r3, r3, #1
 8007510:	2b00      	cmp	r3, #0
 8007512:	d032      	beq.n	800757a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2240      	movs	r2, #64	; 0x40
 8007518:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800751c:	2301      	movs	r3, #1
 800751e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007520:	e016      	b.n	8007550 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	f107 010c 	add.w	r1, r7, #12
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	f7ff fdab 	bl	800708c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f7ff ff00 	bl	800733c <dir_find>
 800753c:	4603      	mov	r3, r0
 800753e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007542:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	3301      	adds	r3, #1
 800754e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007552:	2b63      	cmp	r3, #99	; 0x63
 8007554:	d9e5      	bls.n	8007522 <dir_register+0x66>
 8007556:	e000      	b.n	800755a <dir_register+0x9e>
			if (res != FR_OK) break;
 8007558:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800755a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755c:	2b64      	cmp	r3, #100	; 0x64
 800755e:	d101      	bne.n	8007564 <dir_register+0xa8>
 8007560:	2307      	movs	r3, #7
 8007562:	e09c      	b.n	800769e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007564:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007568:	2b04      	cmp	r3, #4
 800756a:	d002      	beq.n	8007572 <dir_register+0xb6>
 800756c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007570:	e095      	b.n	800769e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007572:	7dfa      	ldrb	r2, [r7, #23]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800757a:	7dfb      	ldrb	r3, [r7, #23]
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d007      	beq.n	8007594 <dir_register+0xd8>
 8007584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007586:	330c      	adds	r3, #12
 8007588:	4a47      	ldr	r2, [pc, #284]	; (80076a8 <dir_register+0x1ec>)
 800758a:	fba2 2303 	umull	r2, r3, r2, r3
 800758e:	089b      	lsrs	r3, r3, #2
 8007590:	3301      	adds	r3, #1
 8007592:	e000      	b.n	8007596 <dir_register+0xda>
 8007594:	2301      	movs	r3, #1
 8007596:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007598:	6a39      	ldr	r1, [r7, #32]
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	f7ff fbb4 	bl	8006d08 <dir_alloc>
 80075a0:	4603      	mov	r3, r0
 80075a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80075a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d148      	bne.n	8007640 <dir_register+0x184>
 80075ae:	6a3b      	ldr	r3, [r7, #32]
 80075b0:	3b01      	subs	r3, #1
 80075b2:	623b      	str	r3, [r7, #32]
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d042      	beq.n	8007640 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	695a      	ldr	r2, [r3, #20]
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	015b      	lsls	r3, r3, #5
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	4619      	mov	r1, r3
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f7ff fa5e 	bl	8006a88 <dir_sdi>
 80075cc:	4603      	mov	r3, r0
 80075ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80075d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d132      	bne.n	8007640 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	3324      	adds	r3, #36	; 0x24
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff fde4 	bl	80071ac <sum_sfn>
 80075e4:	4603      	mov	r3, r0
 80075e6:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	4619      	mov	r1, r3
 80075ee:	69f8      	ldr	r0, [r7, #28]
 80075f0:	f7fe feca 	bl	8006388 <move_window>
 80075f4:	4603      	mov	r3, r0
 80075f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80075fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d11d      	bne.n	800763e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	68d8      	ldr	r0, [r3, #12]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a19      	ldr	r1, [r3, #32]
 800760a:	6a3b      	ldr	r3, [r7, #32]
 800760c:	b2da      	uxtb	r2, r3
 800760e:	7efb      	ldrb	r3, [r7, #27]
 8007610:	f7ff fcd4 	bl	8006fbc <put_lfn>
				fs->wflag = 1;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	2201      	movs	r2, #1
 8007618:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800761a:	2100      	movs	r1, #0
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f7ff faae 	bl	8006b7e <dir_next>
 8007622:	4603      	mov	r3, r0
 8007624:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007628:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800762c:	2b00      	cmp	r3, #0
 800762e:	d107      	bne.n	8007640 <dir_register+0x184>
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	3b01      	subs	r3, #1
 8007634:	623b      	str	r3, [r7, #32]
 8007636:	6a3b      	ldr	r3, [r7, #32]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1d5      	bne.n	80075e8 <dir_register+0x12c>
 800763c:	e000      	b.n	8007640 <dir_register+0x184>
				if (res != FR_OK) break;
 800763e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007640:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007644:	2b00      	cmp	r3, #0
 8007646:	d128      	bne.n	800769a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	69db      	ldr	r3, [r3, #28]
 800764c:	4619      	mov	r1, r3
 800764e:	69f8      	ldr	r0, [r7, #28]
 8007650:	f7fe fe9a 	bl	8006388 <move_window>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800765a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800765e:	2b00      	cmp	r3, #0
 8007660:	d11b      	bne.n	800769a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	2220      	movs	r2, #32
 8007668:	2100      	movs	r1, #0
 800766a:	4618      	mov	r0, r3
 800766c:	f7fe fc7f 	bl	8005f6e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a18      	ldr	r0, [r3, #32]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3324      	adds	r3, #36	; 0x24
 8007678:	220b      	movs	r2, #11
 800767a:	4619      	mov	r1, r3
 800767c:	f7fe fc56 	bl	8005f2c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	330c      	adds	r3, #12
 800768c:	f002 0218 	and.w	r2, r2, #24
 8007690:	b2d2      	uxtb	r2, r2
 8007692:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	2201      	movs	r2, #1
 8007698:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800769a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3730      	adds	r7, #48	; 0x30
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	4ec4ec4f 	.word	0x4ec4ec4f

080076ac <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b086      	sub	sp, #24
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076c8:	d007      	beq.n	80076da <dir_remove+0x2e>
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ce:	4619      	mov	r1, r3
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f7ff f9d9 	bl	8006a88 <dir_sdi>
 80076d6:	4603      	mov	r3, r0
 80076d8:	e000      	b.n	80076dc <dir_remove+0x30>
 80076da:	2300      	movs	r3, #0
 80076dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80076de:	7dfb      	ldrb	r3, [r7, #23]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d128      	bne.n	8007736 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	69db      	ldr	r3, [r3, #28]
 80076e8:	4619      	mov	r1, r3
 80076ea:	6938      	ldr	r0, [r7, #16]
 80076ec:	f7fe fe4c 	bl	8006388 <move_window>
 80076f0:	4603      	mov	r3, r0
 80076f2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80076f4:	7dfb      	ldrb	r3, [r7, #23]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d115      	bne.n	8007726 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a1b      	ldr	r3, [r3, #32]
 80076fe:	22e5      	movs	r2, #229	; 0xe5
 8007700:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	2201      	movs	r2, #1
 8007706:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	695b      	ldr	r3, [r3, #20]
 800770c:	68fa      	ldr	r2, [r7, #12]
 800770e:	429a      	cmp	r2, r3
 8007710:	d90b      	bls.n	800772a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8007712:	2100      	movs	r1, #0
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f7ff fa32 	bl	8006b7e <dir_next>
 800771a:	4603      	mov	r3, r0
 800771c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d0df      	beq.n	80076e4 <dir_remove+0x38>
 8007724:	e002      	b.n	800772c <dir_remove+0x80>
			if (res != FR_OK) break;
 8007726:	bf00      	nop
 8007728:	e000      	b.n	800772c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800772a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	2b04      	cmp	r3, #4
 8007730:	d101      	bne.n	8007736 <dir_remove+0x8a>
 8007732:	2302      	movs	r3, #2
 8007734:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8007736:	7dfb      	ldrb	r3, [r7, #23]
}
 8007738:	4618      	mov	r0, r3
 800773a:	3718      	adds	r7, #24
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}

08007740 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b088      	sub	sp, #32
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007750:	683b      	ldr	r3, [r7, #0]
 8007752:	2200      	movs	r2, #0
 8007754:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	2b00      	cmp	r3, #0
 800775c:	f000 80c9 	beq.w	80078f2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007768:	d032      	beq.n	80077d0 <get_fileinfo+0x90>
			i = j = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	61bb      	str	r3, [r7, #24]
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007772:	e01b      	b.n	80077ac <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007774:	89fb      	ldrh	r3, [r7, #14]
 8007776:	2100      	movs	r1, #0
 8007778:	4618      	mov	r0, r3
 800777a:	f7f9 fbc1 	bl	8000f00 <ff_convert>
 800777e:	4603      	mov	r3, r0
 8007780:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007782:	89fb      	ldrh	r3, [r7, #14]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d102      	bne.n	800778e <get_fileinfo+0x4e>
 8007788:	2300      	movs	r3, #0
 800778a:	61fb      	str	r3, [r7, #28]
 800778c:	e01a      	b.n	80077c4 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	2bfe      	cmp	r3, #254	; 0xfe
 8007792:	d902      	bls.n	800779a <get_fileinfo+0x5a>
 8007794:	2300      	movs	r3, #0
 8007796:	61fb      	str	r3, [r7, #28]
 8007798:	e014      	b.n	80077c4 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	61fa      	str	r2, [r7, #28]
 80077a0:	89fa      	ldrh	r2, [r7, #14]
 80077a2:	b2d1      	uxtb	r1, r2
 80077a4:	683a      	ldr	r2, [r7, #0]
 80077a6:	4413      	add	r3, r2
 80077a8:	460a      	mov	r2, r1
 80077aa:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	68da      	ldr	r2, [r3, #12]
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	1c59      	adds	r1, r3, #1
 80077b4:	61b9      	str	r1, [r7, #24]
 80077b6:	005b      	lsls	r3, r3, #1
 80077b8:	4413      	add	r3, r2
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	81fb      	strh	r3, [r7, #14]
 80077be:	89fb      	ldrh	r3, [r7, #14]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1d7      	bne.n	8007774 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80077c4:	683a      	ldr	r2, [r7, #0]
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	4413      	add	r3, r2
 80077ca:	3316      	adds	r3, #22
 80077cc:	2200      	movs	r2, #0
 80077ce:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80077d0:	2300      	movs	r3, #0
 80077d2:	61bb      	str	r3, [r7, #24]
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80077d8:	683a      	ldr	r2, [r7, #0]
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	4413      	add	r3, r2
 80077de:	3316      	adds	r3, #22
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80077e4:	e04c      	b.n	8007880 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6a1a      	ldr	r2, [r3, #32]
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	1c59      	adds	r1, r3, #1
 80077ee:	61f9      	str	r1, [r7, #28]
 80077f0:	4413      	add	r3, r2
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80077f6:	7dfb      	ldrb	r3, [r7, #23]
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d100      	bne.n	80077fe <get_fileinfo+0xbe>
 80077fc:	e040      	b.n	8007880 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80077fe:	7dfb      	ldrb	r3, [r7, #23]
 8007800:	2b05      	cmp	r3, #5
 8007802:	d101      	bne.n	8007808 <get_fileinfo+0xc8>
 8007804:	23e5      	movs	r3, #229	; 0xe5
 8007806:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8007808:	69fb      	ldr	r3, [r7, #28]
 800780a:	2b09      	cmp	r3, #9
 800780c:	d10f      	bne.n	800782e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800780e:	89bb      	ldrh	r3, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d105      	bne.n	8007820 <get_fileinfo+0xe0>
 8007814:	683a      	ldr	r2, [r7, #0]
 8007816:	69bb      	ldr	r3, [r7, #24]
 8007818:	4413      	add	r3, r2
 800781a:	3316      	adds	r3, #22
 800781c:	222e      	movs	r2, #46	; 0x2e
 800781e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	1c5a      	adds	r2, r3, #1
 8007824:	61ba      	str	r2, [r7, #24]
 8007826:	683a      	ldr	r2, [r7, #0]
 8007828:	4413      	add	r3, r2
 800782a:	222e      	movs	r2, #46	; 0x2e
 800782c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800782e:	683a      	ldr	r2, [r7, #0]
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	4413      	add	r3, r2
 8007834:	3309      	adds	r3, #9
 8007836:	7dfa      	ldrb	r2, [r7, #23]
 8007838:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800783a:	89bb      	ldrh	r3, [r7, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d11c      	bne.n	800787a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007840:	7dfb      	ldrb	r3, [r7, #23]
 8007842:	2b40      	cmp	r3, #64	; 0x40
 8007844:	d913      	bls.n	800786e <get_fileinfo+0x12e>
 8007846:	7dfb      	ldrb	r3, [r7, #23]
 8007848:	2b5a      	cmp	r3, #90	; 0x5a
 800784a:	d810      	bhi.n	800786e <get_fileinfo+0x12e>
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	330c      	adds	r3, #12
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	461a      	mov	r2, r3
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	2b08      	cmp	r3, #8
 800785a:	d901      	bls.n	8007860 <get_fileinfo+0x120>
 800785c:	2310      	movs	r3, #16
 800785e:	e000      	b.n	8007862 <get_fileinfo+0x122>
 8007860:	2308      	movs	r3, #8
 8007862:	4013      	ands	r3, r2
 8007864:	2b00      	cmp	r3, #0
 8007866:	d002      	beq.n	800786e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	3320      	adds	r3, #32
 800786c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800786e:	683a      	ldr	r2, [r7, #0]
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	4413      	add	r3, r2
 8007874:	3316      	adds	r3, #22
 8007876:	7dfa      	ldrb	r2, [r7, #23]
 8007878:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	3301      	adds	r3, #1
 800787e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	2b0a      	cmp	r3, #10
 8007884:	d9af      	bls.n	80077e6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8007886:	89bb      	ldrh	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10d      	bne.n	80078a8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800788c:	683a      	ldr	r2, [r7, #0]
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	4413      	add	r3, r2
 8007892:	3316      	adds	r3, #22
 8007894:	2200      	movs	r2, #0
 8007896:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	330c      	adds	r3, #12
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d101      	bne.n	80078a8 <get_fileinfo+0x168>
 80078a4:	2300      	movs	r3, #0
 80078a6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80078a8:	683a      	ldr	r2, [r7, #0]
 80078aa:	69bb      	ldr	r3, [r7, #24]
 80078ac:	4413      	add	r3, r2
 80078ae:	3309      	adds	r3, #9
 80078b0:	2200      	movs	r2, #0
 80078b2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	7ada      	ldrb	r2, [r3, #11]
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	6a1b      	ldr	r3, [r3, #32]
 80078c2:	331c      	adds	r3, #28
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe fac7 	bl	8005e58 <ld_dword>
 80078ca:	4602      	mov	r2, r0
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a1b      	ldr	r3, [r3, #32]
 80078d4:	3316      	adds	r3, #22
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fe fabe 	bl	8005e58 <ld_dword>
 80078dc:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	80da      	strh	r2, [r3, #6]
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	0c1b      	lsrs	r3, r3, #16
 80078ea:	b29a      	uxth	r2, r3
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	809a      	strh	r2, [r3, #4]
 80078f0:	e000      	b.n	80078f4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80078f2:	bf00      	nop
}
 80078f4:	3720      	adds	r7, #32
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
	...

080078fc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b08a      	sub	sp, #40	; 0x28
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	613b      	str	r3, [r7, #16]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68db      	ldr	r3, [r3, #12]
 8007912:	60fb      	str	r3, [r7, #12]
 8007914:	2300      	movs	r3, #0
 8007916:	617b      	str	r3, [r7, #20]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	1c5a      	adds	r2, r3, #1
 8007920:	61ba      	str	r2, [r7, #24]
 8007922:	693a      	ldr	r2, [r7, #16]
 8007924:	4413      	add	r3, r2
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800792a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800792c:	2b1f      	cmp	r3, #31
 800792e:	d940      	bls.n	80079b2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007932:	2b2f      	cmp	r3, #47	; 0x2f
 8007934:	d006      	beq.n	8007944 <create_name+0x48>
 8007936:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007938:	2b5c      	cmp	r3, #92	; 0x5c
 800793a:	d110      	bne.n	800795e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800793c:	e002      	b.n	8007944 <create_name+0x48>
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	3301      	adds	r3, #1
 8007942:	61bb      	str	r3, [r7, #24]
 8007944:	693a      	ldr	r2, [r7, #16]
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	4413      	add	r3, r2
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b2f      	cmp	r3, #47	; 0x2f
 800794e:	d0f6      	beq.n	800793e <create_name+0x42>
 8007950:	693a      	ldr	r2, [r7, #16]
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	4413      	add	r3, r2
 8007956:	781b      	ldrb	r3, [r3, #0]
 8007958:	2b5c      	cmp	r3, #92	; 0x5c
 800795a:	d0f0      	beq.n	800793e <create_name+0x42>
			break;
 800795c:	e02a      	b.n	80079b4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2bfe      	cmp	r3, #254	; 0xfe
 8007962:	d901      	bls.n	8007968 <create_name+0x6c>
 8007964:	2306      	movs	r3, #6
 8007966:	e177      	b.n	8007c58 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800796a:	b2db      	uxtb	r3, r3
 800796c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800796e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007970:	2101      	movs	r1, #1
 8007972:	4618      	mov	r0, r3
 8007974:	f7f9 fac4 	bl	8000f00 <ff_convert>
 8007978:	4603      	mov	r3, r0
 800797a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800797c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800797e:	2b00      	cmp	r3, #0
 8007980:	d101      	bne.n	8007986 <create_name+0x8a>
 8007982:	2306      	movs	r3, #6
 8007984:	e168      	b.n	8007c58 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007986:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007988:	2b7f      	cmp	r3, #127	; 0x7f
 800798a:	d809      	bhi.n	80079a0 <create_name+0xa4>
 800798c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800798e:	4619      	mov	r1, r3
 8007990:	48b3      	ldr	r0, [pc, #716]	; (8007c60 <create_name+0x364>)
 8007992:	f7fe fb2e 	bl	8005ff2 <chk_chr>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <create_name+0xa4>
 800799c:	2306      	movs	r3, #6
 800799e:	e15b      	b.n	8007c58 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80079a0:	697b      	ldr	r3, [r7, #20]
 80079a2:	1c5a      	adds	r2, r3, #1
 80079a4:	617a      	str	r2, [r7, #20]
 80079a6:	005b      	lsls	r3, r3, #1
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4413      	add	r3, r2
 80079ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079ae:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80079b0:	e7b4      	b.n	800791c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80079b2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	441a      	add	r2, r3
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80079be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079c0:	2b1f      	cmp	r3, #31
 80079c2:	d801      	bhi.n	80079c8 <create_name+0xcc>
 80079c4:	2304      	movs	r3, #4
 80079c6:	e000      	b.n	80079ca <create_name+0xce>
 80079c8:	2300      	movs	r3, #0
 80079ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079ce:	e011      	b.n	80079f4 <create_name+0xf8>
		w = lfn[di - 1];
 80079d0:	697b      	ldr	r3, [r7, #20]
 80079d2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80079d6:	3b01      	subs	r3, #1
 80079d8:	005b      	lsls	r3, r3, #1
 80079da:	68fa      	ldr	r2, [r7, #12]
 80079dc:	4413      	add	r3, r2
 80079de:	881b      	ldrh	r3, [r3, #0]
 80079e0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80079e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079e4:	2b20      	cmp	r3, #32
 80079e6:	d002      	beq.n	80079ee <create_name+0xf2>
 80079e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079ea:	2b2e      	cmp	r3, #46	; 0x2e
 80079ec:	d106      	bne.n	80079fc <create_name+0x100>
		di--;
 80079ee:	697b      	ldr	r3, [r7, #20]
 80079f0:	3b01      	subs	r3, #1
 80079f2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1ea      	bne.n	80079d0 <create_name+0xd4>
 80079fa:	e000      	b.n	80079fe <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80079fc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	005b      	lsls	r3, r3, #1
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	4413      	add	r3, r2
 8007a06:	2200      	movs	r2, #0
 8007a08:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d101      	bne.n	8007a14 <create_name+0x118>
 8007a10:	2306      	movs	r3, #6
 8007a12:	e121      	b.n	8007c58 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	3324      	adds	r3, #36	; 0x24
 8007a18:	220b      	movs	r2, #11
 8007a1a:	2120      	movs	r1, #32
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f7fe faa6 	bl	8005f6e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007a22:	2300      	movs	r3, #0
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	e002      	b.n	8007a2e <create_name+0x132>
 8007a28:	69bb      	ldr	r3, [r7, #24]
 8007a2a:	3301      	adds	r3, #1
 8007a2c:	61bb      	str	r3, [r7, #24]
 8007a2e:	69bb      	ldr	r3, [r7, #24]
 8007a30:	005b      	lsls	r3, r3, #1
 8007a32:	68fa      	ldr	r2, [r7, #12]
 8007a34:	4413      	add	r3, r2
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	2b20      	cmp	r3, #32
 8007a3a:	d0f5      	beq.n	8007a28 <create_name+0x12c>
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	4413      	add	r3, r2
 8007a44:	881b      	ldrh	r3, [r3, #0]
 8007a46:	2b2e      	cmp	r3, #46	; 0x2e
 8007a48:	d0ee      	beq.n	8007a28 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007a4a:	69bb      	ldr	r3, [r7, #24]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d009      	beq.n	8007a64 <create_name+0x168>
 8007a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a54:	f043 0303 	orr.w	r3, r3, #3
 8007a58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007a5c:	e002      	b.n	8007a64 <create_name+0x168>
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	3b01      	subs	r3, #1
 8007a62:	617b      	str	r3, [r7, #20]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d009      	beq.n	8007a7e <create_name+0x182>
 8007a6a:	697b      	ldr	r3, [r7, #20]
 8007a6c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007a70:	3b01      	subs	r3, #1
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	68fa      	ldr	r2, [r7, #12]
 8007a76:	4413      	add	r3, r2
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	2b2e      	cmp	r3, #46	; 0x2e
 8007a7c:	d1ef      	bne.n	8007a5e <create_name+0x162>

	i = b = 0; ni = 8;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007a84:	2300      	movs	r3, #0
 8007a86:	623b      	str	r3, [r7, #32]
 8007a88:	2308      	movs	r3, #8
 8007a8a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	1c5a      	adds	r2, r3, #1
 8007a90:	61ba      	str	r2, [r7, #24]
 8007a92:	005b      	lsls	r3, r3, #1
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	4413      	add	r3, r2
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007a9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 8090 	beq.w	8007bc4 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007aa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d006      	beq.n	8007ab8 <create_name+0x1bc>
 8007aaa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aac:	2b2e      	cmp	r3, #46	; 0x2e
 8007aae:	d10a      	bne.n	8007ac6 <create_name+0x1ca>
 8007ab0:	69ba      	ldr	r2, [r7, #24]
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d006      	beq.n	8007ac6 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007abc:	f043 0303 	orr.w	r3, r3, #3
 8007ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ac4:	e07d      	b.n	8007bc2 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007ac6:	6a3a      	ldr	r2, [r7, #32]
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d203      	bcs.n	8007ad6 <create_name+0x1da>
 8007ace:	69ba      	ldr	r2, [r7, #24]
 8007ad0:	697b      	ldr	r3, [r7, #20]
 8007ad2:	429a      	cmp	r2, r3
 8007ad4:	d123      	bne.n	8007b1e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	2b0b      	cmp	r3, #11
 8007ada:	d106      	bne.n	8007aea <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ae0:	f043 0303 	orr.w	r3, r3, #3
 8007ae4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007ae8:	e06f      	b.n	8007bca <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	697b      	ldr	r3, [r7, #20]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d005      	beq.n	8007afe <create_name+0x202>
 8007af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007af6:	f043 0303 	orr.w	r3, r3, #3
 8007afa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007afe:	69ba      	ldr	r2, [r7, #24]
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	429a      	cmp	r2, r3
 8007b04:	d860      	bhi.n	8007bc8 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	61bb      	str	r3, [r7, #24]
 8007b0a:	2308      	movs	r3, #8
 8007b0c:	623b      	str	r3, [r7, #32]
 8007b0e:	230b      	movs	r3, #11
 8007b10:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007b12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b1c:	e051      	b.n	8007bc2 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007b1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b20:	2b7f      	cmp	r3, #127	; 0x7f
 8007b22:	d914      	bls.n	8007b4e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007b24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b26:	2100      	movs	r1, #0
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7f9 f9e9 	bl	8000f00 <ff_convert>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007b32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d004      	beq.n	8007b42 <create_name+0x246>
 8007b38:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b3a:	3b80      	subs	r3, #128	; 0x80
 8007b3c:	4a49      	ldr	r2, [pc, #292]	; (8007c64 <create_name+0x368>)
 8007b3e:	5cd3      	ldrb	r3, [r2, r3]
 8007b40:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b46:	f043 0302 	orr.w	r3, r3, #2
 8007b4a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007b4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d007      	beq.n	8007b64 <create_name+0x268>
 8007b54:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b56:	4619      	mov	r1, r3
 8007b58:	4843      	ldr	r0, [pc, #268]	; (8007c68 <create_name+0x36c>)
 8007b5a:	f7fe fa4a 	bl	8005ff2 <chk_chr>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d008      	beq.n	8007b76 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007b64:	235f      	movs	r3, #95	; 0x5f
 8007b66:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b6c:	f043 0303 	orr.w	r3, r3, #3
 8007b70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b74:	e01b      	b.n	8007bae <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007b76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b78:	2b40      	cmp	r3, #64	; 0x40
 8007b7a:	d909      	bls.n	8007b90 <create_name+0x294>
 8007b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b7e:	2b5a      	cmp	r3, #90	; 0x5a
 8007b80:	d806      	bhi.n	8007b90 <create_name+0x294>
					b |= 2;
 8007b82:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b86:	f043 0302 	orr.w	r3, r3, #2
 8007b8a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b8e:	e00e      	b.n	8007bae <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007b90:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b92:	2b60      	cmp	r3, #96	; 0x60
 8007b94:	d90b      	bls.n	8007bae <create_name+0x2b2>
 8007b96:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b98:	2b7a      	cmp	r3, #122	; 0x7a
 8007b9a:	d808      	bhi.n	8007bae <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007b9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ba0:	f043 0301 	orr.w	r3, r3, #1
 8007ba4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007ba8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007baa:	3b20      	subs	r3, #32
 8007bac:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007bae:	6a3b      	ldr	r3, [r7, #32]
 8007bb0:	1c5a      	adds	r2, r3, #1
 8007bb2:	623a      	str	r2, [r7, #32]
 8007bb4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007bb6:	b2d1      	uxtb	r1, r2
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	4413      	add	r3, r2
 8007bbc:	460a      	mov	r2, r1
 8007bbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007bc2:	e763      	b.n	8007a8c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007bc4:	bf00      	nop
 8007bc6:	e000      	b.n	8007bca <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007bc8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007bd0:	2be5      	cmp	r3, #229	; 0xe5
 8007bd2:	d103      	bne.n	8007bdc <create_name+0x2e0>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2205      	movs	r2, #5
 8007bd8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007bdc:	69fb      	ldr	r3, [r7, #28]
 8007bde:	2b08      	cmp	r3, #8
 8007be0:	d104      	bne.n	8007bec <create_name+0x2f0>
 8007be2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007be6:	009b      	lsls	r3, r3, #2
 8007be8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007bec:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bf0:	f003 030c 	and.w	r3, r3, #12
 8007bf4:	2b0c      	cmp	r3, #12
 8007bf6:	d005      	beq.n	8007c04 <create_name+0x308>
 8007bf8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bfc:	f003 0303 	and.w	r3, r3, #3
 8007c00:	2b03      	cmp	r3, #3
 8007c02:	d105      	bne.n	8007c10 <create_name+0x314>
 8007c04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c08:	f043 0302 	orr.w	r3, r3, #2
 8007c0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007c10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c14:	f003 0302 	and.w	r3, r3, #2
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d117      	bne.n	8007c4c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007c1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c20:	f003 0303 	and.w	r3, r3, #3
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d105      	bne.n	8007c34 <create_name+0x338>
 8007c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c2c:	f043 0310 	orr.w	r3, r3, #16
 8007c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007c34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007c38:	f003 030c 	and.w	r3, r3, #12
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d105      	bne.n	8007c4c <create_name+0x350>
 8007c40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c44:	f043 0308 	orr.w	r3, r3, #8
 8007c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007c52:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007c56:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3728      	adds	r7, #40	; 0x28
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	0800c9a8 	.word	0x0800c9a8
 8007c64:	08013d8c 	.word	0x08013d8c
 8007c68:	0800c9b4 	.word	0x0800c9b4

08007c6c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007c7a:	693b      	ldr	r3, [r7, #16]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007c80:	e002      	b.n	8007c88 <follow_path+0x1c>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	3301      	adds	r3, #1
 8007c86:	603b      	str	r3, [r7, #0]
 8007c88:	683b      	ldr	r3, [r7, #0]
 8007c8a:	781b      	ldrb	r3, [r3, #0]
 8007c8c:	2b2f      	cmp	r3, #47	; 0x2f
 8007c8e:	d0f8      	beq.n	8007c82 <follow_path+0x16>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	2b5c      	cmp	r3, #92	; 0x5c
 8007c96:	d0f4      	beq.n	8007c82 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007c9e:	683b      	ldr	r3, [r7, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	2b1f      	cmp	r3, #31
 8007ca4:	d80a      	bhi.n	8007cbc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2280      	movs	r2, #128	; 0x80
 8007caa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007cae:	2100      	movs	r1, #0
 8007cb0:	6878      	ldr	r0, [r7, #4]
 8007cb2:	f7fe fee9 	bl	8006a88 <dir_sdi>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	75fb      	strb	r3, [r7, #23]
 8007cba:	e043      	b.n	8007d44 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007cbc:	463b      	mov	r3, r7
 8007cbe:	4619      	mov	r1, r3
 8007cc0:	6878      	ldr	r0, [r7, #4]
 8007cc2:	f7ff fe1b 	bl	80078fc <create_name>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d134      	bne.n	8007d3a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	f7ff fb33 	bl	800733c <dir_find>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007ce0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007ce2:	7dfb      	ldrb	r3, [r7, #23]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d00a      	beq.n	8007cfe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007ce8:	7dfb      	ldrb	r3, [r7, #23]
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	d127      	bne.n	8007d3e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007cee:	7afb      	ldrb	r3, [r7, #11]
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d122      	bne.n	8007d3e <follow_path+0xd2>
 8007cf8:	2305      	movs	r3, #5
 8007cfa:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007cfc:	e01f      	b.n	8007d3e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007cfe:	7afb      	ldrb	r3, [r7, #11]
 8007d00:	f003 0304 	and.w	r3, r3, #4
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d11c      	bne.n	8007d42 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	799b      	ldrb	r3, [r3, #6]
 8007d0c:	f003 0310 	and.w	r3, r3, #16
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d102      	bne.n	8007d1a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007d14:	2305      	movs	r3, #5
 8007d16:	75fb      	strb	r3, [r7, #23]
 8007d18:	e014      	b.n	8007d44 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	695b      	ldr	r3, [r3, #20]
 8007d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d28:	4413      	add	r3, r2
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f7ff f832 	bl	8006d96 <ld_clust>
 8007d32:	4602      	mov	r2, r0
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007d38:	e7c0      	b.n	8007cbc <follow_path+0x50>
			if (res != FR_OK) break;
 8007d3a:	bf00      	nop
 8007d3c:	e002      	b.n	8007d44 <follow_path+0xd8>
				break;
 8007d3e:	bf00      	nop
 8007d40:	e000      	b.n	8007d44 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007d42:	bf00      	nop
			}
		}
	}

	return res;
 8007d44:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3718      	adds	r7, #24
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}

08007d4e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b087      	sub	sp, #28
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007d56:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d031      	beq.n	8007dc8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	e002      	b.n	8007d72 <get_ldnumber+0x24>
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	3301      	adds	r3, #1
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	781b      	ldrb	r3, [r3, #0]
 8007d76:	2b1f      	cmp	r3, #31
 8007d78:	d903      	bls.n	8007d82 <get_ldnumber+0x34>
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2b3a      	cmp	r3, #58	; 0x3a
 8007d80:	d1f4      	bne.n	8007d6c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007d82:	697b      	ldr	r3, [r7, #20]
 8007d84:	781b      	ldrb	r3, [r3, #0]
 8007d86:	2b3a      	cmp	r3, #58	; 0x3a
 8007d88:	d11c      	bne.n	8007dc4 <get_ldnumber+0x76>
			tp = *path;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	1c5a      	adds	r2, r3, #1
 8007d94:	60fa      	str	r2, [r7, #12]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	3b30      	subs	r3, #48	; 0x30
 8007d9a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007d9c:	68bb      	ldr	r3, [r7, #8]
 8007d9e:	2b09      	cmp	r3, #9
 8007da0:	d80e      	bhi.n	8007dc0 <get_ldnumber+0x72>
 8007da2:	68fa      	ldr	r2, [r7, #12]
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d10a      	bne.n	8007dc0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d107      	bne.n	8007dc0 <get_ldnumber+0x72>
					vol = (int)i;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	3301      	adds	r3, #1
 8007db8:	617b      	str	r3, [r7, #20]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	697a      	ldr	r2, [r7, #20]
 8007dbe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	e002      	b.n	8007dca <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007dc8:	693b      	ldr	r3, [r7, #16]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	371c      	adds	r7, #28
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd4:	4770      	bx	lr
	...

08007dd8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	70da      	strb	r2, [r3, #3]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f04f 32ff 	mov.w	r2, #4294967295
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7fe fac8 	bl	8006388 <move_window>
 8007df8:	4603      	mov	r3, r0
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d001      	beq.n	8007e02 <check_fs+0x2a>
 8007dfe:	2304      	movs	r3, #4
 8007e00:	e038      	b.n	8007e74 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	3334      	adds	r3, #52	; 0x34
 8007e06:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe f80c 	bl	8005e28 <ld_word>
 8007e10:	4603      	mov	r3, r0
 8007e12:	461a      	mov	r2, r3
 8007e14:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d001      	beq.n	8007e20 <check_fs+0x48>
 8007e1c:	2303      	movs	r3, #3
 8007e1e:	e029      	b.n	8007e74 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e26:	2be9      	cmp	r3, #233	; 0xe9
 8007e28:	d009      	beq.n	8007e3e <check_fs+0x66>
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007e30:	2beb      	cmp	r3, #235	; 0xeb
 8007e32:	d11e      	bne.n	8007e72 <check_fs+0x9a>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007e3a:	2b90      	cmp	r3, #144	; 0x90
 8007e3c:	d119      	bne.n	8007e72 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	3334      	adds	r3, #52	; 0x34
 8007e42:	3336      	adds	r3, #54	; 0x36
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7fe f807 	bl	8005e58 <ld_dword>
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e50:	4a0a      	ldr	r2, [pc, #40]	; (8007e7c <check_fs+0xa4>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d101      	bne.n	8007e5a <check_fs+0x82>
 8007e56:	2300      	movs	r3, #0
 8007e58:	e00c      	b.n	8007e74 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	3334      	adds	r3, #52	; 0x34
 8007e5e:	3352      	adds	r3, #82	; 0x52
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7fd fff9 	bl	8005e58 <ld_dword>
 8007e66:	4603      	mov	r3, r0
 8007e68:	4a05      	ldr	r2, [pc, #20]	; (8007e80 <check_fs+0xa8>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d101      	bne.n	8007e72 <check_fs+0x9a>
 8007e6e:	2300      	movs	r3, #0
 8007e70:	e000      	b.n	8007e74 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007e72:	2302      	movs	r3, #2
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	00544146 	.word	0x00544146
 8007e80:	33544146 	.word	0x33544146

08007e84 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b096      	sub	sp, #88	; 0x58
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2200      	movs	r2, #0
 8007e96:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f7ff ff58 	bl	8007d4e <get_ldnumber>
 8007e9e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	da01      	bge.n	8007eaa <find_volume+0x26>
 8007ea6:	230b      	movs	r3, #11
 8007ea8:	e22e      	b.n	8008308 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007eaa:	4aa8      	ldr	r2, [pc, #672]	; (800814c <find_volume+0x2c8>)
 8007eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d101      	bne.n	8007ebe <find_volume+0x3a>
 8007eba:	230c      	movs	r3, #12
 8007ebc:	e224      	b.n	8008308 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007ec2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007ec4:	79fb      	ldrb	r3, [r7, #7]
 8007ec6:	f023 0301 	bic.w	r3, r3, #1
 8007eca:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d01a      	beq.n	8007f0a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed6:	785b      	ldrb	r3, [r3, #1]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f7fd ff07 	bl	8005cec <disk_status>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ee4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ee8:	f003 0301 	and.w	r3, r3, #1
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10c      	bne.n	8007f0a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007ef0:	79fb      	ldrb	r3, [r7, #7]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d007      	beq.n	8007f06 <find_volume+0x82>
 8007ef6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d001      	beq.n	8007f06 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007f02:	230a      	movs	r3, #10
 8007f04:	e200      	b.n	8008308 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007f06:	2300      	movs	r3, #0
 8007f08:	e1fe      	b.n	8008308 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007f0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f12:	b2da      	uxtb	r2, r3
 8007f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f16:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1a:	785b      	ldrb	r3, [r3, #1]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fd feff 	bl	8005d20 <disk_initialize>
 8007f22:	4603      	mov	r3, r0
 8007f24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007f28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f2c:	f003 0301 	and.w	r3, r3, #1
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d001      	beq.n	8007f38 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007f34:	2303      	movs	r3, #3
 8007f36:	e1e7      	b.n	8008308 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007f38:	79fb      	ldrb	r3, [r7, #7]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d007      	beq.n	8007f4e <find_volume+0xca>
 8007f3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007f42:	f003 0304 	and.w	r3, r3, #4
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d001      	beq.n	8007f4e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007f4a:	230a      	movs	r3, #10
 8007f4c:	e1dc      	b.n	8008308 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007f52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f54:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f56:	f7ff ff3f 	bl	8007dd8 <check_fs>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007f60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d14b      	bne.n	8008000 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007f68:	2300      	movs	r3, #0
 8007f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8007f6c:	e01f      	b.n	8007fae <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f76:	011b      	lsls	r3, r3, #4
 8007f78:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007f7c:	4413      	add	r3, r2
 8007f7e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f82:	3304      	adds	r3, #4
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d006      	beq.n	8007f98 <find_volume+0x114>
 8007f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8c:	3308      	adds	r3, #8
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f7fd ff62 	bl	8005e58 <ld_dword>
 8007f94:	4602      	mov	r2, r0
 8007f96:	e000      	b.n	8007f9a <find_volume+0x116>
 8007f98:	2200      	movs	r2, #0
 8007f9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007fa2:	440b      	add	r3, r1
 8007fa4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007faa:	3301      	adds	r3, #1
 8007fac:	643b      	str	r3, [r7, #64]	; 0x40
 8007fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d9dc      	bls.n	8007f6e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007fb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d002      	beq.n	8007fc4 <find_volume+0x140>
 8007fbe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc0:	3b01      	subs	r3, #1
 8007fc2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fc6:	009b      	lsls	r3, r3, #2
 8007fc8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007fcc:	4413      	add	r3, r2
 8007fce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007fd2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007fd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d005      	beq.n	8007fe6 <find_volume+0x162>
 8007fda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007fdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007fde:	f7ff fefb 	bl	8007dd8 <check_fs>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	e000      	b.n	8007fe8 <find_volume+0x164>
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007fec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ff0:	2b01      	cmp	r3, #1
 8007ff2:	d905      	bls.n	8008000 <find_volume+0x17c>
 8007ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	643b      	str	r3, [r7, #64]	; 0x40
 8007ffa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ffc:	2b03      	cmp	r3, #3
 8007ffe:	d9e1      	bls.n	8007fc4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8008000:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008004:	2b04      	cmp	r3, #4
 8008006:	d101      	bne.n	800800c <find_volume+0x188>
 8008008:	2301      	movs	r3, #1
 800800a:	e17d      	b.n	8008308 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800800c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008010:	2b01      	cmp	r3, #1
 8008012:	d901      	bls.n	8008018 <find_volume+0x194>
 8008014:	230d      	movs	r3, #13
 8008016:	e177      	b.n	8008308 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801a:	3334      	adds	r3, #52	; 0x34
 800801c:	330b      	adds	r3, #11
 800801e:	4618      	mov	r0, r3
 8008020:	f7fd ff02 	bl	8005e28 <ld_word>
 8008024:	4603      	mov	r3, r0
 8008026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800802a:	d001      	beq.n	8008030 <find_volume+0x1ac>
 800802c:	230d      	movs	r3, #13
 800802e:	e16b      	b.n	8008308 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008032:	3334      	adds	r3, #52	; 0x34
 8008034:	3316      	adds	r3, #22
 8008036:	4618      	mov	r0, r3
 8008038:	f7fd fef6 	bl	8005e28 <ld_word>
 800803c:	4603      	mov	r3, r0
 800803e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008042:	2b00      	cmp	r3, #0
 8008044:	d106      	bne.n	8008054 <find_volume+0x1d0>
 8008046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008048:	3334      	adds	r3, #52	; 0x34
 800804a:	3324      	adds	r3, #36	; 0x24
 800804c:	4618      	mov	r0, r3
 800804e:	f7fd ff03 	bl	8005e58 <ld_dword>
 8008052:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008058:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800805a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008062:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	789b      	ldrb	r3, [r3, #2]
 8008068:	2b01      	cmp	r3, #1
 800806a:	d005      	beq.n	8008078 <find_volume+0x1f4>
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	789b      	ldrb	r3, [r3, #2]
 8008070:	2b02      	cmp	r3, #2
 8008072:	d001      	beq.n	8008078 <find_volume+0x1f4>
 8008074:	230d      	movs	r3, #13
 8008076:	e147      	b.n	8008308 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	789b      	ldrb	r3, [r3, #2]
 800807c:	461a      	mov	r2, r3
 800807e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008080:	fb02 f303 	mul.w	r3, r2, r3
 8008084:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008088:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800808c:	b29a      	uxth	r2, r3
 800808e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008090:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008094:	895b      	ldrh	r3, [r3, #10]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d008      	beq.n	80080ac <find_volume+0x228>
 800809a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800809c:	895b      	ldrh	r3, [r3, #10]
 800809e:	461a      	mov	r2, r3
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	895b      	ldrh	r3, [r3, #10]
 80080a4:	3b01      	subs	r3, #1
 80080a6:	4013      	ands	r3, r2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <find_volume+0x22c>
 80080ac:	230d      	movs	r3, #13
 80080ae:	e12b      	b.n	8008308 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	3334      	adds	r3, #52	; 0x34
 80080b4:	3311      	adds	r3, #17
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fd feb6 	bl	8005e28 <ld_word>
 80080bc:	4603      	mov	r3, r0
 80080be:	461a      	mov	r2, r3
 80080c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80080c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c6:	891b      	ldrh	r3, [r3, #8]
 80080c8:	f003 030f 	and.w	r3, r3, #15
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d001      	beq.n	80080d6 <find_volume+0x252>
 80080d2:	230d      	movs	r3, #13
 80080d4:	e118      	b.n	8008308 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80080d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d8:	3334      	adds	r3, #52	; 0x34
 80080da:	3313      	adds	r3, #19
 80080dc:	4618      	mov	r0, r3
 80080de:	f7fd fea3 	bl	8005e28 <ld_word>
 80080e2:	4603      	mov	r3, r0
 80080e4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80080e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d106      	bne.n	80080fa <find_volume+0x276>
 80080ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ee:	3334      	adds	r3, #52	; 0x34
 80080f0:	3320      	adds	r3, #32
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7fd feb0 	bl	8005e58 <ld_dword>
 80080f8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	3334      	adds	r3, #52	; 0x34
 80080fe:	330e      	adds	r3, #14
 8008100:	4618      	mov	r0, r3
 8008102:	f7fd fe91 	bl	8005e28 <ld_word>
 8008106:	4603      	mov	r3, r0
 8008108:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800810a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800810c:	2b00      	cmp	r3, #0
 800810e:	d101      	bne.n	8008114 <find_volume+0x290>
 8008110:	230d      	movs	r3, #13
 8008112:	e0f9      	b.n	8008308 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008114:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008116:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008118:	4413      	add	r3, r2
 800811a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800811c:	8912      	ldrh	r2, [r2, #8]
 800811e:	0912      	lsrs	r2, r2, #4
 8008120:	b292      	uxth	r2, r2
 8008122:	4413      	add	r3, r2
 8008124:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008126:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800812a:	429a      	cmp	r2, r3
 800812c:	d201      	bcs.n	8008132 <find_volume+0x2ae>
 800812e:	230d      	movs	r3, #13
 8008130:	e0ea      	b.n	8008308 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008136:	1ad3      	subs	r3, r2, r3
 8008138:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800813a:	8952      	ldrh	r2, [r2, #10]
 800813c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008140:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008144:	2b00      	cmp	r3, #0
 8008146:	d103      	bne.n	8008150 <find_volume+0x2cc>
 8008148:	230d      	movs	r3, #13
 800814a:	e0dd      	b.n	8008308 <find_volume+0x484>
 800814c:	200002dc 	.word	0x200002dc
		fmt = FS_FAT32;
 8008150:	2303      	movs	r3, #3
 8008152:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008158:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800815c:	4293      	cmp	r3, r2
 800815e:	d802      	bhi.n	8008166 <find_volume+0x2e2>
 8008160:	2302      	movs	r3, #2
 8008162:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008168:	f640 72f5 	movw	r2, #4085	; 0xff5
 800816c:	4293      	cmp	r3, r2
 800816e:	d802      	bhi.n	8008176 <find_volume+0x2f2>
 8008170:	2301      	movs	r3, #1
 8008172:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008178:	1c9a      	adds	r2, r3, #2
 800817a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800817e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008180:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008182:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008184:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008188:	441a      	add	r2, r3
 800818a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800818e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008192:	441a      	add	r2, r3
 8008194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008196:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008198:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800819c:	2b03      	cmp	r3, #3
 800819e:	d11e      	bne.n	80081de <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80081a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a2:	3334      	adds	r3, #52	; 0x34
 80081a4:	332a      	adds	r3, #42	; 0x2a
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fd fe3e 	bl	8005e28 <ld_word>
 80081ac:	4603      	mov	r3, r0
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <find_volume+0x332>
 80081b2:	230d      	movs	r3, #13
 80081b4:	e0a8      	b.n	8008308 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80081b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b8:	891b      	ldrh	r3, [r3, #8]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <find_volume+0x33e>
 80081be:	230d      	movs	r3, #13
 80081c0:	e0a2      	b.n	8008308 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	3334      	adds	r3, #52	; 0x34
 80081c6:	332c      	adds	r3, #44	; 0x2c
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7fd fe45 	bl	8005e58 <ld_dword>
 80081ce:	4602      	mov	r2, r0
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80081d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d6:	699b      	ldr	r3, [r3, #24]
 80081d8:	009b      	lsls	r3, r3, #2
 80081da:	647b      	str	r3, [r7, #68]	; 0x44
 80081dc:	e01f      	b.n	800821e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80081de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e0:	891b      	ldrh	r3, [r3, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d101      	bne.n	80081ea <find_volume+0x366>
 80081e6:	230d      	movs	r3, #13
 80081e8:	e08e      	b.n	8008308 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80081ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081f0:	441a      	add	r2, r3
 80081f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80081f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081fa:	2b02      	cmp	r3, #2
 80081fc:	d103      	bne.n	8008206 <find_volume+0x382>
 80081fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008200:	699b      	ldr	r3, [r3, #24]
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	e00a      	b.n	800821c <find_volume+0x398>
 8008206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008208:	699a      	ldr	r2, [r3, #24]
 800820a:	4613      	mov	r3, r2
 800820c:	005b      	lsls	r3, r3, #1
 800820e:	4413      	add	r3, r2
 8008210:	085a      	lsrs	r2, r3, #1
 8008212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008214:	699b      	ldr	r3, [r3, #24]
 8008216:	f003 0301 	and.w	r3, r3, #1
 800821a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800821c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800821e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008220:	69da      	ldr	r2, [r3, #28]
 8008222:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008224:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008228:	0a5b      	lsrs	r3, r3, #9
 800822a:	429a      	cmp	r2, r3
 800822c:	d201      	bcs.n	8008232 <find_volume+0x3ae>
 800822e:	230d      	movs	r3, #13
 8008230:	e06a      	b.n	8008308 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008232:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008234:	f04f 32ff 	mov.w	r2, #4294967295
 8008238:	615a      	str	r2, [r3, #20]
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	695a      	ldr	r2, [r3, #20]
 800823e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008240:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008244:	2280      	movs	r2, #128	; 0x80
 8008246:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008248:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800824c:	2b03      	cmp	r3, #3
 800824e:	d149      	bne.n	80082e4 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008252:	3334      	adds	r3, #52	; 0x34
 8008254:	3330      	adds	r3, #48	; 0x30
 8008256:	4618      	mov	r0, r3
 8008258:	f7fd fde6 	bl	8005e28 <ld_word>
 800825c:	4603      	mov	r3, r0
 800825e:	2b01      	cmp	r3, #1
 8008260:	d140      	bne.n	80082e4 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008264:	3301      	adds	r3, #1
 8008266:	4619      	mov	r1, r3
 8008268:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800826a:	f7fe f88d 	bl	8006388 <move_window>
 800826e:	4603      	mov	r3, r0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d137      	bne.n	80082e4 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008276:	2200      	movs	r2, #0
 8008278:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800827a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827c:	3334      	adds	r3, #52	; 0x34
 800827e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008282:	4618      	mov	r0, r3
 8008284:	f7fd fdd0 	bl	8005e28 <ld_word>
 8008288:	4603      	mov	r3, r0
 800828a:	461a      	mov	r2, r3
 800828c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008290:	429a      	cmp	r2, r3
 8008292:	d127      	bne.n	80082e4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008296:	3334      	adds	r3, #52	; 0x34
 8008298:	4618      	mov	r0, r3
 800829a:	f7fd fddd 	bl	8005e58 <ld_dword>
 800829e:	4603      	mov	r3, r0
 80082a0:	4a1b      	ldr	r2, [pc, #108]	; (8008310 <find_volume+0x48c>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d11e      	bne.n	80082e4 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80082a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082a8:	3334      	adds	r3, #52	; 0x34
 80082aa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80082ae:	4618      	mov	r0, r3
 80082b0:	f7fd fdd2 	bl	8005e58 <ld_dword>
 80082b4:	4603      	mov	r3, r0
 80082b6:	4a17      	ldr	r2, [pc, #92]	; (8008314 <find_volume+0x490>)
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d113      	bne.n	80082e4 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80082bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082be:	3334      	adds	r3, #52	; 0x34
 80082c0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fd fdc7 	bl	8005e58 <ld_dword>
 80082ca:	4602      	mov	r2, r0
 80082cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082ce:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80082d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d2:	3334      	adds	r3, #52	; 0x34
 80082d4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80082d8:	4618      	mov	r0, r3
 80082da:	f7fd fdbd 	bl	8005e58 <ld_dword>
 80082de:	4602      	mov	r2, r0
 80082e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80082e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082e6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80082ea:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80082ec:	4b0a      	ldr	r3, [pc, #40]	; (8008318 <find_volume+0x494>)
 80082ee:	881b      	ldrh	r3, [r3, #0]
 80082f0:	3301      	adds	r3, #1
 80082f2:	b29a      	uxth	r2, r3
 80082f4:	4b08      	ldr	r3, [pc, #32]	; (8008318 <find_volume+0x494>)
 80082f6:	801a      	strh	r2, [r3, #0]
 80082f8:	4b07      	ldr	r3, [pc, #28]	; (8008318 <find_volume+0x494>)
 80082fa:	881a      	ldrh	r2, [r3, #0]
 80082fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082fe:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008300:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008302:	f7fd ffd9 	bl	80062b8 <clear_lock>
#endif
	return FR_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3758      	adds	r7, #88	; 0x58
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	41615252 	.word	0x41615252
 8008314:	61417272 	.word	0x61417272
 8008318:	200002e0 	.word	0x200002e0

0800831c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008326:	2309      	movs	r3, #9
 8008328:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2b00      	cmp	r3, #0
 800832e:	d01c      	beq.n	800836a <validate+0x4e>
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d018      	beq.n	800836a <validate+0x4e>
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	781b      	ldrb	r3, [r3, #0]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d013      	beq.n	800836a <validate+0x4e>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	889a      	ldrh	r2, [r3, #4]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	88db      	ldrh	r3, [r3, #6]
 800834c:	429a      	cmp	r2, r3
 800834e:	d10c      	bne.n	800836a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	785b      	ldrb	r3, [r3, #1]
 8008356:	4618      	mov	r0, r3
 8008358:	f7fd fcc8 	bl	8005cec <disk_status>
 800835c:	4603      	mov	r3, r0
 800835e:	f003 0301 	and.w	r3, r3, #1
 8008362:	2b00      	cmp	r3, #0
 8008364:	d101      	bne.n	800836a <validate+0x4e>
			res = FR_OK;
 8008366:	2300      	movs	r3, #0
 8008368:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800836a:	7bfb      	ldrb	r3, [r7, #15]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d102      	bne.n	8008376 <validate+0x5a>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	e000      	b.n	8008378 <validate+0x5c>
 8008376:	2300      	movs	r3, #0
 8008378:	683a      	ldr	r2, [r7, #0]
 800837a:	6013      	str	r3, [r2, #0]
	return res;
 800837c:	7bfb      	ldrb	r3, [r7, #15]
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
	...

08008388 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b088      	sub	sp, #32
 800838c:	af00      	add	r7, sp, #0
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	4613      	mov	r3, r2
 8008394:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800839a:	f107 0310 	add.w	r3, r7, #16
 800839e:	4618      	mov	r0, r3
 80083a0:	f7ff fcd5 	bl	8007d4e <get_ldnumber>
 80083a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	da01      	bge.n	80083b0 <f_mount+0x28>
 80083ac:	230b      	movs	r3, #11
 80083ae:	e02b      	b.n	8008408 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80083b0:	4a17      	ldr	r2, [pc, #92]	; (8008410 <f_mount+0x88>)
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80083ba:	69bb      	ldr	r3, [r7, #24]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d005      	beq.n	80083cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80083c0:	69b8      	ldr	r0, [r7, #24]
 80083c2:	f7fd ff79 	bl	80062b8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	2200      	movs	r2, #0
 80083ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d002      	beq.n	80083d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2200      	movs	r2, #0
 80083d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80083d8:	68fa      	ldr	r2, [r7, #12]
 80083da:	490d      	ldr	r1, [pc, #52]	; (8008410 <f_mount+0x88>)
 80083dc:	69fb      	ldr	r3, [r7, #28]
 80083de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d002      	beq.n	80083ee <f_mount+0x66>
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d001      	beq.n	80083f2 <f_mount+0x6a>
 80083ee:	2300      	movs	r3, #0
 80083f0:	e00a      	b.n	8008408 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80083f2:	f107 010c 	add.w	r1, r7, #12
 80083f6:	f107 0308 	add.w	r3, r7, #8
 80083fa:	2200      	movs	r2, #0
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7ff fd41 	bl	8007e84 <find_volume>
 8008402:	4603      	mov	r3, r0
 8008404:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008406:	7dfb      	ldrb	r3, [r7, #23]
}
 8008408:	4618      	mov	r0, r3
 800840a:	3720      	adds	r7, #32
 800840c:	46bd      	mov	sp, r7
 800840e:	bd80      	pop	{r7, pc}
 8008410:	200002dc 	.word	0x200002dc

08008414 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800841a:	af00      	add	r7, sp, #0
 800841c:	f107 030c 	add.w	r3, r7, #12
 8008420:	6018      	str	r0, [r3, #0]
 8008422:	f107 0308 	add.w	r3, r7, #8
 8008426:	6019      	str	r1, [r3, #0]
 8008428:	1dfb      	adds	r3, r7, #7
 800842a:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800842c:	f107 030c 	add.w	r3, r7, #12
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d101      	bne.n	800843a <f_open+0x26>
 8008436:	2309      	movs	r3, #9
 8008438:	e231      	b.n	800889e <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800843a:	1dfb      	adds	r3, r7, #7
 800843c:	1dfa      	adds	r2, r7, #7
 800843e:	7812      	ldrb	r2, [r2, #0]
 8008440:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008444:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8008446:	1dfb      	adds	r3, r7, #7
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800844e:	f107 0308 	add.w	r3, r7, #8
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff fd16 	bl	8007e84 <find_volume>
 8008458:	4603      	mov	r3, r0
 800845a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800845e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008462:	2b00      	cmp	r3, #0
 8008464:	f040 8210 	bne.w	8008888 <f_open+0x474>
		dj.obj.fs = fs;
 8008468:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800846c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8008470:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008474:	f107 0214 	add.w	r2, r7, #20
 8008478:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800847a:	f107 0308 	add.w	r3, r7, #8
 800847e:	681a      	ldr	r2, [r3, #0]
 8008480:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008484:	4611      	mov	r1, r2
 8008486:	4618      	mov	r0, r3
 8008488:	f7ff fbf0 	bl	8007c6c <follow_path>
 800848c:	4603      	mov	r3, r0
 800848e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008492:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008496:	2b00      	cmp	r3, #0
 8008498:	d11b      	bne.n	80084d2 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800849a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800849e:	b25b      	sxtb	r3, r3
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	da03      	bge.n	80084ac <f_open+0x98>
				res = FR_INVALID_NAME;
 80084a4:	2306      	movs	r3, #6
 80084a6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80084aa:	e012      	b.n	80084d2 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80084ac:	1dfb      	adds	r3, r7, #7
 80084ae:	781b      	ldrb	r3, [r3, #0]
 80084b0:	f023 0301 	bic.w	r3, r3, #1
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	bf14      	ite	ne
 80084b8:	2301      	movne	r3, #1
 80084ba:	2300      	moveq	r3, #0
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	461a      	mov	r2, r3
 80084c0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80084c4:	4611      	mov	r1, r2
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fd fdae 	bl	8006028 <chk_lock>
 80084cc:	4603      	mov	r3, r0
 80084ce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80084d2:	1dfb      	adds	r3, r7, #7
 80084d4:	781b      	ldrb	r3, [r3, #0]
 80084d6:	f003 031c 	and.w	r3, r3, #28
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 809b 	beq.w	8008616 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 80084e0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d019      	beq.n	800851c <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80084e8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80084ec:	2b04      	cmp	r3, #4
 80084ee:	d10e      	bne.n	800850e <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80084f0:	f7fd fdf6 	bl	80060e0 <enq_lock>
 80084f4:	4603      	mov	r3, r0
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d006      	beq.n	8008508 <f_open+0xf4>
 80084fa:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe ffdc 	bl	80074bc <dir_register>
 8008504:	4603      	mov	r3, r0
 8008506:	e000      	b.n	800850a <f_open+0xf6>
 8008508:	2312      	movs	r3, #18
 800850a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800850e:	1dfb      	adds	r3, r7, #7
 8008510:	1dfa      	adds	r2, r7, #7
 8008512:	7812      	ldrb	r2, [r2, #0]
 8008514:	f042 0208 	orr.w	r2, r2, #8
 8008518:	701a      	strb	r2, [r3, #0]
 800851a:	e012      	b.n	8008542 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800851c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008520:	f003 0311 	and.w	r3, r3, #17
 8008524:	2b00      	cmp	r3, #0
 8008526:	d003      	beq.n	8008530 <f_open+0x11c>
					res = FR_DENIED;
 8008528:	2307      	movs	r3, #7
 800852a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800852e:	e008      	b.n	8008542 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008530:	1dfb      	adds	r3, r7, #7
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	f003 0304 	and.w	r3, r3, #4
 8008538:	2b00      	cmp	r3, #0
 800853a:	d002      	beq.n	8008542 <f_open+0x12e>
 800853c:	2308      	movs	r3, #8
 800853e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008542:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008546:	2b00      	cmp	r3, #0
 8008548:	f040 8082 	bne.w	8008650 <f_open+0x23c>
 800854c:	1dfb      	adds	r3, r7, #7
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	f003 0308 	and.w	r3, r3, #8
 8008554:	2b00      	cmp	r3, #0
 8008556:	d07b      	beq.n	8008650 <f_open+0x23c>
				dw = GET_FATTIME();
 8008558:	f7fd fa4e 	bl	80059f8 <get_fattime>
 800855c:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008560:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008564:	330e      	adds	r3, #14
 8008566:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800856a:	4618      	mov	r0, r3
 800856c:	f7fd fcb2 	bl	8005ed4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008570:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008574:	3316      	adds	r3, #22
 8008576:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800857a:	4618      	mov	r0, r3
 800857c:	f7fd fcaa 	bl	8005ed4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008580:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008584:	330b      	adds	r3, #11
 8008586:	2220      	movs	r2, #32
 8008588:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800858a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800858e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008592:	4611      	mov	r1, r2
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe fbfe 	bl	8006d96 <ld_clust>
 800859a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800859e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80085a2:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80085a6:	2200      	movs	r2, #0
 80085a8:	4618      	mov	r0, r3
 80085aa:	f7fe fc13 	bl	8006dd4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80085ae:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80085b2:	331c      	adds	r3, #28
 80085b4:	2100      	movs	r1, #0
 80085b6:	4618      	mov	r0, r3
 80085b8:	f7fd fc8c 	bl	8005ed4 <st_dword>
					fs->wflag = 1;
 80085bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80085c0:	2201      	movs	r2, #1
 80085c2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80085c4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d041      	beq.n	8008650 <f_open+0x23c>
						dw = fs->winsect;
 80085cc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80085d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085d2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80085d6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80085da:	2200      	movs	r2, #0
 80085dc:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 80085e0:	4618      	mov	r0, r3
 80085e2:	f7fe f920 	bl	8006826 <remove_chain>
 80085e6:	4603      	mov	r3, r0
 80085e8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 80085ec:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d12d      	bne.n	8008650 <f_open+0x23c>
							res = move_window(fs, dw);
 80085f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80085f8:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80085fc:	4618      	mov	r0, r3
 80085fe:	f7fd fec3 	bl	8006388 <move_window>
 8008602:	4603      	mov	r3, r0
 8008604:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008608:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800860c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008610:	3a01      	subs	r2, #1
 8008612:	611a      	str	r2, [r3, #16]
 8008614:	e01c      	b.n	8008650 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008616:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800861a:	2b00      	cmp	r3, #0
 800861c:	d118      	bne.n	8008650 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800861e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008622:	f003 0310 	and.w	r3, r3, #16
 8008626:	2b00      	cmp	r3, #0
 8008628:	d003      	beq.n	8008632 <f_open+0x21e>
					res = FR_NO_FILE;
 800862a:	2304      	movs	r3, #4
 800862c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008630:	e00e      	b.n	8008650 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008632:	1dfb      	adds	r3, r7, #7
 8008634:	781b      	ldrb	r3, [r3, #0]
 8008636:	f003 0302 	and.w	r3, r3, #2
 800863a:	2b00      	cmp	r3, #0
 800863c:	d008      	beq.n	8008650 <f_open+0x23c>
 800863e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008642:	f003 0301 	and.w	r3, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <f_open+0x23c>
						res = FR_DENIED;
 800864a:	2307      	movs	r3, #7
 800864c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8008650:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008654:	2b00      	cmp	r3, #0
 8008656:	d136      	bne.n	80086c6 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008658:	1dfb      	adds	r3, r7, #7
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	f003 0308 	and.w	r3, r3, #8
 8008660:	2b00      	cmp	r3, #0
 8008662:	d005      	beq.n	8008670 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8008664:	1dfb      	adds	r3, r7, #7
 8008666:	1dfa      	adds	r2, r7, #7
 8008668:	7812      	ldrb	r2, [r2, #0]
 800866a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800866e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008670:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008676:	f107 030c 	add.w	r3, r7, #12
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800867e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008682:	f107 030c 	add.w	r3, r7, #12
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800868a:	1dfb      	adds	r3, r7, #7
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	f023 0301 	bic.w	r3, r3, #1
 8008692:	2b00      	cmp	r3, #0
 8008694:	bf14      	ite	ne
 8008696:	2301      	movne	r3, #1
 8008698:	2300      	moveq	r3, #0
 800869a:	b2db      	uxtb	r3, r3
 800869c:	461a      	mov	r2, r3
 800869e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80086a2:	4611      	mov	r1, r2
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fd fd3d 	bl	8006124 <inc_lock>
 80086aa:	4602      	mov	r2, r0
 80086ac:	f107 030c 	add.w	r3, r7, #12
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80086b4:	f107 030c 	add.w	r3, r7, #12
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	691b      	ldr	r3, [r3, #16]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d102      	bne.n	80086c6 <f_open+0x2b2>
 80086c0:	2302      	movs	r3, #2
 80086c2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80086c6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f040 80dc 	bne.w	8008888 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80086d0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80086d4:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80086d8:	4611      	mov	r1, r2
 80086da:	4618      	mov	r0, r3
 80086dc:	f7fe fb5b 	bl	8006d96 <ld_clust>
 80086e0:	4602      	mov	r2, r0
 80086e2:	f107 030c 	add.w	r3, r7, #12
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80086ea:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80086ee:	331c      	adds	r3, #28
 80086f0:	4618      	mov	r0, r3
 80086f2:	f7fd fbb1 	bl	8005e58 <ld_dword>
 80086f6:	4602      	mov	r2, r0
 80086f8:	f107 030c 	add.w	r3, r7, #12
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008700:	f107 030c 	add.w	r3, r7, #12
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	2200      	movs	r2, #0
 8008708:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800870a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800870e:	f107 030c 	add.w	r3, r7, #12
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008716:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800871a:	88da      	ldrh	r2, [r3, #6]
 800871c:	f107 030c 	add.w	r3, r7, #12
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008724:	f107 030c 	add.w	r3, r7, #12
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	1dfa      	adds	r2, r7, #7
 800872c:	7812      	ldrb	r2, [r2, #0]
 800872e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008730:	f107 030c 	add.w	r3, r7, #12
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	2200      	movs	r2, #0
 8008738:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800873a:	f107 030c 	add.w	r3, r7, #12
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2200      	movs	r2, #0
 8008742:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008744:	f107 030c 	add.w	r3, r7, #12
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	2200      	movs	r2, #0
 800874c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800874e:	f107 030c 	add.w	r3, r7, #12
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	3330      	adds	r3, #48	; 0x30
 8008756:	f44f 7200 	mov.w	r2, #512	; 0x200
 800875a:	2100      	movs	r1, #0
 800875c:	4618      	mov	r0, r3
 800875e:	f7fd fc06 	bl	8005f6e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008762:	1dfb      	adds	r3, r7, #7
 8008764:	781b      	ldrb	r3, [r3, #0]
 8008766:	f003 0320 	and.w	r3, r3, #32
 800876a:	2b00      	cmp	r3, #0
 800876c:	f000 808c 	beq.w	8008888 <f_open+0x474>
 8008770:	f107 030c 	add.w	r3, r7, #12
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 8085 	beq.w	8008888 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800877e:	f107 030c 	add.w	r3, r7, #12
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	f107 030c 	add.w	r3, r7, #12
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800878e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008792:	895b      	ldrh	r3, [r3, #10]
 8008794:	025b      	lsls	r3, r3, #9
 8008796:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800879a:	f107 030c 	add.w	r3, r7, #12
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087a6:	f107 030c 	add.w	r3, r7, #12
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68db      	ldr	r3, [r3, #12]
 80087ae:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80087b2:	e01f      	b.n	80087f4 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 80087b4:	f107 030c 	add.w	r3, r7, #12
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80087be:	4618      	mov	r0, r3
 80087c0:	f7fd fe9d 	bl	80064fe <get_fat>
 80087c4:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80087c8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	d802      	bhi.n	80087d6 <f_open+0x3c2>
 80087d0:	2302      	movs	r3, #2
 80087d2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80087d6:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80087da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087de:	d102      	bne.n	80087e6 <f_open+0x3d2>
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80087e6:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80087ea:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80087ee:	1ad3      	subs	r3, r2, r3
 80087f0:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80087f4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d105      	bne.n	8008808 <f_open+0x3f4>
 80087fc:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8008800:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008804:	429a      	cmp	r2, r3
 8008806:	d8d5      	bhi.n	80087b4 <f_open+0x3a0>
				}
				fp->clust = clst;
 8008808:	f107 030c 	add.w	r3, r7, #12
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8008812:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008814:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008818:	2b00      	cmp	r3, #0
 800881a:	d135      	bne.n	8008888 <f_open+0x474>
 800881c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008820:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008824:	2b00      	cmp	r3, #0
 8008826:	d02f      	beq.n	8008888 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008828:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800882c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008830:	4618      	mov	r0, r3
 8008832:	f7fd fe45 	bl	80064c0 <clust2sect>
 8008836:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800883a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800883e:	2b00      	cmp	r3, #0
 8008840:	d103      	bne.n	800884a <f_open+0x436>
						res = FR_INT_ERR;
 8008842:	2302      	movs	r3, #2
 8008844:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008848:	e01e      	b.n	8008888 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800884a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800884e:	0a5a      	lsrs	r2, r3, #9
 8008850:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008854:	441a      	add	r2, r3
 8008856:	f107 030c 	add.w	r3, r7, #12
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800885e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008862:	7858      	ldrb	r0, [r3, #1]
 8008864:	f107 030c 	add.w	r3, r7, #12
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800886e:	f107 030c 	add.w	r3, r7, #12
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6a1a      	ldr	r2, [r3, #32]
 8008876:	2301      	movs	r3, #1
 8008878:	f7fd fa78 	bl	8005d6c <disk_read>
 800887c:	4603      	mov	r3, r0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d002      	beq.n	8008888 <f_open+0x474>
 8008882:	2301      	movs	r3, #1
 8008884:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008888:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800888c:	2b00      	cmp	r3, #0
 800888e:	d004      	beq.n	800889a <f_open+0x486>
 8008890:	f107 030c 	add.w	r3, r7, #12
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2200      	movs	r2, #0
 8008898:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800889a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800889e:	4618      	mov	r0, r3
 80088a0:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b08c      	sub	sp, #48	; 0x30
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	60f8      	str	r0, [r7, #12]
 80088b0:	60b9      	str	r1, [r7, #8]
 80088b2:	607a      	str	r2, [r7, #4]
 80088b4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	2200      	movs	r2, #0
 80088be:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f107 0210 	add.w	r2, r7, #16
 80088c6:	4611      	mov	r1, r2
 80088c8:	4618      	mov	r0, r3
 80088ca:	f7ff fd27 	bl	800831c <validate>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80088d4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d107      	bne.n	80088ec <f_write+0x44>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	7d5b      	ldrb	r3, [r3, #21]
 80088e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80088e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d002      	beq.n	80088f2 <f_write+0x4a>
 80088ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088f0:	e14b      	b.n	8008b8a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	7d1b      	ldrb	r3, [r3, #20]
 80088f6:	f003 0302 	and.w	r3, r3, #2
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <f_write+0x5a>
 80088fe:	2307      	movs	r3, #7
 8008900:	e143      	b.n	8008b8a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	699a      	ldr	r2, [r3, #24]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	441a      	add	r2, r3
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	429a      	cmp	r2, r3
 8008910:	f080 812d 	bcs.w	8008b6e <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	43db      	mvns	r3, r3
 800891a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800891c:	e127      	b.n	8008b6e <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	699b      	ldr	r3, [r3, #24]
 8008922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008926:	2b00      	cmp	r3, #0
 8008928:	f040 80e3 	bne.w	8008af2 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	0a5b      	lsrs	r3, r3, #9
 8008932:	693a      	ldr	r2, [r7, #16]
 8008934:	8952      	ldrh	r2, [r2, #10]
 8008936:	3a01      	subs	r2, #1
 8008938:	4013      	ands	r3, r2
 800893a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800893c:	69bb      	ldr	r3, [r7, #24]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d143      	bne.n	80089ca <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	699b      	ldr	r3, [r3, #24]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d10c      	bne.n	8008964 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	2b00      	cmp	r3, #0
 8008954:	d11a      	bne.n	800898c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2100      	movs	r1, #0
 800895a:	4618      	mov	r0, r3
 800895c:	f7fd ffc8 	bl	80068f0 <create_chain>
 8008960:	62b8      	str	r0, [r7, #40]	; 0x28
 8008962:	e013      	b.n	800898c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	2b00      	cmp	r3, #0
 800896a:	d007      	beq.n	800897c <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	699b      	ldr	r3, [r3, #24]
 8008970:	4619      	mov	r1, r3
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f7fe f854 	bl	8006a20 <clmt_clust>
 8008978:	62b8      	str	r0, [r7, #40]	; 0x28
 800897a:	e007      	b.n	800898c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	69db      	ldr	r3, [r3, #28]
 8008982:	4619      	mov	r1, r3
 8008984:	4610      	mov	r0, r2
 8008986:	f7fd ffb3 	bl	80068f0 <create_chain>
 800898a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800898c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 80f2 	beq.w	8008b78 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	2b01      	cmp	r3, #1
 8008998:	d104      	bne.n	80089a4 <f_write+0xfc>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	2202      	movs	r2, #2
 800899e:	755a      	strb	r2, [r3, #21]
 80089a0:	2302      	movs	r3, #2
 80089a2:	e0f2      	b.n	8008b8a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80089a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089aa:	d104      	bne.n	80089b6 <f_write+0x10e>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2201      	movs	r2, #1
 80089b0:	755a      	strb	r2, [r3, #21]
 80089b2:	2301      	movs	r3, #1
 80089b4:	e0e9      	b.n	8008b8a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089ba:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	689b      	ldr	r3, [r3, #8]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d102      	bne.n	80089ca <f_write+0x122>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80089c8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	7d1b      	ldrb	r3, [r3, #20]
 80089ce:	b25b      	sxtb	r3, r3
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	da18      	bge.n	8008a06 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	7858      	ldrb	r0, [r3, #1]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6a1a      	ldr	r2, [r3, #32]
 80089e2:	2301      	movs	r3, #1
 80089e4:	f7fd f9e2 	bl	8005dac <disk_write>
 80089e8:	4603      	mov	r3, r0
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d004      	beq.n	80089f8 <f_write+0x150>
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2201      	movs	r2, #1
 80089f2:	755a      	strb	r2, [r3, #21]
 80089f4:	2301      	movs	r3, #1
 80089f6:	e0c8      	b.n	8008b8a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	7d1b      	ldrb	r3, [r3, #20]
 80089fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a00:	b2da      	uxtb	r2, r3
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008a06:	693a      	ldr	r2, [r7, #16]
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	4619      	mov	r1, r3
 8008a0e:	4610      	mov	r0, r2
 8008a10:	f7fd fd56 	bl	80064c0 <clust2sect>
 8008a14:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d104      	bne.n	8008a26 <f_write+0x17e>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2202      	movs	r2, #2
 8008a20:	755a      	strb	r2, [r3, #21]
 8008a22:	2302      	movs	r3, #2
 8008a24:	e0b1      	b.n	8008b8a <f_write+0x2e2>
			sect += csect;
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	69bb      	ldr	r3, [r7, #24]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	0a5b      	lsrs	r3, r3, #9
 8008a32:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d03c      	beq.n	8008ab4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008a3a:	69ba      	ldr	r2, [r7, #24]
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	4413      	add	r3, r2
 8008a40:	693a      	ldr	r2, [r7, #16]
 8008a42:	8952      	ldrh	r2, [r2, #10]
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d905      	bls.n	8008a54 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	895b      	ldrh	r3, [r3, #10]
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	69bb      	ldr	r3, [r7, #24]
 8008a50:	1ad3      	subs	r3, r2, r3
 8008a52:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	7858      	ldrb	r0, [r3, #1]
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	697a      	ldr	r2, [r7, #20]
 8008a5c:	69f9      	ldr	r1, [r7, #28]
 8008a5e:	f7fd f9a5 	bl	8005dac <disk_write>
 8008a62:	4603      	mov	r3, r0
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d004      	beq.n	8008a72 <f_write+0x1ca>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	755a      	strb	r2, [r3, #21]
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e08b      	b.n	8008b8a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6a1a      	ldr	r2, [r3, #32]
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	1ad3      	subs	r3, r2, r3
 8008a7a:	6a3a      	ldr	r2, [r7, #32]
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d915      	bls.n	8008aac <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	6a1a      	ldr	r2, [r3, #32]
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	1ad3      	subs	r3, r2, r3
 8008a8e:	025b      	lsls	r3, r3, #9
 8008a90:	69fa      	ldr	r2, [r7, #28]
 8008a92:	4413      	add	r3, r2
 8008a94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a98:	4619      	mov	r1, r3
 8008a9a:	f7fd fa47 	bl	8005f2c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	7d1b      	ldrb	r3, [r3, #20]
 8008aa2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008aa6:	b2da      	uxtb	r2, r3
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008aac:	6a3b      	ldr	r3, [r7, #32]
 8008aae:	025b      	lsls	r3, r3, #9
 8008ab0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008ab2:	e03f      	b.n	8008b34 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6a1b      	ldr	r3, [r3, #32]
 8008ab8:	697a      	ldr	r2, [r7, #20]
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d016      	beq.n	8008aec <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	699a      	ldr	r2, [r3, #24]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d210      	bcs.n	8008aec <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	7858      	ldrb	r0, [r3, #1]
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	697a      	ldr	r2, [r7, #20]
 8008ad8:	f7fd f948 	bl	8005d6c <disk_read>
 8008adc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d004      	beq.n	8008aec <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	2201      	movs	r2, #1
 8008ae6:	755a      	strb	r2, [r3, #21]
 8008ae8:	2301      	movs	r3, #1
 8008aea:	e04e      	b.n	8008b8a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	697a      	ldr	r2, [r7, #20]
 8008af0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008afa:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008afe:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	d901      	bls.n	8008b0c <f_write+0x264>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	699b      	ldr	r3, [r3, #24]
 8008b16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b1a:	4413      	add	r3, r2
 8008b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b1e:	69f9      	ldr	r1, [r7, #28]
 8008b20:	4618      	mov	r0, r3
 8008b22:	f7fd fa03 	bl	8005f2c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	7d1b      	ldrb	r3, [r3, #20]
 8008b2a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008b2e:	b2da      	uxtb	r2, r3
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008b34:	69fa      	ldr	r2, [r7, #28]
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	4413      	add	r3, r2
 8008b3a:	61fb      	str	r3, [r7, #28]
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	699a      	ldr	r2, [r3, #24]
 8008b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b42:	441a      	add	r2, r3
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	619a      	str	r2, [r3, #24]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	68da      	ldr	r2, [r3, #12]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	699b      	ldr	r3, [r3, #24]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	bf38      	it	cc
 8008b54:	461a      	movcc	r2, r3
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	60da      	str	r2, [r3, #12]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b60:	441a      	add	r2, r3
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	601a      	str	r2, [r3, #0]
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6a:	1ad3      	subs	r3, r2, r3
 8008b6c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f47f aed4 	bne.w	800891e <f_write+0x76>
 8008b76:	e000      	b.n	8008b7a <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b78:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	7d1b      	ldrb	r3, [r3, #20]
 8008b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b82:	b2da      	uxtb	r2, r3
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3730      	adds	r7, #48	; 0x30
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b086      	sub	sp, #24
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	f107 0208 	add.w	r2, r7, #8
 8008ba0:	4611      	mov	r1, r2
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	f7ff fbba 	bl	800831c <validate>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008bac:	7dfb      	ldrb	r3, [r7, #23]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d168      	bne.n	8008c84 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	7d1b      	ldrb	r3, [r3, #20]
 8008bb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d062      	beq.n	8008c84 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	7d1b      	ldrb	r3, [r3, #20]
 8008bc2:	b25b      	sxtb	r3, r3
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	da15      	bge.n	8008bf4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008bc8:	68bb      	ldr	r3, [r7, #8]
 8008bca:	7858      	ldrb	r0, [r3, #1]
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6a1a      	ldr	r2, [r3, #32]
 8008bd6:	2301      	movs	r3, #1
 8008bd8:	f7fd f8e8 	bl	8005dac <disk_write>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <f_sync+0x54>
 8008be2:	2301      	movs	r3, #1
 8008be4:	e04f      	b.n	8008c86 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	7d1b      	ldrb	r3, [r3, #20]
 8008bea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008bf4:	f7fc ff00 	bl	80059f8 <get_fattime>
 8008bf8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008bfa:	68ba      	ldr	r2, [r7, #8]
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c00:	4619      	mov	r1, r3
 8008c02:	4610      	mov	r0, r2
 8008c04:	f7fd fbc0 	bl	8006388 <move_window>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008c0c:	7dfb      	ldrb	r3, [r7, #23]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d138      	bne.n	8008c84 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c16:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	330b      	adds	r3, #11
 8008c1c:	781a      	ldrb	r2, [r3, #0]
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	330b      	adds	r3, #11
 8008c22:	f042 0220 	orr.w	r2, r2, #32
 8008c26:	b2d2      	uxtb	r2, r2
 8008c28:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	461a      	mov	r2, r3
 8008c34:	68f9      	ldr	r1, [r7, #12]
 8008c36:	f7fe f8cd 	bl	8006dd4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f103 021c 	add.w	r2, r3, #28
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	68db      	ldr	r3, [r3, #12]
 8008c44:	4619      	mov	r1, r3
 8008c46:	4610      	mov	r0, r2
 8008c48:	f7fd f944 	bl	8005ed4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	3316      	adds	r3, #22
 8008c50:	6939      	ldr	r1, [r7, #16]
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fd f93e 	bl	8005ed4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	3312      	adds	r3, #18
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fd f91d 	bl	8005e9e <st_word>
					fs->wflag = 1;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2201      	movs	r2, #1
 8008c68:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008c6a:	68bb      	ldr	r3, [r7, #8]
 8008c6c:	4618      	mov	r0, r3
 8008c6e:	f7fd fbb9 	bl	80063e4 <sync_fs>
 8008c72:	4603      	mov	r3, r0
 8008c74:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	7d1b      	ldrb	r3, [r3, #20]
 8008c7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c7e:	b2da      	uxtb	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008c84:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c86:	4618      	mov	r0, r3
 8008c88:	3718      	adds	r7, #24
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}

08008c8e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008c8e:	b580      	push	{r7, lr}
 8008c90:	b084      	sub	sp, #16
 8008c92:	af00      	add	r7, sp, #0
 8008c94:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c96:	6878      	ldr	r0, [r7, #4]
 8008c98:	f7ff ff7b 	bl	8008b92 <f_sync>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d118      	bne.n	8008cd8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f107 0208 	add.w	r2, r7, #8
 8008cac:	4611      	mov	r1, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f7ff fb34 	bl	800831c <validate>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008cb8:	7bfb      	ldrb	r3, [r7, #15]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d10c      	bne.n	8008cd8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7fd fabc 	bl	8006240 <dec_lock>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008ccc:	7bfb      	ldrb	r3, [r7, #15]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d102      	bne.n	8008cd8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cda:	4618      	mov	r0, r3
 8008cdc:	3710      	adds	r7, #16
 8008cde:	46bd      	mov	sp, r7
 8008ce0:	bd80      	pop	{r7, pc}

08008ce2 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008ce2:	b580      	push	{r7, lr}
 8008ce4:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	1d3b      	adds	r3, r7, #4
 8008cec:	6018      	str	r0, [r3, #0]
 8008cee:	463b      	mov	r3, r7
 8008cf0:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008cf2:	1d3b      	adds	r3, r7, #4
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d101      	bne.n	8008cfe <f_opendir+0x1c>
 8008cfa:	2309      	movs	r3, #9
 8008cfc:	e08a      	b.n	8008e14 <f_opendir+0x132>

	/* Get logical drive */
	obj = &dp->obj;
 8008cfe:	1d3b      	adds	r3, r7, #4
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 8008d06:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8008d0a:	463b      	mov	r3, r7
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	4618      	mov	r0, r3
 8008d10:	f7ff f8b8 	bl	8007e84 <find_volume>
 8008d14:	4603      	mov	r3, r0
 8008d16:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 8008d1a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d16e      	bne.n	8008e00 <f_opendir+0x11e>
		obj->fs = fs;
 8008d22:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8008d26:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d2a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8008d2c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008d30:	f107 020c 	add.w	r2, r7, #12
 8008d34:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008d36:	463b      	mov	r3, r7
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	1d3b      	adds	r3, r7, #4
 8008d3c:	4611      	mov	r1, r2
 8008d3e:	6818      	ldr	r0, [r3, #0]
 8008d40:	f7fe ff94 	bl	8007c6c <follow_path>
 8008d44:	4603      	mov	r3, r0
 8008d46:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 8008d4a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d14f      	bne.n	8008df2 <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008d52:	1d3b      	adds	r3, r7, #4
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008d5a:	b25b      	sxtb	r3, r3
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	db17      	blt.n	8008d90 <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008d60:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d64:	799b      	ldrb	r3, [r3, #6]
 8008d66:	f003 0310 	and.w	r3, r3, #16
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d00d      	beq.n	8008d8a <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008d6e:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8008d72:	1d3b      	adds	r3, r7, #4
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	4619      	mov	r1, r3
 8008d7a:	4610      	mov	r0, r2
 8008d7c:	f7fe f80b 	bl	8006d96 <ld_clust>
 8008d80:	4602      	mov	r2, r0
 8008d82:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d86:	609a      	str	r2, [r3, #8]
 8008d88:	e002      	b.n	8008d90 <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008d8a:	2305      	movs	r3, #5
 8008d8c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 8008d90:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d12c      	bne.n	8008df2 <f_opendir+0x110>
				obj->id = fs->id;
 8008d98:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008d9c:	88da      	ldrh	r2, [r3, #6]
 8008d9e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008da2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008da4:	1d3b      	adds	r3, r7, #4
 8008da6:	2100      	movs	r1, #0
 8008da8:	6818      	ldr	r0, [r3, #0]
 8008daa:	f7fd fe6d 	bl	8006a88 <dir_sdi>
 8008dae:	4603      	mov	r3, r0
 8008db0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008db4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d11a      	bne.n	8008df2 <f_opendir+0x110>
					if (obj->sclust) {
 8008dbc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d011      	beq.n	8008dea <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008dc6:	1d3b      	adds	r3, r7, #4
 8008dc8:	2100      	movs	r1, #0
 8008dca:	6818      	ldr	r0, [r3, #0]
 8008dcc:	f7fd f9aa 	bl	8006124 <inc_lock>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008dd6:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008dd8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008ddc:	691b      	ldr	r3, [r3, #16]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d107      	bne.n	8008df2 <f_opendir+0x110>
 8008de2:	2312      	movs	r3, #18
 8008de4:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 8008de8:	e003      	b.n	8008df2 <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008dea:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008dee:	2200      	movs	r2, #0
 8008df0:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008df2:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008df6:	2b04      	cmp	r3, #4
 8008df8:	d102      	bne.n	8008e00 <f_opendir+0x11e>
 8008dfa:	2305      	movs	r3, #5
 8008dfc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008e00:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d003      	beq.n	8008e10 <f_opendir+0x12e>
 8008e08:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008e10:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 8008e14:	4618      	mov	r0, r3
 8008e16:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	b084      	sub	sp, #16
 8008e22:	af00      	add	r7, sp, #0
 8008e24:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	f107 0208 	add.w	r2, r7, #8
 8008e2c:	4611      	mov	r1, r2
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f7ff fa74 	bl	800831c <validate>
 8008e34:	4603      	mov	r3, r0
 8008e36:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008e38:	7bfb      	ldrb	r3, [r7, #15]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d110      	bne.n	8008e60 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	691b      	ldr	r3, [r3, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d006      	beq.n	8008e54 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fd f9f8 	bl	8006240 <dec_lock>
 8008e50:	4603      	mov	r3, r0
 8008e52:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8008e54:	7bfb      	ldrb	r3, [r7, #15]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d102      	bne.n	8008e60 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}

08008e6a <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008e6a:	b580      	push	{r7, lr}
 8008e6c:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8008e70:	af00      	add	r7, sp, #0
 8008e72:	1d3b      	adds	r3, r7, #4
 8008e74:	6018      	str	r0, [r3, #0]
 8008e76:	463b      	mov	r3, r7
 8008e78:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008e7a:	1d3b      	adds	r3, r7, #4
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008e82:	4611      	mov	r1, r2
 8008e84:	4618      	mov	r0, r3
 8008e86:	f7ff fa49 	bl	800831c <validate>
 8008e8a:	4603      	mov	r3, r0
 8008e8c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 8008e90:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d139      	bne.n	8008f0c <f_readdir+0xa2>
		if (!fno) {
 8008e98:	463b      	mov	r3, r7
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d108      	bne.n	8008eb2 <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008ea0:	1d3b      	adds	r3, r7, #4
 8008ea2:	2100      	movs	r1, #0
 8008ea4:	6818      	ldr	r0, [r3, #0]
 8008ea6:	f7fd fdef 	bl	8006a88 <dir_sdi>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008eb0:	e02c      	b.n	8008f0c <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 8008eb2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008eb6:	f107 0208 	add.w	r2, r7, #8
 8008eba:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8008ebc:	1d3b      	adds	r3, r7, #4
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	f7fe f994 	bl	80071ee <dir_read>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008ecc:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008ed0:	2b04      	cmp	r3, #4
 8008ed2:	d102      	bne.n	8008eda <f_readdir+0x70>
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8008eda:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d114      	bne.n	8008f0c <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008ee2:	463a      	mov	r2, r7
 8008ee4:	1d3b      	adds	r3, r7, #4
 8008ee6:	6811      	ldr	r1, [r2, #0]
 8008ee8:	6818      	ldr	r0, [r3, #0]
 8008eea:	f7fe fc29 	bl	8007740 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008eee:	1d3b      	adds	r3, r7, #4
 8008ef0:	2100      	movs	r1, #0
 8008ef2:	6818      	ldr	r0, [r3, #0]
 8008ef4:	f7fd fe43 	bl	8006b7e <dir_next>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008efe:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008f02:	2b04      	cmp	r3, #4
 8008f04:	d102      	bne.n	8008f0c <f_readdir+0xa2>
 8008f06:	2300      	movs	r3, #0
 8008f08:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008f0c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}

08008f1a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008f1a:	b580      	push	{r7, lr}
 8008f1c:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	1d3b      	adds	r3, r7, #4
 8008f24:	6018      	str	r0, [r3, #0]
 8008f26:	463b      	mov	r3, r7
 8008f28:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008f2a:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8008f2e:	1d3b      	adds	r3, r7, #4
 8008f30:	2200      	movs	r2, #0
 8008f32:	4618      	mov	r0, r3
 8008f34:	f7fe ffa6 	bl	8007e84 <find_volume>
 8008f38:	4603      	mov	r3, r0
 8008f3a:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 8008f3e:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d127      	bne.n	8008f96 <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 8008f46:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008f4a:	f107 0208 	add.w	r2, r7, #8
 8008f4e:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f50:	1d3b      	adds	r3, r7, #4
 8008f52:	681a      	ldr	r2, [r3, #0]
 8008f54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f58:	4611      	mov	r1, r2
 8008f5a:	4618      	mov	r0, r3
 8008f5c:	f7fe fe86 	bl	8007c6c <follow_path>
 8008f60:	4603      	mov	r3, r0
 8008f62:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8008f66:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d113      	bne.n	8008f96 <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008f6e:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8008f72:	b25b      	sxtb	r3, r3
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	da03      	bge.n	8008f80 <f_stat+0x66>
				res = FR_INVALID_NAME;
 8008f78:	2306      	movs	r3, #6
 8008f7a:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8008f7e:	e00a      	b.n	8008f96 <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008f80:	463b      	mov	r3, r7
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d006      	beq.n	8008f96 <f_stat+0x7c>
 8008f88:	463b      	mov	r3, r7
 8008f8a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008f8e:	6819      	ldr	r1, [r3, #0]
 8008f90:	4610      	mov	r0, r2
 8008f92:	f7fe fbd5 	bl	8007740 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008f96:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	bd80      	pop	{r7, pc}

08008fa4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	1d3b      	adds	r3, r7, #4
 8008fae:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008fb6:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8008fba:	1d3b      	adds	r3, r7, #4
 8008fbc:	2202      	movs	r2, #2
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fe ff60 	bl	8007e84 <find_volume>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	dj.obj.fs = fs;
 8008fca:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008fce:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	if (res == FR_OK) {
 8008fd2:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	f040 809e 	bne.w	8009118 <f_unlink+0x174>
		INIT_NAMBUF(fs);
 8008fdc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008fe0:	f107 020c 	add.w	r2, r7, #12
 8008fe4:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8008fe6:	1d3b      	adds	r3, r7, #4
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8008fee:	4611      	mov	r1, r2
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	f7fe fe3b 	bl	8007c6c <follow_path>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008ffc:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8009000:	2b00      	cmp	r3, #0
 8009002:	d108      	bne.n	8009016 <f_unlink+0x72>
 8009004:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8009008:	2102      	movs	r1, #2
 800900a:	4618      	mov	r0, r3
 800900c:	f7fd f80c 	bl	8006028 <chk_lock>
 8009010:	4603      	mov	r3, r0
 8009012:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8009016:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800901a:	2b00      	cmp	r3, #0
 800901c:	d17c      	bne.n	8009118 <f_unlink+0x174>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 800901e:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 8009022:	b25b      	sxtb	r3, r3
 8009024:	2b00      	cmp	r3, #0
 8009026:	da03      	bge.n	8009030 <f_unlink+0x8c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8009028:	2306      	movs	r3, #6
 800902a:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 800902e:	e008      	b.n	8009042 <f_unlink+0x9e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8009030:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	2b00      	cmp	r3, #0
 800903a:	d002      	beq.n	8009042 <f_unlink+0x9e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800903c:	2307      	movs	r3, #7
 800903e:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				}
			}
			if (res == FR_OK) {
 8009042:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8009046:	2b00      	cmp	r3, #0
 8009048:	d13b      	bne.n	80090c2 <f_unlink+0x11e>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800904a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800904e:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8009052:	4611      	mov	r1, r2
 8009054:	4618      	mov	r0, r3
 8009056:	f7fd fe9e 	bl	8006d96 <ld_clust>
 800905a:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 800905e:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8009062:	f003 0310 	and.w	r3, r3, #16
 8009066:	2b00      	cmp	r3, #0
 8009068:	d02b      	beq.n	80090c2 <f_unlink+0x11e>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800906a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800906e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
						sdj.obj.sclust = dclst;
 8009072:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8009076:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800907a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800907e:	2100      	movs	r1, #0
 8009080:	4618      	mov	r0, r3
 8009082:	f7fd fd01 	bl	8006a88 <dir_sdi>
 8009086:	4603      	mov	r3, r0
 8009088:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						if (res == FR_OK) {
 800908c:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8009090:	2b00      	cmp	r3, #0
 8009092:	d116      	bne.n	80090c2 <f_unlink+0x11e>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009094:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009098:	2100      	movs	r1, #0
 800909a:	4618      	mov	r0, r3
 800909c:	f7fe f8a7 	bl	80071ee <dir_read>
 80090a0:	4603      	mov	r3, r0
 80090a2:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80090a6:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d102      	bne.n	80090b4 <f_unlink+0x110>
 80090ae:	2307      	movs	r3, #7
 80090b0:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80090b4:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 80090b8:	2b04      	cmp	r3, #4
 80090ba:	d102      	bne.n	80090c2 <f_unlink+0x11e>
 80090bc:	2300      	movs	r3, #0
 80090be:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						}
					}
				}
			}
			if (res == FR_OK) {
 80090c2:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d126      	bne.n	8009118 <f_unlink+0x174>
				res = dir_remove(&dj);			/* Remove the directory entry */
 80090ca:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80090ce:	4618      	mov	r0, r3
 80090d0:	f7fe faec 	bl	80076ac <dir_remove>
 80090d4:	4603      	mov	r3, r0
 80090d6:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 80090da:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10e      	bne.n	8009100 <f_unlink+0x15c>
 80090e2:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00a      	beq.n	8009100 <f_unlink+0x15c>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 80090ea:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80090ee:	2200      	movs	r2, #0
 80090f0:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 80090f4:	4618      	mov	r0, r3
 80090f6:	f7fd fb96 	bl	8006826 <remove_chain>
 80090fa:	4603      	mov	r3, r0
 80090fc:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8009100:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8009104:	2b00      	cmp	r3, #0
 8009106:	d107      	bne.n	8009118 <f_unlink+0x174>
 8009108:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800910c:	4618      	mov	r0, r3
 800910e:	f7fd f969 	bl	80063e4 <sync_fs>
 8009112:	4603      	mov	r3, r0
 8009114:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009118:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
}
 800911c:	4618      	mov	r0, r3
 800911e:	f507 7720 	add.w	r7, r7, #640	; 0x280
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
	...

08009128 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009128:	b480      	push	{r7}
 800912a:	b087      	sub	sp, #28
 800912c:	af00      	add	r7, sp, #0
 800912e:	60f8      	str	r0, [r7, #12]
 8009130:	60b9      	str	r1, [r7, #8]
 8009132:	4613      	mov	r3, r2
 8009134:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009136:	2301      	movs	r3, #1
 8009138:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800913a:	2300      	movs	r3, #0
 800913c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800913e:	4b1f      	ldr	r3, [pc, #124]	; (80091bc <FATFS_LinkDriverEx+0x94>)
 8009140:	7a5b      	ldrb	r3, [r3, #9]
 8009142:	b2db      	uxtb	r3, r3
 8009144:	2b00      	cmp	r3, #0
 8009146:	d131      	bne.n	80091ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009148:	4b1c      	ldr	r3, [pc, #112]	; (80091bc <FATFS_LinkDriverEx+0x94>)
 800914a:	7a5b      	ldrb	r3, [r3, #9]
 800914c:	b2db      	uxtb	r3, r3
 800914e:	461a      	mov	r2, r3
 8009150:	4b1a      	ldr	r3, [pc, #104]	; (80091bc <FATFS_LinkDriverEx+0x94>)
 8009152:	2100      	movs	r1, #0
 8009154:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009156:	4b19      	ldr	r3, [pc, #100]	; (80091bc <FATFS_LinkDriverEx+0x94>)
 8009158:	7a5b      	ldrb	r3, [r3, #9]
 800915a:	b2db      	uxtb	r3, r3
 800915c:	4a17      	ldr	r2, [pc, #92]	; (80091bc <FATFS_LinkDriverEx+0x94>)
 800915e:	009b      	lsls	r3, r3, #2
 8009160:	4413      	add	r3, r2
 8009162:	68fa      	ldr	r2, [r7, #12]
 8009164:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009166:	4b15      	ldr	r3, [pc, #84]	; (80091bc <FATFS_LinkDriverEx+0x94>)
 8009168:	7a5b      	ldrb	r3, [r3, #9]
 800916a:	b2db      	uxtb	r3, r3
 800916c:	461a      	mov	r2, r3
 800916e:	4b13      	ldr	r3, [pc, #76]	; (80091bc <FATFS_LinkDriverEx+0x94>)
 8009170:	4413      	add	r3, r2
 8009172:	79fa      	ldrb	r2, [r7, #7]
 8009174:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009176:	4b11      	ldr	r3, [pc, #68]	; (80091bc <FATFS_LinkDriverEx+0x94>)
 8009178:	7a5b      	ldrb	r3, [r3, #9]
 800917a:	b2db      	uxtb	r3, r3
 800917c:	1c5a      	adds	r2, r3, #1
 800917e:	b2d1      	uxtb	r1, r2
 8009180:	4a0e      	ldr	r2, [pc, #56]	; (80091bc <FATFS_LinkDriverEx+0x94>)
 8009182:	7251      	strb	r1, [r2, #9]
 8009184:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009186:	7dbb      	ldrb	r3, [r7, #22]
 8009188:	3330      	adds	r3, #48	; 0x30
 800918a:	b2da      	uxtb	r2, r3
 800918c:	68bb      	ldr	r3, [r7, #8]
 800918e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	3301      	adds	r3, #1
 8009194:	223a      	movs	r2, #58	; 0x3a
 8009196:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	3302      	adds	r3, #2
 800919c:	222f      	movs	r2, #47	; 0x2f
 800919e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	3303      	adds	r3, #3
 80091a4:	2200      	movs	r2, #0
 80091a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80091a8:	2300      	movs	r3, #0
 80091aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80091ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	371c      	adds	r7, #28
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr
 80091ba:	bf00      	nop
 80091bc:	20000304 	.word	0x20000304

080091c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b082      	sub	sp, #8
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80091ca:	2200      	movs	r2, #0
 80091cc:	6839      	ldr	r1, [r7, #0]
 80091ce:	6878      	ldr	r0, [r7, #4]
 80091d0:	f7ff ffaa 	bl	8009128 <FATFS_LinkDriverEx>
 80091d4:	4603      	mov	r3, r0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3708      	adds	r7, #8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
	...

080091e0 <__errno>:
 80091e0:	4b01      	ldr	r3, [pc, #4]	; (80091e8 <__errno+0x8>)
 80091e2:	6818      	ldr	r0, [r3, #0]
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	20000010 	.word	0x20000010

080091ec <__libc_init_array>:
 80091ec:	b570      	push	{r4, r5, r6, lr}
 80091ee:	4d0d      	ldr	r5, [pc, #52]	; (8009224 <__libc_init_array+0x38>)
 80091f0:	4c0d      	ldr	r4, [pc, #52]	; (8009228 <__libc_init_array+0x3c>)
 80091f2:	1b64      	subs	r4, r4, r5
 80091f4:	10a4      	asrs	r4, r4, #2
 80091f6:	2600      	movs	r6, #0
 80091f8:	42a6      	cmp	r6, r4
 80091fa:	d109      	bne.n	8009210 <__libc_init_array+0x24>
 80091fc:	4d0b      	ldr	r5, [pc, #44]	; (800922c <__libc_init_array+0x40>)
 80091fe:	4c0c      	ldr	r4, [pc, #48]	; (8009230 <__libc_init_array+0x44>)
 8009200:	f002 ff84 	bl	800c10c <_init>
 8009204:	1b64      	subs	r4, r4, r5
 8009206:	10a4      	asrs	r4, r4, #2
 8009208:	2600      	movs	r6, #0
 800920a:	42a6      	cmp	r6, r4
 800920c:	d105      	bne.n	800921a <__libc_init_array+0x2e>
 800920e:	bd70      	pop	{r4, r5, r6, pc}
 8009210:	f855 3b04 	ldr.w	r3, [r5], #4
 8009214:	4798      	blx	r3
 8009216:	3601      	adds	r6, #1
 8009218:	e7ee      	b.n	80091f8 <__libc_init_array+0xc>
 800921a:	f855 3b04 	ldr.w	r3, [r5], #4
 800921e:	4798      	blx	r3
 8009220:	3601      	adds	r6, #1
 8009222:	e7f2      	b.n	800920a <__libc_init_array+0x1e>
 8009224:	08014204 	.word	0x08014204
 8009228:	08014204 	.word	0x08014204
 800922c:	08014204 	.word	0x08014204
 8009230:	08014208 	.word	0x08014208

08009234 <malloc>:
 8009234:	4b02      	ldr	r3, [pc, #8]	; (8009240 <malloc+0xc>)
 8009236:	4601      	mov	r1, r0
 8009238:	6818      	ldr	r0, [r3, #0]
 800923a:	f000 b863 	b.w	8009304 <_malloc_r>
 800923e:	bf00      	nop
 8009240:	20000010 	.word	0x20000010

08009244 <free>:
 8009244:	4b02      	ldr	r3, [pc, #8]	; (8009250 <free+0xc>)
 8009246:	4601      	mov	r1, r0
 8009248:	6818      	ldr	r0, [r3, #0]
 800924a:	f000 b80b 	b.w	8009264 <_free_r>
 800924e:	bf00      	nop
 8009250:	20000010 	.word	0x20000010

08009254 <memset>:
 8009254:	4402      	add	r2, r0
 8009256:	4603      	mov	r3, r0
 8009258:	4293      	cmp	r3, r2
 800925a:	d100      	bne.n	800925e <memset+0xa>
 800925c:	4770      	bx	lr
 800925e:	f803 1b01 	strb.w	r1, [r3], #1
 8009262:	e7f9      	b.n	8009258 <memset+0x4>

08009264 <_free_r>:
 8009264:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009266:	2900      	cmp	r1, #0
 8009268:	d048      	beq.n	80092fc <_free_r+0x98>
 800926a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800926e:	9001      	str	r0, [sp, #4]
 8009270:	2b00      	cmp	r3, #0
 8009272:	f1a1 0404 	sub.w	r4, r1, #4
 8009276:	bfb8      	it	lt
 8009278:	18e4      	addlt	r4, r4, r3
 800927a:	f001 ff6b 	bl	800b154 <__malloc_lock>
 800927e:	4a20      	ldr	r2, [pc, #128]	; (8009300 <_free_r+0x9c>)
 8009280:	9801      	ldr	r0, [sp, #4]
 8009282:	6813      	ldr	r3, [r2, #0]
 8009284:	4615      	mov	r5, r2
 8009286:	b933      	cbnz	r3, 8009296 <_free_r+0x32>
 8009288:	6063      	str	r3, [r4, #4]
 800928a:	6014      	str	r4, [r2, #0]
 800928c:	b003      	add	sp, #12
 800928e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009292:	f001 bf65 	b.w	800b160 <__malloc_unlock>
 8009296:	42a3      	cmp	r3, r4
 8009298:	d90b      	bls.n	80092b2 <_free_r+0x4e>
 800929a:	6821      	ldr	r1, [r4, #0]
 800929c:	1862      	adds	r2, r4, r1
 800929e:	4293      	cmp	r3, r2
 80092a0:	bf04      	itt	eq
 80092a2:	681a      	ldreq	r2, [r3, #0]
 80092a4:	685b      	ldreq	r3, [r3, #4]
 80092a6:	6063      	str	r3, [r4, #4]
 80092a8:	bf04      	itt	eq
 80092aa:	1852      	addeq	r2, r2, r1
 80092ac:	6022      	streq	r2, [r4, #0]
 80092ae:	602c      	str	r4, [r5, #0]
 80092b0:	e7ec      	b.n	800928c <_free_r+0x28>
 80092b2:	461a      	mov	r2, r3
 80092b4:	685b      	ldr	r3, [r3, #4]
 80092b6:	b10b      	cbz	r3, 80092bc <_free_r+0x58>
 80092b8:	42a3      	cmp	r3, r4
 80092ba:	d9fa      	bls.n	80092b2 <_free_r+0x4e>
 80092bc:	6811      	ldr	r1, [r2, #0]
 80092be:	1855      	adds	r5, r2, r1
 80092c0:	42a5      	cmp	r5, r4
 80092c2:	d10b      	bne.n	80092dc <_free_r+0x78>
 80092c4:	6824      	ldr	r4, [r4, #0]
 80092c6:	4421      	add	r1, r4
 80092c8:	1854      	adds	r4, r2, r1
 80092ca:	42a3      	cmp	r3, r4
 80092cc:	6011      	str	r1, [r2, #0]
 80092ce:	d1dd      	bne.n	800928c <_free_r+0x28>
 80092d0:	681c      	ldr	r4, [r3, #0]
 80092d2:	685b      	ldr	r3, [r3, #4]
 80092d4:	6053      	str	r3, [r2, #4]
 80092d6:	4421      	add	r1, r4
 80092d8:	6011      	str	r1, [r2, #0]
 80092da:	e7d7      	b.n	800928c <_free_r+0x28>
 80092dc:	d902      	bls.n	80092e4 <_free_r+0x80>
 80092de:	230c      	movs	r3, #12
 80092e0:	6003      	str	r3, [r0, #0]
 80092e2:	e7d3      	b.n	800928c <_free_r+0x28>
 80092e4:	6825      	ldr	r5, [r4, #0]
 80092e6:	1961      	adds	r1, r4, r5
 80092e8:	428b      	cmp	r3, r1
 80092ea:	bf04      	itt	eq
 80092ec:	6819      	ldreq	r1, [r3, #0]
 80092ee:	685b      	ldreq	r3, [r3, #4]
 80092f0:	6063      	str	r3, [r4, #4]
 80092f2:	bf04      	itt	eq
 80092f4:	1949      	addeq	r1, r1, r5
 80092f6:	6021      	streq	r1, [r4, #0]
 80092f8:	6054      	str	r4, [r2, #4]
 80092fa:	e7c7      	b.n	800928c <_free_r+0x28>
 80092fc:	b003      	add	sp, #12
 80092fe:	bd30      	pop	{r4, r5, pc}
 8009300:	20000310 	.word	0x20000310

08009304 <_malloc_r>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	1ccd      	adds	r5, r1, #3
 8009308:	f025 0503 	bic.w	r5, r5, #3
 800930c:	3508      	adds	r5, #8
 800930e:	2d0c      	cmp	r5, #12
 8009310:	bf38      	it	cc
 8009312:	250c      	movcc	r5, #12
 8009314:	2d00      	cmp	r5, #0
 8009316:	4606      	mov	r6, r0
 8009318:	db01      	blt.n	800931e <_malloc_r+0x1a>
 800931a:	42a9      	cmp	r1, r5
 800931c:	d903      	bls.n	8009326 <_malloc_r+0x22>
 800931e:	230c      	movs	r3, #12
 8009320:	6033      	str	r3, [r6, #0]
 8009322:	2000      	movs	r0, #0
 8009324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009326:	f001 ff15 	bl	800b154 <__malloc_lock>
 800932a:	4921      	ldr	r1, [pc, #132]	; (80093b0 <_malloc_r+0xac>)
 800932c:	680a      	ldr	r2, [r1, #0]
 800932e:	4614      	mov	r4, r2
 8009330:	b99c      	cbnz	r4, 800935a <_malloc_r+0x56>
 8009332:	4f20      	ldr	r7, [pc, #128]	; (80093b4 <_malloc_r+0xb0>)
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	b923      	cbnz	r3, 8009342 <_malloc_r+0x3e>
 8009338:	4621      	mov	r1, r4
 800933a:	4630      	mov	r0, r6
 800933c:	f000 fd34 	bl	8009da8 <_sbrk_r>
 8009340:	6038      	str	r0, [r7, #0]
 8009342:	4629      	mov	r1, r5
 8009344:	4630      	mov	r0, r6
 8009346:	f000 fd2f 	bl	8009da8 <_sbrk_r>
 800934a:	1c43      	adds	r3, r0, #1
 800934c:	d123      	bne.n	8009396 <_malloc_r+0x92>
 800934e:	230c      	movs	r3, #12
 8009350:	6033      	str	r3, [r6, #0]
 8009352:	4630      	mov	r0, r6
 8009354:	f001 ff04 	bl	800b160 <__malloc_unlock>
 8009358:	e7e3      	b.n	8009322 <_malloc_r+0x1e>
 800935a:	6823      	ldr	r3, [r4, #0]
 800935c:	1b5b      	subs	r3, r3, r5
 800935e:	d417      	bmi.n	8009390 <_malloc_r+0x8c>
 8009360:	2b0b      	cmp	r3, #11
 8009362:	d903      	bls.n	800936c <_malloc_r+0x68>
 8009364:	6023      	str	r3, [r4, #0]
 8009366:	441c      	add	r4, r3
 8009368:	6025      	str	r5, [r4, #0]
 800936a:	e004      	b.n	8009376 <_malloc_r+0x72>
 800936c:	6863      	ldr	r3, [r4, #4]
 800936e:	42a2      	cmp	r2, r4
 8009370:	bf0c      	ite	eq
 8009372:	600b      	streq	r3, [r1, #0]
 8009374:	6053      	strne	r3, [r2, #4]
 8009376:	4630      	mov	r0, r6
 8009378:	f001 fef2 	bl	800b160 <__malloc_unlock>
 800937c:	f104 000b 	add.w	r0, r4, #11
 8009380:	1d23      	adds	r3, r4, #4
 8009382:	f020 0007 	bic.w	r0, r0, #7
 8009386:	1ac2      	subs	r2, r0, r3
 8009388:	d0cc      	beq.n	8009324 <_malloc_r+0x20>
 800938a:	1a1b      	subs	r3, r3, r0
 800938c:	50a3      	str	r3, [r4, r2]
 800938e:	e7c9      	b.n	8009324 <_malloc_r+0x20>
 8009390:	4622      	mov	r2, r4
 8009392:	6864      	ldr	r4, [r4, #4]
 8009394:	e7cc      	b.n	8009330 <_malloc_r+0x2c>
 8009396:	1cc4      	adds	r4, r0, #3
 8009398:	f024 0403 	bic.w	r4, r4, #3
 800939c:	42a0      	cmp	r0, r4
 800939e:	d0e3      	beq.n	8009368 <_malloc_r+0x64>
 80093a0:	1a21      	subs	r1, r4, r0
 80093a2:	4630      	mov	r0, r6
 80093a4:	f000 fd00 	bl	8009da8 <_sbrk_r>
 80093a8:	3001      	adds	r0, #1
 80093aa:	d1dd      	bne.n	8009368 <_malloc_r+0x64>
 80093ac:	e7cf      	b.n	800934e <_malloc_r+0x4a>
 80093ae:	bf00      	nop
 80093b0:	20000310 	.word	0x20000310
 80093b4:	20000314 	.word	0x20000314

080093b8 <__cvt>:
 80093b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093bc:	ec55 4b10 	vmov	r4, r5, d0
 80093c0:	2d00      	cmp	r5, #0
 80093c2:	460e      	mov	r6, r1
 80093c4:	4619      	mov	r1, r3
 80093c6:	462b      	mov	r3, r5
 80093c8:	bfbb      	ittet	lt
 80093ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80093ce:	461d      	movlt	r5, r3
 80093d0:	2300      	movge	r3, #0
 80093d2:	232d      	movlt	r3, #45	; 0x2d
 80093d4:	700b      	strb	r3, [r1, #0]
 80093d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80093dc:	4691      	mov	r9, r2
 80093de:	f023 0820 	bic.w	r8, r3, #32
 80093e2:	bfbc      	itt	lt
 80093e4:	4622      	movlt	r2, r4
 80093e6:	4614      	movlt	r4, r2
 80093e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093ec:	d005      	beq.n	80093fa <__cvt+0x42>
 80093ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80093f2:	d100      	bne.n	80093f6 <__cvt+0x3e>
 80093f4:	3601      	adds	r6, #1
 80093f6:	2102      	movs	r1, #2
 80093f8:	e000      	b.n	80093fc <__cvt+0x44>
 80093fa:	2103      	movs	r1, #3
 80093fc:	ab03      	add	r3, sp, #12
 80093fe:	9301      	str	r3, [sp, #4]
 8009400:	ab02      	add	r3, sp, #8
 8009402:	9300      	str	r3, [sp, #0]
 8009404:	ec45 4b10 	vmov	d0, r4, r5
 8009408:	4653      	mov	r3, sl
 800940a:	4632      	mov	r2, r6
 800940c:	f000 fe84 	bl	800a118 <_dtoa_r>
 8009410:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009414:	4607      	mov	r7, r0
 8009416:	d102      	bne.n	800941e <__cvt+0x66>
 8009418:	f019 0f01 	tst.w	r9, #1
 800941c:	d022      	beq.n	8009464 <__cvt+0xac>
 800941e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009422:	eb07 0906 	add.w	r9, r7, r6
 8009426:	d110      	bne.n	800944a <__cvt+0x92>
 8009428:	783b      	ldrb	r3, [r7, #0]
 800942a:	2b30      	cmp	r3, #48	; 0x30
 800942c:	d10a      	bne.n	8009444 <__cvt+0x8c>
 800942e:	2200      	movs	r2, #0
 8009430:	2300      	movs	r3, #0
 8009432:	4620      	mov	r0, r4
 8009434:	4629      	mov	r1, r5
 8009436:	f7f7 fb77 	bl	8000b28 <__aeabi_dcmpeq>
 800943a:	b918      	cbnz	r0, 8009444 <__cvt+0x8c>
 800943c:	f1c6 0601 	rsb	r6, r6, #1
 8009440:	f8ca 6000 	str.w	r6, [sl]
 8009444:	f8da 3000 	ldr.w	r3, [sl]
 8009448:	4499      	add	r9, r3
 800944a:	2200      	movs	r2, #0
 800944c:	2300      	movs	r3, #0
 800944e:	4620      	mov	r0, r4
 8009450:	4629      	mov	r1, r5
 8009452:	f7f7 fb69 	bl	8000b28 <__aeabi_dcmpeq>
 8009456:	b108      	cbz	r0, 800945c <__cvt+0xa4>
 8009458:	f8cd 900c 	str.w	r9, [sp, #12]
 800945c:	2230      	movs	r2, #48	; 0x30
 800945e:	9b03      	ldr	r3, [sp, #12]
 8009460:	454b      	cmp	r3, r9
 8009462:	d307      	bcc.n	8009474 <__cvt+0xbc>
 8009464:	9b03      	ldr	r3, [sp, #12]
 8009466:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009468:	1bdb      	subs	r3, r3, r7
 800946a:	4638      	mov	r0, r7
 800946c:	6013      	str	r3, [r2, #0]
 800946e:	b004      	add	sp, #16
 8009470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009474:	1c59      	adds	r1, r3, #1
 8009476:	9103      	str	r1, [sp, #12]
 8009478:	701a      	strb	r2, [r3, #0]
 800947a:	e7f0      	b.n	800945e <__cvt+0xa6>

0800947c <__exponent>:
 800947c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800947e:	4603      	mov	r3, r0
 8009480:	2900      	cmp	r1, #0
 8009482:	bfb8      	it	lt
 8009484:	4249      	neglt	r1, r1
 8009486:	f803 2b02 	strb.w	r2, [r3], #2
 800948a:	bfb4      	ite	lt
 800948c:	222d      	movlt	r2, #45	; 0x2d
 800948e:	222b      	movge	r2, #43	; 0x2b
 8009490:	2909      	cmp	r1, #9
 8009492:	7042      	strb	r2, [r0, #1]
 8009494:	dd2a      	ble.n	80094ec <__exponent+0x70>
 8009496:	f10d 0407 	add.w	r4, sp, #7
 800949a:	46a4      	mov	ip, r4
 800949c:	270a      	movs	r7, #10
 800949e:	46a6      	mov	lr, r4
 80094a0:	460a      	mov	r2, r1
 80094a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80094a6:	fb07 1516 	mls	r5, r7, r6, r1
 80094aa:	3530      	adds	r5, #48	; 0x30
 80094ac:	2a63      	cmp	r2, #99	; 0x63
 80094ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80094b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80094b6:	4631      	mov	r1, r6
 80094b8:	dcf1      	bgt.n	800949e <__exponent+0x22>
 80094ba:	3130      	adds	r1, #48	; 0x30
 80094bc:	f1ae 0502 	sub.w	r5, lr, #2
 80094c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80094c4:	1c44      	adds	r4, r0, #1
 80094c6:	4629      	mov	r1, r5
 80094c8:	4561      	cmp	r1, ip
 80094ca:	d30a      	bcc.n	80094e2 <__exponent+0x66>
 80094cc:	f10d 0209 	add.w	r2, sp, #9
 80094d0:	eba2 020e 	sub.w	r2, r2, lr
 80094d4:	4565      	cmp	r5, ip
 80094d6:	bf88      	it	hi
 80094d8:	2200      	movhi	r2, #0
 80094da:	4413      	add	r3, r2
 80094dc:	1a18      	subs	r0, r3, r0
 80094de:	b003      	add	sp, #12
 80094e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80094e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80094e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80094ea:	e7ed      	b.n	80094c8 <__exponent+0x4c>
 80094ec:	2330      	movs	r3, #48	; 0x30
 80094ee:	3130      	adds	r1, #48	; 0x30
 80094f0:	7083      	strb	r3, [r0, #2]
 80094f2:	70c1      	strb	r1, [r0, #3]
 80094f4:	1d03      	adds	r3, r0, #4
 80094f6:	e7f1      	b.n	80094dc <__exponent+0x60>

080094f8 <_printf_float>:
 80094f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fc:	ed2d 8b02 	vpush	{d8}
 8009500:	b08d      	sub	sp, #52	; 0x34
 8009502:	460c      	mov	r4, r1
 8009504:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009508:	4616      	mov	r6, r2
 800950a:	461f      	mov	r7, r3
 800950c:	4605      	mov	r5, r0
 800950e:	f001 fda7 	bl	800b060 <_localeconv_r>
 8009512:	f8d0 a000 	ldr.w	sl, [r0]
 8009516:	4650      	mov	r0, sl
 8009518:	f7f6 fe84 	bl	8000224 <strlen>
 800951c:	2300      	movs	r3, #0
 800951e:	930a      	str	r3, [sp, #40]	; 0x28
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	9305      	str	r3, [sp, #20]
 8009524:	f8d8 3000 	ldr.w	r3, [r8]
 8009528:	f894 b018 	ldrb.w	fp, [r4, #24]
 800952c:	3307      	adds	r3, #7
 800952e:	f023 0307 	bic.w	r3, r3, #7
 8009532:	f103 0208 	add.w	r2, r3, #8
 8009536:	f8c8 2000 	str.w	r2, [r8]
 800953a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009542:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009546:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800954a:	9307      	str	r3, [sp, #28]
 800954c:	f8cd 8018 	str.w	r8, [sp, #24]
 8009550:	ee08 0a10 	vmov	s16, r0
 8009554:	4b9f      	ldr	r3, [pc, #636]	; (80097d4 <_printf_float+0x2dc>)
 8009556:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800955a:	f04f 32ff 	mov.w	r2, #4294967295
 800955e:	f7f7 fb15 	bl	8000b8c <__aeabi_dcmpun>
 8009562:	bb88      	cbnz	r0, 80095c8 <_printf_float+0xd0>
 8009564:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009568:	4b9a      	ldr	r3, [pc, #616]	; (80097d4 <_printf_float+0x2dc>)
 800956a:	f04f 32ff 	mov.w	r2, #4294967295
 800956e:	f7f7 faef 	bl	8000b50 <__aeabi_dcmple>
 8009572:	bb48      	cbnz	r0, 80095c8 <_printf_float+0xd0>
 8009574:	2200      	movs	r2, #0
 8009576:	2300      	movs	r3, #0
 8009578:	4640      	mov	r0, r8
 800957a:	4649      	mov	r1, r9
 800957c:	f7f7 fade 	bl	8000b3c <__aeabi_dcmplt>
 8009580:	b110      	cbz	r0, 8009588 <_printf_float+0x90>
 8009582:	232d      	movs	r3, #45	; 0x2d
 8009584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009588:	4b93      	ldr	r3, [pc, #588]	; (80097d8 <_printf_float+0x2e0>)
 800958a:	4894      	ldr	r0, [pc, #592]	; (80097dc <_printf_float+0x2e4>)
 800958c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009590:	bf94      	ite	ls
 8009592:	4698      	movls	r8, r3
 8009594:	4680      	movhi	r8, r0
 8009596:	2303      	movs	r3, #3
 8009598:	6123      	str	r3, [r4, #16]
 800959a:	9b05      	ldr	r3, [sp, #20]
 800959c:	f023 0204 	bic.w	r2, r3, #4
 80095a0:	6022      	str	r2, [r4, #0]
 80095a2:	f04f 0900 	mov.w	r9, #0
 80095a6:	9700      	str	r7, [sp, #0]
 80095a8:	4633      	mov	r3, r6
 80095aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80095ac:	4621      	mov	r1, r4
 80095ae:	4628      	mov	r0, r5
 80095b0:	f000 f9d8 	bl	8009964 <_printf_common>
 80095b4:	3001      	adds	r0, #1
 80095b6:	f040 8090 	bne.w	80096da <_printf_float+0x1e2>
 80095ba:	f04f 30ff 	mov.w	r0, #4294967295
 80095be:	b00d      	add	sp, #52	; 0x34
 80095c0:	ecbd 8b02 	vpop	{d8}
 80095c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c8:	4642      	mov	r2, r8
 80095ca:	464b      	mov	r3, r9
 80095cc:	4640      	mov	r0, r8
 80095ce:	4649      	mov	r1, r9
 80095d0:	f7f7 fadc 	bl	8000b8c <__aeabi_dcmpun>
 80095d4:	b140      	cbz	r0, 80095e8 <_printf_float+0xf0>
 80095d6:	464b      	mov	r3, r9
 80095d8:	2b00      	cmp	r3, #0
 80095da:	bfbc      	itt	lt
 80095dc:	232d      	movlt	r3, #45	; 0x2d
 80095de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80095e2:	487f      	ldr	r0, [pc, #508]	; (80097e0 <_printf_float+0x2e8>)
 80095e4:	4b7f      	ldr	r3, [pc, #508]	; (80097e4 <_printf_float+0x2ec>)
 80095e6:	e7d1      	b.n	800958c <_printf_float+0x94>
 80095e8:	6863      	ldr	r3, [r4, #4]
 80095ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80095ee:	9206      	str	r2, [sp, #24]
 80095f0:	1c5a      	adds	r2, r3, #1
 80095f2:	d13f      	bne.n	8009674 <_printf_float+0x17c>
 80095f4:	2306      	movs	r3, #6
 80095f6:	6063      	str	r3, [r4, #4]
 80095f8:	9b05      	ldr	r3, [sp, #20]
 80095fa:	6861      	ldr	r1, [r4, #4]
 80095fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009600:	2300      	movs	r3, #0
 8009602:	9303      	str	r3, [sp, #12]
 8009604:	ab0a      	add	r3, sp, #40	; 0x28
 8009606:	e9cd b301 	strd	fp, r3, [sp, #4]
 800960a:	ab09      	add	r3, sp, #36	; 0x24
 800960c:	ec49 8b10 	vmov	d0, r8, r9
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	6022      	str	r2, [r4, #0]
 8009614:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009618:	4628      	mov	r0, r5
 800961a:	f7ff fecd 	bl	80093b8 <__cvt>
 800961e:	9b06      	ldr	r3, [sp, #24]
 8009620:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009622:	2b47      	cmp	r3, #71	; 0x47
 8009624:	4680      	mov	r8, r0
 8009626:	d108      	bne.n	800963a <_printf_float+0x142>
 8009628:	1cc8      	adds	r0, r1, #3
 800962a:	db02      	blt.n	8009632 <_printf_float+0x13a>
 800962c:	6863      	ldr	r3, [r4, #4]
 800962e:	4299      	cmp	r1, r3
 8009630:	dd41      	ble.n	80096b6 <_printf_float+0x1be>
 8009632:	f1ab 0b02 	sub.w	fp, fp, #2
 8009636:	fa5f fb8b 	uxtb.w	fp, fp
 800963a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800963e:	d820      	bhi.n	8009682 <_printf_float+0x18a>
 8009640:	3901      	subs	r1, #1
 8009642:	465a      	mov	r2, fp
 8009644:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009648:	9109      	str	r1, [sp, #36]	; 0x24
 800964a:	f7ff ff17 	bl	800947c <__exponent>
 800964e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009650:	1813      	adds	r3, r2, r0
 8009652:	2a01      	cmp	r2, #1
 8009654:	4681      	mov	r9, r0
 8009656:	6123      	str	r3, [r4, #16]
 8009658:	dc02      	bgt.n	8009660 <_printf_float+0x168>
 800965a:	6822      	ldr	r2, [r4, #0]
 800965c:	07d2      	lsls	r2, r2, #31
 800965e:	d501      	bpl.n	8009664 <_printf_float+0x16c>
 8009660:	3301      	adds	r3, #1
 8009662:	6123      	str	r3, [r4, #16]
 8009664:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009668:	2b00      	cmp	r3, #0
 800966a:	d09c      	beq.n	80095a6 <_printf_float+0xae>
 800966c:	232d      	movs	r3, #45	; 0x2d
 800966e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009672:	e798      	b.n	80095a6 <_printf_float+0xae>
 8009674:	9a06      	ldr	r2, [sp, #24]
 8009676:	2a47      	cmp	r2, #71	; 0x47
 8009678:	d1be      	bne.n	80095f8 <_printf_float+0x100>
 800967a:	2b00      	cmp	r3, #0
 800967c:	d1bc      	bne.n	80095f8 <_printf_float+0x100>
 800967e:	2301      	movs	r3, #1
 8009680:	e7b9      	b.n	80095f6 <_printf_float+0xfe>
 8009682:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009686:	d118      	bne.n	80096ba <_printf_float+0x1c2>
 8009688:	2900      	cmp	r1, #0
 800968a:	6863      	ldr	r3, [r4, #4]
 800968c:	dd0b      	ble.n	80096a6 <_printf_float+0x1ae>
 800968e:	6121      	str	r1, [r4, #16]
 8009690:	b913      	cbnz	r3, 8009698 <_printf_float+0x1a0>
 8009692:	6822      	ldr	r2, [r4, #0]
 8009694:	07d0      	lsls	r0, r2, #31
 8009696:	d502      	bpl.n	800969e <_printf_float+0x1a6>
 8009698:	3301      	adds	r3, #1
 800969a:	440b      	add	r3, r1
 800969c:	6123      	str	r3, [r4, #16]
 800969e:	65a1      	str	r1, [r4, #88]	; 0x58
 80096a0:	f04f 0900 	mov.w	r9, #0
 80096a4:	e7de      	b.n	8009664 <_printf_float+0x16c>
 80096a6:	b913      	cbnz	r3, 80096ae <_printf_float+0x1b6>
 80096a8:	6822      	ldr	r2, [r4, #0]
 80096aa:	07d2      	lsls	r2, r2, #31
 80096ac:	d501      	bpl.n	80096b2 <_printf_float+0x1ba>
 80096ae:	3302      	adds	r3, #2
 80096b0:	e7f4      	b.n	800969c <_printf_float+0x1a4>
 80096b2:	2301      	movs	r3, #1
 80096b4:	e7f2      	b.n	800969c <_printf_float+0x1a4>
 80096b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80096ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096bc:	4299      	cmp	r1, r3
 80096be:	db05      	blt.n	80096cc <_printf_float+0x1d4>
 80096c0:	6823      	ldr	r3, [r4, #0]
 80096c2:	6121      	str	r1, [r4, #16]
 80096c4:	07d8      	lsls	r0, r3, #31
 80096c6:	d5ea      	bpl.n	800969e <_printf_float+0x1a6>
 80096c8:	1c4b      	adds	r3, r1, #1
 80096ca:	e7e7      	b.n	800969c <_printf_float+0x1a4>
 80096cc:	2900      	cmp	r1, #0
 80096ce:	bfd4      	ite	le
 80096d0:	f1c1 0202 	rsble	r2, r1, #2
 80096d4:	2201      	movgt	r2, #1
 80096d6:	4413      	add	r3, r2
 80096d8:	e7e0      	b.n	800969c <_printf_float+0x1a4>
 80096da:	6823      	ldr	r3, [r4, #0]
 80096dc:	055a      	lsls	r2, r3, #21
 80096de:	d407      	bmi.n	80096f0 <_printf_float+0x1f8>
 80096e0:	6923      	ldr	r3, [r4, #16]
 80096e2:	4642      	mov	r2, r8
 80096e4:	4631      	mov	r1, r6
 80096e6:	4628      	mov	r0, r5
 80096e8:	47b8      	blx	r7
 80096ea:	3001      	adds	r0, #1
 80096ec:	d12c      	bne.n	8009748 <_printf_float+0x250>
 80096ee:	e764      	b.n	80095ba <_printf_float+0xc2>
 80096f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096f4:	f240 80e0 	bls.w	80098b8 <_printf_float+0x3c0>
 80096f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096fc:	2200      	movs	r2, #0
 80096fe:	2300      	movs	r3, #0
 8009700:	f7f7 fa12 	bl	8000b28 <__aeabi_dcmpeq>
 8009704:	2800      	cmp	r0, #0
 8009706:	d034      	beq.n	8009772 <_printf_float+0x27a>
 8009708:	4a37      	ldr	r2, [pc, #220]	; (80097e8 <_printf_float+0x2f0>)
 800970a:	2301      	movs	r3, #1
 800970c:	4631      	mov	r1, r6
 800970e:	4628      	mov	r0, r5
 8009710:	47b8      	blx	r7
 8009712:	3001      	adds	r0, #1
 8009714:	f43f af51 	beq.w	80095ba <_printf_float+0xc2>
 8009718:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800971c:	429a      	cmp	r2, r3
 800971e:	db02      	blt.n	8009726 <_printf_float+0x22e>
 8009720:	6823      	ldr	r3, [r4, #0]
 8009722:	07d8      	lsls	r0, r3, #31
 8009724:	d510      	bpl.n	8009748 <_printf_float+0x250>
 8009726:	ee18 3a10 	vmov	r3, s16
 800972a:	4652      	mov	r2, sl
 800972c:	4631      	mov	r1, r6
 800972e:	4628      	mov	r0, r5
 8009730:	47b8      	blx	r7
 8009732:	3001      	adds	r0, #1
 8009734:	f43f af41 	beq.w	80095ba <_printf_float+0xc2>
 8009738:	f04f 0800 	mov.w	r8, #0
 800973c:	f104 091a 	add.w	r9, r4, #26
 8009740:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009742:	3b01      	subs	r3, #1
 8009744:	4543      	cmp	r3, r8
 8009746:	dc09      	bgt.n	800975c <_printf_float+0x264>
 8009748:	6823      	ldr	r3, [r4, #0]
 800974a:	079b      	lsls	r3, r3, #30
 800974c:	f100 8105 	bmi.w	800995a <_printf_float+0x462>
 8009750:	68e0      	ldr	r0, [r4, #12]
 8009752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009754:	4298      	cmp	r0, r3
 8009756:	bfb8      	it	lt
 8009758:	4618      	movlt	r0, r3
 800975a:	e730      	b.n	80095be <_printf_float+0xc6>
 800975c:	2301      	movs	r3, #1
 800975e:	464a      	mov	r2, r9
 8009760:	4631      	mov	r1, r6
 8009762:	4628      	mov	r0, r5
 8009764:	47b8      	blx	r7
 8009766:	3001      	adds	r0, #1
 8009768:	f43f af27 	beq.w	80095ba <_printf_float+0xc2>
 800976c:	f108 0801 	add.w	r8, r8, #1
 8009770:	e7e6      	b.n	8009740 <_printf_float+0x248>
 8009772:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009774:	2b00      	cmp	r3, #0
 8009776:	dc39      	bgt.n	80097ec <_printf_float+0x2f4>
 8009778:	4a1b      	ldr	r2, [pc, #108]	; (80097e8 <_printf_float+0x2f0>)
 800977a:	2301      	movs	r3, #1
 800977c:	4631      	mov	r1, r6
 800977e:	4628      	mov	r0, r5
 8009780:	47b8      	blx	r7
 8009782:	3001      	adds	r0, #1
 8009784:	f43f af19 	beq.w	80095ba <_printf_float+0xc2>
 8009788:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800978c:	4313      	orrs	r3, r2
 800978e:	d102      	bne.n	8009796 <_printf_float+0x29e>
 8009790:	6823      	ldr	r3, [r4, #0]
 8009792:	07d9      	lsls	r1, r3, #31
 8009794:	d5d8      	bpl.n	8009748 <_printf_float+0x250>
 8009796:	ee18 3a10 	vmov	r3, s16
 800979a:	4652      	mov	r2, sl
 800979c:	4631      	mov	r1, r6
 800979e:	4628      	mov	r0, r5
 80097a0:	47b8      	blx	r7
 80097a2:	3001      	adds	r0, #1
 80097a4:	f43f af09 	beq.w	80095ba <_printf_float+0xc2>
 80097a8:	f04f 0900 	mov.w	r9, #0
 80097ac:	f104 0a1a 	add.w	sl, r4, #26
 80097b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097b2:	425b      	negs	r3, r3
 80097b4:	454b      	cmp	r3, r9
 80097b6:	dc01      	bgt.n	80097bc <_printf_float+0x2c4>
 80097b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097ba:	e792      	b.n	80096e2 <_printf_float+0x1ea>
 80097bc:	2301      	movs	r3, #1
 80097be:	4652      	mov	r2, sl
 80097c0:	4631      	mov	r1, r6
 80097c2:	4628      	mov	r0, r5
 80097c4:	47b8      	blx	r7
 80097c6:	3001      	adds	r0, #1
 80097c8:	f43f aef7 	beq.w	80095ba <_printf_float+0xc2>
 80097cc:	f109 0901 	add.w	r9, r9, #1
 80097d0:	e7ee      	b.n	80097b0 <_printf_float+0x2b8>
 80097d2:	bf00      	nop
 80097d4:	7fefffff 	.word	0x7fefffff
 80097d8:	08013e20 	.word	0x08013e20
 80097dc:	08013e24 	.word	0x08013e24
 80097e0:	08013e2c 	.word	0x08013e2c
 80097e4:	08013e28 	.word	0x08013e28
 80097e8:	08013e30 	.word	0x08013e30
 80097ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097f0:	429a      	cmp	r2, r3
 80097f2:	bfa8      	it	ge
 80097f4:	461a      	movge	r2, r3
 80097f6:	2a00      	cmp	r2, #0
 80097f8:	4691      	mov	r9, r2
 80097fa:	dc37      	bgt.n	800986c <_printf_float+0x374>
 80097fc:	f04f 0b00 	mov.w	fp, #0
 8009800:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009804:	f104 021a 	add.w	r2, r4, #26
 8009808:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800980a:	9305      	str	r3, [sp, #20]
 800980c:	eba3 0309 	sub.w	r3, r3, r9
 8009810:	455b      	cmp	r3, fp
 8009812:	dc33      	bgt.n	800987c <_printf_float+0x384>
 8009814:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009818:	429a      	cmp	r2, r3
 800981a:	db3b      	blt.n	8009894 <_printf_float+0x39c>
 800981c:	6823      	ldr	r3, [r4, #0]
 800981e:	07da      	lsls	r2, r3, #31
 8009820:	d438      	bmi.n	8009894 <_printf_float+0x39c>
 8009822:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009824:	9b05      	ldr	r3, [sp, #20]
 8009826:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009828:	1ad3      	subs	r3, r2, r3
 800982a:	eba2 0901 	sub.w	r9, r2, r1
 800982e:	4599      	cmp	r9, r3
 8009830:	bfa8      	it	ge
 8009832:	4699      	movge	r9, r3
 8009834:	f1b9 0f00 	cmp.w	r9, #0
 8009838:	dc35      	bgt.n	80098a6 <_printf_float+0x3ae>
 800983a:	f04f 0800 	mov.w	r8, #0
 800983e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009842:	f104 0a1a 	add.w	sl, r4, #26
 8009846:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800984a:	1a9b      	subs	r3, r3, r2
 800984c:	eba3 0309 	sub.w	r3, r3, r9
 8009850:	4543      	cmp	r3, r8
 8009852:	f77f af79 	ble.w	8009748 <_printf_float+0x250>
 8009856:	2301      	movs	r3, #1
 8009858:	4652      	mov	r2, sl
 800985a:	4631      	mov	r1, r6
 800985c:	4628      	mov	r0, r5
 800985e:	47b8      	blx	r7
 8009860:	3001      	adds	r0, #1
 8009862:	f43f aeaa 	beq.w	80095ba <_printf_float+0xc2>
 8009866:	f108 0801 	add.w	r8, r8, #1
 800986a:	e7ec      	b.n	8009846 <_printf_float+0x34e>
 800986c:	4613      	mov	r3, r2
 800986e:	4631      	mov	r1, r6
 8009870:	4642      	mov	r2, r8
 8009872:	4628      	mov	r0, r5
 8009874:	47b8      	blx	r7
 8009876:	3001      	adds	r0, #1
 8009878:	d1c0      	bne.n	80097fc <_printf_float+0x304>
 800987a:	e69e      	b.n	80095ba <_printf_float+0xc2>
 800987c:	2301      	movs	r3, #1
 800987e:	4631      	mov	r1, r6
 8009880:	4628      	mov	r0, r5
 8009882:	9205      	str	r2, [sp, #20]
 8009884:	47b8      	blx	r7
 8009886:	3001      	adds	r0, #1
 8009888:	f43f ae97 	beq.w	80095ba <_printf_float+0xc2>
 800988c:	9a05      	ldr	r2, [sp, #20]
 800988e:	f10b 0b01 	add.w	fp, fp, #1
 8009892:	e7b9      	b.n	8009808 <_printf_float+0x310>
 8009894:	ee18 3a10 	vmov	r3, s16
 8009898:	4652      	mov	r2, sl
 800989a:	4631      	mov	r1, r6
 800989c:	4628      	mov	r0, r5
 800989e:	47b8      	blx	r7
 80098a0:	3001      	adds	r0, #1
 80098a2:	d1be      	bne.n	8009822 <_printf_float+0x32a>
 80098a4:	e689      	b.n	80095ba <_printf_float+0xc2>
 80098a6:	9a05      	ldr	r2, [sp, #20]
 80098a8:	464b      	mov	r3, r9
 80098aa:	4442      	add	r2, r8
 80098ac:	4631      	mov	r1, r6
 80098ae:	4628      	mov	r0, r5
 80098b0:	47b8      	blx	r7
 80098b2:	3001      	adds	r0, #1
 80098b4:	d1c1      	bne.n	800983a <_printf_float+0x342>
 80098b6:	e680      	b.n	80095ba <_printf_float+0xc2>
 80098b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ba:	2a01      	cmp	r2, #1
 80098bc:	dc01      	bgt.n	80098c2 <_printf_float+0x3ca>
 80098be:	07db      	lsls	r3, r3, #31
 80098c0:	d538      	bpl.n	8009934 <_printf_float+0x43c>
 80098c2:	2301      	movs	r3, #1
 80098c4:	4642      	mov	r2, r8
 80098c6:	4631      	mov	r1, r6
 80098c8:	4628      	mov	r0, r5
 80098ca:	47b8      	blx	r7
 80098cc:	3001      	adds	r0, #1
 80098ce:	f43f ae74 	beq.w	80095ba <_printf_float+0xc2>
 80098d2:	ee18 3a10 	vmov	r3, s16
 80098d6:	4652      	mov	r2, sl
 80098d8:	4631      	mov	r1, r6
 80098da:	4628      	mov	r0, r5
 80098dc:	47b8      	blx	r7
 80098de:	3001      	adds	r0, #1
 80098e0:	f43f ae6b 	beq.w	80095ba <_printf_float+0xc2>
 80098e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80098e8:	2200      	movs	r2, #0
 80098ea:	2300      	movs	r3, #0
 80098ec:	f7f7 f91c 	bl	8000b28 <__aeabi_dcmpeq>
 80098f0:	b9d8      	cbnz	r0, 800992a <_printf_float+0x432>
 80098f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f4:	f108 0201 	add.w	r2, r8, #1
 80098f8:	3b01      	subs	r3, #1
 80098fa:	4631      	mov	r1, r6
 80098fc:	4628      	mov	r0, r5
 80098fe:	47b8      	blx	r7
 8009900:	3001      	adds	r0, #1
 8009902:	d10e      	bne.n	8009922 <_printf_float+0x42a>
 8009904:	e659      	b.n	80095ba <_printf_float+0xc2>
 8009906:	2301      	movs	r3, #1
 8009908:	4652      	mov	r2, sl
 800990a:	4631      	mov	r1, r6
 800990c:	4628      	mov	r0, r5
 800990e:	47b8      	blx	r7
 8009910:	3001      	adds	r0, #1
 8009912:	f43f ae52 	beq.w	80095ba <_printf_float+0xc2>
 8009916:	f108 0801 	add.w	r8, r8, #1
 800991a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800991c:	3b01      	subs	r3, #1
 800991e:	4543      	cmp	r3, r8
 8009920:	dcf1      	bgt.n	8009906 <_printf_float+0x40e>
 8009922:	464b      	mov	r3, r9
 8009924:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009928:	e6dc      	b.n	80096e4 <_printf_float+0x1ec>
 800992a:	f04f 0800 	mov.w	r8, #0
 800992e:	f104 0a1a 	add.w	sl, r4, #26
 8009932:	e7f2      	b.n	800991a <_printf_float+0x422>
 8009934:	2301      	movs	r3, #1
 8009936:	4642      	mov	r2, r8
 8009938:	e7df      	b.n	80098fa <_printf_float+0x402>
 800993a:	2301      	movs	r3, #1
 800993c:	464a      	mov	r2, r9
 800993e:	4631      	mov	r1, r6
 8009940:	4628      	mov	r0, r5
 8009942:	47b8      	blx	r7
 8009944:	3001      	adds	r0, #1
 8009946:	f43f ae38 	beq.w	80095ba <_printf_float+0xc2>
 800994a:	f108 0801 	add.w	r8, r8, #1
 800994e:	68e3      	ldr	r3, [r4, #12]
 8009950:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009952:	1a5b      	subs	r3, r3, r1
 8009954:	4543      	cmp	r3, r8
 8009956:	dcf0      	bgt.n	800993a <_printf_float+0x442>
 8009958:	e6fa      	b.n	8009750 <_printf_float+0x258>
 800995a:	f04f 0800 	mov.w	r8, #0
 800995e:	f104 0919 	add.w	r9, r4, #25
 8009962:	e7f4      	b.n	800994e <_printf_float+0x456>

08009964 <_printf_common>:
 8009964:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009968:	4616      	mov	r6, r2
 800996a:	4699      	mov	r9, r3
 800996c:	688a      	ldr	r2, [r1, #8]
 800996e:	690b      	ldr	r3, [r1, #16]
 8009970:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009974:	4293      	cmp	r3, r2
 8009976:	bfb8      	it	lt
 8009978:	4613      	movlt	r3, r2
 800997a:	6033      	str	r3, [r6, #0]
 800997c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009980:	4607      	mov	r7, r0
 8009982:	460c      	mov	r4, r1
 8009984:	b10a      	cbz	r2, 800998a <_printf_common+0x26>
 8009986:	3301      	adds	r3, #1
 8009988:	6033      	str	r3, [r6, #0]
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	0699      	lsls	r1, r3, #26
 800998e:	bf42      	ittt	mi
 8009990:	6833      	ldrmi	r3, [r6, #0]
 8009992:	3302      	addmi	r3, #2
 8009994:	6033      	strmi	r3, [r6, #0]
 8009996:	6825      	ldr	r5, [r4, #0]
 8009998:	f015 0506 	ands.w	r5, r5, #6
 800999c:	d106      	bne.n	80099ac <_printf_common+0x48>
 800999e:	f104 0a19 	add.w	sl, r4, #25
 80099a2:	68e3      	ldr	r3, [r4, #12]
 80099a4:	6832      	ldr	r2, [r6, #0]
 80099a6:	1a9b      	subs	r3, r3, r2
 80099a8:	42ab      	cmp	r3, r5
 80099aa:	dc26      	bgt.n	80099fa <_printf_common+0x96>
 80099ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80099b0:	1e13      	subs	r3, r2, #0
 80099b2:	6822      	ldr	r2, [r4, #0]
 80099b4:	bf18      	it	ne
 80099b6:	2301      	movne	r3, #1
 80099b8:	0692      	lsls	r2, r2, #26
 80099ba:	d42b      	bmi.n	8009a14 <_printf_common+0xb0>
 80099bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099c0:	4649      	mov	r1, r9
 80099c2:	4638      	mov	r0, r7
 80099c4:	47c0      	blx	r8
 80099c6:	3001      	adds	r0, #1
 80099c8:	d01e      	beq.n	8009a08 <_printf_common+0xa4>
 80099ca:	6823      	ldr	r3, [r4, #0]
 80099cc:	68e5      	ldr	r5, [r4, #12]
 80099ce:	6832      	ldr	r2, [r6, #0]
 80099d0:	f003 0306 	and.w	r3, r3, #6
 80099d4:	2b04      	cmp	r3, #4
 80099d6:	bf08      	it	eq
 80099d8:	1aad      	subeq	r5, r5, r2
 80099da:	68a3      	ldr	r3, [r4, #8]
 80099dc:	6922      	ldr	r2, [r4, #16]
 80099de:	bf0c      	ite	eq
 80099e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80099e4:	2500      	movne	r5, #0
 80099e6:	4293      	cmp	r3, r2
 80099e8:	bfc4      	itt	gt
 80099ea:	1a9b      	subgt	r3, r3, r2
 80099ec:	18ed      	addgt	r5, r5, r3
 80099ee:	2600      	movs	r6, #0
 80099f0:	341a      	adds	r4, #26
 80099f2:	42b5      	cmp	r5, r6
 80099f4:	d11a      	bne.n	8009a2c <_printf_common+0xc8>
 80099f6:	2000      	movs	r0, #0
 80099f8:	e008      	b.n	8009a0c <_printf_common+0xa8>
 80099fa:	2301      	movs	r3, #1
 80099fc:	4652      	mov	r2, sl
 80099fe:	4649      	mov	r1, r9
 8009a00:	4638      	mov	r0, r7
 8009a02:	47c0      	blx	r8
 8009a04:	3001      	adds	r0, #1
 8009a06:	d103      	bne.n	8009a10 <_printf_common+0xac>
 8009a08:	f04f 30ff 	mov.w	r0, #4294967295
 8009a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a10:	3501      	adds	r5, #1
 8009a12:	e7c6      	b.n	80099a2 <_printf_common+0x3e>
 8009a14:	18e1      	adds	r1, r4, r3
 8009a16:	1c5a      	adds	r2, r3, #1
 8009a18:	2030      	movs	r0, #48	; 0x30
 8009a1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a1e:	4422      	add	r2, r4
 8009a20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a28:	3302      	adds	r3, #2
 8009a2a:	e7c7      	b.n	80099bc <_printf_common+0x58>
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	4622      	mov	r2, r4
 8009a30:	4649      	mov	r1, r9
 8009a32:	4638      	mov	r0, r7
 8009a34:	47c0      	blx	r8
 8009a36:	3001      	adds	r0, #1
 8009a38:	d0e6      	beq.n	8009a08 <_printf_common+0xa4>
 8009a3a:	3601      	adds	r6, #1
 8009a3c:	e7d9      	b.n	80099f2 <_printf_common+0x8e>
	...

08009a40 <_printf_i>:
 8009a40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009a44:	460c      	mov	r4, r1
 8009a46:	4691      	mov	r9, r2
 8009a48:	7e27      	ldrb	r7, [r4, #24]
 8009a4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a4c:	2f78      	cmp	r7, #120	; 0x78
 8009a4e:	4680      	mov	r8, r0
 8009a50:	469a      	mov	sl, r3
 8009a52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a56:	d807      	bhi.n	8009a68 <_printf_i+0x28>
 8009a58:	2f62      	cmp	r7, #98	; 0x62
 8009a5a:	d80a      	bhi.n	8009a72 <_printf_i+0x32>
 8009a5c:	2f00      	cmp	r7, #0
 8009a5e:	f000 80d8 	beq.w	8009c12 <_printf_i+0x1d2>
 8009a62:	2f58      	cmp	r7, #88	; 0x58
 8009a64:	f000 80a3 	beq.w	8009bae <_printf_i+0x16e>
 8009a68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a70:	e03a      	b.n	8009ae8 <_printf_i+0xa8>
 8009a72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a76:	2b15      	cmp	r3, #21
 8009a78:	d8f6      	bhi.n	8009a68 <_printf_i+0x28>
 8009a7a:	a001      	add	r0, pc, #4	; (adr r0, 8009a80 <_printf_i+0x40>)
 8009a7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a80:	08009ad9 	.word	0x08009ad9
 8009a84:	08009aed 	.word	0x08009aed
 8009a88:	08009a69 	.word	0x08009a69
 8009a8c:	08009a69 	.word	0x08009a69
 8009a90:	08009a69 	.word	0x08009a69
 8009a94:	08009a69 	.word	0x08009a69
 8009a98:	08009aed 	.word	0x08009aed
 8009a9c:	08009a69 	.word	0x08009a69
 8009aa0:	08009a69 	.word	0x08009a69
 8009aa4:	08009a69 	.word	0x08009a69
 8009aa8:	08009a69 	.word	0x08009a69
 8009aac:	08009bf9 	.word	0x08009bf9
 8009ab0:	08009b1d 	.word	0x08009b1d
 8009ab4:	08009bdb 	.word	0x08009bdb
 8009ab8:	08009a69 	.word	0x08009a69
 8009abc:	08009a69 	.word	0x08009a69
 8009ac0:	08009c1b 	.word	0x08009c1b
 8009ac4:	08009a69 	.word	0x08009a69
 8009ac8:	08009b1d 	.word	0x08009b1d
 8009acc:	08009a69 	.word	0x08009a69
 8009ad0:	08009a69 	.word	0x08009a69
 8009ad4:	08009be3 	.word	0x08009be3
 8009ad8:	680b      	ldr	r3, [r1, #0]
 8009ada:	1d1a      	adds	r2, r3, #4
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	600a      	str	r2, [r1, #0]
 8009ae0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009ae4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ae8:	2301      	movs	r3, #1
 8009aea:	e0a3      	b.n	8009c34 <_printf_i+0x1f4>
 8009aec:	6825      	ldr	r5, [r4, #0]
 8009aee:	6808      	ldr	r0, [r1, #0]
 8009af0:	062e      	lsls	r6, r5, #24
 8009af2:	f100 0304 	add.w	r3, r0, #4
 8009af6:	d50a      	bpl.n	8009b0e <_printf_i+0xce>
 8009af8:	6805      	ldr	r5, [r0, #0]
 8009afa:	600b      	str	r3, [r1, #0]
 8009afc:	2d00      	cmp	r5, #0
 8009afe:	da03      	bge.n	8009b08 <_printf_i+0xc8>
 8009b00:	232d      	movs	r3, #45	; 0x2d
 8009b02:	426d      	negs	r5, r5
 8009b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b08:	485e      	ldr	r0, [pc, #376]	; (8009c84 <_printf_i+0x244>)
 8009b0a:	230a      	movs	r3, #10
 8009b0c:	e019      	b.n	8009b42 <_printf_i+0x102>
 8009b0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009b12:	6805      	ldr	r5, [r0, #0]
 8009b14:	600b      	str	r3, [r1, #0]
 8009b16:	bf18      	it	ne
 8009b18:	b22d      	sxthne	r5, r5
 8009b1a:	e7ef      	b.n	8009afc <_printf_i+0xbc>
 8009b1c:	680b      	ldr	r3, [r1, #0]
 8009b1e:	6825      	ldr	r5, [r4, #0]
 8009b20:	1d18      	adds	r0, r3, #4
 8009b22:	6008      	str	r0, [r1, #0]
 8009b24:	0628      	lsls	r0, r5, #24
 8009b26:	d501      	bpl.n	8009b2c <_printf_i+0xec>
 8009b28:	681d      	ldr	r5, [r3, #0]
 8009b2a:	e002      	b.n	8009b32 <_printf_i+0xf2>
 8009b2c:	0669      	lsls	r1, r5, #25
 8009b2e:	d5fb      	bpl.n	8009b28 <_printf_i+0xe8>
 8009b30:	881d      	ldrh	r5, [r3, #0]
 8009b32:	4854      	ldr	r0, [pc, #336]	; (8009c84 <_printf_i+0x244>)
 8009b34:	2f6f      	cmp	r7, #111	; 0x6f
 8009b36:	bf0c      	ite	eq
 8009b38:	2308      	moveq	r3, #8
 8009b3a:	230a      	movne	r3, #10
 8009b3c:	2100      	movs	r1, #0
 8009b3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b42:	6866      	ldr	r6, [r4, #4]
 8009b44:	60a6      	str	r6, [r4, #8]
 8009b46:	2e00      	cmp	r6, #0
 8009b48:	bfa2      	ittt	ge
 8009b4a:	6821      	ldrge	r1, [r4, #0]
 8009b4c:	f021 0104 	bicge.w	r1, r1, #4
 8009b50:	6021      	strge	r1, [r4, #0]
 8009b52:	b90d      	cbnz	r5, 8009b58 <_printf_i+0x118>
 8009b54:	2e00      	cmp	r6, #0
 8009b56:	d04d      	beq.n	8009bf4 <_printf_i+0x1b4>
 8009b58:	4616      	mov	r6, r2
 8009b5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b5e:	fb03 5711 	mls	r7, r3, r1, r5
 8009b62:	5dc7      	ldrb	r7, [r0, r7]
 8009b64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b68:	462f      	mov	r7, r5
 8009b6a:	42bb      	cmp	r3, r7
 8009b6c:	460d      	mov	r5, r1
 8009b6e:	d9f4      	bls.n	8009b5a <_printf_i+0x11a>
 8009b70:	2b08      	cmp	r3, #8
 8009b72:	d10b      	bne.n	8009b8c <_printf_i+0x14c>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	07df      	lsls	r7, r3, #31
 8009b78:	d508      	bpl.n	8009b8c <_printf_i+0x14c>
 8009b7a:	6923      	ldr	r3, [r4, #16]
 8009b7c:	6861      	ldr	r1, [r4, #4]
 8009b7e:	4299      	cmp	r1, r3
 8009b80:	bfde      	ittt	le
 8009b82:	2330      	movle	r3, #48	; 0x30
 8009b84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b8c:	1b92      	subs	r2, r2, r6
 8009b8e:	6122      	str	r2, [r4, #16]
 8009b90:	f8cd a000 	str.w	sl, [sp]
 8009b94:	464b      	mov	r3, r9
 8009b96:	aa03      	add	r2, sp, #12
 8009b98:	4621      	mov	r1, r4
 8009b9a:	4640      	mov	r0, r8
 8009b9c:	f7ff fee2 	bl	8009964 <_printf_common>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d14c      	bne.n	8009c3e <_printf_i+0x1fe>
 8009ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ba8:	b004      	add	sp, #16
 8009baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bae:	4835      	ldr	r0, [pc, #212]	; (8009c84 <_printf_i+0x244>)
 8009bb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	680e      	ldr	r6, [r1, #0]
 8009bb8:	061f      	lsls	r7, r3, #24
 8009bba:	f856 5b04 	ldr.w	r5, [r6], #4
 8009bbe:	600e      	str	r6, [r1, #0]
 8009bc0:	d514      	bpl.n	8009bec <_printf_i+0x1ac>
 8009bc2:	07d9      	lsls	r1, r3, #31
 8009bc4:	bf44      	itt	mi
 8009bc6:	f043 0320 	orrmi.w	r3, r3, #32
 8009bca:	6023      	strmi	r3, [r4, #0]
 8009bcc:	b91d      	cbnz	r5, 8009bd6 <_printf_i+0x196>
 8009bce:	6823      	ldr	r3, [r4, #0]
 8009bd0:	f023 0320 	bic.w	r3, r3, #32
 8009bd4:	6023      	str	r3, [r4, #0]
 8009bd6:	2310      	movs	r3, #16
 8009bd8:	e7b0      	b.n	8009b3c <_printf_i+0xfc>
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	f043 0320 	orr.w	r3, r3, #32
 8009be0:	6023      	str	r3, [r4, #0]
 8009be2:	2378      	movs	r3, #120	; 0x78
 8009be4:	4828      	ldr	r0, [pc, #160]	; (8009c88 <_printf_i+0x248>)
 8009be6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009bea:	e7e3      	b.n	8009bb4 <_printf_i+0x174>
 8009bec:	065e      	lsls	r6, r3, #25
 8009bee:	bf48      	it	mi
 8009bf0:	b2ad      	uxthmi	r5, r5
 8009bf2:	e7e6      	b.n	8009bc2 <_printf_i+0x182>
 8009bf4:	4616      	mov	r6, r2
 8009bf6:	e7bb      	b.n	8009b70 <_printf_i+0x130>
 8009bf8:	680b      	ldr	r3, [r1, #0]
 8009bfa:	6826      	ldr	r6, [r4, #0]
 8009bfc:	6960      	ldr	r0, [r4, #20]
 8009bfe:	1d1d      	adds	r5, r3, #4
 8009c00:	600d      	str	r5, [r1, #0]
 8009c02:	0635      	lsls	r5, r6, #24
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	d501      	bpl.n	8009c0c <_printf_i+0x1cc>
 8009c08:	6018      	str	r0, [r3, #0]
 8009c0a:	e002      	b.n	8009c12 <_printf_i+0x1d2>
 8009c0c:	0671      	lsls	r1, r6, #25
 8009c0e:	d5fb      	bpl.n	8009c08 <_printf_i+0x1c8>
 8009c10:	8018      	strh	r0, [r3, #0]
 8009c12:	2300      	movs	r3, #0
 8009c14:	6123      	str	r3, [r4, #16]
 8009c16:	4616      	mov	r6, r2
 8009c18:	e7ba      	b.n	8009b90 <_printf_i+0x150>
 8009c1a:	680b      	ldr	r3, [r1, #0]
 8009c1c:	1d1a      	adds	r2, r3, #4
 8009c1e:	600a      	str	r2, [r1, #0]
 8009c20:	681e      	ldr	r6, [r3, #0]
 8009c22:	6862      	ldr	r2, [r4, #4]
 8009c24:	2100      	movs	r1, #0
 8009c26:	4630      	mov	r0, r6
 8009c28:	f7f6 fb0a 	bl	8000240 <memchr>
 8009c2c:	b108      	cbz	r0, 8009c32 <_printf_i+0x1f2>
 8009c2e:	1b80      	subs	r0, r0, r6
 8009c30:	6060      	str	r0, [r4, #4]
 8009c32:	6863      	ldr	r3, [r4, #4]
 8009c34:	6123      	str	r3, [r4, #16]
 8009c36:	2300      	movs	r3, #0
 8009c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c3c:	e7a8      	b.n	8009b90 <_printf_i+0x150>
 8009c3e:	6923      	ldr	r3, [r4, #16]
 8009c40:	4632      	mov	r2, r6
 8009c42:	4649      	mov	r1, r9
 8009c44:	4640      	mov	r0, r8
 8009c46:	47d0      	blx	sl
 8009c48:	3001      	adds	r0, #1
 8009c4a:	d0ab      	beq.n	8009ba4 <_printf_i+0x164>
 8009c4c:	6823      	ldr	r3, [r4, #0]
 8009c4e:	079b      	lsls	r3, r3, #30
 8009c50:	d413      	bmi.n	8009c7a <_printf_i+0x23a>
 8009c52:	68e0      	ldr	r0, [r4, #12]
 8009c54:	9b03      	ldr	r3, [sp, #12]
 8009c56:	4298      	cmp	r0, r3
 8009c58:	bfb8      	it	lt
 8009c5a:	4618      	movlt	r0, r3
 8009c5c:	e7a4      	b.n	8009ba8 <_printf_i+0x168>
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4632      	mov	r2, r6
 8009c62:	4649      	mov	r1, r9
 8009c64:	4640      	mov	r0, r8
 8009c66:	47d0      	blx	sl
 8009c68:	3001      	adds	r0, #1
 8009c6a:	d09b      	beq.n	8009ba4 <_printf_i+0x164>
 8009c6c:	3501      	adds	r5, #1
 8009c6e:	68e3      	ldr	r3, [r4, #12]
 8009c70:	9903      	ldr	r1, [sp, #12]
 8009c72:	1a5b      	subs	r3, r3, r1
 8009c74:	42ab      	cmp	r3, r5
 8009c76:	dcf2      	bgt.n	8009c5e <_printf_i+0x21e>
 8009c78:	e7eb      	b.n	8009c52 <_printf_i+0x212>
 8009c7a:	2500      	movs	r5, #0
 8009c7c:	f104 0619 	add.w	r6, r4, #25
 8009c80:	e7f5      	b.n	8009c6e <_printf_i+0x22e>
 8009c82:	bf00      	nop
 8009c84:	08013e32 	.word	0x08013e32
 8009c88:	08013e43 	.word	0x08013e43

08009c8c <iprintf>:
 8009c8c:	b40f      	push	{r0, r1, r2, r3}
 8009c8e:	4b0a      	ldr	r3, [pc, #40]	; (8009cb8 <iprintf+0x2c>)
 8009c90:	b513      	push	{r0, r1, r4, lr}
 8009c92:	681c      	ldr	r4, [r3, #0]
 8009c94:	b124      	cbz	r4, 8009ca0 <iprintf+0x14>
 8009c96:	69a3      	ldr	r3, [r4, #24]
 8009c98:	b913      	cbnz	r3, 8009ca0 <iprintf+0x14>
 8009c9a:	4620      	mov	r0, r4
 8009c9c:	f001 f942 	bl	800af24 <__sinit>
 8009ca0:	ab05      	add	r3, sp, #20
 8009ca2:	9a04      	ldr	r2, [sp, #16]
 8009ca4:	68a1      	ldr	r1, [r4, #8]
 8009ca6:	9301      	str	r3, [sp, #4]
 8009ca8:	4620      	mov	r0, r4
 8009caa:	f001 ff71 	bl	800bb90 <_vfiprintf_r>
 8009cae:	b002      	add	sp, #8
 8009cb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cb4:	b004      	add	sp, #16
 8009cb6:	4770      	bx	lr
 8009cb8:	20000010 	.word	0x20000010

08009cbc <_puts_r>:
 8009cbc:	b570      	push	{r4, r5, r6, lr}
 8009cbe:	460e      	mov	r6, r1
 8009cc0:	4605      	mov	r5, r0
 8009cc2:	b118      	cbz	r0, 8009ccc <_puts_r+0x10>
 8009cc4:	6983      	ldr	r3, [r0, #24]
 8009cc6:	b90b      	cbnz	r3, 8009ccc <_puts_r+0x10>
 8009cc8:	f001 f92c 	bl	800af24 <__sinit>
 8009ccc:	69ab      	ldr	r3, [r5, #24]
 8009cce:	68ac      	ldr	r4, [r5, #8]
 8009cd0:	b913      	cbnz	r3, 8009cd8 <_puts_r+0x1c>
 8009cd2:	4628      	mov	r0, r5
 8009cd4:	f001 f926 	bl	800af24 <__sinit>
 8009cd8:	4b2c      	ldr	r3, [pc, #176]	; (8009d8c <_puts_r+0xd0>)
 8009cda:	429c      	cmp	r4, r3
 8009cdc:	d120      	bne.n	8009d20 <_puts_r+0x64>
 8009cde:	686c      	ldr	r4, [r5, #4]
 8009ce0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ce2:	07db      	lsls	r3, r3, #31
 8009ce4:	d405      	bmi.n	8009cf2 <_puts_r+0x36>
 8009ce6:	89a3      	ldrh	r3, [r4, #12]
 8009ce8:	0598      	lsls	r0, r3, #22
 8009cea:	d402      	bmi.n	8009cf2 <_puts_r+0x36>
 8009cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cee:	f001 f9bc 	bl	800b06a <__retarget_lock_acquire_recursive>
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	0719      	lsls	r1, r3, #28
 8009cf6:	d51d      	bpl.n	8009d34 <_puts_r+0x78>
 8009cf8:	6923      	ldr	r3, [r4, #16]
 8009cfa:	b1db      	cbz	r3, 8009d34 <_puts_r+0x78>
 8009cfc:	3e01      	subs	r6, #1
 8009cfe:	68a3      	ldr	r3, [r4, #8]
 8009d00:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d04:	3b01      	subs	r3, #1
 8009d06:	60a3      	str	r3, [r4, #8]
 8009d08:	bb39      	cbnz	r1, 8009d5a <_puts_r+0x9e>
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	da38      	bge.n	8009d80 <_puts_r+0xc4>
 8009d0e:	4622      	mov	r2, r4
 8009d10:	210a      	movs	r1, #10
 8009d12:	4628      	mov	r0, r5
 8009d14:	f000 f8b4 	bl	8009e80 <__swbuf_r>
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d011      	beq.n	8009d40 <_puts_r+0x84>
 8009d1c:	250a      	movs	r5, #10
 8009d1e:	e011      	b.n	8009d44 <_puts_r+0x88>
 8009d20:	4b1b      	ldr	r3, [pc, #108]	; (8009d90 <_puts_r+0xd4>)
 8009d22:	429c      	cmp	r4, r3
 8009d24:	d101      	bne.n	8009d2a <_puts_r+0x6e>
 8009d26:	68ac      	ldr	r4, [r5, #8]
 8009d28:	e7da      	b.n	8009ce0 <_puts_r+0x24>
 8009d2a:	4b1a      	ldr	r3, [pc, #104]	; (8009d94 <_puts_r+0xd8>)
 8009d2c:	429c      	cmp	r4, r3
 8009d2e:	bf08      	it	eq
 8009d30:	68ec      	ldreq	r4, [r5, #12]
 8009d32:	e7d5      	b.n	8009ce0 <_puts_r+0x24>
 8009d34:	4621      	mov	r1, r4
 8009d36:	4628      	mov	r0, r5
 8009d38:	f000 f8f4 	bl	8009f24 <__swsetup_r>
 8009d3c:	2800      	cmp	r0, #0
 8009d3e:	d0dd      	beq.n	8009cfc <_puts_r+0x40>
 8009d40:	f04f 35ff 	mov.w	r5, #4294967295
 8009d44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009d46:	07da      	lsls	r2, r3, #31
 8009d48:	d405      	bmi.n	8009d56 <_puts_r+0x9a>
 8009d4a:	89a3      	ldrh	r3, [r4, #12]
 8009d4c:	059b      	lsls	r3, r3, #22
 8009d4e:	d402      	bmi.n	8009d56 <_puts_r+0x9a>
 8009d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d52:	f001 f98b 	bl	800b06c <__retarget_lock_release_recursive>
 8009d56:	4628      	mov	r0, r5
 8009d58:	bd70      	pop	{r4, r5, r6, pc}
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	da04      	bge.n	8009d68 <_puts_r+0xac>
 8009d5e:	69a2      	ldr	r2, [r4, #24]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	dc06      	bgt.n	8009d72 <_puts_r+0xb6>
 8009d64:	290a      	cmp	r1, #10
 8009d66:	d004      	beq.n	8009d72 <_puts_r+0xb6>
 8009d68:	6823      	ldr	r3, [r4, #0]
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	6022      	str	r2, [r4, #0]
 8009d6e:	7019      	strb	r1, [r3, #0]
 8009d70:	e7c5      	b.n	8009cfe <_puts_r+0x42>
 8009d72:	4622      	mov	r2, r4
 8009d74:	4628      	mov	r0, r5
 8009d76:	f000 f883 	bl	8009e80 <__swbuf_r>
 8009d7a:	3001      	adds	r0, #1
 8009d7c:	d1bf      	bne.n	8009cfe <_puts_r+0x42>
 8009d7e:	e7df      	b.n	8009d40 <_puts_r+0x84>
 8009d80:	6823      	ldr	r3, [r4, #0]
 8009d82:	250a      	movs	r5, #10
 8009d84:	1c5a      	adds	r2, r3, #1
 8009d86:	6022      	str	r2, [r4, #0]
 8009d88:	701d      	strb	r5, [r3, #0]
 8009d8a:	e7db      	b.n	8009d44 <_puts_r+0x88>
 8009d8c:	08013f08 	.word	0x08013f08
 8009d90:	08013f28 	.word	0x08013f28
 8009d94:	08013ee8 	.word	0x08013ee8

08009d98 <puts>:
 8009d98:	4b02      	ldr	r3, [pc, #8]	; (8009da4 <puts+0xc>)
 8009d9a:	4601      	mov	r1, r0
 8009d9c:	6818      	ldr	r0, [r3, #0]
 8009d9e:	f7ff bf8d 	b.w	8009cbc <_puts_r>
 8009da2:	bf00      	nop
 8009da4:	20000010 	.word	0x20000010

08009da8 <_sbrk_r>:
 8009da8:	b538      	push	{r3, r4, r5, lr}
 8009daa:	4d06      	ldr	r5, [pc, #24]	; (8009dc4 <_sbrk_r+0x1c>)
 8009dac:	2300      	movs	r3, #0
 8009dae:	4604      	mov	r4, r0
 8009db0:	4608      	mov	r0, r1
 8009db2:	602b      	str	r3, [r5, #0]
 8009db4:	f7f8 fafa 	bl	80023ac <_sbrk>
 8009db8:	1c43      	adds	r3, r0, #1
 8009dba:	d102      	bne.n	8009dc2 <_sbrk_r+0x1a>
 8009dbc:	682b      	ldr	r3, [r5, #0]
 8009dbe:	b103      	cbz	r3, 8009dc2 <_sbrk_r+0x1a>
 8009dc0:	6023      	str	r3, [r4, #0]
 8009dc2:	bd38      	pop	{r3, r4, r5, pc}
 8009dc4:	20000ee4 	.word	0x20000ee4

08009dc8 <sniprintf>:
 8009dc8:	b40c      	push	{r2, r3}
 8009dca:	b530      	push	{r4, r5, lr}
 8009dcc:	4b17      	ldr	r3, [pc, #92]	; (8009e2c <sniprintf+0x64>)
 8009dce:	1e0c      	subs	r4, r1, #0
 8009dd0:	681d      	ldr	r5, [r3, #0]
 8009dd2:	b09d      	sub	sp, #116	; 0x74
 8009dd4:	da08      	bge.n	8009de8 <sniprintf+0x20>
 8009dd6:	238b      	movs	r3, #139	; 0x8b
 8009dd8:	602b      	str	r3, [r5, #0]
 8009dda:	f04f 30ff 	mov.w	r0, #4294967295
 8009dde:	b01d      	add	sp, #116	; 0x74
 8009de0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009de4:	b002      	add	sp, #8
 8009de6:	4770      	bx	lr
 8009de8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009dec:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009df0:	bf14      	ite	ne
 8009df2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009df6:	4623      	moveq	r3, r4
 8009df8:	9304      	str	r3, [sp, #16]
 8009dfa:	9307      	str	r3, [sp, #28]
 8009dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e00:	9002      	str	r0, [sp, #8]
 8009e02:	9006      	str	r0, [sp, #24]
 8009e04:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009e08:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009e0a:	ab21      	add	r3, sp, #132	; 0x84
 8009e0c:	a902      	add	r1, sp, #8
 8009e0e:	4628      	mov	r0, r5
 8009e10:	9301      	str	r3, [sp, #4]
 8009e12:	f001 fd93 	bl	800b93c <_svfiprintf_r>
 8009e16:	1c43      	adds	r3, r0, #1
 8009e18:	bfbc      	itt	lt
 8009e1a:	238b      	movlt	r3, #139	; 0x8b
 8009e1c:	602b      	strlt	r3, [r5, #0]
 8009e1e:	2c00      	cmp	r4, #0
 8009e20:	d0dd      	beq.n	8009dde <sniprintf+0x16>
 8009e22:	9b02      	ldr	r3, [sp, #8]
 8009e24:	2200      	movs	r2, #0
 8009e26:	701a      	strb	r2, [r3, #0]
 8009e28:	e7d9      	b.n	8009dde <sniprintf+0x16>
 8009e2a:	bf00      	nop
 8009e2c:	20000010 	.word	0x20000010

08009e30 <siprintf>:
 8009e30:	b40e      	push	{r1, r2, r3}
 8009e32:	b500      	push	{lr}
 8009e34:	b09c      	sub	sp, #112	; 0x70
 8009e36:	ab1d      	add	r3, sp, #116	; 0x74
 8009e38:	9002      	str	r0, [sp, #8]
 8009e3a:	9006      	str	r0, [sp, #24]
 8009e3c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e40:	4809      	ldr	r0, [pc, #36]	; (8009e68 <siprintf+0x38>)
 8009e42:	9107      	str	r1, [sp, #28]
 8009e44:	9104      	str	r1, [sp, #16]
 8009e46:	4909      	ldr	r1, [pc, #36]	; (8009e6c <siprintf+0x3c>)
 8009e48:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e4c:	9105      	str	r1, [sp, #20]
 8009e4e:	6800      	ldr	r0, [r0, #0]
 8009e50:	9301      	str	r3, [sp, #4]
 8009e52:	a902      	add	r1, sp, #8
 8009e54:	f001 fd72 	bl	800b93c <_svfiprintf_r>
 8009e58:	9b02      	ldr	r3, [sp, #8]
 8009e5a:	2200      	movs	r2, #0
 8009e5c:	701a      	strb	r2, [r3, #0]
 8009e5e:	b01c      	add	sp, #112	; 0x70
 8009e60:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e64:	b003      	add	sp, #12
 8009e66:	4770      	bx	lr
 8009e68:	20000010 	.word	0x20000010
 8009e6c:	ffff0208 	.word	0xffff0208

08009e70 <strcpy>:
 8009e70:	4603      	mov	r3, r0
 8009e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e76:	f803 2b01 	strb.w	r2, [r3], #1
 8009e7a:	2a00      	cmp	r2, #0
 8009e7c:	d1f9      	bne.n	8009e72 <strcpy+0x2>
 8009e7e:	4770      	bx	lr

08009e80 <__swbuf_r>:
 8009e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e82:	460e      	mov	r6, r1
 8009e84:	4614      	mov	r4, r2
 8009e86:	4605      	mov	r5, r0
 8009e88:	b118      	cbz	r0, 8009e92 <__swbuf_r+0x12>
 8009e8a:	6983      	ldr	r3, [r0, #24]
 8009e8c:	b90b      	cbnz	r3, 8009e92 <__swbuf_r+0x12>
 8009e8e:	f001 f849 	bl	800af24 <__sinit>
 8009e92:	4b21      	ldr	r3, [pc, #132]	; (8009f18 <__swbuf_r+0x98>)
 8009e94:	429c      	cmp	r4, r3
 8009e96:	d12b      	bne.n	8009ef0 <__swbuf_r+0x70>
 8009e98:	686c      	ldr	r4, [r5, #4]
 8009e9a:	69a3      	ldr	r3, [r4, #24]
 8009e9c:	60a3      	str	r3, [r4, #8]
 8009e9e:	89a3      	ldrh	r3, [r4, #12]
 8009ea0:	071a      	lsls	r2, r3, #28
 8009ea2:	d52f      	bpl.n	8009f04 <__swbuf_r+0x84>
 8009ea4:	6923      	ldr	r3, [r4, #16]
 8009ea6:	b36b      	cbz	r3, 8009f04 <__swbuf_r+0x84>
 8009ea8:	6923      	ldr	r3, [r4, #16]
 8009eaa:	6820      	ldr	r0, [r4, #0]
 8009eac:	1ac0      	subs	r0, r0, r3
 8009eae:	6963      	ldr	r3, [r4, #20]
 8009eb0:	b2f6      	uxtb	r6, r6
 8009eb2:	4283      	cmp	r3, r0
 8009eb4:	4637      	mov	r7, r6
 8009eb6:	dc04      	bgt.n	8009ec2 <__swbuf_r+0x42>
 8009eb8:	4621      	mov	r1, r4
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f000 ff9e 	bl	800adfc <_fflush_r>
 8009ec0:	bb30      	cbnz	r0, 8009f10 <__swbuf_r+0x90>
 8009ec2:	68a3      	ldr	r3, [r4, #8]
 8009ec4:	3b01      	subs	r3, #1
 8009ec6:	60a3      	str	r3, [r4, #8]
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	1c5a      	adds	r2, r3, #1
 8009ecc:	6022      	str	r2, [r4, #0]
 8009ece:	701e      	strb	r6, [r3, #0]
 8009ed0:	6963      	ldr	r3, [r4, #20]
 8009ed2:	3001      	adds	r0, #1
 8009ed4:	4283      	cmp	r3, r0
 8009ed6:	d004      	beq.n	8009ee2 <__swbuf_r+0x62>
 8009ed8:	89a3      	ldrh	r3, [r4, #12]
 8009eda:	07db      	lsls	r3, r3, #31
 8009edc:	d506      	bpl.n	8009eec <__swbuf_r+0x6c>
 8009ede:	2e0a      	cmp	r6, #10
 8009ee0:	d104      	bne.n	8009eec <__swbuf_r+0x6c>
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	f000 ff89 	bl	800adfc <_fflush_r>
 8009eea:	b988      	cbnz	r0, 8009f10 <__swbuf_r+0x90>
 8009eec:	4638      	mov	r0, r7
 8009eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ef0:	4b0a      	ldr	r3, [pc, #40]	; (8009f1c <__swbuf_r+0x9c>)
 8009ef2:	429c      	cmp	r4, r3
 8009ef4:	d101      	bne.n	8009efa <__swbuf_r+0x7a>
 8009ef6:	68ac      	ldr	r4, [r5, #8]
 8009ef8:	e7cf      	b.n	8009e9a <__swbuf_r+0x1a>
 8009efa:	4b09      	ldr	r3, [pc, #36]	; (8009f20 <__swbuf_r+0xa0>)
 8009efc:	429c      	cmp	r4, r3
 8009efe:	bf08      	it	eq
 8009f00:	68ec      	ldreq	r4, [r5, #12]
 8009f02:	e7ca      	b.n	8009e9a <__swbuf_r+0x1a>
 8009f04:	4621      	mov	r1, r4
 8009f06:	4628      	mov	r0, r5
 8009f08:	f000 f80c 	bl	8009f24 <__swsetup_r>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d0cb      	beq.n	8009ea8 <__swbuf_r+0x28>
 8009f10:	f04f 37ff 	mov.w	r7, #4294967295
 8009f14:	e7ea      	b.n	8009eec <__swbuf_r+0x6c>
 8009f16:	bf00      	nop
 8009f18:	08013f08 	.word	0x08013f08
 8009f1c:	08013f28 	.word	0x08013f28
 8009f20:	08013ee8 	.word	0x08013ee8

08009f24 <__swsetup_r>:
 8009f24:	4b32      	ldr	r3, [pc, #200]	; (8009ff0 <__swsetup_r+0xcc>)
 8009f26:	b570      	push	{r4, r5, r6, lr}
 8009f28:	681d      	ldr	r5, [r3, #0]
 8009f2a:	4606      	mov	r6, r0
 8009f2c:	460c      	mov	r4, r1
 8009f2e:	b125      	cbz	r5, 8009f3a <__swsetup_r+0x16>
 8009f30:	69ab      	ldr	r3, [r5, #24]
 8009f32:	b913      	cbnz	r3, 8009f3a <__swsetup_r+0x16>
 8009f34:	4628      	mov	r0, r5
 8009f36:	f000 fff5 	bl	800af24 <__sinit>
 8009f3a:	4b2e      	ldr	r3, [pc, #184]	; (8009ff4 <__swsetup_r+0xd0>)
 8009f3c:	429c      	cmp	r4, r3
 8009f3e:	d10f      	bne.n	8009f60 <__swsetup_r+0x3c>
 8009f40:	686c      	ldr	r4, [r5, #4]
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f48:	0719      	lsls	r1, r3, #28
 8009f4a:	d42c      	bmi.n	8009fa6 <__swsetup_r+0x82>
 8009f4c:	06dd      	lsls	r5, r3, #27
 8009f4e:	d411      	bmi.n	8009f74 <__swsetup_r+0x50>
 8009f50:	2309      	movs	r3, #9
 8009f52:	6033      	str	r3, [r6, #0]
 8009f54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f58:	81a3      	strh	r3, [r4, #12]
 8009f5a:	f04f 30ff 	mov.w	r0, #4294967295
 8009f5e:	e03e      	b.n	8009fde <__swsetup_r+0xba>
 8009f60:	4b25      	ldr	r3, [pc, #148]	; (8009ff8 <__swsetup_r+0xd4>)
 8009f62:	429c      	cmp	r4, r3
 8009f64:	d101      	bne.n	8009f6a <__swsetup_r+0x46>
 8009f66:	68ac      	ldr	r4, [r5, #8]
 8009f68:	e7eb      	b.n	8009f42 <__swsetup_r+0x1e>
 8009f6a:	4b24      	ldr	r3, [pc, #144]	; (8009ffc <__swsetup_r+0xd8>)
 8009f6c:	429c      	cmp	r4, r3
 8009f6e:	bf08      	it	eq
 8009f70:	68ec      	ldreq	r4, [r5, #12]
 8009f72:	e7e6      	b.n	8009f42 <__swsetup_r+0x1e>
 8009f74:	0758      	lsls	r0, r3, #29
 8009f76:	d512      	bpl.n	8009f9e <__swsetup_r+0x7a>
 8009f78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f7a:	b141      	cbz	r1, 8009f8e <__swsetup_r+0x6a>
 8009f7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f80:	4299      	cmp	r1, r3
 8009f82:	d002      	beq.n	8009f8a <__swsetup_r+0x66>
 8009f84:	4630      	mov	r0, r6
 8009f86:	f7ff f96d 	bl	8009264 <_free_r>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	6363      	str	r3, [r4, #52]	; 0x34
 8009f8e:	89a3      	ldrh	r3, [r4, #12]
 8009f90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f94:	81a3      	strh	r3, [r4, #12]
 8009f96:	2300      	movs	r3, #0
 8009f98:	6063      	str	r3, [r4, #4]
 8009f9a:	6923      	ldr	r3, [r4, #16]
 8009f9c:	6023      	str	r3, [r4, #0]
 8009f9e:	89a3      	ldrh	r3, [r4, #12]
 8009fa0:	f043 0308 	orr.w	r3, r3, #8
 8009fa4:	81a3      	strh	r3, [r4, #12]
 8009fa6:	6923      	ldr	r3, [r4, #16]
 8009fa8:	b94b      	cbnz	r3, 8009fbe <__swsetup_r+0x9a>
 8009faa:	89a3      	ldrh	r3, [r4, #12]
 8009fac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fb4:	d003      	beq.n	8009fbe <__swsetup_r+0x9a>
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	4630      	mov	r0, r6
 8009fba:	f001 f87d 	bl	800b0b8 <__smakebuf_r>
 8009fbe:	89a0      	ldrh	r0, [r4, #12]
 8009fc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fc4:	f010 0301 	ands.w	r3, r0, #1
 8009fc8:	d00a      	beq.n	8009fe0 <__swsetup_r+0xbc>
 8009fca:	2300      	movs	r3, #0
 8009fcc:	60a3      	str	r3, [r4, #8]
 8009fce:	6963      	ldr	r3, [r4, #20]
 8009fd0:	425b      	negs	r3, r3
 8009fd2:	61a3      	str	r3, [r4, #24]
 8009fd4:	6923      	ldr	r3, [r4, #16]
 8009fd6:	b943      	cbnz	r3, 8009fea <__swsetup_r+0xc6>
 8009fd8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009fdc:	d1ba      	bne.n	8009f54 <__swsetup_r+0x30>
 8009fde:	bd70      	pop	{r4, r5, r6, pc}
 8009fe0:	0781      	lsls	r1, r0, #30
 8009fe2:	bf58      	it	pl
 8009fe4:	6963      	ldrpl	r3, [r4, #20]
 8009fe6:	60a3      	str	r3, [r4, #8]
 8009fe8:	e7f4      	b.n	8009fd4 <__swsetup_r+0xb0>
 8009fea:	2000      	movs	r0, #0
 8009fec:	e7f7      	b.n	8009fde <__swsetup_r+0xba>
 8009fee:	bf00      	nop
 8009ff0:	20000010 	.word	0x20000010
 8009ff4:	08013f08 	.word	0x08013f08
 8009ff8:	08013f28 	.word	0x08013f28
 8009ffc:	08013ee8 	.word	0x08013ee8

0800a000 <quorem>:
 800a000:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a004:	6903      	ldr	r3, [r0, #16]
 800a006:	690c      	ldr	r4, [r1, #16]
 800a008:	42a3      	cmp	r3, r4
 800a00a:	4607      	mov	r7, r0
 800a00c:	f2c0 8081 	blt.w	800a112 <quorem+0x112>
 800a010:	3c01      	subs	r4, #1
 800a012:	f101 0814 	add.w	r8, r1, #20
 800a016:	f100 0514 	add.w	r5, r0, #20
 800a01a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a01e:	9301      	str	r3, [sp, #4]
 800a020:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a024:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a028:	3301      	adds	r3, #1
 800a02a:	429a      	cmp	r2, r3
 800a02c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a030:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a034:	fbb2 f6f3 	udiv	r6, r2, r3
 800a038:	d331      	bcc.n	800a09e <quorem+0x9e>
 800a03a:	f04f 0e00 	mov.w	lr, #0
 800a03e:	4640      	mov	r0, r8
 800a040:	46ac      	mov	ip, r5
 800a042:	46f2      	mov	sl, lr
 800a044:	f850 2b04 	ldr.w	r2, [r0], #4
 800a048:	b293      	uxth	r3, r2
 800a04a:	fb06 e303 	mla	r3, r6, r3, lr
 800a04e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a052:	b29b      	uxth	r3, r3
 800a054:	ebaa 0303 	sub.w	r3, sl, r3
 800a058:	0c12      	lsrs	r2, r2, #16
 800a05a:	f8dc a000 	ldr.w	sl, [ip]
 800a05e:	fb06 e202 	mla	r2, r6, r2, lr
 800a062:	fa13 f38a 	uxtah	r3, r3, sl
 800a066:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a06a:	fa1f fa82 	uxth.w	sl, r2
 800a06e:	f8dc 2000 	ldr.w	r2, [ip]
 800a072:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a076:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a080:	4581      	cmp	r9, r0
 800a082:	f84c 3b04 	str.w	r3, [ip], #4
 800a086:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a08a:	d2db      	bcs.n	800a044 <quorem+0x44>
 800a08c:	f855 300b 	ldr.w	r3, [r5, fp]
 800a090:	b92b      	cbnz	r3, 800a09e <quorem+0x9e>
 800a092:	9b01      	ldr	r3, [sp, #4]
 800a094:	3b04      	subs	r3, #4
 800a096:	429d      	cmp	r5, r3
 800a098:	461a      	mov	r2, r3
 800a09a:	d32e      	bcc.n	800a0fa <quorem+0xfa>
 800a09c:	613c      	str	r4, [r7, #16]
 800a09e:	4638      	mov	r0, r7
 800a0a0:	f001 fae2 	bl	800b668 <__mcmp>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	db24      	blt.n	800a0f2 <quorem+0xf2>
 800a0a8:	3601      	adds	r6, #1
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	f04f 0c00 	mov.w	ip, #0
 800a0b0:	f858 2b04 	ldr.w	r2, [r8], #4
 800a0b4:	f8d0 e000 	ldr.w	lr, [r0]
 800a0b8:	b293      	uxth	r3, r2
 800a0ba:	ebac 0303 	sub.w	r3, ip, r3
 800a0be:	0c12      	lsrs	r2, r2, #16
 800a0c0:	fa13 f38e 	uxtah	r3, r3, lr
 800a0c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a0c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0d2:	45c1      	cmp	r9, r8
 800a0d4:	f840 3b04 	str.w	r3, [r0], #4
 800a0d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a0dc:	d2e8      	bcs.n	800a0b0 <quorem+0xb0>
 800a0de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0e6:	b922      	cbnz	r2, 800a0f2 <quorem+0xf2>
 800a0e8:	3b04      	subs	r3, #4
 800a0ea:	429d      	cmp	r5, r3
 800a0ec:	461a      	mov	r2, r3
 800a0ee:	d30a      	bcc.n	800a106 <quorem+0x106>
 800a0f0:	613c      	str	r4, [r7, #16]
 800a0f2:	4630      	mov	r0, r6
 800a0f4:	b003      	add	sp, #12
 800a0f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fa:	6812      	ldr	r2, [r2, #0]
 800a0fc:	3b04      	subs	r3, #4
 800a0fe:	2a00      	cmp	r2, #0
 800a100:	d1cc      	bne.n	800a09c <quorem+0x9c>
 800a102:	3c01      	subs	r4, #1
 800a104:	e7c7      	b.n	800a096 <quorem+0x96>
 800a106:	6812      	ldr	r2, [r2, #0]
 800a108:	3b04      	subs	r3, #4
 800a10a:	2a00      	cmp	r2, #0
 800a10c:	d1f0      	bne.n	800a0f0 <quorem+0xf0>
 800a10e:	3c01      	subs	r4, #1
 800a110:	e7eb      	b.n	800a0ea <quorem+0xea>
 800a112:	2000      	movs	r0, #0
 800a114:	e7ee      	b.n	800a0f4 <quorem+0xf4>
	...

0800a118 <_dtoa_r>:
 800a118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a11c:	ed2d 8b02 	vpush	{d8}
 800a120:	ec57 6b10 	vmov	r6, r7, d0
 800a124:	b095      	sub	sp, #84	; 0x54
 800a126:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a128:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a12c:	9105      	str	r1, [sp, #20]
 800a12e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a132:	4604      	mov	r4, r0
 800a134:	9209      	str	r2, [sp, #36]	; 0x24
 800a136:	930f      	str	r3, [sp, #60]	; 0x3c
 800a138:	b975      	cbnz	r5, 800a158 <_dtoa_r+0x40>
 800a13a:	2010      	movs	r0, #16
 800a13c:	f7ff f87a 	bl	8009234 <malloc>
 800a140:	4602      	mov	r2, r0
 800a142:	6260      	str	r0, [r4, #36]	; 0x24
 800a144:	b920      	cbnz	r0, 800a150 <_dtoa_r+0x38>
 800a146:	4bb2      	ldr	r3, [pc, #712]	; (800a410 <_dtoa_r+0x2f8>)
 800a148:	21ea      	movs	r1, #234	; 0xea
 800a14a:	48b2      	ldr	r0, [pc, #712]	; (800a414 <_dtoa_r+0x2fc>)
 800a14c:	f001 fea6 	bl	800be9c <__assert_func>
 800a150:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a154:	6005      	str	r5, [r0, #0]
 800a156:	60c5      	str	r5, [r0, #12]
 800a158:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a15a:	6819      	ldr	r1, [r3, #0]
 800a15c:	b151      	cbz	r1, 800a174 <_dtoa_r+0x5c>
 800a15e:	685a      	ldr	r2, [r3, #4]
 800a160:	604a      	str	r2, [r1, #4]
 800a162:	2301      	movs	r3, #1
 800a164:	4093      	lsls	r3, r2
 800a166:	608b      	str	r3, [r1, #8]
 800a168:	4620      	mov	r0, r4
 800a16a:	f001 f83f 	bl	800b1ec <_Bfree>
 800a16e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a170:	2200      	movs	r2, #0
 800a172:	601a      	str	r2, [r3, #0]
 800a174:	1e3b      	subs	r3, r7, #0
 800a176:	bfb9      	ittee	lt
 800a178:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a17c:	9303      	strlt	r3, [sp, #12]
 800a17e:	2300      	movge	r3, #0
 800a180:	f8c8 3000 	strge.w	r3, [r8]
 800a184:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a188:	4ba3      	ldr	r3, [pc, #652]	; (800a418 <_dtoa_r+0x300>)
 800a18a:	bfbc      	itt	lt
 800a18c:	2201      	movlt	r2, #1
 800a18e:	f8c8 2000 	strlt.w	r2, [r8]
 800a192:	ea33 0309 	bics.w	r3, r3, r9
 800a196:	d11b      	bne.n	800a1d0 <_dtoa_r+0xb8>
 800a198:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a19a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a19e:	6013      	str	r3, [r2, #0]
 800a1a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1a4:	4333      	orrs	r3, r6
 800a1a6:	f000 857a 	beq.w	800ac9e <_dtoa_r+0xb86>
 800a1aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1ac:	b963      	cbnz	r3, 800a1c8 <_dtoa_r+0xb0>
 800a1ae:	4b9b      	ldr	r3, [pc, #620]	; (800a41c <_dtoa_r+0x304>)
 800a1b0:	e024      	b.n	800a1fc <_dtoa_r+0xe4>
 800a1b2:	4b9b      	ldr	r3, [pc, #620]	; (800a420 <_dtoa_r+0x308>)
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	3308      	adds	r3, #8
 800a1b8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	9800      	ldr	r0, [sp, #0]
 800a1be:	b015      	add	sp, #84	; 0x54
 800a1c0:	ecbd 8b02 	vpop	{d8}
 800a1c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1c8:	4b94      	ldr	r3, [pc, #592]	; (800a41c <_dtoa_r+0x304>)
 800a1ca:	9300      	str	r3, [sp, #0]
 800a1cc:	3303      	adds	r3, #3
 800a1ce:	e7f3      	b.n	800a1b8 <_dtoa_r+0xa0>
 800a1d0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1d4:	2200      	movs	r2, #0
 800a1d6:	ec51 0b17 	vmov	r0, r1, d7
 800a1da:	2300      	movs	r3, #0
 800a1dc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a1e0:	f7f6 fca2 	bl	8000b28 <__aeabi_dcmpeq>
 800a1e4:	4680      	mov	r8, r0
 800a1e6:	b158      	cbz	r0, 800a200 <_dtoa_r+0xe8>
 800a1e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1ea:	2301      	movs	r3, #1
 800a1ec:	6013      	str	r3, [r2, #0]
 800a1ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	f000 8551 	beq.w	800ac98 <_dtoa_r+0xb80>
 800a1f6:	488b      	ldr	r0, [pc, #556]	; (800a424 <_dtoa_r+0x30c>)
 800a1f8:	6018      	str	r0, [r3, #0]
 800a1fa:	1e43      	subs	r3, r0, #1
 800a1fc:	9300      	str	r3, [sp, #0]
 800a1fe:	e7dd      	b.n	800a1bc <_dtoa_r+0xa4>
 800a200:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a204:	aa12      	add	r2, sp, #72	; 0x48
 800a206:	a913      	add	r1, sp, #76	; 0x4c
 800a208:	4620      	mov	r0, r4
 800a20a:	f001 fad1 	bl	800b7b0 <__d2b>
 800a20e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a212:	4683      	mov	fp, r0
 800a214:	2d00      	cmp	r5, #0
 800a216:	d07c      	beq.n	800a312 <_dtoa_r+0x1fa>
 800a218:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a21a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a21e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a222:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a226:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a22a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a22e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a232:	4b7d      	ldr	r3, [pc, #500]	; (800a428 <_dtoa_r+0x310>)
 800a234:	2200      	movs	r2, #0
 800a236:	4630      	mov	r0, r6
 800a238:	4639      	mov	r1, r7
 800a23a:	f7f6 f855 	bl	80002e8 <__aeabi_dsub>
 800a23e:	a36e      	add	r3, pc, #440	; (adr r3, 800a3f8 <_dtoa_r+0x2e0>)
 800a240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a244:	f7f6 fa08 	bl	8000658 <__aeabi_dmul>
 800a248:	a36d      	add	r3, pc, #436	; (adr r3, 800a400 <_dtoa_r+0x2e8>)
 800a24a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a24e:	f7f6 f84d 	bl	80002ec <__adddf3>
 800a252:	4606      	mov	r6, r0
 800a254:	4628      	mov	r0, r5
 800a256:	460f      	mov	r7, r1
 800a258:	f7f6 f994 	bl	8000584 <__aeabi_i2d>
 800a25c:	a36a      	add	r3, pc, #424	; (adr r3, 800a408 <_dtoa_r+0x2f0>)
 800a25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a262:	f7f6 f9f9 	bl	8000658 <__aeabi_dmul>
 800a266:	4602      	mov	r2, r0
 800a268:	460b      	mov	r3, r1
 800a26a:	4630      	mov	r0, r6
 800a26c:	4639      	mov	r1, r7
 800a26e:	f7f6 f83d 	bl	80002ec <__adddf3>
 800a272:	4606      	mov	r6, r0
 800a274:	460f      	mov	r7, r1
 800a276:	f7f6 fc9f 	bl	8000bb8 <__aeabi_d2iz>
 800a27a:	2200      	movs	r2, #0
 800a27c:	4682      	mov	sl, r0
 800a27e:	2300      	movs	r3, #0
 800a280:	4630      	mov	r0, r6
 800a282:	4639      	mov	r1, r7
 800a284:	f7f6 fc5a 	bl	8000b3c <__aeabi_dcmplt>
 800a288:	b148      	cbz	r0, 800a29e <_dtoa_r+0x186>
 800a28a:	4650      	mov	r0, sl
 800a28c:	f7f6 f97a 	bl	8000584 <__aeabi_i2d>
 800a290:	4632      	mov	r2, r6
 800a292:	463b      	mov	r3, r7
 800a294:	f7f6 fc48 	bl	8000b28 <__aeabi_dcmpeq>
 800a298:	b908      	cbnz	r0, 800a29e <_dtoa_r+0x186>
 800a29a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a29e:	f1ba 0f16 	cmp.w	sl, #22
 800a2a2:	d854      	bhi.n	800a34e <_dtoa_r+0x236>
 800a2a4:	4b61      	ldr	r3, [pc, #388]	; (800a42c <_dtoa_r+0x314>)
 800a2a6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a2b2:	f7f6 fc43 	bl	8000b3c <__aeabi_dcmplt>
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	d04b      	beq.n	800a352 <_dtoa_r+0x23a>
 800a2ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a2be:	2300      	movs	r3, #0
 800a2c0:	930e      	str	r3, [sp, #56]	; 0x38
 800a2c2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a2c4:	1b5d      	subs	r5, r3, r5
 800a2c6:	1e6b      	subs	r3, r5, #1
 800a2c8:	9304      	str	r3, [sp, #16]
 800a2ca:	bf43      	ittte	mi
 800a2cc:	2300      	movmi	r3, #0
 800a2ce:	f1c5 0801 	rsbmi	r8, r5, #1
 800a2d2:	9304      	strmi	r3, [sp, #16]
 800a2d4:	f04f 0800 	movpl.w	r8, #0
 800a2d8:	f1ba 0f00 	cmp.w	sl, #0
 800a2dc:	db3b      	blt.n	800a356 <_dtoa_r+0x23e>
 800a2de:	9b04      	ldr	r3, [sp, #16]
 800a2e0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a2e4:	4453      	add	r3, sl
 800a2e6:	9304      	str	r3, [sp, #16]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	9306      	str	r3, [sp, #24]
 800a2ec:	9b05      	ldr	r3, [sp, #20]
 800a2ee:	2b09      	cmp	r3, #9
 800a2f0:	d869      	bhi.n	800a3c6 <_dtoa_r+0x2ae>
 800a2f2:	2b05      	cmp	r3, #5
 800a2f4:	bfc4      	itt	gt
 800a2f6:	3b04      	subgt	r3, #4
 800a2f8:	9305      	strgt	r3, [sp, #20]
 800a2fa:	9b05      	ldr	r3, [sp, #20]
 800a2fc:	f1a3 0302 	sub.w	r3, r3, #2
 800a300:	bfcc      	ite	gt
 800a302:	2500      	movgt	r5, #0
 800a304:	2501      	movle	r5, #1
 800a306:	2b03      	cmp	r3, #3
 800a308:	d869      	bhi.n	800a3de <_dtoa_r+0x2c6>
 800a30a:	e8df f003 	tbb	[pc, r3]
 800a30e:	4e2c      	.short	0x4e2c
 800a310:	5a4c      	.short	0x5a4c
 800a312:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a316:	441d      	add	r5, r3
 800a318:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a31c:	2b20      	cmp	r3, #32
 800a31e:	bfc1      	itttt	gt
 800a320:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a324:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a328:	fa09 f303 	lslgt.w	r3, r9, r3
 800a32c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a330:	bfda      	itte	le
 800a332:	f1c3 0320 	rsble	r3, r3, #32
 800a336:	fa06 f003 	lslle.w	r0, r6, r3
 800a33a:	4318      	orrgt	r0, r3
 800a33c:	f7f6 f912 	bl	8000564 <__aeabi_ui2d>
 800a340:	2301      	movs	r3, #1
 800a342:	4606      	mov	r6, r0
 800a344:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a348:	3d01      	subs	r5, #1
 800a34a:	9310      	str	r3, [sp, #64]	; 0x40
 800a34c:	e771      	b.n	800a232 <_dtoa_r+0x11a>
 800a34e:	2301      	movs	r3, #1
 800a350:	e7b6      	b.n	800a2c0 <_dtoa_r+0x1a8>
 800a352:	900e      	str	r0, [sp, #56]	; 0x38
 800a354:	e7b5      	b.n	800a2c2 <_dtoa_r+0x1aa>
 800a356:	f1ca 0300 	rsb	r3, sl, #0
 800a35a:	9306      	str	r3, [sp, #24]
 800a35c:	2300      	movs	r3, #0
 800a35e:	eba8 080a 	sub.w	r8, r8, sl
 800a362:	930d      	str	r3, [sp, #52]	; 0x34
 800a364:	e7c2      	b.n	800a2ec <_dtoa_r+0x1d4>
 800a366:	2300      	movs	r3, #0
 800a368:	9308      	str	r3, [sp, #32]
 800a36a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	dc39      	bgt.n	800a3e4 <_dtoa_r+0x2cc>
 800a370:	f04f 0901 	mov.w	r9, #1
 800a374:	f8cd 9004 	str.w	r9, [sp, #4]
 800a378:	464b      	mov	r3, r9
 800a37a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a37e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a380:	2200      	movs	r2, #0
 800a382:	6042      	str	r2, [r0, #4]
 800a384:	2204      	movs	r2, #4
 800a386:	f102 0614 	add.w	r6, r2, #20
 800a38a:	429e      	cmp	r6, r3
 800a38c:	6841      	ldr	r1, [r0, #4]
 800a38e:	d92f      	bls.n	800a3f0 <_dtoa_r+0x2d8>
 800a390:	4620      	mov	r0, r4
 800a392:	f000 feeb 	bl	800b16c <_Balloc>
 800a396:	9000      	str	r0, [sp, #0]
 800a398:	2800      	cmp	r0, #0
 800a39a:	d14b      	bne.n	800a434 <_dtoa_r+0x31c>
 800a39c:	4b24      	ldr	r3, [pc, #144]	; (800a430 <_dtoa_r+0x318>)
 800a39e:	4602      	mov	r2, r0
 800a3a0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a3a4:	e6d1      	b.n	800a14a <_dtoa_r+0x32>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	e7de      	b.n	800a368 <_dtoa_r+0x250>
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	9308      	str	r3, [sp, #32]
 800a3ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3b0:	eb0a 0903 	add.w	r9, sl, r3
 800a3b4:	f109 0301 	add.w	r3, r9, #1
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	9301      	str	r3, [sp, #4]
 800a3bc:	bfb8      	it	lt
 800a3be:	2301      	movlt	r3, #1
 800a3c0:	e7dd      	b.n	800a37e <_dtoa_r+0x266>
 800a3c2:	2301      	movs	r3, #1
 800a3c4:	e7f2      	b.n	800a3ac <_dtoa_r+0x294>
 800a3c6:	2501      	movs	r5, #1
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	9305      	str	r3, [sp, #20]
 800a3cc:	9508      	str	r5, [sp, #32]
 800a3ce:	f04f 39ff 	mov.w	r9, #4294967295
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a3d8:	2312      	movs	r3, #18
 800a3da:	9209      	str	r2, [sp, #36]	; 0x24
 800a3dc:	e7cf      	b.n	800a37e <_dtoa_r+0x266>
 800a3de:	2301      	movs	r3, #1
 800a3e0:	9308      	str	r3, [sp, #32]
 800a3e2:	e7f4      	b.n	800a3ce <_dtoa_r+0x2b6>
 800a3e4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a3e8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a3ec:	464b      	mov	r3, r9
 800a3ee:	e7c6      	b.n	800a37e <_dtoa_r+0x266>
 800a3f0:	3101      	adds	r1, #1
 800a3f2:	6041      	str	r1, [r0, #4]
 800a3f4:	0052      	lsls	r2, r2, #1
 800a3f6:	e7c6      	b.n	800a386 <_dtoa_r+0x26e>
 800a3f8:	636f4361 	.word	0x636f4361
 800a3fc:	3fd287a7 	.word	0x3fd287a7
 800a400:	8b60c8b3 	.word	0x8b60c8b3
 800a404:	3fc68a28 	.word	0x3fc68a28
 800a408:	509f79fb 	.word	0x509f79fb
 800a40c:	3fd34413 	.word	0x3fd34413
 800a410:	08013e61 	.word	0x08013e61
 800a414:	08013e78 	.word	0x08013e78
 800a418:	7ff00000 	.word	0x7ff00000
 800a41c:	08013e5d 	.word	0x08013e5d
 800a420:	08013e54 	.word	0x08013e54
 800a424:	08013e31 	.word	0x08013e31
 800a428:	3ff80000 	.word	0x3ff80000
 800a42c:	08013fd0 	.word	0x08013fd0
 800a430:	08013ed7 	.word	0x08013ed7
 800a434:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a436:	9a00      	ldr	r2, [sp, #0]
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	9b01      	ldr	r3, [sp, #4]
 800a43c:	2b0e      	cmp	r3, #14
 800a43e:	f200 80ad 	bhi.w	800a59c <_dtoa_r+0x484>
 800a442:	2d00      	cmp	r5, #0
 800a444:	f000 80aa 	beq.w	800a59c <_dtoa_r+0x484>
 800a448:	f1ba 0f00 	cmp.w	sl, #0
 800a44c:	dd36      	ble.n	800a4bc <_dtoa_r+0x3a4>
 800a44e:	4ac3      	ldr	r2, [pc, #780]	; (800a75c <_dtoa_r+0x644>)
 800a450:	f00a 030f 	and.w	r3, sl, #15
 800a454:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a458:	ed93 7b00 	vldr	d7, [r3]
 800a45c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a460:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a464:	eeb0 8a47 	vmov.f32	s16, s14
 800a468:	eef0 8a67 	vmov.f32	s17, s15
 800a46c:	d016      	beq.n	800a49c <_dtoa_r+0x384>
 800a46e:	4bbc      	ldr	r3, [pc, #752]	; (800a760 <_dtoa_r+0x648>)
 800a470:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a474:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a478:	f7f6 fa18 	bl	80008ac <__aeabi_ddiv>
 800a47c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a480:	f007 070f 	and.w	r7, r7, #15
 800a484:	2503      	movs	r5, #3
 800a486:	4eb6      	ldr	r6, [pc, #728]	; (800a760 <_dtoa_r+0x648>)
 800a488:	b957      	cbnz	r7, 800a4a0 <_dtoa_r+0x388>
 800a48a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a48e:	ec53 2b18 	vmov	r2, r3, d8
 800a492:	f7f6 fa0b 	bl	80008ac <__aeabi_ddiv>
 800a496:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a49a:	e029      	b.n	800a4f0 <_dtoa_r+0x3d8>
 800a49c:	2502      	movs	r5, #2
 800a49e:	e7f2      	b.n	800a486 <_dtoa_r+0x36e>
 800a4a0:	07f9      	lsls	r1, r7, #31
 800a4a2:	d508      	bpl.n	800a4b6 <_dtoa_r+0x39e>
 800a4a4:	ec51 0b18 	vmov	r0, r1, d8
 800a4a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a4ac:	f7f6 f8d4 	bl	8000658 <__aeabi_dmul>
 800a4b0:	ec41 0b18 	vmov	d8, r0, r1
 800a4b4:	3501      	adds	r5, #1
 800a4b6:	107f      	asrs	r7, r7, #1
 800a4b8:	3608      	adds	r6, #8
 800a4ba:	e7e5      	b.n	800a488 <_dtoa_r+0x370>
 800a4bc:	f000 80a6 	beq.w	800a60c <_dtoa_r+0x4f4>
 800a4c0:	f1ca 0600 	rsb	r6, sl, #0
 800a4c4:	4ba5      	ldr	r3, [pc, #660]	; (800a75c <_dtoa_r+0x644>)
 800a4c6:	4fa6      	ldr	r7, [pc, #664]	; (800a760 <_dtoa_r+0x648>)
 800a4c8:	f006 020f 	and.w	r2, r6, #15
 800a4cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a4d8:	f7f6 f8be 	bl	8000658 <__aeabi_dmul>
 800a4dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4e0:	1136      	asrs	r6, r6, #4
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	2502      	movs	r5, #2
 800a4e6:	2e00      	cmp	r6, #0
 800a4e8:	f040 8085 	bne.w	800a5f6 <_dtoa_r+0x4de>
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d1d2      	bne.n	800a496 <_dtoa_r+0x37e>
 800a4f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f000 808c 	beq.w	800a610 <_dtoa_r+0x4f8>
 800a4f8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4fc:	4b99      	ldr	r3, [pc, #612]	; (800a764 <_dtoa_r+0x64c>)
 800a4fe:	2200      	movs	r2, #0
 800a500:	4630      	mov	r0, r6
 800a502:	4639      	mov	r1, r7
 800a504:	f7f6 fb1a 	bl	8000b3c <__aeabi_dcmplt>
 800a508:	2800      	cmp	r0, #0
 800a50a:	f000 8081 	beq.w	800a610 <_dtoa_r+0x4f8>
 800a50e:	9b01      	ldr	r3, [sp, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d07d      	beq.n	800a610 <_dtoa_r+0x4f8>
 800a514:	f1b9 0f00 	cmp.w	r9, #0
 800a518:	dd3c      	ble.n	800a594 <_dtoa_r+0x47c>
 800a51a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a51e:	9307      	str	r3, [sp, #28]
 800a520:	2200      	movs	r2, #0
 800a522:	4b91      	ldr	r3, [pc, #580]	; (800a768 <_dtoa_r+0x650>)
 800a524:	4630      	mov	r0, r6
 800a526:	4639      	mov	r1, r7
 800a528:	f7f6 f896 	bl	8000658 <__aeabi_dmul>
 800a52c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a530:	3501      	adds	r5, #1
 800a532:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a536:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a53a:	4628      	mov	r0, r5
 800a53c:	f7f6 f822 	bl	8000584 <__aeabi_i2d>
 800a540:	4632      	mov	r2, r6
 800a542:	463b      	mov	r3, r7
 800a544:	f7f6 f888 	bl	8000658 <__aeabi_dmul>
 800a548:	4b88      	ldr	r3, [pc, #544]	; (800a76c <_dtoa_r+0x654>)
 800a54a:	2200      	movs	r2, #0
 800a54c:	f7f5 fece 	bl	80002ec <__adddf3>
 800a550:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a554:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a558:	9303      	str	r3, [sp, #12]
 800a55a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d15c      	bne.n	800a61a <_dtoa_r+0x502>
 800a560:	4b83      	ldr	r3, [pc, #524]	; (800a770 <_dtoa_r+0x658>)
 800a562:	2200      	movs	r2, #0
 800a564:	4630      	mov	r0, r6
 800a566:	4639      	mov	r1, r7
 800a568:	f7f5 febe 	bl	80002e8 <__aeabi_dsub>
 800a56c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a570:	4606      	mov	r6, r0
 800a572:	460f      	mov	r7, r1
 800a574:	f7f6 fb00 	bl	8000b78 <__aeabi_dcmpgt>
 800a578:	2800      	cmp	r0, #0
 800a57a:	f040 8296 	bne.w	800aaaa <_dtoa_r+0x992>
 800a57e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a582:	4630      	mov	r0, r6
 800a584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a588:	4639      	mov	r1, r7
 800a58a:	f7f6 fad7 	bl	8000b3c <__aeabi_dcmplt>
 800a58e:	2800      	cmp	r0, #0
 800a590:	f040 8288 	bne.w	800aaa4 <_dtoa_r+0x98c>
 800a594:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a598:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a59c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	f2c0 8158 	blt.w	800a854 <_dtoa_r+0x73c>
 800a5a4:	f1ba 0f0e 	cmp.w	sl, #14
 800a5a8:	f300 8154 	bgt.w	800a854 <_dtoa_r+0x73c>
 800a5ac:	4b6b      	ldr	r3, [pc, #428]	; (800a75c <_dtoa_r+0x644>)
 800a5ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a5b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	f280 80e3 	bge.w	800a784 <_dtoa_r+0x66c>
 800a5be:	9b01      	ldr	r3, [sp, #4]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f300 80df 	bgt.w	800a784 <_dtoa_r+0x66c>
 800a5c6:	f040 826d 	bne.w	800aaa4 <_dtoa_r+0x98c>
 800a5ca:	4b69      	ldr	r3, [pc, #420]	; (800a770 <_dtoa_r+0x658>)
 800a5cc:	2200      	movs	r2, #0
 800a5ce:	4640      	mov	r0, r8
 800a5d0:	4649      	mov	r1, r9
 800a5d2:	f7f6 f841 	bl	8000658 <__aeabi_dmul>
 800a5d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5da:	f7f6 fac3 	bl	8000b64 <__aeabi_dcmpge>
 800a5de:	9e01      	ldr	r6, [sp, #4]
 800a5e0:	4637      	mov	r7, r6
 800a5e2:	2800      	cmp	r0, #0
 800a5e4:	f040 8243 	bne.w	800aa6e <_dtoa_r+0x956>
 800a5e8:	9d00      	ldr	r5, [sp, #0]
 800a5ea:	2331      	movs	r3, #49	; 0x31
 800a5ec:	f805 3b01 	strb.w	r3, [r5], #1
 800a5f0:	f10a 0a01 	add.w	sl, sl, #1
 800a5f4:	e23f      	b.n	800aa76 <_dtoa_r+0x95e>
 800a5f6:	07f2      	lsls	r2, r6, #31
 800a5f8:	d505      	bpl.n	800a606 <_dtoa_r+0x4ee>
 800a5fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5fe:	f7f6 f82b 	bl	8000658 <__aeabi_dmul>
 800a602:	3501      	adds	r5, #1
 800a604:	2301      	movs	r3, #1
 800a606:	1076      	asrs	r6, r6, #1
 800a608:	3708      	adds	r7, #8
 800a60a:	e76c      	b.n	800a4e6 <_dtoa_r+0x3ce>
 800a60c:	2502      	movs	r5, #2
 800a60e:	e76f      	b.n	800a4f0 <_dtoa_r+0x3d8>
 800a610:	9b01      	ldr	r3, [sp, #4]
 800a612:	f8cd a01c 	str.w	sl, [sp, #28]
 800a616:	930c      	str	r3, [sp, #48]	; 0x30
 800a618:	e78d      	b.n	800a536 <_dtoa_r+0x41e>
 800a61a:	9900      	ldr	r1, [sp, #0]
 800a61c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a61e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a620:	4b4e      	ldr	r3, [pc, #312]	; (800a75c <_dtoa_r+0x644>)
 800a622:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a626:	4401      	add	r1, r0
 800a628:	9102      	str	r1, [sp, #8]
 800a62a:	9908      	ldr	r1, [sp, #32]
 800a62c:	eeb0 8a47 	vmov.f32	s16, s14
 800a630:	eef0 8a67 	vmov.f32	s17, s15
 800a634:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a638:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a63c:	2900      	cmp	r1, #0
 800a63e:	d045      	beq.n	800a6cc <_dtoa_r+0x5b4>
 800a640:	494c      	ldr	r1, [pc, #304]	; (800a774 <_dtoa_r+0x65c>)
 800a642:	2000      	movs	r0, #0
 800a644:	f7f6 f932 	bl	80008ac <__aeabi_ddiv>
 800a648:	ec53 2b18 	vmov	r2, r3, d8
 800a64c:	f7f5 fe4c 	bl	80002e8 <__aeabi_dsub>
 800a650:	9d00      	ldr	r5, [sp, #0]
 800a652:	ec41 0b18 	vmov	d8, r0, r1
 800a656:	4639      	mov	r1, r7
 800a658:	4630      	mov	r0, r6
 800a65a:	f7f6 faad 	bl	8000bb8 <__aeabi_d2iz>
 800a65e:	900c      	str	r0, [sp, #48]	; 0x30
 800a660:	f7f5 ff90 	bl	8000584 <__aeabi_i2d>
 800a664:	4602      	mov	r2, r0
 800a666:	460b      	mov	r3, r1
 800a668:	4630      	mov	r0, r6
 800a66a:	4639      	mov	r1, r7
 800a66c:	f7f5 fe3c 	bl	80002e8 <__aeabi_dsub>
 800a670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a672:	3330      	adds	r3, #48	; 0x30
 800a674:	f805 3b01 	strb.w	r3, [r5], #1
 800a678:	ec53 2b18 	vmov	r2, r3, d8
 800a67c:	4606      	mov	r6, r0
 800a67e:	460f      	mov	r7, r1
 800a680:	f7f6 fa5c 	bl	8000b3c <__aeabi_dcmplt>
 800a684:	2800      	cmp	r0, #0
 800a686:	d165      	bne.n	800a754 <_dtoa_r+0x63c>
 800a688:	4632      	mov	r2, r6
 800a68a:	463b      	mov	r3, r7
 800a68c:	4935      	ldr	r1, [pc, #212]	; (800a764 <_dtoa_r+0x64c>)
 800a68e:	2000      	movs	r0, #0
 800a690:	f7f5 fe2a 	bl	80002e8 <__aeabi_dsub>
 800a694:	ec53 2b18 	vmov	r2, r3, d8
 800a698:	f7f6 fa50 	bl	8000b3c <__aeabi_dcmplt>
 800a69c:	2800      	cmp	r0, #0
 800a69e:	f040 80b9 	bne.w	800a814 <_dtoa_r+0x6fc>
 800a6a2:	9b02      	ldr	r3, [sp, #8]
 800a6a4:	429d      	cmp	r5, r3
 800a6a6:	f43f af75 	beq.w	800a594 <_dtoa_r+0x47c>
 800a6aa:	4b2f      	ldr	r3, [pc, #188]	; (800a768 <_dtoa_r+0x650>)
 800a6ac:	ec51 0b18 	vmov	r0, r1, d8
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	f7f5 ffd1 	bl	8000658 <__aeabi_dmul>
 800a6b6:	4b2c      	ldr	r3, [pc, #176]	; (800a768 <_dtoa_r+0x650>)
 800a6b8:	ec41 0b18 	vmov	d8, r0, r1
 800a6bc:	2200      	movs	r2, #0
 800a6be:	4630      	mov	r0, r6
 800a6c0:	4639      	mov	r1, r7
 800a6c2:	f7f5 ffc9 	bl	8000658 <__aeabi_dmul>
 800a6c6:	4606      	mov	r6, r0
 800a6c8:	460f      	mov	r7, r1
 800a6ca:	e7c4      	b.n	800a656 <_dtoa_r+0x53e>
 800a6cc:	ec51 0b17 	vmov	r0, r1, d7
 800a6d0:	f7f5 ffc2 	bl	8000658 <__aeabi_dmul>
 800a6d4:	9b02      	ldr	r3, [sp, #8]
 800a6d6:	9d00      	ldr	r5, [sp, #0]
 800a6d8:	930c      	str	r3, [sp, #48]	; 0x30
 800a6da:	ec41 0b18 	vmov	d8, r0, r1
 800a6de:	4639      	mov	r1, r7
 800a6e0:	4630      	mov	r0, r6
 800a6e2:	f7f6 fa69 	bl	8000bb8 <__aeabi_d2iz>
 800a6e6:	9011      	str	r0, [sp, #68]	; 0x44
 800a6e8:	f7f5 ff4c 	bl	8000584 <__aeabi_i2d>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f7f5 fdf8 	bl	80002e8 <__aeabi_dsub>
 800a6f8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6fa:	3330      	adds	r3, #48	; 0x30
 800a6fc:	f805 3b01 	strb.w	r3, [r5], #1
 800a700:	9b02      	ldr	r3, [sp, #8]
 800a702:	429d      	cmp	r5, r3
 800a704:	4606      	mov	r6, r0
 800a706:	460f      	mov	r7, r1
 800a708:	f04f 0200 	mov.w	r2, #0
 800a70c:	d134      	bne.n	800a778 <_dtoa_r+0x660>
 800a70e:	4b19      	ldr	r3, [pc, #100]	; (800a774 <_dtoa_r+0x65c>)
 800a710:	ec51 0b18 	vmov	r0, r1, d8
 800a714:	f7f5 fdea 	bl	80002ec <__adddf3>
 800a718:	4602      	mov	r2, r0
 800a71a:	460b      	mov	r3, r1
 800a71c:	4630      	mov	r0, r6
 800a71e:	4639      	mov	r1, r7
 800a720:	f7f6 fa2a 	bl	8000b78 <__aeabi_dcmpgt>
 800a724:	2800      	cmp	r0, #0
 800a726:	d175      	bne.n	800a814 <_dtoa_r+0x6fc>
 800a728:	ec53 2b18 	vmov	r2, r3, d8
 800a72c:	4911      	ldr	r1, [pc, #68]	; (800a774 <_dtoa_r+0x65c>)
 800a72e:	2000      	movs	r0, #0
 800a730:	f7f5 fdda 	bl	80002e8 <__aeabi_dsub>
 800a734:	4602      	mov	r2, r0
 800a736:	460b      	mov	r3, r1
 800a738:	4630      	mov	r0, r6
 800a73a:	4639      	mov	r1, r7
 800a73c:	f7f6 f9fe 	bl	8000b3c <__aeabi_dcmplt>
 800a740:	2800      	cmp	r0, #0
 800a742:	f43f af27 	beq.w	800a594 <_dtoa_r+0x47c>
 800a746:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a748:	1e6b      	subs	r3, r5, #1
 800a74a:	930c      	str	r3, [sp, #48]	; 0x30
 800a74c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a750:	2b30      	cmp	r3, #48	; 0x30
 800a752:	d0f8      	beq.n	800a746 <_dtoa_r+0x62e>
 800a754:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a758:	e04a      	b.n	800a7f0 <_dtoa_r+0x6d8>
 800a75a:	bf00      	nop
 800a75c:	08013fd0 	.word	0x08013fd0
 800a760:	08013fa8 	.word	0x08013fa8
 800a764:	3ff00000 	.word	0x3ff00000
 800a768:	40240000 	.word	0x40240000
 800a76c:	401c0000 	.word	0x401c0000
 800a770:	40140000 	.word	0x40140000
 800a774:	3fe00000 	.word	0x3fe00000
 800a778:	4baf      	ldr	r3, [pc, #700]	; (800aa38 <_dtoa_r+0x920>)
 800a77a:	f7f5 ff6d 	bl	8000658 <__aeabi_dmul>
 800a77e:	4606      	mov	r6, r0
 800a780:	460f      	mov	r7, r1
 800a782:	e7ac      	b.n	800a6de <_dtoa_r+0x5c6>
 800a784:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a788:	9d00      	ldr	r5, [sp, #0]
 800a78a:	4642      	mov	r2, r8
 800a78c:	464b      	mov	r3, r9
 800a78e:	4630      	mov	r0, r6
 800a790:	4639      	mov	r1, r7
 800a792:	f7f6 f88b 	bl	80008ac <__aeabi_ddiv>
 800a796:	f7f6 fa0f 	bl	8000bb8 <__aeabi_d2iz>
 800a79a:	9002      	str	r0, [sp, #8]
 800a79c:	f7f5 fef2 	bl	8000584 <__aeabi_i2d>
 800a7a0:	4642      	mov	r2, r8
 800a7a2:	464b      	mov	r3, r9
 800a7a4:	f7f5 ff58 	bl	8000658 <__aeabi_dmul>
 800a7a8:	4602      	mov	r2, r0
 800a7aa:	460b      	mov	r3, r1
 800a7ac:	4630      	mov	r0, r6
 800a7ae:	4639      	mov	r1, r7
 800a7b0:	f7f5 fd9a 	bl	80002e8 <__aeabi_dsub>
 800a7b4:	9e02      	ldr	r6, [sp, #8]
 800a7b6:	9f01      	ldr	r7, [sp, #4]
 800a7b8:	3630      	adds	r6, #48	; 0x30
 800a7ba:	f805 6b01 	strb.w	r6, [r5], #1
 800a7be:	9e00      	ldr	r6, [sp, #0]
 800a7c0:	1bae      	subs	r6, r5, r6
 800a7c2:	42b7      	cmp	r7, r6
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	460b      	mov	r3, r1
 800a7c8:	d137      	bne.n	800a83a <_dtoa_r+0x722>
 800a7ca:	f7f5 fd8f 	bl	80002ec <__adddf3>
 800a7ce:	4642      	mov	r2, r8
 800a7d0:	464b      	mov	r3, r9
 800a7d2:	4606      	mov	r6, r0
 800a7d4:	460f      	mov	r7, r1
 800a7d6:	f7f6 f9cf 	bl	8000b78 <__aeabi_dcmpgt>
 800a7da:	b9c8      	cbnz	r0, 800a810 <_dtoa_r+0x6f8>
 800a7dc:	4642      	mov	r2, r8
 800a7de:	464b      	mov	r3, r9
 800a7e0:	4630      	mov	r0, r6
 800a7e2:	4639      	mov	r1, r7
 800a7e4:	f7f6 f9a0 	bl	8000b28 <__aeabi_dcmpeq>
 800a7e8:	b110      	cbz	r0, 800a7f0 <_dtoa_r+0x6d8>
 800a7ea:	9b02      	ldr	r3, [sp, #8]
 800a7ec:	07d9      	lsls	r1, r3, #31
 800a7ee:	d40f      	bmi.n	800a810 <_dtoa_r+0x6f8>
 800a7f0:	4620      	mov	r0, r4
 800a7f2:	4659      	mov	r1, fp
 800a7f4:	f000 fcfa 	bl	800b1ec <_Bfree>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	702b      	strb	r3, [r5, #0]
 800a7fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7fe:	f10a 0001 	add.w	r0, sl, #1
 800a802:	6018      	str	r0, [r3, #0]
 800a804:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a806:	2b00      	cmp	r3, #0
 800a808:	f43f acd8 	beq.w	800a1bc <_dtoa_r+0xa4>
 800a80c:	601d      	str	r5, [r3, #0]
 800a80e:	e4d5      	b.n	800a1bc <_dtoa_r+0xa4>
 800a810:	f8cd a01c 	str.w	sl, [sp, #28]
 800a814:	462b      	mov	r3, r5
 800a816:	461d      	mov	r5, r3
 800a818:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a81c:	2a39      	cmp	r2, #57	; 0x39
 800a81e:	d108      	bne.n	800a832 <_dtoa_r+0x71a>
 800a820:	9a00      	ldr	r2, [sp, #0]
 800a822:	429a      	cmp	r2, r3
 800a824:	d1f7      	bne.n	800a816 <_dtoa_r+0x6fe>
 800a826:	9a07      	ldr	r2, [sp, #28]
 800a828:	9900      	ldr	r1, [sp, #0]
 800a82a:	3201      	adds	r2, #1
 800a82c:	9207      	str	r2, [sp, #28]
 800a82e:	2230      	movs	r2, #48	; 0x30
 800a830:	700a      	strb	r2, [r1, #0]
 800a832:	781a      	ldrb	r2, [r3, #0]
 800a834:	3201      	adds	r2, #1
 800a836:	701a      	strb	r2, [r3, #0]
 800a838:	e78c      	b.n	800a754 <_dtoa_r+0x63c>
 800a83a:	4b7f      	ldr	r3, [pc, #508]	; (800aa38 <_dtoa_r+0x920>)
 800a83c:	2200      	movs	r2, #0
 800a83e:	f7f5 ff0b 	bl	8000658 <__aeabi_dmul>
 800a842:	2200      	movs	r2, #0
 800a844:	2300      	movs	r3, #0
 800a846:	4606      	mov	r6, r0
 800a848:	460f      	mov	r7, r1
 800a84a:	f7f6 f96d 	bl	8000b28 <__aeabi_dcmpeq>
 800a84e:	2800      	cmp	r0, #0
 800a850:	d09b      	beq.n	800a78a <_dtoa_r+0x672>
 800a852:	e7cd      	b.n	800a7f0 <_dtoa_r+0x6d8>
 800a854:	9a08      	ldr	r2, [sp, #32]
 800a856:	2a00      	cmp	r2, #0
 800a858:	f000 80c4 	beq.w	800a9e4 <_dtoa_r+0x8cc>
 800a85c:	9a05      	ldr	r2, [sp, #20]
 800a85e:	2a01      	cmp	r2, #1
 800a860:	f300 80a8 	bgt.w	800a9b4 <_dtoa_r+0x89c>
 800a864:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a866:	2a00      	cmp	r2, #0
 800a868:	f000 80a0 	beq.w	800a9ac <_dtoa_r+0x894>
 800a86c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a870:	9e06      	ldr	r6, [sp, #24]
 800a872:	4645      	mov	r5, r8
 800a874:	9a04      	ldr	r2, [sp, #16]
 800a876:	2101      	movs	r1, #1
 800a878:	441a      	add	r2, r3
 800a87a:	4620      	mov	r0, r4
 800a87c:	4498      	add	r8, r3
 800a87e:	9204      	str	r2, [sp, #16]
 800a880:	f000 fd70 	bl	800b364 <__i2b>
 800a884:	4607      	mov	r7, r0
 800a886:	2d00      	cmp	r5, #0
 800a888:	dd0b      	ble.n	800a8a2 <_dtoa_r+0x78a>
 800a88a:	9b04      	ldr	r3, [sp, #16]
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	dd08      	ble.n	800a8a2 <_dtoa_r+0x78a>
 800a890:	42ab      	cmp	r3, r5
 800a892:	9a04      	ldr	r2, [sp, #16]
 800a894:	bfa8      	it	ge
 800a896:	462b      	movge	r3, r5
 800a898:	eba8 0803 	sub.w	r8, r8, r3
 800a89c:	1aed      	subs	r5, r5, r3
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	9304      	str	r3, [sp, #16]
 800a8a2:	9b06      	ldr	r3, [sp, #24]
 800a8a4:	b1fb      	cbz	r3, 800a8e6 <_dtoa_r+0x7ce>
 800a8a6:	9b08      	ldr	r3, [sp, #32]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 809f 	beq.w	800a9ec <_dtoa_r+0x8d4>
 800a8ae:	2e00      	cmp	r6, #0
 800a8b0:	dd11      	ble.n	800a8d6 <_dtoa_r+0x7be>
 800a8b2:	4639      	mov	r1, r7
 800a8b4:	4632      	mov	r2, r6
 800a8b6:	4620      	mov	r0, r4
 800a8b8:	f000 fe10 	bl	800b4dc <__pow5mult>
 800a8bc:	465a      	mov	r2, fp
 800a8be:	4601      	mov	r1, r0
 800a8c0:	4607      	mov	r7, r0
 800a8c2:	4620      	mov	r0, r4
 800a8c4:	f000 fd64 	bl	800b390 <__multiply>
 800a8c8:	4659      	mov	r1, fp
 800a8ca:	9007      	str	r0, [sp, #28]
 800a8cc:	4620      	mov	r0, r4
 800a8ce:	f000 fc8d 	bl	800b1ec <_Bfree>
 800a8d2:	9b07      	ldr	r3, [sp, #28]
 800a8d4:	469b      	mov	fp, r3
 800a8d6:	9b06      	ldr	r3, [sp, #24]
 800a8d8:	1b9a      	subs	r2, r3, r6
 800a8da:	d004      	beq.n	800a8e6 <_dtoa_r+0x7ce>
 800a8dc:	4659      	mov	r1, fp
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f000 fdfc 	bl	800b4dc <__pow5mult>
 800a8e4:	4683      	mov	fp, r0
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	4620      	mov	r0, r4
 800a8ea:	f000 fd3b 	bl	800b364 <__i2b>
 800a8ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	4606      	mov	r6, r0
 800a8f4:	dd7c      	ble.n	800a9f0 <_dtoa_r+0x8d8>
 800a8f6:	461a      	mov	r2, r3
 800a8f8:	4601      	mov	r1, r0
 800a8fa:	4620      	mov	r0, r4
 800a8fc:	f000 fdee 	bl	800b4dc <__pow5mult>
 800a900:	9b05      	ldr	r3, [sp, #20]
 800a902:	2b01      	cmp	r3, #1
 800a904:	4606      	mov	r6, r0
 800a906:	dd76      	ble.n	800a9f6 <_dtoa_r+0x8de>
 800a908:	2300      	movs	r3, #0
 800a90a:	9306      	str	r3, [sp, #24]
 800a90c:	6933      	ldr	r3, [r6, #16]
 800a90e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a912:	6918      	ldr	r0, [r3, #16]
 800a914:	f000 fcd6 	bl	800b2c4 <__hi0bits>
 800a918:	f1c0 0020 	rsb	r0, r0, #32
 800a91c:	9b04      	ldr	r3, [sp, #16]
 800a91e:	4418      	add	r0, r3
 800a920:	f010 001f 	ands.w	r0, r0, #31
 800a924:	f000 8086 	beq.w	800aa34 <_dtoa_r+0x91c>
 800a928:	f1c0 0320 	rsb	r3, r0, #32
 800a92c:	2b04      	cmp	r3, #4
 800a92e:	dd7f      	ble.n	800aa30 <_dtoa_r+0x918>
 800a930:	f1c0 001c 	rsb	r0, r0, #28
 800a934:	9b04      	ldr	r3, [sp, #16]
 800a936:	4403      	add	r3, r0
 800a938:	4480      	add	r8, r0
 800a93a:	4405      	add	r5, r0
 800a93c:	9304      	str	r3, [sp, #16]
 800a93e:	f1b8 0f00 	cmp.w	r8, #0
 800a942:	dd05      	ble.n	800a950 <_dtoa_r+0x838>
 800a944:	4659      	mov	r1, fp
 800a946:	4642      	mov	r2, r8
 800a948:	4620      	mov	r0, r4
 800a94a:	f000 fe21 	bl	800b590 <__lshift>
 800a94e:	4683      	mov	fp, r0
 800a950:	9b04      	ldr	r3, [sp, #16]
 800a952:	2b00      	cmp	r3, #0
 800a954:	dd05      	ble.n	800a962 <_dtoa_r+0x84a>
 800a956:	4631      	mov	r1, r6
 800a958:	461a      	mov	r2, r3
 800a95a:	4620      	mov	r0, r4
 800a95c:	f000 fe18 	bl	800b590 <__lshift>
 800a960:	4606      	mov	r6, r0
 800a962:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a964:	2b00      	cmp	r3, #0
 800a966:	d069      	beq.n	800aa3c <_dtoa_r+0x924>
 800a968:	4631      	mov	r1, r6
 800a96a:	4658      	mov	r0, fp
 800a96c:	f000 fe7c 	bl	800b668 <__mcmp>
 800a970:	2800      	cmp	r0, #0
 800a972:	da63      	bge.n	800aa3c <_dtoa_r+0x924>
 800a974:	2300      	movs	r3, #0
 800a976:	4659      	mov	r1, fp
 800a978:	220a      	movs	r2, #10
 800a97a:	4620      	mov	r0, r4
 800a97c:	f000 fc58 	bl	800b230 <__multadd>
 800a980:	9b08      	ldr	r3, [sp, #32]
 800a982:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a986:	4683      	mov	fp, r0
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f000 818f 	beq.w	800acac <_dtoa_r+0xb94>
 800a98e:	4639      	mov	r1, r7
 800a990:	2300      	movs	r3, #0
 800a992:	220a      	movs	r2, #10
 800a994:	4620      	mov	r0, r4
 800a996:	f000 fc4b 	bl	800b230 <__multadd>
 800a99a:	f1b9 0f00 	cmp.w	r9, #0
 800a99e:	4607      	mov	r7, r0
 800a9a0:	f300 808e 	bgt.w	800aac0 <_dtoa_r+0x9a8>
 800a9a4:	9b05      	ldr	r3, [sp, #20]
 800a9a6:	2b02      	cmp	r3, #2
 800a9a8:	dc50      	bgt.n	800aa4c <_dtoa_r+0x934>
 800a9aa:	e089      	b.n	800aac0 <_dtoa_r+0x9a8>
 800a9ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a9ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a9b2:	e75d      	b.n	800a870 <_dtoa_r+0x758>
 800a9b4:	9b01      	ldr	r3, [sp, #4]
 800a9b6:	1e5e      	subs	r6, r3, #1
 800a9b8:	9b06      	ldr	r3, [sp, #24]
 800a9ba:	42b3      	cmp	r3, r6
 800a9bc:	bfbf      	itttt	lt
 800a9be:	9b06      	ldrlt	r3, [sp, #24]
 800a9c0:	9606      	strlt	r6, [sp, #24]
 800a9c2:	1af2      	sublt	r2, r6, r3
 800a9c4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a9c6:	bfb6      	itet	lt
 800a9c8:	189b      	addlt	r3, r3, r2
 800a9ca:	1b9e      	subge	r6, r3, r6
 800a9cc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a9ce:	9b01      	ldr	r3, [sp, #4]
 800a9d0:	bfb8      	it	lt
 800a9d2:	2600      	movlt	r6, #0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	bfb5      	itete	lt
 800a9d8:	eba8 0503 	sublt.w	r5, r8, r3
 800a9dc:	9b01      	ldrge	r3, [sp, #4]
 800a9de:	2300      	movlt	r3, #0
 800a9e0:	4645      	movge	r5, r8
 800a9e2:	e747      	b.n	800a874 <_dtoa_r+0x75c>
 800a9e4:	9e06      	ldr	r6, [sp, #24]
 800a9e6:	9f08      	ldr	r7, [sp, #32]
 800a9e8:	4645      	mov	r5, r8
 800a9ea:	e74c      	b.n	800a886 <_dtoa_r+0x76e>
 800a9ec:	9a06      	ldr	r2, [sp, #24]
 800a9ee:	e775      	b.n	800a8dc <_dtoa_r+0x7c4>
 800a9f0:	9b05      	ldr	r3, [sp, #20]
 800a9f2:	2b01      	cmp	r3, #1
 800a9f4:	dc18      	bgt.n	800aa28 <_dtoa_r+0x910>
 800a9f6:	9b02      	ldr	r3, [sp, #8]
 800a9f8:	b9b3      	cbnz	r3, 800aa28 <_dtoa_r+0x910>
 800a9fa:	9b03      	ldr	r3, [sp, #12]
 800a9fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800aa00:	b9a3      	cbnz	r3, 800aa2c <_dtoa_r+0x914>
 800aa02:	9b03      	ldr	r3, [sp, #12]
 800aa04:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa08:	0d1b      	lsrs	r3, r3, #20
 800aa0a:	051b      	lsls	r3, r3, #20
 800aa0c:	b12b      	cbz	r3, 800aa1a <_dtoa_r+0x902>
 800aa0e:	9b04      	ldr	r3, [sp, #16]
 800aa10:	3301      	adds	r3, #1
 800aa12:	9304      	str	r3, [sp, #16]
 800aa14:	f108 0801 	add.w	r8, r8, #1
 800aa18:	2301      	movs	r3, #1
 800aa1a:	9306      	str	r3, [sp, #24]
 800aa1c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	f47f af74 	bne.w	800a90c <_dtoa_r+0x7f4>
 800aa24:	2001      	movs	r0, #1
 800aa26:	e779      	b.n	800a91c <_dtoa_r+0x804>
 800aa28:	2300      	movs	r3, #0
 800aa2a:	e7f6      	b.n	800aa1a <_dtoa_r+0x902>
 800aa2c:	9b02      	ldr	r3, [sp, #8]
 800aa2e:	e7f4      	b.n	800aa1a <_dtoa_r+0x902>
 800aa30:	d085      	beq.n	800a93e <_dtoa_r+0x826>
 800aa32:	4618      	mov	r0, r3
 800aa34:	301c      	adds	r0, #28
 800aa36:	e77d      	b.n	800a934 <_dtoa_r+0x81c>
 800aa38:	40240000 	.word	0x40240000
 800aa3c:	9b01      	ldr	r3, [sp, #4]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	dc38      	bgt.n	800aab4 <_dtoa_r+0x99c>
 800aa42:	9b05      	ldr	r3, [sp, #20]
 800aa44:	2b02      	cmp	r3, #2
 800aa46:	dd35      	ble.n	800aab4 <_dtoa_r+0x99c>
 800aa48:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aa4c:	f1b9 0f00 	cmp.w	r9, #0
 800aa50:	d10d      	bne.n	800aa6e <_dtoa_r+0x956>
 800aa52:	4631      	mov	r1, r6
 800aa54:	464b      	mov	r3, r9
 800aa56:	2205      	movs	r2, #5
 800aa58:	4620      	mov	r0, r4
 800aa5a:	f000 fbe9 	bl	800b230 <__multadd>
 800aa5e:	4601      	mov	r1, r0
 800aa60:	4606      	mov	r6, r0
 800aa62:	4658      	mov	r0, fp
 800aa64:	f000 fe00 	bl	800b668 <__mcmp>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	f73f adbd 	bgt.w	800a5e8 <_dtoa_r+0x4d0>
 800aa6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa70:	9d00      	ldr	r5, [sp, #0]
 800aa72:	ea6f 0a03 	mvn.w	sl, r3
 800aa76:	f04f 0800 	mov.w	r8, #0
 800aa7a:	4631      	mov	r1, r6
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	f000 fbb5 	bl	800b1ec <_Bfree>
 800aa82:	2f00      	cmp	r7, #0
 800aa84:	f43f aeb4 	beq.w	800a7f0 <_dtoa_r+0x6d8>
 800aa88:	f1b8 0f00 	cmp.w	r8, #0
 800aa8c:	d005      	beq.n	800aa9a <_dtoa_r+0x982>
 800aa8e:	45b8      	cmp	r8, r7
 800aa90:	d003      	beq.n	800aa9a <_dtoa_r+0x982>
 800aa92:	4641      	mov	r1, r8
 800aa94:	4620      	mov	r0, r4
 800aa96:	f000 fba9 	bl	800b1ec <_Bfree>
 800aa9a:	4639      	mov	r1, r7
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f000 fba5 	bl	800b1ec <_Bfree>
 800aaa2:	e6a5      	b.n	800a7f0 <_dtoa_r+0x6d8>
 800aaa4:	2600      	movs	r6, #0
 800aaa6:	4637      	mov	r7, r6
 800aaa8:	e7e1      	b.n	800aa6e <_dtoa_r+0x956>
 800aaaa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aaac:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aab0:	4637      	mov	r7, r6
 800aab2:	e599      	b.n	800a5e8 <_dtoa_r+0x4d0>
 800aab4:	9b08      	ldr	r3, [sp, #32]
 800aab6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	f000 80fd 	beq.w	800acba <_dtoa_r+0xba2>
 800aac0:	2d00      	cmp	r5, #0
 800aac2:	dd05      	ble.n	800aad0 <_dtoa_r+0x9b8>
 800aac4:	4639      	mov	r1, r7
 800aac6:	462a      	mov	r2, r5
 800aac8:	4620      	mov	r0, r4
 800aaca:	f000 fd61 	bl	800b590 <__lshift>
 800aace:	4607      	mov	r7, r0
 800aad0:	9b06      	ldr	r3, [sp, #24]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d05c      	beq.n	800ab90 <_dtoa_r+0xa78>
 800aad6:	6879      	ldr	r1, [r7, #4]
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 fb47 	bl	800b16c <_Balloc>
 800aade:	4605      	mov	r5, r0
 800aae0:	b928      	cbnz	r0, 800aaee <_dtoa_r+0x9d6>
 800aae2:	4b80      	ldr	r3, [pc, #512]	; (800ace4 <_dtoa_r+0xbcc>)
 800aae4:	4602      	mov	r2, r0
 800aae6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aaea:	f7ff bb2e 	b.w	800a14a <_dtoa_r+0x32>
 800aaee:	693a      	ldr	r2, [r7, #16]
 800aaf0:	3202      	adds	r2, #2
 800aaf2:	0092      	lsls	r2, r2, #2
 800aaf4:	f107 010c 	add.w	r1, r7, #12
 800aaf8:	300c      	adds	r0, #12
 800aafa:	f000 fb1d 	bl	800b138 <memcpy>
 800aafe:	2201      	movs	r2, #1
 800ab00:	4629      	mov	r1, r5
 800ab02:	4620      	mov	r0, r4
 800ab04:	f000 fd44 	bl	800b590 <__lshift>
 800ab08:	9b00      	ldr	r3, [sp, #0]
 800ab0a:	3301      	adds	r3, #1
 800ab0c:	9301      	str	r3, [sp, #4]
 800ab0e:	9b00      	ldr	r3, [sp, #0]
 800ab10:	444b      	add	r3, r9
 800ab12:	9307      	str	r3, [sp, #28]
 800ab14:	9b02      	ldr	r3, [sp, #8]
 800ab16:	f003 0301 	and.w	r3, r3, #1
 800ab1a:	46b8      	mov	r8, r7
 800ab1c:	9306      	str	r3, [sp, #24]
 800ab1e:	4607      	mov	r7, r0
 800ab20:	9b01      	ldr	r3, [sp, #4]
 800ab22:	4631      	mov	r1, r6
 800ab24:	3b01      	subs	r3, #1
 800ab26:	4658      	mov	r0, fp
 800ab28:	9302      	str	r3, [sp, #8]
 800ab2a:	f7ff fa69 	bl	800a000 <quorem>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	3330      	adds	r3, #48	; 0x30
 800ab32:	9004      	str	r0, [sp, #16]
 800ab34:	4641      	mov	r1, r8
 800ab36:	4658      	mov	r0, fp
 800ab38:	9308      	str	r3, [sp, #32]
 800ab3a:	f000 fd95 	bl	800b668 <__mcmp>
 800ab3e:	463a      	mov	r2, r7
 800ab40:	4681      	mov	r9, r0
 800ab42:	4631      	mov	r1, r6
 800ab44:	4620      	mov	r0, r4
 800ab46:	f000 fdab 	bl	800b6a0 <__mdiff>
 800ab4a:	68c2      	ldr	r2, [r0, #12]
 800ab4c:	9b08      	ldr	r3, [sp, #32]
 800ab4e:	4605      	mov	r5, r0
 800ab50:	bb02      	cbnz	r2, 800ab94 <_dtoa_r+0xa7c>
 800ab52:	4601      	mov	r1, r0
 800ab54:	4658      	mov	r0, fp
 800ab56:	f000 fd87 	bl	800b668 <__mcmp>
 800ab5a:	9b08      	ldr	r3, [sp, #32]
 800ab5c:	4602      	mov	r2, r0
 800ab5e:	4629      	mov	r1, r5
 800ab60:	4620      	mov	r0, r4
 800ab62:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ab66:	f000 fb41 	bl	800b1ec <_Bfree>
 800ab6a:	9b05      	ldr	r3, [sp, #20]
 800ab6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab6e:	9d01      	ldr	r5, [sp, #4]
 800ab70:	ea43 0102 	orr.w	r1, r3, r2
 800ab74:	9b06      	ldr	r3, [sp, #24]
 800ab76:	430b      	orrs	r3, r1
 800ab78:	9b08      	ldr	r3, [sp, #32]
 800ab7a:	d10d      	bne.n	800ab98 <_dtoa_r+0xa80>
 800ab7c:	2b39      	cmp	r3, #57	; 0x39
 800ab7e:	d029      	beq.n	800abd4 <_dtoa_r+0xabc>
 800ab80:	f1b9 0f00 	cmp.w	r9, #0
 800ab84:	dd01      	ble.n	800ab8a <_dtoa_r+0xa72>
 800ab86:	9b04      	ldr	r3, [sp, #16]
 800ab88:	3331      	adds	r3, #49	; 0x31
 800ab8a:	9a02      	ldr	r2, [sp, #8]
 800ab8c:	7013      	strb	r3, [r2, #0]
 800ab8e:	e774      	b.n	800aa7a <_dtoa_r+0x962>
 800ab90:	4638      	mov	r0, r7
 800ab92:	e7b9      	b.n	800ab08 <_dtoa_r+0x9f0>
 800ab94:	2201      	movs	r2, #1
 800ab96:	e7e2      	b.n	800ab5e <_dtoa_r+0xa46>
 800ab98:	f1b9 0f00 	cmp.w	r9, #0
 800ab9c:	db06      	blt.n	800abac <_dtoa_r+0xa94>
 800ab9e:	9905      	ldr	r1, [sp, #20]
 800aba0:	ea41 0909 	orr.w	r9, r1, r9
 800aba4:	9906      	ldr	r1, [sp, #24]
 800aba6:	ea59 0101 	orrs.w	r1, r9, r1
 800abaa:	d120      	bne.n	800abee <_dtoa_r+0xad6>
 800abac:	2a00      	cmp	r2, #0
 800abae:	ddec      	ble.n	800ab8a <_dtoa_r+0xa72>
 800abb0:	4659      	mov	r1, fp
 800abb2:	2201      	movs	r2, #1
 800abb4:	4620      	mov	r0, r4
 800abb6:	9301      	str	r3, [sp, #4]
 800abb8:	f000 fcea 	bl	800b590 <__lshift>
 800abbc:	4631      	mov	r1, r6
 800abbe:	4683      	mov	fp, r0
 800abc0:	f000 fd52 	bl	800b668 <__mcmp>
 800abc4:	2800      	cmp	r0, #0
 800abc6:	9b01      	ldr	r3, [sp, #4]
 800abc8:	dc02      	bgt.n	800abd0 <_dtoa_r+0xab8>
 800abca:	d1de      	bne.n	800ab8a <_dtoa_r+0xa72>
 800abcc:	07da      	lsls	r2, r3, #31
 800abce:	d5dc      	bpl.n	800ab8a <_dtoa_r+0xa72>
 800abd0:	2b39      	cmp	r3, #57	; 0x39
 800abd2:	d1d8      	bne.n	800ab86 <_dtoa_r+0xa6e>
 800abd4:	9a02      	ldr	r2, [sp, #8]
 800abd6:	2339      	movs	r3, #57	; 0x39
 800abd8:	7013      	strb	r3, [r2, #0]
 800abda:	462b      	mov	r3, r5
 800abdc:	461d      	mov	r5, r3
 800abde:	3b01      	subs	r3, #1
 800abe0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800abe4:	2a39      	cmp	r2, #57	; 0x39
 800abe6:	d050      	beq.n	800ac8a <_dtoa_r+0xb72>
 800abe8:	3201      	adds	r2, #1
 800abea:	701a      	strb	r2, [r3, #0]
 800abec:	e745      	b.n	800aa7a <_dtoa_r+0x962>
 800abee:	2a00      	cmp	r2, #0
 800abf0:	dd03      	ble.n	800abfa <_dtoa_r+0xae2>
 800abf2:	2b39      	cmp	r3, #57	; 0x39
 800abf4:	d0ee      	beq.n	800abd4 <_dtoa_r+0xabc>
 800abf6:	3301      	adds	r3, #1
 800abf8:	e7c7      	b.n	800ab8a <_dtoa_r+0xa72>
 800abfa:	9a01      	ldr	r2, [sp, #4]
 800abfc:	9907      	ldr	r1, [sp, #28]
 800abfe:	f802 3c01 	strb.w	r3, [r2, #-1]
 800ac02:	428a      	cmp	r2, r1
 800ac04:	d02a      	beq.n	800ac5c <_dtoa_r+0xb44>
 800ac06:	4659      	mov	r1, fp
 800ac08:	2300      	movs	r3, #0
 800ac0a:	220a      	movs	r2, #10
 800ac0c:	4620      	mov	r0, r4
 800ac0e:	f000 fb0f 	bl	800b230 <__multadd>
 800ac12:	45b8      	cmp	r8, r7
 800ac14:	4683      	mov	fp, r0
 800ac16:	f04f 0300 	mov.w	r3, #0
 800ac1a:	f04f 020a 	mov.w	r2, #10
 800ac1e:	4641      	mov	r1, r8
 800ac20:	4620      	mov	r0, r4
 800ac22:	d107      	bne.n	800ac34 <_dtoa_r+0xb1c>
 800ac24:	f000 fb04 	bl	800b230 <__multadd>
 800ac28:	4680      	mov	r8, r0
 800ac2a:	4607      	mov	r7, r0
 800ac2c:	9b01      	ldr	r3, [sp, #4]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	9301      	str	r3, [sp, #4]
 800ac32:	e775      	b.n	800ab20 <_dtoa_r+0xa08>
 800ac34:	f000 fafc 	bl	800b230 <__multadd>
 800ac38:	4639      	mov	r1, r7
 800ac3a:	4680      	mov	r8, r0
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	220a      	movs	r2, #10
 800ac40:	4620      	mov	r0, r4
 800ac42:	f000 faf5 	bl	800b230 <__multadd>
 800ac46:	4607      	mov	r7, r0
 800ac48:	e7f0      	b.n	800ac2c <_dtoa_r+0xb14>
 800ac4a:	f1b9 0f00 	cmp.w	r9, #0
 800ac4e:	9a00      	ldr	r2, [sp, #0]
 800ac50:	bfcc      	ite	gt
 800ac52:	464d      	movgt	r5, r9
 800ac54:	2501      	movle	r5, #1
 800ac56:	4415      	add	r5, r2
 800ac58:	f04f 0800 	mov.w	r8, #0
 800ac5c:	4659      	mov	r1, fp
 800ac5e:	2201      	movs	r2, #1
 800ac60:	4620      	mov	r0, r4
 800ac62:	9301      	str	r3, [sp, #4]
 800ac64:	f000 fc94 	bl	800b590 <__lshift>
 800ac68:	4631      	mov	r1, r6
 800ac6a:	4683      	mov	fp, r0
 800ac6c:	f000 fcfc 	bl	800b668 <__mcmp>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	dcb2      	bgt.n	800abda <_dtoa_r+0xac2>
 800ac74:	d102      	bne.n	800ac7c <_dtoa_r+0xb64>
 800ac76:	9b01      	ldr	r3, [sp, #4]
 800ac78:	07db      	lsls	r3, r3, #31
 800ac7a:	d4ae      	bmi.n	800abda <_dtoa_r+0xac2>
 800ac7c:	462b      	mov	r3, r5
 800ac7e:	461d      	mov	r5, r3
 800ac80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac84:	2a30      	cmp	r2, #48	; 0x30
 800ac86:	d0fa      	beq.n	800ac7e <_dtoa_r+0xb66>
 800ac88:	e6f7      	b.n	800aa7a <_dtoa_r+0x962>
 800ac8a:	9a00      	ldr	r2, [sp, #0]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d1a5      	bne.n	800abdc <_dtoa_r+0xac4>
 800ac90:	f10a 0a01 	add.w	sl, sl, #1
 800ac94:	2331      	movs	r3, #49	; 0x31
 800ac96:	e779      	b.n	800ab8c <_dtoa_r+0xa74>
 800ac98:	4b13      	ldr	r3, [pc, #76]	; (800ace8 <_dtoa_r+0xbd0>)
 800ac9a:	f7ff baaf 	b.w	800a1fc <_dtoa_r+0xe4>
 800ac9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f47f aa86 	bne.w	800a1b2 <_dtoa_r+0x9a>
 800aca6:	4b11      	ldr	r3, [pc, #68]	; (800acec <_dtoa_r+0xbd4>)
 800aca8:	f7ff baa8 	b.w	800a1fc <_dtoa_r+0xe4>
 800acac:	f1b9 0f00 	cmp.w	r9, #0
 800acb0:	dc03      	bgt.n	800acba <_dtoa_r+0xba2>
 800acb2:	9b05      	ldr	r3, [sp, #20]
 800acb4:	2b02      	cmp	r3, #2
 800acb6:	f73f aec9 	bgt.w	800aa4c <_dtoa_r+0x934>
 800acba:	9d00      	ldr	r5, [sp, #0]
 800acbc:	4631      	mov	r1, r6
 800acbe:	4658      	mov	r0, fp
 800acc0:	f7ff f99e 	bl	800a000 <quorem>
 800acc4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800acc8:	f805 3b01 	strb.w	r3, [r5], #1
 800accc:	9a00      	ldr	r2, [sp, #0]
 800acce:	1aaa      	subs	r2, r5, r2
 800acd0:	4591      	cmp	r9, r2
 800acd2:	ddba      	ble.n	800ac4a <_dtoa_r+0xb32>
 800acd4:	4659      	mov	r1, fp
 800acd6:	2300      	movs	r3, #0
 800acd8:	220a      	movs	r2, #10
 800acda:	4620      	mov	r0, r4
 800acdc:	f000 faa8 	bl	800b230 <__multadd>
 800ace0:	4683      	mov	fp, r0
 800ace2:	e7eb      	b.n	800acbc <_dtoa_r+0xba4>
 800ace4:	08013ed7 	.word	0x08013ed7
 800ace8:	08013e30 	.word	0x08013e30
 800acec:	08013e54 	.word	0x08013e54

0800acf0 <__sflush_r>:
 800acf0:	898a      	ldrh	r2, [r1, #12]
 800acf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf6:	4605      	mov	r5, r0
 800acf8:	0710      	lsls	r0, r2, #28
 800acfa:	460c      	mov	r4, r1
 800acfc:	d458      	bmi.n	800adb0 <__sflush_r+0xc0>
 800acfe:	684b      	ldr	r3, [r1, #4]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	dc05      	bgt.n	800ad10 <__sflush_r+0x20>
 800ad04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	dc02      	bgt.n	800ad10 <__sflush_r+0x20>
 800ad0a:	2000      	movs	r0, #0
 800ad0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad12:	2e00      	cmp	r6, #0
 800ad14:	d0f9      	beq.n	800ad0a <__sflush_r+0x1a>
 800ad16:	2300      	movs	r3, #0
 800ad18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad1c:	682f      	ldr	r7, [r5, #0]
 800ad1e:	602b      	str	r3, [r5, #0]
 800ad20:	d032      	beq.n	800ad88 <__sflush_r+0x98>
 800ad22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad24:	89a3      	ldrh	r3, [r4, #12]
 800ad26:	075a      	lsls	r2, r3, #29
 800ad28:	d505      	bpl.n	800ad36 <__sflush_r+0x46>
 800ad2a:	6863      	ldr	r3, [r4, #4]
 800ad2c:	1ac0      	subs	r0, r0, r3
 800ad2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad30:	b10b      	cbz	r3, 800ad36 <__sflush_r+0x46>
 800ad32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad34:	1ac0      	subs	r0, r0, r3
 800ad36:	2300      	movs	r3, #0
 800ad38:	4602      	mov	r2, r0
 800ad3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad3c:	6a21      	ldr	r1, [r4, #32]
 800ad3e:	4628      	mov	r0, r5
 800ad40:	47b0      	blx	r6
 800ad42:	1c43      	adds	r3, r0, #1
 800ad44:	89a3      	ldrh	r3, [r4, #12]
 800ad46:	d106      	bne.n	800ad56 <__sflush_r+0x66>
 800ad48:	6829      	ldr	r1, [r5, #0]
 800ad4a:	291d      	cmp	r1, #29
 800ad4c:	d82c      	bhi.n	800ada8 <__sflush_r+0xb8>
 800ad4e:	4a2a      	ldr	r2, [pc, #168]	; (800adf8 <__sflush_r+0x108>)
 800ad50:	40ca      	lsrs	r2, r1
 800ad52:	07d6      	lsls	r6, r2, #31
 800ad54:	d528      	bpl.n	800ada8 <__sflush_r+0xb8>
 800ad56:	2200      	movs	r2, #0
 800ad58:	6062      	str	r2, [r4, #4]
 800ad5a:	04d9      	lsls	r1, r3, #19
 800ad5c:	6922      	ldr	r2, [r4, #16]
 800ad5e:	6022      	str	r2, [r4, #0]
 800ad60:	d504      	bpl.n	800ad6c <__sflush_r+0x7c>
 800ad62:	1c42      	adds	r2, r0, #1
 800ad64:	d101      	bne.n	800ad6a <__sflush_r+0x7a>
 800ad66:	682b      	ldr	r3, [r5, #0]
 800ad68:	b903      	cbnz	r3, 800ad6c <__sflush_r+0x7c>
 800ad6a:	6560      	str	r0, [r4, #84]	; 0x54
 800ad6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad6e:	602f      	str	r7, [r5, #0]
 800ad70:	2900      	cmp	r1, #0
 800ad72:	d0ca      	beq.n	800ad0a <__sflush_r+0x1a>
 800ad74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad78:	4299      	cmp	r1, r3
 800ad7a:	d002      	beq.n	800ad82 <__sflush_r+0x92>
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	f7fe fa71 	bl	8009264 <_free_r>
 800ad82:	2000      	movs	r0, #0
 800ad84:	6360      	str	r0, [r4, #52]	; 0x34
 800ad86:	e7c1      	b.n	800ad0c <__sflush_r+0x1c>
 800ad88:	6a21      	ldr	r1, [r4, #32]
 800ad8a:	2301      	movs	r3, #1
 800ad8c:	4628      	mov	r0, r5
 800ad8e:	47b0      	blx	r6
 800ad90:	1c41      	adds	r1, r0, #1
 800ad92:	d1c7      	bne.n	800ad24 <__sflush_r+0x34>
 800ad94:	682b      	ldr	r3, [r5, #0]
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d0c4      	beq.n	800ad24 <__sflush_r+0x34>
 800ad9a:	2b1d      	cmp	r3, #29
 800ad9c:	d001      	beq.n	800ada2 <__sflush_r+0xb2>
 800ad9e:	2b16      	cmp	r3, #22
 800ada0:	d101      	bne.n	800ada6 <__sflush_r+0xb6>
 800ada2:	602f      	str	r7, [r5, #0]
 800ada4:	e7b1      	b.n	800ad0a <__sflush_r+0x1a>
 800ada6:	89a3      	ldrh	r3, [r4, #12]
 800ada8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adac:	81a3      	strh	r3, [r4, #12]
 800adae:	e7ad      	b.n	800ad0c <__sflush_r+0x1c>
 800adb0:	690f      	ldr	r7, [r1, #16]
 800adb2:	2f00      	cmp	r7, #0
 800adb4:	d0a9      	beq.n	800ad0a <__sflush_r+0x1a>
 800adb6:	0793      	lsls	r3, r2, #30
 800adb8:	680e      	ldr	r6, [r1, #0]
 800adba:	bf08      	it	eq
 800adbc:	694b      	ldreq	r3, [r1, #20]
 800adbe:	600f      	str	r7, [r1, #0]
 800adc0:	bf18      	it	ne
 800adc2:	2300      	movne	r3, #0
 800adc4:	eba6 0807 	sub.w	r8, r6, r7
 800adc8:	608b      	str	r3, [r1, #8]
 800adca:	f1b8 0f00 	cmp.w	r8, #0
 800adce:	dd9c      	ble.n	800ad0a <__sflush_r+0x1a>
 800add0:	6a21      	ldr	r1, [r4, #32]
 800add2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800add4:	4643      	mov	r3, r8
 800add6:	463a      	mov	r2, r7
 800add8:	4628      	mov	r0, r5
 800adda:	47b0      	blx	r6
 800addc:	2800      	cmp	r0, #0
 800adde:	dc06      	bgt.n	800adee <__sflush_r+0xfe>
 800ade0:	89a3      	ldrh	r3, [r4, #12]
 800ade2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ade6:	81a3      	strh	r3, [r4, #12]
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	e78e      	b.n	800ad0c <__sflush_r+0x1c>
 800adee:	4407      	add	r7, r0
 800adf0:	eba8 0800 	sub.w	r8, r8, r0
 800adf4:	e7e9      	b.n	800adca <__sflush_r+0xda>
 800adf6:	bf00      	nop
 800adf8:	20400001 	.word	0x20400001

0800adfc <_fflush_r>:
 800adfc:	b538      	push	{r3, r4, r5, lr}
 800adfe:	690b      	ldr	r3, [r1, #16]
 800ae00:	4605      	mov	r5, r0
 800ae02:	460c      	mov	r4, r1
 800ae04:	b913      	cbnz	r3, 800ae0c <_fflush_r+0x10>
 800ae06:	2500      	movs	r5, #0
 800ae08:	4628      	mov	r0, r5
 800ae0a:	bd38      	pop	{r3, r4, r5, pc}
 800ae0c:	b118      	cbz	r0, 800ae16 <_fflush_r+0x1a>
 800ae0e:	6983      	ldr	r3, [r0, #24]
 800ae10:	b90b      	cbnz	r3, 800ae16 <_fflush_r+0x1a>
 800ae12:	f000 f887 	bl	800af24 <__sinit>
 800ae16:	4b14      	ldr	r3, [pc, #80]	; (800ae68 <_fflush_r+0x6c>)
 800ae18:	429c      	cmp	r4, r3
 800ae1a:	d11b      	bne.n	800ae54 <_fflush_r+0x58>
 800ae1c:	686c      	ldr	r4, [r5, #4]
 800ae1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d0ef      	beq.n	800ae06 <_fflush_r+0xa>
 800ae26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae28:	07d0      	lsls	r0, r2, #31
 800ae2a:	d404      	bmi.n	800ae36 <_fflush_r+0x3a>
 800ae2c:	0599      	lsls	r1, r3, #22
 800ae2e:	d402      	bmi.n	800ae36 <_fflush_r+0x3a>
 800ae30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae32:	f000 f91a 	bl	800b06a <__retarget_lock_acquire_recursive>
 800ae36:	4628      	mov	r0, r5
 800ae38:	4621      	mov	r1, r4
 800ae3a:	f7ff ff59 	bl	800acf0 <__sflush_r>
 800ae3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae40:	07da      	lsls	r2, r3, #31
 800ae42:	4605      	mov	r5, r0
 800ae44:	d4e0      	bmi.n	800ae08 <_fflush_r+0xc>
 800ae46:	89a3      	ldrh	r3, [r4, #12]
 800ae48:	059b      	lsls	r3, r3, #22
 800ae4a:	d4dd      	bmi.n	800ae08 <_fflush_r+0xc>
 800ae4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae4e:	f000 f90d 	bl	800b06c <__retarget_lock_release_recursive>
 800ae52:	e7d9      	b.n	800ae08 <_fflush_r+0xc>
 800ae54:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <_fflush_r+0x70>)
 800ae56:	429c      	cmp	r4, r3
 800ae58:	d101      	bne.n	800ae5e <_fflush_r+0x62>
 800ae5a:	68ac      	ldr	r4, [r5, #8]
 800ae5c:	e7df      	b.n	800ae1e <_fflush_r+0x22>
 800ae5e:	4b04      	ldr	r3, [pc, #16]	; (800ae70 <_fflush_r+0x74>)
 800ae60:	429c      	cmp	r4, r3
 800ae62:	bf08      	it	eq
 800ae64:	68ec      	ldreq	r4, [r5, #12]
 800ae66:	e7da      	b.n	800ae1e <_fflush_r+0x22>
 800ae68:	08013f08 	.word	0x08013f08
 800ae6c:	08013f28 	.word	0x08013f28
 800ae70:	08013ee8 	.word	0x08013ee8

0800ae74 <std>:
 800ae74:	2300      	movs	r3, #0
 800ae76:	b510      	push	{r4, lr}
 800ae78:	4604      	mov	r4, r0
 800ae7a:	e9c0 3300 	strd	r3, r3, [r0]
 800ae7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae82:	6083      	str	r3, [r0, #8]
 800ae84:	8181      	strh	r1, [r0, #12]
 800ae86:	6643      	str	r3, [r0, #100]	; 0x64
 800ae88:	81c2      	strh	r2, [r0, #14]
 800ae8a:	6183      	str	r3, [r0, #24]
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	2208      	movs	r2, #8
 800ae90:	305c      	adds	r0, #92	; 0x5c
 800ae92:	f7fe f9df 	bl	8009254 <memset>
 800ae96:	4b05      	ldr	r3, [pc, #20]	; (800aeac <std+0x38>)
 800ae98:	6263      	str	r3, [r4, #36]	; 0x24
 800ae9a:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <std+0x3c>)
 800ae9c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae9e:	4b05      	ldr	r3, [pc, #20]	; (800aeb4 <std+0x40>)
 800aea0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800aea2:	4b05      	ldr	r3, [pc, #20]	; (800aeb8 <std+0x44>)
 800aea4:	6224      	str	r4, [r4, #32]
 800aea6:	6323      	str	r3, [r4, #48]	; 0x30
 800aea8:	bd10      	pop	{r4, pc}
 800aeaa:	bf00      	nop
 800aeac:	0800bdf1 	.word	0x0800bdf1
 800aeb0:	0800be13 	.word	0x0800be13
 800aeb4:	0800be4b 	.word	0x0800be4b
 800aeb8:	0800be6f 	.word	0x0800be6f

0800aebc <_cleanup_r>:
 800aebc:	4901      	ldr	r1, [pc, #4]	; (800aec4 <_cleanup_r+0x8>)
 800aebe:	f000 b8af 	b.w	800b020 <_fwalk_reent>
 800aec2:	bf00      	nop
 800aec4:	0800adfd 	.word	0x0800adfd

0800aec8 <__sfmoreglue>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	1e4a      	subs	r2, r1, #1
 800aecc:	2568      	movs	r5, #104	; 0x68
 800aece:	4355      	muls	r5, r2
 800aed0:	460e      	mov	r6, r1
 800aed2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800aed6:	f7fe fa15 	bl	8009304 <_malloc_r>
 800aeda:	4604      	mov	r4, r0
 800aedc:	b140      	cbz	r0, 800aef0 <__sfmoreglue+0x28>
 800aede:	2100      	movs	r1, #0
 800aee0:	e9c0 1600 	strd	r1, r6, [r0]
 800aee4:	300c      	adds	r0, #12
 800aee6:	60a0      	str	r0, [r4, #8]
 800aee8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aeec:	f7fe f9b2 	bl	8009254 <memset>
 800aef0:	4620      	mov	r0, r4
 800aef2:	bd70      	pop	{r4, r5, r6, pc}

0800aef4 <__sfp_lock_acquire>:
 800aef4:	4801      	ldr	r0, [pc, #4]	; (800aefc <__sfp_lock_acquire+0x8>)
 800aef6:	f000 b8b8 	b.w	800b06a <__retarget_lock_acquire_recursive>
 800aefa:	bf00      	nop
 800aefc:	20000ee0 	.word	0x20000ee0

0800af00 <__sfp_lock_release>:
 800af00:	4801      	ldr	r0, [pc, #4]	; (800af08 <__sfp_lock_release+0x8>)
 800af02:	f000 b8b3 	b.w	800b06c <__retarget_lock_release_recursive>
 800af06:	bf00      	nop
 800af08:	20000ee0 	.word	0x20000ee0

0800af0c <__sinit_lock_acquire>:
 800af0c:	4801      	ldr	r0, [pc, #4]	; (800af14 <__sinit_lock_acquire+0x8>)
 800af0e:	f000 b8ac 	b.w	800b06a <__retarget_lock_acquire_recursive>
 800af12:	bf00      	nop
 800af14:	20000edb 	.word	0x20000edb

0800af18 <__sinit_lock_release>:
 800af18:	4801      	ldr	r0, [pc, #4]	; (800af20 <__sinit_lock_release+0x8>)
 800af1a:	f000 b8a7 	b.w	800b06c <__retarget_lock_release_recursive>
 800af1e:	bf00      	nop
 800af20:	20000edb 	.word	0x20000edb

0800af24 <__sinit>:
 800af24:	b510      	push	{r4, lr}
 800af26:	4604      	mov	r4, r0
 800af28:	f7ff fff0 	bl	800af0c <__sinit_lock_acquire>
 800af2c:	69a3      	ldr	r3, [r4, #24]
 800af2e:	b11b      	cbz	r3, 800af38 <__sinit+0x14>
 800af30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800af34:	f7ff bff0 	b.w	800af18 <__sinit_lock_release>
 800af38:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800af3c:	6523      	str	r3, [r4, #80]	; 0x50
 800af3e:	4b13      	ldr	r3, [pc, #76]	; (800af8c <__sinit+0x68>)
 800af40:	4a13      	ldr	r2, [pc, #76]	; (800af90 <__sinit+0x6c>)
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	62a2      	str	r2, [r4, #40]	; 0x28
 800af46:	42a3      	cmp	r3, r4
 800af48:	bf04      	itt	eq
 800af4a:	2301      	moveq	r3, #1
 800af4c:	61a3      	streq	r3, [r4, #24]
 800af4e:	4620      	mov	r0, r4
 800af50:	f000 f820 	bl	800af94 <__sfp>
 800af54:	6060      	str	r0, [r4, #4]
 800af56:	4620      	mov	r0, r4
 800af58:	f000 f81c 	bl	800af94 <__sfp>
 800af5c:	60a0      	str	r0, [r4, #8]
 800af5e:	4620      	mov	r0, r4
 800af60:	f000 f818 	bl	800af94 <__sfp>
 800af64:	2200      	movs	r2, #0
 800af66:	60e0      	str	r0, [r4, #12]
 800af68:	2104      	movs	r1, #4
 800af6a:	6860      	ldr	r0, [r4, #4]
 800af6c:	f7ff ff82 	bl	800ae74 <std>
 800af70:	68a0      	ldr	r0, [r4, #8]
 800af72:	2201      	movs	r2, #1
 800af74:	2109      	movs	r1, #9
 800af76:	f7ff ff7d 	bl	800ae74 <std>
 800af7a:	68e0      	ldr	r0, [r4, #12]
 800af7c:	2202      	movs	r2, #2
 800af7e:	2112      	movs	r1, #18
 800af80:	f7ff ff78 	bl	800ae74 <std>
 800af84:	2301      	movs	r3, #1
 800af86:	61a3      	str	r3, [r4, #24]
 800af88:	e7d2      	b.n	800af30 <__sinit+0xc>
 800af8a:	bf00      	nop
 800af8c:	08013e1c 	.word	0x08013e1c
 800af90:	0800aebd 	.word	0x0800aebd

0800af94 <__sfp>:
 800af94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af96:	4607      	mov	r7, r0
 800af98:	f7ff ffac 	bl	800aef4 <__sfp_lock_acquire>
 800af9c:	4b1e      	ldr	r3, [pc, #120]	; (800b018 <__sfp+0x84>)
 800af9e:	681e      	ldr	r6, [r3, #0]
 800afa0:	69b3      	ldr	r3, [r6, #24]
 800afa2:	b913      	cbnz	r3, 800afaa <__sfp+0x16>
 800afa4:	4630      	mov	r0, r6
 800afa6:	f7ff ffbd 	bl	800af24 <__sinit>
 800afaa:	3648      	adds	r6, #72	; 0x48
 800afac:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800afb0:	3b01      	subs	r3, #1
 800afb2:	d503      	bpl.n	800afbc <__sfp+0x28>
 800afb4:	6833      	ldr	r3, [r6, #0]
 800afb6:	b30b      	cbz	r3, 800affc <__sfp+0x68>
 800afb8:	6836      	ldr	r6, [r6, #0]
 800afba:	e7f7      	b.n	800afac <__sfp+0x18>
 800afbc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800afc0:	b9d5      	cbnz	r5, 800aff8 <__sfp+0x64>
 800afc2:	4b16      	ldr	r3, [pc, #88]	; (800b01c <__sfp+0x88>)
 800afc4:	60e3      	str	r3, [r4, #12]
 800afc6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800afca:	6665      	str	r5, [r4, #100]	; 0x64
 800afcc:	f000 f84c 	bl	800b068 <__retarget_lock_init_recursive>
 800afd0:	f7ff ff96 	bl	800af00 <__sfp_lock_release>
 800afd4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800afd8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800afdc:	6025      	str	r5, [r4, #0]
 800afde:	61a5      	str	r5, [r4, #24]
 800afe0:	2208      	movs	r2, #8
 800afe2:	4629      	mov	r1, r5
 800afe4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afe8:	f7fe f934 	bl	8009254 <memset>
 800afec:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aff0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aff4:	4620      	mov	r0, r4
 800aff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aff8:	3468      	adds	r4, #104	; 0x68
 800affa:	e7d9      	b.n	800afb0 <__sfp+0x1c>
 800affc:	2104      	movs	r1, #4
 800affe:	4638      	mov	r0, r7
 800b000:	f7ff ff62 	bl	800aec8 <__sfmoreglue>
 800b004:	4604      	mov	r4, r0
 800b006:	6030      	str	r0, [r6, #0]
 800b008:	2800      	cmp	r0, #0
 800b00a:	d1d5      	bne.n	800afb8 <__sfp+0x24>
 800b00c:	f7ff ff78 	bl	800af00 <__sfp_lock_release>
 800b010:	230c      	movs	r3, #12
 800b012:	603b      	str	r3, [r7, #0]
 800b014:	e7ee      	b.n	800aff4 <__sfp+0x60>
 800b016:	bf00      	nop
 800b018:	08013e1c 	.word	0x08013e1c
 800b01c:	ffff0001 	.word	0xffff0001

0800b020 <_fwalk_reent>:
 800b020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b024:	4606      	mov	r6, r0
 800b026:	4688      	mov	r8, r1
 800b028:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b02c:	2700      	movs	r7, #0
 800b02e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b032:	f1b9 0901 	subs.w	r9, r9, #1
 800b036:	d505      	bpl.n	800b044 <_fwalk_reent+0x24>
 800b038:	6824      	ldr	r4, [r4, #0]
 800b03a:	2c00      	cmp	r4, #0
 800b03c:	d1f7      	bne.n	800b02e <_fwalk_reent+0xe>
 800b03e:	4638      	mov	r0, r7
 800b040:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b044:	89ab      	ldrh	r3, [r5, #12]
 800b046:	2b01      	cmp	r3, #1
 800b048:	d907      	bls.n	800b05a <_fwalk_reent+0x3a>
 800b04a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b04e:	3301      	adds	r3, #1
 800b050:	d003      	beq.n	800b05a <_fwalk_reent+0x3a>
 800b052:	4629      	mov	r1, r5
 800b054:	4630      	mov	r0, r6
 800b056:	47c0      	blx	r8
 800b058:	4307      	orrs	r7, r0
 800b05a:	3568      	adds	r5, #104	; 0x68
 800b05c:	e7e9      	b.n	800b032 <_fwalk_reent+0x12>
	...

0800b060 <_localeconv_r>:
 800b060:	4800      	ldr	r0, [pc, #0]	; (800b064 <_localeconv_r+0x4>)
 800b062:	4770      	bx	lr
 800b064:	20000164 	.word	0x20000164

0800b068 <__retarget_lock_init_recursive>:
 800b068:	4770      	bx	lr

0800b06a <__retarget_lock_acquire_recursive>:
 800b06a:	4770      	bx	lr

0800b06c <__retarget_lock_release_recursive>:
 800b06c:	4770      	bx	lr

0800b06e <__swhatbuf_r>:
 800b06e:	b570      	push	{r4, r5, r6, lr}
 800b070:	460e      	mov	r6, r1
 800b072:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b076:	2900      	cmp	r1, #0
 800b078:	b096      	sub	sp, #88	; 0x58
 800b07a:	4614      	mov	r4, r2
 800b07c:	461d      	mov	r5, r3
 800b07e:	da07      	bge.n	800b090 <__swhatbuf_r+0x22>
 800b080:	2300      	movs	r3, #0
 800b082:	602b      	str	r3, [r5, #0]
 800b084:	89b3      	ldrh	r3, [r6, #12]
 800b086:	061a      	lsls	r2, r3, #24
 800b088:	d410      	bmi.n	800b0ac <__swhatbuf_r+0x3e>
 800b08a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b08e:	e00e      	b.n	800b0ae <__swhatbuf_r+0x40>
 800b090:	466a      	mov	r2, sp
 800b092:	f000 ff43 	bl	800bf1c <_fstat_r>
 800b096:	2800      	cmp	r0, #0
 800b098:	dbf2      	blt.n	800b080 <__swhatbuf_r+0x12>
 800b09a:	9a01      	ldr	r2, [sp, #4]
 800b09c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b0a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b0a4:	425a      	negs	r2, r3
 800b0a6:	415a      	adcs	r2, r3
 800b0a8:	602a      	str	r2, [r5, #0]
 800b0aa:	e7ee      	b.n	800b08a <__swhatbuf_r+0x1c>
 800b0ac:	2340      	movs	r3, #64	; 0x40
 800b0ae:	2000      	movs	r0, #0
 800b0b0:	6023      	str	r3, [r4, #0]
 800b0b2:	b016      	add	sp, #88	; 0x58
 800b0b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b0b8 <__smakebuf_r>:
 800b0b8:	898b      	ldrh	r3, [r1, #12]
 800b0ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b0bc:	079d      	lsls	r5, r3, #30
 800b0be:	4606      	mov	r6, r0
 800b0c0:	460c      	mov	r4, r1
 800b0c2:	d507      	bpl.n	800b0d4 <__smakebuf_r+0x1c>
 800b0c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b0c8:	6023      	str	r3, [r4, #0]
 800b0ca:	6123      	str	r3, [r4, #16]
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	6163      	str	r3, [r4, #20]
 800b0d0:	b002      	add	sp, #8
 800b0d2:	bd70      	pop	{r4, r5, r6, pc}
 800b0d4:	ab01      	add	r3, sp, #4
 800b0d6:	466a      	mov	r2, sp
 800b0d8:	f7ff ffc9 	bl	800b06e <__swhatbuf_r>
 800b0dc:	9900      	ldr	r1, [sp, #0]
 800b0de:	4605      	mov	r5, r0
 800b0e0:	4630      	mov	r0, r6
 800b0e2:	f7fe f90f 	bl	8009304 <_malloc_r>
 800b0e6:	b948      	cbnz	r0, 800b0fc <__smakebuf_r+0x44>
 800b0e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0ec:	059a      	lsls	r2, r3, #22
 800b0ee:	d4ef      	bmi.n	800b0d0 <__smakebuf_r+0x18>
 800b0f0:	f023 0303 	bic.w	r3, r3, #3
 800b0f4:	f043 0302 	orr.w	r3, r3, #2
 800b0f8:	81a3      	strh	r3, [r4, #12]
 800b0fa:	e7e3      	b.n	800b0c4 <__smakebuf_r+0xc>
 800b0fc:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <__smakebuf_r+0x7c>)
 800b0fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800b100:	89a3      	ldrh	r3, [r4, #12]
 800b102:	6020      	str	r0, [r4, #0]
 800b104:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b108:	81a3      	strh	r3, [r4, #12]
 800b10a:	9b00      	ldr	r3, [sp, #0]
 800b10c:	6163      	str	r3, [r4, #20]
 800b10e:	9b01      	ldr	r3, [sp, #4]
 800b110:	6120      	str	r0, [r4, #16]
 800b112:	b15b      	cbz	r3, 800b12c <__smakebuf_r+0x74>
 800b114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b118:	4630      	mov	r0, r6
 800b11a:	f000 ff11 	bl	800bf40 <_isatty_r>
 800b11e:	b128      	cbz	r0, 800b12c <__smakebuf_r+0x74>
 800b120:	89a3      	ldrh	r3, [r4, #12]
 800b122:	f023 0303 	bic.w	r3, r3, #3
 800b126:	f043 0301 	orr.w	r3, r3, #1
 800b12a:	81a3      	strh	r3, [r4, #12]
 800b12c:	89a0      	ldrh	r0, [r4, #12]
 800b12e:	4305      	orrs	r5, r0
 800b130:	81a5      	strh	r5, [r4, #12]
 800b132:	e7cd      	b.n	800b0d0 <__smakebuf_r+0x18>
 800b134:	0800aebd 	.word	0x0800aebd

0800b138 <memcpy>:
 800b138:	440a      	add	r2, r1
 800b13a:	4291      	cmp	r1, r2
 800b13c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b140:	d100      	bne.n	800b144 <memcpy+0xc>
 800b142:	4770      	bx	lr
 800b144:	b510      	push	{r4, lr}
 800b146:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b14a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b14e:	4291      	cmp	r1, r2
 800b150:	d1f9      	bne.n	800b146 <memcpy+0xe>
 800b152:	bd10      	pop	{r4, pc}

0800b154 <__malloc_lock>:
 800b154:	4801      	ldr	r0, [pc, #4]	; (800b15c <__malloc_lock+0x8>)
 800b156:	f7ff bf88 	b.w	800b06a <__retarget_lock_acquire_recursive>
 800b15a:	bf00      	nop
 800b15c:	20000edc 	.word	0x20000edc

0800b160 <__malloc_unlock>:
 800b160:	4801      	ldr	r0, [pc, #4]	; (800b168 <__malloc_unlock+0x8>)
 800b162:	f7ff bf83 	b.w	800b06c <__retarget_lock_release_recursive>
 800b166:	bf00      	nop
 800b168:	20000edc 	.word	0x20000edc

0800b16c <_Balloc>:
 800b16c:	b570      	push	{r4, r5, r6, lr}
 800b16e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b170:	4604      	mov	r4, r0
 800b172:	460d      	mov	r5, r1
 800b174:	b976      	cbnz	r6, 800b194 <_Balloc+0x28>
 800b176:	2010      	movs	r0, #16
 800b178:	f7fe f85c 	bl	8009234 <malloc>
 800b17c:	4602      	mov	r2, r0
 800b17e:	6260      	str	r0, [r4, #36]	; 0x24
 800b180:	b920      	cbnz	r0, 800b18c <_Balloc+0x20>
 800b182:	4b18      	ldr	r3, [pc, #96]	; (800b1e4 <_Balloc+0x78>)
 800b184:	4818      	ldr	r0, [pc, #96]	; (800b1e8 <_Balloc+0x7c>)
 800b186:	2166      	movs	r1, #102	; 0x66
 800b188:	f000 fe88 	bl	800be9c <__assert_func>
 800b18c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b190:	6006      	str	r6, [r0, #0]
 800b192:	60c6      	str	r6, [r0, #12]
 800b194:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b196:	68f3      	ldr	r3, [r6, #12]
 800b198:	b183      	cbz	r3, 800b1bc <_Balloc+0x50>
 800b19a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b19c:	68db      	ldr	r3, [r3, #12]
 800b19e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b1a2:	b9b8      	cbnz	r0, 800b1d4 <_Balloc+0x68>
 800b1a4:	2101      	movs	r1, #1
 800b1a6:	fa01 f605 	lsl.w	r6, r1, r5
 800b1aa:	1d72      	adds	r2, r6, #5
 800b1ac:	0092      	lsls	r2, r2, #2
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f000 fb5a 	bl	800b868 <_calloc_r>
 800b1b4:	b160      	cbz	r0, 800b1d0 <_Balloc+0x64>
 800b1b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b1ba:	e00e      	b.n	800b1da <_Balloc+0x6e>
 800b1bc:	2221      	movs	r2, #33	; 0x21
 800b1be:	2104      	movs	r1, #4
 800b1c0:	4620      	mov	r0, r4
 800b1c2:	f000 fb51 	bl	800b868 <_calloc_r>
 800b1c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b1c8:	60f0      	str	r0, [r6, #12]
 800b1ca:	68db      	ldr	r3, [r3, #12]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d1e4      	bne.n	800b19a <_Balloc+0x2e>
 800b1d0:	2000      	movs	r0, #0
 800b1d2:	bd70      	pop	{r4, r5, r6, pc}
 800b1d4:	6802      	ldr	r2, [r0, #0]
 800b1d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b1da:	2300      	movs	r3, #0
 800b1dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b1e0:	e7f7      	b.n	800b1d2 <_Balloc+0x66>
 800b1e2:	bf00      	nop
 800b1e4:	08013e61 	.word	0x08013e61
 800b1e8:	08013f48 	.word	0x08013f48

0800b1ec <_Bfree>:
 800b1ec:	b570      	push	{r4, r5, r6, lr}
 800b1ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1f0:	4605      	mov	r5, r0
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	b976      	cbnz	r6, 800b214 <_Bfree+0x28>
 800b1f6:	2010      	movs	r0, #16
 800b1f8:	f7fe f81c 	bl	8009234 <malloc>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	6268      	str	r0, [r5, #36]	; 0x24
 800b200:	b920      	cbnz	r0, 800b20c <_Bfree+0x20>
 800b202:	4b09      	ldr	r3, [pc, #36]	; (800b228 <_Bfree+0x3c>)
 800b204:	4809      	ldr	r0, [pc, #36]	; (800b22c <_Bfree+0x40>)
 800b206:	218a      	movs	r1, #138	; 0x8a
 800b208:	f000 fe48 	bl	800be9c <__assert_func>
 800b20c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b210:	6006      	str	r6, [r0, #0]
 800b212:	60c6      	str	r6, [r0, #12]
 800b214:	b13c      	cbz	r4, 800b226 <_Bfree+0x3a>
 800b216:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b218:	6862      	ldr	r2, [r4, #4]
 800b21a:	68db      	ldr	r3, [r3, #12]
 800b21c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b220:	6021      	str	r1, [r4, #0]
 800b222:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b226:	bd70      	pop	{r4, r5, r6, pc}
 800b228:	08013e61 	.word	0x08013e61
 800b22c:	08013f48 	.word	0x08013f48

0800b230 <__multadd>:
 800b230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b234:	690e      	ldr	r6, [r1, #16]
 800b236:	4607      	mov	r7, r0
 800b238:	4698      	mov	r8, r3
 800b23a:	460c      	mov	r4, r1
 800b23c:	f101 0014 	add.w	r0, r1, #20
 800b240:	2300      	movs	r3, #0
 800b242:	6805      	ldr	r5, [r0, #0]
 800b244:	b2a9      	uxth	r1, r5
 800b246:	fb02 8101 	mla	r1, r2, r1, r8
 800b24a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b24e:	0c2d      	lsrs	r5, r5, #16
 800b250:	fb02 c505 	mla	r5, r2, r5, ip
 800b254:	b289      	uxth	r1, r1
 800b256:	3301      	adds	r3, #1
 800b258:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b25c:	429e      	cmp	r6, r3
 800b25e:	f840 1b04 	str.w	r1, [r0], #4
 800b262:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b266:	dcec      	bgt.n	800b242 <__multadd+0x12>
 800b268:	f1b8 0f00 	cmp.w	r8, #0
 800b26c:	d022      	beq.n	800b2b4 <__multadd+0x84>
 800b26e:	68a3      	ldr	r3, [r4, #8]
 800b270:	42b3      	cmp	r3, r6
 800b272:	dc19      	bgt.n	800b2a8 <__multadd+0x78>
 800b274:	6861      	ldr	r1, [r4, #4]
 800b276:	4638      	mov	r0, r7
 800b278:	3101      	adds	r1, #1
 800b27a:	f7ff ff77 	bl	800b16c <_Balloc>
 800b27e:	4605      	mov	r5, r0
 800b280:	b928      	cbnz	r0, 800b28e <__multadd+0x5e>
 800b282:	4602      	mov	r2, r0
 800b284:	4b0d      	ldr	r3, [pc, #52]	; (800b2bc <__multadd+0x8c>)
 800b286:	480e      	ldr	r0, [pc, #56]	; (800b2c0 <__multadd+0x90>)
 800b288:	21b5      	movs	r1, #181	; 0xb5
 800b28a:	f000 fe07 	bl	800be9c <__assert_func>
 800b28e:	6922      	ldr	r2, [r4, #16]
 800b290:	3202      	adds	r2, #2
 800b292:	f104 010c 	add.w	r1, r4, #12
 800b296:	0092      	lsls	r2, r2, #2
 800b298:	300c      	adds	r0, #12
 800b29a:	f7ff ff4d 	bl	800b138 <memcpy>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4638      	mov	r0, r7
 800b2a2:	f7ff ffa3 	bl	800b1ec <_Bfree>
 800b2a6:	462c      	mov	r4, r5
 800b2a8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b2ac:	3601      	adds	r6, #1
 800b2ae:	f8c3 8014 	str.w	r8, [r3, #20]
 800b2b2:	6126      	str	r6, [r4, #16]
 800b2b4:	4620      	mov	r0, r4
 800b2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b2ba:	bf00      	nop
 800b2bc:	08013ed7 	.word	0x08013ed7
 800b2c0:	08013f48 	.word	0x08013f48

0800b2c4 <__hi0bits>:
 800b2c4:	0c03      	lsrs	r3, r0, #16
 800b2c6:	041b      	lsls	r3, r3, #16
 800b2c8:	b9d3      	cbnz	r3, 800b300 <__hi0bits+0x3c>
 800b2ca:	0400      	lsls	r0, r0, #16
 800b2cc:	2310      	movs	r3, #16
 800b2ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b2d2:	bf04      	itt	eq
 800b2d4:	0200      	lsleq	r0, r0, #8
 800b2d6:	3308      	addeq	r3, #8
 800b2d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b2dc:	bf04      	itt	eq
 800b2de:	0100      	lsleq	r0, r0, #4
 800b2e0:	3304      	addeq	r3, #4
 800b2e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b2e6:	bf04      	itt	eq
 800b2e8:	0080      	lsleq	r0, r0, #2
 800b2ea:	3302      	addeq	r3, #2
 800b2ec:	2800      	cmp	r0, #0
 800b2ee:	db05      	blt.n	800b2fc <__hi0bits+0x38>
 800b2f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b2f4:	f103 0301 	add.w	r3, r3, #1
 800b2f8:	bf08      	it	eq
 800b2fa:	2320      	moveq	r3, #32
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	4770      	bx	lr
 800b300:	2300      	movs	r3, #0
 800b302:	e7e4      	b.n	800b2ce <__hi0bits+0xa>

0800b304 <__lo0bits>:
 800b304:	6803      	ldr	r3, [r0, #0]
 800b306:	f013 0207 	ands.w	r2, r3, #7
 800b30a:	4601      	mov	r1, r0
 800b30c:	d00b      	beq.n	800b326 <__lo0bits+0x22>
 800b30e:	07da      	lsls	r2, r3, #31
 800b310:	d424      	bmi.n	800b35c <__lo0bits+0x58>
 800b312:	0798      	lsls	r0, r3, #30
 800b314:	bf49      	itett	mi
 800b316:	085b      	lsrmi	r3, r3, #1
 800b318:	089b      	lsrpl	r3, r3, #2
 800b31a:	2001      	movmi	r0, #1
 800b31c:	600b      	strmi	r3, [r1, #0]
 800b31e:	bf5c      	itt	pl
 800b320:	600b      	strpl	r3, [r1, #0]
 800b322:	2002      	movpl	r0, #2
 800b324:	4770      	bx	lr
 800b326:	b298      	uxth	r0, r3
 800b328:	b9b0      	cbnz	r0, 800b358 <__lo0bits+0x54>
 800b32a:	0c1b      	lsrs	r3, r3, #16
 800b32c:	2010      	movs	r0, #16
 800b32e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b332:	bf04      	itt	eq
 800b334:	0a1b      	lsreq	r3, r3, #8
 800b336:	3008      	addeq	r0, #8
 800b338:	071a      	lsls	r2, r3, #28
 800b33a:	bf04      	itt	eq
 800b33c:	091b      	lsreq	r3, r3, #4
 800b33e:	3004      	addeq	r0, #4
 800b340:	079a      	lsls	r2, r3, #30
 800b342:	bf04      	itt	eq
 800b344:	089b      	lsreq	r3, r3, #2
 800b346:	3002      	addeq	r0, #2
 800b348:	07da      	lsls	r2, r3, #31
 800b34a:	d403      	bmi.n	800b354 <__lo0bits+0x50>
 800b34c:	085b      	lsrs	r3, r3, #1
 800b34e:	f100 0001 	add.w	r0, r0, #1
 800b352:	d005      	beq.n	800b360 <__lo0bits+0x5c>
 800b354:	600b      	str	r3, [r1, #0]
 800b356:	4770      	bx	lr
 800b358:	4610      	mov	r0, r2
 800b35a:	e7e8      	b.n	800b32e <__lo0bits+0x2a>
 800b35c:	2000      	movs	r0, #0
 800b35e:	4770      	bx	lr
 800b360:	2020      	movs	r0, #32
 800b362:	4770      	bx	lr

0800b364 <__i2b>:
 800b364:	b510      	push	{r4, lr}
 800b366:	460c      	mov	r4, r1
 800b368:	2101      	movs	r1, #1
 800b36a:	f7ff feff 	bl	800b16c <_Balloc>
 800b36e:	4602      	mov	r2, r0
 800b370:	b928      	cbnz	r0, 800b37e <__i2b+0x1a>
 800b372:	4b05      	ldr	r3, [pc, #20]	; (800b388 <__i2b+0x24>)
 800b374:	4805      	ldr	r0, [pc, #20]	; (800b38c <__i2b+0x28>)
 800b376:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b37a:	f000 fd8f 	bl	800be9c <__assert_func>
 800b37e:	2301      	movs	r3, #1
 800b380:	6144      	str	r4, [r0, #20]
 800b382:	6103      	str	r3, [r0, #16]
 800b384:	bd10      	pop	{r4, pc}
 800b386:	bf00      	nop
 800b388:	08013ed7 	.word	0x08013ed7
 800b38c:	08013f48 	.word	0x08013f48

0800b390 <__multiply>:
 800b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b394:	4614      	mov	r4, r2
 800b396:	690a      	ldr	r2, [r1, #16]
 800b398:	6923      	ldr	r3, [r4, #16]
 800b39a:	429a      	cmp	r2, r3
 800b39c:	bfb8      	it	lt
 800b39e:	460b      	movlt	r3, r1
 800b3a0:	460d      	mov	r5, r1
 800b3a2:	bfbc      	itt	lt
 800b3a4:	4625      	movlt	r5, r4
 800b3a6:	461c      	movlt	r4, r3
 800b3a8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b3ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b3b0:	68ab      	ldr	r3, [r5, #8]
 800b3b2:	6869      	ldr	r1, [r5, #4]
 800b3b4:	eb0a 0709 	add.w	r7, sl, r9
 800b3b8:	42bb      	cmp	r3, r7
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	bfb8      	it	lt
 800b3be:	3101      	addlt	r1, #1
 800b3c0:	f7ff fed4 	bl	800b16c <_Balloc>
 800b3c4:	b930      	cbnz	r0, 800b3d4 <__multiply+0x44>
 800b3c6:	4602      	mov	r2, r0
 800b3c8:	4b42      	ldr	r3, [pc, #264]	; (800b4d4 <__multiply+0x144>)
 800b3ca:	4843      	ldr	r0, [pc, #268]	; (800b4d8 <__multiply+0x148>)
 800b3cc:	f240 115d 	movw	r1, #349	; 0x15d
 800b3d0:	f000 fd64 	bl	800be9c <__assert_func>
 800b3d4:	f100 0614 	add.w	r6, r0, #20
 800b3d8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b3dc:	4633      	mov	r3, r6
 800b3de:	2200      	movs	r2, #0
 800b3e0:	4543      	cmp	r3, r8
 800b3e2:	d31e      	bcc.n	800b422 <__multiply+0x92>
 800b3e4:	f105 0c14 	add.w	ip, r5, #20
 800b3e8:	f104 0314 	add.w	r3, r4, #20
 800b3ec:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b3f0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b3f4:	9202      	str	r2, [sp, #8]
 800b3f6:	ebac 0205 	sub.w	r2, ip, r5
 800b3fa:	3a15      	subs	r2, #21
 800b3fc:	f022 0203 	bic.w	r2, r2, #3
 800b400:	3204      	adds	r2, #4
 800b402:	f105 0115 	add.w	r1, r5, #21
 800b406:	458c      	cmp	ip, r1
 800b408:	bf38      	it	cc
 800b40a:	2204      	movcc	r2, #4
 800b40c:	9201      	str	r2, [sp, #4]
 800b40e:	9a02      	ldr	r2, [sp, #8]
 800b410:	9303      	str	r3, [sp, #12]
 800b412:	429a      	cmp	r2, r3
 800b414:	d808      	bhi.n	800b428 <__multiply+0x98>
 800b416:	2f00      	cmp	r7, #0
 800b418:	dc55      	bgt.n	800b4c6 <__multiply+0x136>
 800b41a:	6107      	str	r7, [r0, #16]
 800b41c:	b005      	add	sp, #20
 800b41e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b422:	f843 2b04 	str.w	r2, [r3], #4
 800b426:	e7db      	b.n	800b3e0 <__multiply+0x50>
 800b428:	f8b3 a000 	ldrh.w	sl, [r3]
 800b42c:	f1ba 0f00 	cmp.w	sl, #0
 800b430:	d020      	beq.n	800b474 <__multiply+0xe4>
 800b432:	f105 0e14 	add.w	lr, r5, #20
 800b436:	46b1      	mov	r9, r6
 800b438:	2200      	movs	r2, #0
 800b43a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b43e:	f8d9 b000 	ldr.w	fp, [r9]
 800b442:	b2a1      	uxth	r1, r4
 800b444:	fa1f fb8b 	uxth.w	fp, fp
 800b448:	fb0a b101 	mla	r1, sl, r1, fp
 800b44c:	4411      	add	r1, r2
 800b44e:	f8d9 2000 	ldr.w	r2, [r9]
 800b452:	0c24      	lsrs	r4, r4, #16
 800b454:	0c12      	lsrs	r2, r2, #16
 800b456:	fb0a 2404 	mla	r4, sl, r4, r2
 800b45a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b45e:	b289      	uxth	r1, r1
 800b460:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b464:	45f4      	cmp	ip, lr
 800b466:	f849 1b04 	str.w	r1, [r9], #4
 800b46a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b46e:	d8e4      	bhi.n	800b43a <__multiply+0xaa>
 800b470:	9901      	ldr	r1, [sp, #4]
 800b472:	5072      	str	r2, [r6, r1]
 800b474:	9a03      	ldr	r2, [sp, #12]
 800b476:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b47a:	3304      	adds	r3, #4
 800b47c:	f1b9 0f00 	cmp.w	r9, #0
 800b480:	d01f      	beq.n	800b4c2 <__multiply+0x132>
 800b482:	6834      	ldr	r4, [r6, #0]
 800b484:	f105 0114 	add.w	r1, r5, #20
 800b488:	46b6      	mov	lr, r6
 800b48a:	f04f 0a00 	mov.w	sl, #0
 800b48e:	880a      	ldrh	r2, [r1, #0]
 800b490:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b494:	fb09 b202 	mla	r2, r9, r2, fp
 800b498:	4492      	add	sl, r2
 800b49a:	b2a4      	uxth	r4, r4
 800b49c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b4a0:	f84e 4b04 	str.w	r4, [lr], #4
 800b4a4:	f851 4b04 	ldr.w	r4, [r1], #4
 800b4a8:	f8be 2000 	ldrh.w	r2, [lr]
 800b4ac:	0c24      	lsrs	r4, r4, #16
 800b4ae:	fb09 2404 	mla	r4, r9, r4, r2
 800b4b2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b4b6:	458c      	cmp	ip, r1
 800b4b8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b4bc:	d8e7      	bhi.n	800b48e <__multiply+0xfe>
 800b4be:	9a01      	ldr	r2, [sp, #4]
 800b4c0:	50b4      	str	r4, [r6, r2]
 800b4c2:	3604      	adds	r6, #4
 800b4c4:	e7a3      	b.n	800b40e <__multiply+0x7e>
 800b4c6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d1a5      	bne.n	800b41a <__multiply+0x8a>
 800b4ce:	3f01      	subs	r7, #1
 800b4d0:	e7a1      	b.n	800b416 <__multiply+0x86>
 800b4d2:	bf00      	nop
 800b4d4:	08013ed7 	.word	0x08013ed7
 800b4d8:	08013f48 	.word	0x08013f48

0800b4dc <__pow5mult>:
 800b4dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4e0:	4615      	mov	r5, r2
 800b4e2:	f012 0203 	ands.w	r2, r2, #3
 800b4e6:	4606      	mov	r6, r0
 800b4e8:	460f      	mov	r7, r1
 800b4ea:	d007      	beq.n	800b4fc <__pow5mult+0x20>
 800b4ec:	4c25      	ldr	r4, [pc, #148]	; (800b584 <__pow5mult+0xa8>)
 800b4ee:	3a01      	subs	r2, #1
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4f6:	f7ff fe9b 	bl	800b230 <__multadd>
 800b4fa:	4607      	mov	r7, r0
 800b4fc:	10ad      	asrs	r5, r5, #2
 800b4fe:	d03d      	beq.n	800b57c <__pow5mult+0xa0>
 800b500:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b502:	b97c      	cbnz	r4, 800b524 <__pow5mult+0x48>
 800b504:	2010      	movs	r0, #16
 800b506:	f7fd fe95 	bl	8009234 <malloc>
 800b50a:	4602      	mov	r2, r0
 800b50c:	6270      	str	r0, [r6, #36]	; 0x24
 800b50e:	b928      	cbnz	r0, 800b51c <__pow5mult+0x40>
 800b510:	4b1d      	ldr	r3, [pc, #116]	; (800b588 <__pow5mult+0xac>)
 800b512:	481e      	ldr	r0, [pc, #120]	; (800b58c <__pow5mult+0xb0>)
 800b514:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b518:	f000 fcc0 	bl	800be9c <__assert_func>
 800b51c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b520:	6004      	str	r4, [r0, #0]
 800b522:	60c4      	str	r4, [r0, #12]
 800b524:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b528:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b52c:	b94c      	cbnz	r4, 800b542 <__pow5mult+0x66>
 800b52e:	f240 2171 	movw	r1, #625	; 0x271
 800b532:	4630      	mov	r0, r6
 800b534:	f7ff ff16 	bl	800b364 <__i2b>
 800b538:	2300      	movs	r3, #0
 800b53a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b53e:	4604      	mov	r4, r0
 800b540:	6003      	str	r3, [r0, #0]
 800b542:	f04f 0900 	mov.w	r9, #0
 800b546:	07eb      	lsls	r3, r5, #31
 800b548:	d50a      	bpl.n	800b560 <__pow5mult+0x84>
 800b54a:	4639      	mov	r1, r7
 800b54c:	4622      	mov	r2, r4
 800b54e:	4630      	mov	r0, r6
 800b550:	f7ff ff1e 	bl	800b390 <__multiply>
 800b554:	4639      	mov	r1, r7
 800b556:	4680      	mov	r8, r0
 800b558:	4630      	mov	r0, r6
 800b55a:	f7ff fe47 	bl	800b1ec <_Bfree>
 800b55e:	4647      	mov	r7, r8
 800b560:	106d      	asrs	r5, r5, #1
 800b562:	d00b      	beq.n	800b57c <__pow5mult+0xa0>
 800b564:	6820      	ldr	r0, [r4, #0]
 800b566:	b938      	cbnz	r0, 800b578 <__pow5mult+0x9c>
 800b568:	4622      	mov	r2, r4
 800b56a:	4621      	mov	r1, r4
 800b56c:	4630      	mov	r0, r6
 800b56e:	f7ff ff0f 	bl	800b390 <__multiply>
 800b572:	6020      	str	r0, [r4, #0]
 800b574:	f8c0 9000 	str.w	r9, [r0]
 800b578:	4604      	mov	r4, r0
 800b57a:	e7e4      	b.n	800b546 <__pow5mult+0x6a>
 800b57c:	4638      	mov	r0, r7
 800b57e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b582:	bf00      	nop
 800b584:	08014098 	.word	0x08014098
 800b588:	08013e61 	.word	0x08013e61
 800b58c:	08013f48 	.word	0x08013f48

0800b590 <__lshift>:
 800b590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b594:	460c      	mov	r4, r1
 800b596:	6849      	ldr	r1, [r1, #4]
 800b598:	6923      	ldr	r3, [r4, #16]
 800b59a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b59e:	68a3      	ldr	r3, [r4, #8]
 800b5a0:	4607      	mov	r7, r0
 800b5a2:	4691      	mov	r9, r2
 800b5a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b5a8:	f108 0601 	add.w	r6, r8, #1
 800b5ac:	42b3      	cmp	r3, r6
 800b5ae:	db0b      	blt.n	800b5c8 <__lshift+0x38>
 800b5b0:	4638      	mov	r0, r7
 800b5b2:	f7ff fddb 	bl	800b16c <_Balloc>
 800b5b6:	4605      	mov	r5, r0
 800b5b8:	b948      	cbnz	r0, 800b5ce <__lshift+0x3e>
 800b5ba:	4602      	mov	r2, r0
 800b5bc:	4b28      	ldr	r3, [pc, #160]	; (800b660 <__lshift+0xd0>)
 800b5be:	4829      	ldr	r0, [pc, #164]	; (800b664 <__lshift+0xd4>)
 800b5c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b5c4:	f000 fc6a 	bl	800be9c <__assert_func>
 800b5c8:	3101      	adds	r1, #1
 800b5ca:	005b      	lsls	r3, r3, #1
 800b5cc:	e7ee      	b.n	800b5ac <__lshift+0x1c>
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	f100 0114 	add.w	r1, r0, #20
 800b5d4:	f100 0210 	add.w	r2, r0, #16
 800b5d8:	4618      	mov	r0, r3
 800b5da:	4553      	cmp	r3, sl
 800b5dc:	db33      	blt.n	800b646 <__lshift+0xb6>
 800b5de:	6920      	ldr	r0, [r4, #16]
 800b5e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b5e4:	f104 0314 	add.w	r3, r4, #20
 800b5e8:	f019 091f 	ands.w	r9, r9, #31
 800b5ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5f4:	d02b      	beq.n	800b64e <__lshift+0xbe>
 800b5f6:	f1c9 0e20 	rsb	lr, r9, #32
 800b5fa:	468a      	mov	sl, r1
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	6818      	ldr	r0, [r3, #0]
 800b600:	fa00 f009 	lsl.w	r0, r0, r9
 800b604:	4302      	orrs	r2, r0
 800b606:	f84a 2b04 	str.w	r2, [sl], #4
 800b60a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b60e:	459c      	cmp	ip, r3
 800b610:	fa22 f20e 	lsr.w	r2, r2, lr
 800b614:	d8f3      	bhi.n	800b5fe <__lshift+0x6e>
 800b616:	ebac 0304 	sub.w	r3, ip, r4
 800b61a:	3b15      	subs	r3, #21
 800b61c:	f023 0303 	bic.w	r3, r3, #3
 800b620:	3304      	adds	r3, #4
 800b622:	f104 0015 	add.w	r0, r4, #21
 800b626:	4584      	cmp	ip, r0
 800b628:	bf38      	it	cc
 800b62a:	2304      	movcc	r3, #4
 800b62c:	50ca      	str	r2, [r1, r3]
 800b62e:	b10a      	cbz	r2, 800b634 <__lshift+0xa4>
 800b630:	f108 0602 	add.w	r6, r8, #2
 800b634:	3e01      	subs	r6, #1
 800b636:	4638      	mov	r0, r7
 800b638:	612e      	str	r6, [r5, #16]
 800b63a:	4621      	mov	r1, r4
 800b63c:	f7ff fdd6 	bl	800b1ec <_Bfree>
 800b640:	4628      	mov	r0, r5
 800b642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b646:	f842 0f04 	str.w	r0, [r2, #4]!
 800b64a:	3301      	adds	r3, #1
 800b64c:	e7c5      	b.n	800b5da <__lshift+0x4a>
 800b64e:	3904      	subs	r1, #4
 800b650:	f853 2b04 	ldr.w	r2, [r3], #4
 800b654:	f841 2f04 	str.w	r2, [r1, #4]!
 800b658:	459c      	cmp	ip, r3
 800b65a:	d8f9      	bhi.n	800b650 <__lshift+0xc0>
 800b65c:	e7ea      	b.n	800b634 <__lshift+0xa4>
 800b65e:	bf00      	nop
 800b660:	08013ed7 	.word	0x08013ed7
 800b664:	08013f48 	.word	0x08013f48

0800b668 <__mcmp>:
 800b668:	b530      	push	{r4, r5, lr}
 800b66a:	6902      	ldr	r2, [r0, #16]
 800b66c:	690c      	ldr	r4, [r1, #16]
 800b66e:	1b12      	subs	r2, r2, r4
 800b670:	d10e      	bne.n	800b690 <__mcmp+0x28>
 800b672:	f100 0314 	add.w	r3, r0, #20
 800b676:	3114      	adds	r1, #20
 800b678:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b67c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b680:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b684:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b688:	42a5      	cmp	r5, r4
 800b68a:	d003      	beq.n	800b694 <__mcmp+0x2c>
 800b68c:	d305      	bcc.n	800b69a <__mcmp+0x32>
 800b68e:	2201      	movs	r2, #1
 800b690:	4610      	mov	r0, r2
 800b692:	bd30      	pop	{r4, r5, pc}
 800b694:	4283      	cmp	r3, r0
 800b696:	d3f3      	bcc.n	800b680 <__mcmp+0x18>
 800b698:	e7fa      	b.n	800b690 <__mcmp+0x28>
 800b69a:	f04f 32ff 	mov.w	r2, #4294967295
 800b69e:	e7f7      	b.n	800b690 <__mcmp+0x28>

0800b6a0 <__mdiff>:
 800b6a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a4:	460c      	mov	r4, r1
 800b6a6:	4606      	mov	r6, r0
 800b6a8:	4611      	mov	r1, r2
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	4617      	mov	r7, r2
 800b6ae:	f7ff ffdb 	bl	800b668 <__mcmp>
 800b6b2:	1e05      	subs	r5, r0, #0
 800b6b4:	d110      	bne.n	800b6d8 <__mdiff+0x38>
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	4630      	mov	r0, r6
 800b6ba:	f7ff fd57 	bl	800b16c <_Balloc>
 800b6be:	b930      	cbnz	r0, 800b6ce <__mdiff+0x2e>
 800b6c0:	4b39      	ldr	r3, [pc, #228]	; (800b7a8 <__mdiff+0x108>)
 800b6c2:	4602      	mov	r2, r0
 800b6c4:	f240 2132 	movw	r1, #562	; 0x232
 800b6c8:	4838      	ldr	r0, [pc, #224]	; (800b7ac <__mdiff+0x10c>)
 800b6ca:	f000 fbe7 	bl	800be9c <__assert_func>
 800b6ce:	2301      	movs	r3, #1
 800b6d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b6d4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6d8:	bfa4      	itt	ge
 800b6da:	463b      	movge	r3, r7
 800b6dc:	4627      	movge	r7, r4
 800b6de:	4630      	mov	r0, r6
 800b6e0:	6879      	ldr	r1, [r7, #4]
 800b6e2:	bfa6      	itte	ge
 800b6e4:	461c      	movge	r4, r3
 800b6e6:	2500      	movge	r5, #0
 800b6e8:	2501      	movlt	r5, #1
 800b6ea:	f7ff fd3f 	bl	800b16c <_Balloc>
 800b6ee:	b920      	cbnz	r0, 800b6fa <__mdiff+0x5a>
 800b6f0:	4b2d      	ldr	r3, [pc, #180]	; (800b7a8 <__mdiff+0x108>)
 800b6f2:	4602      	mov	r2, r0
 800b6f4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b6f8:	e7e6      	b.n	800b6c8 <__mdiff+0x28>
 800b6fa:	693e      	ldr	r6, [r7, #16]
 800b6fc:	60c5      	str	r5, [r0, #12]
 800b6fe:	6925      	ldr	r5, [r4, #16]
 800b700:	f107 0114 	add.w	r1, r7, #20
 800b704:	f104 0914 	add.w	r9, r4, #20
 800b708:	f100 0e14 	add.w	lr, r0, #20
 800b70c:	f107 0210 	add.w	r2, r7, #16
 800b710:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b714:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b718:	46f2      	mov	sl, lr
 800b71a:	2700      	movs	r7, #0
 800b71c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b720:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b724:	fa1f f883 	uxth.w	r8, r3
 800b728:	fa17 f78b 	uxtah	r7, r7, fp
 800b72c:	0c1b      	lsrs	r3, r3, #16
 800b72e:	eba7 0808 	sub.w	r8, r7, r8
 800b732:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b736:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b73a:	fa1f f888 	uxth.w	r8, r8
 800b73e:	141f      	asrs	r7, r3, #16
 800b740:	454d      	cmp	r5, r9
 800b742:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b746:	f84a 3b04 	str.w	r3, [sl], #4
 800b74a:	d8e7      	bhi.n	800b71c <__mdiff+0x7c>
 800b74c:	1b2b      	subs	r3, r5, r4
 800b74e:	3b15      	subs	r3, #21
 800b750:	f023 0303 	bic.w	r3, r3, #3
 800b754:	3304      	adds	r3, #4
 800b756:	3415      	adds	r4, #21
 800b758:	42a5      	cmp	r5, r4
 800b75a:	bf38      	it	cc
 800b75c:	2304      	movcc	r3, #4
 800b75e:	4419      	add	r1, r3
 800b760:	4473      	add	r3, lr
 800b762:	469e      	mov	lr, r3
 800b764:	460d      	mov	r5, r1
 800b766:	4565      	cmp	r5, ip
 800b768:	d30e      	bcc.n	800b788 <__mdiff+0xe8>
 800b76a:	f10c 0203 	add.w	r2, ip, #3
 800b76e:	1a52      	subs	r2, r2, r1
 800b770:	f022 0203 	bic.w	r2, r2, #3
 800b774:	3903      	subs	r1, #3
 800b776:	458c      	cmp	ip, r1
 800b778:	bf38      	it	cc
 800b77a:	2200      	movcc	r2, #0
 800b77c:	441a      	add	r2, r3
 800b77e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b782:	b17b      	cbz	r3, 800b7a4 <__mdiff+0x104>
 800b784:	6106      	str	r6, [r0, #16]
 800b786:	e7a5      	b.n	800b6d4 <__mdiff+0x34>
 800b788:	f855 8b04 	ldr.w	r8, [r5], #4
 800b78c:	fa17 f488 	uxtah	r4, r7, r8
 800b790:	1422      	asrs	r2, r4, #16
 800b792:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b796:	b2a4      	uxth	r4, r4
 800b798:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b79c:	f84e 4b04 	str.w	r4, [lr], #4
 800b7a0:	1417      	asrs	r7, r2, #16
 800b7a2:	e7e0      	b.n	800b766 <__mdiff+0xc6>
 800b7a4:	3e01      	subs	r6, #1
 800b7a6:	e7ea      	b.n	800b77e <__mdiff+0xde>
 800b7a8:	08013ed7 	.word	0x08013ed7
 800b7ac:	08013f48 	.word	0x08013f48

0800b7b0 <__d2b>:
 800b7b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b7b4:	4689      	mov	r9, r1
 800b7b6:	2101      	movs	r1, #1
 800b7b8:	ec57 6b10 	vmov	r6, r7, d0
 800b7bc:	4690      	mov	r8, r2
 800b7be:	f7ff fcd5 	bl	800b16c <_Balloc>
 800b7c2:	4604      	mov	r4, r0
 800b7c4:	b930      	cbnz	r0, 800b7d4 <__d2b+0x24>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	4b25      	ldr	r3, [pc, #148]	; (800b860 <__d2b+0xb0>)
 800b7ca:	4826      	ldr	r0, [pc, #152]	; (800b864 <__d2b+0xb4>)
 800b7cc:	f240 310a 	movw	r1, #778	; 0x30a
 800b7d0:	f000 fb64 	bl	800be9c <__assert_func>
 800b7d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b7d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b7dc:	bb35      	cbnz	r5, 800b82c <__d2b+0x7c>
 800b7de:	2e00      	cmp	r6, #0
 800b7e0:	9301      	str	r3, [sp, #4]
 800b7e2:	d028      	beq.n	800b836 <__d2b+0x86>
 800b7e4:	4668      	mov	r0, sp
 800b7e6:	9600      	str	r6, [sp, #0]
 800b7e8:	f7ff fd8c 	bl	800b304 <__lo0bits>
 800b7ec:	9900      	ldr	r1, [sp, #0]
 800b7ee:	b300      	cbz	r0, 800b832 <__d2b+0x82>
 800b7f0:	9a01      	ldr	r2, [sp, #4]
 800b7f2:	f1c0 0320 	rsb	r3, r0, #32
 800b7f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b7fa:	430b      	orrs	r3, r1
 800b7fc:	40c2      	lsrs	r2, r0
 800b7fe:	6163      	str	r3, [r4, #20]
 800b800:	9201      	str	r2, [sp, #4]
 800b802:	9b01      	ldr	r3, [sp, #4]
 800b804:	61a3      	str	r3, [r4, #24]
 800b806:	2b00      	cmp	r3, #0
 800b808:	bf14      	ite	ne
 800b80a:	2202      	movne	r2, #2
 800b80c:	2201      	moveq	r2, #1
 800b80e:	6122      	str	r2, [r4, #16]
 800b810:	b1d5      	cbz	r5, 800b848 <__d2b+0x98>
 800b812:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b816:	4405      	add	r5, r0
 800b818:	f8c9 5000 	str.w	r5, [r9]
 800b81c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b820:	f8c8 0000 	str.w	r0, [r8]
 800b824:	4620      	mov	r0, r4
 800b826:	b003      	add	sp, #12
 800b828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b82c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b830:	e7d5      	b.n	800b7de <__d2b+0x2e>
 800b832:	6161      	str	r1, [r4, #20]
 800b834:	e7e5      	b.n	800b802 <__d2b+0x52>
 800b836:	a801      	add	r0, sp, #4
 800b838:	f7ff fd64 	bl	800b304 <__lo0bits>
 800b83c:	9b01      	ldr	r3, [sp, #4]
 800b83e:	6163      	str	r3, [r4, #20]
 800b840:	2201      	movs	r2, #1
 800b842:	6122      	str	r2, [r4, #16]
 800b844:	3020      	adds	r0, #32
 800b846:	e7e3      	b.n	800b810 <__d2b+0x60>
 800b848:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b84c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b850:	f8c9 0000 	str.w	r0, [r9]
 800b854:	6918      	ldr	r0, [r3, #16]
 800b856:	f7ff fd35 	bl	800b2c4 <__hi0bits>
 800b85a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b85e:	e7df      	b.n	800b820 <__d2b+0x70>
 800b860:	08013ed7 	.word	0x08013ed7
 800b864:	08013f48 	.word	0x08013f48

0800b868 <_calloc_r>:
 800b868:	b513      	push	{r0, r1, r4, lr}
 800b86a:	434a      	muls	r2, r1
 800b86c:	4611      	mov	r1, r2
 800b86e:	9201      	str	r2, [sp, #4]
 800b870:	f7fd fd48 	bl	8009304 <_malloc_r>
 800b874:	4604      	mov	r4, r0
 800b876:	b118      	cbz	r0, 800b880 <_calloc_r+0x18>
 800b878:	9a01      	ldr	r2, [sp, #4]
 800b87a:	2100      	movs	r1, #0
 800b87c:	f7fd fcea 	bl	8009254 <memset>
 800b880:	4620      	mov	r0, r4
 800b882:	b002      	add	sp, #8
 800b884:	bd10      	pop	{r4, pc}

0800b886 <__ssputs_r>:
 800b886:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b88a:	688e      	ldr	r6, [r1, #8]
 800b88c:	429e      	cmp	r6, r3
 800b88e:	4682      	mov	sl, r0
 800b890:	460c      	mov	r4, r1
 800b892:	4690      	mov	r8, r2
 800b894:	461f      	mov	r7, r3
 800b896:	d838      	bhi.n	800b90a <__ssputs_r+0x84>
 800b898:	898a      	ldrh	r2, [r1, #12]
 800b89a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b89e:	d032      	beq.n	800b906 <__ssputs_r+0x80>
 800b8a0:	6825      	ldr	r5, [r4, #0]
 800b8a2:	6909      	ldr	r1, [r1, #16]
 800b8a4:	eba5 0901 	sub.w	r9, r5, r1
 800b8a8:	6965      	ldr	r5, [r4, #20]
 800b8aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b8ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b8b2:	3301      	adds	r3, #1
 800b8b4:	444b      	add	r3, r9
 800b8b6:	106d      	asrs	r5, r5, #1
 800b8b8:	429d      	cmp	r5, r3
 800b8ba:	bf38      	it	cc
 800b8bc:	461d      	movcc	r5, r3
 800b8be:	0553      	lsls	r3, r2, #21
 800b8c0:	d531      	bpl.n	800b926 <__ssputs_r+0xa0>
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	f7fd fd1e 	bl	8009304 <_malloc_r>
 800b8c8:	4606      	mov	r6, r0
 800b8ca:	b950      	cbnz	r0, 800b8e2 <__ssputs_r+0x5c>
 800b8cc:	230c      	movs	r3, #12
 800b8ce:	f8ca 3000 	str.w	r3, [sl]
 800b8d2:	89a3      	ldrh	r3, [r4, #12]
 800b8d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8d8:	81a3      	strh	r3, [r4, #12]
 800b8da:	f04f 30ff 	mov.w	r0, #4294967295
 800b8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8e2:	6921      	ldr	r1, [r4, #16]
 800b8e4:	464a      	mov	r2, r9
 800b8e6:	f7ff fc27 	bl	800b138 <memcpy>
 800b8ea:	89a3      	ldrh	r3, [r4, #12]
 800b8ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f4:	81a3      	strh	r3, [r4, #12]
 800b8f6:	6126      	str	r6, [r4, #16]
 800b8f8:	6165      	str	r5, [r4, #20]
 800b8fa:	444e      	add	r6, r9
 800b8fc:	eba5 0509 	sub.w	r5, r5, r9
 800b900:	6026      	str	r6, [r4, #0]
 800b902:	60a5      	str	r5, [r4, #8]
 800b904:	463e      	mov	r6, r7
 800b906:	42be      	cmp	r6, r7
 800b908:	d900      	bls.n	800b90c <__ssputs_r+0x86>
 800b90a:	463e      	mov	r6, r7
 800b90c:	4632      	mov	r2, r6
 800b90e:	6820      	ldr	r0, [r4, #0]
 800b910:	4641      	mov	r1, r8
 800b912:	f000 fb49 	bl	800bfa8 <memmove>
 800b916:	68a3      	ldr	r3, [r4, #8]
 800b918:	6822      	ldr	r2, [r4, #0]
 800b91a:	1b9b      	subs	r3, r3, r6
 800b91c:	4432      	add	r2, r6
 800b91e:	60a3      	str	r3, [r4, #8]
 800b920:	6022      	str	r2, [r4, #0]
 800b922:	2000      	movs	r0, #0
 800b924:	e7db      	b.n	800b8de <__ssputs_r+0x58>
 800b926:	462a      	mov	r2, r5
 800b928:	f000 fb58 	bl	800bfdc <_realloc_r>
 800b92c:	4606      	mov	r6, r0
 800b92e:	2800      	cmp	r0, #0
 800b930:	d1e1      	bne.n	800b8f6 <__ssputs_r+0x70>
 800b932:	6921      	ldr	r1, [r4, #16]
 800b934:	4650      	mov	r0, sl
 800b936:	f7fd fc95 	bl	8009264 <_free_r>
 800b93a:	e7c7      	b.n	800b8cc <__ssputs_r+0x46>

0800b93c <_svfiprintf_r>:
 800b93c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b940:	4698      	mov	r8, r3
 800b942:	898b      	ldrh	r3, [r1, #12]
 800b944:	061b      	lsls	r3, r3, #24
 800b946:	b09d      	sub	sp, #116	; 0x74
 800b948:	4607      	mov	r7, r0
 800b94a:	460d      	mov	r5, r1
 800b94c:	4614      	mov	r4, r2
 800b94e:	d50e      	bpl.n	800b96e <_svfiprintf_r+0x32>
 800b950:	690b      	ldr	r3, [r1, #16]
 800b952:	b963      	cbnz	r3, 800b96e <_svfiprintf_r+0x32>
 800b954:	2140      	movs	r1, #64	; 0x40
 800b956:	f7fd fcd5 	bl	8009304 <_malloc_r>
 800b95a:	6028      	str	r0, [r5, #0]
 800b95c:	6128      	str	r0, [r5, #16]
 800b95e:	b920      	cbnz	r0, 800b96a <_svfiprintf_r+0x2e>
 800b960:	230c      	movs	r3, #12
 800b962:	603b      	str	r3, [r7, #0]
 800b964:	f04f 30ff 	mov.w	r0, #4294967295
 800b968:	e0d1      	b.n	800bb0e <_svfiprintf_r+0x1d2>
 800b96a:	2340      	movs	r3, #64	; 0x40
 800b96c:	616b      	str	r3, [r5, #20]
 800b96e:	2300      	movs	r3, #0
 800b970:	9309      	str	r3, [sp, #36]	; 0x24
 800b972:	2320      	movs	r3, #32
 800b974:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b978:	f8cd 800c 	str.w	r8, [sp, #12]
 800b97c:	2330      	movs	r3, #48	; 0x30
 800b97e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bb28 <_svfiprintf_r+0x1ec>
 800b982:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b986:	f04f 0901 	mov.w	r9, #1
 800b98a:	4623      	mov	r3, r4
 800b98c:	469a      	mov	sl, r3
 800b98e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b992:	b10a      	cbz	r2, 800b998 <_svfiprintf_r+0x5c>
 800b994:	2a25      	cmp	r2, #37	; 0x25
 800b996:	d1f9      	bne.n	800b98c <_svfiprintf_r+0x50>
 800b998:	ebba 0b04 	subs.w	fp, sl, r4
 800b99c:	d00b      	beq.n	800b9b6 <_svfiprintf_r+0x7a>
 800b99e:	465b      	mov	r3, fp
 800b9a0:	4622      	mov	r2, r4
 800b9a2:	4629      	mov	r1, r5
 800b9a4:	4638      	mov	r0, r7
 800b9a6:	f7ff ff6e 	bl	800b886 <__ssputs_r>
 800b9aa:	3001      	adds	r0, #1
 800b9ac:	f000 80aa 	beq.w	800bb04 <_svfiprintf_r+0x1c8>
 800b9b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b9b2:	445a      	add	r2, fp
 800b9b4:	9209      	str	r2, [sp, #36]	; 0x24
 800b9b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	f000 80a2 	beq.w	800bb04 <_svfiprintf_r+0x1c8>
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9ca:	f10a 0a01 	add.w	sl, sl, #1
 800b9ce:	9304      	str	r3, [sp, #16]
 800b9d0:	9307      	str	r3, [sp, #28]
 800b9d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9d6:	931a      	str	r3, [sp, #104]	; 0x68
 800b9d8:	4654      	mov	r4, sl
 800b9da:	2205      	movs	r2, #5
 800b9dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9e0:	4851      	ldr	r0, [pc, #324]	; (800bb28 <_svfiprintf_r+0x1ec>)
 800b9e2:	f7f4 fc2d 	bl	8000240 <memchr>
 800b9e6:	9a04      	ldr	r2, [sp, #16]
 800b9e8:	b9d8      	cbnz	r0, 800ba22 <_svfiprintf_r+0xe6>
 800b9ea:	06d0      	lsls	r0, r2, #27
 800b9ec:	bf44      	itt	mi
 800b9ee:	2320      	movmi	r3, #32
 800b9f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9f4:	0711      	lsls	r1, r2, #28
 800b9f6:	bf44      	itt	mi
 800b9f8:	232b      	movmi	r3, #43	; 0x2b
 800b9fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9fe:	f89a 3000 	ldrb.w	r3, [sl]
 800ba02:	2b2a      	cmp	r3, #42	; 0x2a
 800ba04:	d015      	beq.n	800ba32 <_svfiprintf_r+0xf6>
 800ba06:	9a07      	ldr	r2, [sp, #28]
 800ba08:	4654      	mov	r4, sl
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	f04f 0c0a 	mov.w	ip, #10
 800ba10:	4621      	mov	r1, r4
 800ba12:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba16:	3b30      	subs	r3, #48	; 0x30
 800ba18:	2b09      	cmp	r3, #9
 800ba1a:	d94e      	bls.n	800baba <_svfiprintf_r+0x17e>
 800ba1c:	b1b0      	cbz	r0, 800ba4c <_svfiprintf_r+0x110>
 800ba1e:	9207      	str	r2, [sp, #28]
 800ba20:	e014      	b.n	800ba4c <_svfiprintf_r+0x110>
 800ba22:	eba0 0308 	sub.w	r3, r0, r8
 800ba26:	fa09 f303 	lsl.w	r3, r9, r3
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	9304      	str	r3, [sp, #16]
 800ba2e:	46a2      	mov	sl, r4
 800ba30:	e7d2      	b.n	800b9d8 <_svfiprintf_r+0x9c>
 800ba32:	9b03      	ldr	r3, [sp, #12]
 800ba34:	1d19      	adds	r1, r3, #4
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	9103      	str	r1, [sp, #12]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	bfbb      	ittet	lt
 800ba3e:	425b      	neglt	r3, r3
 800ba40:	f042 0202 	orrlt.w	r2, r2, #2
 800ba44:	9307      	strge	r3, [sp, #28]
 800ba46:	9307      	strlt	r3, [sp, #28]
 800ba48:	bfb8      	it	lt
 800ba4a:	9204      	strlt	r2, [sp, #16]
 800ba4c:	7823      	ldrb	r3, [r4, #0]
 800ba4e:	2b2e      	cmp	r3, #46	; 0x2e
 800ba50:	d10c      	bne.n	800ba6c <_svfiprintf_r+0x130>
 800ba52:	7863      	ldrb	r3, [r4, #1]
 800ba54:	2b2a      	cmp	r3, #42	; 0x2a
 800ba56:	d135      	bne.n	800bac4 <_svfiprintf_r+0x188>
 800ba58:	9b03      	ldr	r3, [sp, #12]
 800ba5a:	1d1a      	adds	r2, r3, #4
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	9203      	str	r2, [sp, #12]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	bfb8      	it	lt
 800ba64:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba68:	3402      	adds	r4, #2
 800ba6a:	9305      	str	r3, [sp, #20]
 800ba6c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb38 <_svfiprintf_r+0x1fc>
 800ba70:	7821      	ldrb	r1, [r4, #0]
 800ba72:	2203      	movs	r2, #3
 800ba74:	4650      	mov	r0, sl
 800ba76:	f7f4 fbe3 	bl	8000240 <memchr>
 800ba7a:	b140      	cbz	r0, 800ba8e <_svfiprintf_r+0x152>
 800ba7c:	2340      	movs	r3, #64	; 0x40
 800ba7e:	eba0 000a 	sub.w	r0, r0, sl
 800ba82:	fa03 f000 	lsl.w	r0, r3, r0
 800ba86:	9b04      	ldr	r3, [sp, #16]
 800ba88:	4303      	orrs	r3, r0
 800ba8a:	3401      	adds	r4, #1
 800ba8c:	9304      	str	r3, [sp, #16]
 800ba8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba92:	4826      	ldr	r0, [pc, #152]	; (800bb2c <_svfiprintf_r+0x1f0>)
 800ba94:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba98:	2206      	movs	r2, #6
 800ba9a:	f7f4 fbd1 	bl	8000240 <memchr>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d038      	beq.n	800bb14 <_svfiprintf_r+0x1d8>
 800baa2:	4b23      	ldr	r3, [pc, #140]	; (800bb30 <_svfiprintf_r+0x1f4>)
 800baa4:	bb1b      	cbnz	r3, 800baee <_svfiprintf_r+0x1b2>
 800baa6:	9b03      	ldr	r3, [sp, #12]
 800baa8:	3307      	adds	r3, #7
 800baaa:	f023 0307 	bic.w	r3, r3, #7
 800baae:	3308      	adds	r3, #8
 800bab0:	9303      	str	r3, [sp, #12]
 800bab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bab4:	4433      	add	r3, r6
 800bab6:	9309      	str	r3, [sp, #36]	; 0x24
 800bab8:	e767      	b.n	800b98a <_svfiprintf_r+0x4e>
 800baba:	fb0c 3202 	mla	r2, ip, r2, r3
 800babe:	460c      	mov	r4, r1
 800bac0:	2001      	movs	r0, #1
 800bac2:	e7a5      	b.n	800ba10 <_svfiprintf_r+0xd4>
 800bac4:	2300      	movs	r3, #0
 800bac6:	3401      	adds	r4, #1
 800bac8:	9305      	str	r3, [sp, #20]
 800baca:	4619      	mov	r1, r3
 800bacc:	f04f 0c0a 	mov.w	ip, #10
 800bad0:	4620      	mov	r0, r4
 800bad2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bad6:	3a30      	subs	r2, #48	; 0x30
 800bad8:	2a09      	cmp	r2, #9
 800bada:	d903      	bls.n	800bae4 <_svfiprintf_r+0x1a8>
 800badc:	2b00      	cmp	r3, #0
 800bade:	d0c5      	beq.n	800ba6c <_svfiprintf_r+0x130>
 800bae0:	9105      	str	r1, [sp, #20]
 800bae2:	e7c3      	b.n	800ba6c <_svfiprintf_r+0x130>
 800bae4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bae8:	4604      	mov	r4, r0
 800baea:	2301      	movs	r3, #1
 800baec:	e7f0      	b.n	800bad0 <_svfiprintf_r+0x194>
 800baee:	ab03      	add	r3, sp, #12
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	462a      	mov	r2, r5
 800baf4:	4b0f      	ldr	r3, [pc, #60]	; (800bb34 <_svfiprintf_r+0x1f8>)
 800baf6:	a904      	add	r1, sp, #16
 800baf8:	4638      	mov	r0, r7
 800bafa:	f7fd fcfd 	bl	80094f8 <_printf_float>
 800bafe:	1c42      	adds	r2, r0, #1
 800bb00:	4606      	mov	r6, r0
 800bb02:	d1d6      	bne.n	800bab2 <_svfiprintf_r+0x176>
 800bb04:	89ab      	ldrh	r3, [r5, #12]
 800bb06:	065b      	lsls	r3, r3, #25
 800bb08:	f53f af2c 	bmi.w	800b964 <_svfiprintf_r+0x28>
 800bb0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb0e:	b01d      	add	sp, #116	; 0x74
 800bb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb14:	ab03      	add	r3, sp, #12
 800bb16:	9300      	str	r3, [sp, #0]
 800bb18:	462a      	mov	r2, r5
 800bb1a:	4b06      	ldr	r3, [pc, #24]	; (800bb34 <_svfiprintf_r+0x1f8>)
 800bb1c:	a904      	add	r1, sp, #16
 800bb1e:	4638      	mov	r0, r7
 800bb20:	f7fd ff8e 	bl	8009a40 <_printf_i>
 800bb24:	e7eb      	b.n	800bafe <_svfiprintf_r+0x1c2>
 800bb26:	bf00      	nop
 800bb28:	080140a4 	.word	0x080140a4
 800bb2c:	080140ae 	.word	0x080140ae
 800bb30:	080094f9 	.word	0x080094f9
 800bb34:	0800b887 	.word	0x0800b887
 800bb38:	080140aa 	.word	0x080140aa

0800bb3c <__sfputc_r>:
 800bb3c:	6893      	ldr	r3, [r2, #8]
 800bb3e:	3b01      	subs	r3, #1
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	b410      	push	{r4}
 800bb44:	6093      	str	r3, [r2, #8]
 800bb46:	da08      	bge.n	800bb5a <__sfputc_r+0x1e>
 800bb48:	6994      	ldr	r4, [r2, #24]
 800bb4a:	42a3      	cmp	r3, r4
 800bb4c:	db01      	blt.n	800bb52 <__sfputc_r+0x16>
 800bb4e:	290a      	cmp	r1, #10
 800bb50:	d103      	bne.n	800bb5a <__sfputc_r+0x1e>
 800bb52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb56:	f7fe b993 	b.w	8009e80 <__swbuf_r>
 800bb5a:	6813      	ldr	r3, [r2, #0]
 800bb5c:	1c58      	adds	r0, r3, #1
 800bb5e:	6010      	str	r0, [r2, #0]
 800bb60:	7019      	strb	r1, [r3, #0]
 800bb62:	4608      	mov	r0, r1
 800bb64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb68:	4770      	bx	lr

0800bb6a <__sfputs_r>:
 800bb6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6c:	4606      	mov	r6, r0
 800bb6e:	460f      	mov	r7, r1
 800bb70:	4614      	mov	r4, r2
 800bb72:	18d5      	adds	r5, r2, r3
 800bb74:	42ac      	cmp	r4, r5
 800bb76:	d101      	bne.n	800bb7c <__sfputs_r+0x12>
 800bb78:	2000      	movs	r0, #0
 800bb7a:	e007      	b.n	800bb8c <__sfputs_r+0x22>
 800bb7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb80:	463a      	mov	r2, r7
 800bb82:	4630      	mov	r0, r6
 800bb84:	f7ff ffda 	bl	800bb3c <__sfputc_r>
 800bb88:	1c43      	adds	r3, r0, #1
 800bb8a:	d1f3      	bne.n	800bb74 <__sfputs_r+0xa>
 800bb8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb90 <_vfiprintf_r>:
 800bb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb94:	460d      	mov	r5, r1
 800bb96:	b09d      	sub	sp, #116	; 0x74
 800bb98:	4614      	mov	r4, r2
 800bb9a:	4698      	mov	r8, r3
 800bb9c:	4606      	mov	r6, r0
 800bb9e:	b118      	cbz	r0, 800bba8 <_vfiprintf_r+0x18>
 800bba0:	6983      	ldr	r3, [r0, #24]
 800bba2:	b90b      	cbnz	r3, 800bba8 <_vfiprintf_r+0x18>
 800bba4:	f7ff f9be 	bl	800af24 <__sinit>
 800bba8:	4b89      	ldr	r3, [pc, #548]	; (800bdd0 <_vfiprintf_r+0x240>)
 800bbaa:	429d      	cmp	r5, r3
 800bbac:	d11b      	bne.n	800bbe6 <_vfiprintf_r+0x56>
 800bbae:	6875      	ldr	r5, [r6, #4]
 800bbb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbb2:	07d9      	lsls	r1, r3, #31
 800bbb4:	d405      	bmi.n	800bbc2 <_vfiprintf_r+0x32>
 800bbb6:	89ab      	ldrh	r3, [r5, #12]
 800bbb8:	059a      	lsls	r2, r3, #22
 800bbba:	d402      	bmi.n	800bbc2 <_vfiprintf_r+0x32>
 800bbbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbbe:	f7ff fa54 	bl	800b06a <__retarget_lock_acquire_recursive>
 800bbc2:	89ab      	ldrh	r3, [r5, #12]
 800bbc4:	071b      	lsls	r3, r3, #28
 800bbc6:	d501      	bpl.n	800bbcc <_vfiprintf_r+0x3c>
 800bbc8:	692b      	ldr	r3, [r5, #16]
 800bbca:	b9eb      	cbnz	r3, 800bc08 <_vfiprintf_r+0x78>
 800bbcc:	4629      	mov	r1, r5
 800bbce:	4630      	mov	r0, r6
 800bbd0:	f7fe f9a8 	bl	8009f24 <__swsetup_r>
 800bbd4:	b1c0      	cbz	r0, 800bc08 <_vfiprintf_r+0x78>
 800bbd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bbd8:	07dc      	lsls	r4, r3, #31
 800bbda:	d50e      	bpl.n	800bbfa <_vfiprintf_r+0x6a>
 800bbdc:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe0:	b01d      	add	sp, #116	; 0x74
 800bbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbe6:	4b7b      	ldr	r3, [pc, #492]	; (800bdd4 <_vfiprintf_r+0x244>)
 800bbe8:	429d      	cmp	r5, r3
 800bbea:	d101      	bne.n	800bbf0 <_vfiprintf_r+0x60>
 800bbec:	68b5      	ldr	r5, [r6, #8]
 800bbee:	e7df      	b.n	800bbb0 <_vfiprintf_r+0x20>
 800bbf0:	4b79      	ldr	r3, [pc, #484]	; (800bdd8 <_vfiprintf_r+0x248>)
 800bbf2:	429d      	cmp	r5, r3
 800bbf4:	bf08      	it	eq
 800bbf6:	68f5      	ldreq	r5, [r6, #12]
 800bbf8:	e7da      	b.n	800bbb0 <_vfiprintf_r+0x20>
 800bbfa:	89ab      	ldrh	r3, [r5, #12]
 800bbfc:	0598      	lsls	r0, r3, #22
 800bbfe:	d4ed      	bmi.n	800bbdc <_vfiprintf_r+0x4c>
 800bc00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc02:	f7ff fa33 	bl	800b06c <__retarget_lock_release_recursive>
 800bc06:	e7e9      	b.n	800bbdc <_vfiprintf_r+0x4c>
 800bc08:	2300      	movs	r3, #0
 800bc0a:	9309      	str	r3, [sp, #36]	; 0x24
 800bc0c:	2320      	movs	r3, #32
 800bc0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bc12:	f8cd 800c 	str.w	r8, [sp, #12]
 800bc16:	2330      	movs	r3, #48	; 0x30
 800bc18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bddc <_vfiprintf_r+0x24c>
 800bc1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bc20:	f04f 0901 	mov.w	r9, #1
 800bc24:	4623      	mov	r3, r4
 800bc26:	469a      	mov	sl, r3
 800bc28:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bc2c:	b10a      	cbz	r2, 800bc32 <_vfiprintf_r+0xa2>
 800bc2e:	2a25      	cmp	r2, #37	; 0x25
 800bc30:	d1f9      	bne.n	800bc26 <_vfiprintf_r+0x96>
 800bc32:	ebba 0b04 	subs.w	fp, sl, r4
 800bc36:	d00b      	beq.n	800bc50 <_vfiprintf_r+0xc0>
 800bc38:	465b      	mov	r3, fp
 800bc3a:	4622      	mov	r2, r4
 800bc3c:	4629      	mov	r1, r5
 800bc3e:	4630      	mov	r0, r6
 800bc40:	f7ff ff93 	bl	800bb6a <__sfputs_r>
 800bc44:	3001      	adds	r0, #1
 800bc46:	f000 80aa 	beq.w	800bd9e <_vfiprintf_r+0x20e>
 800bc4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc4c:	445a      	add	r2, fp
 800bc4e:	9209      	str	r2, [sp, #36]	; 0x24
 800bc50:	f89a 3000 	ldrb.w	r3, [sl]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	f000 80a2 	beq.w	800bd9e <_vfiprintf_r+0x20e>
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc64:	f10a 0a01 	add.w	sl, sl, #1
 800bc68:	9304      	str	r3, [sp, #16]
 800bc6a:	9307      	str	r3, [sp, #28]
 800bc6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc70:	931a      	str	r3, [sp, #104]	; 0x68
 800bc72:	4654      	mov	r4, sl
 800bc74:	2205      	movs	r2, #5
 800bc76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc7a:	4858      	ldr	r0, [pc, #352]	; (800bddc <_vfiprintf_r+0x24c>)
 800bc7c:	f7f4 fae0 	bl	8000240 <memchr>
 800bc80:	9a04      	ldr	r2, [sp, #16]
 800bc82:	b9d8      	cbnz	r0, 800bcbc <_vfiprintf_r+0x12c>
 800bc84:	06d1      	lsls	r1, r2, #27
 800bc86:	bf44      	itt	mi
 800bc88:	2320      	movmi	r3, #32
 800bc8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc8e:	0713      	lsls	r3, r2, #28
 800bc90:	bf44      	itt	mi
 800bc92:	232b      	movmi	r3, #43	; 0x2b
 800bc94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc98:	f89a 3000 	ldrb.w	r3, [sl]
 800bc9c:	2b2a      	cmp	r3, #42	; 0x2a
 800bc9e:	d015      	beq.n	800bccc <_vfiprintf_r+0x13c>
 800bca0:	9a07      	ldr	r2, [sp, #28]
 800bca2:	4654      	mov	r4, sl
 800bca4:	2000      	movs	r0, #0
 800bca6:	f04f 0c0a 	mov.w	ip, #10
 800bcaa:	4621      	mov	r1, r4
 800bcac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bcb0:	3b30      	subs	r3, #48	; 0x30
 800bcb2:	2b09      	cmp	r3, #9
 800bcb4:	d94e      	bls.n	800bd54 <_vfiprintf_r+0x1c4>
 800bcb6:	b1b0      	cbz	r0, 800bce6 <_vfiprintf_r+0x156>
 800bcb8:	9207      	str	r2, [sp, #28]
 800bcba:	e014      	b.n	800bce6 <_vfiprintf_r+0x156>
 800bcbc:	eba0 0308 	sub.w	r3, r0, r8
 800bcc0:	fa09 f303 	lsl.w	r3, r9, r3
 800bcc4:	4313      	orrs	r3, r2
 800bcc6:	9304      	str	r3, [sp, #16]
 800bcc8:	46a2      	mov	sl, r4
 800bcca:	e7d2      	b.n	800bc72 <_vfiprintf_r+0xe2>
 800bccc:	9b03      	ldr	r3, [sp, #12]
 800bcce:	1d19      	adds	r1, r3, #4
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	9103      	str	r1, [sp, #12]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	bfbb      	ittet	lt
 800bcd8:	425b      	neglt	r3, r3
 800bcda:	f042 0202 	orrlt.w	r2, r2, #2
 800bcde:	9307      	strge	r3, [sp, #28]
 800bce0:	9307      	strlt	r3, [sp, #28]
 800bce2:	bfb8      	it	lt
 800bce4:	9204      	strlt	r2, [sp, #16]
 800bce6:	7823      	ldrb	r3, [r4, #0]
 800bce8:	2b2e      	cmp	r3, #46	; 0x2e
 800bcea:	d10c      	bne.n	800bd06 <_vfiprintf_r+0x176>
 800bcec:	7863      	ldrb	r3, [r4, #1]
 800bcee:	2b2a      	cmp	r3, #42	; 0x2a
 800bcf0:	d135      	bne.n	800bd5e <_vfiprintf_r+0x1ce>
 800bcf2:	9b03      	ldr	r3, [sp, #12]
 800bcf4:	1d1a      	adds	r2, r3, #4
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	9203      	str	r2, [sp, #12]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	bfb8      	it	lt
 800bcfe:	f04f 33ff 	movlt.w	r3, #4294967295
 800bd02:	3402      	adds	r4, #2
 800bd04:	9305      	str	r3, [sp, #20]
 800bd06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bdec <_vfiprintf_r+0x25c>
 800bd0a:	7821      	ldrb	r1, [r4, #0]
 800bd0c:	2203      	movs	r2, #3
 800bd0e:	4650      	mov	r0, sl
 800bd10:	f7f4 fa96 	bl	8000240 <memchr>
 800bd14:	b140      	cbz	r0, 800bd28 <_vfiprintf_r+0x198>
 800bd16:	2340      	movs	r3, #64	; 0x40
 800bd18:	eba0 000a 	sub.w	r0, r0, sl
 800bd1c:	fa03 f000 	lsl.w	r0, r3, r0
 800bd20:	9b04      	ldr	r3, [sp, #16]
 800bd22:	4303      	orrs	r3, r0
 800bd24:	3401      	adds	r4, #1
 800bd26:	9304      	str	r3, [sp, #16]
 800bd28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd2c:	482c      	ldr	r0, [pc, #176]	; (800bde0 <_vfiprintf_r+0x250>)
 800bd2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bd32:	2206      	movs	r2, #6
 800bd34:	f7f4 fa84 	bl	8000240 <memchr>
 800bd38:	2800      	cmp	r0, #0
 800bd3a:	d03f      	beq.n	800bdbc <_vfiprintf_r+0x22c>
 800bd3c:	4b29      	ldr	r3, [pc, #164]	; (800bde4 <_vfiprintf_r+0x254>)
 800bd3e:	bb1b      	cbnz	r3, 800bd88 <_vfiprintf_r+0x1f8>
 800bd40:	9b03      	ldr	r3, [sp, #12]
 800bd42:	3307      	adds	r3, #7
 800bd44:	f023 0307 	bic.w	r3, r3, #7
 800bd48:	3308      	adds	r3, #8
 800bd4a:	9303      	str	r3, [sp, #12]
 800bd4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd4e:	443b      	add	r3, r7
 800bd50:	9309      	str	r3, [sp, #36]	; 0x24
 800bd52:	e767      	b.n	800bc24 <_vfiprintf_r+0x94>
 800bd54:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd58:	460c      	mov	r4, r1
 800bd5a:	2001      	movs	r0, #1
 800bd5c:	e7a5      	b.n	800bcaa <_vfiprintf_r+0x11a>
 800bd5e:	2300      	movs	r3, #0
 800bd60:	3401      	adds	r4, #1
 800bd62:	9305      	str	r3, [sp, #20]
 800bd64:	4619      	mov	r1, r3
 800bd66:	f04f 0c0a 	mov.w	ip, #10
 800bd6a:	4620      	mov	r0, r4
 800bd6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd70:	3a30      	subs	r2, #48	; 0x30
 800bd72:	2a09      	cmp	r2, #9
 800bd74:	d903      	bls.n	800bd7e <_vfiprintf_r+0x1ee>
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d0c5      	beq.n	800bd06 <_vfiprintf_r+0x176>
 800bd7a:	9105      	str	r1, [sp, #20]
 800bd7c:	e7c3      	b.n	800bd06 <_vfiprintf_r+0x176>
 800bd7e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd82:	4604      	mov	r4, r0
 800bd84:	2301      	movs	r3, #1
 800bd86:	e7f0      	b.n	800bd6a <_vfiprintf_r+0x1da>
 800bd88:	ab03      	add	r3, sp, #12
 800bd8a:	9300      	str	r3, [sp, #0]
 800bd8c:	462a      	mov	r2, r5
 800bd8e:	4b16      	ldr	r3, [pc, #88]	; (800bde8 <_vfiprintf_r+0x258>)
 800bd90:	a904      	add	r1, sp, #16
 800bd92:	4630      	mov	r0, r6
 800bd94:	f7fd fbb0 	bl	80094f8 <_printf_float>
 800bd98:	4607      	mov	r7, r0
 800bd9a:	1c78      	adds	r0, r7, #1
 800bd9c:	d1d6      	bne.n	800bd4c <_vfiprintf_r+0x1bc>
 800bd9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bda0:	07d9      	lsls	r1, r3, #31
 800bda2:	d405      	bmi.n	800bdb0 <_vfiprintf_r+0x220>
 800bda4:	89ab      	ldrh	r3, [r5, #12]
 800bda6:	059a      	lsls	r2, r3, #22
 800bda8:	d402      	bmi.n	800bdb0 <_vfiprintf_r+0x220>
 800bdaa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdac:	f7ff f95e 	bl	800b06c <__retarget_lock_release_recursive>
 800bdb0:	89ab      	ldrh	r3, [r5, #12]
 800bdb2:	065b      	lsls	r3, r3, #25
 800bdb4:	f53f af12 	bmi.w	800bbdc <_vfiprintf_r+0x4c>
 800bdb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bdba:	e711      	b.n	800bbe0 <_vfiprintf_r+0x50>
 800bdbc:	ab03      	add	r3, sp, #12
 800bdbe:	9300      	str	r3, [sp, #0]
 800bdc0:	462a      	mov	r2, r5
 800bdc2:	4b09      	ldr	r3, [pc, #36]	; (800bde8 <_vfiprintf_r+0x258>)
 800bdc4:	a904      	add	r1, sp, #16
 800bdc6:	4630      	mov	r0, r6
 800bdc8:	f7fd fe3a 	bl	8009a40 <_printf_i>
 800bdcc:	e7e4      	b.n	800bd98 <_vfiprintf_r+0x208>
 800bdce:	bf00      	nop
 800bdd0:	08013f08 	.word	0x08013f08
 800bdd4:	08013f28 	.word	0x08013f28
 800bdd8:	08013ee8 	.word	0x08013ee8
 800bddc:	080140a4 	.word	0x080140a4
 800bde0:	080140ae 	.word	0x080140ae
 800bde4:	080094f9 	.word	0x080094f9
 800bde8:	0800bb6b 	.word	0x0800bb6b
 800bdec:	080140aa 	.word	0x080140aa

0800bdf0 <__sread>:
 800bdf0:	b510      	push	{r4, lr}
 800bdf2:	460c      	mov	r4, r1
 800bdf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdf8:	f000 f916 	bl	800c028 <_read_r>
 800bdfc:	2800      	cmp	r0, #0
 800bdfe:	bfab      	itete	ge
 800be00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800be02:	89a3      	ldrhlt	r3, [r4, #12]
 800be04:	181b      	addge	r3, r3, r0
 800be06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800be0a:	bfac      	ite	ge
 800be0c:	6563      	strge	r3, [r4, #84]	; 0x54
 800be0e:	81a3      	strhlt	r3, [r4, #12]
 800be10:	bd10      	pop	{r4, pc}

0800be12 <__swrite>:
 800be12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be16:	461f      	mov	r7, r3
 800be18:	898b      	ldrh	r3, [r1, #12]
 800be1a:	05db      	lsls	r3, r3, #23
 800be1c:	4605      	mov	r5, r0
 800be1e:	460c      	mov	r4, r1
 800be20:	4616      	mov	r6, r2
 800be22:	d505      	bpl.n	800be30 <__swrite+0x1e>
 800be24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be28:	2302      	movs	r3, #2
 800be2a:	2200      	movs	r2, #0
 800be2c:	f000 f898 	bl	800bf60 <_lseek_r>
 800be30:	89a3      	ldrh	r3, [r4, #12]
 800be32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800be3a:	81a3      	strh	r3, [r4, #12]
 800be3c:	4632      	mov	r2, r6
 800be3e:	463b      	mov	r3, r7
 800be40:	4628      	mov	r0, r5
 800be42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800be46:	f000 b817 	b.w	800be78 <_write_r>

0800be4a <__sseek>:
 800be4a:	b510      	push	{r4, lr}
 800be4c:	460c      	mov	r4, r1
 800be4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be52:	f000 f885 	bl	800bf60 <_lseek_r>
 800be56:	1c43      	adds	r3, r0, #1
 800be58:	89a3      	ldrh	r3, [r4, #12]
 800be5a:	bf15      	itete	ne
 800be5c:	6560      	strne	r0, [r4, #84]	; 0x54
 800be5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be66:	81a3      	strheq	r3, [r4, #12]
 800be68:	bf18      	it	ne
 800be6a:	81a3      	strhne	r3, [r4, #12]
 800be6c:	bd10      	pop	{r4, pc}

0800be6e <__sclose>:
 800be6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be72:	f000 b831 	b.w	800bed8 <_close_r>
	...

0800be78 <_write_r>:
 800be78:	b538      	push	{r3, r4, r5, lr}
 800be7a:	4d07      	ldr	r5, [pc, #28]	; (800be98 <_write_r+0x20>)
 800be7c:	4604      	mov	r4, r0
 800be7e:	4608      	mov	r0, r1
 800be80:	4611      	mov	r1, r2
 800be82:	2200      	movs	r2, #0
 800be84:	602a      	str	r2, [r5, #0]
 800be86:	461a      	mov	r2, r3
 800be88:	f7f5 fb1f 	bl	80014ca <_write>
 800be8c:	1c43      	adds	r3, r0, #1
 800be8e:	d102      	bne.n	800be96 <_write_r+0x1e>
 800be90:	682b      	ldr	r3, [r5, #0]
 800be92:	b103      	cbz	r3, 800be96 <_write_r+0x1e>
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	bd38      	pop	{r3, r4, r5, pc}
 800be98:	20000ee4 	.word	0x20000ee4

0800be9c <__assert_func>:
 800be9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be9e:	4614      	mov	r4, r2
 800bea0:	461a      	mov	r2, r3
 800bea2:	4b09      	ldr	r3, [pc, #36]	; (800bec8 <__assert_func+0x2c>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	4605      	mov	r5, r0
 800bea8:	68d8      	ldr	r0, [r3, #12]
 800beaa:	b14c      	cbz	r4, 800bec0 <__assert_func+0x24>
 800beac:	4b07      	ldr	r3, [pc, #28]	; (800becc <__assert_func+0x30>)
 800beae:	9100      	str	r1, [sp, #0]
 800beb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800beb4:	4906      	ldr	r1, [pc, #24]	; (800bed0 <__assert_func+0x34>)
 800beb6:	462b      	mov	r3, r5
 800beb8:	f000 f81e 	bl	800bef8 <fiprintf>
 800bebc:	f000 f8d3 	bl	800c066 <abort>
 800bec0:	4b04      	ldr	r3, [pc, #16]	; (800bed4 <__assert_func+0x38>)
 800bec2:	461c      	mov	r4, r3
 800bec4:	e7f3      	b.n	800beae <__assert_func+0x12>
 800bec6:	bf00      	nop
 800bec8:	20000010 	.word	0x20000010
 800becc:	080140b5 	.word	0x080140b5
 800bed0:	080140c2 	.word	0x080140c2
 800bed4:	080140f0 	.word	0x080140f0

0800bed8 <_close_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4d06      	ldr	r5, [pc, #24]	; (800bef4 <_close_r+0x1c>)
 800bedc:	2300      	movs	r3, #0
 800bede:	4604      	mov	r4, r0
 800bee0:	4608      	mov	r0, r1
 800bee2:	602b      	str	r3, [r5, #0]
 800bee4:	f7f6 fa2d 	bl	8002342 <_close>
 800bee8:	1c43      	adds	r3, r0, #1
 800beea:	d102      	bne.n	800bef2 <_close_r+0x1a>
 800beec:	682b      	ldr	r3, [r5, #0]
 800beee:	b103      	cbz	r3, 800bef2 <_close_r+0x1a>
 800bef0:	6023      	str	r3, [r4, #0]
 800bef2:	bd38      	pop	{r3, r4, r5, pc}
 800bef4:	20000ee4 	.word	0x20000ee4

0800bef8 <fiprintf>:
 800bef8:	b40e      	push	{r1, r2, r3}
 800befa:	b503      	push	{r0, r1, lr}
 800befc:	4601      	mov	r1, r0
 800befe:	ab03      	add	r3, sp, #12
 800bf00:	4805      	ldr	r0, [pc, #20]	; (800bf18 <fiprintf+0x20>)
 800bf02:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf06:	6800      	ldr	r0, [r0, #0]
 800bf08:	9301      	str	r3, [sp, #4]
 800bf0a:	f7ff fe41 	bl	800bb90 <_vfiprintf_r>
 800bf0e:	b002      	add	sp, #8
 800bf10:	f85d eb04 	ldr.w	lr, [sp], #4
 800bf14:	b003      	add	sp, #12
 800bf16:	4770      	bx	lr
 800bf18:	20000010 	.word	0x20000010

0800bf1c <_fstat_r>:
 800bf1c:	b538      	push	{r3, r4, r5, lr}
 800bf1e:	4d07      	ldr	r5, [pc, #28]	; (800bf3c <_fstat_r+0x20>)
 800bf20:	2300      	movs	r3, #0
 800bf22:	4604      	mov	r4, r0
 800bf24:	4608      	mov	r0, r1
 800bf26:	4611      	mov	r1, r2
 800bf28:	602b      	str	r3, [r5, #0]
 800bf2a:	f7f6 fa16 	bl	800235a <_fstat>
 800bf2e:	1c43      	adds	r3, r0, #1
 800bf30:	d102      	bne.n	800bf38 <_fstat_r+0x1c>
 800bf32:	682b      	ldr	r3, [r5, #0]
 800bf34:	b103      	cbz	r3, 800bf38 <_fstat_r+0x1c>
 800bf36:	6023      	str	r3, [r4, #0]
 800bf38:	bd38      	pop	{r3, r4, r5, pc}
 800bf3a:	bf00      	nop
 800bf3c:	20000ee4 	.word	0x20000ee4

0800bf40 <_isatty_r>:
 800bf40:	b538      	push	{r3, r4, r5, lr}
 800bf42:	4d06      	ldr	r5, [pc, #24]	; (800bf5c <_isatty_r+0x1c>)
 800bf44:	2300      	movs	r3, #0
 800bf46:	4604      	mov	r4, r0
 800bf48:	4608      	mov	r0, r1
 800bf4a:	602b      	str	r3, [r5, #0]
 800bf4c:	f7f6 fa15 	bl	800237a <_isatty>
 800bf50:	1c43      	adds	r3, r0, #1
 800bf52:	d102      	bne.n	800bf5a <_isatty_r+0x1a>
 800bf54:	682b      	ldr	r3, [r5, #0]
 800bf56:	b103      	cbz	r3, 800bf5a <_isatty_r+0x1a>
 800bf58:	6023      	str	r3, [r4, #0]
 800bf5a:	bd38      	pop	{r3, r4, r5, pc}
 800bf5c:	20000ee4 	.word	0x20000ee4

0800bf60 <_lseek_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	4d07      	ldr	r5, [pc, #28]	; (800bf80 <_lseek_r+0x20>)
 800bf64:	4604      	mov	r4, r0
 800bf66:	4608      	mov	r0, r1
 800bf68:	4611      	mov	r1, r2
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	602a      	str	r2, [r5, #0]
 800bf6e:	461a      	mov	r2, r3
 800bf70:	f7f6 fa0e 	bl	8002390 <_lseek>
 800bf74:	1c43      	adds	r3, r0, #1
 800bf76:	d102      	bne.n	800bf7e <_lseek_r+0x1e>
 800bf78:	682b      	ldr	r3, [r5, #0]
 800bf7a:	b103      	cbz	r3, 800bf7e <_lseek_r+0x1e>
 800bf7c:	6023      	str	r3, [r4, #0]
 800bf7e:	bd38      	pop	{r3, r4, r5, pc}
 800bf80:	20000ee4 	.word	0x20000ee4

0800bf84 <__ascii_mbtowc>:
 800bf84:	b082      	sub	sp, #8
 800bf86:	b901      	cbnz	r1, 800bf8a <__ascii_mbtowc+0x6>
 800bf88:	a901      	add	r1, sp, #4
 800bf8a:	b142      	cbz	r2, 800bf9e <__ascii_mbtowc+0x1a>
 800bf8c:	b14b      	cbz	r3, 800bfa2 <__ascii_mbtowc+0x1e>
 800bf8e:	7813      	ldrb	r3, [r2, #0]
 800bf90:	600b      	str	r3, [r1, #0]
 800bf92:	7812      	ldrb	r2, [r2, #0]
 800bf94:	1e10      	subs	r0, r2, #0
 800bf96:	bf18      	it	ne
 800bf98:	2001      	movne	r0, #1
 800bf9a:	b002      	add	sp, #8
 800bf9c:	4770      	bx	lr
 800bf9e:	4610      	mov	r0, r2
 800bfa0:	e7fb      	b.n	800bf9a <__ascii_mbtowc+0x16>
 800bfa2:	f06f 0001 	mvn.w	r0, #1
 800bfa6:	e7f8      	b.n	800bf9a <__ascii_mbtowc+0x16>

0800bfa8 <memmove>:
 800bfa8:	4288      	cmp	r0, r1
 800bfaa:	b510      	push	{r4, lr}
 800bfac:	eb01 0402 	add.w	r4, r1, r2
 800bfb0:	d902      	bls.n	800bfb8 <memmove+0x10>
 800bfb2:	4284      	cmp	r4, r0
 800bfb4:	4623      	mov	r3, r4
 800bfb6:	d807      	bhi.n	800bfc8 <memmove+0x20>
 800bfb8:	1e43      	subs	r3, r0, #1
 800bfba:	42a1      	cmp	r1, r4
 800bfbc:	d008      	beq.n	800bfd0 <memmove+0x28>
 800bfbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bfc6:	e7f8      	b.n	800bfba <memmove+0x12>
 800bfc8:	4402      	add	r2, r0
 800bfca:	4601      	mov	r1, r0
 800bfcc:	428a      	cmp	r2, r1
 800bfce:	d100      	bne.n	800bfd2 <memmove+0x2a>
 800bfd0:	bd10      	pop	{r4, pc}
 800bfd2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bfd6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bfda:	e7f7      	b.n	800bfcc <memmove+0x24>

0800bfdc <_realloc_r>:
 800bfdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfde:	4607      	mov	r7, r0
 800bfe0:	4614      	mov	r4, r2
 800bfe2:	460e      	mov	r6, r1
 800bfe4:	b921      	cbnz	r1, 800bff0 <_realloc_r+0x14>
 800bfe6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bfea:	4611      	mov	r1, r2
 800bfec:	f7fd b98a 	b.w	8009304 <_malloc_r>
 800bff0:	b922      	cbnz	r2, 800bffc <_realloc_r+0x20>
 800bff2:	f7fd f937 	bl	8009264 <_free_r>
 800bff6:	4625      	mov	r5, r4
 800bff8:	4628      	mov	r0, r5
 800bffa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bffc:	f000 f83a 	bl	800c074 <_malloc_usable_size_r>
 800c000:	42a0      	cmp	r0, r4
 800c002:	d20f      	bcs.n	800c024 <_realloc_r+0x48>
 800c004:	4621      	mov	r1, r4
 800c006:	4638      	mov	r0, r7
 800c008:	f7fd f97c 	bl	8009304 <_malloc_r>
 800c00c:	4605      	mov	r5, r0
 800c00e:	2800      	cmp	r0, #0
 800c010:	d0f2      	beq.n	800bff8 <_realloc_r+0x1c>
 800c012:	4631      	mov	r1, r6
 800c014:	4622      	mov	r2, r4
 800c016:	f7ff f88f 	bl	800b138 <memcpy>
 800c01a:	4631      	mov	r1, r6
 800c01c:	4638      	mov	r0, r7
 800c01e:	f7fd f921 	bl	8009264 <_free_r>
 800c022:	e7e9      	b.n	800bff8 <_realloc_r+0x1c>
 800c024:	4635      	mov	r5, r6
 800c026:	e7e7      	b.n	800bff8 <_realloc_r+0x1c>

0800c028 <_read_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4d07      	ldr	r5, [pc, #28]	; (800c048 <_read_r+0x20>)
 800c02c:	4604      	mov	r4, r0
 800c02e:	4608      	mov	r0, r1
 800c030:	4611      	mov	r1, r2
 800c032:	2200      	movs	r2, #0
 800c034:	602a      	str	r2, [r5, #0]
 800c036:	461a      	mov	r2, r3
 800c038:	f7f6 f966 	bl	8002308 <_read>
 800c03c:	1c43      	adds	r3, r0, #1
 800c03e:	d102      	bne.n	800c046 <_read_r+0x1e>
 800c040:	682b      	ldr	r3, [r5, #0]
 800c042:	b103      	cbz	r3, 800c046 <_read_r+0x1e>
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	bd38      	pop	{r3, r4, r5, pc}
 800c048:	20000ee4 	.word	0x20000ee4

0800c04c <__ascii_wctomb>:
 800c04c:	b149      	cbz	r1, 800c062 <__ascii_wctomb+0x16>
 800c04e:	2aff      	cmp	r2, #255	; 0xff
 800c050:	bf85      	ittet	hi
 800c052:	238a      	movhi	r3, #138	; 0x8a
 800c054:	6003      	strhi	r3, [r0, #0]
 800c056:	700a      	strbls	r2, [r1, #0]
 800c058:	f04f 30ff 	movhi.w	r0, #4294967295
 800c05c:	bf98      	it	ls
 800c05e:	2001      	movls	r0, #1
 800c060:	4770      	bx	lr
 800c062:	4608      	mov	r0, r1
 800c064:	4770      	bx	lr

0800c066 <abort>:
 800c066:	b508      	push	{r3, lr}
 800c068:	2006      	movs	r0, #6
 800c06a:	f000 f833 	bl	800c0d4 <raise>
 800c06e:	2001      	movs	r0, #1
 800c070:	f7f6 f940 	bl	80022f4 <_exit>

0800c074 <_malloc_usable_size_r>:
 800c074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c078:	1f18      	subs	r0, r3, #4
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	bfbc      	itt	lt
 800c07e:	580b      	ldrlt	r3, [r1, r0]
 800c080:	18c0      	addlt	r0, r0, r3
 800c082:	4770      	bx	lr

0800c084 <_raise_r>:
 800c084:	291f      	cmp	r1, #31
 800c086:	b538      	push	{r3, r4, r5, lr}
 800c088:	4604      	mov	r4, r0
 800c08a:	460d      	mov	r5, r1
 800c08c:	d904      	bls.n	800c098 <_raise_r+0x14>
 800c08e:	2316      	movs	r3, #22
 800c090:	6003      	str	r3, [r0, #0]
 800c092:	f04f 30ff 	mov.w	r0, #4294967295
 800c096:	bd38      	pop	{r3, r4, r5, pc}
 800c098:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c09a:	b112      	cbz	r2, 800c0a2 <_raise_r+0x1e>
 800c09c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0a0:	b94b      	cbnz	r3, 800c0b6 <_raise_r+0x32>
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f000 f830 	bl	800c108 <_getpid_r>
 800c0a8:	462a      	mov	r2, r5
 800c0aa:	4601      	mov	r1, r0
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0b2:	f000 b817 	b.w	800c0e4 <_kill_r>
 800c0b6:	2b01      	cmp	r3, #1
 800c0b8:	d00a      	beq.n	800c0d0 <_raise_r+0x4c>
 800c0ba:	1c59      	adds	r1, r3, #1
 800c0bc:	d103      	bne.n	800c0c6 <_raise_r+0x42>
 800c0be:	2316      	movs	r3, #22
 800c0c0:	6003      	str	r3, [r0, #0]
 800c0c2:	2001      	movs	r0, #1
 800c0c4:	e7e7      	b.n	800c096 <_raise_r+0x12>
 800c0c6:	2400      	movs	r4, #0
 800c0c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c0cc:	4628      	mov	r0, r5
 800c0ce:	4798      	blx	r3
 800c0d0:	2000      	movs	r0, #0
 800c0d2:	e7e0      	b.n	800c096 <_raise_r+0x12>

0800c0d4 <raise>:
 800c0d4:	4b02      	ldr	r3, [pc, #8]	; (800c0e0 <raise+0xc>)
 800c0d6:	4601      	mov	r1, r0
 800c0d8:	6818      	ldr	r0, [r3, #0]
 800c0da:	f7ff bfd3 	b.w	800c084 <_raise_r>
 800c0de:	bf00      	nop
 800c0e0:	20000010 	.word	0x20000010

0800c0e4 <_kill_r>:
 800c0e4:	b538      	push	{r3, r4, r5, lr}
 800c0e6:	4d07      	ldr	r5, [pc, #28]	; (800c104 <_kill_r+0x20>)
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	4604      	mov	r4, r0
 800c0ec:	4608      	mov	r0, r1
 800c0ee:	4611      	mov	r1, r2
 800c0f0:	602b      	str	r3, [r5, #0]
 800c0f2:	f7f6 f8ef 	bl	80022d4 <_kill>
 800c0f6:	1c43      	adds	r3, r0, #1
 800c0f8:	d102      	bne.n	800c100 <_kill_r+0x1c>
 800c0fa:	682b      	ldr	r3, [r5, #0]
 800c0fc:	b103      	cbz	r3, 800c100 <_kill_r+0x1c>
 800c0fe:	6023      	str	r3, [r4, #0]
 800c100:	bd38      	pop	{r3, r4, r5, pc}
 800c102:	bf00      	nop
 800c104:	20000ee4 	.word	0x20000ee4

0800c108 <_getpid_r>:
 800c108:	f7f6 b8dc 	b.w	80022c4 <_getpid>

0800c10c <_init>:
 800c10c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c10e:	bf00      	nop
 800c110:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c112:	bc08      	pop	{r3}
 800c114:	469e      	mov	lr, r3
 800c116:	4770      	bx	lr

0800c118 <_fini>:
 800c118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c11a:	bf00      	nop
 800c11c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c11e:	bc08      	pop	{r3}
 800c120:	469e      	mov	lr, r3
 800c122:	4770      	bx	lr
