
SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a478  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b00  0800a648  0800a648  0001a648  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b148  0800b148  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b148  0800b148  0001b148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b150  0800b150  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b150  0800b150  0001b150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b154  0800b154  0001b154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800b158  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c28  200001e0  0800b334  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000e08  0800b334  00020e08  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013318  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002896  00000000  00000000  00033524  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00035dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  00036b40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023b92  00000000  00000000  00037798  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d2b9  00000000  00000000  0005b32a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf4a3  00000000  00000000  000685e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00137a86  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000040a0  00000000  00000000  00137b04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a630 	.word	0x0800a630

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800a630 	.word	0x0800a630

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b972 	b.w	8000ee4 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9e08      	ldr	r6, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	4688      	mov	r8, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14b      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4615      	mov	r5, r2
 8000c2a:	d967      	bls.n	8000cfc <__udivmoddi4+0xe4>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b14a      	cbz	r2, 8000c46 <__udivmoddi4+0x2e>
 8000c32:	f1c2 0720 	rsb	r7, r2, #32
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c3e:	4095      	lsls	r5, r2
 8000c40:	ea47 0803 	orr.w	r8, r7, r3
 8000c44:	4094      	lsls	r4, r2
 8000c46:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c4a:	0c23      	lsrs	r3, r4, #16
 8000c4c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c50:	fa1f fc85 	uxth.w	ip, r5
 8000c54:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c58:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c60:	4299      	cmp	r1, r3
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x60>
 8000c64:	18eb      	adds	r3, r5, r3
 8000c66:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c6a:	f080 811b 	bcs.w	8000ea4 <__udivmoddi4+0x28c>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 8118 	bls.w	8000ea4 <__udivmoddi4+0x28c>
 8000c74:	3f02      	subs	r7, #2
 8000c76:	442b      	add	r3, r5
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c88:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8c:	45a4      	cmp	ip, r4
 8000c8e:	d909      	bls.n	8000ca4 <__udivmoddi4+0x8c>
 8000c90:	192c      	adds	r4, r5, r4
 8000c92:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c96:	f080 8107 	bcs.w	8000ea8 <__udivmoddi4+0x290>
 8000c9a:	45a4      	cmp	ip, r4
 8000c9c:	f240 8104 	bls.w	8000ea8 <__udivmoddi4+0x290>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	442c      	add	r4, r5
 8000ca4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ca8:	eba4 040c 	sub.w	r4, r4, ip
 8000cac:	2700      	movs	r7, #0
 8000cae:	b11e      	cbz	r6, 8000cb8 <__udivmoddi4+0xa0>
 8000cb0:	40d4      	lsrs	r4, r2
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cb8:	4639      	mov	r1, r7
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d909      	bls.n	8000cd6 <__udivmoddi4+0xbe>
 8000cc2:	2e00      	cmp	r6, #0
 8000cc4:	f000 80eb 	beq.w	8000e9e <__udivmoddi4+0x286>
 8000cc8:	2700      	movs	r7, #0
 8000cca:	e9c6 0100 	strd	r0, r1, [r6]
 8000cce:	4638      	mov	r0, r7
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd6:	fab3 f783 	clz	r7, r3
 8000cda:	2f00      	cmp	r7, #0
 8000cdc:	d147      	bne.n	8000d6e <__udivmoddi4+0x156>
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d302      	bcc.n	8000ce8 <__udivmoddi4+0xd0>
 8000ce2:	4282      	cmp	r2, r0
 8000ce4:	f200 80fa 	bhi.w	8000edc <__udivmoddi4+0x2c4>
 8000ce8:	1a84      	subs	r4, r0, r2
 8000cea:	eb61 0303 	sbc.w	r3, r1, r3
 8000cee:	2001      	movs	r0, #1
 8000cf0:	4698      	mov	r8, r3
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	d0e0      	beq.n	8000cb8 <__udivmoddi4+0xa0>
 8000cf6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cfa:	e7dd      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000cfc:	b902      	cbnz	r2, 8000d00 <__udivmoddi4+0xe8>
 8000cfe:	deff      	udf	#255	; 0xff
 8000d00:	fab2 f282 	clz	r2, r2
 8000d04:	2a00      	cmp	r2, #0
 8000d06:	f040 808f 	bne.w	8000e28 <__udivmoddi4+0x210>
 8000d0a:	1b49      	subs	r1, r1, r5
 8000d0c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d10:	fa1f f885 	uxth.w	r8, r5
 8000d14:	2701      	movs	r7, #1
 8000d16:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d1a:	0c23      	lsrs	r3, r4, #16
 8000d1c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d24:	fb08 f10c 	mul.w	r1, r8, ip
 8000d28:	4299      	cmp	r1, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x124>
 8000d2c:	18eb      	adds	r3, r5, r3
 8000d2e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x122>
 8000d34:	4299      	cmp	r1, r3
 8000d36:	f200 80cd 	bhi.w	8000ed4 <__udivmoddi4+0x2bc>
 8000d3a:	4684      	mov	ip, r0
 8000d3c:	1a59      	subs	r1, r3, r1
 8000d3e:	b2a3      	uxth	r3, r4
 8000d40:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d44:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d48:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d4c:	fb08 f800 	mul.w	r8, r8, r0
 8000d50:	45a0      	cmp	r8, r4
 8000d52:	d907      	bls.n	8000d64 <__udivmoddi4+0x14c>
 8000d54:	192c      	adds	r4, r5, r4
 8000d56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d5a:	d202      	bcs.n	8000d62 <__udivmoddi4+0x14a>
 8000d5c:	45a0      	cmp	r8, r4
 8000d5e:	f200 80b6 	bhi.w	8000ece <__udivmoddi4+0x2b6>
 8000d62:	4618      	mov	r0, r3
 8000d64:	eba4 0408 	sub.w	r4, r4, r8
 8000d68:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d6c:	e79f      	b.n	8000cae <__udivmoddi4+0x96>
 8000d6e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d72:	40bb      	lsls	r3, r7
 8000d74:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d78:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d7c:	fa01 f407 	lsl.w	r4, r1, r7
 8000d80:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d84:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d88:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d8c:	4325      	orrs	r5, r4
 8000d8e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d92:	0c2c      	lsrs	r4, r5, #16
 8000d94:	fb08 3319 	mls	r3, r8, r9, r3
 8000d98:	fa1f fa8e 	uxth.w	sl, lr
 8000d9c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000da0:	fb09 f40a 	mul.w	r4, r9, sl
 8000da4:	429c      	cmp	r4, r3
 8000da6:	fa02 f207 	lsl.w	r2, r2, r7
 8000daa:	fa00 f107 	lsl.w	r1, r0, r7
 8000dae:	d90b      	bls.n	8000dc8 <__udivmoddi4+0x1b0>
 8000db0:	eb1e 0303 	adds.w	r3, lr, r3
 8000db4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000db8:	f080 8087 	bcs.w	8000eca <__udivmoddi4+0x2b2>
 8000dbc:	429c      	cmp	r4, r3
 8000dbe:	f240 8084 	bls.w	8000eca <__udivmoddi4+0x2b2>
 8000dc2:	f1a9 0902 	sub.w	r9, r9, #2
 8000dc6:	4473      	add	r3, lr
 8000dc8:	1b1b      	subs	r3, r3, r4
 8000dca:	b2ad      	uxth	r5, r5
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dd8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ddc:	45a2      	cmp	sl, r4
 8000dde:	d908      	bls.n	8000df2 <__udivmoddi4+0x1da>
 8000de0:	eb1e 0404 	adds.w	r4, lr, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	d26b      	bcs.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dea:	45a2      	cmp	sl, r4
 8000dec:	d969      	bls.n	8000ec2 <__udivmoddi4+0x2aa>
 8000dee:	3802      	subs	r0, #2
 8000df0:	4474      	add	r4, lr
 8000df2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000df6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dfa:	eba4 040a 	sub.w	r4, r4, sl
 8000dfe:	454c      	cmp	r4, r9
 8000e00:	46c2      	mov	sl, r8
 8000e02:	464b      	mov	r3, r9
 8000e04:	d354      	bcc.n	8000eb0 <__udivmoddi4+0x298>
 8000e06:	d051      	beq.n	8000eac <__udivmoddi4+0x294>
 8000e08:	2e00      	cmp	r6, #0
 8000e0a:	d069      	beq.n	8000ee0 <__udivmoddi4+0x2c8>
 8000e0c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e10:	eb64 0403 	sbc.w	r4, r4, r3
 8000e14:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e18:	40fd      	lsrs	r5, r7
 8000e1a:	40fc      	lsrs	r4, r7
 8000e1c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e20:	e9c6 5400 	strd	r5, r4, [r6]
 8000e24:	2700      	movs	r7, #0
 8000e26:	e747      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e30:	4095      	lsls	r5, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	fa21 f303 	lsr.w	r3, r1, r3
 8000e3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e3e:	4338      	orrs	r0, r7
 8000e40:	0c01      	lsrs	r1, r0, #16
 8000e42:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e46:	fa1f f885 	uxth.w	r8, r5
 8000e4a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb07 f308 	mul.w	r3, r7, r8
 8000e56:	428b      	cmp	r3, r1
 8000e58:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5c:	d907      	bls.n	8000e6e <__udivmoddi4+0x256>
 8000e5e:	1869      	adds	r1, r5, r1
 8000e60:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e64:	d22f      	bcs.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d92d      	bls.n	8000ec6 <__udivmoddi4+0x2ae>
 8000e6a:	3f02      	subs	r7, #2
 8000e6c:	4429      	add	r1, r5
 8000e6e:	1acb      	subs	r3, r1, r3
 8000e70:	b281      	uxth	r1, r0
 8000e72:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e76:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e7e:	fb00 f308 	mul.w	r3, r0, r8
 8000e82:	428b      	cmp	r3, r1
 8000e84:	d907      	bls.n	8000e96 <__udivmoddi4+0x27e>
 8000e86:	1869      	adds	r1, r5, r1
 8000e88:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8c:	d217      	bcs.n	8000ebe <__udivmoddi4+0x2a6>
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d915      	bls.n	8000ebe <__udivmoddi4+0x2a6>
 8000e92:	3802      	subs	r0, #2
 8000e94:	4429      	add	r1, r5
 8000e96:	1ac9      	subs	r1, r1, r3
 8000e98:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e9c:	e73b      	b.n	8000d16 <__udivmoddi4+0xfe>
 8000e9e:	4637      	mov	r7, r6
 8000ea0:	4630      	mov	r0, r6
 8000ea2:	e709      	b.n	8000cb8 <__udivmoddi4+0xa0>
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	e6e7      	b.n	8000c78 <__udivmoddi4+0x60>
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	e6fb      	b.n	8000ca4 <__udivmoddi4+0x8c>
 8000eac:	4541      	cmp	r1, r8
 8000eae:	d2ab      	bcs.n	8000e08 <__udivmoddi4+0x1f0>
 8000eb0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000eb4:	eb69 020e 	sbc.w	r2, r9, lr
 8000eb8:	3801      	subs	r0, #1
 8000eba:	4613      	mov	r3, r2
 8000ebc:	e7a4      	b.n	8000e08 <__udivmoddi4+0x1f0>
 8000ebe:	4660      	mov	r0, ip
 8000ec0:	e7e9      	b.n	8000e96 <__udivmoddi4+0x27e>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	e795      	b.n	8000df2 <__udivmoddi4+0x1da>
 8000ec6:	4667      	mov	r7, ip
 8000ec8:	e7d1      	b.n	8000e6e <__udivmoddi4+0x256>
 8000eca:	4681      	mov	r9, r0
 8000ecc:	e77c      	b.n	8000dc8 <__udivmoddi4+0x1b0>
 8000ece:	3802      	subs	r0, #2
 8000ed0:	442c      	add	r4, r5
 8000ed2:	e747      	b.n	8000d64 <__udivmoddi4+0x14c>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	442b      	add	r3, r5
 8000eda:	e72f      	b.n	8000d3c <__udivmoddi4+0x124>
 8000edc:	4638      	mov	r0, r7
 8000ede:	e708      	b.n	8000cf2 <__udivmoddi4+0xda>
 8000ee0:	4637      	mov	r7, r6
 8000ee2:	e6e9      	b.n	8000cb8 <__udivmoddi4+0xa0>

08000ee4 <__aeabi_idiv0>:
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop

08000ee8 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff f98d 	bl	8000210 <strlen>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
 8000efe:	6879      	ldr	r1, [r7, #4]
 8000f00:	4803      	ldr	r0, [pc, #12]	; (8000f10 <Send_Uart+0x28>)
 8000f02:	f003 fd86 	bl	8004a12 <HAL_UART_Transmit>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000928 	.word	0x20000928

08000f14 <Mount_SD>:
//	return len;
//}


void Mount_SD (const TCHAR* path)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	480a      	ldr	r0, [pc, #40]	; (8000f4c <Mount_SD+0x38>)
 8000f22:	f006 fe59 	bl	8007bd8 <f_mount>
 8000f26:	4603      	mov	r3, r0
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <Mount_SD+0x3c>)
 8000f2c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <Mount_SD+0x3c>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d003      	beq.n	8000f3e <Mount_SD+0x2a>
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <Mount_SD+0x40>)
 8000f38:	f7ff ffd6 	bl	8000ee8 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 8000f3c:	e002      	b.n	8000f44 <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 8000f3e:	4806      	ldr	r0, [pc, #24]	; (8000f58 <Mount_SD+0x44>)
 8000f40:	f7ff ffd2 	bl	8000ee8 <Send_Uart>
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20000324 	.word	0x20000324
 8000f50:	20000564 	.word	0x20000564
 8000f54:	0800a648 	.word	0x0800a648
 8000f58:	0800a66c 	.word	0x0800a66c

08000f5c <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8000f64:	2201      	movs	r2, #1
 8000f66:	6879      	ldr	r1, [r7, #4]
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f006 fe35 	bl	8007bd8 <f_mount>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <Unmount_SD+0x38>)
 8000f74:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 8000f76:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <Unmount_SD+0x38>)
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d103      	bne.n	8000f86 <Unmount_SD+0x2a>
 8000f7e:	4806      	ldr	r0, [pc, #24]	; (8000f98 <Unmount_SD+0x3c>)
 8000f80:	f7ff ffb2 	bl	8000ee8 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8000f84:	e002      	b.n	8000f8c <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <Unmount_SD+0x40>)
 8000f88:	f7ff ffae 	bl	8000ee8 <Send_Uart>
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000564 	.word	0x20000564
 8000f98:	0800a690 	.word	0x0800a690
 8000f9c:	0800a6b8 	.word	0x0800a6b8

08000fa0 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b088      	sub	sp, #32
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8000fa8:	4943      	ldr	r1, [pc, #268]	; (80010b8 <Create_File+0x118>)
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f007 fa35 	bl	800841a <f_stat>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	4b41      	ldr	r3, [pc, #260]	; (80010bc <Create_File+0x11c>)
 8000fb6:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000fb8:	4b40      	ldr	r3, [pc, #256]	; (80010bc <Create_File+0x11c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d112      	bne.n	8000fe6 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000fc0:	2064      	movs	r0, #100	; 0x64
 8000fc2:	f007 fae9 	bl	8008598 <malloc>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	493c      	ldr	r1, [pc, #240]	; (80010c0 <Create_File+0x120>)
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f008 f80e 	bl	8008ff0 <siprintf>
		Send_Uart(buf);
 8000fd4:	68f8      	ldr	r0, [r7, #12]
 8000fd6:	f7ff ff87 	bl	8000ee8 <Send_Uart>
		free(buf);
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f007 fae4 	bl	80085a8 <free>
	    return fresult;
 8000fe0:	4b36      	ldr	r3, [pc, #216]	; (80010bc <Create_File+0x11c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	e063      	b.n	80010ae <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8000fe6:	220b      	movs	r2, #11
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	4836      	ldr	r0, [pc, #216]	; (80010c4 <Create_File+0x124>)
 8000fec:	f006 fe3a 	bl	8007c64 <f_open>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	461a      	mov	r2, r3
 8000ff4:	4b31      	ldr	r3, [pc, #196]	; (80010bc <Create_File+0x11c>)
 8000ff6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000ff8:	4b30      	ldr	r3, [pc, #192]	; (80010bc <Create_File+0x11c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d015      	beq.n	800102c <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8001000:	2064      	movs	r0, #100	; 0x64
 8001002:	f007 fac9 	bl	8008598 <malloc>
 8001006:	4603      	mov	r3, r0
 8001008:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800100a:	4b2c      	ldr	r3, [pc, #176]	; (80010bc <Create_File+0x11c>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	461a      	mov	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	492d      	ldr	r1, [pc, #180]	; (80010c8 <Create_File+0x128>)
 8001014:	6938      	ldr	r0, [r7, #16]
 8001016:	f007 ffeb 	bl	8008ff0 <siprintf>
			Send_Uart(buf);
 800101a:	6938      	ldr	r0, [r7, #16]
 800101c:	f7ff ff64 	bl	8000ee8 <Send_Uart>
			free(buf);
 8001020:	6938      	ldr	r0, [r7, #16]
 8001022:	f007 fac1 	bl	80085a8 <free>
		    return fresult;
 8001026:	4b25      	ldr	r3, [pc, #148]	; (80010bc <Create_File+0x11c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	e040      	b.n	80010ae <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800102c:	2064      	movs	r0, #100	; 0x64
 800102e:	f007 fab3 	bl	8008598 <malloc>
 8001032:	4603      	mov	r3, r0
 8001034:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001036:	687a      	ldr	r2, [r7, #4]
 8001038:	4924      	ldr	r1, [pc, #144]	; (80010cc <Create_File+0x12c>)
 800103a:	69f8      	ldr	r0, [r7, #28]
 800103c:	f007 ffd8 	bl	8008ff0 <siprintf>
			Send_Uart(buf);
 8001040:	69f8      	ldr	r0, [r7, #28]
 8001042:	f7ff ff51 	bl	8000ee8 <Send_Uart>
			free(buf);
 8001046:	69f8      	ldr	r0, [r7, #28]
 8001048:	f007 faae 	bl	80085a8 <free>
		}

		fresult = f_close(&fil);
 800104c:	481d      	ldr	r0, [pc, #116]	; (80010c4 <Create_File+0x124>)
 800104e:	f007 f9ba 	bl	80083c6 <f_close>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b19      	ldr	r3, [pc, #100]	; (80010bc <Create_File+0x11c>)
 8001058:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <Create_File+0x11c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d013      	beq.n	800108a <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8001062:	2064      	movs	r0, #100	; 0x64
 8001064:	f007 fa98 	bl	8008598 <malloc>
 8001068:	4603      	mov	r3, r0
 800106a:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <Create_File+0x11c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	461a      	mov	r2, r3
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4916      	ldr	r1, [pc, #88]	; (80010d0 <Create_File+0x130>)
 8001076:	6978      	ldr	r0, [r7, #20]
 8001078:	f007 ffba 	bl	8008ff0 <siprintf>
			Send_Uart(buf);
 800107c:	6978      	ldr	r0, [r7, #20]
 800107e:	f7ff ff33 	bl	8000ee8 <Send_Uart>
			free(buf);
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f007 fa90 	bl	80085a8 <free>
 8001088:	e00f      	b.n	80010aa <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800108a:	2064      	movs	r0, #100	; 0x64
 800108c:	f007 fa84 	bl	8008598 <malloc>
 8001090:	4603      	mov	r3, r0
 8001092:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	490f      	ldr	r1, [pc, #60]	; (80010d4 <Create_File+0x134>)
 8001098:	69b8      	ldr	r0, [r7, #24]
 800109a:	f007 ffa9 	bl	8008ff0 <siprintf>
			Send_Uart(buf);
 800109e:	69b8      	ldr	r0, [r7, #24]
 80010a0:	f7ff ff22 	bl	8000ee8 <Send_Uart>
			free(buf);
 80010a4:	69b8      	ldr	r0, [r7, #24]
 80010a6:	f007 fa7f 	bl	80085a8 <free>
		}
	}
    return fresult;
 80010aa:	4b04      	ldr	r3, [pc, #16]	; (80010bc <Create_File+0x11c>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3720      	adds	r7, #32
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2000030c 	.word	0x2000030c
 80010bc:	20000564 	.word	0x20000564
 80010c0:	0800a884 	.word	0x0800a884
 80010c4:	2000056c 	.word	0x2000056c
 80010c8:	0800a8bc 	.word	0x0800a8bc
 80010cc:	0800a8e4 	.word	0x0800a8e4
 80010d0:	0800a924 	.word	0x0800a924
 80010d4:	0800a864 	.word	0x0800a864

080010d8 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80010e2:	4956      	ldr	r1, [pc, #344]	; (800123c <Update_File+0x164>)
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f007 f998 	bl	800841a <f_stat>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b54      	ldr	r3, [pc, #336]	; (8001240 <Update_File+0x168>)
 80010f0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80010f2:	4b53      	ldr	r3, [pc, #332]	; (8001240 <Update_File+0x168>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d012      	beq.n	8001120 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80010fa:	2064      	movs	r0, #100	; 0x64
 80010fc:	f007 fa4c 	bl	8008598 <malloc>
 8001100:	4603      	mov	r3, r0
 8001102:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 8001104:	687a      	ldr	r2, [r7, #4]
 8001106:	494f      	ldr	r1, [pc, #316]	; (8001244 <Update_File+0x16c>)
 8001108:	68b8      	ldr	r0, [r7, #8]
 800110a:	f007 ff71 	bl	8008ff0 <siprintf>
		Send_Uart (buf);
 800110e:	68b8      	ldr	r0, [r7, #8]
 8001110:	f7ff feea 	bl	8000ee8 <Send_Uart>
		free(buf);
 8001114:	68b8      	ldr	r0, [r7, #8]
 8001116:	f007 fa47 	bl	80085a8 <free>
	    return fresult;
 800111a:	4b49      	ldr	r3, [pc, #292]	; (8001240 <Update_File+0x168>)
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	e088      	b.n	8001232 <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001120:	2232      	movs	r2, #50	; 0x32
 8001122:	6879      	ldr	r1, [r7, #4]
 8001124:	4848      	ldr	r0, [pc, #288]	; (8001248 <Update_File+0x170>)
 8001126:	f006 fd9d 	bl	8007c64 <f_open>
 800112a:	4603      	mov	r3, r0
 800112c:	461a      	mov	r2, r3
 800112e:	4b44      	ldr	r3, [pc, #272]	; (8001240 <Update_File+0x168>)
 8001130:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001132:	4b43      	ldr	r3, [pc, #268]	; (8001240 <Update_File+0x168>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d015      	beq.n	8001166 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800113a:	2064      	movs	r0, #100	; 0x64
 800113c:	f007 fa2c 	bl	8008598 <malloc>
 8001140:	4603      	mov	r3, r0
 8001142:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8001144:	4b3e      	ldr	r3, [pc, #248]	; (8001240 <Update_File+0x168>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	493f      	ldr	r1, [pc, #252]	; (800124c <Update_File+0x174>)
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f007 ff4e 	bl	8008ff0 <siprintf>
	    	Send_Uart(buf);
 8001154:	68f8      	ldr	r0, [r7, #12]
 8001156:	f7ff fec7 	bl	8000ee8 <Send_Uart>
	        free(buf);
 800115a:	68f8      	ldr	r0, [r7, #12]
 800115c:	f007 fa24 	bl	80085a8 <free>
	        return fresult;
 8001160:	4b37      	ldr	r3, [pc, #220]	; (8001240 <Update_File+0x168>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	e065      	b.n	8001232 <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001166:	6838      	ldr	r0, [r7, #0]
 8001168:	f7ff f852 	bl	8000210 <strlen>
 800116c:	4602      	mov	r2, r0
 800116e:	4b38      	ldr	r3, [pc, #224]	; (8001250 <Update_File+0x178>)
 8001170:	6839      	ldr	r1, [r7, #0]
 8001172:	4835      	ldr	r0, [pc, #212]	; (8001248 <Update_File+0x170>)
 8001174:	f006 ff34 	bl	8007fe0 <f_write>
 8001178:	4603      	mov	r3, r0
 800117a:	461a      	mov	r2, r3
 800117c:	4b30      	ldr	r3, [pc, #192]	; (8001240 <Update_File+0x168>)
 800117e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001180:	4b2f      	ldr	r3, [pc, #188]	; (8001240 <Update_File+0x168>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d013      	beq.n	80011b0 <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001188:	2064      	movs	r0, #100	; 0x64
 800118a:	f007 fa05 	bl	8008598 <malloc>
 800118e:	4603      	mov	r3, r0
 8001190:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <Update_File+0x168>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	492e      	ldr	r1, [pc, #184]	; (8001254 <Update_File+0x17c>)
 800119c:	69b8      	ldr	r0, [r7, #24]
 800119e:	f007 ff27 	bl	8008ff0 <siprintf>
	    	Send_Uart(buf);
 80011a2:	69b8      	ldr	r0, [r7, #24]
 80011a4:	f7ff fea0 	bl	8000ee8 <Send_Uart>
	    	free(buf);
 80011a8:	69b8      	ldr	r0, [r7, #24]
 80011aa:	f007 f9fd 	bl	80085a8 <free>
 80011ae:	e00f      	b.n	80011d0 <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80011b0:	2064      	movs	r0, #100	; 0x64
 80011b2:	f007 f9f1 	bl	8008598 <malloc>
 80011b6:	4603      	mov	r3, r0
 80011b8:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	4926      	ldr	r1, [pc, #152]	; (8001258 <Update_File+0x180>)
 80011be:	69f8      	ldr	r0, [r7, #28]
 80011c0:	f007 ff16 	bl	8008ff0 <siprintf>
	    	Send_Uart(buf);
 80011c4:	69f8      	ldr	r0, [r7, #28]
 80011c6:	f7ff fe8f 	bl	8000ee8 <Send_Uart>
	    	free(buf);
 80011ca:	69f8      	ldr	r0, [r7, #28]
 80011cc:	f007 f9ec 	bl	80085a8 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80011d0:	481d      	ldr	r0, [pc, #116]	; (8001248 <Update_File+0x170>)
 80011d2:	f007 f8f8 	bl	80083c6 <f_close>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <Update_File+0x168>)
 80011dc:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80011de:	4b18      	ldr	r3, [pc, #96]	; (8001240 <Update_File+0x168>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d013      	beq.n	800120e <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80011e6:	2064      	movs	r0, #100	; 0x64
 80011e8:	f007 f9d6 	bl	8008598 <malloc>
 80011ec:	4603      	mov	r3, r0
 80011ee:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 80011f0:	4b13      	ldr	r3, [pc, #76]	; (8001240 <Update_File+0x168>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4918      	ldr	r1, [pc, #96]	; (800125c <Update_File+0x184>)
 80011fa:	6938      	ldr	r0, [r7, #16]
 80011fc:	f007 fef8 	bl	8008ff0 <siprintf>
	    	Send_Uart(buf);
 8001200:	6938      	ldr	r0, [r7, #16]
 8001202:	f7ff fe71 	bl	8000ee8 <Send_Uart>
	    	free(buf);
 8001206:	6938      	ldr	r0, [r7, #16]
 8001208:	f007 f9ce 	bl	80085a8 <free>
 800120c:	e00f      	b.n	800122e <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800120e:	2064      	movs	r0, #100	; 0x64
 8001210:	f007 f9c2 	bl	8008598 <malloc>
 8001214:	4603      	mov	r3, r0
 8001216:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4911      	ldr	r1, [pc, #68]	; (8001260 <Update_File+0x188>)
 800121c:	6978      	ldr	r0, [r7, #20]
 800121e:	f007 fee7 	bl	8008ff0 <siprintf>
	    	Send_Uart(buf);
 8001222:	6978      	ldr	r0, [r7, #20]
 8001224:	f7ff fe60 	bl	8000ee8 <Send_Uart>
	    	free(buf);
 8001228:	6978      	ldr	r0, [r7, #20]
 800122a:	f007 f9bd 	bl	80085a8 <free>
	     }
	}
    return fresult;
 800122e:	4b04      	ldr	r3, [pc, #16]	; (8001240 <Update_File+0x168>)
 8001230:	781b      	ldrb	r3, [r3, #0]
}
 8001232:	4618      	mov	r0, r3
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000030c 	.word	0x2000030c
 8001240:	20000564 	.word	0x20000564
 8001244:	0800a70c 	.word	0x0800a70c
 8001248:	2000056c 	.word	0x2000056c
 800124c:	0800a72c 	.word	0x0800a72c
 8001250:	2000055c 	.word	0x2000055c
 8001254:	0800a948 	.word	0x0800a948
 8001258:	0800a970 	.word	0x0800a970
 800125c:	0800a83c 	.word	0x0800a83c
 8001260:	0800a864 	.word	0x0800a864

08001264 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001268:	b097      	sub	sp, #92	; 0x5c
 800126a:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126c:	f000 fea8 	bl	8001fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001270:	f000 fbcc 	bl	8001a0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001274:	f000 fca2 	bl	8001bbc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001278:	f000 fc76 	bl	8001b68 <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 800127c:	f000 fc54 	bl	8001b28 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001280:	f004 fd8a 	bl	8005d98 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001284:	f000 fc9a 	bl	8001bbc <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8001288:	f000 fc6e 	bl	8001b68 <MX_USART2_UART_Init>
    MX_SDIO_SD_Init();
 800128c:	f000 fc4c 	bl	8001b28 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8001290:	f004 fd82 	bl	8005d98 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */

    Mount_SD("/");
 8001294:	48d3      	ldr	r0, [pc, #844]	; (80015e4 <main+0x380>)
 8001296:	f7ff fe3d 	bl	8000f14 <Mount_SD>
    char FileName[] = "CSV_TEST.CSV";
 800129a:	4bd3      	ldr	r3, [pc, #844]	; (80015e8 <main+0x384>)
 800129c:	f107 0410 	add.w	r4, r7, #16
 80012a0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a2:	c407      	stmia	r4!, {r0, r1, r2}
 80012a4:	7023      	strb	r3, [r4, #0]
    Create_File(FileName);
 80012a6:	f107 0310 	add.w	r3, r7, #16
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fe78 	bl	8000fa0 <Create_File>
	Unmount_SD("/");
 80012b0:	48cc      	ldr	r0, [pc, #816]	; (80015e4 <main+0x380>)
 80012b2:	f7ff fe53 	bl	8000f5c <Unmount_SD>
    /*------------------------------Create header----------------------------*/
	Mount_SD("/");
 80012b6:	48cb      	ldr	r0, [pc, #812]	; (80015e4 <main+0x380>)
 80012b8:	f7ff fe2c 	bl	8000f14 <Mount_SD>

	//CAN Bus
	sprintf(buffer, "Time, RPM, TPS (%%), Fuel Open Time (ms), Ignition Angle (Degrees),");
 80012bc:	49cb      	ldr	r1, [pc, #812]	; (80015ec <main+0x388>)
 80012be:	48cc      	ldr	r0, [pc, #816]	; (80015f0 <main+0x38c>)
 80012c0:	f007 fe96 	bl	8008ff0 <siprintf>
	Update_File(FileName, buffer);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	49c9      	ldr	r1, [pc, #804]	; (80015f0 <main+0x38c>)
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff ff04 	bl	80010d8 <Update_File>
	sprintf(buffer, "Barometer (PSI), MAP (PSI), Pressure Type,");
 80012d0:	4bc7      	ldr	r3, [pc, #796]	; (80015f0 <main+0x38c>)
 80012d2:	4ac8      	ldr	r2, [pc, #800]	; (80015f4 <main+0x390>)
 80012d4:	4614      	mov	r4, r2
 80012d6:	469c      	mov	ip, r3
 80012d8:	f104 0e20 	add.w	lr, r4, #32
 80012dc:	4665      	mov	r5, ip
 80012de:	4626      	mov	r6, r4
 80012e0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80012e2:	6028      	str	r0, [r5, #0]
 80012e4:	6069      	str	r1, [r5, #4]
 80012e6:	60aa      	str	r2, [r5, #8]
 80012e8:	60eb      	str	r3, [r5, #12]
 80012ea:	3410      	adds	r4, #16
 80012ec:	f10c 0c10 	add.w	ip, ip, #16
 80012f0:	4574      	cmp	r4, lr
 80012f2:	d1f3      	bne.n	80012dc <main+0x78>
 80012f4:	4662      	mov	r2, ip
 80012f6:	4623      	mov	r3, r4
 80012f8:	cb03      	ldmia	r3!, {r0, r1}
 80012fa:	6010      	str	r0, [r2, #0]
 80012fc:	6051      	str	r1, [r2, #4]
 80012fe:	8819      	ldrh	r1, [r3, #0]
 8001300:	789b      	ldrb	r3, [r3, #2]
 8001302:	8111      	strh	r1, [r2, #8]
 8001304:	7293      	strb	r3, [r2, #10]
	Update_File(FileName, buffer);
 8001306:	f107 0310 	add.w	r3, r7, #16
 800130a:	49b9      	ldr	r1, [pc, #740]	; (80015f0 <main+0x38c>)
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fee3 	bl	80010d8 <Update_File>
	sprintf(buffer, "Pre Radiator Air Temp (C), Post Radiator Air Temp (C),");
 8001312:	4bb7      	ldr	r3, [pc, #732]	; (80015f0 <main+0x38c>)
 8001314:	4ab8      	ldr	r2, [pc, #736]	; (80015f8 <main+0x394>)
 8001316:	4614      	mov	r4, r2
 8001318:	469c      	mov	ip, r3
 800131a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800131e:	4665      	mov	r5, ip
 8001320:	4626      	mov	r6, r4
 8001322:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001324:	6028      	str	r0, [r5, #0]
 8001326:	6069      	str	r1, [r5, #4]
 8001328:	60aa      	str	r2, [r5, #8]
 800132a:	60eb      	str	r3, [r5, #12]
 800132c:	3410      	adds	r4, #16
 800132e:	f10c 0c10 	add.w	ip, ip, #16
 8001332:	4574      	cmp	r4, lr
 8001334:	d1f3      	bne.n	800131e <main+0xba>
 8001336:	4663      	mov	r3, ip
 8001338:	4622      	mov	r2, r4
 800133a:	6810      	ldr	r0, [r2, #0]
 800133c:	6018      	str	r0, [r3, #0]
 800133e:	8891      	ldrh	r1, [r2, #4]
 8001340:	7992      	ldrb	r2, [r2, #6]
 8001342:	8099      	strh	r1, [r3, #4]
 8001344:	719a      	strb	r2, [r3, #6]
	Update_File(FileName, buffer);
 8001346:	f107 0310 	add.w	r3, r7, #16
 800134a:	49a9      	ldr	r1, [pc, #676]	; (80015f0 <main+0x38c>)
 800134c:	4618      	mov	r0, r3
 800134e:	f7ff fec3 	bl	80010d8 <Update_File>
	sprintf(buffer, "Labmda #1 (A/F R), Lambda #2 (A/F R),");
 8001352:	4ba7      	ldr	r3, [pc, #668]	; (80015f0 <main+0x38c>)
 8001354:	4aa9      	ldr	r2, [pc, #676]	; (80015fc <main+0x398>)
 8001356:	4614      	mov	r4, r2
 8001358:	469c      	mov	ip, r3
 800135a:	f104 0e20 	add.w	lr, r4, #32
 800135e:	4665      	mov	r5, ip
 8001360:	4626      	mov	r6, r4
 8001362:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001364:	6028      	str	r0, [r5, #0]
 8001366:	6069      	str	r1, [r5, #4]
 8001368:	60aa      	str	r2, [r5, #8]
 800136a:	60eb      	str	r3, [r5, #12]
 800136c:	3410      	adds	r4, #16
 800136e:	f10c 0c10 	add.w	ip, ip, #16
 8001372:	4574      	cmp	r4, lr
 8001374:	d1f3      	bne.n	800135e <main+0xfa>
 8001376:	4663      	mov	r3, ip
 8001378:	4622      	mov	r2, r4
 800137a:	6810      	ldr	r0, [r2, #0]
 800137c:	6018      	str	r0, [r3, #0]
 800137e:	8892      	ldrh	r2, [r2, #4]
 8001380:	809a      	strh	r2, [r3, #4]
	Update_File(FileName, buffer);
 8001382:	f107 0310 	add.w	r3, r7, #16
 8001386:	499a      	ldr	r1, [pc, #616]	; (80015f0 <main+0x38c>)
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fea5 	bl	80010d8 <Update_File>
	sprintf(buffer, "Pre Radiator Coolant Temp (C), Post Radiator Coolant Temp (C),");
 800138e:	4b98      	ldr	r3, [pc, #608]	; (80015f0 <main+0x38c>)
 8001390:	4a9b      	ldr	r2, [pc, #620]	; (8001600 <main+0x39c>)
 8001392:	4615      	mov	r5, r2
 8001394:	469c      	mov	ip, r3
 8001396:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 800139a:	4664      	mov	r4, ip
 800139c:	462e      	mov	r6, r5
 800139e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013a0:	6020      	str	r0, [r4, #0]
 80013a2:	6061      	str	r1, [r4, #4]
 80013a4:	60a2      	str	r2, [r4, #8]
 80013a6:	60e3      	str	r3, [r4, #12]
 80013a8:	3510      	adds	r5, #16
 80013aa:	f10c 0c10 	add.w	ip, ip, #16
 80013ae:	4575      	cmp	r5, lr
 80013b0:	d1f3      	bne.n	800139a <main+0x136>
 80013b2:	4664      	mov	r4, ip
 80013b4:	462b      	mov	r3, r5
 80013b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80013b8:	6020      	str	r0, [r4, #0]
 80013ba:	6061      	str	r1, [r4, #4]
 80013bc:	60a2      	str	r2, [r4, #8]
 80013be:	881a      	ldrh	r2, [r3, #0]
 80013c0:	789b      	ldrb	r3, [r3, #2]
 80013c2:	81a2      	strh	r2, [r4, #12]
 80013c4:	73a3      	strb	r3, [r4, #14]
	Update_File(FileName, buffer);
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	4989      	ldr	r1, [pc, #548]	; (80015f0 <main+0x38c>)
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff fe83 	bl	80010d8 <Update_File>
	sprintf(buffer, "Oil Pressure (PSI), Mass Air Flow Sensor (kg/s),");
 80013d2:	4b87      	ldr	r3, [pc, #540]	; (80015f0 <main+0x38c>)
 80013d4:	4a8b      	ldr	r2, [pc, #556]	; (8001604 <main+0x3a0>)
 80013d6:	4614      	mov	r4, r2
 80013d8:	469c      	mov	ip, r3
 80013da:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80013de:	4665      	mov	r5, ip
 80013e0:	4626      	mov	r6, r4
 80013e2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80013e4:	6028      	str	r0, [r5, #0]
 80013e6:	6069      	str	r1, [r5, #4]
 80013e8:	60aa      	str	r2, [r5, #8]
 80013ea:	60eb      	str	r3, [r5, #12]
 80013ec:	3410      	adds	r4, #16
 80013ee:	f10c 0c10 	add.w	ip, ip, #16
 80013f2:	4574      	cmp	r4, lr
 80013f4:	d1f3      	bne.n	80013de <main+0x17a>
 80013f6:	4663      	mov	r3, ip
 80013f8:	4622      	mov	r2, r4
 80013fa:	7812      	ldrb	r2, [r2, #0]
 80013fc:	701a      	strb	r2, [r3, #0]
	Update_File(FileName, buffer);
 80013fe:	f107 0310 	add.w	r3, r7, #16
 8001402:	497b      	ldr	r1, [pc, #492]	; (80015f0 <main+0x38c>)
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe67 	bl	80010d8 <Update_File>
	sprintf(buffer, "FR Wheel Speed (mph), FL Wheel Speed (mph),");
 800140a:	4b79      	ldr	r3, [pc, #484]	; (80015f0 <main+0x38c>)
 800140c:	4a7e      	ldr	r2, [pc, #504]	; (8001608 <main+0x3a4>)
 800140e:	4614      	mov	r4, r2
 8001410:	469c      	mov	ip, r3
 8001412:	f104 0e20 	add.w	lr, r4, #32
 8001416:	4665      	mov	r5, ip
 8001418:	4626      	mov	r6, r4
 800141a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800141c:	6028      	str	r0, [r5, #0]
 800141e:	6069      	str	r1, [r5, #4]
 8001420:	60aa      	str	r2, [r5, #8]
 8001422:	60eb      	str	r3, [r5, #12]
 8001424:	3410      	adds	r4, #16
 8001426:	f10c 0c10 	add.w	ip, ip, #16
 800142a:	4574      	cmp	r4, lr
 800142c:	d1f3      	bne.n	8001416 <main+0x1b2>
 800142e:	4665      	mov	r5, ip
 8001430:	4623      	mov	r3, r4
 8001432:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001434:	6028      	str	r0, [r5, #0]
 8001436:	6069      	str	r1, [r5, #4]
 8001438:	60aa      	str	r2, [r5, #8]
	Update_File(FileName, buffer);
 800143a:	f107 0310 	add.w	r3, r7, #16
 800143e:	496c      	ldr	r1, [pc, #432]	; (80015f0 <main+0x38c>)
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff fe49 	bl	80010d8 <Update_File>
	sprintf(buffer, "RR Wheel Speed (mph), RL Wheel Speed (mph),");
 8001446:	4b6a      	ldr	r3, [pc, #424]	; (80015f0 <main+0x38c>)
 8001448:	4a70      	ldr	r2, [pc, #448]	; (800160c <main+0x3a8>)
 800144a:	4614      	mov	r4, r2
 800144c:	469c      	mov	ip, r3
 800144e:	f104 0e20 	add.w	lr, r4, #32
 8001452:	4665      	mov	r5, ip
 8001454:	4626      	mov	r6, r4
 8001456:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001458:	6028      	str	r0, [r5, #0]
 800145a:	6069      	str	r1, [r5, #4]
 800145c:	60aa      	str	r2, [r5, #8]
 800145e:	60eb      	str	r3, [r5, #12]
 8001460:	3410      	adds	r4, #16
 8001462:	f10c 0c10 	add.w	ip, ip, #16
 8001466:	4574      	cmp	r4, lr
 8001468:	d1f3      	bne.n	8001452 <main+0x1ee>
 800146a:	4665      	mov	r5, ip
 800146c:	4623      	mov	r3, r4
 800146e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001470:	6028      	str	r0, [r5, #0]
 8001472:	6069      	str	r1, [r5, #4]
 8001474:	60aa      	str	r2, [r5, #8]
	Update_File(FileName, buffer);
 8001476:	f107 0310 	add.w	r3, r7, #16
 800147a:	495d      	ldr	r1, [pc, #372]	; (80015f0 <main+0x38c>)
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff fe2b 	bl	80010d8 <Update_File>
	sprintf(buffer, "Battery Voltage (V), Air Temp (C), Coolant Temp (C),");
 8001482:	4b5b      	ldr	r3, [pc, #364]	; (80015f0 <main+0x38c>)
 8001484:	4a62      	ldr	r2, [pc, #392]	; (8001610 <main+0x3ac>)
 8001486:	4614      	mov	r4, r2
 8001488:	469c      	mov	ip, r3
 800148a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 800148e:	4665      	mov	r5, ip
 8001490:	4626      	mov	r6, r4
 8001492:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001494:	6028      	str	r0, [r5, #0]
 8001496:	6069      	str	r1, [r5, #4]
 8001498:	60aa      	str	r2, [r5, #8]
 800149a:	60eb      	str	r3, [r5, #12]
 800149c:	3410      	adds	r4, #16
 800149e:	f10c 0c10 	add.w	ip, ip, #16
 80014a2:	4574      	cmp	r4, lr
 80014a4:	d1f3      	bne.n	800148e <main+0x22a>
 80014a6:	4663      	mov	r3, ip
 80014a8:	4622      	mov	r2, r4
 80014aa:	6810      	ldr	r0, [r2, #0]
 80014ac:	6018      	str	r0, [r3, #0]
 80014ae:	7912      	ldrb	r2, [r2, #4]
 80014b0:	711a      	strb	r2, [r3, #4]
	Update_File(FileName, buffer);
 80014b2:	f107 0310 	add.w	r3, r7, #16
 80014b6:	494e      	ldr	r1, [pc, #312]	; (80015f0 <main+0x38c>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fe0d 	bl	80010d8 <Update_File>

	//GPS
	sprintf(buffer, "Day, Month, Year, Hour, Minute, Second, gSpeed,");
 80014be:	4b4c      	ldr	r3, [pc, #304]	; (80015f0 <main+0x38c>)
 80014c0:	4a54      	ldr	r2, [pc, #336]	; (8001614 <main+0x3b0>)
 80014c2:	4614      	mov	r4, r2
 80014c4:	469c      	mov	ip, r3
 80014c6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80014ca:	4665      	mov	r5, ip
 80014cc:	4626      	mov	r6, r4
 80014ce:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80014d0:	6028      	str	r0, [r5, #0]
 80014d2:	6069      	str	r1, [r5, #4]
 80014d4:	60aa      	str	r2, [r5, #8]
 80014d6:	60eb      	str	r3, [r5, #12]
 80014d8:	3410      	adds	r4, #16
 80014da:	f10c 0c10 	add.w	ip, ip, #16
 80014de:	4574      	cmp	r4, lr
 80014e0:	d1f3      	bne.n	80014ca <main+0x266>
	Update_File(FileName, buffer);
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	4942      	ldr	r1, [pc, #264]	; (80015f0 <main+0x38c>)
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fdf5 	bl	80010d8 <Update_File>
	sprintf(buffer, "Latitude, Longitude, Height Ellipsoid, Height Sea Level,");
 80014ee:	4b40      	ldr	r3, [pc, #256]	; (80015f0 <main+0x38c>)
 80014f0:	4a49      	ldr	r2, [pc, #292]	; (8001618 <main+0x3b4>)
 80014f2:	4614      	mov	r4, r2
 80014f4:	469c      	mov	ip, r3
 80014f6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80014fa:	4665      	mov	r5, ip
 80014fc:	4626      	mov	r6, r4
 80014fe:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001500:	6028      	str	r0, [r5, #0]
 8001502:	6069      	str	r1, [r5, #4]
 8001504:	60aa      	str	r2, [r5, #8]
 8001506:	60eb      	str	r3, [r5, #12]
 8001508:	3410      	adds	r4, #16
 800150a:	f10c 0c10 	add.w	ip, ip, #16
 800150e:	4574      	cmp	r4, lr
 8001510:	d1f3      	bne.n	80014fa <main+0x296>
 8001512:	4662      	mov	r2, ip
 8001514:	4623      	mov	r3, r4
 8001516:	cb03      	ldmia	r3!, {r0, r1}
 8001518:	6010      	str	r0, [r2, #0]
 800151a:	6051      	str	r1, [r2, #4]
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	7213      	strb	r3, [r2, #8]
	Update_File(FileName, buffer);
 8001520:	f107 0310 	add.w	r3, r7, #16
 8001524:	4932      	ldr	r1, [pc, #200]	; (80015f0 <main+0x38c>)
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fdd6 	bl	80010d8 <Update_File>

	//ADC1
	sprintf(buffer, "FL Damper Sensor, FR Damper Sensor,");
 800152c:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <main+0x38c>)
 800152e:	4a3b      	ldr	r2, [pc, #236]	; (800161c <main+0x3b8>)
 8001530:	4614      	mov	r4, r2
 8001532:	469c      	mov	ip, r3
 8001534:	f104 0e20 	add.w	lr, r4, #32
 8001538:	4665      	mov	r5, ip
 800153a:	4626      	mov	r6, r4
 800153c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800153e:	6028      	str	r0, [r5, #0]
 8001540:	6069      	str	r1, [r5, #4]
 8001542:	60aa      	str	r2, [r5, #8]
 8001544:	60eb      	str	r3, [r5, #12]
 8001546:	3410      	adds	r4, #16
 8001548:	f10c 0c10 	add.w	ip, ip, #16
 800154c:	4574      	cmp	r4, lr
 800154e:	d1f3      	bne.n	8001538 <main+0x2d4>
 8001550:	4663      	mov	r3, ip
 8001552:	4622      	mov	r2, r4
 8001554:	6810      	ldr	r0, [r2, #0]
 8001556:	6018      	str	r0, [r3, #0]
	Update_File(FileName, buffer);
 8001558:	f107 0310 	add.w	r3, r7, #16
 800155c:	4924      	ldr	r1, [pc, #144]	; (80015f0 <main+0x38c>)
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fdba 	bl	80010d8 <Update_File>
	sprintf(buffer, "RL Damper Sensor, RR Damper Sensor,");
 8001564:	4b22      	ldr	r3, [pc, #136]	; (80015f0 <main+0x38c>)
 8001566:	4a2e      	ldr	r2, [pc, #184]	; (8001620 <main+0x3bc>)
 8001568:	4614      	mov	r4, r2
 800156a:	469c      	mov	ip, r3
 800156c:	f104 0e20 	add.w	lr, r4, #32
 8001570:	4665      	mov	r5, ip
 8001572:	4626      	mov	r6, r4
 8001574:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001576:	6028      	str	r0, [r5, #0]
 8001578:	6069      	str	r1, [r5, #4]
 800157a:	60aa      	str	r2, [r5, #8]
 800157c:	60eb      	str	r3, [r5, #12]
 800157e:	3410      	adds	r4, #16
 8001580:	f10c 0c10 	add.w	ip, ip, #16
 8001584:	4574      	cmp	r4, lr
 8001586:	d1f3      	bne.n	8001570 <main+0x30c>
 8001588:	4663      	mov	r3, ip
 800158a:	4622      	mov	r2, r4
 800158c:	6810      	ldr	r0, [r2, #0]
 800158e:	6018      	str	r0, [r3, #0]
	Update_File(FileName, buffer);
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4916      	ldr	r1, [pc, #88]	; (80015f0 <main+0x38c>)
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fd9e 	bl	80010d8 <Update_File>

	//ADC2
	sprintf(buffer, "Steering Sensor, Brake Sensor #1, Brake Sensor #2,");
 800159c:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <main+0x38c>)
 800159e:	4a21      	ldr	r2, [pc, #132]	; (8001624 <main+0x3c0>)
 80015a0:	4614      	mov	r4, r2
 80015a2:	469c      	mov	ip, r3
 80015a4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80015a8:	4665      	mov	r5, ip
 80015aa:	4626      	mov	r6, r4
 80015ac:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80015ae:	6028      	str	r0, [r5, #0]
 80015b0:	6069      	str	r1, [r5, #4]
 80015b2:	60aa      	str	r2, [r5, #8]
 80015b4:	60eb      	str	r3, [r5, #12]
 80015b6:	3410      	adds	r4, #16
 80015b8:	f10c 0c10 	add.w	ip, ip, #16
 80015bc:	4574      	cmp	r4, lr
 80015be:	d1f3      	bne.n	80015a8 <main+0x344>
 80015c0:	4663      	mov	r3, ip
 80015c2:	4622      	mov	r2, r4
 80015c4:	8811      	ldrh	r1, [r2, #0]
 80015c6:	7892      	ldrb	r2, [r2, #2]
 80015c8:	8019      	strh	r1, [r3, #0]
 80015ca:	709a      	strb	r2, [r3, #2]
	Update_File(FileName, buffer);
 80015cc:	f107 0310 	add.w	r3, r7, #16
 80015d0:	4907      	ldr	r1, [pc, #28]	; (80015f0 <main+0x38c>)
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fd80 	bl	80010d8 <Update_File>

	//Ask about Unused #1 and #2

	//Accelerometer & Gyroscope
	sprintf(buffer, "X, Y, Z, Roll, Pitch, Yaw\n\n");
 80015d8:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <main+0x38c>)
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <main+0x3c4>)
 80015dc:	4615      	mov	r5, r2
 80015de:	461c      	mov	r4, r3
 80015e0:	e024      	b.n	800162c <main+0x3c8>
 80015e2:	bf00      	nop
 80015e4:	0800aa5c 	.word	0x0800aa5c
 80015e8:	0800ade8 	.word	0x0800ade8
 80015ec:	0800aa60 	.word	0x0800aa60
 80015f0:	200007d8 	.word	0x200007d8
 80015f4:	0800aaa4 	.word	0x0800aaa4
 80015f8:	0800aad0 	.word	0x0800aad0
 80015fc:	0800ab08 	.word	0x0800ab08
 8001600:	0800ab30 	.word	0x0800ab30
 8001604:	0800ab70 	.word	0x0800ab70
 8001608:	0800aba4 	.word	0x0800aba4
 800160c:	0800abd0 	.word	0x0800abd0
 8001610:	0800abfc 	.word	0x0800abfc
 8001614:	0800ac34 	.word	0x0800ac34
 8001618:	0800ac64 	.word	0x0800ac64
 800161c:	0800aca0 	.word	0x0800aca0
 8001620:	0800acc4 	.word	0x0800acc4
 8001624:	0800ace8 	.word	0x0800ace8
 8001628:	0800ad1c 	.word	0x0800ad1c
 800162c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800162e:	6028      	str	r0, [r5, #0]
 8001630:	6069      	str	r1, [r5, #4]
 8001632:	60aa      	str	r2, [r5, #8]
 8001634:	60eb      	str	r3, [r5, #12]
 8001636:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001638:	6128      	str	r0, [r5, #16]
 800163a:	6169      	str	r1, [r5, #20]
 800163c:	61aa      	str	r2, [r5, #24]
	Update_File(FileName, buffer);
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	499b      	ldr	r1, [pc, #620]	; (80018b0 <main+0x64c>)
 8001644:	4618      	mov	r0, r3
 8001646:	f7ff fd47 	bl	80010d8 <Update_File>
	//versionMinor
	//versionBuild
	//TBD
	//uniqueID

	Unmount_SD("/");
 800164a:	489a      	ldr	r0, [pc, #616]	; (80018b4 <main+0x650>)
 800164c:	f7ff fc86 	bl	8000f5c <Unmount_SD>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Mount_SD("/");
 8001650:	4898      	ldr	r0, [pc, #608]	; (80018b4 <main+0x650>)
 8001652:	f7ff fc5f 	bl	8000f14 <Mount_SD>



	sprintf(buffer, "%d,%hu,%f,%f,%f,", indx, RPM, TPS, fuelOpenTime, ignitionAngle);
 8001656:	4b98      	ldr	r3, [pc, #608]	; (80018b8 <main+0x654>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	60bb      	str	r3, [r7, #8]
 800165c:	4b97      	ldr	r3, [pc, #604]	; (80018bc <main+0x658>)
 800165e:	6819      	ldr	r1, [r3, #0]
 8001660:	6079      	str	r1, [r7, #4]
 8001662:	4b97      	ldr	r3, [pc, #604]	; (80018c0 <main+0x65c>)
 8001664:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001668:	4a96      	ldr	r2, [pc, #600]	; (80018c4 <main+0x660>)
 800166a:	e9d2 1200 	ldrd	r1, r2, [r2]
 800166e:	4896      	ldr	r0, [pc, #600]	; (80018c8 <main+0x664>)
 8001670:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001674:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8001678:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800167c:	e9cd 3400 	strd	r3, r4, [sp]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	68ba      	ldr	r2, [r7, #8]
 8001684:	4991      	ldr	r1, [pc, #580]	; (80018cc <main+0x668>)
 8001686:	488a      	ldr	r0, [pc, #552]	; (80018b0 <main+0x64c>)
 8001688:	f007 fcb2 	bl	8008ff0 <siprintf>
	Update_File(FileName, buffer);
 800168c:	f107 0310 	add.w	r3, r7, #16
 8001690:	4987      	ldr	r1, [pc, #540]	; (80018b0 <main+0x64c>)
 8001692:	4618      	mov	r0, r3
 8001694:	f7ff fd20 	bl	80010d8 <Update_File>
	sprintf(buffer, "%f,%f,%i,", barometer, MAP, pressureType);
 8001698:	4b8d      	ldr	r3, [pc, #564]	; (80018d0 <main+0x66c>)
 800169a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800169e:	4b8d      	ldr	r3, [pc, #564]	; (80018d4 <main+0x670>)
 80016a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016a4:	488c      	ldr	r0, [pc, #560]	; (80018d8 <main+0x674>)
 80016a6:	6800      	ldr	r0, [r0, #0]
 80016a8:	9002      	str	r0, [sp, #8]
 80016aa:	e9cd 3400 	strd	r3, r4, [sp]
 80016ae:	4613      	mov	r3, r2
 80016b0:	460a      	mov	r2, r1
 80016b2:	498a      	ldr	r1, [pc, #552]	; (80018dc <main+0x678>)
 80016b4:	487e      	ldr	r0, [pc, #504]	; (80018b0 <main+0x64c>)
 80016b6:	f007 fc9b 	bl	8008ff0 <siprintf>
	Update_File(FileName, buffer);
 80016ba:	f107 0310 	add.w	r3, r7, #16
 80016be:	497c      	ldr	r1, [pc, #496]	; (80018b0 <main+0x64c>)
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fd09 	bl	80010d8 <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,", AnIn1, AnIn2, AnIn3, AnIn4, AnIn5, AnIn6, AnIn7, AnIn8);
 80016c6:	4b86      	ldr	r3, [pc, #536]	; (80018e0 <main+0x67c>)
 80016c8:	ed93 7b00 	vldr	d7, [r3]
 80016cc:	ed87 7b02 	vstr	d7, [r7, #8]
 80016d0:	4b84      	ldr	r3, [pc, #528]	; (80018e4 <main+0x680>)
 80016d2:	e9d3 1200 	ldrd	r1, r2, [r3]
 80016d6:	4b84      	ldr	r3, [pc, #528]	; (80018e8 <main+0x684>)
 80016d8:	e9d3 5600 	ldrd	r5, r6, [r3]
 80016dc:	4b83      	ldr	r3, [pc, #524]	; (80018ec <main+0x688>)
 80016de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80016e2:	4b83      	ldr	r3, [pc, #524]	; (80018f0 <main+0x68c>)
 80016e4:	e9d3 ab00 	ldrd	sl, fp, [r3]
 80016e8:	4b82      	ldr	r3, [pc, #520]	; (80018f4 <main+0x690>)
 80016ea:	ed93 7b00 	vldr	d7, [r3]
 80016ee:	4b82      	ldr	r3, [pc, #520]	; (80018f8 <main+0x694>)
 80016f0:	ed93 6b00 	vldr	d6, [r3]
 80016f4:	4b81      	ldr	r3, [pc, #516]	; (80018fc <main+0x698>)
 80016f6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80016fa:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80016fe:	ed8d 6b0a 	vstr	d6, [sp, #40]	; 0x28
 8001702:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001706:	e9cd ab06 	strd	sl, fp, [sp, #24]
 800170a:	e9cd 8904 	strd	r8, r9, [sp, #16]
 800170e:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8001712:	e9cd 1200 	strd	r1, r2, [sp]
 8001716:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800171a:	4979      	ldr	r1, [pc, #484]	; (8001900 <main+0x69c>)
 800171c:	4864      	ldr	r0, [pc, #400]	; (80018b0 <main+0x64c>)
 800171e:	f007 fc67 	bl	8008ff0 <siprintf>
	Update_File(FileName, buffer);
 8001722:	f107 0310 	add.w	r3, r7, #16
 8001726:	4962      	ldr	r1, [pc, #392]	; (80018b0 <main+0x64c>)
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff fcd5 	bl	80010d8 <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,%f,", freq1, freq2, freq3, freq4, batteryVoltage);
 800172e:	4b75      	ldr	r3, [pc, #468]	; (8001904 <main+0x6a0>)
 8001730:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001734:	4b74      	ldr	r3, [pc, #464]	; (8001908 <main+0x6a4>)
 8001736:	e9d3 3400 	ldrd	r3, r4, [r3]
 800173a:	4a74      	ldr	r2, [pc, #464]	; (800190c <main+0x6a8>)
 800173c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001740:	4873      	ldr	r0, [pc, #460]	; (8001910 <main+0x6ac>)
 8001742:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001746:	4873      	ldr	r0, [pc, #460]	; (8001914 <main+0x6b0>)
 8001748:	e9d0 8900 	ldrd	r8, r9, [r0]
 800174c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001750:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8001754:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001758:	e9cd 3400 	strd	r3, r4, [sp]
 800175c:	4652      	mov	r2, sl
 800175e:	465b      	mov	r3, fp
 8001760:	496d      	ldr	r1, [pc, #436]	; (8001918 <main+0x6b4>)
 8001762:	4853      	ldr	r0, [pc, #332]	; (80018b0 <main+0x64c>)
 8001764:	f007 fc44 	bl	8008ff0 <siprintf>
	Update_File(FileName, buffer);
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	4950      	ldr	r1, [pc, #320]	; (80018b0 <main+0x64c>)
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff fcb2 	bl	80010d8 <Update_File>
	sprintf(buffer, "%f,%f,", airTemp, coolantTemp);
 8001774:	4b69      	ldr	r3, [pc, #420]	; (800191c <main+0x6b8>)
 8001776:	e9d3 1200 	ldrd	r1, r2, [r3]
 800177a:	4b69      	ldr	r3, [pc, #420]	; (8001920 <main+0x6bc>)
 800177c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001780:	e9cd 3400 	strd	r3, r4, [sp]
 8001784:	4613      	mov	r3, r2
 8001786:	460a      	mov	r2, r1
 8001788:	4966      	ldr	r1, [pc, #408]	; (8001924 <main+0x6c0>)
 800178a:	4849      	ldr	r0, [pc, #292]	; (80018b0 <main+0x64c>)
 800178c:	f007 fc30 	bl	8008ff0 <siprintf>
	Update_File(FileName, buffer);
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	4946      	ldr	r1, [pc, #280]	; (80018b0 <main+0x64c>)
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff fc9e 	bl	80010d8 <Update_File>

	sprintf(buffer, "%d,%d,%d,%d,%d,%d,%d,", day, month, year, hour, minute, second, gSpeed);
 800179c:	4b62      	ldr	r3, [pc, #392]	; (8001928 <main+0x6c4>)
 800179e:	681d      	ldr	r5, [r3, #0]
 80017a0:	4b62      	ldr	r3, [pc, #392]	; (800192c <main+0x6c8>)
 80017a2:	681e      	ldr	r6, [r3, #0]
 80017a4:	4b62      	ldr	r3, [pc, #392]	; (8001930 <main+0x6cc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a62      	ldr	r2, [pc, #392]	; (8001934 <main+0x6d0>)
 80017aa:	6812      	ldr	r2, [r2, #0]
 80017ac:	4962      	ldr	r1, [pc, #392]	; (8001938 <main+0x6d4>)
 80017ae:	6809      	ldr	r1, [r1, #0]
 80017b0:	4862      	ldr	r0, [pc, #392]	; (800193c <main+0x6d8>)
 80017b2:	6800      	ldr	r0, [r0, #0]
 80017b4:	4c62      	ldr	r4, [pc, #392]	; (8001940 <main+0x6dc>)
 80017b6:	6824      	ldr	r4, [r4, #0]
 80017b8:	9404      	str	r4, [sp, #16]
 80017ba:	9003      	str	r0, [sp, #12]
 80017bc:	9102      	str	r1, [sp, #8]
 80017be:	9201      	str	r2, [sp, #4]
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	4633      	mov	r3, r6
 80017c4:	462a      	mov	r2, r5
 80017c6:	495f      	ldr	r1, [pc, #380]	; (8001944 <main+0x6e0>)
 80017c8:	4839      	ldr	r0, [pc, #228]	; (80018b0 <main+0x64c>)
 80017ca:	f007 fc11 	bl	8008ff0 <siprintf>
	Update_File(FileName, buffer);
 80017ce:	f107 0310 	add.w	r3, r7, #16
 80017d2:	4937      	ldr	r1, [pc, #220]	; (80018b0 <main+0x64c>)
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff fc7f 	bl	80010d8 <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,", latitude, longitude, height_Ellipsoid, height_SeaLvl);
 80017da:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <main+0x6e4>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fed2 	bl	8000588 <__aeabi_f2d>
 80017e4:	4682      	mov	sl, r0
 80017e6:	468b      	mov	fp, r1
 80017e8:	4b58      	ldr	r3, [pc, #352]	; (800194c <main+0x6e8>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7fe fecb 	bl	8000588 <__aeabi_f2d>
 80017f2:	4604      	mov	r4, r0
 80017f4:	460d      	mov	r5, r1
 80017f6:	4b56      	ldr	r3, [pc, #344]	; (8001950 <main+0x6ec>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fec4 	bl	8000588 <__aeabi_f2d>
 8001800:	4680      	mov	r8, r0
 8001802:	4689      	mov	r9, r1
 8001804:	4b53      	ldr	r3, [pc, #332]	; (8001954 <main+0x6f0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe febd 	bl	8000588 <__aeabi_f2d>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001816:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800181a:	e9cd 4500 	strd	r4, r5, [sp]
 800181e:	4652      	mov	r2, sl
 8001820:	465b      	mov	r3, fp
 8001822:	494d      	ldr	r1, [pc, #308]	; (8001958 <main+0x6f4>)
 8001824:	4822      	ldr	r0, [pc, #136]	; (80018b0 <main+0x64c>)
 8001826:	f007 fbe3 	bl	8008ff0 <siprintf>
	Update_File(FileName, buffer);
 800182a:	f107 0310 	add.w	r3, r7, #16
 800182e:	4920      	ldr	r1, [pc, #128]	; (80018b0 <main+0x64c>)
 8001830:	4618      	mov	r0, r3
 8001832:	f7ff fc51 	bl	80010d8 <Update_File>

	sprintf(buffer, "%d,%d,%d,%d,", damperT_Sense_FL, damperT_Sense_FR, damperT_Sense_RL, damperT_Sense_RR);
 8001836:	4b49      	ldr	r3, [pc, #292]	; (800195c <main+0x6f8>)
 8001838:	6819      	ldr	r1, [r3, #0]
 800183a:	4b49      	ldr	r3, [pc, #292]	; (8001960 <main+0x6fc>)
 800183c:	6818      	ldr	r0, [r3, #0]
 800183e:	4b49      	ldr	r3, [pc, #292]	; (8001964 <main+0x700>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a49      	ldr	r2, [pc, #292]	; (8001968 <main+0x704>)
 8001844:	6812      	ldr	r2, [r2, #0]
 8001846:	9201      	str	r2, [sp, #4]
 8001848:	9300      	str	r3, [sp, #0]
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	4947      	ldr	r1, [pc, #284]	; (800196c <main+0x708>)
 8001850:	4817      	ldr	r0, [pc, #92]	; (80018b0 <main+0x64c>)
 8001852:	f007 fbcd 	bl	8008ff0 <siprintf>
	Update_File(FileName, buffer);
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	4915      	ldr	r1, [pc, #84]	; (80018b0 <main+0x64c>)
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fc3b 	bl	80010d8 <Update_File>

	sprintf(buffer, "%d,%d,%d,", steeringA_Sense, brakeP_Sense1, brakeP_Sense2);
 8001862:	4b43      	ldr	r3, [pc, #268]	; (8001970 <main+0x70c>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b43      	ldr	r3, [pc, #268]	; (8001974 <main+0x710>)
 8001868:	6819      	ldr	r1, [r3, #0]
 800186a:	4b43      	ldr	r3, [pc, #268]	; (8001978 <main+0x714>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	460b      	mov	r3, r1
 8001872:	4942      	ldr	r1, [pc, #264]	; (800197c <main+0x718>)
 8001874:	480e      	ldr	r0, [pc, #56]	; (80018b0 <main+0x64c>)
 8001876:	f007 fbbb 	bl	8008ff0 <siprintf>
	Update_File(FileName, buffer);
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	490c      	ldr	r1, [pc, #48]	; (80018b0 <main+0x64c>)
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fc29 	bl	80010d8 <Update_File>

	sprintf(buffer, "%f,%f,%f,%f,%f,%f", x_LS, y_LS, z_LS, roll_LS, pitch_LS, yaw_LS);
 8001886:	4b3e      	ldr	r3, [pc, #248]	; (8001980 <main+0x71c>)
 8001888:	ed93 7b00 	vldr	d7, [r3]
 800188c:	ed87 7b02 	vstr	d7, [r7, #8]
 8001890:	4b3c      	ldr	r3, [pc, #240]	; (8001984 <main+0x720>)
 8001892:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001896:	4a3c      	ldr	r2, [pc, #240]	; (8001988 <main+0x724>)
 8001898:	e9d2 1200 	ldrd	r1, r2, [r2]
 800189c:	483b      	ldr	r0, [pc, #236]	; (800198c <main+0x728>)
 800189e:	e9d0 5600 	ldrd	r5, r6, [r0]
 80018a2:	483b      	ldr	r0, [pc, #236]	; (8001990 <main+0x72c>)
 80018a4:	e9d0 8900 	ldrd	r8, r9, [r0]
 80018a8:	483a      	ldr	r0, [pc, #232]	; (8001994 <main+0x730>)
 80018aa:	e9d0 ab00 	ldrd	sl, fp, [r0]
 80018ae:	e073      	b.n	8001998 <main+0x734>
 80018b0:	200007d8 	.word	0x200007d8
 80018b4:	0800aa5c 	.word	0x0800aa5c
 80018b8:	200002c4 	.word	0x200002c4
 80018bc:	200001fc 	.word	0x200001fc
 80018c0:	20000200 	.word	0x20000200
 80018c4:	20000208 	.word	0x20000208
 80018c8:	20000210 	.word	0x20000210
 80018cc:	0800ad38 	.word	0x0800ad38
 80018d0:	20000218 	.word	0x20000218
 80018d4:	20000220 	.word	0x20000220
 80018d8:	20000228 	.word	0x20000228
 80018dc:	0800ad4c 	.word	0x0800ad4c
 80018e0:	20000230 	.word	0x20000230
 80018e4:	20000238 	.word	0x20000238
 80018e8:	20000240 	.word	0x20000240
 80018ec:	20000248 	.word	0x20000248
 80018f0:	20000250 	.word	0x20000250
 80018f4:	20000258 	.word	0x20000258
 80018f8:	20000260 	.word	0x20000260
 80018fc:	20000268 	.word	0x20000268
 8001900:	0800ad58 	.word	0x0800ad58
 8001904:	20000270 	.word	0x20000270
 8001908:	20000278 	.word	0x20000278
 800190c:	20000280 	.word	0x20000280
 8001910:	20000288 	.word	0x20000288
 8001914:	20000290 	.word	0x20000290
 8001918:	0800ad74 	.word	0x0800ad74
 800191c:	20000298 	.word	0x20000298
 8001920:	200002a0 	.word	0x200002a0
 8001924:	0800ad84 	.word	0x0800ad84
 8001928:	20000918 	.word	0x20000918
 800192c:	200007c8 	.word	0x200007c8
 8001930:	2000090c 	.word	0x2000090c
 8001934:	20000864 	.word	0x20000864
 8001938:	200007d4 	.word	0x200007d4
 800193c:	200007cc 	.word	0x200007cc
 8001940:	200007d0 	.word	0x200007d0
 8001944:	0800ad8c 	.word	0x0800ad8c
 8001948:	20000914 	.word	0x20000914
 800194c:	20000868 	.word	0x20000868
 8001950:	200007ac 	.word	0x200007ac
 8001954:	2000083c 	.word	0x2000083c
 8001958:	0800ada4 	.word	0x0800ada4
 800195c:	200002a8 	.word	0x200002a8
 8001960:	200002ac 	.word	0x200002ac
 8001964:	200002b0 	.word	0x200002b0
 8001968:	200002b4 	.word	0x200002b4
 800196c:	0800adb4 	.word	0x0800adb4
 8001970:	200002b8 	.word	0x200002b8
 8001974:	200002bc 	.word	0x200002bc
 8001978:	200002c0 	.word	0x200002c0
 800197c:	0800adc4 	.word	0x0800adc4
 8001980:	20000870 	.word	0x20000870
 8001984:	20000900 	.word	0x20000900
 8001988:	200007a0 	.word	0x200007a0
 800198c:	20000920 	.word	0x20000920
 8001990:	20000840 	.word	0x20000840
 8001994:	20000858 	.word	0x20000858
 8001998:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800199c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80019a0:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80019a4:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80019a8:	e9cd 3400 	strd	r3, r4, [sp]
 80019ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019b0:	4911      	ldr	r1, [pc, #68]	; (80019f8 <main+0x794>)
 80019b2:	4812      	ldr	r0, [pc, #72]	; (80019fc <main+0x798>)
 80019b4:	f007 fb1c 	bl	8008ff0 <siprintf>
	Update_File(FileName, buffer);
 80019b8:	f107 0310 	add.w	r3, r7, #16
 80019bc:	490f      	ldr	r1, [pc, #60]	; (80019fc <main+0x798>)
 80019be:	4618      	mov	r0, r3
 80019c0:	f7ff fb8a 	bl	80010d8 <Update_File>

	sprintf(buffer, "\n\n");
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <main+0x798>)
 80019c6:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <main+0x79c>)
 80019c8:	8811      	ldrh	r1, [r2, #0]
 80019ca:	7892      	ldrb	r2, [r2, #2]
 80019cc:	8019      	strh	r1, [r3, #0]
 80019ce:	709a      	strb	r2, [r3, #2]
	Update_File(FileName, buffer);
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4909      	ldr	r1, [pc, #36]	; (80019fc <main+0x798>)
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7ff fb7e 	bl	80010d8 <Update_File>



	Unmount_SD("/");
 80019dc:	4809      	ldr	r0, [pc, #36]	; (8001a04 <main+0x7a0>)
 80019de:	f7ff fabd 	bl	8000f5c <Unmount_SD>


	indx++;
 80019e2:	4b09      	ldr	r3, [pc, #36]	; (8001a08 <main+0x7a4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	3301      	adds	r3, #1
 80019e8:	4a07      	ldr	r2, [pc, #28]	; (8001a08 <main+0x7a4>)
 80019ea:	6013      	str	r3, [r2, #0]

	HAL_Delay(2000);
 80019ec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80019f0:	f000 fb58 	bl	80020a4 <HAL_Delay>
	Mount_SD("/");
 80019f4:	e62c      	b.n	8001650 <main+0x3ec>
 80019f6:	bf00      	nop
 80019f8:	0800add0 	.word	0x0800add0
 80019fc:	200007d8 	.word	0x200007d8
 8001a00:	0800ade4 	.word	0x0800ade4
 8001a04:	0800aa5c 	.word	0x0800aa5c
 8001a08:	200002c4 	.word	0x200002c4

08001a0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b0ac      	sub	sp, #176	; 0xb0
 8001a10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001a16:	2234      	movs	r2, #52	; 0x34
 8001a18:	2100      	movs	r1, #0
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f006 fdcc 	bl	80085b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	225c      	movs	r2, #92	; 0x5c
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f006 fdbd 	bl	80085b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60bb      	str	r3, [r7, #8]
 8001a42:	4b37      	ldr	r3, [pc, #220]	; (8001b20 <SystemClock_Config+0x114>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	4a36      	ldr	r2, [pc, #216]	; (8001b20 <SystemClock_Config+0x114>)
 8001a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4e:	4b34      	ldr	r3, [pc, #208]	; (8001b20 <SystemClock_Config+0x114>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a56:	60bb      	str	r3, [r7, #8]
 8001a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
 8001a5e:	4b31      	ldr	r3, [pc, #196]	; (8001b24 <SystemClock_Config+0x118>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001a66:	4a2f      	ldr	r2, [pc, #188]	; (8001b24 <SystemClock_Config+0x118>)
 8001a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a6c:	6013      	str	r3, [r2, #0]
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	; (8001b24 <SystemClock_Config+0x118>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a76:	607b      	str	r3, [r7, #4]
 8001a78:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a84:	2310      	movs	r3, #16
 8001a86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a90:	2300      	movs	r3, #0
 8001a92:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a96:	2308      	movs	r3, #8
 8001a98:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001a9c:	2332      	movs	r3, #50	; 0x32
 8001a9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001aae:	2302      	movs	r3, #2
 8001ab0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ab4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f001 fb8b 	bl	80031d4 <HAL_RCC_OscConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8001ac4:	f000 f8f8 	bl	8001cb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ac8:	230f      	movs	r3, #15
 8001aca:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001acc:	2302      	movs	r3, #2
 8001ace:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ad4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001ade:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 fd91 	bl	800260c <HAL_RCC_ClockConfig>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d001      	beq.n	8001af4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001af0:	f000 f8e2 	bl	8001cb8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001af4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001af8:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001afa:	2300      	movs	r3, #0
 8001afc:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001afe:	2300      	movs	r3, #0
 8001b00:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b02:	f107 030c 	add.w	r3, r7, #12
 8001b06:	4618      	mov	r0, r3
 8001b08:	f000 fe9a 	bl	8002840 <HAL_RCCEx_PeriphCLKConfig>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8001b12:	f000 f8d1 	bl	8001cb8 <Error_Handler>
  }
}
 8001b16:	bf00      	nop
 8001b18:	37b0      	adds	r7, #176	; 0xb0
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40007000 	.word	0x40007000

08001b28 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <MX_SDIO_SD_Init+0x38>)
 8001b2e:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <MX_SDIO_SD_Init+0x3c>)
 8001b30:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001b32:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <MX_SDIO_SD_Init+0x38>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <MX_SDIO_SD_Init+0x38>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001b3e:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <MX_SDIO_SD_Init+0x38>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001b44:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <MX_SDIO_SD_Init+0x38>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001b4a:	4b05      	ldr	r3, [pc, #20]	; (8001b60 <MX_SDIO_SD_Init+0x38>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 16;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <MX_SDIO_SD_Init+0x38>)
 8001b52:	2210      	movs	r2, #16
 8001b54:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001b56:	bf00      	nop
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	20000878 	.word	0x20000878
 8001b64:	40012c00 	.word	0x40012c00

08001b68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b6c:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <MX_USART2_UART_Init+0x4c>)
 8001b6e:	4a12      	ldr	r2, [pc, #72]	; (8001bb8 <MX_USART2_UART_Init+0x50>)
 8001b70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <MX_USART2_UART_Init+0x4c>)
 8001b74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b7a:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <MX_USART2_UART_Init+0x4c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b80:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <MX_USART2_UART_Init+0x4c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b86:	4b0b      	ldr	r3, [pc, #44]	; (8001bb4 <MX_USART2_UART_Init+0x4c>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b8c:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <MX_USART2_UART_Init+0x4c>)
 8001b8e:	220c      	movs	r2, #12
 8001b90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <MX_USART2_UART_Init+0x4c>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b98:	4b06      	ldr	r3, [pc, #24]	; (8001bb4 <MX_USART2_UART_Init+0x4c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b9e:	4805      	ldr	r0, [pc, #20]	; (8001bb4 <MX_USART2_UART_Init+0x4c>)
 8001ba0:	f002 feea 	bl	8004978 <HAL_UART_Init>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001baa:	f000 f885 	bl	8001cb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bae:	bf00      	nop
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000928 	.word	0x20000928
 8001bb8:	40004400 	.word	0x40004400

08001bbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b08a      	sub	sp, #40	; 0x28
 8001bc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	4b34      	ldr	r3, [pc, #208]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a33      	ldr	r2, [pc, #204]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001bdc:	f043 0304 	orr.w	r3, r3, #4
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b31      	ldr	r3, [pc, #196]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0304 	and.w	r3, r3, #4
 8001bea:	613b      	str	r3, [r7, #16]
 8001bec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	4b2d      	ldr	r3, [pc, #180]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a2c      	ldr	r2, [pc, #176]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001bf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b2a      	ldr	r3, [pc, #168]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c06:	60fb      	str	r3, [r7, #12]
 8001c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	4b26      	ldr	r3, [pc, #152]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a25      	ldr	r2, [pc, #148]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b23      	ldr	r3, [pc, #140]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	60bb      	str	r3, [r7, #8]
 8001c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c26:	2300      	movs	r3, #0
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	4b1f      	ldr	r3, [pc, #124]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001c30:	f043 0308 	orr.w	r3, r3, #8
 8001c34:	6313      	str	r3, [r2, #48]	; 0x30
 8001c36:	4b1c      	ldr	r3, [pc, #112]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f003 0308 	and.w	r3, r3, #8
 8001c3e:	607b      	str	r3, [r7, #4]
 8001c40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	603b      	str	r3, [r7, #0]
 8001c46:	4b18      	ldr	r3, [pc, #96]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	4a17      	ldr	r2, [pc, #92]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6313      	str	r3, [r2, #48]	; 0x30
 8001c52:	4b15      	ldr	r3, [pc, #84]	; (8001ca8 <MX_GPIO_Init+0xec>)
 8001c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	603b      	str	r3, [r7, #0]
 8001c5c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2120      	movs	r1, #32
 8001c62:	4812      	ldr	r0, [pc, #72]	; (8001cac <MX_GPIO_Init+0xf0>)
 8001c64:	f000 fcb8 	bl	80025d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <MX_GPIO_Init+0xf4>)
 8001c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c76:	f107 0314 	add.w	r3, r7, #20
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	480d      	ldr	r0, [pc, #52]	; (8001cb4 <MX_GPIO_Init+0xf8>)
 8001c7e:	f000 fb19 	bl	80022b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c82:	2320      	movs	r3, #32
 8001c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c86:	2301      	movs	r3, #1
 8001c88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c92:	f107 0314 	add.w	r3, r7, #20
 8001c96:	4619      	mov	r1, r3
 8001c98:	4804      	ldr	r0, [pc, #16]	; (8001cac <MX_GPIO_Init+0xf0>)
 8001c9a:	f000 fb0b 	bl	80022b4 <HAL_GPIO_Init>

}
 8001c9e:	bf00      	nop
 8001ca0:	3728      	adds	r7, #40	; 0x28
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40020000 	.word	0x40020000
 8001cb0:	10210000 	.word	0x10210000
 8001cb4:	40020800 	.word	0x40020800

08001cb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cbc:	bf00      	nop
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
	...

08001cc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cce:	2300      	movs	r3, #0
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <HAL_MspInit+0x4c>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a0f      	ldr	r2, [pc, #60]	; (8001d14 <HAL_MspInit+0x4c>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <HAL_MspInit+0x4c>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce6:	607b      	str	r3, [r7, #4]
 8001ce8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	603b      	str	r3, [r7, #0]
 8001cee:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <HAL_MspInit+0x4c>)
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf2:	4a08      	ldr	r2, [pc, #32]	; (8001d14 <HAL_MspInit+0x4c>)
 8001cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfa:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <HAL_MspInit+0x4c>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	603b      	str	r3, [r7, #0]
 8001d04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d06:	2007      	movs	r0, #7
 8001d08:	f000 faa0 	bl	800224c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	3708      	adds	r7, #8
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800

08001d18 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b08a      	sub	sp, #40	; 0x28
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
 8001d2c:	60da      	str	r2, [r3, #12]
 8001d2e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a28      	ldr	r2, [pc, #160]	; (8001dd8 <HAL_SD_MspInit+0xc0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d14a      	bne.n	8001dd0 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	613b      	str	r3, [r7, #16]
 8001d3e:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_SD_MspInit+0xc4>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	4a26      	ldr	r2, [pc, #152]	; (8001ddc <HAL_SD_MspInit+0xc4>)
 8001d44:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d48:	6453      	str	r3, [r2, #68]	; 0x44
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <HAL_SD_MspInit+0xc4>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d52:	613b      	str	r3, [r7, #16]
 8001d54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	60fb      	str	r3, [r7, #12]
 8001d5a:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_SD_MspInit+0xc4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	4a1f      	ldr	r2, [pc, #124]	; (8001ddc <HAL_SD_MspInit+0xc4>)
 8001d60:	f043 0304 	orr.w	r3, r3, #4
 8001d64:	6313      	str	r3, [r2, #48]	; 0x30
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_SD_MspInit+0xc4>)
 8001d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60bb      	str	r3, [r7, #8]
 8001d76:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_SD_MspInit+0xc4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	4a18      	ldr	r2, [pc, #96]	; (8001ddc <HAL_SD_MspInit+0xc4>)
 8001d7c:	f043 0308 	orr.w	r3, r3, #8
 8001d80:	6313      	str	r3, [r2, #48]	; 0x30
 8001d82:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <HAL_SD_MspInit+0xc4>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d86:	f003 0308 	and.w	r3, r3, #8
 8001d8a:	60bb      	str	r3, [r7, #8]
 8001d8c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001d8e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001d92:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001da0:	230c      	movs	r3, #12
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	480d      	ldr	r0, [pc, #52]	; (8001de0 <HAL_SD_MspInit+0xc8>)
 8001dac:	f000 fa82 	bl	80022b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001db0:	2304      	movs	r3, #4
 8001db2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db4:	2302      	movs	r3, #2
 8001db6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001dc0:	230c      	movs	r3, #12
 8001dc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc4:	f107 0314 	add.w	r3, r7, #20
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <HAL_SD_MspInit+0xcc>)
 8001dcc:	f000 fa72 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8001dd0:	bf00      	nop
 8001dd2:	3728      	adds	r7, #40	; 0x28
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40012c00 	.word	0x40012c00
 8001ddc:	40023800 	.word	0x40023800
 8001de0:	40020800 	.word	0x40020800
 8001de4:	40020c00 	.word	0x40020c00

08001de8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b08a      	sub	sp, #40	; 0x28
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df0:	f107 0314 	add.w	r3, r7, #20
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <HAL_UART_MspInit+0x84>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d12b      	bne.n	8001e62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	613b      	str	r3, [r7, #16]
 8001e0e:	4b18      	ldr	r3, [pc, #96]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e12:	4a17      	ldr	r2, [pc, #92]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e18:	6413      	str	r3, [r2, #64]	; 0x40
 8001e1a:	4b15      	ldr	r3, [pc, #84]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e22:	613b      	str	r3, [r7, #16]
 8001e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a10      	ldr	r2, [pc, #64]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b0e      	ldr	r3, [pc, #56]	; (8001e70 <HAL_UART_MspInit+0x88>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
 8001e40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e42:	230c      	movs	r3, #12
 8001e44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	2302      	movs	r3, #2
 8001e48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e52:	2307      	movs	r3, #7
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e56:	f107 0314 	add.w	r3, r7, #20
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4805      	ldr	r0, [pc, #20]	; (8001e74 <HAL_UART_MspInit+0x8c>)
 8001e5e:	f000 fa29 	bl	80022b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e62:	bf00      	nop
 8001e64:	3728      	adds	r7, #40	; 0x28
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40004400 	.word	0x40004400
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40020000 	.word	0x40020000

08001e78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e8a:	e7fe      	b.n	8001e8a <HardFault_Handler+0x4>

08001e8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e90:	e7fe      	b.n	8001e90 <MemManage_Handler+0x4>

08001e92 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e92:	b480      	push	{r7}
 8001e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e96:	e7fe      	b.n	8001e96 <BusFault_Handler+0x4>

08001e98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e9c:	e7fe      	b.n	8001e9c <UsageFault_Handler+0x4>

08001e9e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e9e:	b480      	push	{r7}
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ecc:	f000 f8ca 	bl	8002064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ed0:	bf00      	nop
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <_sbrk+0x5c>)
 8001ede:	4b15      	ldr	r3, [pc, #84]	; (8001f34 <_sbrk+0x60>)
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee8:	4b13      	ldr	r3, [pc, #76]	; (8001f38 <_sbrk+0x64>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d102      	bne.n	8001ef6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <_sbrk+0x64>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <_sbrk+0x68>)
 8001ef4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <_sbrk+0x64>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	693a      	ldr	r2, [r7, #16]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d207      	bcs.n	8001f14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f04:	f006 fb1e 	bl	8008544 <__errno>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	230c      	movs	r3, #12
 8001f0c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f12:	e009      	b.n	8001f28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f14:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <_sbrk+0x64>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4413      	add	r3, r2
 8001f22:	4a05      	ldr	r2, [pc, #20]	; (8001f38 <_sbrk+0x64>)
 8001f24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f26:	68fb      	ldr	r3, [r7, #12]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	20020000 	.word	0x20020000
 8001f34:	00000400 	.word	0x00000400
 8001f38:	200002c8 	.word	0x200002c8
 8001f3c:	20000e08 	.word	0x20000e08

08001f40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <SystemInit+0x28>)
 8001f46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4a:	4a07      	ldr	r2, [pc, #28]	; (8001f68 <SystemInit+0x28>)
 8001f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f54:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <SystemInit+0x28>)
 8001f56:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f5a:	609a      	str	r2, [r3, #8]
#endif
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	e000ed00 	.word	0xe000ed00

08001f6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001f70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001f72:	e003      	b.n	8001f7c <LoopCopyDataInit>

08001f74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001f76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001f78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001f7a:	3104      	adds	r1, #4

08001f7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001f7c:	480b      	ldr	r0, [pc, #44]	; (8001fac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	; (8001fb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f84:	d3f6      	bcc.n	8001f74 <CopyDataInit>
  ldr  r2, =_sbss
 8001f86:	4a0b      	ldr	r2, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f88:	e002      	b.n	8001f90 <LoopFillZerobss>

08001f8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f8c:	f842 3b04 	str.w	r3, [r2], #4

08001f90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f90:	4b09      	ldr	r3, [pc, #36]	; (8001fb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f94:	d3f9      	bcc.n	8001f8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f96:	f7ff ffd3 	bl	8001f40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f9a:	f006 fad9 	bl	8008550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9e:	f7ff f961 	bl	8001264 <main>
  bx  lr    
 8001fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fa4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001fa8:	0800b158 	.word	0x0800b158
  ldr  r0, =_sdata
 8001fac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001fb0:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001fb4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001fb8:	20000e08 	.word	0x20000e08

08001fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fbc:	e7fe      	b.n	8001fbc <ADC_IRQHandler>
	...

08001fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_Init+0x40>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <HAL_Init+0x40>)
 8001fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_Init+0x40>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <HAL_Init+0x40>)
 8001fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_Init+0x40>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a07      	ldr	r2, [pc, #28]	; (8002000 <HAL_Init+0x40>)
 8001fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe8:	2003      	movs	r0, #3
 8001fea:	f000 f92f 	bl	800224c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fee:	2000      	movs	r0, #0
 8001ff0:	f000 f808 	bl	8002004 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff4:	f7ff fe68 	bl	8001cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023c00 	.word	0x40023c00

08002004 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_InitTick+0x54>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	4b12      	ldr	r3, [pc, #72]	; (800205c <HAL_InitTick+0x58>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4619      	mov	r1, r3
 8002016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800201a:	fbb3 f3f1 	udiv	r3, r3, r1
 800201e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f939 	bl	800229a <HAL_SYSTICK_Config>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
 8002030:	e00e      	b.n	8002050 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2b0f      	cmp	r3, #15
 8002036:	d80a      	bhi.n	800204e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002038:	2200      	movs	r2, #0
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	f04f 30ff 	mov.w	r0, #4294967295
 8002040:	f000 f90f 	bl	8002262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002044:	4a06      	ldr	r2, [pc, #24]	; (8002060 <HAL_InitTick+0x5c>)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800204a:	2300      	movs	r3, #0
 800204c:	e000      	b.n	8002050 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
}
 8002050:	4618      	mov	r0, r3
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20000000 	.word	0x20000000
 800205c:	20000008 	.word	0x20000008
 8002060:	20000004 	.word	0x20000004

08002064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002068:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_IncTick+0x20>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	461a      	mov	r2, r3
 800206e:	4b06      	ldr	r3, [pc, #24]	; (8002088 <HAL_IncTick+0x24>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4413      	add	r3, r2
 8002074:	4a04      	ldr	r2, [pc, #16]	; (8002088 <HAL_IncTick+0x24>)
 8002076:	6013      	str	r3, [r2, #0]
}
 8002078:	bf00      	nop
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	20000008 	.word	0x20000008
 8002088:	20000998 	.word	0x20000998

0800208c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return uwTick;
 8002090:	4b03      	ldr	r3, [pc, #12]	; (80020a0 <HAL_GetTick+0x14>)
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	20000998 	.word	0x20000998

080020a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ac:	f7ff ffee 	bl	800208c <HAL_GetTick>
 80020b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020bc:	d005      	beq.n	80020ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_Delay+0x40>)
 80020c0:	781b      	ldrb	r3, [r3, #0]
 80020c2:	461a      	mov	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	4413      	add	r3, r2
 80020c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020ca:	bf00      	nop
 80020cc:	f7ff ffde 	bl	800208c <HAL_GetTick>
 80020d0:	4602      	mov	r2, r0
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d8f7      	bhi.n	80020cc <HAL_Delay+0x28>
  {
  }
}
 80020dc:	bf00      	nop
 80020de:	3710      	adds	r7, #16
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	20000008 	.word	0x20000008

080020e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <__NVIC_SetPriorityGrouping+0x44>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020fe:	68ba      	ldr	r2, [r7, #8]
 8002100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002104:	4013      	ands	r3, r2
 8002106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800211a:	4a04      	ldr	r2, [pc, #16]	; (800212c <__NVIC_SetPriorityGrouping+0x44>)
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	60d3      	str	r3, [r2, #12]
}
 8002120:	bf00      	nop
 8002122:	3714      	adds	r7, #20
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002134:	4b04      	ldr	r3, [pc, #16]	; (8002148 <__NVIC_GetPriorityGrouping+0x18>)
 8002136:	68db      	ldr	r3, [r3, #12]
 8002138:	0a1b      	lsrs	r3, r3, #8
 800213a:	f003 0307 	and.w	r3, r3, #7
}
 800213e:	4618      	mov	r0, r3
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr
 8002148:	e000ed00 	.word	0xe000ed00

0800214c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	4603      	mov	r3, r0
 8002154:	6039      	str	r1, [r7, #0]
 8002156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800215c:	2b00      	cmp	r3, #0
 800215e:	db0a      	blt.n	8002176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	b2da      	uxtb	r2, r3
 8002164:	490c      	ldr	r1, [pc, #48]	; (8002198 <__NVIC_SetPriority+0x4c>)
 8002166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216a:	0112      	lsls	r2, r2, #4
 800216c:	b2d2      	uxtb	r2, r2
 800216e:	440b      	add	r3, r1
 8002170:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002174:	e00a      	b.n	800218c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	b2da      	uxtb	r2, r3
 800217a:	4908      	ldr	r1, [pc, #32]	; (800219c <__NVIC_SetPriority+0x50>)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	f003 030f 	and.w	r3, r3, #15
 8002182:	3b04      	subs	r3, #4
 8002184:	0112      	lsls	r2, r2, #4
 8002186:	b2d2      	uxtb	r2, r2
 8002188:	440b      	add	r3, r1
 800218a:	761a      	strb	r2, [r3, #24]
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	e000e100 	.word	0xe000e100
 800219c:	e000ed00 	.word	0xe000ed00

080021a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b089      	sub	sp, #36	; 0x24
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f003 0307 	and.w	r3, r3, #7
 80021b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	f1c3 0307 	rsb	r3, r3, #7
 80021ba:	2b04      	cmp	r3, #4
 80021bc:	bf28      	it	cs
 80021be:	2304      	movcs	r3, #4
 80021c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3304      	adds	r3, #4
 80021c6:	2b06      	cmp	r3, #6
 80021c8:	d902      	bls.n	80021d0 <NVIC_EncodePriority+0x30>
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	3b03      	subs	r3, #3
 80021ce:	e000      	b.n	80021d2 <NVIC_EncodePriority+0x32>
 80021d0:	2300      	movs	r3, #0
 80021d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021d4:	f04f 32ff 	mov.w	r2, #4294967295
 80021d8:	69bb      	ldr	r3, [r7, #24]
 80021da:	fa02 f303 	lsl.w	r3, r2, r3
 80021de:	43da      	mvns	r2, r3
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	401a      	ands	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ec:	697b      	ldr	r3, [r7, #20]
 80021ee:	fa01 f303 	lsl.w	r3, r1, r3
 80021f2:	43d9      	mvns	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f8:	4313      	orrs	r3, r2
         );
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3724      	adds	r7, #36	; 0x24
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
	...

08002208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b082      	sub	sp, #8
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3b01      	subs	r3, #1
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002218:	d301      	bcc.n	800221e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800221a:	2301      	movs	r3, #1
 800221c:	e00f      	b.n	800223e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800221e:	4a0a      	ldr	r2, [pc, #40]	; (8002248 <SysTick_Config+0x40>)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	3b01      	subs	r3, #1
 8002224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002226:	210f      	movs	r1, #15
 8002228:	f04f 30ff 	mov.w	r0, #4294967295
 800222c:	f7ff ff8e 	bl	800214c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <SysTick_Config+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002236:	4b04      	ldr	r3, [pc, #16]	; (8002248 <SysTick_Config+0x40>)
 8002238:	2207      	movs	r2, #7
 800223a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7ff ff47 	bl	80020e8 <__NVIC_SetPriorityGrouping>
}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}

08002262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002262:	b580      	push	{r7, lr}
 8002264:	b086      	sub	sp, #24
 8002266:	af00      	add	r7, sp, #0
 8002268:	4603      	mov	r3, r0
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002270:	2300      	movs	r3, #0
 8002272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002274:	f7ff ff5c 	bl	8002130 <__NVIC_GetPriorityGrouping>
 8002278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	68b9      	ldr	r1, [r7, #8]
 800227e:	6978      	ldr	r0, [r7, #20]
 8002280:	f7ff ff8e 	bl	80021a0 <NVIC_EncodePriority>
 8002284:	4602      	mov	r2, r0
 8002286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800228a:	4611      	mov	r1, r2
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff ff5d 	bl	800214c <__NVIC_SetPriority>
}
 8002292:	bf00      	nop
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b082      	sub	sp, #8
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	f7ff ffb0 	bl	8002208 <SysTick_Config>
 80022a8:	4603      	mov	r3, r0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
	...

080022b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b089      	sub	sp, #36	; 0x24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
 80022ce:	e165      	b.n	800259c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022d0:	2201      	movs	r2, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	697a      	ldr	r2, [r7, #20]
 80022e0:	4013      	ands	r3, r2
 80022e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	f040 8154 	bne.w	8002596 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d00b      	beq.n	800230e <HAL_GPIO_Init+0x5a>
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d007      	beq.n	800230e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002302:	2b11      	cmp	r3, #17
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b12      	cmp	r3, #18
 800230c:	d130      	bne.n	8002370 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	2203      	movs	r2, #3
 800231a:	fa02 f303 	lsl.w	r3, r2, r3
 800231e:	43db      	mvns	r3, r3
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	4013      	ands	r3, r2
 8002324:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	fa02 f303 	lsl.w	r3, r2, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002344:	2201      	movs	r2, #1
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	091b      	lsrs	r3, r3, #4
 800235a:	f003 0201 	and.w	r2, r3, #1
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0xfc>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b12      	cmp	r3, #18
 80023ae:	d123      	bne.n	80023f8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	08da      	lsrs	r2, r3, #3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	3208      	adds	r2, #8
 80023b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	f003 0307 	and.w	r3, r3, #7
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	220f      	movs	r2, #15
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4013      	ands	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	691a      	ldr	r2, [r3, #16]
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	08da      	lsrs	r2, r3, #3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3208      	adds	r2, #8
 80023f2:	69b9      	ldr	r1, [r7, #24]
 80023f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f003 0203 	and.w	r2, r3, #3
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80ae 	beq.w	8002596 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b5c      	ldr	r3, [pc, #368]	; (80025b0 <HAL_GPIO_Init+0x2fc>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a5b      	ldr	r2, [pc, #364]	; (80025b0 <HAL_GPIO_Init+0x2fc>)
 8002444:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b59      	ldr	r3, [pc, #356]	; (80025b0 <HAL_GPIO_Init+0x2fc>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002456:	4a57      	ldr	r2, [pc, #348]	; (80025b4 <HAL_GPIO_Init+0x300>)
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	089b      	lsrs	r3, r3, #2
 800245c:	3302      	adds	r3, #2
 800245e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002462:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	220f      	movs	r2, #15
 800246e:	fa02 f303 	lsl.w	r3, r2, r3
 8002472:	43db      	mvns	r3, r3
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	4013      	ands	r3, r2
 8002478:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	4a4e      	ldr	r2, [pc, #312]	; (80025b8 <HAL_GPIO_Init+0x304>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d025      	beq.n	80024ce <HAL_GPIO_Init+0x21a>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4d      	ldr	r2, [pc, #308]	; (80025bc <HAL_GPIO_Init+0x308>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d01f      	beq.n	80024ca <HAL_GPIO_Init+0x216>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4c      	ldr	r2, [pc, #304]	; (80025c0 <HAL_GPIO_Init+0x30c>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d019      	beq.n	80024c6 <HAL_GPIO_Init+0x212>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4b      	ldr	r2, [pc, #300]	; (80025c4 <HAL_GPIO_Init+0x310>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d013      	beq.n	80024c2 <HAL_GPIO_Init+0x20e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4a      	ldr	r2, [pc, #296]	; (80025c8 <HAL_GPIO_Init+0x314>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d00d      	beq.n	80024be <HAL_GPIO_Init+0x20a>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a49      	ldr	r2, [pc, #292]	; (80025cc <HAL_GPIO_Init+0x318>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d007      	beq.n	80024ba <HAL_GPIO_Init+0x206>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a48      	ldr	r2, [pc, #288]	; (80025d0 <HAL_GPIO_Init+0x31c>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d101      	bne.n	80024b6 <HAL_GPIO_Init+0x202>
 80024b2:	2306      	movs	r3, #6
 80024b4:	e00c      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024b6:	2307      	movs	r3, #7
 80024b8:	e00a      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024ba:	2305      	movs	r3, #5
 80024bc:	e008      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024be:	2304      	movs	r3, #4
 80024c0:	e006      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024c2:	2303      	movs	r3, #3
 80024c4:	e004      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024c6:	2302      	movs	r3, #2
 80024c8:	e002      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <HAL_GPIO_Init+0x21c>
 80024ce:	2300      	movs	r3, #0
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	f002 0203 	and.w	r2, r2, #3
 80024d6:	0092      	lsls	r2, r2, #2
 80024d8:	4093      	lsls	r3, r2
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024e0:	4934      	ldr	r1, [pc, #208]	; (80025b4 <HAL_GPIO_Init+0x300>)
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	089b      	lsrs	r3, r3, #2
 80024e6:	3302      	adds	r3, #2
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024ee:	4b39      	ldr	r3, [pc, #228]	; (80025d4 <HAL_GPIO_Init+0x320>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002506:	2b00      	cmp	r3, #0
 8002508:	d003      	beq.n	8002512 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002512:	4a30      	ldr	r2, [pc, #192]	; (80025d4 <HAL_GPIO_Init+0x320>)
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002518:	4b2e      	ldr	r3, [pc, #184]	; (80025d4 <HAL_GPIO_Init+0x320>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800253c:	4a25      	ldr	r2, [pc, #148]	; (80025d4 <HAL_GPIO_Init+0x320>)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002542:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <HAL_GPIO_Init+0x320>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	43db      	mvns	r3, r3
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	4013      	ands	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002566:	4a1b      	ldr	r2, [pc, #108]	; (80025d4 <HAL_GPIO_Init+0x320>)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_GPIO_Init+0x320>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	43db      	mvns	r3, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4013      	ands	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	4313      	orrs	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002590:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <HAL_GPIO_Init+0x320>)
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	3301      	adds	r3, #1
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2b0f      	cmp	r3, #15
 80025a0:	f67f ae96 	bls.w	80022d0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025a4:	bf00      	nop
 80025a6:	3724      	adds	r7, #36	; 0x24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	40023800 	.word	0x40023800
 80025b4:	40013800 	.word	0x40013800
 80025b8:	40020000 	.word	0x40020000
 80025bc:	40020400 	.word	0x40020400
 80025c0:	40020800 	.word	0x40020800
 80025c4:	40020c00 	.word	0x40020c00
 80025c8:	40021000 	.word	0x40021000
 80025cc:	40021400 	.word	0x40021400
 80025d0:	40021800 	.word	0x40021800
 80025d4:	40013c00 	.word	0x40013c00

080025d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
 80025e4:	4613      	mov	r3, r2
 80025e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025e8:	787b      	ldrb	r3, [r7, #1]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d003      	beq.n	80025f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ee:	887a      	ldrh	r2, [r7, #2]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025f4:	e003      	b.n	80025fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025f6:	887b      	ldrh	r3, [r7, #2]
 80025f8:	041a      	lsls	r2, r3, #16
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	619a      	str	r2, [r3, #24]
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
	...

0800260c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b084      	sub	sp, #16
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d101      	bne.n	8002620 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e0cc      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002620:	4b68      	ldr	r3, [pc, #416]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 030f 	and.w	r3, r3, #15
 8002628:	683a      	ldr	r2, [r7, #0]
 800262a:	429a      	cmp	r2, r3
 800262c:	d90c      	bls.n	8002648 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800262e:	4b65      	ldr	r3, [pc, #404]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 030f 	and.w	r3, r3, #15
 800263e:	683a      	ldr	r2, [r7, #0]
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0b8      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d020      	beq.n	8002696 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	d005      	beq.n	800266c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002660:	4b59      	ldr	r3, [pc, #356]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002666:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800266a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0308 	and.w	r3, r3, #8
 8002674:	2b00      	cmp	r3, #0
 8002676:	d005      	beq.n	8002684 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002678:	4b53      	ldr	r3, [pc, #332]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	4a52      	ldr	r2, [pc, #328]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 800267e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002682:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002684:	4b50      	ldr	r3, [pc, #320]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	494d      	ldr	r1, [pc, #308]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d044      	beq.n	800272c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d107      	bne.n	80026ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026aa:	4b47      	ldr	r3, [pc, #284]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d119      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e07f      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d003      	beq.n	80026ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026c6:	2b03      	cmp	r3, #3
 80026c8:	d107      	bne.n	80026da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ca:	4b3f      	ldr	r3, [pc, #252]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d109      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e06f      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026da:	4b3b      	ldr	r3, [pc, #236]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e067      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ea:	4b37      	ldr	r3, [pc, #220]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f023 0203 	bic.w	r2, r3, #3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	4934      	ldr	r1, [pc, #208]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026fc:	f7ff fcc6 	bl	800208c <HAL_GetTick>
 8002700:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002702:	e00a      	b.n	800271a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002704:	f7ff fcc2 	bl	800208c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e04f      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800271a:	4b2b      	ldr	r3, [pc, #172]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 020c 	and.w	r2, r3, #12
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	429a      	cmp	r2, r3
 800272a:	d1eb      	bne.n	8002704 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 030f 	and.w	r3, r3, #15
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	429a      	cmp	r2, r3
 8002738:	d20c      	bcs.n	8002754 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800273a:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002742:	4b20      	ldr	r3, [pc, #128]	; (80027c4 <HAL_RCC_ClockConfig+0x1b8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	429a      	cmp	r2, r3
 800274e:	d001      	beq.n	8002754 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e032      	b.n	80027ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0304 	and.w	r3, r3, #4
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002760:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002762:	689b      	ldr	r3, [r3, #8]
 8002764:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4916      	ldr	r1, [pc, #88]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 800276e:	4313      	orrs	r3, r2
 8002770:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0308 	and.w	r3, r3, #8
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800277e:	4b12      	ldr	r3, [pc, #72]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	490e      	ldr	r1, [pc, #56]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 800278e:	4313      	orrs	r3, r2
 8002790:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002792:	f000 fb7f 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8002796:	4601      	mov	r1, r0
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	f003 030f 	and.w	r3, r3, #15
 80027a2:	4a0a      	ldr	r2, [pc, #40]	; (80027cc <HAL_RCC_ClockConfig+0x1c0>)
 80027a4:	5cd3      	ldrb	r3, [r2, r3]
 80027a6:	fa21 f303 	lsr.w	r3, r1, r3
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <HAL_RCC_ClockConfig+0x1c8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff fc26 	bl	8002004 <HAL_InitTick>

  return HAL_OK;
 80027b8:	2300      	movs	r3, #0
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3710      	adds	r7, #16
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	40023c00 	.word	0x40023c00
 80027c8:	40023800 	.word	0x40023800
 80027cc:	0800ae3c 	.word	0x0800ae3c
 80027d0:	20000000 	.word	0x20000000
 80027d4:	20000004 	.word	0x20000004

080027d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027d8:	b480      	push	{r7}
 80027da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <HAL_RCC_GetHCLKFreq+0x14>)
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000000 	.word	0x20000000

080027f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80027f4:	f7ff fff0 	bl	80027d8 <HAL_RCC_GetHCLKFreq>
 80027f8:	4601      	mov	r1, r0
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <HAL_RCC_GetPCLK1Freq+0x20>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	0a9b      	lsrs	r3, r3, #10
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	4a03      	ldr	r2, [pc, #12]	; (8002814 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002806:	5cd3      	ldrb	r3, [r2, r3]
 8002808:	fa21 f303 	lsr.w	r3, r1, r3
}
 800280c:	4618      	mov	r0, r3
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	0800ae4c 	.word	0x0800ae4c

08002818 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800281c:	f7ff ffdc 	bl	80027d8 <HAL_RCC_GetHCLKFreq>
 8002820:	4601      	mov	r1, r0
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	0b5b      	lsrs	r3, r3, #13
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4a03      	ldr	r2, [pc, #12]	; (800283c <HAL_RCC_GetPCLK2Freq+0x24>)
 800282e:	5cd3      	ldrb	r3, [r2, r3]
 8002830:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40023800 	.word	0x40023800
 800283c:	0800ae4c 	.word	0x0800ae4c

08002840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b08c      	sub	sp, #48	; 0x30
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002848:	2300      	movs	r3, #0
 800284a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800284c:	2300      	movs	r3, #0
 800284e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002850:	2300      	movs	r3, #0
 8002852:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002854:	2300      	movs	r3, #0
 8002856:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002858:	2300      	movs	r3, #0
 800285a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800285c:	2300      	movs	r3, #0
 800285e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002864:	2300      	movs	r3, #0
 8002866:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f003 0301 	and.w	r3, r3, #1
 8002874:	2b00      	cmp	r3, #0
 8002876:	d010      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002878:	4b6f      	ldr	r3, [pc, #444]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800287a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800287e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002886:	496c      	ldr	r1, [pc, #432]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002892:	2b00      	cmp	r3, #0
 8002894:	d101      	bne.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002896:	2301      	movs	r3, #1
 8002898:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d010      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80028a6:	4b64      	ldr	r3, [pc, #400]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028ac:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028b4:	4960      	ldr	r1, [pc, #384]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80028c4:	2301      	movs	r3, #1
 80028c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d017      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028d4:	4b58      	ldr	r3, [pc, #352]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e2:	4955      	ldr	r1, [pc, #340]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f2:	d101      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80028f4:	2301      	movs	r3, #1
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d101      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002900:	2301      	movs	r3, #1
 8002902:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0308 	and.w	r3, r3, #8
 800290c:	2b00      	cmp	r3, #0
 800290e:	d017      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002910:	4b49      	ldr	r3, [pc, #292]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002912:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002916:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800291e:	4946      	ldr	r1, [pc, #280]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800292a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800292e:	d101      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002930:	2301      	movs	r3, #1
 8002932:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800293c:	2301      	movs	r3, #1
 800293e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 808a 	beq.w	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60bb      	str	r3, [r7, #8]
 8002952:	4b39      	ldr	r3, [pc, #228]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002956:	4a38      	ldr	r2, [pc, #224]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002958:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295c:	6413      	str	r3, [r2, #64]	; 0x40
 800295e:	4b36      	ldr	r3, [pc, #216]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	60bb      	str	r3, [r7, #8]
 8002968:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800296a:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a33      	ldr	r2, [pc, #204]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002974:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002976:	f7ff fb89 	bl	800208c <HAL_GetTick>
 800297a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800297e:	f7ff fb85 	bl	800208c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e278      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002990:	4b2a      	ldr	r3, [pc, #168]	; (8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0f0      	beq.n	800297e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800299c:	4b26      	ldr	r3, [pc, #152]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029a4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029a6:	6a3b      	ldr	r3, [r7, #32]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d02f      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029b4:	6a3a      	ldr	r2, [r7, #32]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d028      	beq.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029ba:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029c2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029c4:	4b1e      	ldr	r3, [pc, #120]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029c6:	2201      	movs	r2, #1
 80029c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80029ca:	4b1d      	ldr	r3, [pc, #116]	; (8002a40 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80029cc:	2200      	movs	r2, #0
 80029ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80029d0:	4a19      	ldr	r2, [pc, #100]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80029d6:	4b18      	ldr	r3, [pc, #96]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d114      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80029e2:	f7ff fb53 	bl	800208c <HAL_GetTick>
 80029e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7ff fb4f 	bl	800208c <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e240      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a00:	4b0d      	ldr	r3, [pc, #52]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d0ee      	beq.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a18:	d114      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002a1a:	4b07      	ldr	r3, [pc, #28]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2e:	4902      	ldr	r1, [pc, #8]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	608b      	str	r3, [r1, #8]
 8002a34:	e00c      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002a36:	bf00      	nop
 8002a38:	40023800 	.word	0x40023800
 8002a3c:	40007000 	.word	0x40007000
 8002a40:	42470e40 	.word	0x42470e40
 8002a44:	4b4a      	ldr	r3, [pc, #296]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	4a49      	ldr	r2, [pc, #292]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a4e:	6093      	str	r3, [r2, #8]
 8002a50:	4b47      	ldr	r3, [pc, #284]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5c:	4944      	ldr	r1, [pc, #272]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d004      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002a74:	4b3f      	ldr	r3, [pc, #252]	; (8002b74 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002a76:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00a      	beq.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002a84:	4b3a      	ldr	r3, [pc, #232]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a92:	4937      	ldr	r1, [pc, #220]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002aa6:	4b32      	ldr	r3, [pc, #200]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002aac:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab4:	492e      	ldr	r1, [pc, #184]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d011      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ac8:	4b29      	ldr	r3, [pc, #164]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ace:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ad6:	4926      	ldr	r1, [pc, #152]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ae6:	d101      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d00a      	beq.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002af8:	4b1d      	ldr	r3, [pc, #116]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002afe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	491a      	ldr	r1, [pc, #104]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d011      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002b1a:	4b15      	ldr	r3, [pc, #84]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b20:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b28:	4911      	ldr	r1, [pc, #68]	; (8002b70 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b38:	d101      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d005      	beq.n	8002b50 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b4c:	f040 80ff 	bne.w	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b56:	f7ff fa99 	bl	800208c <HAL_GetTick>
 8002b5a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b5c:	e00e      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002b5e:	f7ff fa95 	bl	800208c <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d907      	bls.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b6c:	2303      	movs	r3, #3
 8002b6e:	e188      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002b70:	40023800 	.word	0x40023800
 8002b74:	424711e0 	.word	0x424711e0
 8002b78:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002b7c:	4b7e      	ldr	r3, [pc, #504]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d1ea      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0301 	and.w	r3, r3, #1
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d003      	beq.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d009      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d028      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d124      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bb0:	4b71      	ldr	r3, [pc, #452]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bb6:	0c1b      	lsrs	r3, r3, #16
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002bc2:	4b6d      	ldr	r3, [pc, #436]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bc8:	0e1b      	lsrs	r3, r3, #24
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685a      	ldr	r2, [r3, #4]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	019b      	lsls	r3, r3, #6
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	085b      	lsrs	r3, r3, #1
 8002be0:	3b01      	subs	r3, #1
 8002be2:	041b      	lsls	r3, r3, #16
 8002be4:	431a      	orrs	r2, r3
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	061b      	lsls	r3, r3, #24
 8002bea:	431a      	orrs	r2, r3
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	071b      	lsls	r3, r3, #28
 8002bf2:	4961      	ldr	r1, [pc, #388]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0304 	and.w	r3, r3, #4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d004      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c0e:	d00a      	beq.n	8002c26 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d035      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c24:	d130      	bne.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c26:	4b54      	ldr	r3, [pc, #336]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	3301      	adds	r3, #1
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c38:	4b4f      	ldr	r3, [pc, #316]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c3e:	0f1b      	lsrs	r3, r3, #28
 8002c40:	f003 0307 	and.w	r3, r3, #7
 8002c44:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	019b      	lsls	r3, r3, #6
 8002c50:	431a      	orrs	r2, r3
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	085b      	lsrs	r3, r3, #1
 8002c56:	3b01      	subs	r3, #1
 8002c58:	041b      	lsls	r3, r3, #16
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	061b      	lsls	r3, r3, #24
 8002c62:	431a      	orrs	r2, r3
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	071b      	lsls	r3, r3, #28
 8002c68:	4943      	ldr	r1, [pc, #268]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002c70:	4b41      	ldr	r3, [pc, #260]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c76:	f023 021f 	bic.w	r2, r3, #31
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	493d      	ldr	r1, [pc, #244]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d029      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c9c:	d124      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c9e:	4b36      	ldr	r3, [pc, #216]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ca4:	0c1b      	lsrs	r3, r3, #16
 8002ca6:	f003 0303 	and.w	r3, r3, #3
 8002caa:	3301      	adds	r3, #1
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cb0:	4b31      	ldr	r3, [pc, #196]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cb6:	0f1b      	lsrs	r3, r3, #28
 8002cb8:	f003 0307 	and.w	r3, r3, #7
 8002cbc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	019b      	lsls	r3, r3, #6
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	085b      	lsrs	r3, r3, #1
 8002cd0:	3b01      	subs	r3, #1
 8002cd2:	041b      	lsls	r3, r3, #16
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	061b      	lsls	r3, r3, #24
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	071b      	lsls	r3, r3, #28
 8002ce0:	4925      	ldr	r1, [pc, #148]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d016      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685a      	ldr	r2, [r3, #4]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	019b      	lsls	r3, r3, #6
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	3b01      	subs	r3, #1
 8002d08:	041b      	lsls	r3, r3, #16
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	691b      	ldr	r3, [r3, #16]
 8002d10:	061b      	lsls	r3, r3, #24
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	695b      	ldr	r3, [r3, #20]
 8002d18:	071b      	lsls	r3, r3, #28
 8002d1a:	4917      	ldr	r1, [pc, #92]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d22:	4b16      	ldr	r3, [pc, #88]	; (8002d7c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d28:	f7ff f9b0 	bl	800208c <HAL_GetTick>
 8002d2c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d30:	f7ff f9ac 	bl	800208c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e09f      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	f040 8095 	bne.w	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d5c:	f7ff f996 	bl	800208c <HAL_GetTick>
 8002d60:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d62:	e00f      	b.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002d64:	f7ff f992 	bl	800208c <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b02      	cmp	r3, #2
 8002d70:	d908      	bls.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e085      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	42470068 	.word	0x42470068
 8002d80:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002d84:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d90:	d0e8      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0304 	and.w	r3, r3, #4
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d02b      	beq.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d127      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002dba:	4b34      	ldr	r3, [pc, #208]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc0:	0c1b      	lsrs	r3, r3, #16
 8002dc2:	f003 0303 	and.w	r3, r3, #3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	699a      	ldr	r2, [r3, #24]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	019b      	lsls	r3, r3, #6
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	085b      	lsrs	r3, r3, #1
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	041b      	lsls	r3, r3, #16
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	061b      	lsls	r3, r3, #24
 8002de8:	4928      	ldr	r1, [pc, #160]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002df0:	4b26      	ldr	r3, [pc, #152]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002df2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002df6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	021b      	lsls	r3, r3, #8
 8002e02:	4922      	ldr	r1, [pc, #136]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e04:	4313      	orrs	r3, r2
 8002e06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d01d      	beq.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e1a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e1e:	d118      	bne.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e20:	4b1a      	ldr	r3, [pc, #104]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	0e1b      	lsrs	r3, r3, #24
 8002e28:	f003 030f 	and.w	r3, r3, #15
 8002e2c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699a      	ldr	r2, [r3, #24]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69db      	ldr	r3, [r3, #28]
 8002e36:	019b      	lsls	r3, r3, #6
 8002e38:	431a      	orrs	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	085b      	lsrs	r3, r3, #1
 8002e40:	3b01      	subs	r3, #1
 8002e42:	041b      	lsls	r3, r3, #16
 8002e44:	431a      	orrs	r2, r3
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	061b      	lsls	r3, r3, #24
 8002e4a:	4910      	ldr	r1, [pc, #64]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e52:	4b0f      	ldr	r3, [pc, #60]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002e54:	2201      	movs	r2, #1
 8002e56:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e58:	f7ff f918 	bl	800208c <HAL_GetTick>
 8002e5c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e5e:	e008      	b.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002e60:	f7ff f914 	bl	800208c <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d901      	bls.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e6e:	2303      	movs	r3, #3
 8002e70:	e007      	b.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002e72:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e7e:	d1ef      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3730      	adds	r7, #48	; 0x30
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40023800 	.word	0x40023800
 8002e90:	42470070 	.word	0x42470070

08002e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e96:	b087      	sub	sp, #28
 8002e98:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eae:	4bc6      	ldr	r3, [pc, #792]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	f003 030c 	and.w	r3, r3, #12
 8002eb6:	2b0c      	cmp	r3, #12
 8002eb8:	f200 817e 	bhi.w	80031b8 <HAL_RCC_GetSysClockFreq+0x324>
 8002ebc:	a201      	add	r2, pc, #4	; (adr r2, 8002ec4 <HAL_RCC_GetSysClockFreq+0x30>)
 8002ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ec2:	bf00      	nop
 8002ec4:	08002ef9 	.word	0x08002ef9
 8002ec8:	080031b9 	.word	0x080031b9
 8002ecc:	080031b9 	.word	0x080031b9
 8002ed0:	080031b9 	.word	0x080031b9
 8002ed4:	08002eff 	.word	0x08002eff
 8002ed8:	080031b9 	.word	0x080031b9
 8002edc:	080031b9 	.word	0x080031b9
 8002ee0:	080031b9 	.word	0x080031b9
 8002ee4:	08002f05 	.word	0x08002f05
 8002ee8:	080031b9 	.word	0x080031b9
 8002eec:	080031b9 	.word	0x080031b9
 8002ef0:	080031b9 	.word	0x080031b9
 8002ef4:	08003061 	.word	0x08003061
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef8:	4bb4      	ldr	r3, [pc, #720]	; (80031cc <HAL_RCC_GetSysClockFreq+0x338>)
 8002efa:	613b      	str	r3, [r7, #16]
       break;
 8002efc:	e15f      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002efe:	4bb4      	ldr	r3, [pc, #720]	; (80031d0 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002f00:	613b      	str	r3, [r7, #16]
      break;
 8002f02:	e15c      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f04:	4bb0      	ldr	r3, [pc, #704]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f0c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f0e:	4bae      	ldr	r3, [pc, #696]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d04a      	beq.n	8002fb0 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f1a:	4bab      	ldr	r3, [pc, #684]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	099b      	lsrs	r3, r3, #6
 8002f20:	f04f 0400 	mov.w	r4, #0
 8002f24:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	ea03 0501 	and.w	r5, r3, r1
 8002f30:	ea04 0602 	and.w	r6, r4, r2
 8002f34:	4629      	mov	r1, r5
 8002f36:	4632      	mov	r2, r6
 8002f38:	f04f 0300 	mov.w	r3, #0
 8002f3c:	f04f 0400 	mov.w	r4, #0
 8002f40:	0154      	lsls	r4, r2, #5
 8002f42:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f46:	014b      	lsls	r3, r1, #5
 8002f48:	4619      	mov	r1, r3
 8002f4a:	4622      	mov	r2, r4
 8002f4c:	1b49      	subs	r1, r1, r5
 8002f4e:	eb62 0206 	sbc.w	r2, r2, r6
 8002f52:	f04f 0300 	mov.w	r3, #0
 8002f56:	f04f 0400 	mov.w	r4, #0
 8002f5a:	0194      	lsls	r4, r2, #6
 8002f5c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f60:	018b      	lsls	r3, r1, #6
 8002f62:	1a5b      	subs	r3, r3, r1
 8002f64:	eb64 0402 	sbc.w	r4, r4, r2
 8002f68:	f04f 0100 	mov.w	r1, #0
 8002f6c:	f04f 0200 	mov.w	r2, #0
 8002f70:	00e2      	lsls	r2, r4, #3
 8002f72:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f76:	00d9      	lsls	r1, r3, #3
 8002f78:	460b      	mov	r3, r1
 8002f7a:	4614      	mov	r4, r2
 8002f7c:	195b      	adds	r3, r3, r5
 8002f7e:	eb44 0406 	adc.w	r4, r4, r6
 8002f82:	f04f 0100 	mov.w	r1, #0
 8002f86:	f04f 0200 	mov.w	r2, #0
 8002f8a:	0262      	lsls	r2, r4, #9
 8002f8c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002f90:	0259      	lsls	r1, r3, #9
 8002f92:	460b      	mov	r3, r1
 8002f94:	4614      	mov	r4, r2
 8002f96:	4618      	mov	r0, r3
 8002f98:	4621      	mov	r1, r4
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	f04f 0400 	mov.w	r4, #0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4623      	mov	r3, r4
 8002fa4:	f7fd fe20 	bl	8000be8 <__aeabi_uldivmod>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	460c      	mov	r4, r1
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	e049      	b.n	8003044 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb0:	4b85      	ldr	r3, [pc, #532]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	f04f 0400 	mov.w	r4, #0
 8002fba:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002fbe:	f04f 0200 	mov.w	r2, #0
 8002fc2:	ea03 0501 	and.w	r5, r3, r1
 8002fc6:	ea04 0602 	and.w	r6, r4, r2
 8002fca:	4629      	mov	r1, r5
 8002fcc:	4632      	mov	r2, r6
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	f04f 0400 	mov.w	r4, #0
 8002fd6:	0154      	lsls	r4, r2, #5
 8002fd8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002fdc:	014b      	lsls	r3, r1, #5
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4622      	mov	r2, r4
 8002fe2:	1b49      	subs	r1, r1, r5
 8002fe4:	eb62 0206 	sbc.w	r2, r2, r6
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	f04f 0400 	mov.w	r4, #0
 8002ff0:	0194      	lsls	r4, r2, #6
 8002ff2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ff6:	018b      	lsls	r3, r1, #6
 8002ff8:	1a5b      	subs	r3, r3, r1
 8002ffa:	eb64 0402 	sbc.w	r4, r4, r2
 8002ffe:	f04f 0100 	mov.w	r1, #0
 8003002:	f04f 0200 	mov.w	r2, #0
 8003006:	00e2      	lsls	r2, r4, #3
 8003008:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800300c:	00d9      	lsls	r1, r3, #3
 800300e:	460b      	mov	r3, r1
 8003010:	4614      	mov	r4, r2
 8003012:	195b      	adds	r3, r3, r5
 8003014:	eb44 0406 	adc.w	r4, r4, r6
 8003018:	f04f 0100 	mov.w	r1, #0
 800301c:	f04f 0200 	mov.w	r2, #0
 8003020:	02a2      	lsls	r2, r4, #10
 8003022:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003026:	0299      	lsls	r1, r3, #10
 8003028:	460b      	mov	r3, r1
 800302a:	4614      	mov	r4, r2
 800302c:	4618      	mov	r0, r3
 800302e:	4621      	mov	r1, r4
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	f04f 0400 	mov.w	r4, #0
 8003036:	461a      	mov	r2, r3
 8003038:	4623      	mov	r3, r4
 800303a:	f7fd fdd5 	bl	8000be8 <__aeabi_uldivmod>
 800303e:	4603      	mov	r3, r0
 8003040:	460c      	mov	r4, r1
 8003042:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003044:	4b60      	ldr	r3, [pc, #384]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	0c1b      	lsrs	r3, r3, #16
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	3301      	adds	r3, #1
 8003050:	005b      	lsls	r3, r3, #1
 8003052:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003054:	697a      	ldr	r2, [r7, #20]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	fbb2 f3f3 	udiv	r3, r2, r3
 800305c:	613b      	str	r3, [r7, #16]
      break;
 800305e:	e0ae      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003060:	4b59      	ldr	r3, [pc, #356]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003068:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800306a:	4b57      	ldr	r3, [pc, #348]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x334>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d04a      	beq.n	800310c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003076:	4b54      	ldr	r3, [pc, #336]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x334>)
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	099b      	lsrs	r3, r3, #6
 800307c:	f04f 0400 	mov.w	r4, #0
 8003080:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003084:	f04f 0200 	mov.w	r2, #0
 8003088:	ea03 0501 	and.w	r5, r3, r1
 800308c:	ea04 0602 	and.w	r6, r4, r2
 8003090:	4629      	mov	r1, r5
 8003092:	4632      	mov	r2, r6
 8003094:	f04f 0300 	mov.w	r3, #0
 8003098:	f04f 0400 	mov.w	r4, #0
 800309c:	0154      	lsls	r4, r2, #5
 800309e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80030a2:	014b      	lsls	r3, r1, #5
 80030a4:	4619      	mov	r1, r3
 80030a6:	4622      	mov	r2, r4
 80030a8:	1b49      	subs	r1, r1, r5
 80030aa:	eb62 0206 	sbc.w	r2, r2, r6
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	f04f 0400 	mov.w	r4, #0
 80030b6:	0194      	lsls	r4, r2, #6
 80030b8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80030bc:	018b      	lsls	r3, r1, #6
 80030be:	1a5b      	subs	r3, r3, r1
 80030c0:	eb64 0402 	sbc.w	r4, r4, r2
 80030c4:	f04f 0100 	mov.w	r1, #0
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	00e2      	lsls	r2, r4, #3
 80030ce:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80030d2:	00d9      	lsls	r1, r3, #3
 80030d4:	460b      	mov	r3, r1
 80030d6:	4614      	mov	r4, r2
 80030d8:	195b      	adds	r3, r3, r5
 80030da:	eb44 0406 	adc.w	r4, r4, r6
 80030de:	f04f 0100 	mov.w	r1, #0
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	0262      	lsls	r2, r4, #9
 80030e8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80030ec:	0259      	lsls	r1, r3, #9
 80030ee:	460b      	mov	r3, r1
 80030f0:	4614      	mov	r4, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	4621      	mov	r1, r4
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f04f 0400 	mov.w	r4, #0
 80030fc:	461a      	mov	r2, r3
 80030fe:	4623      	mov	r3, r4
 8003100:	f7fd fd72 	bl	8000be8 <__aeabi_uldivmod>
 8003104:	4603      	mov	r3, r0
 8003106:	460c      	mov	r4, r1
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e049      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800310c:	4b2e      	ldr	r3, [pc, #184]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x334>)
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	099b      	lsrs	r3, r3, #6
 8003112:	f04f 0400 	mov.w	r4, #0
 8003116:	f240 11ff 	movw	r1, #511	; 0x1ff
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	ea03 0501 	and.w	r5, r3, r1
 8003122:	ea04 0602 	and.w	r6, r4, r2
 8003126:	4629      	mov	r1, r5
 8003128:	4632      	mov	r2, r6
 800312a:	f04f 0300 	mov.w	r3, #0
 800312e:	f04f 0400 	mov.w	r4, #0
 8003132:	0154      	lsls	r4, r2, #5
 8003134:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003138:	014b      	lsls	r3, r1, #5
 800313a:	4619      	mov	r1, r3
 800313c:	4622      	mov	r2, r4
 800313e:	1b49      	subs	r1, r1, r5
 8003140:	eb62 0206 	sbc.w	r2, r2, r6
 8003144:	f04f 0300 	mov.w	r3, #0
 8003148:	f04f 0400 	mov.w	r4, #0
 800314c:	0194      	lsls	r4, r2, #6
 800314e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003152:	018b      	lsls	r3, r1, #6
 8003154:	1a5b      	subs	r3, r3, r1
 8003156:	eb64 0402 	sbc.w	r4, r4, r2
 800315a:	f04f 0100 	mov.w	r1, #0
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	00e2      	lsls	r2, r4, #3
 8003164:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003168:	00d9      	lsls	r1, r3, #3
 800316a:	460b      	mov	r3, r1
 800316c:	4614      	mov	r4, r2
 800316e:	195b      	adds	r3, r3, r5
 8003170:	eb44 0406 	adc.w	r4, r4, r6
 8003174:	f04f 0100 	mov.w	r1, #0
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	02a2      	lsls	r2, r4, #10
 800317e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003182:	0299      	lsls	r1, r3, #10
 8003184:	460b      	mov	r3, r1
 8003186:	4614      	mov	r4, r2
 8003188:	4618      	mov	r0, r3
 800318a:	4621      	mov	r1, r4
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f04f 0400 	mov.w	r4, #0
 8003192:	461a      	mov	r2, r3
 8003194:	4623      	mov	r3, r4
 8003196:	f7fd fd27 	bl	8000be8 <__aeabi_uldivmod>
 800319a:	4603      	mov	r3, r0
 800319c:	460c      	mov	r4, r1
 800319e:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x334>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	0f1b      	lsrs	r3, r3, #28
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	613b      	str	r3, [r7, #16]
      break;
 80031b6:	e002      	b.n	80031be <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b8:	4b04      	ldr	r3, [pc, #16]	; (80031cc <HAL_RCC_GetSysClockFreq+0x338>)
 80031ba:	613b      	str	r3, [r7, #16]
      break;
 80031bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031be:	693b      	ldr	r3, [r7, #16]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	00f42400 	.word	0x00f42400
 80031d0:	007a1200 	.word	0x007a1200

080031d4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031dc:	2300      	movs	r3, #0
 80031de:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	f000 8083 	beq.w	80032f4 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031ee:	4b95      	ldr	r3, [pc, #596]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f003 030c 	and.w	r3, r3, #12
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d019      	beq.n	800322e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031fa:	4b92      	ldr	r3, [pc, #584]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003202:	2b08      	cmp	r3, #8
 8003204:	d106      	bne.n	8003214 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003206:	4b8f      	ldr	r3, [pc, #572]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800320e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003212:	d00c      	beq.n	800322e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003214:	4b8b      	ldr	r3, [pc, #556]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800321c:	2b0c      	cmp	r3, #12
 800321e:	d112      	bne.n	8003246 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003220:	4b88      	ldr	r3, [pc, #544]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800322c:	d10b      	bne.n	8003246 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800322e:	4b85      	ldr	r3, [pc, #532]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d05b      	beq.n	80032f2 <HAL_RCC_OscConfig+0x11e>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d157      	bne.n	80032f2 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e216      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800324e:	d106      	bne.n	800325e <HAL_RCC_OscConfig+0x8a>
 8003250:	4b7c      	ldr	r3, [pc, #496]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a7b      	ldr	r2, [pc, #492]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800325a:	6013      	str	r3, [r2, #0]
 800325c:	e01d      	b.n	800329a <HAL_RCC_OscConfig+0xc6>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003266:	d10c      	bne.n	8003282 <HAL_RCC_OscConfig+0xae>
 8003268:	4b76      	ldr	r3, [pc, #472]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a75      	ldr	r2, [pc, #468]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 800326e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b73      	ldr	r3, [pc, #460]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a72      	ldr	r2, [pc, #456]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 800327a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800327e:	6013      	str	r3, [r2, #0]
 8003280:	e00b      	b.n	800329a <HAL_RCC_OscConfig+0xc6>
 8003282:	4b70      	ldr	r3, [pc, #448]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a6f      	ldr	r2, [pc, #444]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800328c:	6013      	str	r3, [r2, #0]
 800328e:	4b6d      	ldr	r3, [pc, #436]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a6c      	ldr	r2, [pc, #432]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003294:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003298:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d013      	beq.n	80032ca <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a2:	f7fe fef3 	bl	800208c <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a8:	e008      	b.n	80032bc <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032aa:	f7fe feef 	bl	800208c <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b64      	cmp	r3, #100	; 0x64
 80032b6:	d901      	bls.n	80032bc <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e1db      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032bc:	4b61      	ldr	r3, [pc, #388]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d0f0      	beq.n	80032aa <HAL_RCC_OscConfig+0xd6>
 80032c8:	e014      	b.n	80032f4 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ca:	f7fe fedf 	bl	800208c <HAL_GetTick>
 80032ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032d2:	f7fe fedb 	bl	800208c <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b64      	cmp	r3, #100	; 0x64
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e1c7      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032e4:	4b57      	ldr	r3, [pc, #348]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d1f0      	bne.n	80032d2 <HAL_RCC_OscConfig+0xfe>
 80032f0:	e000      	b.n	80032f4 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032f2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d06f      	beq.n	80033e0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003300:	4b50      	ldr	r3, [pc, #320]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 030c 	and.w	r3, r3, #12
 8003308:	2b00      	cmp	r3, #0
 800330a:	d017      	beq.n	800333c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800330c:	4b4d      	ldr	r3, [pc, #308]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003314:	2b08      	cmp	r3, #8
 8003316:	d105      	bne.n	8003324 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003318:	4b4a      	ldr	r3, [pc, #296]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00b      	beq.n	800333c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003324:	4b47      	ldr	r3, [pc, #284]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800332c:	2b0c      	cmp	r3, #12
 800332e:	d11c      	bne.n	800336a <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003330:	4b44      	ldr	r3, [pc, #272]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d116      	bne.n	800336a <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333c:	4b41      	ldr	r3, [pc, #260]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_RCC_OscConfig+0x180>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	68db      	ldr	r3, [r3, #12]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d001      	beq.n	8003354 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e18f      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003354:	4b3b      	ldr	r3, [pc, #236]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	691b      	ldr	r3, [r3, #16]
 8003360:	00db      	lsls	r3, r3, #3
 8003362:	4938      	ldr	r1, [pc, #224]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003364:	4313      	orrs	r3, r2
 8003366:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003368:	e03a      	b.n	80033e0 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d020      	beq.n	80033b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003372:	4b35      	ldr	r3, [pc, #212]	; (8003448 <HAL_RCC_OscConfig+0x274>)
 8003374:	2201      	movs	r2, #1
 8003376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003378:	f7fe fe88 	bl	800208c <HAL_GetTick>
 800337c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800337e:	e008      	b.n	8003392 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003380:	f7fe fe84 	bl	800208c <HAL_GetTick>
 8003384:	4602      	mov	r2, r0
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	1ad3      	subs	r3, r2, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d901      	bls.n	8003392 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e170      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003392:	4b2c      	ldr	r3, [pc, #176]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d0f0      	beq.n	8003380 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800339e:	4b29      	ldr	r3, [pc, #164]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4925      	ldr	r1, [pc, #148]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	600b      	str	r3, [r1, #0]
 80033b2:	e015      	b.n	80033e0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033b4:	4b24      	ldr	r3, [pc, #144]	; (8003448 <HAL_RCC_OscConfig+0x274>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ba:	f7fe fe67 	bl	800208c <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c2:	f7fe fe63 	bl	800208c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e14f      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033d4:	4b1b      	ldr	r3, [pc, #108]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1f0      	bne.n	80033c2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0308 	and.w	r3, r3, #8
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d037      	beq.n	800345c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d016      	beq.n	8003422 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f4:	4b15      	ldr	r3, [pc, #84]	; (800344c <HAL_RCC_OscConfig+0x278>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fa:	f7fe fe47 	bl	800208c <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003400:	e008      	b.n	8003414 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003402:	f7fe fe43 	bl	800208c <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e12f      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003414:	4b0b      	ldr	r3, [pc, #44]	; (8003444 <HAL_RCC_OscConfig+0x270>)
 8003416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0f0      	beq.n	8003402 <HAL_RCC_OscConfig+0x22e>
 8003420:	e01c      	b.n	800345c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003422:	4b0a      	ldr	r3, [pc, #40]	; (800344c <HAL_RCC_OscConfig+0x278>)
 8003424:	2200      	movs	r2, #0
 8003426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003428:	f7fe fe30 	bl	800208c <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800342e:	e00f      	b.n	8003450 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003430:	f7fe fe2c 	bl	800208c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d908      	bls.n	8003450 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e118      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
 8003442:	bf00      	nop
 8003444:	40023800 	.word	0x40023800
 8003448:	42470000 	.word	0x42470000
 800344c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003450:	4b8a      	ldr	r3, [pc, #552]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 8003452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e9      	bne.n	8003430 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 8097 	beq.w	8003598 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800346a:	2300      	movs	r3, #0
 800346c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800346e:	4b83      	ldr	r3, [pc, #524]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d10f      	bne.n	800349a <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
 800347e:	4b7f      	ldr	r3, [pc, #508]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	4a7e      	ldr	r2, [pc, #504]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 8003484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003488:	6413      	str	r3, [r2, #64]	; 0x40
 800348a:	4b7c      	ldr	r3, [pc, #496]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 800348c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003492:	60fb      	str	r3, [r7, #12]
 8003494:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003496:	2301      	movs	r3, #1
 8003498:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349a:	4b79      	ldr	r3, [pc, #484]	; (8003680 <HAL_RCC_OscConfig+0x4ac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d118      	bne.n	80034d8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034a6:	4b76      	ldr	r3, [pc, #472]	; (8003680 <HAL_RCC_OscConfig+0x4ac>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a75      	ldr	r2, [pc, #468]	; (8003680 <HAL_RCC_OscConfig+0x4ac>)
 80034ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b2:	f7fe fdeb 	bl	800208c <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ba:	f7fe fde7 	bl	800208c <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e0d3      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034cc:	4b6c      	ldr	r3, [pc, #432]	; (8003680 <HAL_RCC_OscConfig+0x4ac>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d106      	bne.n	80034ee <HAL_RCC_OscConfig+0x31a>
 80034e0:	4b66      	ldr	r3, [pc, #408]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	4a65      	ldr	r2, [pc, #404]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 80034e6:	f043 0301 	orr.w	r3, r3, #1
 80034ea:	6713      	str	r3, [r2, #112]	; 0x70
 80034ec:	e01c      	b.n	8003528 <HAL_RCC_OscConfig+0x354>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	2b05      	cmp	r3, #5
 80034f4:	d10c      	bne.n	8003510 <HAL_RCC_OscConfig+0x33c>
 80034f6:	4b61      	ldr	r3, [pc, #388]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 80034f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034fa:	4a60      	ldr	r2, [pc, #384]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 80034fc:	f043 0304 	orr.w	r3, r3, #4
 8003500:	6713      	str	r3, [r2, #112]	; 0x70
 8003502:	4b5e      	ldr	r3, [pc, #376]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 8003504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003506:	4a5d      	ldr	r2, [pc, #372]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6713      	str	r3, [r2, #112]	; 0x70
 800350e:	e00b      	b.n	8003528 <HAL_RCC_OscConfig+0x354>
 8003510:	4b5a      	ldr	r3, [pc, #360]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 8003512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003514:	4a59      	ldr	r2, [pc, #356]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 8003516:	f023 0301 	bic.w	r3, r3, #1
 800351a:	6713      	str	r3, [r2, #112]	; 0x70
 800351c:	4b57      	ldr	r3, [pc, #348]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 800351e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003520:	4a56      	ldr	r2, [pc, #344]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 8003522:	f023 0304 	bic.w	r3, r3, #4
 8003526:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d015      	beq.n	800355c <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003530:	f7fe fdac 	bl	800208c <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003538:	f7fe fda8 	bl	800208c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	f241 3288 	movw	r2, #5000	; 0x1388
 8003546:	4293      	cmp	r3, r2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e092      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800354e:	4b4b      	ldr	r3, [pc, #300]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 8003550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0ee      	beq.n	8003538 <HAL_RCC_OscConfig+0x364>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800355c:	f7fe fd96 	bl	800208c <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003562:	e00a      	b.n	800357a <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003564:	f7fe fd92 	bl	800208c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003572:	4293      	cmp	r3, r2
 8003574:	d901      	bls.n	800357a <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003576:	2303      	movs	r3, #3
 8003578:	e07c      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800357a:	4b40      	ldr	r3, [pc, #256]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	f003 0302 	and.w	r3, r3, #2
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1ee      	bne.n	8003564 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4b3b      	ldr	r3, [pc, #236]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 800358e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003590:	4a3a      	ldr	r2, [pc, #232]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003596:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d068      	beq.n	8003672 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035a0:	4b36      	ldr	r3, [pc, #216]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	f003 030c 	and.w	r3, r3, #12
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d060      	beq.n	800366e <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d145      	bne.n	8003640 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035b4:	4b33      	ldr	r3, [pc, #204]	; (8003684 <HAL_RCC_OscConfig+0x4b0>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ba:	f7fe fd67 	bl	800208c <HAL_GetTick>
 80035be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035c0:	e008      	b.n	80035d4 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035c2:	f7fe fd63 	bl	800208c <HAL_GetTick>
 80035c6:	4602      	mov	r2, r0
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	2b02      	cmp	r3, #2
 80035ce:	d901      	bls.n	80035d4 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80035d0:	2303      	movs	r3, #3
 80035d2:	e04f      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035d4:	4b29      	ldr	r3, [pc, #164]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1f0      	bne.n	80035c2 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	69da      	ldr	r2, [r3, #28]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a1b      	ldr	r3, [r3, #32]
 80035e8:	431a      	orrs	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	019b      	lsls	r3, r3, #6
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	3b01      	subs	r3, #1
 80035fa:	041b      	lsls	r3, r3, #16
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003602:	061b      	lsls	r3, r3, #24
 8003604:	431a      	orrs	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	071b      	lsls	r3, r3, #28
 800360c:	491b      	ldr	r1, [pc, #108]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 800360e:	4313      	orrs	r3, r2
 8003610:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003612:	4b1c      	ldr	r3, [pc, #112]	; (8003684 <HAL_RCC_OscConfig+0x4b0>)
 8003614:	2201      	movs	r2, #1
 8003616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fe fd38 	bl	800208c <HAL_GetTick>
 800361c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003620:	f7fe fd34 	bl	800208c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b02      	cmp	r3, #2
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e020      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d0f0      	beq.n	8003620 <HAL_RCC_OscConfig+0x44c>
 800363e:	e018      	b.n	8003672 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003640:	4b10      	ldr	r3, [pc, #64]	; (8003684 <HAL_RCC_OscConfig+0x4b0>)
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7fe fd21 	bl	800208c <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800364c:	e008      	b.n	8003660 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800364e:	f7fe fd1d 	bl	800208c <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	2b02      	cmp	r3, #2
 800365a:	d901      	bls.n	8003660 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800365c:	2303      	movs	r3, #3
 800365e:	e009      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003660:	4b06      	ldr	r3, [pc, #24]	; (800367c <HAL_RCC_OscConfig+0x4a8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1f0      	bne.n	800364e <HAL_RCC_OscConfig+0x47a>
 800366c:	e001      	b.n	8003672 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40023800 	.word	0x40023800
 8003680:	40007000 	.word	0x40007000
 8003684:	42470060 	.word	0x42470060

08003688 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d101      	bne.n	800369a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e022      	b.n	80036e0 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d105      	bne.n	80036b2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	f7fe fb33 	bl	8001d18 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2203      	movs	r2, #3
 80036b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f000 f814 	bl	80036e8 <HAL_SD_InitCard>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e00a      	b.n	80036e0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80036e8:	b5b0      	push	{r4, r5, r7, lr}
 80036ea:	b08e      	sub	sp, #56	; 0x38
 80036ec:	af04      	add	r7, sp, #16
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003704:	2376      	movs	r3, #118	; 0x76
 8003706:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681d      	ldr	r5, [r3, #0]
 800370c:	466c      	mov	r4, sp
 800370e:	f107 0314 	add.w	r3, r7, #20
 8003712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003716:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800371a:	f107 0308 	add.w	r3, r7, #8
 800371e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003720:	4628      	mov	r0, r5
 8003722:	f001 fdd5 	bl	80052d0 <SDIO_Init>
 8003726:	4603      	mov	r3, r0
 8003728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800372c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e031      	b.n	800379c <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003738:	4b1a      	ldr	r3, [pc, #104]	; (80037a4 <HAL_SD_InitCard+0xbc>)
 800373a:	2200      	movs	r2, #0
 800373c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4618      	mov	r0, r3
 8003744:	f001 fe0d 	bl	8005362 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003748:	4b16      	ldr	r3, [pc, #88]	; (80037a4 <HAL_SD_InitCard+0xbc>)
 800374a:	2201      	movs	r2, #1
 800374c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 fefc 	bl	800454c <SD_PowerON>
 8003754:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00b      	beq.n	8003774 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2201      	movs	r2, #1
 8003760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003770:	2301      	movs	r3, #1
 8003772:	e013      	b.n	800379c <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f000 fe1b 	bl	80043b0 <SD_InitCard>
 800377a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800378e:	6a3b      	ldr	r3, [r7, #32]
 8003790:	431a      	orrs	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e000      	b.n	800379c <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3728      	adds	r7, #40	; 0x28
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bdb0      	pop	{r4, r5, r7, pc}
 80037a4:	422580a0 	.word	0x422580a0

080037a8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b092      	sub	sp, #72	; 0x48
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	607a      	str	r2, [r7, #4]
 80037b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80037b6:	f7fe fc69 	bl	800208c <HAL_GetTick>
 80037ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d107      	bne.n	80037da <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e1d7      	b.n	8003b8a <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	f040 81ca 	bne.w	8003b7c <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80037ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	441a      	add	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d907      	bls.n	800380c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003800:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e1be      	b.n	8003b8a <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2203      	movs	r2, #3
 8003810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2200      	movs	r2, #0
 800381a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003820:	2b01      	cmp	r3, #1
 8003822:	d002      	beq.n	800382a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003826:	025b      	lsls	r3, r3, #9
 8003828:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003832:	4618      	mov	r0, r3
 8003834:	f001 fe28 	bl	8005488 <SDMMC_CmdBlockLength>
 8003838:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800383a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00f      	beq.n	8003860 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a9a      	ldr	r2, [pc, #616]	; (8003ab0 <HAL_SD_ReadBlocks+0x308>)
 8003846:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800384c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800384e:	431a      	orrs	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e194      	b.n	8003b8a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003860:	f04f 33ff 	mov.w	r3, #4294967295
 8003864:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	025b      	lsls	r3, r3, #9
 800386a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800386c:	2390      	movs	r3, #144	; 0x90
 800386e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003870:	2302      	movs	r3, #2
 8003872:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003878:	2301      	movs	r3, #1
 800387a:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f107 0214 	add.w	r2, r7, #20
 8003884:	4611      	mov	r1, r2
 8003886:	4618      	mov	r0, r3
 8003888:	f001 fdd2 	bl	8005430 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d90a      	bls.n	80038a8 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2202      	movs	r2, #2
 8003896:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800389e:	4618      	mov	r0, r3
 80038a0:	f001 fe36 	bl	8005510 <SDMMC_CmdReadMultiBlock>
 80038a4:	6478      	str	r0, [r7, #68]	; 0x44
 80038a6:	e009      	b.n	80038bc <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2201      	movs	r2, #1
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038b4:	4618      	mov	r0, r3
 80038b6:	f001 fe09 	bl	80054cc <SDMMC_CmdReadSingleBlock>
 80038ba:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80038bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d012      	beq.n	80038e8 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a7a      	ldr	r2, [pc, #488]	; (8003ab0 <HAL_SD_ReadBlocks+0x308>)
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038d0:	431a      	orrs	r2, r3
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2201      	movs	r2, #1
 80038da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2200      	movs	r2, #0
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e150      	b.n	8003b8a <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80038ec:	e061      	b.n	80039b2 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d03c      	beq.n	8003976 <HAL_SD_ReadBlocks+0x1ce>
 80038fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d039      	beq.n	8003976 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003902:	2300      	movs	r3, #0
 8003904:	643b      	str	r3, [r7, #64]	; 0x40
 8003906:	e033      	b.n	8003970 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4618      	mov	r0, r3
 800390e:	f001 fd0a 	bl	8005326 <SDIO_ReadFIFO>
 8003912:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003916:	b2da      	uxtb	r2, r3
 8003918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800391c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800391e:	3301      	adds	r3, #1
 8003920:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003922:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003924:	3b01      	subs	r3, #1
 8003926:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392a:	0a1b      	lsrs	r3, r3, #8
 800392c:	b2da      	uxtb	r2, r3
 800392e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003930:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003934:	3301      	adds	r3, #1
 8003936:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800393a:	3b01      	subs	r3, #1
 800393c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800393e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	b2da      	uxtb	r2, r3
 8003944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003946:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800394a:	3301      	adds	r3, #1
 800394c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800394e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003950:	3b01      	subs	r3, #1
 8003952:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003956:	0e1b      	lsrs	r3, r3, #24
 8003958:	b2da      	uxtb	r2, r3
 800395a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800395c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800395e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003960:	3301      	adds	r3, #1
 8003962:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003964:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003966:	3b01      	subs	r3, #1
 8003968:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 800396a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800396c:	3301      	adds	r3, #1
 800396e:	643b      	str	r3, [r7, #64]	; 0x40
 8003970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003972:	2b07      	cmp	r3, #7
 8003974:	d9c8      	bls.n	8003908 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003976:	f7fe fb89 	bl	800208c <HAL_GetTick>
 800397a:	4602      	mov	r2, r0
 800397c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003982:	429a      	cmp	r2, r3
 8003984:	d902      	bls.n	800398c <HAL_SD_ReadBlocks+0x1e4>
 8003986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003988:	2b00      	cmp	r3, #0
 800398a:	d112      	bne.n	80039b2 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a47      	ldr	r2, [pc, #284]	; (8003ab0 <HAL_SD_ReadBlocks+0x308>)
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003998:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e0eb      	b.n	8003b8a <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b8:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d096      	beq.n	80038ee <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d022      	beq.n	8003a14 <HAL_SD_ReadBlocks+0x26c>
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d91f      	bls.n	8003a14 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d8:	2b03      	cmp	r3, #3
 80039da:	d01b      	beq.n	8003a14 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4618      	mov	r0, r3
 80039e2:	f001 fdfb 	bl	80055dc <SDMMC_CmdStopTransfer>
 80039e6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80039e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d012      	beq.n	8003a14 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2f      	ldr	r2, [pc, #188]	; (8003ab0 <HAL_SD_ReadBlocks+0x308>)
 80039f4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039fc:	431a      	orrs	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e0ba      	b.n	8003b8a <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d012      	beq.n	8003a48 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a22      	ldr	r2, [pc, #136]	; (8003ab0 <HAL_SD_ReadBlocks+0x308>)
 8003a28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	f043 0208 	orr.w	r2, r3, #8
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2200      	movs	r2, #0
 8003a42:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e0a0      	b.n	8003b8a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	f003 0302 	and.w	r3, r3, #2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d012      	beq.n	8003a7c <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a15      	ldr	r2, [pc, #84]	; (8003ab0 <HAL_SD_ReadBlocks+0x308>)
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	f043 0202 	orr.w	r2, r3, #2
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e086      	b.n	8003b8a <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d063      	beq.n	8003b52 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	4a08      	ldr	r2, [pc, #32]	; (8003ab0 <HAL_SD_ReadBlocks+0x308>)
 8003a90:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a96:	f043 0220 	orr.w	r2, r3, #32
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2201      	movs	r2, #1
 8003aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e06c      	b.n	8003b8a <HAL_SD_ReadBlocks+0x3e2>
 8003ab0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f001 fc34 	bl	8005326 <SDIO_ReadFIFO>
 8003abe:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ac6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aca:	3301      	adds	r3, #1
 8003acc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ad0:	3b01      	subs	r3, #1
 8003ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad6:	0a1b      	lsrs	r3, r3, #8
 8003ad8:	b2da      	uxtb	r2, r3
 8003ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003adc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003ae4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aec:	0c1b      	lsrs	r3, r3, #16
 8003aee:	b2da      	uxtb	r2, r3
 8003af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af6:	3301      	adds	r3, #1
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003afc:	3b01      	subs	r3, #1
 8003afe:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b02:	0e1b      	lsrs	r3, r3, #24
 8003b04:	b2da      	uxtb	r2, r3
 8003b06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b08:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b12:	3b01      	subs	r3, #1
 8003b14:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003b16:	f7fe fab9 	bl	800208c <HAL_GetTick>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1e:	1ad3      	subs	r3, r2, r3
 8003b20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d902      	bls.n	8003b2c <HAL_SD_ReadBlocks+0x384>
 8003b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d112      	bne.n	8003b52 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a18      	ldr	r2, [pc, #96]	; (8003b94 <HAL_SD_ReadBlocks+0x3ec>)
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e01b      	b.n	8003b8a <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <HAL_SD_ReadBlocks+0x3be>
 8003b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d1a6      	bne.n	8003ab4 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f240 523a 	movw	r2, #1338	; 0x53a
 8003b6e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e006      	b.n	8003b8a <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b80:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
  }
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3748      	adds	r7, #72	; 0x48
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	004005ff 	.word	0x004005ff

08003b98 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b092      	sub	sp, #72	; 0x48
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
 8003ba4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003ba6:	f7fe fa71 	bl	800208c <HAL_GetTick>
 8003baa:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d107      	bne.n	8003bca <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e182      	b.n	8003ed0 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	f040 8175 	bne.w	8003ec2 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	441a      	add	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d907      	bls.n	8003bfc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf0:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e169      	b.n	8003ed0 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2203      	movs	r2, #3
 8003c00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d002      	beq.n	8003c1a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003c14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c16:	025b      	lsls	r3, r3, #9
 8003c18:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c22:	4618      	mov	r0, r3
 8003c24:	f001 fc30 	bl	8005488 <SDMMC_CmdBlockLength>
 8003c28:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00f      	beq.n	8003c50 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a9c      	ldr	r2, [pc, #624]	; (8003ea8 <HAL_SD_WriteBlocks+0x310>)
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e13f      	b.n	8003ed0 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003c50:	f04f 33ff 	mov.w	r3, #4294967295
 8003c54:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	025b      	lsls	r3, r3, #9
 8003c5a:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003c5c:	2390      	movs	r3, #144	; 0x90
 8003c5e:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003c60:	2300      	movs	r3, #0
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003c64:	2300      	movs	r3, #0
 8003c66:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f107 0218 	add.w	r2, r7, #24
 8003c74:	4611      	mov	r1, r2
 8003c76:	4618      	mov	r0, r3
 8003c78:	f001 fbda 	bl	8005430 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d90a      	bls.n	8003c98 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2220      	movs	r2, #32
 8003c86:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f001 fc82 	bl	8005598 <SDMMC_CmdWriteMultiBlock>
 8003c94:	6478      	str	r0, [r7, #68]	; 0x44
 8003c96:	e009      	b.n	8003cac <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2210      	movs	r2, #16
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f001 fc55 	bl	8005554 <SDMMC_CmdWriteSingleBlock>
 8003caa:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d012      	beq.n	8003cd8 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a7c      	ldr	r2, [pc, #496]	; (8003ea8 <HAL_SD_WriteBlocks+0x310>)
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2201      	movs	r2, #1
 8003cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e0fb      	b.n	8003ed0 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003cdc:	e065      	b.n	8003daa <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d040      	beq.n	8003d6e <HAL_SD_WriteBlocks+0x1d6>
 8003cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d03d      	beq.n	8003d6e <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	643b      	str	r3, [r7, #64]	; 0x40
 8003cf6:	e037      	b.n	8003d68 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8003cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d00:	3301      	adds	r3, #1
 8003d02:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d06:	3b01      	subs	r3, #1
 8003d08:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003d0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	021a      	lsls	r2, r3, #8
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d18:	3301      	adds	r3, #1
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	041a      	lsls	r2, r3, #16
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d30:	3301      	adds	r3, #1
 8003d32:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d36:	3b01      	subs	r3, #1
 8003d38:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	061a      	lsls	r2, r3, #24
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d48:	3301      	adds	r3, #1
 8003d4a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f107 0214 	add.w	r2, r7, #20
 8003d5a:	4611      	mov	r1, r2
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f001 faef 	bl	8005340 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003d62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d64:	3301      	adds	r3, #1
 8003d66:	643b      	str	r3, [r7, #64]	; 0x40
 8003d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d6a:	2b07      	cmp	r3, #7
 8003d6c:	d9c4      	bls.n	8003cf8 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003d6e:	f7fe f98d 	bl	800208c <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d7a:	429a      	cmp	r2, r3
 8003d7c:	d902      	bls.n	8003d84 <HAL_SD_WriteBlocks+0x1ec>
 8003d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d112      	bne.n	8003daa <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a47      	ldr	r2, [pc, #284]	; (8003ea8 <HAL_SD_WriteBlocks+0x310>)
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2200      	movs	r2, #0
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e092      	b.n	8003ed0 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003db0:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d092      	beq.n	8003cde <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d022      	beq.n	8003e0c <HAL_SD_WriteBlocks+0x274>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d91f      	bls.n	8003e0c <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d01b      	beq.n	8003e0c <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 fbff 	bl	80055dc <SDMMC_CmdStopTransfer>
 8003dde:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d012      	beq.n	8003e0c <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a2f      	ldr	r2, [pc, #188]	; (8003ea8 <HAL_SD_WriteBlocks+0x310>)
 8003dec:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e061      	b.n	8003ed0 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e12:	f003 0308 	and.w	r3, r3, #8
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d012      	beq.n	8003e40 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a22      	ldr	r2, [pc, #136]	; (8003ea8 <HAL_SD_WriteBlocks+0x310>)
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e26:	f043 0208 	orr.w	r2, r3, #8
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e047      	b.n	8003ed0 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d012      	beq.n	8003e74 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <HAL_SD_WriteBlocks+0x310>)
 8003e54:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e5a:	f043 0202 	orr.w	r2, r3, #2
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2201      	movs	r2, #1
 8003e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e02d      	b.n	8003ed0 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e7a:	f003 0310 	and.w	r3, r3, #16
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d014      	beq.n	8003eac <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a08      	ldr	r2, [pc, #32]	; (8003ea8 <HAL_SD_WriteBlocks+0x310>)
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8e:	f043 0210 	orr.w	r2, r3, #16
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e013      	b.n	8003ed0 <HAL_SD_WriteBlocks+0x338>
 8003ea8:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f240 523a 	movw	r2, #1338	; 0x53a
 8003eb4:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	e006      	b.n	8003ed0 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
  }
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3748      	adds	r7, #72	; 0x48
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}

08003ed8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ee6:	0f9b      	lsrs	r3, r3, #30
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef2:	0e9b      	lsrs	r3, r3, #26
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	f003 030f 	and.w	r3, r3, #15
 8003efa:	b2da      	uxtb	r2, r3
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f04:	0e1b      	lsrs	r3, r3, #24
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	f003 0303 	and.w	r3, r3, #3
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f16:	0c1b      	lsrs	r3, r3, #16
 8003f18:	b2da      	uxtb	r2, r3
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f22:	0a1b      	lsrs	r3, r3, #8
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f2e:	b2da      	uxtb	r2, r3
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f38:	0d1b      	lsrs	r3, r3, #20
 8003f3a:	b29a      	uxth	r2, r3
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f44:	0c1b      	lsrs	r3, r3, #16
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f56:	0bdb      	lsrs	r3, r3, #15
 8003f58:	b2db      	uxtb	r3, r3
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f68:	0b9b      	lsrs	r3, r3, #14
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	b2da      	uxtb	r2, r3
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f7a:	0b5b      	lsrs	r3, r3, #13
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f8c:	0b1b      	lsrs	r3, r3, #12
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	f003 0301 	and.w	r3, r3, #1
 8003f94:	b2da      	uxtb	r2, r3
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d163      	bne.n	8004070 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003fac:	009a      	lsls	r2, r3, #2
 8003fae:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fb2:	4013      	ands	r3, r2
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003fb8:	0f92      	lsrs	r2, r2, #30
 8003fba:	431a      	orrs	r2, r3
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fc4:	0edb      	lsrs	r3, r3, #27
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	f003 0307 	and.w	r3, r3, #7
 8003fcc:	b2da      	uxtb	r2, r3
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fd6:	0e1b      	lsrs	r3, r3, #24
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fe8:	0d5b      	lsrs	r3, r3, #21
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ffa:	0c9b      	lsrs	r3, r3, #18
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	b2da      	uxtb	r2, r3
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800400c:	0bdb      	lsrs	r3, r3, #15
 800400e:	b2db      	uxtb	r3, r3
 8004010:	f003 0307 	and.w	r3, r3, #7
 8004014:	b2da      	uxtb	r2, r3
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	7e1b      	ldrb	r3, [r3, #24]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	3302      	adds	r3, #2
 8004030:	2201      	movs	r2, #1
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800403a:	fb02 f203 	mul.w	r2, r2, r3
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	7a1b      	ldrb	r3, [r3, #8]
 8004046:	b2db      	uxtb	r3, r3
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	2201      	movs	r2, #1
 800404e:	409a      	lsls	r2, r3
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800405c:	0a52      	lsrs	r2, r2, #9
 800405e:	fb02 f203 	mul.w	r2, r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f44f 7200 	mov.w	r2, #512	; 0x200
 800406c:	661a      	str	r2, [r3, #96]	; 0x60
 800406e:	e031      	b.n	80040d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004074:	2b01      	cmp	r3, #1
 8004076:	d11d      	bne.n	80040b4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004086:	0c1b      	lsrs	r3, r3, #16
 8004088:	431a      	orrs	r2, r3
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	3301      	adds	r3, #1
 8004094:	029a      	lsls	r2, r3, #10
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	661a      	str	r2, [r3, #96]	; 0x60
 80040b2:	e00f      	b.n	80040d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a58      	ldr	r2, [pc, #352]	; (800421c <HAL_SD_GetCardCSD+0x344>)
 80040ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80040d0:	2301      	movs	r3, #1
 80040d2:	e09d      	b.n	8004210 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040d8:	0b9b      	lsrs	r3, r3, #14
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	f003 0301 	and.w	r3, r3, #1
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ea:	09db      	lsrs	r3, r3, #7
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004102:	b2da      	uxtb	r2, r3
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410c:	0fdb      	lsrs	r3, r3, #31
 800410e:	b2da      	uxtb	r2, r3
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004118:	0f5b      	lsrs	r3, r3, #29
 800411a:	b2db      	uxtb	r3, r3
 800411c:	f003 0303 	and.w	r3, r3, #3
 8004120:	b2da      	uxtb	r2, r3
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412a:	0e9b      	lsrs	r3, r3, #26
 800412c:	b2db      	uxtb	r3, r3
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	b2da      	uxtb	r2, r3
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413c:	0d9b      	lsrs	r3, r3, #22
 800413e:	b2db      	uxtb	r3, r3
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	b2da      	uxtb	r2, r3
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	0d5b      	lsrs	r3, r3, #21
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	b2da      	uxtb	r2, r3
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	2200      	movs	r2, #0
 8004162:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416a:	0c1b      	lsrs	r3, r3, #16
 800416c:	b2db      	uxtb	r3, r3
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	b2da      	uxtb	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800417e:	0bdb      	lsrs	r3, r3, #15
 8004180:	b2db      	uxtb	r3, r3
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	b2da      	uxtb	r2, r3
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	0b9b      	lsrs	r3, r3, #14
 8004194:	b2db      	uxtb	r3, r3
 8004196:	f003 0301 	and.w	r3, r3, #1
 800419a:	b2da      	uxtb	r2, r3
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	0b5b      	lsrs	r3, r3, #13
 80041a8:	b2db      	uxtb	r3, r3
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	b2da      	uxtb	r2, r3
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	0b1b      	lsrs	r3, r3, #12
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	f003 0301 	and.w	r3, r3, #1
 80041c2:	b2da      	uxtb	r2, r3
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	0a9b      	lsrs	r3, r3, #10
 80041d0:	b2db      	uxtb	r3, r3
 80041d2:	f003 0303 	and.w	r3, r3, #3
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e2:	0a1b      	lsrs	r3, r3, #8
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f6:	085b      	lsrs	r3, r3, #1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr
 800421c:	004005ff 	.word	0x004005ff

08004220 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
 8004228:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800426a:	2300      	movs	r3, #0
}
 800426c:	4618      	mov	r0, r3
 800426e:	370c      	adds	r7, #12
 8004270:	46bd      	mov	sp, r7
 8004272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004276:	4770      	bx	lr

08004278 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004278:	b5b0      	push	{r4, r5, r7, lr}
 800427a:	b08e      	sub	sp, #56	; 0x38
 800427c:	af04      	add	r7, sp, #16
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2203      	movs	r2, #3
 8004286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800428e:	2b03      	cmp	r3, #3
 8004290:	d02e      	beq.n	80042f0 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004298:	d106      	bne.n	80042a8 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800429e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	639a      	str	r2, [r3, #56]	; 0x38
 80042a6:	e029      	b.n	80042fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ae:	d10a      	bne.n	80042c6 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 fa01 	bl	80046b8 <SD_WideBus_Enable>
 80042b6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	431a      	orrs	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	639a      	str	r2, [r3, #56]	; 0x38
 80042c4:	e01a      	b.n	80042fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d10a      	bne.n	80042e2 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 fa3e 	bl	800474e <SD_WideBus_Disable>
 80042d2:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042da:	431a      	orrs	r2, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	639a      	str	r2, [r3, #56]	; 0x38
 80042e0:	e00c      	b.n	80042fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	639a      	str	r2, [r3, #56]	; 0x38
 80042ee:	e005      	b.n	80042fc <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	2b00      	cmp	r3, #0
 8004302:	d009      	beq.n	8004318 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a18      	ldr	r2, [pc, #96]	; (800436c <HAL_SD_ConfigWideBusOperation+0xf4>)
 800430a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2201      	movs	r2, #1
 8004310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e024      	b.n	8004362 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681d      	ldr	r5, [r3, #0]
 800433e:	466c      	mov	r4, sp
 8004340:	f107 0318 	add.w	r3, r7, #24
 8004344:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004348:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800434c:	f107 030c 	add.w	r3, r7, #12
 8004350:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004352:	4628      	mov	r0, r5
 8004354:	f000 ffbc 	bl	80052d0 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3728      	adds	r7, #40	; 0x28
 8004366:	46bd      	mov	sp, r7
 8004368:	bdb0      	pop	{r4, r5, r7, pc}
 800436a:	bf00      	nop
 800436c:	004005ff 	.word	0x004005ff

08004370 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800437c:	f107 030c 	add.w	r3, r7, #12
 8004380:	4619      	mov	r1, r3
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f970 	bl	8004668 <SD_SendStatus>
 8004388:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d005      	beq.n	800439c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	0a5b      	lsrs	r3, r3, #9
 80043a0:	f003 030f 	and.w	r3, r3, #15
 80043a4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80043a6:	693b      	ldr	r3, [r7, #16]
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80043b0:	b5b0      	push	{r4, r5, r7, lr}
 80043b2:	b094      	sub	sp, #80	; 0x50
 80043b4:	af04      	add	r7, sp, #16
 80043b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80043b8:	2301      	movs	r3, #1
 80043ba:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 ffdd 	bl	8005380 <SDIO_GetPowerState>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d102      	bne.n	80043d2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80043cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80043d0:	e0b7      	b.n	8004542 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	2b03      	cmp	r3, #3
 80043d8:	d02f      	beq.n	800443a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4618      	mov	r0, r3
 80043e0:	f001 fa06 	bl	80057f0 <SDMMC_CmdSendCID>
 80043e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80043e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d001      	beq.n	80043f0 <SD_InitCard+0x40>
    {
      return errorstate;
 80043ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043ee:	e0a8      	b.n	8004542 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f001 f807 	bl	800540a <SDIO_GetResponse>
 80043fc:	4602      	mov	r2, r0
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2104      	movs	r1, #4
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fffe 	bl	800540a <SDIO_GetResponse>
 800440e:	4602      	mov	r2, r0
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2108      	movs	r1, #8
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fff5 	bl	800540a <SDIO_GetResponse>
 8004420:	4602      	mov	r2, r0
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	210c      	movs	r1, #12
 800442c:	4618      	mov	r0, r3
 800442e:	f000 ffec 	bl	800540a <SDIO_GetResponse>
 8004432:	4602      	mov	r2, r0
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	2b03      	cmp	r3, #3
 8004440:	d00d      	beq.n	800445e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f107 020e 	add.w	r2, r7, #14
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f001 fa0c 	bl	800586a <SDMMC_CmdSetRelAdd>
 8004452:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004454:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <SD_InitCard+0xae>
    {
      return errorstate;
 800445a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800445c:	e071      	b.n	8004542 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004462:	2b03      	cmp	r3, #3
 8004464:	d036      	beq.n	80044d4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004466:	89fb      	ldrh	r3, [r7, #14]
 8004468:	461a      	mov	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	041b      	lsls	r3, r3, #16
 8004478:	4619      	mov	r1, r3
 800447a:	4610      	mov	r0, r2
 800447c:	f001 f9d6 	bl	800582c <SDMMC_CmdSendCSD>
 8004480:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <SD_InitCard+0xdc>
    {
      return errorstate;
 8004488:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800448a:	e05a      	b.n	8004542 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f000 ffb9 	bl	800540a <SDIO_GetResponse>
 8004498:	4602      	mov	r2, r0
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	2104      	movs	r1, #4
 80044a4:	4618      	mov	r0, r3
 80044a6:	f000 ffb0 	bl	800540a <SDIO_GetResponse>
 80044aa:	4602      	mov	r2, r0
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	2108      	movs	r1, #8
 80044b6:	4618      	mov	r0, r3
 80044b8:	f000 ffa7 	bl	800540a <SDIO_GetResponse>
 80044bc:	4602      	mov	r2, r0
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	210c      	movs	r1, #12
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 ff9e 	bl	800540a <SDIO_GetResponse>
 80044ce:	4602      	mov	r2, r0
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	2104      	movs	r1, #4
 80044da:	4618      	mov	r0, r3
 80044dc:	f000 ff95 	bl	800540a <SDIO_GetResponse>
 80044e0:	4603      	mov	r3, r0
 80044e2:	0d1a      	lsrs	r2, r3, #20
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80044e8:	f107 0310 	add.w	r3, r7, #16
 80044ec:	4619      	mov	r1, r3
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f7ff fcf2 	bl	8003ed8 <HAL_SD_GetCardCSD>
 80044f4:	4603      	mov	r3, r0
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80044fe:	e020      	b.n	8004542 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6819      	ldr	r1, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004508:	041b      	lsls	r3, r3, #16
 800450a:	f04f 0400 	mov.w	r4, #0
 800450e:	461a      	mov	r2, r3
 8004510:	4623      	mov	r3, r4
 8004512:	4608      	mov	r0, r1
 8004514:	f001 f884 	bl	8005620 <SDMMC_CmdSelDesel>
 8004518:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800451a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800451c:	2b00      	cmp	r3, #0
 800451e:	d001      	beq.n	8004524 <SD_InitCard+0x174>
  {
    return errorstate;
 8004520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004522:	e00e      	b.n	8004542 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681d      	ldr	r5, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	466c      	mov	r4, sp
 800452c:	f103 0210 	add.w	r2, r3, #16
 8004530:	ca07      	ldmia	r2, {r0, r1, r2}
 8004532:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004536:	3304      	adds	r3, #4
 8004538:	cb0e      	ldmia	r3, {r1, r2, r3}
 800453a:	4628      	mov	r0, r5
 800453c:	f000 fec8 	bl	80052d0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3740      	adds	r7, #64	; 0x40
 8004546:	46bd      	mov	sp, r7
 8004548:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800454c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004554:	2300      	movs	r3, #0
 8004556:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	2300      	movs	r3, #0
 800455e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4618      	mov	r0, r3
 8004566:	f001 f87e 	bl	8005666 <SDMMC_CmdGoIdleState>
 800456a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <SD_PowerON+0x2a>
  {
    return errorstate;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	e072      	b.n	800465c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4618      	mov	r0, r3
 800457c:	f001 f891 	bl	80056a2 <SDMMC_CmdOperCond>
 8004580:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d00d      	beq.n	80045a4 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4618      	mov	r0, r3
 8004594:	f001 f867 	bl	8005666 <SDMMC_CmdGoIdleState>
 8004598:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d004      	beq.n	80045aa <SD_PowerON+0x5e>
    {
      return errorstate;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	e05b      	b.n	800465c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d137      	bne.n	8004622 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2100      	movs	r1, #0
 80045b8:	4618      	mov	r0, r3
 80045ba:	f001 f891 	bl	80056e0 <SDMMC_CmdAppCommand>
 80045be:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d02d      	beq.n	8004622 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80045ca:	e047      	b.n	800465c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2100      	movs	r1, #0
 80045d2:	4618      	mov	r0, r3
 80045d4:	f001 f884 	bl	80056e0 <SDMMC_CmdAppCommand>
 80045d8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d001      	beq.n	80045e4 <SD_PowerON+0x98>
    {
      return errorstate;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	e03b      	b.n	800465c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	491e      	ldr	r1, [pc, #120]	; (8004664 <SD_PowerON+0x118>)
 80045ea:	4618      	mov	r0, r3
 80045ec:	f001 f89a 	bl	8005724 <SDMMC_CmdAppOperCommand>
 80045f0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d002      	beq.n	80045fe <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80045fc:	e02e      	b.n	800465c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2100      	movs	r1, #0
 8004604:	4618      	mov	r0, r3
 8004606:	f000 ff00 	bl	800540a <SDIO_GetResponse>
 800460a:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	0fdb      	lsrs	r3, r3, #31
 8004610:	2b01      	cmp	r3, #1
 8004612:	d101      	bne.n	8004618 <SD_PowerON+0xcc>
 8004614:	2301      	movs	r3, #1
 8004616:	e000      	b.n	800461a <SD_PowerON+0xce>
 8004618:	2300      	movs	r3, #0
 800461a:	613b      	str	r3, [r7, #16]

    count++;
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	3301      	adds	r3, #1
 8004620:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004628:	4293      	cmp	r3, r2
 800462a:	d802      	bhi.n	8004632 <SD_PowerON+0xe6>
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d0cc      	beq.n	80045cc <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004638:	4293      	cmp	r3, r2
 800463a:	d902      	bls.n	8004642 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800463c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004640:	e00c      	b.n	800465c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	645a      	str	r2, [r3, #68]	; 0x44
 8004652:	e002      	b.n	800465a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800465a:	2300      	movs	r3, #0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	c1100000 	.word	0xc1100000

08004668 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b084      	sub	sp, #16
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d102      	bne.n	800467e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004678:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800467c:	e018      	b.n	80046b0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681a      	ldr	r2, [r3, #0]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004686:	041b      	lsls	r3, r3, #16
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f001 f90e 	bl	80058ac <SDMMC_CmdSendStatus>
 8004690:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <SD_SendStatus+0x34>
  {
    return errorstate;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	e009      	b.n	80046b0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f000 feb1 	bl	800540a <SDIO_GetResponse>
 80046a8:	4602      	mov	r2, r0
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	2300      	movs	r3, #0
 80046c6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2100      	movs	r1, #0
 80046ce:	4618      	mov	r0, r3
 80046d0:	f000 fe9b 	bl	800540a <SDIO_GetResponse>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80046de:	d102      	bne.n	80046e6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80046e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80046e4:	e02f      	b.n	8004746 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80046e6:	f107 030c 	add.w	r3, r7, #12
 80046ea:	4619      	mov	r1, r3
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f879 	bl	80047e4 <SD_FindSCR>
 80046f2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	e023      	b.n	8004746 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d01c      	beq.n	8004742 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681a      	ldr	r2, [r3, #0]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004710:	041b      	lsls	r3, r3, #16
 8004712:	4619      	mov	r1, r3
 8004714:	4610      	mov	r0, r2
 8004716:	f000 ffe3 	bl	80056e0 <SDMMC_CmdAppCommand>
 800471a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	e00f      	b.n	8004746 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2102      	movs	r1, #2
 800472c:	4618      	mov	r0, r3
 800472e:	f001 f81c 	bl	800576a <SDMMC_CmdBusWidth>
 8004732:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d001      	beq.n	800473e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	e003      	b.n	8004746 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800473e:	2300      	movs	r3, #0
 8004740:	e001      	b.n	8004746 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004742:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004746:	4618      	mov	r0, r3
 8004748:	3718      	adds	r7, #24
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}

0800474e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800474e:	b580      	push	{r7, lr}
 8004750:	b086      	sub	sp, #24
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004756:	2300      	movs	r3, #0
 8004758:	60fb      	str	r3, [r7, #12]
 800475a:	2300      	movs	r3, #0
 800475c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2100      	movs	r1, #0
 8004764:	4618      	mov	r0, r3
 8004766:	f000 fe50 	bl	800540a <SDIO_GetResponse>
 800476a:	4603      	mov	r3, r0
 800476c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004770:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004774:	d102      	bne.n	800477c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004776:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800477a:	e02f      	b.n	80047dc <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800477c:	f107 030c 	add.w	r3, r7, #12
 8004780:	4619      	mov	r1, r3
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f000 f82e 	bl	80047e4 <SD_FindSCR>
 8004788:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d001      	beq.n	8004794 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	e023      	b.n	80047dc <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01c      	beq.n	80047d8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681a      	ldr	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a6:	041b      	lsls	r3, r3, #16
 80047a8:	4619      	mov	r1, r3
 80047aa:	4610      	mov	r0, r2
 80047ac:	f000 ff98 	bl	80056e0 <SDMMC_CmdAppCommand>
 80047b0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d001      	beq.n	80047bc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	e00f      	b.n	80047dc <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2100      	movs	r1, #0
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 ffd1 	bl	800576a <SDMMC_CmdBusWidth>
 80047c8:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	e003      	b.n	80047dc <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e001      	b.n	80047dc <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80047d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80047dc:	4618      	mov	r0, r3
 80047de:	3718      	adds	r7, #24
 80047e0:	46bd      	mov	sp, r7
 80047e2:	bd80      	pop	{r7, pc}

080047e4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80047e4:	b590      	push	{r4, r7, lr}
 80047e6:	b08f      	sub	sp, #60	; 0x3c
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80047ee:	f7fd fc4d 	bl	800208c <HAL_GetTick>
 80047f2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80047f4:	2300      	movs	r3, #0
 80047f6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80047f8:	2300      	movs	r3, #0
 80047fa:	60bb      	str	r3, [r7, #8]
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2108      	movs	r1, #8
 800480a:	4618      	mov	r0, r3
 800480c:	f000 fe3c 	bl	8005488 <SDMMC_CmdBlockLength>
 8004810:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <SD_FindSCR+0x38>
  {
    return errorstate;
 8004818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800481a:	e0a9      	b.n	8004970 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004824:	041b      	lsls	r3, r3, #16
 8004826:	4619      	mov	r1, r3
 8004828:	4610      	mov	r0, r2
 800482a:	f000 ff59 	bl	80056e0 <SDMMC_CmdAppCommand>
 800482e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	d001      	beq.n	800483a <SD_FindSCR+0x56>
  {
    return errorstate;
 8004836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004838:	e09a      	b.n	8004970 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800483a:	f04f 33ff 	mov.w	r3, #4294967295
 800483e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004840:	2308      	movs	r3, #8
 8004842:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004844:	2330      	movs	r3, #48	; 0x30
 8004846:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004848:	2302      	movs	r3, #2
 800484a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800484c:	2300      	movs	r3, #0
 800484e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004850:	2301      	movs	r3, #1
 8004852:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f107 0210 	add.w	r2, r7, #16
 800485c:	4611      	mov	r1, r2
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fde6 	bl	8005430 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 ffa0 	bl	80057ae <SDMMC_CmdSendSCR>
 800486e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	2b00      	cmp	r3, #0
 8004874:	d022      	beq.n	80048bc <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004878:	e07a      	b.n	8004970 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00e      	beq.n	80048a6 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6819      	ldr	r1, [r3, #0]
 800488c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	f107 0208 	add.w	r2, r7, #8
 8004894:	18d4      	adds	r4, r2, r3
 8004896:	4608      	mov	r0, r1
 8004898:	f000 fd45 	bl	8005326 <SDIO_ReadFIFO>
 800489c:	4603      	mov	r3, r0
 800489e:	6023      	str	r3, [r4, #0]
      index++;
 80048a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048a2:	3301      	adds	r3, #1
 80048a4:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80048a6:	f7fd fbf1 	bl	800208c <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b4:	d102      	bne.n	80048bc <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80048b6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80048ba:	e059      	b.n	8004970 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048c2:	f240 432a 	movw	r3, #1066	; 0x42a
 80048c6:	4013      	ands	r3, r2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d0d6      	beq.n	800487a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d2:	f003 0308 	and.w	r3, r3, #8
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d005      	beq.n	80048e6 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2208      	movs	r2, #8
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80048e2:	2308      	movs	r3, #8
 80048e4:	e044      	b.n	8004970 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048ec:	f003 0302 	and.w	r3, r3, #2
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d005      	beq.n	8004900 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2202      	movs	r2, #2
 80048fa:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80048fc:	2302      	movs	r3, #2
 80048fe:	e037      	b.n	8004970 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004906:	f003 0320 	and.w	r3, r3, #32
 800490a:	2b00      	cmp	r3, #0
 800490c:	d005      	beq.n	800491a <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	2220      	movs	r2, #32
 8004914:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004916:	2320      	movs	r3, #32
 8004918:	e02a      	b.n	8004970 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004922:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	061a      	lsls	r2, r3, #24
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	021b      	lsls	r3, r3, #8
 800492c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004930:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	0a1b      	lsrs	r3, r3, #8
 8004936:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800493a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	0e1b      	lsrs	r3, r3, #24
 8004940:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004944:	601a      	str	r2, [r3, #0]
    scr++;
 8004946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004948:	3304      	adds	r3, #4
 800494a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	061a      	lsls	r2, r3, #24
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	021b      	lsls	r3, r3, #8
 8004954:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004958:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	0a1b      	lsrs	r3, r3, #8
 800495e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004962:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	0e1b      	lsrs	r3, r3, #24
 8004968:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800496a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800496c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	373c      	adds	r7, #60	; 0x3c
 8004974:	46bd      	mov	sp, r7
 8004976:	bd90      	pop	{r4, r7, pc}

08004978 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b082      	sub	sp, #8
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e03f      	b.n	8004a0a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fd fa22 	bl	8001de8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2224      	movs	r2, #36	; 0x24
 80049a8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68da      	ldr	r2, [r3, #12]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f90b 	bl	8004bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	691a      	ldr	r2, [r3, #16]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80049d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	695a      	ldr	r2, [r3, #20]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80049e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	68da      	ldr	r2, [r3, #12]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b088      	sub	sp, #32
 8004a16:	af02      	add	r7, sp, #8
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	603b      	str	r3, [r7, #0]
 8004a1e:	4613      	mov	r3, r2
 8004a20:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	f040 8083 	bne.w	8004b3a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_UART_Transmit+0x2e>
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e07b      	b.n	8004b3c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d101      	bne.n	8004a52 <HAL_UART_Transmit+0x40>
 8004a4e:	2302      	movs	r3, #2
 8004a50:	e074      	b.n	8004b3c <HAL_UART_Transmit+0x12a>
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2221      	movs	r2, #33	; 0x21
 8004a64:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004a68:	f7fd fb10 	bl	800208c <HAL_GetTick>
 8004a6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	88fa      	ldrh	r2, [r7, #6]
 8004a72:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	88fa      	ldrh	r2, [r7, #6]
 8004a78:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004a82:	e042      	b.n	8004b0a <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	3b01      	subs	r3, #1
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a9a:	d122      	bne.n	8004ae2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	9300      	str	r3, [sp, #0]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	2180      	movs	r1, #128	; 0x80
 8004aa6:	68f8      	ldr	r0, [r7, #12]
 8004aa8:	f000 f84c 	bl	8004b44 <UART_WaitOnFlagUntilTimeout>
 8004aac:	4603      	mov	r3, r0
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d001      	beq.n	8004ab6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e042      	b.n	8004b3c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	881b      	ldrh	r3, [r3, #0]
 8004abe:	461a      	mov	r2, r3
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ac8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d103      	bne.n	8004ada <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	3302      	adds	r3, #2
 8004ad6:	60bb      	str	r3, [r7, #8]
 8004ad8:	e017      	b.n	8004b0a <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004ada:	68bb      	ldr	r3, [r7, #8]
 8004adc:	3301      	adds	r3, #1
 8004ade:	60bb      	str	r3, [r7, #8]
 8004ae0:	e013      	b.n	8004b0a <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	2180      	movs	r1, #128	; 0x80
 8004aec:	68f8      	ldr	r0, [r7, #12]
 8004aee:	f000 f829 	bl	8004b44 <UART_WaitOnFlagUntilTimeout>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004af8:	2303      	movs	r3, #3
 8004afa:	e01f      	b.n	8004b3c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	60ba      	str	r2, [r7, #8]
 8004b02:	781a      	ldrb	r2, [r3, #0]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d1b7      	bne.n	8004a84 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	9300      	str	r3, [sp, #0]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2140      	movs	r1, #64	; 0x40
 8004b1e:	68f8      	ldr	r0, [r7, #12]
 8004b20:	f000 f810 	bl	8004b44 <UART_WaitOnFlagUntilTimeout>
 8004b24:	4603      	mov	r3, r0
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d001      	beq.n	8004b2e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	e006      	b.n	8004b3c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004b36:	2300      	movs	r3, #0
 8004b38:	e000      	b.n	8004b3c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004b3a:	2302      	movs	r3, #2
  }
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b084      	sub	sp, #16
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	603b      	str	r3, [r7, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b54:	e02c      	b.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5c:	d028      	beq.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004b5e:	69bb      	ldr	r3, [r7, #24]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d007      	beq.n	8004b74 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b64:	f7fd fa92 	bl	800208c <HAL_GetTick>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	1ad3      	subs	r3, r2, r3
 8004b6e:	69ba      	ldr	r2, [r7, #24]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d21d      	bcs.n	8004bb0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68da      	ldr	r2, [r3, #12]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b82:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	695a      	ldr	r2, [r3, #20]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004bac:	2303      	movs	r3, #3
 8004bae:	e00f      	b.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	79fb      	ldrb	r3, [r7, #7]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d0c3      	beq.n	8004b56 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3710      	adds	r7, #16
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bdc:	b085      	sub	sp, #20
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68da      	ldr	r2, [r3, #12]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	689a      	ldr	r2, [r3, #8]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	691b      	ldr	r3, [r3, #16]
 8004c00:	431a      	orrs	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	695b      	ldr	r3, [r3, #20]
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	69db      	ldr	r3, [r3, #28]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004c1a:	f023 030c 	bic.w	r3, r3, #12
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6812      	ldr	r2, [r2, #0]
 8004c22:	68f9      	ldr	r1, [r7, #12]
 8004c24:	430b      	orrs	r3, r1
 8004c26:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	695b      	ldr	r3, [r3, #20]
 8004c2e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699a      	ldr	r2, [r3, #24]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	69db      	ldr	r3, [r3, #28]
 8004c42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c46:	f040 818b 	bne.w	8004f60 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4ac1      	ldr	r2, [pc, #772]	; (8004f54 <UART_SetConfig+0x37c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d005      	beq.n	8004c60 <UART_SetConfig+0x88>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4abf      	ldr	r2, [pc, #764]	; (8004f58 <UART_SetConfig+0x380>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	f040 80bd 	bne.w	8004dda <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c60:	f7fd fdda 	bl	8002818 <HAL_RCC_GetPCLK2Freq>
 8004c64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	461d      	mov	r5, r3
 8004c6a:	f04f 0600 	mov.w	r6, #0
 8004c6e:	46a8      	mov	r8, r5
 8004c70:	46b1      	mov	r9, r6
 8004c72:	eb18 0308 	adds.w	r3, r8, r8
 8004c76:	eb49 0409 	adc.w	r4, r9, r9
 8004c7a:	4698      	mov	r8, r3
 8004c7c:	46a1      	mov	r9, r4
 8004c7e:	eb18 0805 	adds.w	r8, r8, r5
 8004c82:	eb49 0906 	adc.w	r9, r9, r6
 8004c86:	f04f 0100 	mov.w	r1, #0
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004c92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004c96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004c9a:	4688      	mov	r8, r1
 8004c9c:	4691      	mov	r9, r2
 8004c9e:	eb18 0005 	adds.w	r0, r8, r5
 8004ca2:	eb49 0106 	adc.w	r1, r9, r6
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	461d      	mov	r5, r3
 8004cac:	f04f 0600 	mov.w	r6, #0
 8004cb0:	196b      	adds	r3, r5, r5
 8004cb2:	eb46 0406 	adc.w	r4, r6, r6
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	4623      	mov	r3, r4
 8004cba:	f7fb ff95 	bl	8000be8 <__aeabi_uldivmod>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	460c      	mov	r4, r1
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	4ba5      	ldr	r3, [pc, #660]	; (8004f5c <UART_SetConfig+0x384>)
 8004cc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	461d      	mov	r5, r3
 8004cd4:	f04f 0600 	mov.w	r6, #0
 8004cd8:	46a9      	mov	r9, r5
 8004cda:	46b2      	mov	sl, r6
 8004cdc:	eb19 0309 	adds.w	r3, r9, r9
 8004ce0:	eb4a 040a 	adc.w	r4, sl, sl
 8004ce4:	4699      	mov	r9, r3
 8004ce6:	46a2      	mov	sl, r4
 8004ce8:	eb19 0905 	adds.w	r9, r9, r5
 8004cec:	eb4a 0a06 	adc.w	sl, sl, r6
 8004cf0:	f04f 0100 	mov.w	r1, #0
 8004cf4:	f04f 0200 	mov.w	r2, #0
 8004cf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d04:	4689      	mov	r9, r1
 8004d06:	4692      	mov	sl, r2
 8004d08:	eb19 0005 	adds.w	r0, r9, r5
 8004d0c:	eb4a 0106 	adc.w	r1, sl, r6
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	461d      	mov	r5, r3
 8004d16:	f04f 0600 	mov.w	r6, #0
 8004d1a:	196b      	adds	r3, r5, r5
 8004d1c:	eb46 0406 	adc.w	r4, r6, r6
 8004d20:	461a      	mov	r2, r3
 8004d22:	4623      	mov	r3, r4
 8004d24:	f7fb ff60 	bl	8000be8 <__aeabi_uldivmod>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4b8b      	ldr	r3, [pc, #556]	; (8004f5c <UART_SetConfig+0x384>)
 8004d30:	fba3 1302 	umull	r1, r3, r3, r2
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	2164      	movs	r1, #100	; 0x64
 8004d38:	fb01 f303 	mul.w	r3, r1, r3
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	00db      	lsls	r3, r3, #3
 8004d40:	3332      	adds	r3, #50	; 0x32
 8004d42:	4a86      	ldr	r2, [pc, #536]	; (8004f5c <UART_SetConfig+0x384>)
 8004d44:	fba2 2303 	umull	r2, r3, r2, r3
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	005b      	lsls	r3, r3, #1
 8004d4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d50:	4498      	add	r8, r3
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	461d      	mov	r5, r3
 8004d56:	f04f 0600 	mov.w	r6, #0
 8004d5a:	46a9      	mov	r9, r5
 8004d5c:	46b2      	mov	sl, r6
 8004d5e:	eb19 0309 	adds.w	r3, r9, r9
 8004d62:	eb4a 040a 	adc.w	r4, sl, sl
 8004d66:	4699      	mov	r9, r3
 8004d68:	46a2      	mov	sl, r4
 8004d6a:	eb19 0905 	adds.w	r9, r9, r5
 8004d6e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d72:	f04f 0100 	mov.w	r1, #0
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d7e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d82:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d86:	4689      	mov	r9, r1
 8004d88:	4692      	mov	sl, r2
 8004d8a:	eb19 0005 	adds.w	r0, r9, r5
 8004d8e:	eb4a 0106 	adc.w	r1, sl, r6
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	461d      	mov	r5, r3
 8004d98:	f04f 0600 	mov.w	r6, #0
 8004d9c:	196b      	adds	r3, r5, r5
 8004d9e:	eb46 0406 	adc.w	r4, r6, r6
 8004da2:	461a      	mov	r2, r3
 8004da4:	4623      	mov	r3, r4
 8004da6:	f7fb ff1f 	bl	8000be8 <__aeabi_uldivmod>
 8004daa:	4603      	mov	r3, r0
 8004dac:	460c      	mov	r4, r1
 8004dae:	461a      	mov	r2, r3
 8004db0:	4b6a      	ldr	r3, [pc, #424]	; (8004f5c <UART_SetConfig+0x384>)
 8004db2:	fba3 1302 	umull	r1, r3, r3, r2
 8004db6:	095b      	lsrs	r3, r3, #5
 8004db8:	2164      	movs	r1, #100	; 0x64
 8004dba:	fb01 f303 	mul.w	r3, r1, r3
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	3332      	adds	r3, #50	; 0x32
 8004dc4:	4a65      	ldr	r2, [pc, #404]	; (8004f5c <UART_SetConfig+0x384>)
 8004dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dca:	095b      	lsrs	r3, r3, #5
 8004dcc:	f003 0207 	and.w	r2, r3, #7
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4442      	add	r2, r8
 8004dd6:	609a      	str	r2, [r3, #8]
 8004dd8:	e26f      	b.n	80052ba <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dda:	f7fd fd09 	bl	80027f0 <HAL_RCC_GetPCLK1Freq>
 8004dde:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	461d      	mov	r5, r3
 8004de4:	f04f 0600 	mov.w	r6, #0
 8004de8:	46a8      	mov	r8, r5
 8004dea:	46b1      	mov	r9, r6
 8004dec:	eb18 0308 	adds.w	r3, r8, r8
 8004df0:	eb49 0409 	adc.w	r4, r9, r9
 8004df4:	4698      	mov	r8, r3
 8004df6:	46a1      	mov	r9, r4
 8004df8:	eb18 0805 	adds.w	r8, r8, r5
 8004dfc:	eb49 0906 	adc.w	r9, r9, r6
 8004e00:	f04f 0100 	mov.w	r1, #0
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e0c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e10:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e14:	4688      	mov	r8, r1
 8004e16:	4691      	mov	r9, r2
 8004e18:	eb18 0005 	adds.w	r0, r8, r5
 8004e1c:	eb49 0106 	adc.w	r1, r9, r6
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	461d      	mov	r5, r3
 8004e26:	f04f 0600 	mov.w	r6, #0
 8004e2a:	196b      	adds	r3, r5, r5
 8004e2c:	eb46 0406 	adc.w	r4, r6, r6
 8004e30:	461a      	mov	r2, r3
 8004e32:	4623      	mov	r3, r4
 8004e34:	f7fb fed8 	bl	8000be8 <__aeabi_uldivmod>
 8004e38:	4603      	mov	r3, r0
 8004e3a:	460c      	mov	r4, r1
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	4b47      	ldr	r3, [pc, #284]	; (8004f5c <UART_SetConfig+0x384>)
 8004e40:	fba3 2302 	umull	r2, r3, r3, r2
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	461d      	mov	r5, r3
 8004e4e:	f04f 0600 	mov.w	r6, #0
 8004e52:	46a9      	mov	r9, r5
 8004e54:	46b2      	mov	sl, r6
 8004e56:	eb19 0309 	adds.w	r3, r9, r9
 8004e5a:	eb4a 040a 	adc.w	r4, sl, sl
 8004e5e:	4699      	mov	r9, r3
 8004e60:	46a2      	mov	sl, r4
 8004e62:	eb19 0905 	adds.w	r9, r9, r5
 8004e66:	eb4a 0a06 	adc.w	sl, sl, r6
 8004e6a:	f04f 0100 	mov.w	r1, #0
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004e7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004e7e:	4689      	mov	r9, r1
 8004e80:	4692      	mov	sl, r2
 8004e82:	eb19 0005 	adds.w	r0, r9, r5
 8004e86:	eb4a 0106 	adc.w	r1, sl, r6
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	461d      	mov	r5, r3
 8004e90:	f04f 0600 	mov.w	r6, #0
 8004e94:	196b      	adds	r3, r5, r5
 8004e96:	eb46 0406 	adc.w	r4, r6, r6
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	4623      	mov	r3, r4
 8004e9e:	f7fb fea3 	bl	8000be8 <__aeabi_uldivmod>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	4b2c      	ldr	r3, [pc, #176]	; (8004f5c <UART_SetConfig+0x384>)
 8004eaa:	fba3 1302 	umull	r1, r3, r3, r2
 8004eae:	095b      	lsrs	r3, r3, #5
 8004eb0:	2164      	movs	r1, #100	; 0x64
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	3332      	adds	r3, #50	; 0x32
 8004ebc:	4a27      	ldr	r2, [pc, #156]	; (8004f5c <UART_SetConfig+0x384>)
 8004ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec2:	095b      	lsrs	r3, r3, #5
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004eca:	4498      	add	r8, r3
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	461d      	mov	r5, r3
 8004ed0:	f04f 0600 	mov.w	r6, #0
 8004ed4:	46a9      	mov	r9, r5
 8004ed6:	46b2      	mov	sl, r6
 8004ed8:	eb19 0309 	adds.w	r3, r9, r9
 8004edc:	eb4a 040a 	adc.w	r4, sl, sl
 8004ee0:	4699      	mov	r9, r3
 8004ee2:	46a2      	mov	sl, r4
 8004ee4:	eb19 0905 	adds.w	r9, r9, r5
 8004ee8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004eec:	f04f 0100 	mov.w	r1, #0
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ef8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004efc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f00:	4689      	mov	r9, r1
 8004f02:	4692      	mov	sl, r2
 8004f04:	eb19 0005 	adds.w	r0, r9, r5
 8004f08:	eb4a 0106 	adc.w	r1, sl, r6
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	461d      	mov	r5, r3
 8004f12:	f04f 0600 	mov.w	r6, #0
 8004f16:	196b      	adds	r3, r5, r5
 8004f18:	eb46 0406 	adc.w	r4, r6, r6
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	4623      	mov	r3, r4
 8004f20:	f7fb fe62 	bl	8000be8 <__aeabi_uldivmod>
 8004f24:	4603      	mov	r3, r0
 8004f26:	460c      	mov	r4, r1
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <UART_SetConfig+0x384>)
 8004f2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004f30:	095b      	lsrs	r3, r3, #5
 8004f32:	2164      	movs	r1, #100	; 0x64
 8004f34:	fb01 f303 	mul.w	r3, r1, r3
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	3332      	adds	r3, #50	; 0x32
 8004f3e:	4a07      	ldr	r2, [pc, #28]	; (8004f5c <UART_SetConfig+0x384>)
 8004f40:	fba2 2303 	umull	r2, r3, r2, r3
 8004f44:	095b      	lsrs	r3, r3, #5
 8004f46:	f003 0207 	and.w	r2, r3, #7
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4442      	add	r2, r8
 8004f50:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004f52:	e1b2      	b.n	80052ba <UART_SetConfig+0x6e2>
 8004f54:	40011000 	.word	0x40011000
 8004f58:	40011400 	.word	0x40011400
 8004f5c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4ad7      	ldr	r2, [pc, #860]	; (80052c4 <UART_SetConfig+0x6ec>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d005      	beq.n	8004f76 <UART_SetConfig+0x39e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4ad6      	ldr	r2, [pc, #856]	; (80052c8 <UART_SetConfig+0x6f0>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	f040 80d1 	bne.w	8005118 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f76:	f7fd fc4f 	bl	8002818 <HAL_RCC_GetPCLK2Freq>
 8004f7a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	469a      	mov	sl, r3
 8004f80:	f04f 0b00 	mov.w	fp, #0
 8004f84:	46d0      	mov	r8, sl
 8004f86:	46d9      	mov	r9, fp
 8004f88:	eb18 0308 	adds.w	r3, r8, r8
 8004f8c:	eb49 0409 	adc.w	r4, r9, r9
 8004f90:	4698      	mov	r8, r3
 8004f92:	46a1      	mov	r9, r4
 8004f94:	eb18 080a 	adds.w	r8, r8, sl
 8004f98:	eb49 090b 	adc.w	r9, r9, fp
 8004f9c:	f04f 0100 	mov.w	r1, #0
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004fa8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004fac:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004fb0:	4688      	mov	r8, r1
 8004fb2:	4691      	mov	r9, r2
 8004fb4:	eb1a 0508 	adds.w	r5, sl, r8
 8004fb8:	eb4b 0609 	adc.w	r6, fp, r9
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	f04f 0400 	mov.w	r4, #0
 8004fce:	0094      	lsls	r4, r2, #2
 8004fd0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fd4:	008b      	lsls	r3, r1, #2
 8004fd6:	461a      	mov	r2, r3
 8004fd8:	4623      	mov	r3, r4
 8004fda:	4628      	mov	r0, r5
 8004fdc:	4631      	mov	r1, r6
 8004fde:	f7fb fe03 	bl	8000be8 <__aeabi_uldivmod>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	4bb8      	ldr	r3, [pc, #736]	; (80052cc <UART_SetConfig+0x6f4>)
 8004fea:	fba3 2302 	umull	r2, r3, r3, r2
 8004fee:	095b      	lsrs	r3, r3, #5
 8004ff0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	469b      	mov	fp, r3
 8004ff8:	f04f 0c00 	mov.w	ip, #0
 8004ffc:	46d9      	mov	r9, fp
 8004ffe:	46e2      	mov	sl, ip
 8005000:	eb19 0309 	adds.w	r3, r9, r9
 8005004:	eb4a 040a 	adc.w	r4, sl, sl
 8005008:	4699      	mov	r9, r3
 800500a:	46a2      	mov	sl, r4
 800500c:	eb19 090b 	adds.w	r9, r9, fp
 8005010:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005014:	f04f 0100 	mov.w	r1, #0
 8005018:	f04f 0200 	mov.w	r2, #0
 800501c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005020:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005024:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005028:	4689      	mov	r9, r1
 800502a:	4692      	mov	sl, r2
 800502c:	eb1b 0509 	adds.w	r5, fp, r9
 8005030:	eb4c 060a 	adc.w	r6, ip, sl
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	4619      	mov	r1, r3
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	f04f 0400 	mov.w	r4, #0
 8005046:	0094      	lsls	r4, r2, #2
 8005048:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800504c:	008b      	lsls	r3, r1, #2
 800504e:	461a      	mov	r2, r3
 8005050:	4623      	mov	r3, r4
 8005052:	4628      	mov	r0, r5
 8005054:	4631      	mov	r1, r6
 8005056:	f7fb fdc7 	bl	8000be8 <__aeabi_uldivmod>
 800505a:	4603      	mov	r3, r0
 800505c:	460c      	mov	r4, r1
 800505e:	461a      	mov	r2, r3
 8005060:	4b9a      	ldr	r3, [pc, #616]	; (80052cc <UART_SetConfig+0x6f4>)
 8005062:	fba3 1302 	umull	r1, r3, r3, r2
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	2164      	movs	r1, #100	; 0x64
 800506a:	fb01 f303 	mul.w	r3, r1, r3
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	011b      	lsls	r3, r3, #4
 8005072:	3332      	adds	r3, #50	; 0x32
 8005074:	4a95      	ldr	r2, [pc, #596]	; (80052cc <UART_SetConfig+0x6f4>)
 8005076:	fba2 2303 	umull	r2, r3, r2, r3
 800507a:	095b      	lsrs	r3, r3, #5
 800507c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005080:	4498      	add	r8, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	469b      	mov	fp, r3
 8005086:	f04f 0c00 	mov.w	ip, #0
 800508a:	46d9      	mov	r9, fp
 800508c:	46e2      	mov	sl, ip
 800508e:	eb19 0309 	adds.w	r3, r9, r9
 8005092:	eb4a 040a 	adc.w	r4, sl, sl
 8005096:	4699      	mov	r9, r3
 8005098:	46a2      	mov	sl, r4
 800509a:	eb19 090b 	adds.w	r9, r9, fp
 800509e:	eb4a 0a0c 	adc.w	sl, sl, ip
 80050a2:	f04f 0100 	mov.w	r1, #0
 80050a6:	f04f 0200 	mov.w	r2, #0
 80050aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050b6:	4689      	mov	r9, r1
 80050b8:	4692      	mov	sl, r2
 80050ba:	eb1b 0509 	adds.w	r5, fp, r9
 80050be:	eb4c 060a 	adc.w	r6, ip, sl
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	4619      	mov	r1, r3
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	f04f 0400 	mov.w	r4, #0
 80050d4:	0094      	lsls	r4, r2, #2
 80050d6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050da:	008b      	lsls	r3, r1, #2
 80050dc:	461a      	mov	r2, r3
 80050de:	4623      	mov	r3, r4
 80050e0:	4628      	mov	r0, r5
 80050e2:	4631      	mov	r1, r6
 80050e4:	f7fb fd80 	bl	8000be8 <__aeabi_uldivmod>
 80050e8:	4603      	mov	r3, r0
 80050ea:	460c      	mov	r4, r1
 80050ec:	461a      	mov	r2, r3
 80050ee:	4b77      	ldr	r3, [pc, #476]	; (80052cc <UART_SetConfig+0x6f4>)
 80050f0:	fba3 1302 	umull	r1, r3, r3, r2
 80050f4:	095b      	lsrs	r3, r3, #5
 80050f6:	2164      	movs	r1, #100	; 0x64
 80050f8:	fb01 f303 	mul.w	r3, r1, r3
 80050fc:	1ad3      	subs	r3, r2, r3
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	3332      	adds	r3, #50	; 0x32
 8005102:	4a72      	ldr	r2, [pc, #456]	; (80052cc <UART_SetConfig+0x6f4>)
 8005104:	fba2 2303 	umull	r2, r3, r2, r3
 8005108:	095b      	lsrs	r3, r3, #5
 800510a:	f003 020f 	and.w	r2, r3, #15
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4442      	add	r2, r8
 8005114:	609a      	str	r2, [r3, #8]
 8005116:	e0d0      	b.n	80052ba <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8005118:	f7fd fb6a 	bl	80027f0 <HAL_RCC_GetPCLK1Freq>
 800511c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	469a      	mov	sl, r3
 8005122:	f04f 0b00 	mov.w	fp, #0
 8005126:	46d0      	mov	r8, sl
 8005128:	46d9      	mov	r9, fp
 800512a:	eb18 0308 	adds.w	r3, r8, r8
 800512e:	eb49 0409 	adc.w	r4, r9, r9
 8005132:	4698      	mov	r8, r3
 8005134:	46a1      	mov	r9, r4
 8005136:	eb18 080a 	adds.w	r8, r8, sl
 800513a:	eb49 090b 	adc.w	r9, r9, fp
 800513e:	f04f 0100 	mov.w	r1, #0
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800514a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800514e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005152:	4688      	mov	r8, r1
 8005154:	4691      	mov	r9, r2
 8005156:	eb1a 0508 	adds.w	r5, sl, r8
 800515a:	eb4b 0609 	adc.w	r6, fp, r9
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4619      	mov	r1, r3
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	f04f 0400 	mov.w	r4, #0
 8005170:	0094      	lsls	r4, r2, #2
 8005172:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005176:	008b      	lsls	r3, r1, #2
 8005178:	461a      	mov	r2, r3
 800517a:	4623      	mov	r3, r4
 800517c:	4628      	mov	r0, r5
 800517e:	4631      	mov	r1, r6
 8005180:	f7fb fd32 	bl	8000be8 <__aeabi_uldivmod>
 8005184:	4603      	mov	r3, r0
 8005186:	460c      	mov	r4, r1
 8005188:	461a      	mov	r2, r3
 800518a:	4b50      	ldr	r3, [pc, #320]	; (80052cc <UART_SetConfig+0x6f4>)
 800518c:	fba3 2302 	umull	r2, r3, r3, r2
 8005190:	095b      	lsrs	r3, r3, #5
 8005192:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005196:	68bb      	ldr	r3, [r7, #8]
 8005198:	469b      	mov	fp, r3
 800519a:	f04f 0c00 	mov.w	ip, #0
 800519e:	46d9      	mov	r9, fp
 80051a0:	46e2      	mov	sl, ip
 80051a2:	eb19 0309 	adds.w	r3, r9, r9
 80051a6:	eb4a 040a 	adc.w	r4, sl, sl
 80051aa:	4699      	mov	r9, r3
 80051ac:	46a2      	mov	sl, r4
 80051ae:	eb19 090b 	adds.w	r9, r9, fp
 80051b2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80051b6:	f04f 0100 	mov.w	r1, #0
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051c2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80051c6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80051ca:	4689      	mov	r9, r1
 80051cc:	4692      	mov	sl, r2
 80051ce:	eb1b 0509 	adds.w	r5, fp, r9
 80051d2:	eb4c 060a 	adc.w	r6, ip, sl
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	4619      	mov	r1, r3
 80051dc:	f04f 0200 	mov.w	r2, #0
 80051e0:	f04f 0300 	mov.w	r3, #0
 80051e4:	f04f 0400 	mov.w	r4, #0
 80051e8:	0094      	lsls	r4, r2, #2
 80051ea:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80051ee:	008b      	lsls	r3, r1, #2
 80051f0:	461a      	mov	r2, r3
 80051f2:	4623      	mov	r3, r4
 80051f4:	4628      	mov	r0, r5
 80051f6:	4631      	mov	r1, r6
 80051f8:	f7fb fcf6 	bl	8000be8 <__aeabi_uldivmod>
 80051fc:	4603      	mov	r3, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	461a      	mov	r2, r3
 8005202:	4b32      	ldr	r3, [pc, #200]	; (80052cc <UART_SetConfig+0x6f4>)
 8005204:	fba3 1302 	umull	r1, r3, r3, r2
 8005208:	095b      	lsrs	r3, r3, #5
 800520a:	2164      	movs	r1, #100	; 0x64
 800520c:	fb01 f303 	mul.w	r3, r1, r3
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	3332      	adds	r3, #50	; 0x32
 8005216:	4a2d      	ldr	r2, [pc, #180]	; (80052cc <UART_SetConfig+0x6f4>)
 8005218:	fba2 2303 	umull	r2, r3, r2, r3
 800521c:	095b      	lsrs	r3, r3, #5
 800521e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005222:	4498      	add	r8, r3
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	469b      	mov	fp, r3
 8005228:	f04f 0c00 	mov.w	ip, #0
 800522c:	46d9      	mov	r9, fp
 800522e:	46e2      	mov	sl, ip
 8005230:	eb19 0309 	adds.w	r3, r9, r9
 8005234:	eb4a 040a 	adc.w	r4, sl, sl
 8005238:	4699      	mov	r9, r3
 800523a:	46a2      	mov	sl, r4
 800523c:	eb19 090b 	adds.w	r9, r9, fp
 8005240:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005244:	f04f 0100 	mov.w	r1, #0
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005250:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005254:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005258:	4689      	mov	r9, r1
 800525a:	4692      	mov	sl, r2
 800525c:	eb1b 0509 	adds.w	r5, fp, r9
 8005260:	eb4c 060a 	adc.w	r6, ip, sl
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	4619      	mov	r1, r3
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	f04f 0400 	mov.w	r4, #0
 8005276:	0094      	lsls	r4, r2, #2
 8005278:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800527c:	008b      	lsls	r3, r1, #2
 800527e:	461a      	mov	r2, r3
 8005280:	4623      	mov	r3, r4
 8005282:	4628      	mov	r0, r5
 8005284:	4631      	mov	r1, r6
 8005286:	f7fb fcaf 	bl	8000be8 <__aeabi_uldivmod>
 800528a:	4603      	mov	r3, r0
 800528c:	460c      	mov	r4, r1
 800528e:	461a      	mov	r2, r3
 8005290:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <UART_SetConfig+0x6f4>)
 8005292:	fba3 1302 	umull	r1, r3, r3, r2
 8005296:	095b      	lsrs	r3, r3, #5
 8005298:	2164      	movs	r1, #100	; 0x64
 800529a:	fb01 f303 	mul.w	r3, r1, r3
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	011b      	lsls	r3, r3, #4
 80052a2:	3332      	adds	r3, #50	; 0x32
 80052a4:	4a09      	ldr	r2, [pc, #36]	; (80052cc <UART_SetConfig+0x6f4>)
 80052a6:	fba2 2303 	umull	r2, r3, r2, r3
 80052aa:	095b      	lsrs	r3, r3, #5
 80052ac:	f003 020f 	and.w	r2, r3, #15
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4442      	add	r2, r8
 80052b6:	609a      	str	r2, [r3, #8]
}
 80052b8:	e7ff      	b.n	80052ba <UART_SetConfig+0x6e2>
 80052ba:	bf00      	nop
 80052bc:	3714      	adds	r7, #20
 80052be:	46bd      	mov	sp, r7
 80052c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c4:	40011000 	.word	0x40011000
 80052c8:	40011400 	.word	0x40011400
 80052cc:	51eb851f 	.word	0x51eb851f

080052d0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80052d0:	b084      	sub	sp, #16
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
 80052da:	f107 001c 	add.w	r0, r7, #28
 80052de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80052e6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80052e8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80052ea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80052ee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80052f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80052f2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80052f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80052f6:	431a      	orrs	r2, r3
             Init.ClockDiv
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80052fa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800530a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3714      	adds	r7, #20
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	b004      	add	sp, #16
 8005324:	4770      	bx	lr

08005326 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8005326:	b480      	push	{r7}
 8005328:	b083      	sub	sp, #12
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8005334:	4618      	mov	r0, r3
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
 8005348:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005354:	2300      	movs	r3, #0
}
 8005356:	4618      	mov	r0, r3
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8005362:	b580      	push	{r7, lr}
 8005364:	b082      	sub	sp, #8
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	2203      	movs	r2, #3
 800536e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8005370:	2002      	movs	r0, #2
 8005372:	f7fc fe97 	bl	80020a4 <HAL_Delay>
  
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 0303 	and.w	r3, r3, #3
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr

0800539c <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800539c:	b480      	push	{r7}
 800539e:	b085      	sub	sp, #20
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053ba:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80053c0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80053c6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	4313      	orrs	r3, r2
 80053cc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80053d6:	f023 030f 	bic.w	r3, r3, #15
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	431a      	orrs	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b083      	sub	sp, #12
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	b2db      	uxtb	r3, r3
}
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800540a:	b480      	push	{r7}
 800540c:	b085      	sub	sp, #20
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	3314      	adds	r3, #20
 8005418:	461a      	mov	r2, r3
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	4413      	add	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
}  
 8005424:	4618      	mov	r0, r3
 8005426:	3714      	adds	r7, #20
 8005428:	46bd      	mov	sp, r7
 800542a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542e:	4770      	bx	lr

08005430 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005456:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800545c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005462:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800546e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	431a      	orrs	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800547a:	2300      	movs	r3, #0

}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b088      	sub	sp, #32
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005496:	2310      	movs	r3, #16
 8005498:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800549a:	2340      	movs	r3, #64	; 0x40
 800549c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800549e:	2300      	movs	r3, #0
 80054a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054a8:	f107 0308 	add.w	r3, r7, #8
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff ff74 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80054b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054b8:	2110      	movs	r1, #16
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fa40 	bl	8005940 <SDMMC_GetCmdResp1>
 80054c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054c2:	69fb      	ldr	r3, [r7, #28]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3720      	adds	r7, #32
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b088      	sub	sp, #32
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80054da:	2311      	movs	r3, #17
 80054dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054de:	2340      	movs	r3, #64	; 0x40
 80054e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054ec:	f107 0308 	add.w	r3, r7, #8
 80054f0:	4619      	mov	r1, r3
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f7ff ff52 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80054f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054fc:	2111      	movs	r1, #17
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f000 fa1e 	bl	8005940 <SDMMC_GetCmdResp1>
 8005504:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005506:	69fb      	ldr	r3, [r7, #28]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3720      	adds	r7, #32
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b088      	sub	sp, #32
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800551e:	2312      	movs	r3, #18
 8005520:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005522:	2340      	movs	r3, #64	; 0x40
 8005524:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005526:	2300      	movs	r3, #0
 8005528:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800552a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800552e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005530:	f107 0308 	add.w	r3, r7, #8
 8005534:	4619      	mov	r1, r3
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f7ff ff30 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800553c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005540:	2112      	movs	r1, #18
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f000 f9fc 	bl	8005940 <SDMMC_GetCmdResp1>
 8005548:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800554a:	69fb      	ldr	r3, [r7, #28]
}
 800554c:	4618      	mov	r0, r3
 800554e:	3720      	adds	r7, #32
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}

08005554 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005554:	b580      	push	{r7, lr}
 8005556:	b088      	sub	sp, #32
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005562:	2318      	movs	r3, #24
 8005564:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005566:	2340      	movs	r3, #64	; 0x40
 8005568:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800556a:	2300      	movs	r3, #0
 800556c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800556e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005572:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005574:	f107 0308 	add.w	r3, r7, #8
 8005578:	4619      	mov	r1, r3
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff ff0e 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005580:	f241 3288 	movw	r2, #5000	; 0x1388
 8005584:	2118      	movs	r1, #24
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f9da 	bl	8005940 <SDMMC_GetCmdResp1>
 800558c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800558e:	69fb      	ldr	r3, [r7, #28]
}
 8005590:	4618      	mov	r0, r3
 8005592:	3720      	adds	r7, #32
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b088      	sub	sp, #32
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
 80055a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80055a6:	2319      	movs	r3, #25
 80055a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055aa:	2340      	movs	r3, #64	; 0x40
 80055ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055ae:	2300      	movs	r3, #0
 80055b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055b8:	f107 0308 	add.w	r3, r7, #8
 80055bc:	4619      	mov	r1, r3
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff feec 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80055c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c8:	2119      	movs	r1, #25
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f9b8 	bl	8005940 <SDMMC_GetCmdResp1>
 80055d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055d2:	69fb      	ldr	r3, [r7, #28]
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3720      	adds	r7, #32
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b088      	sub	sp, #32
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80055e8:	230c      	movs	r3, #12
 80055ea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055ec:	2340      	movs	r3, #64	; 0x40
 80055ee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055f0:	2300      	movs	r3, #0
 80055f2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055f8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055fa:	f107 0308 	add.w	r3, r7, #8
 80055fe:	4619      	mov	r1, r3
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f7ff fecb 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005606:	4a05      	ldr	r2, [pc, #20]	; (800561c <SDMMC_CmdStopTransfer+0x40>)
 8005608:	210c      	movs	r1, #12
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f000 f998 	bl	8005940 <SDMMC_GetCmdResp1>
 8005610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005612:	69fb      	ldr	r3, [r7, #28]
}
 8005614:	4618      	mov	r0, r3
 8005616:	3720      	adds	r7, #32
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}
 800561c:	05f5e100 	.word	0x05f5e100

08005620 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b08a      	sub	sp, #40	; 0x28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005630:	2307      	movs	r3, #7
 8005632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005634:	2340      	movs	r3, #64	; 0x40
 8005636:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005638:	2300      	movs	r3, #0
 800563a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800563c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005640:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005642:	f107 0310 	add.w	r3, r7, #16
 8005646:	4619      	mov	r1, r3
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f7ff fea7 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800564e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005652:	2107      	movs	r1, #7
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f973 	bl	8005940 <SDMMC_GetCmdResp1>
 800565a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800565e:	4618      	mov	r0, r3
 8005660:	3728      	adds	r7, #40	; 0x28
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}

08005666 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005666:	b580      	push	{r7, lr}
 8005668:	b088      	sub	sp, #32
 800566a:	af00      	add	r7, sp, #0
 800566c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800566e:	2300      	movs	r3, #0
 8005670:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005672:	2300      	movs	r3, #0
 8005674:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005676:	2300      	movs	r3, #0
 8005678:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800567a:	2300      	movs	r3, #0
 800567c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800567e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005682:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005684:	f107 0308 	add.w	r3, r7, #8
 8005688:	4619      	mov	r1, r3
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7ff fe86 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f92d 	bl	80058f0 <SDMMC_GetCmdError>
 8005696:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005698:	69fb      	ldr	r3, [r7, #28]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3720      	adds	r7, #32
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80056a2:	b580      	push	{r7, lr}
 80056a4:	b088      	sub	sp, #32
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80056aa:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80056ae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80056b0:	2308      	movs	r3, #8
 80056b2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056b4:	2340      	movs	r3, #64	; 0x40
 80056b6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056b8:	2300      	movs	r3, #0
 80056ba:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056c0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80056c2:	f107 0308 	add.w	r3, r7, #8
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7ff fe67 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80056ce:	6878      	ldr	r0, [r7, #4]
 80056d0:	f000 fb16 	bl	8005d00 <SDMMC_GetCmdResp7>
 80056d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80056d6:	69fb      	ldr	r3, [r7, #28]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80056ee:	2337      	movs	r3, #55	; 0x37
 80056f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80056f2:	2340      	movs	r3, #64	; 0x40
 80056f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80056f6:	2300      	movs	r3, #0
 80056f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80056fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005700:	f107 0308 	add.w	r3, r7, #8
 8005704:	4619      	mov	r1, r3
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7ff fe48 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800570c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005710:	2137      	movs	r1, #55	; 0x37
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f914 	bl	8005940 <SDMMC_GetCmdResp1>
 8005718:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800571a:	69fb      	ldr	r3, [r7, #28]
}
 800571c:	4618      	mov	r0, r3
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b088      	sub	sp, #32
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005738:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800573a:	2329      	movs	r3, #41	; 0x29
 800573c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800573e:	2340      	movs	r3, #64	; 0x40
 8005740:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005742:	2300      	movs	r3, #0
 8005744:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800574a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800574c:	f107 0308 	add.w	r3, r7, #8
 8005750:	4619      	mov	r1, r3
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff fe22 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fa23 	bl	8005ba4 <SDMMC_GetCmdResp3>
 800575e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005760:	69fb      	ldr	r3, [r7, #28]
}
 8005762:	4618      	mov	r0, r3
 8005764:	3720      	adds	r7, #32
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}

0800576a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800576a:	b580      	push	{r7, lr}
 800576c:	b088      	sub	sp, #32
 800576e:	af00      	add	r7, sp, #0
 8005770:	6078      	str	r0, [r7, #4]
 8005772:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005778:	2306      	movs	r3, #6
 800577a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800577c:	2340      	movs	r3, #64	; 0x40
 800577e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005780:	2300      	movs	r3, #0
 8005782:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005788:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800578a:	f107 0308 	add.w	r3, r7, #8
 800578e:	4619      	mov	r1, r3
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff fe03 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005796:	f241 3288 	movw	r2, #5000	; 0x1388
 800579a:	2106      	movs	r1, #6
 800579c:	6878      	ldr	r0, [r7, #4]
 800579e:	f000 f8cf 	bl	8005940 <SDMMC_GetCmdResp1>
 80057a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057a4:	69fb      	ldr	r3, [r7, #28]
}
 80057a6:	4618      	mov	r0, r3
 80057a8:	3720      	adds	r7, #32
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80057ae:	b580      	push	{r7, lr}
 80057b0:	b088      	sub	sp, #32
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80057b6:	2300      	movs	r3, #0
 80057b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80057ba:	2333      	movs	r3, #51	; 0x33
 80057bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80057be:	2340      	movs	r3, #64	; 0x40
 80057c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80057c2:	2300      	movs	r3, #0
 80057c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80057c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80057cc:	f107 0308 	add.w	r3, r7, #8
 80057d0:	4619      	mov	r1, r3
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7ff fde2 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80057d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80057dc:	2133      	movs	r1, #51	; 0x33
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f8ae 	bl	8005940 <SDMMC_GetCmdResp1>
 80057e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80057e6:	69fb      	ldr	r3, [r7, #28]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80057f8:	2300      	movs	r3, #0
 80057fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80057fc:	2302      	movs	r3, #2
 80057fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005800:	23c0      	movs	r3, #192	; 0xc0
 8005802:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005808:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800580c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800580e:	f107 0308 	add.w	r3, r7, #8
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f7ff fdc1 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f97c 	bl	8005b18 <SDMMC_GetCmdResp2>
 8005820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005822:	69fb      	ldr	r3, [r7, #28]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3720      	adds	r7, #32
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b088      	sub	sp, #32
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800583a:	2309      	movs	r3, #9
 800583c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800583e:	23c0      	movs	r3, #192	; 0xc0
 8005840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800584a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800584c:	f107 0308 	add.w	r3, r7, #8
 8005850:	4619      	mov	r1, r3
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7ff fda2 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f95d 	bl	8005b18 <SDMMC_GetCmdResp2>
 800585e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005860:	69fb      	ldr	r3, [r7, #28]
}
 8005862:	4618      	mov	r0, r3
 8005864:	3720      	adds	r7, #32
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b088      	sub	sp, #32
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
 8005872:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005874:	2300      	movs	r3, #0
 8005876:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005878:	2303      	movs	r3, #3
 800587a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800587c:	2340      	movs	r3, #64	; 0x40
 800587e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005880:	2300      	movs	r3, #0
 8005882:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005884:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005888:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800588a:	f107 0308 	add.w	r3, r7, #8
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7ff fd83 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005896:	683a      	ldr	r2, [r7, #0]
 8005898:	2103      	movs	r1, #3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f9bc 	bl	8005c18 <SDMMC_GetCmdResp6>
 80058a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058a2:	69fb      	ldr	r3, [r7, #28]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3720      	adds	r7, #32
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}

080058ac <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80058ba:	230d      	movs	r3, #13
 80058bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80058be:	2340      	movs	r3, #64	; 0x40
 80058c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80058c2:	2300      	movs	r3, #0
 80058c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80058c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80058ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80058cc:	f107 0308 	add.w	r3, r7, #8
 80058d0:	4619      	mov	r1, r3
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f7ff fd62 	bl	800539c <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80058d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80058dc:	210d      	movs	r1, #13
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f82e 	bl	8005940 <SDMMC_GetCmdResp1>
 80058e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80058e6:	69fb      	ldr	r3, [r7, #28]
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3720      	adds	r7, #32
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80058f0:	b490      	push	{r4, r7}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058f8:	4b0f      	ldr	r3, [pc, #60]	; (8005938 <SDMMC_GetCmdError+0x48>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a0f      	ldr	r2, [pc, #60]	; (800593c <SDMMC_GetCmdError+0x4c>)
 80058fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005902:	0a5b      	lsrs	r3, r3, #9
 8005904:	f241 3288 	movw	r2, #5000	; 0x1388
 8005908:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800590c:	4623      	mov	r3, r4
 800590e:	1e5c      	subs	r4, r3, #1
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005914:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005918:	e009      	b.n	800592e <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005922:	2b00      	cmp	r3, #0
 8005924:	d0f2      	beq.n	800590c <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	22c5      	movs	r2, #197	; 0xc5
 800592a:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bc90      	pop	{r4, r7}
 8005936:	4770      	bx	lr
 8005938:	20000000 	.word	0x20000000
 800593c:	10624dd3 	.word	0x10624dd3

08005940 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005940:	b590      	push	{r4, r7, lr}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	460b      	mov	r3, r1
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800594e:	4b6f      	ldr	r3, [pc, #444]	; (8005b0c <SDMMC_GetCmdResp1+0x1cc>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a6f      	ldr	r2, [pc, #444]	; (8005b10 <SDMMC_GetCmdResp1+0x1d0>)
 8005954:	fba2 2303 	umull	r2, r3, r2, r3
 8005958:	0a5b      	lsrs	r3, r3, #9
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005960:	4623      	mov	r3, r4
 8005962:	1e5c      	subs	r4, r3, #1
 8005964:	2b00      	cmp	r3, #0
 8005966:	d102      	bne.n	800596e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005968:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800596c:	e0c9      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005972:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0f0      	beq.n	8005960 <SDMMC_GetCmdResp1+0x20>
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005984:	2b00      	cmp	r3, #0
 8005986:	d1eb      	bne.n	8005960 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800598c:	f003 0304 	and.w	r3, r3, #4
 8005990:	2b00      	cmp	r3, #0
 8005992:	d004      	beq.n	800599e <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2204      	movs	r2, #4
 8005998:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800599a:	2304      	movs	r3, #4
 800599c:	e0b1      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d004      	beq.n	80059b4 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2201      	movs	r2, #1
 80059ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0a6      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	22c5      	movs	r2, #197	; 0xc5
 80059b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7ff fd18 	bl	80053f0 <SDIO_GetCommandResponse>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	7afb      	ldrb	r3, [r7, #11]
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d001      	beq.n	80059ce <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e099      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80059ce:	2100      	movs	r1, #0
 80059d0:	68f8      	ldr	r0, [r7, #12]
 80059d2:	f7ff fd1a 	bl	800540a <SDIO_GetResponse>
 80059d6:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80059d8:	693a      	ldr	r2, [r7, #16]
 80059da:	4b4e      	ldr	r3, [pc, #312]	; (8005b14 <SDMMC_GetCmdResp1+0x1d4>)
 80059dc:	4013      	ands	r3, r2
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d101      	bne.n	80059e6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e08d      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	da02      	bge.n	80059f2 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80059ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80059f0:	e087      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80059fc:	2340      	movs	r3, #64	; 0x40
 80059fe:	e080      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005a0a:	2380      	movs	r3, #128	; 0x80
 8005a0c:	e079      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8005a18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a1c:	e071      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d002      	beq.n	8005a2e <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005a28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005a2c:	e069      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005a38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a3c:	e061      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d002      	beq.n	8005a4e <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005a48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a4c:	e059      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a5c:	e051      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a6c:	e049      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d002      	beq.n	8005a7e <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005a78:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a7c:	e041      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005a88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a8c:	e039      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005a8e:	693b      	ldr	r3, [r7, #16]
 8005a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d002      	beq.n	8005a9e <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005a98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005a9c:	e031      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005aa8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005aac:	e029      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d002      	beq.n	8005abe <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005ab8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005abc:	e021      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005ac8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005acc:	e019      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d002      	beq.n	8005ade <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005ad8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005adc:	e011      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005ae8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005aec:	e009      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f003 0308 	and.w	r3, r3, #8
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005af8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005afc:	e001      	b.n	8005b02 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005afe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005b02:	4618      	mov	r0, r3
 8005b04:	371c      	adds	r7, #28
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd90      	pop	{r4, r7, pc}
 8005b0a:	bf00      	nop
 8005b0c:	20000000 	.word	0x20000000
 8005b10:	10624dd3 	.word	0x10624dd3
 8005b14:	fdffe008 	.word	0xfdffe008

08005b18 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8005b18:	b490      	push	{r4, r7}
 8005b1a:	b084      	sub	sp, #16
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005b20:	4b1e      	ldr	r3, [pc, #120]	; (8005b9c <SDMMC_GetCmdResp2+0x84>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a1e      	ldr	r2, [pc, #120]	; (8005ba0 <SDMMC_GetCmdResp2+0x88>)
 8005b26:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2a:	0a5b      	lsrs	r3, r3, #9
 8005b2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b30:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005b34:	4623      	mov	r3, r4
 8005b36:	1e5c      	subs	r4, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d102      	bne.n	8005b42 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005b3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005b40:	e026      	b.n	8005b90 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b46:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d0f0      	beq.n	8005b34 <SDMMC_GetCmdResp2+0x1c>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1eb      	bne.n	8005b34 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b60:	f003 0304 	and.w	r3, r3, #4
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d004      	beq.n	8005b72 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005b6e:	2304      	movs	r3, #4
 8005b70:	e00e      	b.n	8005b90 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b76:	f003 0301 	and.w	r3, r3, #1
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d004      	beq.n	8005b88 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2201      	movs	r2, #1
 8005b82:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005b84:	2301      	movs	r3, #1
 8005b86:	e003      	b.n	8005b90 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	22c5      	movs	r2, #197	; 0xc5
 8005b8c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bc90      	pop	{r4, r7}
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20000000 	.word	0x20000000
 8005ba0:	10624dd3 	.word	0x10624dd3

08005ba4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005ba4:	b490      	push	{r4, r7}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005bac:	4b18      	ldr	r3, [pc, #96]	; (8005c10 <SDMMC_GetCmdResp3+0x6c>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a18      	ldr	r2, [pc, #96]	; (8005c14 <SDMMC_GetCmdResp3+0x70>)
 8005bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb6:	0a5b      	lsrs	r3, r3, #9
 8005bb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bbc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005bc0:	4623      	mov	r3, r4
 8005bc2:	1e5c      	subs	r4, r3, #1
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005bc8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005bcc:	e01b      	b.n	8005c06 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d0f0      	beq.n	8005bc0 <SDMMC_GetCmdResp3+0x1c>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1eb      	bne.n	8005bc0 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bec:	f003 0304 	and.w	r3, r3, #4
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	2204      	movs	r2, #4
 8005bf8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005bfa:	2304      	movs	r3, #4
 8005bfc:	e003      	b.n	8005c06 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	22c5      	movs	r2, #197	; 0xc5
 8005c02:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc90      	pop	{r4, r7}
 8005c0e:	4770      	bx	lr
 8005c10:	20000000 	.word	0x20000000
 8005c14:	10624dd3 	.word	0x10624dd3

08005c18 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005c18:	b590      	push	{r4, r7, lr}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	460b      	mov	r3, r1
 8005c22:	607a      	str	r2, [r7, #4]
 8005c24:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005c26:	4b34      	ldr	r3, [pc, #208]	; (8005cf8 <SDMMC_GetCmdResp6+0xe0>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a34      	ldr	r2, [pc, #208]	; (8005cfc <SDMMC_GetCmdResp6+0xe4>)
 8005c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c30:	0a5b      	lsrs	r3, r3, #9
 8005c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c36:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005c3a:	4623      	mov	r3, r4
 8005c3c:	1e5c      	subs	r4, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d102      	bne.n	8005c48 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005c42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005c46:	e052      	b.n	8005cee <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c4c:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d0f0      	beq.n	8005c3a <SDMMC_GetCmdResp6+0x22>
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d1eb      	bne.n	8005c3a <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c66:	f003 0304 	and.w	r3, r3, #4
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d004      	beq.n	8005c78 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2204      	movs	r2, #4
 8005c72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005c74:	2304      	movs	r3, #4
 8005c76:	e03a      	b.n	8005cee <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e02f      	b.n	8005cee <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f7ff fbae 	bl	80053f0 <SDIO_GetCommandResponse>
 8005c94:	4603      	mov	r3, r0
 8005c96:	461a      	mov	r2, r3
 8005c98:	7afb      	ldrb	r3, [r7, #11]
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d001      	beq.n	8005ca2 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e025      	b.n	8005cee <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	22c5      	movs	r2, #197	; 0xc5
 8005ca6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005ca8:	2100      	movs	r1, #0
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff fbad 	bl	800540a <SDIO_GetResponse>
 8005cb0:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d106      	bne.n	8005cca <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	0c1b      	lsrs	r3, r3, #16
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e011      	b.n	8005cee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d002      	beq.n	8005cda <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005cd8:	e009      	b.n	8005cee <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005ce4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ce8:	e001      	b.n	8005cee <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	371c      	adds	r7, #28
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd90      	pop	{r4, r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20000000 	.word	0x20000000
 8005cfc:	10624dd3 	.word	0x10624dd3

08005d00 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005d00:	b490      	push	{r4, r7}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005d08:	4b21      	ldr	r3, [pc, #132]	; (8005d90 <SDMMC_GetCmdResp7+0x90>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a21      	ldr	r2, [pc, #132]	; (8005d94 <SDMMC_GetCmdResp7+0x94>)
 8005d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d12:	0a5b      	lsrs	r3, r3, #9
 8005d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d18:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005d1c:	4623      	mov	r3, r4
 8005d1e:	1e5c      	subs	r4, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d102      	bne.n	8005d2a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005d24:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005d28:	e02c      	b.n	8005d84 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d2e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d0f0      	beq.n	8005d1c <SDMMC_GetCmdResp7+0x1c>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d1eb      	bne.n	8005d1c <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d48:	f003 0304 	and.w	r3, r3, #4
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d004      	beq.n	8005d5a <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2204      	movs	r2, #4
 8005d54:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005d56:	2304      	movs	r3, #4
 8005d58:	e014      	b.n	8005d84 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d5e:	f003 0301 	and.w	r3, r3, #1
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d004      	beq.n	8005d70 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2201      	movs	r2, #1
 8005d6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e009      	b.n	8005d84 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2240      	movs	r2, #64	; 0x40
 8005d80:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005d82:	2300      	movs	r3, #0
  
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bc90      	pop	{r4, r7}
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20000000 	.word	0x20000000
 8005d94:	10624dd3 	.word	0x10624dd3

08005d98 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005d9c:	4904      	ldr	r1, [pc, #16]	; (8005db0 <MX_FATFS_Init+0x18>)
 8005d9e:	4805      	ldr	r0, [pc, #20]	; (8005db4 <MX_FATFS_Init+0x1c>)
 8005da0:	f002 fbc0 	bl	8008524 <FATFS_LinkDriver>
 8005da4:	4603      	mov	r3, r0
 8005da6:	461a      	mov	r2, r3
 8005da8:	4b03      	ldr	r3, [pc, #12]	; (8005db8 <MX_FATFS_Init+0x20>)
 8005daa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005dac:	bf00      	nop
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	200009a0 	.word	0x200009a0
 8005db4:	0800ae54 	.word	0x0800ae54
 8005db8:	2000099c 	.word	0x2000099c

08005dbc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005dc0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005dd6:	f000 f879 	bl	8005ecc <BSP_SD_IsDetected>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d001      	beq.n	8005de4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e012      	b.n	8005e0a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005de4:	480b      	ldr	r0, [pc, #44]	; (8005e14 <BSP_SD_Init+0x48>)
 8005de6:	f7fd fc4f 	bl	8003688 <HAL_SD_Init>
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005dee:	79fb      	ldrb	r3, [r7, #7]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d109      	bne.n	8005e08 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005df4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005df8:	4806      	ldr	r0, [pc, #24]	; (8005e14 <BSP_SD_Init+0x48>)
 8005dfa:	f7fe fa3d 	bl	8004278 <HAL_SD_ConfigWideBusOperation>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d001      	beq.n	8005e08 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005e08:	79fb      	ldrb	r3, [r7, #7]
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3708      	adds	r7, #8
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000878 	.word	0x20000878

08005e18 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b088      	sub	sp, #32
 8005e1c:	af02      	add	r7, sp, #8
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	4806      	ldr	r0, [pc, #24]	; (8005e50 <BSP_SD_ReadBlocks+0x38>)
 8005e36:	f7fd fcb7 	bl	80037a8 <HAL_SD_ReadBlocks>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d001      	beq.n	8005e44 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3718      	adds	r7, #24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000878 	.word	0x20000878

08005e54 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af02      	add	r7, sp, #8
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
 8005e60:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68ba      	ldr	r2, [r7, #8]
 8005e6e:	68f9      	ldr	r1, [r7, #12]
 8005e70:	4806      	ldr	r0, [pc, #24]	; (8005e8c <BSP_SD_WriteBlocks+0x38>)
 8005e72:	f7fd fe91 	bl	8003b98 <HAL_SD_WriteBlocks>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d001      	beq.n	8005e80 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000878 	.word	0x20000878

08005e90 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005e94:	4805      	ldr	r0, [pc, #20]	; (8005eac <BSP_SD_GetCardState+0x1c>)
 8005e96:	f7fe fa6b 	bl	8004370 <HAL_SD_GetCardState>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	bf14      	ite	ne
 8005ea0:	2301      	movne	r3, #1
 8005ea2:	2300      	moveq	r3, #0
 8005ea4:	b2db      	uxtb	r3, r3
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000878 	.word	0x20000878

08005eb0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	4803      	ldr	r0, [pc, #12]	; (8005ec8 <BSP_SD_GetCardInfo+0x18>)
 8005ebc:	f7fe f9b0 	bl	8004220 <HAL_SD_GetCardInfo>
}
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	20000878 	.word	0x20000878

08005ecc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005ed6:	79fb      	ldrb	r3, [r7, #7]
 8005ed8:	b2db      	uxtb	r3, r3
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
	...

08005ee8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005ef2:	4b0b      	ldr	r3, [pc, #44]	; (8005f20 <SD_CheckStatus+0x38>)
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005ef8:	f7ff ffca 	bl	8005e90 <BSP_SD_GetCardState>
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d107      	bne.n	8005f12 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005f02:	4b07      	ldr	r3, [pc, #28]	; (8005f20 <SD_CheckStatus+0x38>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	f023 0301 	bic.w	r3, r3, #1
 8005f0c:	b2da      	uxtb	r2, r3
 8005f0e:	4b04      	ldr	r3, [pc, #16]	; (8005f20 <SD_CheckStatus+0x38>)
 8005f10:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005f12:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <SD_CheckStatus+0x38>)
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	b2db      	uxtb	r3, r3
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3708      	adds	r7, #8
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000009 	.word	0x20000009

08005f24 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005f2e:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <SD_initialize+0x38>)
 8005f30:	2201      	movs	r2, #1
 8005f32:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005f34:	f7ff ff4a 	bl	8005dcc <BSP_SD_Init>
 8005f38:	4603      	mov	r3, r0
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d107      	bne.n	8005f4e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005f3e:	79fb      	ldrb	r3, [r7, #7]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7ff ffd1 	bl	8005ee8 <SD_CheckStatus>
 8005f46:	4603      	mov	r3, r0
 8005f48:	461a      	mov	r2, r3
 8005f4a:	4b04      	ldr	r3, [pc, #16]	; (8005f5c <SD_initialize+0x38>)
 8005f4c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005f4e:	4b03      	ldr	r3, [pc, #12]	; (8005f5c <SD_initialize+0x38>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	b2db      	uxtb	r3, r3
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	20000009 	.word	0x20000009

08005f60 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b082      	sub	sp, #8
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005f6a:	79fb      	ldrb	r3, [r7, #7]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f7ff ffbb 	bl	8005ee8 <SD_CheckStatus>
 8005f72:	4603      	mov	r3, r0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3708      	adds	r7, #8
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b086      	sub	sp, #24
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	607a      	str	r2, [r7, #4]
 8005f86:	603b      	str	r3, [r7, #0]
 8005f88:	4603      	mov	r3, r0
 8005f8a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005f8c:	2301      	movs	r3, #1
 8005f8e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005f90:	f04f 33ff 	mov.w	r3, #4294967295
 8005f94:	683a      	ldr	r2, [r7, #0]
 8005f96:	6879      	ldr	r1, [r7, #4]
 8005f98:	68b8      	ldr	r0, [r7, #8]
 8005f9a:	f7ff ff3d 	bl	8005e18 <BSP_SD_ReadBlocks>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d107      	bne.n	8005fb4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005fa4:	bf00      	nop
 8005fa6:	f7ff ff73 	bl	8005e90 <BSP_SD_GetCardState>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d1fa      	bne.n	8005fa6 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005fb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3718      	adds	r7, #24
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}

08005fbe <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b086      	sub	sp, #24
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
 8005fca:	4603      	mov	r3, r0
 8005fcc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8005fd6:	683a      	ldr	r2, [r7, #0]
 8005fd8:	6879      	ldr	r1, [r7, #4]
 8005fda:	68b8      	ldr	r0, [r7, #8]
 8005fdc:	f7ff ff3a 	bl	8005e54 <BSP_SD_WriteBlocks>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d107      	bne.n	8005ff6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005fe6:	bf00      	nop
 8005fe8:	f7ff ff52 	bl	8005e90 <BSP_SD_GetCardState>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1fa      	bne.n	8005fe8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08c      	sub	sp, #48	; 0x30
 8006004:	af00      	add	r7, sp, #0
 8006006:	4603      	mov	r3, r0
 8006008:	603a      	str	r2, [r7, #0]
 800600a:	71fb      	strb	r3, [r7, #7]
 800600c:	460b      	mov	r3, r1
 800600e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006016:	4b25      	ldr	r3, [pc, #148]	; (80060ac <SD_ioctl+0xac>)
 8006018:	781b      	ldrb	r3, [r3, #0]
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d001      	beq.n	8006028 <SD_ioctl+0x28>
 8006024:	2303      	movs	r3, #3
 8006026:	e03c      	b.n	80060a2 <SD_ioctl+0xa2>

  switch (cmd)
 8006028:	79bb      	ldrb	r3, [r7, #6]
 800602a:	2b03      	cmp	r3, #3
 800602c:	d834      	bhi.n	8006098 <SD_ioctl+0x98>
 800602e:	a201      	add	r2, pc, #4	; (adr r2, 8006034 <SD_ioctl+0x34>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	08006045 	.word	0x08006045
 8006038:	0800604d 	.word	0x0800604d
 800603c:	08006065 	.word	0x08006065
 8006040:	0800607f 	.word	0x0800607f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006044:	2300      	movs	r3, #0
 8006046:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800604a:	e028      	b.n	800609e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800604c:	f107 030c 	add.w	r3, r7, #12
 8006050:	4618      	mov	r0, r3
 8006052:	f7ff ff2d 	bl	8005eb0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006056:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800605c:	2300      	movs	r3, #0
 800605e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006062:	e01c      	b.n	800609e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006064:	f107 030c 	add.w	r3, r7, #12
 8006068:	4618      	mov	r0, r3
 800606a:	f7ff ff21 	bl	8005eb0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800606e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006070:	b29a      	uxth	r2, r3
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006076:	2300      	movs	r3, #0
 8006078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800607c:	e00f      	b.n	800609e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800607e:	f107 030c 	add.w	r3, r7, #12
 8006082:	4618      	mov	r0, r3
 8006084:	f7ff ff14 	bl	8005eb0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	0a5a      	lsrs	r2, r3, #9
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006090:	2300      	movs	r3, #0
 8006092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006096:	e002      	b.n	800609e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006098:	2304      	movs	r3, #4
 800609a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800609e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3730      	adds	r7, #48	; 0x30
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
 80060aa:	bf00      	nop
 80060ac:	20000009 	.word	0x20000009

080060b0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b084      	sub	sp, #16
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	4603      	mov	r3, r0
 80060b8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80060ba:	79fb      	ldrb	r3, [r7, #7]
 80060bc:	4a08      	ldr	r2, [pc, #32]	; (80060e0 <disk_status+0x30>)
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	685b      	ldr	r3, [r3, #4]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	79fa      	ldrb	r2, [r7, #7]
 80060c8:	4905      	ldr	r1, [pc, #20]	; (80060e0 <disk_status+0x30>)
 80060ca:	440a      	add	r2, r1
 80060cc:	7a12      	ldrb	r2, [r2, #8]
 80060ce:	4610      	mov	r0, r2
 80060d0:	4798      	blx	r3
 80060d2:	4603      	mov	r3, r0
 80060d4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80060d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3710      	adds	r7, #16
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	200002f4 	.word	0x200002f4

080060e4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	4603      	mov	r3, r0
 80060ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80060ee:	2300      	movs	r3, #0
 80060f0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80060f2:	79fb      	ldrb	r3, [r7, #7]
 80060f4:	4a0d      	ldr	r2, [pc, #52]	; (800612c <disk_initialize+0x48>)
 80060f6:	5cd3      	ldrb	r3, [r2, r3]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d111      	bne.n	8006120 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80060fc:	79fb      	ldrb	r3, [r7, #7]
 80060fe:	4a0b      	ldr	r2, [pc, #44]	; (800612c <disk_initialize+0x48>)
 8006100:	2101      	movs	r1, #1
 8006102:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006104:	79fb      	ldrb	r3, [r7, #7]
 8006106:	4a09      	ldr	r2, [pc, #36]	; (800612c <disk_initialize+0x48>)
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	79fa      	ldrb	r2, [r7, #7]
 8006112:	4906      	ldr	r1, [pc, #24]	; (800612c <disk_initialize+0x48>)
 8006114:	440a      	add	r2, r1
 8006116:	7a12      	ldrb	r2, [r2, #8]
 8006118:	4610      	mov	r0, r2
 800611a:	4798      	blx	r3
 800611c:	4603      	mov	r3, r0
 800611e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006120:	7bfb      	ldrb	r3, [r7, #15]
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	200002f4 	.word	0x200002f4

08006130 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006130:	b590      	push	{r4, r7, lr}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	60b9      	str	r1, [r7, #8]
 8006138:	607a      	str	r2, [r7, #4]
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	4603      	mov	r3, r0
 800613e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006140:	7bfb      	ldrb	r3, [r7, #15]
 8006142:	4a0a      	ldr	r2, [pc, #40]	; (800616c <disk_read+0x3c>)
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	4413      	add	r3, r2
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	689c      	ldr	r4, [r3, #8]
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	4a07      	ldr	r2, [pc, #28]	; (800616c <disk_read+0x3c>)
 8006150:	4413      	add	r3, r2
 8006152:	7a18      	ldrb	r0, [r3, #8]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	687a      	ldr	r2, [r7, #4]
 8006158:	68b9      	ldr	r1, [r7, #8]
 800615a:	47a0      	blx	r4
 800615c:	4603      	mov	r3, r0
 800615e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006160:	7dfb      	ldrb	r3, [r7, #23]
}
 8006162:	4618      	mov	r0, r3
 8006164:	371c      	adds	r7, #28
 8006166:	46bd      	mov	sp, r7
 8006168:	bd90      	pop	{r4, r7, pc}
 800616a:	bf00      	nop
 800616c:	200002f4 	.word	0x200002f4

08006170 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	60b9      	str	r1, [r7, #8]
 8006178:	607a      	str	r2, [r7, #4]
 800617a:	603b      	str	r3, [r7, #0]
 800617c:	4603      	mov	r3, r0
 800617e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006180:	7bfb      	ldrb	r3, [r7, #15]
 8006182:	4a0a      	ldr	r2, [pc, #40]	; (80061ac <disk_write+0x3c>)
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4413      	add	r3, r2
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	68dc      	ldr	r4, [r3, #12]
 800618c:	7bfb      	ldrb	r3, [r7, #15]
 800618e:	4a07      	ldr	r2, [pc, #28]	; (80061ac <disk_write+0x3c>)
 8006190:	4413      	add	r3, r2
 8006192:	7a18      	ldrb	r0, [r3, #8]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	68b9      	ldr	r1, [r7, #8]
 800619a:	47a0      	blx	r4
 800619c:	4603      	mov	r3, r0
 800619e:	75fb      	strb	r3, [r7, #23]
  return res;
 80061a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	371c      	adds	r7, #28
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd90      	pop	{r4, r7, pc}
 80061aa:	bf00      	nop
 80061ac:	200002f4 	.word	0x200002f4

080061b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b084      	sub	sp, #16
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	4603      	mov	r3, r0
 80061b8:	603a      	str	r2, [r7, #0]
 80061ba:	71fb      	strb	r3, [r7, #7]
 80061bc:	460b      	mov	r3, r1
 80061be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <disk_ioctl+0x38>)
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	79fa      	ldrb	r2, [r7, #7]
 80061ce:	4906      	ldr	r1, [pc, #24]	; (80061e8 <disk_ioctl+0x38>)
 80061d0:	440a      	add	r2, r1
 80061d2:	7a10      	ldrb	r0, [r2, #8]
 80061d4:	79b9      	ldrb	r1, [r7, #6]
 80061d6:	683a      	ldr	r2, [r7, #0]
 80061d8:	4798      	blx	r3
 80061da:	4603      	mov	r3, r0
 80061dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}
 80061e8:	200002f4 	.word	0x200002f4

080061ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3301      	adds	r3, #1
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80061fc:	89fb      	ldrh	r3, [r7, #14]
 80061fe:	021b      	lsls	r3, r3, #8
 8006200:	b21a      	sxth	r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b21b      	sxth	r3, r3
 8006208:	4313      	orrs	r3, r2
 800620a:	b21b      	sxth	r3, r3
 800620c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800620e:	89fb      	ldrh	r3, [r7, #14]
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800621c:	b480      	push	{r7}
 800621e:	b085      	sub	sp, #20
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3303      	adds	r3, #3
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	021b      	lsls	r3, r3, #8
 8006230:	687a      	ldr	r2, [r7, #4]
 8006232:	3202      	adds	r2, #2
 8006234:	7812      	ldrb	r2, [r2, #0]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	3201      	adds	r2, #1
 8006242:	7812      	ldrb	r2, [r2, #0]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	021b      	lsls	r3, r3, #8
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	7812      	ldrb	r2, [r2, #0]
 8006250:	4313      	orrs	r3, r2
 8006252:	60fb      	str	r3, [r7, #12]
	return rv;
 8006254:	68fb      	ldr	r3, [r7, #12]
}
 8006256:	4618      	mov	r0, r3
 8006258:	3714      	adds	r7, #20
 800625a:	46bd      	mov	sp, r7
 800625c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006260:	4770      	bx	lr

08006262 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006262:	b480      	push	{r7}
 8006264:	b083      	sub	sp, #12
 8006266:	af00      	add	r7, sp, #0
 8006268:	6078      	str	r0, [r7, #4]
 800626a:	460b      	mov	r3, r1
 800626c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	1c5a      	adds	r2, r3, #1
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	887a      	ldrh	r2, [r7, #2]
 8006276:	b2d2      	uxtb	r2, r2
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	887b      	ldrh	r3, [r7, #2]
 800627c:	0a1b      	lsrs	r3, r3, #8
 800627e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	1c5a      	adds	r2, r3, #1
 8006284:	607a      	str	r2, [r7, #4]
 8006286:	887a      	ldrh	r2, [r7, #2]
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	1c5a      	adds	r2, r3, #1
 80062a6:	607a      	str	r2, [r7, #4]
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	b2d2      	uxtb	r2, r2
 80062ac:	701a      	strb	r2, [r3, #0]
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	0a1b      	lsrs	r3, r3, #8
 80062b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	607a      	str	r2, [r7, #4]
 80062ba:	683a      	ldr	r2, [r7, #0]
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	0a1b      	lsrs	r3, r3, #8
 80062c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	1c5a      	adds	r2, r3, #1
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	683a      	ldr	r2, [r7, #0]
 80062ce:	b2d2      	uxtb	r2, r2
 80062d0:	701a      	strb	r2, [r3, #0]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	0a1b      	lsrs	r3, r3, #8
 80062d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	1c5a      	adds	r2, r3, #1
 80062dc:	607a      	str	r2, [r7, #4]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	b2d2      	uxtb	r2, r2
 80062e2:	701a      	strb	r2, [r3, #0]
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d00d      	beq.n	8006326 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800630a:	693a      	ldr	r2, [r7, #16]
 800630c:	1c53      	adds	r3, r2, #1
 800630e:	613b      	str	r3, [r7, #16]
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	1c59      	adds	r1, r3, #1
 8006314:	6179      	str	r1, [r7, #20]
 8006316:	7812      	ldrb	r2, [r2, #0]
 8006318:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3b01      	subs	r3, #1
 800631e:	607b      	str	r3, [r7, #4]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f1      	bne.n	800630a <mem_cpy+0x1a>
	}
}
 8006326:	bf00      	nop
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8006332:	b480      	push	{r7}
 8006334:	b087      	sub	sp, #28
 8006336:	af00      	add	r7, sp, #0
 8006338:	60f8      	str	r0, [r7, #12]
 800633a:	60b9      	str	r1, [r7, #8]
 800633c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	1c5a      	adds	r2, r3, #1
 8006346:	617a      	str	r2, [r7, #20]
 8006348:	68ba      	ldr	r2, [r7, #8]
 800634a:	b2d2      	uxtb	r2, r2
 800634c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	3b01      	subs	r3, #1
 8006352:	607b      	str	r3, [r7, #4]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1f3      	bne.n	8006342 <mem_set+0x10>
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8006366:	b480      	push	{r7}
 8006368:	b089      	sub	sp, #36	; 0x24
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	61fb      	str	r3, [r7, #28]
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800637a:	2300      	movs	r3, #0
 800637c:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	1c5a      	adds	r2, r3, #1
 8006382:	61fa      	str	r2, [r7, #28]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	4619      	mov	r1, r3
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	1c5a      	adds	r2, r3, #1
 800638c:	61ba      	str	r2, [r7, #24]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	1acb      	subs	r3, r1, r3
 8006392:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	3b01      	subs	r3, #1
 8006398:	607b      	str	r3, [r7, #4]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d002      	beq.n	80063a6 <mem_cmp+0x40>
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d0eb      	beq.n	800637e <mem_cmp+0x18>

	return r;
 80063a6:	697b      	ldr	r3, [r7, #20]
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3724      	adds	r7, #36	; 0x24
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr

080063b4 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80063b4:	b480      	push	{r7}
 80063b6:	b083      	sub	sp, #12
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80063be:	e002      	b.n	80063c6 <chk_chr+0x12>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3301      	adds	r3, #1
 80063c4:	607b      	str	r3, [r7, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d005      	beq.n	80063da <chk_chr+0x26>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	461a      	mov	r2, r3
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d1f2      	bne.n	80063c0 <chk_chr+0xc>
	return *str;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	781b      	ldrb	r3, [r3, #0]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr
	...

080063ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b085      	sub	sp, #20
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
 80063f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80063f6:	2300      	movs	r3, #0
 80063f8:	60bb      	str	r3, [r7, #8]
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	60fb      	str	r3, [r7, #12]
 80063fe:	e029      	b.n	8006454 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8006400:	4a27      	ldr	r2, [pc, #156]	; (80064a0 <chk_lock+0xb4>)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	011b      	lsls	r3, r3, #4
 8006406:	4413      	add	r3, r2
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d01d      	beq.n	800644a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800640e:	4a24      	ldr	r2, [pc, #144]	; (80064a0 <chk_lock+0xb4>)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	4413      	add	r3, r2
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d116      	bne.n	800644e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006420:	4a1f      	ldr	r2, [pc, #124]	; (80064a0 <chk_lock+0xb4>)
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	011b      	lsls	r3, r3, #4
 8006426:	4413      	add	r3, r2
 8006428:	3304      	adds	r3, #4
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006430:	429a      	cmp	r2, r3
 8006432:	d10c      	bne.n	800644e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006434:	4a1a      	ldr	r2, [pc, #104]	; (80064a0 <chk_lock+0xb4>)
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	011b      	lsls	r3, r3, #4
 800643a:	4413      	add	r3, r2
 800643c:	3308      	adds	r3, #8
 800643e:	681a      	ldr	r2, [r3, #0]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006444:	429a      	cmp	r2, r3
 8006446:	d102      	bne.n	800644e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006448:	e007      	b.n	800645a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800644a:	2301      	movs	r3, #1
 800644c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	3301      	adds	r3, #1
 8006452:	60fb      	str	r3, [r7, #12]
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d9d2      	bls.n	8006400 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2b02      	cmp	r3, #2
 800645e:	d109      	bne.n	8006474 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d102      	bne.n	800646c <chk_lock+0x80>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b02      	cmp	r3, #2
 800646a:	d101      	bne.n	8006470 <chk_lock+0x84>
 800646c:	2300      	movs	r3, #0
 800646e:	e010      	b.n	8006492 <chk_lock+0xa6>
 8006470:	2312      	movs	r3, #18
 8006472:	e00e      	b.n	8006492 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d108      	bne.n	800648c <chk_lock+0xa0>
 800647a:	4a09      	ldr	r2, [pc, #36]	; (80064a0 <chk_lock+0xb4>)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	011b      	lsls	r3, r3, #4
 8006480:	4413      	add	r3, r2
 8006482:	330c      	adds	r3, #12
 8006484:	881b      	ldrh	r3, [r3, #0]
 8006486:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800648a:	d101      	bne.n	8006490 <chk_lock+0xa4>
 800648c:	2310      	movs	r3, #16
 800648e:	e000      	b.n	8006492 <chk_lock+0xa6>
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr
 800649e:	bf00      	nop
 80064a0:	200002d4 	.word	0x200002d4

080064a4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80064aa:	2300      	movs	r3, #0
 80064ac:	607b      	str	r3, [r7, #4]
 80064ae:	e002      	b.n	80064b6 <enq_lock+0x12>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	3301      	adds	r3, #1
 80064b4:	607b      	str	r3, [r7, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d806      	bhi.n	80064ca <enq_lock+0x26>
 80064bc:	4a09      	ldr	r2, [pc, #36]	; (80064e4 <enq_lock+0x40>)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	011b      	lsls	r3, r3, #4
 80064c2:	4413      	add	r3, r2
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1f2      	bne.n	80064b0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	bf14      	ite	ne
 80064d0:	2301      	movne	r3, #1
 80064d2:	2300      	moveq	r3, #0
 80064d4:	b2db      	uxtb	r3, r3
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	200002d4 	.word	0x200002d4

080064e8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80064f2:	2300      	movs	r3, #0
 80064f4:	60fb      	str	r3, [r7, #12]
 80064f6:	e01f      	b.n	8006538 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80064f8:	4a41      	ldr	r2, [pc, #260]	; (8006600 <inc_lock+0x118>)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	011b      	lsls	r3, r3, #4
 80064fe:	4413      	add	r3, r2
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	429a      	cmp	r2, r3
 8006508:	d113      	bne.n	8006532 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800650a:	4a3d      	ldr	r2, [pc, #244]	; (8006600 <inc_lock+0x118>)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	011b      	lsls	r3, r3, #4
 8006510:	4413      	add	r3, r2
 8006512:	3304      	adds	r3, #4
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800651a:	429a      	cmp	r2, r3
 800651c:	d109      	bne.n	8006532 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800651e:	4a38      	ldr	r2, [pc, #224]	; (8006600 <inc_lock+0x118>)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	4413      	add	r3, r2
 8006526:	3308      	adds	r3, #8
 8006528:	681a      	ldr	r2, [r3, #0]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800652e:	429a      	cmp	r2, r3
 8006530:	d006      	beq.n	8006540 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3301      	adds	r3, #1
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d9dc      	bls.n	80064f8 <inc_lock+0x10>
 800653e:	e000      	b.n	8006542 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006540:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d132      	bne.n	80065ae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006548:	2300      	movs	r3, #0
 800654a:	60fb      	str	r3, [r7, #12]
 800654c:	e002      	b.n	8006554 <inc_lock+0x6c>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	3301      	adds	r3, #1
 8006552:	60fb      	str	r3, [r7, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d806      	bhi.n	8006568 <inc_lock+0x80>
 800655a:	4a29      	ldr	r2, [pc, #164]	; (8006600 <inc_lock+0x118>)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	011b      	lsls	r3, r3, #4
 8006560:	4413      	add	r3, r2
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d1f2      	bne.n	800654e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b02      	cmp	r3, #2
 800656c:	d101      	bne.n	8006572 <inc_lock+0x8a>
 800656e:	2300      	movs	r3, #0
 8006570:	e040      	b.n	80065f4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	4922      	ldr	r1, [pc, #136]	; (8006600 <inc_lock+0x118>)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	011b      	lsls	r3, r3, #4
 800657c:	440b      	add	r3, r1
 800657e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	689a      	ldr	r2, [r3, #8]
 8006584:	491e      	ldr	r1, [pc, #120]	; (8006600 <inc_lock+0x118>)
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	011b      	lsls	r3, r3, #4
 800658a:	440b      	add	r3, r1
 800658c:	3304      	adds	r3, #4
 800658e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	695a      	ldr	r2, [r3, #20]
 8006594:	491a      	ldr	r1, [pc, #104]	; (8006600 <inc_lock+0x118>)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	011b      	lsls	r3, r3, #4
 800659a:	440b      	add	r3, r1
 800659c:	3308      	adds	r3, #8
 800659e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80065a0:	4a17      	ldr	r2, [pc, #92]	; (8006600 <inc_lock+0x118>)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	011b      	lsls	r3, r3, #4
 80065a6:	4413      	add	r3, r2
 80065a8:	330c      	adds	r3, #12
 80065aa:	2200      	movs	r2, #0
 80065ac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d009      	beq.n	80065c8 <inc_lock+0xe0>
 80065b4:	4a12      	ldr	r2, [pc, #72]	; (8006600 <inc_lock+0x118>)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	4413      	add	r3, r2
 80065bc:	330c      	adds	r3, #12
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <inc_lock+0xe0>
 80065c4:	2300      	movs	r3, #0
 80065c6:	e015      	b.n	80065f4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d108      	bne.n	80065e0 <inc_lock+0xf8>
 80065ce:	4a0c      	ldr	r2, [pc, #48]	; (8006600 <inc_lock+0x118>)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	4413      	add	r3, r2
 80065d6:	330c      	adds	r3, #12
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	3301      	adds	r3, #1
 80065dc:	b29a      	uxth	r2, r3
 80065de:	e001      	b.n	80065e4 <inc_lock+0xfc>
 80065e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065e4:	4906      	ldr	r1, [pc, #24]	; (8006600 <inc_lock+0x118>)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	440b      	add	r3, r1
 80065ec:	330c      	adds	r3, #12
 80065ee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	3301      	adds	r3, #1
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3714      	adds	r7, #20
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	200002d4 	.word	0x200002d4

08006604 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006604:	b480      	push	{r7}
 8006606:	b085      	sub	sp, #20
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3b01      	subs	r3, #1
 8006610:	607b      	str	r3, [r7, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b01      	cmp	r3, #1
 8006616:	d825      	bhi.n	8006664 <dec_lock+0x60>
		n = Files[i].ctr;
 8006618:	4a17      	ldr	r2, [pc, #92]	; (8006678 <dec_lock+0x74>)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	011b      	lsls	r3, r3, #4
 800661e:	4413      	add	r3, r2
 8006620:	330c      	adds	r3, #12
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006626:	89fb      	ldrh	r3, [r7, #14]
 8006628:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662c:	d101      	bne.n	8006632 <dec_lock+0x2e>
 800662e:	2300      	movs	r3, #0
 8006630:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006632:	89fb      	ldrh	r3, [r7, #14]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d002      	beq.n	800663e <dec_lock+0x3a>
 8006638:	89fb      	ldrh	r3, [r7, #14]
 800663a:	3b01      	subs	r3, #1
 800663c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800663e:	4a0e      	ldr	r2, [pc, #56]	; (8006678 <dec_lock+0x74>)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	4413      	add	r3, r2
 8006646:	330c      	adds	r3, #12
 8006648:	89fa      	ldrh	r2, [r7, #14]
 800664a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800664c:	89fb      	ldrh	r3, [r7, #14]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d105      	bne.n	800665e <dec_lock+0x5a>
 8006652:	4a09      	ldr	r2, [pc, #36]	; (8006678 <dec_lock+0x74>)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	011b      	lsls	r3, r3, #4
 8006658:	4413      	add	r3, r2
 800665a:	2200      	movs	r2, #0
 800665c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	737b      	strb	r3, [r7, #13]
 8006662:	e001      	b.n	8006668 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006664:	2302      	movs	r3, #2
 8006666:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006668:	7b7b      	ldrb	r3, [r7, #13]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3714      	adds	r7, #20
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	200002d4 	.word	0x200002d4

0800667c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800667c:	b480      	push	{r7}
 800667e:	b085      	sub	sp, #20
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006684:	2300      	movs	r3, #0
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	e010      	b.n	80066ac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800668a:	4a0d      	ldr	r2, [pc, #52]	; (80066c0 <clear_lock+0x44>)
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	4413      	add	r3, r2
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	429a      	cmp	r2, r3
 8006698:	d105      	bne.n	80066a6 <clear_lock+0x2a>
 800669a:	4a09      	ldr	r2, [pc, #36]	; (80066c0 <clear_lock+0x44>)
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	011b      	lsls	r3, r3, #4
 80066a0:	4413      	add	r3, r2
 80066a2:	2200      	movs	r2, #0
 80066a4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	3301      	adds	r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d9eb      	bls.n	800668a <clear_lock+0xe>
	}
}
 80066b2:	bf00      	nop
 80066b4:	3714      	adds	r7, #20
 80066b6:	46bd      	mov	sp, r7
 80066b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066bc:	4770      	bx	lr
 80066be:	bf00      	nop
 80066c0:	200002d4 	.word	0x200002d4

080066c4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80066cc:	2300      	movs	r3, #0
 80066ce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	78db      	ldrb	r3, [r3, #3]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d034      	beq.n	8006742 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	7858      	ldrb	r0, [r3, #1]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80066e8:	2301      	movs	r3, #1
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	f7ff fd40 	bl	8006170 <disk_write>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <sync_window+0x38>
			res = FR_DISK_ERR;
 80066f6:	2301      	movs	r3, #1
 80066f8:	73fb      	strb	r3, [r7, #15]
 80066fa:	e022      	b.n	8006742 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	1ad2      	subs	r2, r2, r3
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	429a      	cmp	r2, r3
 8006710:	d217      	bcs.n	8006742 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	789b      	ldrb	r3, [r3, #2]
 8006716:	613b      	str	r3, [r7, #16]
 8006718:	e010      	b.n	800673c <sync_window+0x78>
					wsect += fs->fsize;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	4413      	add	r3, r2
 8006722:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	7858      	ldrb	r0, [r3, #1]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800672e:	2301      	movs	r3, #1
 8006730:	697a      	ldr	r2, [r7, #20]
 8006732:	f7ff fd1d 	bl	8006170 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	3b01      	subs	r3, #1
 800673a:	613b      	str	r3, [r7, #16]
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	2b01      	cmp	r3, #1
 8006740:	d8eb      	bhi.n	800671a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006742:	7bfb      	ldrb	r3, [r7, #15]
}
 8006744:	4618      	mov	r0, r3
 8006746:	3718      	adds	r7, #24
 8006748:	46bd      	mov	sp, r7
 800674a:	bd80      	pop	{r7, pc}

0800674c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800675e:	683a      	ldr	r2, [r7, #0]
 8006760:	429a      	cmp	r2, r3
 8006762:	d01b      	beq.n	800679c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7ff ffad 	bl	80066c4 <sync_window>
 800676a:	4603      	mov	r3, r0
 800676c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800676e:	7bfb      	ldrb	r3, [r7, #15]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d113      	bne.n	800679c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	7858      	ldrb	r0, [r3, #1]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800677e:	2301      	movs	r3, #1
 8006780:	683a      	ldr	r2, [r7, #0]
 8006782:	f7ff fcd5 	bl	8006130 <disk_read>
 8006786:	4603      	mov	r3, r0
 8006788:	2b00      	cmp	r3, #0
 800678a:	d004      	beq.n	8006796 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800678c:	f04f 33ff 	mov.w	r3, #4294967295
 8006790:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006792:	2301      	movs	r3, #1
 8006794:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	683a      	ldr	r2, [r7, #0]
 800679a:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
	...

080067a8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80067b0:	6878      	ldr	r0, [r7, #4]
 80067b2:	f7ff ff87 	bl	80066c4 <sync_window>
 80067b6:	4603      	mov	r3, r0
 80067b8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80067ba:	7bfb      	ldrb	r3, [r7, #15]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d158      	bne.n	8006872 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d148      	bne.n	800685a <sync_fs+0xb2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	791b      	ldrb	r3, [r3, #4]
 80067cc:	2b01      	cmp	r3, #1
 80067ce:	d144      	bne.n	800685a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	3330      	adds	r3, #48	; 0x30
 80067d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067d8:	2100      	movs	r1, #0
 80067da:	4618      	mov	r0, r3
 80067dc:	f7ff fda9 	bl	8006332 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	3330      	adds	r3, #48	; 0x30
 80067e4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80067e8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff fd38 	bl	8006262 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	3330      	adds	r3, #48	; 0x30
 80067f6:	4921      	ldr	r1, [pc, #132]	; (800687c <sync_fs+0xd4>)
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7ff fd4d 	bl	8006298 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3330      	adds	r3, #48	; 0x30
 8006802:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006806:	491e      	ldr	r1, [pc, #120]	; (8006880 <sync_fs+0xd8>)
 8006808:	4618      	mov	r0, r3
 800680a:	f7ff fd45 	bl	8006298 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	3330      	adds	r3, #48	; 0x30
 8006812:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	4619      	mov	r1, r3
 800681c:	4610      	mov	r0, r2
 800681e:	f7ff fd3b 	bl	8006298 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	3330      	adds	r3, #48	; 0x30
 8006826:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	4619      	mov	r1, r3
 8006830:	4610      	mov	r0, r2
 8006832:	f7ff fd31 	bl	8006298 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	69db      	ldr	r3, [r3, #28]
 800683a:	1c5a      	adds	r2, r3, #1
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	7858      	ldrb	r0, [r3, #1]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684e:	2301      	movs	r3, #1
 8006850:	f7ff fc8e 	bl	8006170 <disk_write>
			fs->fsi_flag = 0;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2200      	movs	r2, #0
 8006858:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	785b      	ldrb	r3, [r3, #1]
 800685e:	2200      	movs	r2, #0
 8006860:	2100      	movs	r1, #0
 8006862:	4618      	mov	r0, r3
 8006864:	f7ff fca4 	bl	80061b0 <disk_ioctl>
 8006868:	4603      	mov	r3, r0
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <sync_fs+0xca>
 800686e:	2301      	movs	r3, #1
 8006870:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006872:	7bfb      	ldrb	r3, [r7, #15]
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}
 800687c:	41615252 	.word	0x41615252
 8006880:	61417272 	.word	0x61417272

08006884 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	3b02      	subs	r3, #2
 8006892:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	3b02      	subs	r3, #2
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	429a      	cmp	r2, r3
 800689e:	d301      	bcc.n	80068a4 <clust2sect+0x20>
 80068a0:	2300      	movs	r3, #0
 80068a2:	e008      	b.n	80068b6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	895b      	ldrh	r3, [r3, #10]
 80068a8:	461a      	mov	r2, r3
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	fb03 f202 	mul.w	r2, r3, r2
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	4413      	add	r3, r2
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr

080068c2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80068c2:	b580      	push	{r7, lr}
 80068c4:	b086      	sub	sp, #24
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	6078      	str	r0, [r7, #4]
 80068ca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	d904      	bls.n	80068e2 <get_fat+0x20>
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d302      	bcc.n	80068e8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80068e2:	2301      	movs	r3, #1
 80068e4:	617b      	str	r3, [r7, #20]
 80068e6:	e08c      	b.n	8006a02 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80068e8:	f04f 33ff 	mov.w	r3, #4294967295
 80068ec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d045      	beq.n	8006982 <get_fat+0xc0>
 80068f6:	2b03      	cmp	r3, #3
 80068f8:	d05d      	beq.n	80069b6 <get_fat+0xf4>
 80068fa:	2b01      	cmp	r3, #1
 80068fc:	d177      	bne.n	80069ee <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80068fe:	683b      	ldr	r3, [r7, #0]
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	085b      	lsrs	r3, r3, #1
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800690c:	693b      	ldr	r3, [r7, #16]
 800690e:	6a1a      	ldr	r2, [r3, #32]
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	0a5b      	lsrs	r3, r3, #9
 8006914:	4413      	add	r3, r2
 8006916:	4619      	mov	r1, r3
 8006918:	6938      	ldr	r0, [r7, #16]
 800691a:	f7ff ff17 	bl	800674c <move_window>
 800691e:	4603      	mov	r3, r0
 8006920:	2b00      	cmp	r3, #0
 8006922:	d167      	bne.n	80069f4 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	60fa      	str	r2, [r7, #12]
 800692a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4413      	add	r3, r2
 8006932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006936:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	6a1a      	ldr	r2, [r3, #32]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	0a5b      	lsrs	r3, r3, #9
 8006940:	4413      	add	r3, r2
 8006942:	4619      	mov	r1, r3
 8006944:	6938      	ldr	r0, [r7, #16]
 8006946:	f7ff ff01 	bl	800674c <move_window>
 800694a:	4603      	mov	r3, r0
 800694c:	2b00      	cmp	r3, #0
 800694e:	d153      	bne.n	80069f8 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006956:	693a      	ldr	r2, [r7, #16]
 8006958:	4413      	add	r3, r2
 800695a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	461a      	mov	r2, r3
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	4313      	orrs	r3, r2
 8006966:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f003 0301 	and.w	r3, r3, #1
 800696e:	2b00      	cmp	r3, #0
 8006970:	d002      	beq.n	8006978 <get_fat+0xb6>
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	091b      	lsrs	r3, r3, #4
 8006976:	e002      	b.n	800697e <get_fat+0xbc>
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800697e:	617b      	str	r3, [r7, #20]
			break;
 8006980:	e03f      	b.n	8006a02 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	6a1a      	ldr	r2, [r3, #32]
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	0a1b      	lsrs	r3, r3, #8
 800698a:	4413      	add	r3, r2
 800698c:	4619      	mov	r1, r3
 800698e:	6938      	ldr	r0, [r7, #16]
 8006990:	f7ff fedc 	bl	800674c <move_window>
 8006994:	4603      	mov	r3, r0
 8006996:	2b00      	cmp	r3, #0
 8006998:	d130      	bne.n	80069fc <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80069a8:	4413      	add	r3, r2
 80069aa:	4618      	mov	r0, r3
 80069ac:	f7ff fc1e 	bl	80061ec <ld_word>
 80069b0:	4603      	mov	r3, r0
 80069b2:	617b      	str	r3, [r7, #20]
			break;
 80069b4:	e025      	b.n	8006a02 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	6a1a      	ldr	r2, [r3, #32]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	09db      	lsrs	r3, r3, #7
 80069be:	4413      	add	r3, r2
 80069c0:	4619      	mov	r1, r3
 80069c2:	6938      	ldr	r0, [r7, #16]
 80069c4:	f7ff fec2 	bl	800674c <move_window>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d118      	bne.n	8006a00 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80069dc:	4413      	add	r3, r2
 80069de:	4618      	mov	r0, r3
 80069e0:	f7ff fc1c 	bl	800621c <ld_dword>
 80069e4:	4603      	mov	r3, r0
 80069e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80069ea:	617b      	str	r3, [r7, #20]
			break;
 80069ec:	e009      	b.n	8006a02 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80069ee:	2301      	movs	r3, #1
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	e006      	b.n	8006a02 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069f4:	bf00      	nop
 80069f6:	e004      	b.n	8006a02 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80069f8:	bf00      	nop
 80069fa:	e002      	b.n	8006a02 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80069fc:	bf00      	nop
 80069fe:	e000      	b.n	8006a02 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006a00:	bf00      	nop
		}
	}

	return val;
 8006a02:	697b      	ldr	r3, [r7, #20]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006a0c:	b590      	push	{r4, r7, lr}
 8006a0e:	b089      	sub	sp, #36	; 0x24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006a18:	2302      	movs	r3, #2
 8006a1a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	f240 80d6 	bls.w	8006bd0 <put_fat+0x1c4>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	695b      	ldr	r3, [r3, #20]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	f080 80d0 	bcs.w	8006bd0 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b02      	cmp	r3, #2
 8006a36:	d073      	beq.n	8006b20 <put_fat+0x114>
 8006a38:	2b03      	cmp	r3, #3
 8006a3a:	f000 8091 	beq.w	8006b60 <put_fat+0x154>
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	f040 80c6 	bne.w	8006bd0 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	61bb      	str	r3, [r7, #24]
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	085b      	lsrs	r3, r3, #1
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	4413      	add	r3, r2
 8006a50:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6a1a      	ldr	r2, [r3, #32]
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	0a5b      	lsrs	r3, r3, #9
 8006a5a:	4413      	add	r3, r2
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	68f8      	ldr	r0, [r7, #12]
 8006a60:	f7ff fe74 	bl	800674c <move_window>
 8006a64:	4603      	mov	r3, r0
 8006a66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006a68:	7ffb      	ldrb	r3, [r7, #31]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	f040 80a9 	bne.w	8006bc2 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006a76:	69bb      	ldr	r3, [r7, #24]
 8006a78:	1c59      	adds	r1, r3, #1
 8006a7a:	61b9      	str	r1, [r7, #24]
 8006a7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a80:	4413      	add	r3, r2
 8006a82:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d00d      	beq.n	8006aaa <put_fat+0x9e>
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	b25b      	sxtb	r3, r3
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	b25a      	sxtb	r2, r3
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	011b      	lsls	r3, r3, #4
 8006aa0:	b25b      	sxtb	r3, r3
 8006aa2:	4313      	orrs	r3, r2
 8006aa4:	b25b      	sxtb	r3, r3
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	e001      	b.n	8006aae <put_fat+0xa2>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	697a      	ldr	r2, [r7, #20]
 8006ab0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	6a1a      	ldr	r2, [r3, #32]
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	0a5b      	lsrs	r3, r3, #9
 8006ac0:	4413      	add	r3, r2
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f7ff fe41 	bl	800674c <move_window>
 8006aca:	4603      	mov	r3, r0
 8006acc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006ace:	7ffb      	ldrb	r3, [r7, #31]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d178      	bne.n	8006bc6 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ada:	69bb      	ldr	r3, [r7, #24]
 8006adc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae0:	4413      	add	r3, r2
 8006ae2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d003      	beq.n	8006af6 <put_fat+0xea>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	091b      	lsrs	r3, r3, #4
 8006af2:	b2db      	uxtb	r3, r3
 8006af4:	e00e      	b.n	8006b14 <put_fat+0x108>
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	b25b      	sxtb	r3, r3
 8006afc:	f023 030f 	bic.w	r3, r3, #15
 8006b00:	b25a      	sxtb	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	0a1b      	lsrs	r3, r3, #8
 8006b06:	b25b      	sxtb	r3, r3
 8006b08:	f003 030f 	and.w	r3, r3, #15
 8006b0c:	b25b      	sxtb	r3, r3
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	b25b      	sxtb	r3, r3
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	70da      	strb	r2, [r3, #3]
			break;
 8006b1e:	e057      	b.n	8006bd0 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6a1a      	ldr	r2, [r3, #32]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	0a1b      	lsrs	r3, r3, #8
 8006b28:	4413      	add	r3, r2
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	68f8      	ldr	r0, [r7, #12]
 8006b2e:	f7ff fe0d 	bl	800674c <move_window>
 8006b32:	4603      	mov	r3, r0
 8006b34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b36:	7ffb      	ldrb	r3, [r7, #31]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d146      	bne.n	8006bca <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	005b      	lsls	r3, r3, #1
 8006b46:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006b4a:	4413      	add	r3, r2
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	b292      	uxth	r2, r2
 8006b50:	4611      	mov	r1, r2
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7ff fb85 	bl	8006262 <st_word>
			fs->wflag = 1;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	70da      	strb	r2, [r3, #3]
			break;
 8006b5e:	e037      	b.n	8006bd0 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a1a      	ldr	r2, [r3, #32]
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	09db      	lsrs	r3, r3, #7
 8006b68:	4413      	add	r3, r2
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff fded 	bl	800674c <move_window>
 8006b72:	4603      	mov	r3, r0
 8006b74:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006b76:	7ffb      	ldrb	r3, [r7, #31]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d128      	bne.n	8006bce <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	009b      	lsls	r3, r3, #2
 8006b8c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006b90:	4413      	add	r3, r2
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7ff fb42 	bl	800621c <ld_dword>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8006b9e:	4323      	orrs	r3, r4
 8006ba0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006bb0:	4413      	add	r3, r2
 8006bb2:	6879      	ldr	r1, [r7, #4]
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7ff fb6f 	bl	8006298 <st_dword>
			fs->wflag = 1;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	70da      	strb	r2, [r3, #3]
			break;
 8006bc0:	e006      	b.n	8006bd0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006bc2:	bf00      	nop
 8006bc4:	e004      	b.n	8006bd0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006bc6:	bf00      	nop
 8006bc8:	e002      	b.n	8006bd0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006bca:	bf00      	nop
 8006bcc:	e000      	b.n	8006bd0 <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006bce:	bf00      	nop
		}
	}
	return res;
 8006bd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3724      	adds	r7, #36	; 0x24
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd90      	pop	{r4, r7, pc}

08006bda <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b088      	sub	sp, #32
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	60f8      	str	r0, [r7, #12]
 8006be2:	60b9      	str	r1, [r7, #8]
 8006be4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006be6:	2300      	movs	r3, #0
 8006be8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d904      	bls.n	8006c00 <remove_chain+0x26>
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d301      	bcc.n	8006c04 <remove_chain+0x2a>
 8006c00:	2302      	movs	r3, #2
 8006c02:	e04b      	b.n	8006c9c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00c      	beq.n	8006c24 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006c0a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	69b8      	ldr	r0, [r7, #24]
 8006c12:	f7ff fefb 	bl	8006a0c <put_fat>
 8006c16:	4603      	mov	r3, r0
 8006c18:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006c1a:	7ffb      	ldrb	r3, [r7, #31]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <remove_chain+0x4a>
 8006c20:	7ffb      	ldrb	r3, [r7, #31]
 8006c22:	e03b      	b.n	8006c9c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006c24:	68b9      	ldr	r1, [r7, #8]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f7ff fe4b 	bl	80068c2 <get_fat>
 8006c2c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d031      	beq.n	8006c98 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <remove_chain+0x64>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e02e      	b.n	8006c9c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c44:	d101      	bne.n	8006c4a <remove_chain+0x70>
 8006c46:	2301      	movs	r3, #1
 8006c48:	e028      	b.n	8006c9c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	68b9      	ldr	r1, [r7, #8]
 8006c4e:	69b8      	ldr	r0, [r7, #24]
 8006c50:	f7ff fedc 	bl	8006a0c <put_fat>
 8006c54:	4603      	mov	r3, r0
 8006c56:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006c58:	7ffb      	ldrb	r3, [r7, #31]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <remove_chain+0x88>
 8006c5e:	7ffb      	ldrb	r3, [r7, #31]
 8006c60:	e01c      	b.n	8006c9c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	691a      	ldr	r2, [r3, #16]
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	3b02      	subs	r3, #2
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d20b      	bcs.n	8006c88 <remove_chain+0xae>
			fs->free_clst++;
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	691b      	ldr	r3, [r3, #16]
 8006c74:	1c5a      	adds	r2, r3, #1
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	791b      	ldrb	r3, [r3, #4]
 8006c7e:	f043 0301 	orr.w	r3, r3, #1
 8006c82:	b2da      	uxtb	r2, r3
 8006c84:	69bb      	ldr	r3, [r7, #24]
 8006c86:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	695b      	ldr	r3, [r3, #20]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d3c6      	bcc.n	8006c24 <remove_chain+0x4a>
 8006c96:	e000      	b.n	8006c9a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006c98:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006c9a:	2300      	movs	r3, #0
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3720      	adds	r7, #32
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	bd80      	pop	{r7, pc}

08006ca4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d10d      	bne.n	8006cd6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	68db      	ldr	r3, [r3, #12]
 8006cbe:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d004      	beq.n	8006cd0 <create_chain+0x2c>
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	695b      	ldr	r3, [r3, #20]
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	429a      	cmp	r2, r3
 8006cce:	d31b      	bcc.n	8006d08 <create_chain+0x64>
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	61bb      	str	r3, [r7, #24]
 8006cd4:	e018      	b.n	8006d08 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f7ff fdf2 	bl	80068c2 <get_fat>
 8006cde:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	2b01      	cmp	r3, #1
 8006ce4:	d801      	bhi.n	8006cea <create_chain+0x46>
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e070      	b.n	8006dcc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cf0:	d101      	bne.n	8006cf6 <create_chain+0x52>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	e06a      	b.n	8006dcc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d201      	bcs.n	8006d04 <create_chain+0x60>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	e063      	b.n	8006dcc <create_chain+0x128>
		scl = clst;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006d08:	69bb      	ldr	r3, [r7, #24]
 8006d0a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	69fa      	ldr	r2, [r7, #28]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d307      	bcc.n	8006d2c <create_chain+0x88>
				ncl = 2;
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d901      	bls.n	8006d2c <create_chain+0x88>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	e04f      	b.n	8006dcc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006d2c:	69f9      	ldr	r1, [r7, #28]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7ff fdc7 	bl	80068c2 <get_fat>
 8006d34:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00e      	beq.n	8006d5a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d003      	beq.n	8006d4a <create_chain+0xa6>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d48:	d101      	bne.n	8006d4e <create_chain+0xaa>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	e03e      	b.n	8006dcc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006d4e:	69fa      	ldr	r2, [r7, #28]
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	429a      	cmp	r2, r3
 8006d54:	d1da      	bne.n	8006d0c <create_chain+0x68>
 8006d56:	2300      	movs	r3, #0
 8006d58:	e038      	b.n	8006dcc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006d5a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006d60:	69f9      	ldr	r1, [r7, #28]
 8006d62:	6938      	ldr	r0, [r7, #16]
 8006d64:	f7ff fe52 	bl	8006a0c <put_fat>
 8006d68:	4603      	mov	r3, r0
 8006d6a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006d6c:	7dfb      	ldrb	r3, [r7, #23]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d109      	bne.n	8006d86 <create_chain+0xe2>
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d006      	beq.n	8006d86 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006d78:	69fa      	ldr	r2, [r7, #28]
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6938      	ldr	r0, [r7, #16]
 8006d7e:	f7ff fe45 	bl	8006a0c <put_fat>
 8006d82:	4603      	mov	r3, r0
 8006d84:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006d86:	7dfb      	ldrb	r3, [r7, #23]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d116      	bne.n	8006dba <create_chain+0x116>
		fs->last_clst = ncl;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	69fa      	ldr	r2, [r7, #28]
 8006d90:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	691a      	ldr	r2, [r3, #16]
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	695b      	ldr	r3, [r3, #20]
 8006d9a:	3b02      	subs	r3, #2
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d804      	bhi.n	8006daa <create_chain+0x106>
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	1e5a      	subs	r2, r3, #1
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	791b      	ldrb	r3, [r3, #4]
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	b2da      	uxtb	r2, r3
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	711a      	strb	r2, [r3, #4]
 8006db8:	e007      	b.n	8006dca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006dba:	7dfb      	ldrb	r3, [r7, #23]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d102      	bne.n	8006dc6 <create_chain+0x122>
 8006dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8006dc4:	e000      	b.n	8006dc8 <create_chain+0x124>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006dca:	69fb      	ldr	r3, [r7, #28]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3720      	adds	r7, #32
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}

08006dd4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de8:	3304      	adds	r3, #4
 8006dea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	0a5b      	lsrs	r3, r3, #9
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	8952      	ldrh	r2, [r2, #10]
 8006df4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006df8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	1d1a      	adds	r2, r3, #4
 8006dfe:	613a      	str	r2, [r7, #16]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d101      	bne.n	8006e0e <clmt_clust+0x3a>
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e010      	b.n	8006e30 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d307      	bcc.n	8006e26 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006e16:	697a      	ldr	r2, [r7, #20]
 8006e18:	68bb      	ldr	r3, [r7, #8]
 8006e1a:	1ad3      	subs	r3, r2, r3
 8006e1c:	617b      	str	r3, [r7, #20]
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	3304      	adds	r3, #4
 8006e22:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006e24:	e7e9      	b.n	8006dfa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006e26:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	681a      	ldr	r2, [r3, #0]
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	4413      	add	r3, r2
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	371c      	adds	r7, #28
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr

08006e3c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b086      	sub	sp, #24
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
 8006e44:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e52:	d204      	bcs.n	8006e5e <dir_sdi+0x22>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	f003 031f 	and.w	r3, r3, #31
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d001      	beq.n	8006e62 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006e5e:	2302      	movs	r3, #2
 8006e60:	e063      	b.n	8006f2a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	683a      	ldr	r2, [r7, #0]
 8006e66:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006e6e:	697b      	ldr	r3, [r7, #20]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d106      	bne.n	8006e82 <dir_sdi+0x46>
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b02      	cmp	r3, #2
 8006e7a:	d902      	bls.n	8006e82 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e80:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d10c      	bne.n	8006ea2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	095b      	lsrs	r3, r3, #5
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	8912      	ldrh	r2, [r2, #8]
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d301      	bcc.n	8006e98 <dir_sdi+0x5c>
 8006e94:	2302      	movs	r3, #2
 8006e96:	e048      	b.n	8006f2a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	61da      	str	r2, [r3, #28]
 8006ea0:	e029      	b.n	8006ef6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	895b      	ldrh	r3, [r3, #10]
 8006ea6:	025b      	lsls	r3, r3, #9
 8006ea8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006eaa:	e019      	b.n	8006ee0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6979      	ldr	r1, [r7, #20]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7ff fd06 	bl	80068c2 <get_fat>
 8006eb6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ebe:	d101      	bne.n	8006ec4 <dir_sdi+0x88>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	e032      	b.n	8006f2a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d904      	bls.n	8006ed4 <dir_sdi+0x98>
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d301      	bcc.n	8006ed8 <dir_sdi+0x9c>
 8006ed4:	2302      	movs	r3, #2
 8006ed6:	e028      	b.n	8006f2a <dir_sdi+0xee>
			ofs -= csz;
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	429a      	cmp	r2, r3
 8006ee6:	d2e1      	bcs.n	8006eac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006ee8:	6979      	ldr	r1, [r7, #20]
 8006eea:	6938      	ldr	r0, [r7, #16]
 8006eec:	f7ff fcca 	bl	8006884 <clust2sect>
 8006ef0:	4602      	mov	r2, r0
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	697a      	ldr	r2, [r7, #20]
 8006efa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	69db      	ldr	r3, [r3, #28]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <dir_sdi+0xcc>
 8006f04:	2302      	movs	r3, #2
 8006f06:	e010      	b.n	8006f2a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	69da      	ldr	r2, [r3, #28]
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	0a5b      	lsrs	r3, r3, #9
 8006f10:	441a      	add	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006f1c:	683b      	ldr	r3, [r7, #0]
 8006f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f22:	441a      	add	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3718      	adds	r7, #24
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b086      	sub	sp, #24
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	6078      	str	r0, [r7, #4]
 8006f3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	695b      	ldr	r3, [r3, #20]
 8006f46:	3320      	adds	r3, #32
 8006f48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	69db      	ldr	r3, [r3, #28]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <dir_next+0x28>
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f58:	d301      	bcc.n	8006f5e <dir_next+0x2c>
 8006f5a:	2304      	movs	r3, #4
 8006f5c:	e0aa      	b.n	80070b4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	f040 8098 	bne.w	800709a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	69db      	ldr	r3, [r3, #28]
 8006f6e:	1c5a      	adds	r2, r3, #1
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	699b      	ldr	r3, [r3, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d10b      	bne.n	8006f94 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	095b      	lsrs	r3, r3, #5
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	8912      	ldrh	r2, [r2, #8]
 8006f84:	4293      	cmp	r3, r2
 8006f86:	f0c0 8088 	bcc.w	800709a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	61da      	str	r2, [r3, #28]
 8006f90:	2304      	movs	r3, #4
 8006f92:	e08f      	b.n	80070b4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	0a5b      	lsrs	r3, r3, #9
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	8952      	ldrh	r2, [r2, #10]
 8006f9c:	3a01      	subs	r2, #1
 8006f9e:	4013      	ands	r3, r2
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d17a      	bne.n	800709a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006fa4:	687a      	ldr	r2, [r7, #4]
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	699b      	ldr	r3, [r3, #24]
 8006faa:	4619      	mov	r1, r3
 8006fac:	4610      	mov	r0, r2
 8006fae:	f7ff fc88 	bl	80068c2 <get_fat>
 8006fb2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d801      	bhi.n	8006fbe <dir_next+0x8c>
 8006fba:	2302      	movs	r3, #2
 8006fbc:	e07a      	b.n	80070b4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc4:	d101      	bne.n	8006fca <dir_next+0x98>
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e074      	b.n	80070b4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	695b      	ldr	r3, [r3, #20]
 8006fce:	697a      	ldr	r2, [r7, #20]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d358      	bcc.n	8007086 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d104      	bne.n	8006fe4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	61da      	str	r2, [r3, #28]
 8006fe0:	2304      	movs	r3, #4
 8006fe2:	e067      	b.n	80070b4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	699b      	ldr	r3, [r3, #24]
 8006fea:	4619      	mov	r1, r3
 8006fec:	4610      	mov	r0, r2
 8006fee:	f7ff fe59 	bl	8006ca4 <create_chain>
 8006ff2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <dir_next+0xcc>
 8006ffa:	2307      	movs	r3, #7
 8006ffc:	e05a      	b.n	80070b4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d101      	bne.n	8007008 <dir_next+0xd6>
 8007004:	2302      	movs	r3, #2
 8007006:	e055      	b.n	80070b4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007008:	697b      	ldr	r3, [r7, #20]
 800700a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800700e:	d101      	bne.n	8007014 <dir_next+0xe2>
 8007010:	2301      	movs	r3, #1
 8007012:	e04f      	b.n	80070b4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f7ff fb55 	bl	80066c4 <sync_window>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <dir_next+0xf2>
 8007020:	2301      	movs	r3, #1
 8007022:	e047      	b.n	80070b4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	3330      	adds	r3, #48	; 0x30
 8007028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800702c:	2100      	movs	r1, #0
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff f97f 	bl	8006332 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007034:	2300      	movs	r3, #0
 8007036:	613b      	str	r3, [r7, #16]
 8007038:	6979      	ldr	r1, [r7, #20]
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff fc22 	bl	8006884 <clust2sect>
 8007040:	4602      	mov	r2, r0
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	62da      	str	r2, [r3, #44]	; 0x2c
 8007046:	e012      	b.n	800706e <dir_next+0x13c>
						fs->wflag = 1;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	2201      	movs	r2, #1
 800704c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f7ff fb38 	bl	80066c4 <sync_window>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <dir_next+0x12c>
 800705a:	2301      	movs	r3, #1
 800705c:	e02a      	b.n	80070b4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	3301      	adds	r3, #1
 8007062:	613b      	str	r3, [r7, #16]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	62da      	str	r2, [r3, #44]	; 0x2c
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	895b      	ldrh	r3, [r3, #10]
 8007072:	461a      	mov	r2, r3
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	4293      	cmp	r3, r2
 8007078:	d3e6      	bcc.n	8007048 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	1ad2      	subs	r2, r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800708c:	6979      	ldr	r1, [r7, #20]
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f7ff fbf8 	bl	8006884 <clust2sect>
 8007094:	4602      	mov	r2, r0
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80070ac:	441a      	add	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b086      	sub	sp, #24
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80070cc:	2100      	movs	r1, #0
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7ff feb4 	bl	8006e3c <dir_sdi>
 80070d4:	4603      	mov	r3, r0
 80070d6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80070d8:	7dfb      	ldrb	r3, [r7, #23]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d12b      	bne.n	8007136 <dir_alloc+0x7a>
		n = 0;
 80070de:	2300      	movs	r3, #0
 80070e0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	4619      	mov	r1, r3
 80070e8:	68f8      	ldr	r0, [r7, #12]
 80070ea:	f7ff fb2f 	bl	800674c <move_window>
 80070ee:	4603      	mov	r3, r0
 80070f0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d11d      	bne.n	8007134 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2be5      	cmp	r3, #229	; 0xe5
 8007100:	d004      	beq.n	800710c <dir_alloc+0x50>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6a1b      	ldr	r3, [r3, #32]
 8007106:	781b      	ldrb	r3, [r3, #0]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d107      	bne.n	800711c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	3301      	adds	r3, #1
 8007110:	613b      	str	r3, [r7, #16]
 8007112:	693a      	ldr	r2, [r7, #16]
 8007114:	683b      	ldr	r3, [r7, #0]
 8007116:	429a      	cmp	r2, r3
 8007118:	d102      	bne.n	8007120 <dir_alloc+0x64>
 800711a:	e00c      	b.n	8007136 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800711c:	2300      	movs	r3, #0
 800711e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007120:	2101      	movs	r1, #1
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f7ff ff05 	bl	8006f32 <dir_next>
 8007128:	4603      	mov	r3, r0
 800712a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800712c:	7dfb      	ldrb	r3, [r7, #23]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d0d7      	beq.n	80070e2 <dir_alloc+0x26>
 8007132:	e000      	b.n	8007136 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007134:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007136:	7dfb      	ldrb	r3, [r7, #23]
 8007138:	2b04      	cmp	r3, #4
 800713a:	d101      	bne.n	8007140 <dir_alloc+0x84>
 800713c:	2307      	movs	r3, #7
 800713e:	75fb      	strb	r3, [r7, #23]
	return res;
 8007140:	7dfb      	ldrb	r3, [r7, #23]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3718      	adds	r7, #24
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b084      	sub	sp, #16
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
 8007152:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	331a      	adds	r3, #26
 8007158:	4618      	mov	r0, r3
 800715a:	f7ff f847 	bl	80061ec <ld_word>
 800715e:	4603      	mov	r3, r0
 8007160:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	2b03      	cmp	r3, #3
 8007168:	d109      	bne.n	800717e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	3314      	adds	r3, #20
 800716e:	4618      	mov	r0, r3
 8007170:	f7ff f83c 	bl	80061ec <ld_word>
 8007174:	4603      	mov	r3, r0
 8007176:	041b      	lsls	r3, r3, #16
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	4313      	orrs	r3, r2
 800717c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800717e:	68fb      	ldr	r3, [r7, #12]
}
 8007180:	4618      	mov	r0, r3
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	331a      	adds	r3, #26
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	b292      	uxth	r2, r2
 800719c:	4611      	mov	r1, r2
 800719e:	4618      	mov	r0, r3
 80071a0:	f7ff f85f 	bl	8006262 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	781b      	ldrb	r3, [r3, #0]
 80071a8:	2b03      	cmp	r3, #3
 80071aa:	d109      	bne.n	80071c0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f103 0214 	add.w	r2, r3, #20
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	0c1b      	lsrs	r3, r3, #16
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	4619      	mov	r1, r3
 80071ba:	4610      	mov	r0, r2
 80071bc:	f7ff f851 	bl	8006262 <st_word>
	}
}
 80071c0:	bf00      	nop
 80071c2:	3710      	adds	r7, #16
 80071c4:	46bd      	mov	sp, r7
 80071c6:	bd80      	pop	{r7, pc}

080071c8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b086      	sub	sp, #24
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80071d6:	2100      	movs	r1, #0
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f7ff fe2f 	bl	8006e3c <dir_sdi>
 80071de:	4603      	mov	r3, r0
 80071e0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80071e2:	7dfb      	ldrb	r3, [r7, #23]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d001      	beq.n	80071ec <dir_find+0x24>
 80071e8:	7dfb      	ldrb	r3, [r7, #23]
 80071ea:	e03e      	b.n	800726a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	69db      	ldr	r3, [r3, #28]
 80071f0:	4619      	mov	r1, r3
 80071f2:	6938      	ldr	r0, [r7, #16]
 80071f4:	f7ff faaa 	bl	800674c <move_window>
 80071f8:	4603      	mov	r3, r0
 80071fa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80071fc:	7dfb      	ldrb	r3, [r7, #23]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d12f      	bne.n	8007262 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d102      	bne.n	8007216 <dir_find+0x4e>
 8007210:	2304      	movs	r3, #4
 8007212:	75fb      	strb	r3, [r7, #23]
 8007214:	e028      	b.n	8007268 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a1b      	ldr	r3, [r3, #32]
 800721a:	330b      	adds	r3, #11
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007222:	b2da      	uxtb	r2, r3
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	6a1b      	ldr	r3, [r3, #32]
 800722c:	330b      	adds	r3, #11
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	f003 0308 	and.w	r3, r3, #8
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <dir_find+0x86>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a18      	ldr	r0, [r3, #32]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	3324      	adds	r3, #36	; 0x24
 8007240:	220b      	movs	r2, #11
 8007242:	4619      	mov	r1, r3
 8007244:	f7ff f88f 	bl	8006366 <mem_cmp>
 8007248:	4603      	mov	r3, r0
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00b      	beq.n	8007266 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800724e:	2100      	movs	r1, #0
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff fe6e 	bl	8006f32 <dir_next>
 8007256:	4603      	mov	r3, r0
 8007258:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800725a:	7dfb      	ldrb	r3, [r7, #23]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d0c5      	beq.n	80071ec <dir_find+0x24>
 8007260:	e002      	b.n	8007268 <dir_find+0xa0>
		if (res != FR_OK) break;
 8007262:	bf00      	nop
 8007264:	e000      	b.n	8007268 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8007266:	bf00      	nop

	return res;
 8007268:	7dfb      	ldrb	r3, [r7, #23]
}
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b084      	sub	sp, #16
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8007280:	2101      	movs	r1, #1
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f7ff ff1a 	bl	80070bc <dir_alloc>
 8007288:	4603      	mov	r3, r0
 800728a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800728c:	7bfb      	ldrb	r3, [r7, #15]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d11c      	bne.n	80072cc <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	4619      	mov	r1, r3
 8007298:	68b8      	ldr	r0, [r7, #8]
 800729a:	f7ff fa57 	bl	800674c <move_window>
 800729e:	4603      	mov	r3, r0
 80072a0:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d111      	bne.n	80072cc <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6a1b      	ldr	r3, [r3, #32]
 80072ac:	2220      	movs	r2, #32
 80072ae:	2100      	movs	r1, #0
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7ff f83e 	bl	8006332 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6a18      	ldr	r0, [r3, #32]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	3324      	adds	r3, #36	; 0x24
 80072be:	220b      	movs	r2, #11
 80072c0:	4619      	mov	r1, r3
 80072c2:	f7ff f815 	bl	80062f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	2201      	movs	r2, #1
 80072ca:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80072cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ce:	4618      	mov	r0, r3
 80072d0:	3710      	adds	r7, #16
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}

080072d6 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b086      	sub	sp, #24
 80072da:	af00      	add	r7, sp, #0
 80072dc:	6078      	str	r0, [r7, #4]
 80072de:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	2200      	movs	r2, #0
 80072e4:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	69db      	ldr	r3, [r3, #28]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d04e      	beq.n	800738c <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80072ee:	2300      	movs	r3, #0
 80072f0:	613b      	str	r3, [r7, #16]
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80072f6:	e021      	b.n	800733c <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1a      	ldr	r2, [r3, #32]
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	1c59      	adds	r1, r3, #1
 8007300:	6179      	str	r1, [r7, #20]
 8007302:	4413      	add	r3, r2
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	2b20      	cmp	r3, #32
 800730c:	d100      	bne.n	8007310 <get_fileinfo+0x3a>
 800730e:	e015      	b.n	800733c <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8007310:	7bfb      	ldrb	r3, [r7, #15]
 8007312:	2b05      	cmp	r3, #5
 8007314:	d101      	bne.n	800731a <get_fileinfo+0x44>
 8007316:	23e5      	movs	r3, #229	; 0xe5
 8007318:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b09      	cmp	r3, #9
 800731e:	d106      	bne.n	800732e <get_fileinfo+0x58>
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	1c5a      	adds	r2, r3, #1
 8007324:	613a      	str	r2, [r7, #16]
 8007326:	683a      	ldr	r2, [r7, #0]
 8007328:	4413      	add	r3, r2
 800732a:	222e      	movs	r2, #46	; 0x2e
 800732c:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1c5a      	adds	r2, r3, #1
 8007332:	613a      	str	r2, [r7, #16]
 8007334:	683a      	ldr	r2, [r7, #0]
 8007336:	4413      	add	r3, r2
 8007338:	7bfa      	ldrb	r2, [r7, #15]
 800733a:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2b0a      	cmp	r3, #10
 8007340:	d9da      	bls.n	80072f8 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8007342:	683a      	ldr	r2, [r7, #0]
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	4413      	add	r3, r2
 8007348:	3309      	adds	r3, #9
 800734a:	2200      	movs	r2, #0
 800734c:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	7ada      	ldrb	r2, [r3, #11]
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a1b      	ldr	r3, [r3, #32]
 800735c:	331c      	adds	r3, #28
 800735e:	4618      	mov	r0, r3
 8007360:	f7fe ff5c 	bl	800621c <ld_dword>
 8007364:	4602      	mov	r2, r0
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6a1b      	ldr	r3, [r3, #32]
 800736e:	3316      	adds	r3, #22
 8007370:	4618      	mov	r0, r3
 8007372:	f7fe ff53 	bl	800621c <ld_dword>
 8007376:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	b29a      	uxth	r2, r3
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	80da      	strh	r2, [r3, #6]
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	0c1b      	lsrs	r3, r3, #16
 8007384:	b29a      	uxth	r2, r3
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	809a      	strh	r2, [r3, #4]
 800738a:	e000      	b.n	800738e <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800738c:	bf00      	nop
}
 800738e:	3718      	adds	r7, #24
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	60fb      	str	r3, [r7, #12]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3324      	adds	r3, #36	; 0x24
 80073a8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80073aa:	220b      	movs	r2, #11
 80073ac:	2120      	movs	r1, #32
 80073ae:	68b8      	ldr	r0, [r7, #8]
 80073b0:	f7fe ffbf 	bl	8006332 <mem_set>
	si = i = 0; ni = 8;
 80073b4:	2300      	movs	r3, #0
 80073b6:	613b      	str	r3, [r7, #16]
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	617b      	str	r3, [r7, #20]
 80073bc:	2308      	movs	r3, #8
 80073be:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80073c0:	697b      	ldr	r3, [r7, #20]
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	617a      	str	r2, [r7, #20]
 80073c6:	68fa      	ldr	r2, [r7, #12]
 80073c8:	4413      	add	r3, r2
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80073ce:	7ffb      	ldrb	r3, [r7, #31]
 80073d0:	2b20      	cmp	r3, #32
 80073d2:	d94e      	bls.n	8007472 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80073d4:	7ffb      	ldrb	r3, [r7, #31]
 80073d6:	2b2f      	cmp	r3, #47	; 0x2f
 80073d8:	d006      	beq.n	80073e8 <create_name+0x54>
 80073da:	7ffb      	ldrb	r3, [r7, #31]
 80073dc:	2b5c      	cmp	r3, #92	; 0x5c
 80073de:	d110      	bne.n	8007402 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80073e0:	e002      	b.n	80073e8 <create_name+0x54>
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	3301      	adds	r3, #1
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	68fa      	ldr	r2, [r7, #12]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	4413      	add	r3, r2
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b2f      	cmp	r3, #47	; 0x2f
 80073f2:	d0f6      	beq.n	80073e2 <create_name+0x4e>
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	4413      	add	r3, r2
 80073fa:	781b      	ldrb	r3, [r3, #0]
 80073fc:	2b5c      	cmp	r3, #92	; 0x5c
 80073fe:	d0f0      	beq.n	80073e2 <create_name+0x4e>
			break;
 8007400:	e038      	b.n	8007474 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8007402:	7ffb      	ldrb	r3, [r7, #31]
 8007404:	2b2e      	cmp	r3, #46	; 0x2e
 8007406:	d003      	beq.n	8007410 <create_name+0x7c>
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	429a      	cmp	r2, r3
 800740e:	d30c      	bcc.n	800742a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8007410:	69bb      	ldr	r3, [r7, #24]
 8007412:	2b0b      	cmp	r3, #11
 8007414:	d002      	beq.n	800741c <create_name+0x88>
 8007416:	7ffb      	ldrb	r3, [r7, #31]
 8007418:	2b2e      	cmp	r3, #46	; 0x2e
 800741a:	d001      	beq.n	8007420 <create_name+0x8c>
 800741c:	2306      	movs	r3, #6
 800741e:	e044      	b.n	80074aa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8007420:	2308      	movs	r3, #8
 8007422:	613b      	str	r3, [r7, #16]
 8007424:	230b      	movs	r3, #11
 8007426:	61bb      	str	r3, [r7, #24]
			continue;
 8007428:	e022      	b.n	8007470 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800742a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800742e:	2b00      	cmp	r3, #0
 8007430:	da04      	bge.n	800743c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8007432:	7ffb      	ldrb	r3, [r7, #31]
 8007434:	3b80      	subs	r3, #128	; 0x80
 8007436:	4a1f      	ldr	r2, [pc, #124]	; (80074b4 <create_name+0x120>)
 8007438:	5cd3      	ldrb	r3, [r2, r3]
 800743a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800743c:	7ffb      	ldrb	r3, [r7, #31]
 800743e:	4619      	mov	r1, r3
 8007440:	481d      	ldr	r0, [pc, #116]	; (80074b8 <create_name+0x124>)
 8007442:	f7fe ffb7 	bl	80063b4 <chk_chr>
 8007446:	4603      	mov	r3, r0
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <create_name+0xbc>
 800744c:	2306      	movs	r3, #6
 800744e:	e02c      	b.n	80074aa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8007450:	7ffb      	ldrb	r3, [r7, #31]
 8007452:	2b60      	cmp	r3, #96	; 0x60
 8007454:	d905      	bls.n	8007462 <create_name+0xce>
 8007456:	7ffb      	ldrb	r3, [r7, #31]
 8007458:	2b7a      	cmp	r3, #122	; 0x7a
 800745a:	d802      	bhi.n	8007462 <create_name+0xce>
 800745c:	7ffb      	ldrb	r3, [r7, #31]
 800745e:	3b20      	subs	r3, #32
 8007460:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	613a      	str	r2, [r7, #16]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	4413      	add	r3, r2
 800746c:	7ffa      	ldrb	r2, [r7, #31]
 800746e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8007470:	e7a6      	b.n	80073c0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8007472:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8007474:	68fa      	ldr	r2, [r7, #12]
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	441a      	add	r2, r3
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d101      	bne.n	8007488 <create_name+0xf4>
 8007484:	2306      	movs	r3, #6
 8007486:	e010      	b.n	80074aa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	2be5      	cmp	r3, #229	; 0xe5
 800748e:	d102      	bne.n	8007496 <create_name+0x102>
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	2205      	movs	r2, #5
 8007494:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007496:	7ffb      	ldrb	r3, [r7, #31]
 8007498:	2b20      	cmp	r3, #32
 800749a:	d801      	bhi.n	80074a0 <create_name+0x10c>
 800749c:	2204      	movs	r2, #4
 800749e:	e000      	b.n	80074a2 <create_name+0x10e>
 80074a0:	2200      	movs	r2, #0
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	330b      	adds	r3, #11
 80074a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80074a8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	3720      	adds	r7, #32
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}
 80074b2:	bf00      	nop
 80074b4:	0800ae68 	.word	0x0800ae68
 80074b8:	0800adf8 	.word	0x0800adf8

080074bc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b086      	sub	sp, #24
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
 80074c4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80074ca:	693b      	ldr	r3, [r7, #16]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80074d0:	e002      	b.n	80074d8 <follow_path+0x1c>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	3301      	adds	r3, #1
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	2b2f      	cmp	r3, #47	; 0x2f
 80074de:	d0f8      	beq.n	80074d2 <follow_path+0x16>
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b5c      	cmp	r3, #92	; 0x5c
 80074e6:	d0f4      	beq.n	80074d2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	2200      	movs	r2, #0
 80074ec:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b1f      	cmp	r3, #31
 80074f4:	d80a      	bhi.n	800750c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2280      	movs	r2, #128	; 0x80
 80074fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80074fe:	2100      	movs	r1, #0
 8007500:	6878      	ldr	r0, [r7, #4]
 8007502:	f7ff fc9b 	bl	8006e3c <dir_sdi>
 8007506:	4603      	mov	r3, r0
 8007508:	75fb      	strb	r3, [r7, #23]
 800750a:	e043      	b.n	8007594 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800750c:	463b      	mov	r3, r7
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff ff3f 	bl	8007394 <create_name>
 8007516:	4603      	mov	r3, r0
 8007518:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800751a:	7dfb      	ldrb	r3, [r7, #23]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d134      	bne.n	800758a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff fe51 	bl	80071c8 <dir_find>
 8007526:	4603      	mov	r3, r0
 8007528:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007530:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007532:	7dfb      	ldrb	r3, [r7, #23]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00a      	beq.n	800754e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	2b04      	cmp	r3, #4
 800753c:	d127      	bne.n	800758e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800753e:	7afb      	ldrb	r3, [r7, #11]
 8007540:	f003 0304 	and.w	r3, r3, #4
 8007544:	2b00      	cmp	r3, #0
 8007546:	d122      	bne.n	800758e <follow_path+0xd2>
 8007548:	2305      	movs	r3, #5
 800754a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800754c:	e01f      	b.n	800758e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800754e:	7afb      	ldrb	r3, [r7, #11]
 8007550:	f003 0304 	and.w	r3, r3, #4
 8007554:	2b00      	cmp	r3, #0
 8007556:	d11c      	bne.n	8007592 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	799b      	ldrb	r3, [r3, #6]
 800755c:	f003 0310 	and.w	r3, r3, #16
 8007560:	2b00      	cmp	r3, #0
 8007562:	d102      	bne.n	800756a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007564:	2305      	movs	r3, #5
 8007566:	75fb      	strb	r3, [r7, #23]
 8007568:	e014      	b.n	8007594 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007578:	4413      	add	r3, r2
 800757a:	4619      	mov	r1, r3
 800757c:	68f8      	ldr	r0, [r7, #12]
 800757e:	f7ff fde4 	bl	800714a <ld_clust>
 8007582:	4602      	mov	r2, r0
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007588:	e7c0      	b.n	800750c <follow_path+0x50>
			if (res != FR_OK) break;
 800758a:	bf00      	nop
 800758c:	e002      	b.n	8007594 <follow_path+0xd8>
				break;
 800758e:	bf00      	nop
 8007590:	e000      	b.n	8007594 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007592:	bf00      	nop
			}
		}
	}

	return res;
 8007594:	7dfb      	ldrb	r3, [r7, #23]
}
 8007596:	4618      	mov	r0, r3
 8007598:	3718      	adds	r7, #24
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}

0800759e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800759e:	b480      	push	{r7}
 80075a0:	b087      	sub	sp, #28
 80075a2:	af00      	add	r7, sp, #0
 80075a4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80075a6:	f04f 33ff 	mov.w	r3, #4294967295
 80075aa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d031      	beq.n	8007618 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	617b      	str	r3, [r7, #20]
 80075ba:	e002      	b.n	80075c2 <get_ldnumber+0x24>
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	3301      	adds	r3, #1
 80075c0:	617b      	str	r3, [r7, #20]
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b20      	cmp	r3, #32
 80075c8:	d903      	bls.n	80075d2 <get_ldnumber+0x34>
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b3a      	cmp	r3, #58	; 0x3a
 80075d0:	d1f4      	bne.n	80075bc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	2b3a      	cmp	r3, #58	; 0x3a
 80075d8:	d11c      	bne.n	8007614 <get_ldnumber+0x76>
			tp = *path;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	60fa      	str	r2, [r7, #12]
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	3b30      	subs	r3, #48	; 0x30
 80075ea:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	2b09      	cmp	r3, #9
 80075f0:	d80e      	bhi.n	8007610 <get_ldnumber+0x72>
 80075f2:	68fa      	ldr	r2, [r7, #12]
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d10a      	bne.n	8007610 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d107      	bne.n	8007610 <get_ldnumber+0x72>
					vol = (int)i;
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	3301      	adds	r3, #1
 8007608:	617b      	str	r3, [r7, #20]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	e002      	b.n	800761a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007614:	2300      	movs	r3, #0
 8007616:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007618:	693b      	ldr	r3, [r7, #16]
}
 800761a:	4618      	mov	r0, r3
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr
	...

08007628 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
 8007630:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	70da      	strb	r2, [r3, #3]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f04f 32ff 	mov.w	r2, #4294967295
 800763e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007640:	6839      	ldr	r1, [r7, #0]
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f7ff f882 	bl	800674c <move_window>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <check_fs+0x2a>
 800764e:	2304      	movs	r3, #4
 8007650:	e038      	b.n	80076c4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	3330      	adds	r3, #48	; 0x30
 8007656:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800765a:	4618      	mov	r0, r3
 800765c:	f7fe fdc6 	bl	80061ec <ld_word>
 8007660:	4603      	mov	r3, r0
 8007662:	461a      	mov	r2, r3
 8007664:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007668:	429a      	cmp	r2, r3
 800766a:	d001      	beq.n	8007670 <check_fs+0x48>
 800766c:	2303      	movs	r3, #3
 800766e:	e029      	b.n	80076c4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007676:	2be9      	cmp	r3, #233	; 0xe9
 8007678:	d009      	beq.n	800768e <check_fs+0x66>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007680:	2beb      	cmp	r3, #235	; 0xeb
 8007682:	d11e      	bne.n	80076c2 <check_fs+0x9a>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800768a:	2b90      	cmp	r3, #144	; 0x90
 800768c:	d119      	bne.n	80076c2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	3330      	adds	r3, #48	; 0x30
 8007692:	3336      	adds	r3, #54	; 0x36
 8007694:	4618      	mov	r0, r3
 8007696:	f7fe fdc1 	bl	800621c <ld_dword>
 800769a:	4603      	mov	r3, r0
 800769c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80076a0:	4a0a      	ldr	r2, [pc, #40]	; (80076cc <check_fs+0xa4>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d101      	bne.n	80076aa <check_fs+0x82>
 80076a6:	2300      	movs	r3, #0
 80076a8:	e00c      	b.n	80076c4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	3330      	adds	r3, #48	; 0x30
 80076ae:	3352      	adds	r3, #82	; 0x52
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7fe fdb3 	bl	800621c <ld_dword>
 80076b6:	4602      	mov	r2, r0
 80076b8:	4b05      	ldr	r3, [pc, #20]	; (80076d0 <check_fs+0xa8>)
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d101      	bne.n	80076c2 <check_fs+0x9a>
 80076be:	2300      	movs	r3, #0
 80076c0:	e000      	b.n	80076c4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80076c2:	2302      	movs	r3, #2
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}
 80076cc:	00544146 	.word	0x00544146
 80076d0:	33544146 	.word	0x33544146

080076d4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b096      	sub	sp, #88	; 0x58
 80076d8:	af00      	add	r7, sp, #0
 80076da:	60f8      	str	r0, [r7, #12]
 80076dc:	60b9      	str	r1, [r7, #8]
 80076de:	4613      	mov	r3, r2
 80076e0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80076e8:	68f8      	ldr	r0, [r7, #12]
 80076ea:	f7ff ff58 	bl	800759e <get_ldnumber>
 80076ee:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80076f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	da01      	bge.n	80076fa <find_volume+0x26>
 80076f6:	230b      	movs	r3, #11
 80076f8:	e22e      	b.n	8007b58 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80076fa:	4aa8      	ldr	r2, [pc, #672]	; (800799c <find_volume+0x2c8>)
 80076fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007702:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <find_volume+0x3a>
 800770a:	230c      	movs	r3, #12
 800770c:	e224      	b.n	8007b58 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007712:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	f023 0301 	bic.w	r3, r3, #1
 800771a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800771c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d01a      	beq.n	800775a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007726:	785b      	ldrb	r3, [r3, #1]
 8007728:	4618      	mov	r0, r3
 800772a:	f7fe fcc1 	bl	80060b0 <disk_status>
 800772e:	4603      	mov	r3, r0
 8007730:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007734:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10c      	bne.n	800775a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007740:	79fb      	ldrb	r3, [r7, #7]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d007      	beq.n	8007756 <find_volume+0x82>
 8007746:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800774a:	f003 0304 	and.w	r3, r3, #4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007752:	230a      	movs	r3, #10
 8007754:	e200      	b.n	8007b58 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007756:	2300      	movs	r3, #0
 8007758:	e1fe      	b.n	8007b58 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800775a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800775c:	2200      	movs	r2, #0
 800775e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007762:	b2da      	uxtb	r2, r3
 8007764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007766:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	785b      	ldrb	r3, [r3, #1]
 800776c:	4618      	mov	r0, r3
 800776e:	f7fe fcb9 	bl	80060e4 <disk_initialize>
 8007772:	4603      	mov	r3, r0
 8007774:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007778:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800777c:	f003 0301 	and.w	r3, r3, #1
 8007780:	2b00      	cmp	r3, #0
 8007782:	d001      	beq.n	8007788 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007784:	2303      	movs	r3, #3
 8007786:	e1e7      	b.n	8007b58 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007788:	79fb      	ldrb	r3, [r7, #7]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d007      	beq.n	800779e <find_volume+0xca>
 800778e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007792:	f003 0304 	and.w	r3, r3, #4
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800779a:	230a      	movs	r3, #10
 800779c:	e1dc      	b.n	8007b58 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80077a2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80077a4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80077a6:	f7ff ff3f 	bl	8007628 <check_fs>
 80077aa:	4603      	mov	r3, r0
 80077ac:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80077b0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077b4:	2b02      	cmp	r3, #2
 80077b6:	d14b      	bne.n	8007850 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077b8:	2300      	movs	r3, #0
 80077ba:	643b      	str	r3, [r7, #64]	; 0x40
 80077bc:	e01f      	b.n	80077fe <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80077be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80077c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077c6:	011b      	lsls	r3, r3, #4
 80077c8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80077cc:	4413      	add	r3, r2
 80077ce:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80077d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077d2:	3304      	adds	r3, #4
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d006      	beq.n	80077e8 <find_volume+0x114>
 80077da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077dc:	3308      	adds	r3, #8
 80077de:	4618      	mov	r0, r3
 80077e0:	f7fe fd1c 	bl	800621c <ld_dword>
 80077e4:	4602      	mov	r2, r0
 80077e6:	e000      	b.n	80077ea <find_volume+0x116>
 80077e8:	2200      	movs	r2, #0
 80077ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80077f2:	440b      	add	r3, r1
 80077f4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80077f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077fa:	3301      	adds	r3, #1
 80077fc:	643b      	str	r3, [r7, #64]	; 0x40
 80077fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007800:	2b03      	cmp	r3, #3
 8007802:	d9dc      	bls.n	80077be <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007804:	2300      	movs	r3, #0
 8007806:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800780a:	2b00      	cmp	r3, #0
 800780c:	d002      	beq.n	8007814 <find_volume+0x140>
 800780e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007810:	3b01      	subs	r3, #1
 8007812:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007814:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800781c:	4413      	add	r3, r2
 800781e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007822:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007824:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007826:	2b00      	cmp	r3, #0
 8007828:	d005      	beq.n	8007836 <find_volume+0x162>
 800782a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800782c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800782e:	f7ff fefb 	bl	8007628 <check_fs>
 8007832:	4603      	mov	r3, r0
 8007834:	e000      	b.n	8007838 <find_volume+0x164>
 8007836:	2303      	movs	r3, #3
 8007838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800783c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007840:	2b01      	cmp	r3, #1
 8007842:	d905      	bls.n	8007850 <find_volume+0x17c>
 8007844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007846:	3301      	adds	r3, #1
 8007848:	643b      	str	r3, [r7, #64]	; 0x40
 800784a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800784c:	2b03      	cmp	r3, #3
 800784e:	d9e1      	bls.n	8007814 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007850:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007854:	2b04      	cmp	r3, #4
 8007856:	d101      	bne.n	800785c <find_volume+0x188>
 8007858:	2301      	movs	r3, #1
 800785a:	e17d      	b.n	8007b58 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800785c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007860:	2b01      	cmp	r3, #1
 8007862:	d901      	bls.n	8007868 <find_volume+0x194>
 8007864:	230d      	movs	r3, #13
 8007866:	e177      	b.n	8007b58 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007868:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800786a:	3330      	adds	r3, #48	; 0x30
 800786c:	330b      	adds	r3, #11
 800786e:	4618      	mov	r0, r3
 8007870:	f7fe fcbc 	bl	80061ec <ld_word>
 8007874:	4603      	mov	r3, r0
 8007876:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800787a:	d001      	beq.n	8007880 <find_volume+0x1ac>
 800787c:	230d      	movs	r3, #13
 800787e:	e16b      	b.n	8007b58 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007882:	3330      	adds	r3, #48	; 0x30
 8007884:	3316      	adds	r3, #22
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fcb0 	bl	80061ec <ld_word>
 800788c:	4603      	mov	r3, r0
 800788e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007892:	2b00      	cmp	r3, #0
 8007894:	d106      	bne.n	80078a4 <find_volume+0x1d0>
 8007896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007898:	3330      	adds	r3, #48	; 0x30
 800789a:	3324      	adds	r3, #36	; 0x24
 800789c:	4618      	mov	r0, r3
 800789e:	f7fe fcbd 	bl	800621c <ld_dword>
 80078a2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80078a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80078a8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80078aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ac:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	789b      	ldrb	r3, [r3, #2]
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d005      	beq.n	80078c8 <find_volume+0x1f4>
 80078bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078be:	789b      	ldrb	r3, [r3, #2]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d001      	beq.n	80078c8 <find_volume+0x1f4>
 80078c4:	230d      	movs	r3, #13
 80078c6:	e147      	b.n	8007b58 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	789b      	ldrb	r3, [r3, #2]
 80078cc:	461a      	mov	r2, r3
 80078ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80078d0:	fb02 f303 	mul.w	r3, r2, r3
 80078d4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078dc:	b29a      	uxth	r2, r3
 80078de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80078e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e4:	895b      	ldrh	r3, [r3, #10]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d008      	beq.n	80078fc <find_volume+0x228>
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	895b      	ldrh	r3, [r3, #10]
 80078ee:	461a      	mov	r2, r3
 80078f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078f2:	895b      	ldrh	r3, [r3, #10]
 80078f4:	3b01      	subs	r3, #1
 80078f6:	4013      	ands	r3, r2
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d001      	beq.n	8007900 <find_volume+0x22c>
 80078fc:	230d      	movs	r3, #13
 80078fe:	e12b      	b.n	8007b58 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007902:	3330      	adds	r3, #48	; 0x30
 8007904:	3311      	adds	r3, #17
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe fc70 	bl	80061ec <ld_word>
 800790c:	4603      	mov	r3, r0
 800790e:	461a      	mov	r2, r3
 8007910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007912:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007916:	891b      	ldrh	r3, [r3, #8]
 8007918:	f003 030f 	and.w	r3, r3, #15
 800791c:	b29b      	uxth	r3, r3
 800791e:	2b00      	cmp	r3, #0
 8007920:	d001      	beq.n	8007926 <find_volume+0x252>
 8007922:	230d      	movs	r3, #13
 8007924:	e118      	b.n	8007b58 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007928:	3330      	adds	r3, #48	; 0x30
 800792a:	3313      	adds	r3, #19
 800792c:	4618      	mov	r0, r3
 800792e:	f7fe fc5d 	bl	80061ec <ld_word>
 8007932:	4603      	mov	r3, r0
 8007934:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007936:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007938:	2b00      	cmp	r3, #0
 800793a:	d106      	bne.n	800794a <find_volume+0x276>
 800793c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800793e:	3330      	adds	r3, #48	; 0x30
 8007940:	3320      	adds	r3, #32
 8007942:	4618      	mov	r0, r3
 8007944:	f7fe fc6a 	bl	800621c <ld_dword>
 8007948:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800794a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794c:	3330      	adds	r3, #48	; 0x30
 800794e:	330e      	adds	r3, #14
 8007950:	4618      	mov	r0, r3
 8007952:	f7fe fc4b 	bl	80061ec <ld_word>
 8007956:	4603      	mov	r3, r0
 8007958:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800795a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800795c:	2b00      	cmp	r3, #0
 800795e:	d101      	bne.n	8007964 <find_volume+0x290>
 8007960:	230d      	movs	r3, #13
 8007962:	e0f9      	b.n	8007b58 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007964:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007968:	4413      	add	r3, r2
 800796a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800796c:	8912      	ldrh	r2, [r2, #8]
 800796e:	0912      	lsrs	r2, r2, #4
 8007970:	b292      	uxth	r2, r2
 8007972:	4413      	add	r3, r2
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007976:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797a:	429a      	cmp	r2, r3
 800797c:	d201      	bcs.n	8007982 <find_volume+0x2ae>
 800797e:	230d      	movs	r3, #13
 8007980:	e0ea      	b.n	8007b58 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007982:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800798a:	8952      	ldrh	r2, [r2, #10]
 800798c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	2b00      	cmp	r3, #0
 8007996:	d103      	bne.n	80079a0 <find_volume+0x2cc>
 8007998:	230d      	movs	r3, #13
 800799a:	e0dd      	b.n	8007b58 <find_volume+0x484>
 800799c:	200002cc 	.word	0x200002cc
		fmt = FS_FAT32;
 80079a0:	2303      	movs	r3, #3
 80079a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80079a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80079ac:	4293      	cmp	r3, r2
 80079ae:	d802      	bhi.n	80079b6 <find_volume+0x2e2>
 80079b0:	2302      	movs	r3, #2
 80079b2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80079b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80079bc:	4293      	cmp	r3, r2
 80079be:	d802      	bhi.n	80079c6 <find_volume+0x2f2>
 80079c0:	2301      	movs	r3, #1
 80079c2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80079c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c8:	1c9a      	adds	r2, r3, #2
 80079ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079cc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 80079ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079d2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80079d4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80079d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079d8:	441a      	add	r2, r3
 80079da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079dc:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80079de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	441a      	add	r2, r3
 80079e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079e6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80079e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80079ec:	2b03      	cmp	r3, #3
 80079ee:	d11e      	bne.n	8007a2e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80079f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f2:	3330      	adds	r3, #48	; 0x30
 80079f4:	332a      	adds	r3, #42	; 0x2a
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe fbf8 	bl	80061ec <ld_word>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <find_volume+0x332>
 8007a02:	230d      	movs	r3, #13
 8007a04:	e0a8      	b.n	8007b58 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a08:	891b      	ldrh	r3, [r3, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d001      	beq.n	8007a12 <find_volume+0x33e>
 8007a0e:	230d      	movs	r3, #13
 8007a10:	e0a2      	b.n	8007b58 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a14:	3330      	adds	r3, #48	; 0x30
 8007a16:	332c      	adds	r3, #44	; 0x2c
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7fe fbff 	bl	800621c <ld_dword>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a22:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007a24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a26:	695b      	ldr	r3, [r3, #20]
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	647b      	str	r3, [r7, #68]	; 0x44
 8007a2c:	e01f      	b.n	8007a6e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a30:	891b      	ldrh	r3, [r3, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <find_volume+0x366>
 8007a36:	230d      	movs	r3, #13
 8007a38:	e08e      	b.n	8007b58 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a3c:	6a1a      	ldr	r2, [r3, #32]
 8007a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a40:	441a      	add	r2, r3
 8007a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a44:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007a46:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a4a:	2b02      	cmp	r3, #2
 8007a4c:	d103      	bne.n	8007a56 <find_volume+0x382>
 8007a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a50:	695b      	ldr	r3, [r3, #20]
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	e00a      	b.n	8007a6c <find_volume+0x398>
 8007a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a58:	695a      	ldr	r2, [r3, #20]
 8007a5a:	4613      	mov	r3, r2
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	4413      	add	r3, r2
 8007a60:	085a      	lsrs	r2, r3, #1
 8007a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a64:	695b      	ldr	r3, [r3, #20]
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007a6c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007a74:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007a78:	0a5b      	lsrs	r3, r3, #9
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	d201      	bcs.n	8007a82 <find_volume+0x3ae>
 8007a7e:	230d      	movs	r3, #13
 8007a80:	e06a      	b.n	8007b58 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a84:	f04f 32ff 	mov.w	r2, #4294967295
 8007a88:	611a      	str	r2, [r3, #16]
 8007a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a8c:	691a      	ldr	r2, [r3, #16]
 8007a8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a90:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8007a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a94:	2280      	movs	r2, #128	; 0x80
 8007a96:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007a98:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d149      	bne.n	8007b34 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	3330      	adds	r3, #48	; 0x30
 8007aa4:	3330      	adds	r3, #48	; 0x30
 8007aa6:	4618      	mov	r0, r3
 8007aa8:	f7fe fba0 	bl	80061ec <ld_word>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d140      	bne.n	8007b34 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007ab2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007aba:	f7fe fe47 	bl	800674c <move_window>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d137      	bne.n	8007b34 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007acc:	3330      	adds	r3, #48	; 0x30
 8007ace:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f7fe fb8a 	bl	80061ec <ld_word>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	461a      	mov	r2, r3
 8007adc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d127      	bne.n	8007b34 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae6:	3330      	adds	r3, #48	; 0x30
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f7fe fb97 	bl	800621c <ld_dword>
 8007aee:	4602      	mov	r2, r0
 8007af0:	4b1b      	ldr	r3, [pc, #108]	; (8007b60 <find_volume+0x48c>)
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d11e      	bne.n	8007b34 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007af8:	3330      	adds	r3, #48	; 0x30
 8007afa:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe fb8c 	bl	800621c <ld_dword>
 8007b04:	4602      	mov	r2, r0
 8007b06:	4b17      	ldr	r3, [pc, #92]	; (8007b64 <find_volume+0x490>)
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d113      	bne.n	8007b34 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b0e:	3330      	adds	r3, #48	; 0x30
 8007b10:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8007b14:	4618      	mov	r0, r3
 8007b16:	f7fe fb81 	bl	800621c <ld_dword>
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b1e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b22:	3330      	adds	r3, #48	; 0x30
 8007b24:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fe fb77 	bl	800621c <ld_dword>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b32:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b36:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8007b3a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007b3c:	4b0a      	ldr	r3, [pc, #40]	; (8007b68 <find_volume+0x494>)
 8007b3e:	881b      	ldrh	r3, [r3, #0]
 8007b40:	3301      	adds	r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	4b08      	ldr	r3, [pc, #32]	; (8007b68 <find_volume+0x494>)
 8007b46:	801a      	strh	r2, [r3, #0]
 8007b48:	4b07      	ldr	r3, [pc, #28]	; (8007b68 <find_volume+0x494>)
 8007b4a:	881a      	ldrh	r2, [r3, #0]
 8007b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007b50:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007b52:	f7fe fd93 	bl	800667c <clear_lock>
#endif
	return FR_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3758      	adds	r7, #88	; 0x58
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	41615252 	.word	0x41615252
 8007b64:	61417272 	.word	0x61417272
 8007b68:	200002d0 	.word	0x200002d0

08007b6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b084      	sub	sp, #16
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007b76:	2309      	movs	r3, #9
 8007b78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d01c      	beq.n	8007bba <validate+0x4e>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d018      	beq.n	8007bba <validate+0x4e>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d013      	beq.n	8007bba <validate+0x4e>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	889a      	ldrh	r2, [r3, #4]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	88db      	ldrh	r3, [r3, #6]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d10c      	bne.n	8007bba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	785b      	ldrb	r3, [r3, #1]
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	f7fe fa82 	bl	80060b0 <disk_status>
 8007bac:	4603      	mov	r3, r0
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <validate+0x4e>
			res = FR_OK;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007bba:	7bfb      	ldrb	r3, [r7, #15]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d102      	bne.n	8007bc6 <validate+0x5a>
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	e000      	b.n	8007bc8 <validate+0x5c>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	683a      	ldr	r2, [r7, #0]
 8007bca:	6013      	str	r3, [r2, #0]
	return res;
 8007bcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bce:	4618      	mov	r0, r3
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}
	...

08007bd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007bd8:	b580      	push	{r7, lr}
 8007bda:	b088      	sub	sp, #32
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	60f8      	str	r0, [r7, #12]
 8007be0:	60b9      	str	r1, [r7, #8]
 8007be2:	4613      	mov	r3, r2
 8007be4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007bea:	f107 0310 	add.w	r3, r7, #16
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f7ff fcd5 	bl	800759e <get_ldnumber>
 8007bf4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007bf6:	69fb      	ldr	r3, [r7, #28]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	da01      	bge.n	8007c00 <f_mount+0x28>
 8007bfc:	230b      	movs	r3, #11
 8007bfe:	e02b      	b.n	8007c58 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007c00:	4a17      	ldr	r2, [pc, #92]	; (8007c60 <f_mount+0x88>)
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c08:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d005      	beq.n	8007c1c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8007c10:	69b8      	ldr	r0, [r7, #24]
 8007c12:	f7fe fd33 	bl	800667c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007c16:	69bb      	ldr	r3, [r7, #24]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d002      	beq.n	8007c28 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8007c28:	68fa      	ldr	r2, [r7, #12]
 8007c2a:	490d      	ldr	r1, [pc, #52]	; (8007c60 <f_mount+0x88>)
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d002      	beq.n	8007c3e <f_mount+0x66>
 8007c38:	79fb      	ldrb	r3, [r7, #7]
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d001      	beq.n	8007c42 <f_mount+0x6a>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	e00a      	b.n	8007c58 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8007c42:	f107 010c 	add.w	r1, r7, #12
 8007c46:	f107 0308 	add.w	r3, r7, #8
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7ff fd41 	bl	80076d4 <find_volume>
 8007c52:	4603      	mov	r3, r0
 8007c54:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3720      	adds	r7, #32
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	200002cc 	.word	0x200002cc

08007c64 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b098      	sub	sp, #96	; 0x60
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	60f8      	str	r0, [r7, #12]
 8007c6c:	60b9      	str	r1, [r7, #8]
 8007c6e:	4613      	mov	r3, r2
 8007c70:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d101      	bne.n	8007c7c <f_open+0x18>
 8007c78:	2309      	movs	r3, #9
 8007c7a:	e1ad      	b.n	8007fd8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007c7c:	79fb      	ldrb	r3, [r7, #7]
 8007c7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007c82:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007c84:	79fa      	ldrb	r2, [r7, #7]
 8007c86:	f107 0110 	add.w	r1, r7, #16
 8007c8a:	f107 0308 	add.w	r3, r7, #8
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff fd20 	bl	80076d4 <find_volume>
 8007c94:	4603      	mov	r3, r0
 8007c96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8007c9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f040 8191 	bne.w	8007fc6 <f_open+0x362>
		dj.obj.fs = fs;
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	f107 0314 	add.w	r3, r7, #20
 8007cae:	4611      	mov	r1, r2
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f7ff fc03 	bl	80074bc <follow_path>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007cbc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d11a      	bne.n	8007cfa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007cc4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8007cc8:	b25b      	sxtb	r3, r3
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	da03      	bge.n	8007cd6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007cce:	2306      	movs	r3, #6
 8007cd0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007cd4:	e011      	b.n	8007cfa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007cd6:	79fb      	ldrb	r3, [r7, #7]
 8007cd8:	f023 0301 	bic.w	r3, r3, #1
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	bf14      	ite	ne
 8007ce0:	2301      	movne	r3, #1
 8007ce2:	2300      	moveq	r3, #0
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	f107 0314 	add.w	r3, r7, #20
 8007cec:	4611      	mov	r1, r2
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fe fb7c 	bl	80063ec <chk_lock>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	f003 031c 	and.w	r3, r3, #28
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d07f      	beq.n	8007e04 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007d04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d017      	beq.n	8007d3c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007d0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d10:	2b04      	cmp	r3, #4
 8007d12:	d10e      	bne.n	8007d32 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007d14:	f7fe fbc6 	bl	80064a4 <enq_lock>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d006      	beq.n	8007d2c <f_open+0xc8>
 8007d1e:	f107 0314 	add.w	r3, r7, #20
 8007d22:	4618      	mov	r0, r3
 8007d24:	f7ff faa5 	bl	8007272 <dir_register>
 8007d28:	4603      	mov	r3, r0
 8007d2a:	e000      	b.n	8007d2e <f_open+0xca>
 8007d2c:	2312      	movs	r3, #18
 8007d2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007d32:	79fb      	ldrb	r3, [r7, #7]
 8007d34:	f043 0308 	orr.w	r3, r3, #8
 8007d38:	71fb      	strb	r3, [r7, #7]
 8007d3a:	e010      	b.n	8007d5e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007d3c:	7ebb      	ldrb	r3, [r7, #26]
 8007d3e:	f003 0311 	and.w	r3, r3, #17
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d003      	beq.n	8007d4e <f_open+0xea>
					res = FR_DENIED;
 8007d46:	2307      	movs	r3, #7
 8007d48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007d4c:	e007      	b.n	8007d5e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <f_open+0xfa>
 8007d58:	2308      	movs	r3, #8
 8007d5a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007d5e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d168      	bne.n	8007e38 <f_open+0x1d4>
 8007d66:	79fb      	ldrb	r3, [r7, #7]
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d063      	beq.n	8007e38 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007d70:	f7fe f824 	bl	8005dbc <get_fattime>
 8007d74:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d78:	330e      	adds	r3, #14
 8007d7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	f7fe fa8b 	bl	8006298 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d84:	3316      	adds	r3, #22
 8007d86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f7fe fa85 	bl	8006298 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d90:	330b      	adds	r3, #11
 8007d92:	2220      	movs	r2, #32
 8007d94:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007d9a:	4611      	mov	r1, r2
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7ff f9d4 	bl	800714a <ld_clust>
 8007da2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007da8:	2200      	movs	r2, #0
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7ff f9ec 	bl	8007188 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007db2:	331c      	adds	r3, #28
 8007db4:	2100      	movs	r1, #0
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fe fa6e 	bl	8006298 <st_dword>
					fs->wflag = 1;
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d037      	beq.n	8007e38 <f_open+0x1d4>
						dw = fs->winsect;
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dcc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8007dce:	f107 0314 	add.w	r3, r7, #20
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7fe feff 	bl	8006bda <remove_chain>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8007de2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d126      	bne.n	8007e38 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007dee:	4618      	mov	r0, r3
 8007df0:	f7fe fcac 	bl	800674c <move_window>
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007dfe:	3a01      	subs	r2, #1
 8007e00:	60da      	str	r2, [r3, #12]
 8007e02:	e019      	b.n	8007e38 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007e04:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d115      	bne.n	8007e38 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007e0c:	7ebb      	ldrb	r3, [r7, #26]
 8007e0e:	f003 0310 	and.w	r3, r3, #16
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d003      	beq.n	8007e1e <f_open+0x1ba>
					res = FR_NO_FILE;
 8007e16:	2304      	movs	r3, #4
 8007e18:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007e1c:	e00c      	b.n	8007e38 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007e1e:	79fb      	ldrb	r3, [r7, #7]
 8007e20:	f003 0302 	and.w	r3, r3, #2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d007      	beq.n	8007e38 <f_open+0x1d4>
 8007e28:	7ebb      	ldrb	r3, [r7, #26]
 8007e2a:	f003 0301 	and.w	r3, r3, #1
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <f_open+0x1d4>
						res = FR_DENIED;
 8007e32:	2307      	movs	r3, #7
 8007e34:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8007e38:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d128      	bne.n	8007e92 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007e40:	79fb      	ldrb	r3, [r7, #7]
 8007e42:	f003 0308 	and.w	r3, r3, #8
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d003      	beq.n	8007e52 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007e4a:	79fb      	ldrb	r3, [r7, #7]
 8007e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e50:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007e5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007e60:	79fb      	ldrb	r3, [r7, #7]
 8007e62:	f023 0301 	bic.w	r3, r3, #1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	bf14      	ite	ne
 8007e6a:	2301      	movne	r3, #1
 8007e6c:	2300      	moveq	r3, #0
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	f107 0314 	add.w	r3, r7, #20
 8007e76:	4611      	mov	r1, r2
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fe fb35 	bl	80064e8 <inc_lock>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d102      	bne.n	8007e92 <f_open+0x22e>
 8007e8c:	2302      	movs	r3, #2
 8007e8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007e92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	f040 8095 	bne.w	8007fc6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ea0:	4611      	mov	r1, r2
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	f7ff f951 	bl	800714a <ld_clust>
 8007ea8:	4602      	mov	r2, r0
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eb0:	331c      	adds	r3, #28
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f7fe f9b2 	bl	800621c <ld_dword>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	88da      	ldrh	r2, [r3, #6]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	79fa      	ldrb	r2, [r7, #7]
 8007ed6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	2200      	movs	r2, #0
 8007edc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	2200      	movs	r2, #0
 8007ee8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	3330      	adds	r3, #48	; 0x30
 8007eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ef2:	2100      	movs	r1, #0
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f7fe fa1c 	bl	8006332 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007efa:	79fb      	ldrb	r3, [r7, #7]
 8007efc:	f003 0320 	and.w	r3, r3, #32
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d060      	beq.n	8007fc6 <f_open+0x362>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d05c      	beq.n	8007fc6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	68da      	ldr	r2, [r3, #12]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	895b      	ldrh	r3, [r3, #10]
 8007f18:	025b      	lsls	r3, r3, #9
 8007f1a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	657b      	str	r3, [r7, #84]	; 0x54
 8007f28:	e016      	b.n	8007f58 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f2e:	4618      	mov	r0, r3
 8007f30:	f7fe fcc7 	bl	80068c2 <get_fat>
 8007f34:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8007f36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d802      	bhi.n	8007f42 <f_open+0x2de>
 8007f3c:	2302      	movs	r3, #2
 8007f3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f48:	d102      	bne.n	8007f50 <f_open+0x2ec>
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007f50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f54:	1ad3      	subs	r3, r2, r3
 8007f56:	657b      	str	r3, [r7, #84]	; 0x54
 8007f58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d103      	bne.n	8007f68 <f_open+0x304>
 8007f60:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d8e0      	bhi.n	8007f2a <f_open+0x2c6>
				}
				fp->clust = clst;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f6c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d127      	bne.n	8007fc6 <f_open+0x362>
 8007f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d022      	beq.n	8007fc6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe fc7d 	bl	8006884 <clust2sect>
 8007f8a:	6478      	str	r0, [r7, #68]	; 0x44
 8007f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d103      	bne.n	8007f9a <f_open+0x336>
						res = FR_INT_ERR;
 8007f92:	2302      	movs	r3, #2
 8007f94:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8007f98:	e015      	b.n	8007fc6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f9c:	0a5a      	lsrs	r2, r3, #9
 8007f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fa0:	441a      	add	r2, r3
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	7858      	ldrb	r0, [r3, #1]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	6a1a      	ldr	r2, [r3, #32]
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	f7fe f8bb 	bl	8006130 <disk_read>
 8007fba:	4603      	mov	r3, r0
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d002      	beq.n	8007fc6 <f_open+0x362>
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007fc6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <f_open+0x370>
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007fd4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8007fd8:	4618      	mov	r0, r3
 8007fda:	3760      	adds	r7, #96	; 0x60
 8007fdc:	46bd      	mov	sp, r7
 8007fde:	bd80      	pop	{r7, pc}

08007fe0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8007fe0:	b580      	push	{r7, lr}
 8007fe2:	b08c      	sub	sp, #48	; 0x30
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	60f8      	str	r0, [r7, #12]
 8007fe8:	60b9      	str	r1, [r7, #8]
 8007fea:	607a      	str	r2, [r7, #4]
 8007fec:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f107 0210 	add.w	r2, r7, #16
 8007ffe:	4611      	mov	r1, r2
 8008000:	4618      	mov	r0, r3
 8008002:	f7ff fdb3 	bl	8007b6c <validate>
 8008006:	4603      	mov	r3, r0
 8008008:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800800c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008010:	2b00      	cmp	r3, #0
 8008012:	d107      	bne.n	8008024 <f_write+0x44>
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	7d5b      	ldrb	r3, [r3, #21]
 8008018:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800801c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008020:	2b00      	cmp	r3, #0
 8008022:	d002      	beq.n	800802a <f_write+0x4a>
 8008024:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008028:	e14b      	b.n	80082c2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	7d1b      	ldrb	r3, [r3, #20]
 800802e:	f003 0302 	and.w	r3, r3, #2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <f_write+0x5a>
 8008036:	2307      	movs	r3, #7
 8008038:	e143      	b.n	80082c2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	699a      	ldr	r2, [r3, #24]
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	441a      	add	r2, r3
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	429a      	cmp	r2, r3
 8008048:	f080 812d 	bcs.w	80082a6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	43db      	mvns	r3, r3
 8008052:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008054:	e127      	b.n	80082a6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800805e:	2b00      	cmp	r3, #0
 8008060:	f040 80e3 	bne.w	800822a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	0a5b      	lsrs	r3, r3, #9
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	8952      	ldrh	r2, [r2, #10]
 800806e:	3a01      	subs	r2, #1
 8008070:	4013      	ands	r3, r2
 8008072:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d143      	bne.n	8008102 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	699b      	ldr	r3, [r3, #24]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d10c      	bne.n	800809c <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	689b      	ldr	r3, [r3, #8]
 8008086:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800808a:	2b00      	cmp	r3, #0
 800808c:	d11a      	bne.n	80080c4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2100      	movs	r1, #0
 8008092:	4618      	mov	r0, r3
 8008094:	f7fe fe06 	bl	8006ca4 <create_chain>
 8008098:	62b8      	str	r0, [r7, #40]	; 0x28
 800809a:	e013      	b.n	80080c4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d007      	beq.n	80080b4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	4619      	mov	r1, r3
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	f7fe fe92 	bl	8006dd4 <clmt_clust>
 80080b0:	62b8      	str	r0, [r7, #40]	; 0x28
 80080b2:	e007      	b.n	80080c4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80080b4:	68fa      	ldr	r2, [r7, #12]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	69db      	ldr	r3, [r3, #28]
 80080ba:	4619      	mov	r1, r3
 80080bc:	4610      	mov	r0, r2
 80080be:	f7fe fdf1 	bl	8006ca4 <create_chain>
 80080c2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80080c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f000 80f2 	beq.w	80082b0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	d104      	bne.n	80080dc <f_write+0xfc>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2202      	movs	r2, #2
 80080d6:	755a      	strb	r2, [r3, #21]
 80080d8:	2302      	movs	r3, #2
 80080da:	e0f2      	b.n	80082c2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80080dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080e2:	d104      	bne.n	80080ee <f_write+0x10e>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	2201      	movs	r2, #1
 80080e8:	755a      	strb	r2, [r3, #21]
 80080ea:	2301      	movs	r3, #1
 80080ec:	e0e9      	b.n	80082c2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080f2:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d102      	bne.n	8008102 <f_write+0x122>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008100:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	7d1b      	ldrb	r3, [r3, #20]
 8008106:	b25b      	sxtb	r3, r3
 8008108:	2b00      	cmp	r3, #0
 800810a:	da18      	bge.n	800813e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	7858      	ldrb	r0, [r3, #1]
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	6a1a      	ldr	r2, [r3, #32]
 800811a:	2301      	movs	r3, #1
 800811c:	f7fe f828 	bl	8006170 <disk_write>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d004      	beq.n	8008130 <f_write+0x150>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	755a      	strb	r2, [r3, #21]
 800812c:	2301      	movs	r3, #1
 800812e:	e0c8      	b.n	80082c2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	7d1b      	ldrb	r3, [r3, #20]
 8008134:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008138:	b2da      	uxtb	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	4619      	mov	r1, r3
 8008146:	4610      	mov	r0, r2
 8008148:	f7fe fb9c 	bl	8006884 <clust2sect>
 800814c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d104      	bne.n	800815e <f_write+0x17e>
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2202      	movs	r2, #2
 8008158:	755a      	strb	r2, [r3, #21]
 800815a:	2302      	movs	r3, #2
 800815c:	e0b1      	b.n	80082c2 <f_write+0x2e2>
			sect += csect;
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	69bb      	ldr	r3, [r7, #24]
 8008162:	4413      	add	r3, r2
 8008164:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	0a5b      	lsrs	r3, r3, #9
 800816a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d03c      	beq.n	80081ec <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008172:	69ba      	ldr	r2, [r7, #24]
 8008174:	6a3b      	ldr	r3, [r7, #32]
 8008176:	4413      	add	r3, r2
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	8952      	ldrh	r2, [r2, #10]
 800817c:	4293      	cmp	r3, r2
 800817e:	d905      	bls.n	800818c <f_write+0x1ac>
					cc = fs->csize - csect;
 8008180:	693b      	ldr	r3, [r7, #16]
 8008182:	895b      	ldrh	r3, [r3, #10]
 8008184:	461a      	mov	r2, r3
 8008186:	69bb      	ldr	r3, [r7, #24]
 8008188:	1ad3      	subs	r3, r2, r3
 800818a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800818c:	693b      	ldr	r3, [r7, #16]
 800818e:	7858      	ldrb	r0, [r3, #1]
 8008190:	6a3b      	ldr	r3, [r7, #32]
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	69f9      	ldr	r1, [r7, #28]
 8008196:	f7fd ffeb 	bl	8006170 <disk_write>
 800819a:	4603      	mov	r3, r0
 800819c:	2b00      	cmp	r3, #0
 800819e:	d004      	beq.n	80081aa <f_write+0x1ca>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	2201      	movs	r2, #1
 80081a4:	755a      	strb	r2, [r3, #21]
 80081a6:	2301      	movs	r3, #1
 80081a8:	e08b      	b.n	80082c2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	6a1a      	ldr	r2, [r3, #32]
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	6a3a      	ldr	r2, [r7, #32]
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d915      	bls.n	80081e4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6a1a      	ldr	r2, [r3, #32]
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	1ad3      	subs	r3, r2, r3
 80081c6:	025b      	lsls	r3, r3, #9
 80081c8:	69fa      	ldr	r2, [r7, #28]
 80081ca:	4413      	add	r3, r2
 80081cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80081d0:	4619      	mov	r1, r3
 80081d2:	f7fe f88d 	bl	80062f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	7d1b      	ldrb	r3, [r3, #20]
 80081da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80081e4:	6a3b      	ldr	r3, [r7, #32]
 80081e6:	025b      	lsls	r3, r3, #9
 80081e8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80081ea:	e03f      	b.n	800826c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	697a      	ldr	r2, [r7, #20]
 80081f2:	429a      	cmp	r2, r3
 80081f4:	d016      	beq.n	8008224 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	699a      	ldr	r2, [r3, #24]
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80081fe:	429a      	cmp	r2, r3
 8008200:	d210      	bcs.n	8008224 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	7858      	ldrb	r0, [r3, #1]
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800820c:	2301      	movs	r3, #1
 800820e:	697a      	ldr	r2, [r7, #20]
 8008210:	f7fd ff8e 	bl	8006130 <disk_read>
 8008214:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	2201      	movs	r2, #1
 800821e:	755a      	strb	r2, [r3, #21]
 8008220:	2301      	movs	r3, #1
 8008222:	e04e      	b.n	80082c2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	697a      	ldr	r2, [r7, #20]
 8008228:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	699b      	ldr	r3, [r3, #24]
 800822e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008232:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008236:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	429a      	cmp	r2, r3
 800823e:	d901      	bls.n	8008244 <f_write+0x264>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	699b      	ldr	r3, [r3, #24]
 800824e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008252:	4413      	add	r3, r2
 8008254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008256:	69f9      	ldr	r1, [r7, #28]
 8008258:	4618      	mov	r0, r3
 800825a:	f7fe f849 	bl	80062f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	7d1b      	ldrb	r3, [r3, #20]
 8008262:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008266:	b2da      	uxtb	r2, r3
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800826c:	69fa      	ldr	r2, [r7, #28]
 800826e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008270:	4413      	add	r3, r2
 8008272:	61fb      	str	r3, [r7, #28]
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	699a      	ldr	r2, [r3, #24]
 8008278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800827a:	441a      	add	r2, r3
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	619a      	str	r2, [r3, #24]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	68da      	ldr	r2, [r3, #12]
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	699b      	ldr	r3, [r3, #24]
 8008288:	429a      	cmp	r2, r3
 800828a:	bf38      	it	cc
 800828c:	461a      	movcc	r2, r3
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	60da      	str	r2, [r3, #12]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008298:	441a      	add	r2, r3
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	687a      	ldr	r2, [r7, #4]
 80082a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a2:	1ad3      	subs	r3, r2, r3
 80082a4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f47f aed4 	bne.w	8008056 <f_write+0x76>
 80082ae:	e000      	b.n	80082b2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80082b0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	7d1b      	ldrb	r3, [r3, #20]
 80082b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082ba:	b2da      	uxtb	r2, r3
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3730      	adds	r7, #48	; 0x30
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}

080082ca <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b086      	sub	sp, #24
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f107 0208 	add.w	r2, r7, #8
 80082d8:	4611      	mov	r1, r2
 80082da:	4618      	mov	r0, r3
 80082dc:	f7ff fc46 	bl	8007b6c <validate>
 80082e0:	4603      	mov	r3, r0
 80082e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80082e4:	7dfb      	ldrb	r3, [r7, #23]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d168      	bne.n	80083bc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	7d1b      	ldrb	r3, [r3, #20]
 80082ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d062      	beq.n	80083bc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	7d1b      	ldrb	r3, [r3, #20]
 80082fa:	b25b      	sxtb	r3, r3
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	da15      	bge.n	800832c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	7858      	ldrb	r0, [r3, #1]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6a1a      	ldr	r2, [r3, #32]
 800830e:	2301      	movs	r3, #1
 8008310:	f7fd ff2e 	bl	8006170 <disk_write>
 8008314:	4603      	mov	r3, r0
 8008316:	2b00      	cmp	r3, #0
 8008318:	d001      	beq.n	800831e <f_sync+0x54>
 800831a:	2301      	movs	r3, #1
 800831c:	e04f      	b.n	80083be <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	7d1b      	ldrb	r3, [r3, #20]
 8008322:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008326:	b2da      	uxtb	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800832c:	f7fd fd46 	bl	8005dbc <get_fattime>
 8008330:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008332:	68ba      	ldr	r2, [r7, #8]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008338:	4619      	mov	r1, r3
 800833a:	4610      	mov	r0, r2
 800833c:	f7fe fa06 	bl	800674c <move_window>
 8008340:	4603      	mov	r3, r0
 8008342:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008344:	7dfb      	ldrb	r3, [r7, #23]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d138      	bne.n	80083bc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	330b      	adds	r3, #11
 8008354:	781a      	ldrb	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	330b      	adds	r3, #11
 800835a:	f042 0220 	orr.w	r2, r2, #32
 800835e:	b2d2      	uxtb	r2, r2
 8008360:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	461a      	mov	r2, r3
 800836c:	68f9      	ldr	r1, [r7, #12]
 800836e:	f7fe ff0b 	bl	8007188 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	f103 021c 	add.w	r2, r3, #28
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	68db      	ldr	r3, [r3, #12]
 800837c:	4619      	mov	r1, r3
 800837e:	4610      	mov	r0, r2
 8008380:	f7fd ff8a 	bl	8006298 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	3316      	adds	r3, #22
 8008388:	6939      	ldr	r1, [r7, #16]
 800838a:	4618      	mov	r0, r3
 800838c:	f7fd ff84 	bl	8006298 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	3312      	adds	r3, #18
 8008394:	2100      	movs	r1, #0
 8008396:	4618      	mov	r0, r3
 8008398:	f7fd ff63 	bl	8006262 <st_word>
					fs->wflag = 1;
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	2201      	movs	r2, #1
 80083a0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	4618      	mov	r0, r3
 80083a6:	f7fe f9ff 	bl	80067a8 <sync_fs>
 80083aa:	4603      	mov	r3, r0
 80083ac:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	7d1b      	ldrb	r3, [r3, #20]
 80083b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083b6:	b2da      	uxtb	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80083bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3718      	adds	r7, #24
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}

080083c6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80083c6:	b580      	push	{r7, lr}
 80083c8:	b084      	sub	sp, #16
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f7ff ff7b 	bl	80082ca <f_sync>
 80083d4:	4603      	mov	r3, r0
 80083d6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80083d8:	7bfb      	ldrb	r3, [r7, #15]
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d118      	bne.n	8008410 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f107 0208 	add.w	r2, r7, #8
 80083e4:	4611      	mov	r1, r2
 80083e6:	4618      	mov	r0, r3
 80083e8:	f7ff fbc0 	bl	8007b6c <validate>
 80083ec:	4603      	mov	r3, r0
 80083ee:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80083f0:	7bfb      	ldrb	r3, [r7, #15]
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d10c      	bne.n	8008410 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f7fe f902 	bl	8006604 <dec_lock>
 8008400:	4603      	mov	r3, r0
 8008402:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2200      	movs	r2, #0
 800840e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008410:	7bfb      	ldrb	r3, [r7, #15]
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b090      	sub	sp, #64	; 0x40
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008424:	f107 010c 	add.w	r1, r7, #12
 8008428:	1d3b      	adds	r3, r7, #4
 800842a:	2200      	movs	r2, #0
 800842c:	4618      	mov	r0, r3
 800842e:	f7ff f951 	bl	80076d4 <find_volume>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8008438:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800843c:	2b00      	cmp	r3, #0
 800843e:	d11f      	bne.n	8008480 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008440:	687a      	ldr	r2, [r7, #4]
 8008442:	f107 030c 	add.w	r3, r7, #12
 8008446:	4611      	mov	r1, r2
 8008448:	4618      	mov	r0, r3
 800844a:	f7ff f837 	bl	80074bc <follow_path>
 800844e:	4603      	mov	r3, r0
 8008450:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8008454:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8008458:	2b00      	cmp	r3, #0
 800845a:	d111      	bne.n	8008480 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800845c:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8008460:	b25b      	sxtb	r3, r3
 8008462:	2b00      	cmp	r3, #0
 8008464:	da03      	bge.n	800846e <f_stat+0x54>
				res = FR_INVALID_NAME;
 8008466:	2306      	movs	r3, #6
 8008468:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800846c:	e008      	b.n	8008480 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d005      	beq.n	8008480 <f_stat+0x66>
 8008474:	f107 030c 	add.w	r3, r7, #12
 8008478:	6839      	ldr	r1, [r7, #0]
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe ff2b 	bl	80072d6 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008480:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8008484:	4618      	mov	r0, r3
 8008486:	3740      	adds	r7, #64	; 0x40
 8008488:	46bd      	mov	sp, r7
 800848a:	bd80      	pop	{r7, pc}

0800848c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800848c:	b480      	push	{r7}
 800848e:	b087      	sub	sp, #28
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	4613      	mov	r3, r2
 8008498:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800849a:	2301      	movs	r3, #1
 800849c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800849e:	2300      	movs	r3, #0
 80084a0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80084a2:	4b1f      	ldr	r3, [pc, #124]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084a4:	7a5b      	ldrb	r3, [r3, #9]
 80084a6:	b2db      	uxtb	r3, r3
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d131      	bne.n	8008510 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80084ac:	4b1c      	ldr	r3, [pc, #112]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084ae:	7a5b      	ldrb	r3, [r3, #9]
 80084b0:	b2db      	uxtb	r3, r3
 80084b2:	461a      	mov	r2, r3
 80084b4:	4b1a      	ldr	r3, [pc, #104]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084b6:	2100      	movs	r1, #0
 80084b8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80084ba:	4b19      	ldr	r3, [pc, #100]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084bc:	7a5b      	ldrb	r3, [r3, #9]
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	4a17      	ldr	r2, [pc, #92]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	68fa      	ldr	r2, [r7, #12]
 80084c8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80084ca:	4b15      	ldr	r3, [pc, #84]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084cc:	7a5b      	ldrb	r3, [r3, #9]
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	461a      	mov	r2, r3
 80084d2:	4b13      	ldr	r3, [pc, #76]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084d4:	4413      	add	r3, r2
 80084d6:	79fa      	ldrb	r2, [r7, #7]
 80084d8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80084da:	4b11      	ldr	r3, [pc, #68]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084dc:	7a5b      	ldrb	r3, [r3, #9]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	1c5a      	adds	r2, r3, #1
 80084e2:	b2d1      	uxtb	r1, r2
 80084e4:	4a0e      	ldr	r2, [pc, #56]	; (8008520 <FATFS_LinkDriverEx+0x94>)
 80084e6:	7251      	strb	r1, [r2, #9]
 80084e8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80084ea:	7dbb      	ldrb	r3, [r7, #22]
 80084ec:	3330      	adds	r3, #48	; 0x30
 80084ee:	b2da      	uxtb	r2, r3
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	3301      	adds	r3, #1
 80084f8:	223a      	movs	r2, #58	; 0x3a
 80084fa:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	3302      	adds	r3, #2
 8008500:	222f      	movs	r2, #47	; 0x2f
 8008502:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	3303      	adds	r3, #3
 8008508:	2200      	movs	r2, #0
 800850a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800850c:	2300      	movs	r3, #0
 800850e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008510:	7dfb      	ldrb	r3, [r7, #23]
}
 8008512:	4618      	mov	r0, r3
 8008514:	371c      	adds	r7, #28
 8008516:	46bd      	mov	sp, r7
 8008518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851c:	4770      	bx	lr
 800851e:	bf00      	nop
 8008520:	200002f4 	.word	0x200002f4

08008524 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008524:	b580      	push	{r7, lr}
 8008526:	b082      	sub	sp, #8
 8008528:	af00      	add	r7, sp, #0
 800852a:	6078      	str	r0, [r7, #4]
 800852c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800852e:	2200      	movs	r2, #0
 8008530:	6839      	ldr	r1, [r7, #0]
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f7ff ffaa 	bl	800848c <FATFS_LinkDriverEx>
 8008538:	4603      	mov	r3, r0
}
 800853a:	4618      	mov	r0, r3
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <__errno>:
 8008544:	4b01      	ldr	r3, [pc, #4]	; (800854c <__errno+0x8>)
 8008546:	6818      	ldr	r0, [r3, #0]
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop
 800854c:	2000000c 	.word	0x2000000c

08008550 <__libc_init_array>:
 8008550:	b570      	push	{r4, r5, r6, lr}
 8008552:	4e0d      	ldr	r6, [pc, #52]	; (8008588 <__libc_init_array+0x38>)
 8008554:	4c0d      	ldr	r4, [pc, #52]	; (800858c <__libc_init_array+0x3c>)
 8008556:	1ba4      	subs	r4, r4, r6
 8008558:	10a4      	asrs	r4, r4, #2
 800855a:	2500      	movs	r5, #0
 800855c:	42a5      	cmp	r5, r4
 800855e:	d109      	bne.n	8008574 <__libc_init_array+0x24>
 8008560:	4e0b      	ldr	r6, [pc, #44]	; (8008590 <__libc_init_array+0x40>)
 8008562:	4c0c      	ldr	r4, [pc, #48]	; (8008594 <__libc_init_array+0x44>)
 8008564:	f002 f864 	bl	800a630 <_init>
 8008568:	1ba4      	subs	r4, r4, r6
 800856a:	10a4      	asrs	r4, r4, #2
 800856c:	2500      	movs	r5, #0
 800856e:	42a5      	cmp	r5, r4
 8008570:	d105      	bne.n	800857e <__libc_init_array+0x2e>
 8008572:	bd70      	pop	{r4, r5, r6, pc}
 8008574:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008578:	4798      	blx	r3
 800857a:	3501      	adds	r5, #1
 800857c:	e7ee      	b.n	800855c <__libc_init_array+0xc>
 800857e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008582:	4798      	blx	r3
 8008584:	3501      	adds	r5, #1
 8008586:	e7f2      	b.n	800856e <__libc_init_array+0x1e>
 8008588:	0800b150 	.word	0x0800b150
 800858c:	0800b150 	.word	0x0800b150
 8008590:	0800b150 	.word	0x0800b150
 8008594:	0800b154 	.word	0x0800b154

08008598 <malloc>:
 8008598:	4b02      	ldr	r3, [pc, #8]	; (80085a4 <malloc+0xc>)
 800859a:	4601      	mov	r1, r0
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	f000 b861 	b.w	8008664 <_malloc_r>
 80085a2:	bf00      	nop
 80085a4:	2000000c 	.word	0x2000000c

080085a8 <free>:
 80085a8:	4b02      	ldr	r3, [pc, #8]	; (80085b4 <free+0xc>)
 80085aa:	4601      	mov	r1, r0
 80085ac:	6818      	ldr	r0, [r3, #0]
 80085ae:	f000 b80b 	b.w	80085c8 <_free_r>
 80085b2:	bf00      	nop
 80085b4:	2000000c 	.word	0x2000000c

080085b8 <memset>:
 80085b8:	4402      	add	r2, r0
 80085ba:	4603      	mov	r3, r0
 80085bc:	4293      	cmp	r3, r2
 80085be:	d100      	bne.n	80085c2 <memset+0xa>
 80085c0:	4770      	bx	lr
 80085c2:	f803 1b01 	strb.w	r1, [r3], #1
 80085c6:	e7f9      	b.n	80085bc <memset+0x4>

080085c8 <_free_r>:
 80085c8:	b538      	push	{r3, r4, r5, lr}
 80085ca:	4605      	mov	r5, r0
 80085cc:	2900      	cmp	r1, #0
 80085ce:	d045      	beq.n	800865c <_free_r+0x94>
 80085d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085d4:	1f0c      	subs	r4, r1, #4
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	bfb8      	it	lt
 80085da:	18e4      	addlt	r4, r4, r3
 80085dc:	f001 fb85 	bl	8009cea <__malloc_lock>
 80085e0:	4a1f      	ldr	r2, [pc, #124]	; (8008660 <_free_r+0x98>)
 80085e2:	6813      	ldr	r3, [r2, #0]
 80085e4:	4610      	mov	r0, r2
 80085e6:	b933      	cbnz	r3, 80085f6 <_free_r+0x2e>
 80085e8:	6063      	str	r3, [r4, #4]
 80085ea:	6014      	str	r4, [r2, #0]
 80085ec:	4628      	mov	r0, r5
 80085ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085f2:	f001 bb7b 	b.w	8009cec <__malloc_unlock>
 80085f6:	42a3      	cmp	r3, r4
 80085f8:	d90c      	bls.n	8008614 <_free_r+0x4c>
 80085fa:	6821      	ldr	r1, [r4, #0]
 80085fc:	1862      	adds	r2, r4, r1
 80085fe:	4293      	cmp	r3, r2
 8008600:	bf04      	itt	eq
 8008602:	681a      	ldreq	r2, [r3, #0]
 8008604:	685b      	ldreq	r3, [r3, #4]
 8008606:	6063      	str	r3, [r4, #4]
 8008608:	bf04      	itt	eq
 800860a:	1852      	addeq	r2, r2, r1
 800860c:	6022      	streq	r2, [r4, #0]
 800860e:	6004      	str	r4, [r0, #0]
 8008610:	e7ec      	b.n	80085ec <_free_r+0x24>
 8008612:	4613      	mov	r3, r2
 8008614:	685a      	ldr	r2, [r3, #4]
 8008616:	b10a      	cbz	r2, 800861c <_free_r+0x54>
 8008618:	42a2      	cmp	r2, r4
 800861a:	d9fa      	bls.n	8008612 <_free_r+0x4a>
 800861c:	6819      	ldr	r1, [r3, #0]
 800861e:	1858      	adds	r0, r3, r1
 8008620:	42a0      	cmp	r0, r4
 8008622:	d10b      	bne.n	800863c <_free_r+0x74>
 8008624:	6820      	ldr	r0, [r4, #0]
 8008626:	4401      	add	r1, r0
 8008628:	1858      	adds	r0, r3, r1
 800862a:	4282      	cmp	r2, r0
 800862c:	6019      	str	r1, [r3, #0]
 800862e:	d1dd      	bne.n	80085ec <_free_r+0x24>
 8008630:	6810      	ldr	r0, [r2, #0]
 8008632:	6852      	ldr	r2, [r2, #4]
 8008634:	605a      	str	r2, [r3, #4]
 8008636:	4401      	add	r1, r0
 8008638:	6019      	str	r1, [r3, #0]
 800863a:	e7d7      	b.n	80085ec <_free_r+0x24>
 800863c:	d902      	bls.n	8008644 <_free_r+0x7c>
 800863e:	230c      	movs	r3, #12
 8008640:	602b      	str	r3, [r5, #0]
 8008642:	e7d3      	b.n	80085ec <_free_r+0x24>
 8008644:	6820      	ldr	r0, [r4, #0]
 8008646:	1821      	adds	r1, r4, r0
 8008648:	428a      	cmp	r2, r1
 800864a:	bf04      	itt	eq
 800864c:	6811      	ldreq	r1, [r2, #0]
 800864e:	6852      	ldreq	r2, [r2, #4]
 8008650:	6062      	str	r2, [r4, #4]
 8008652:	bf04      	itt	eq
 8008654:	1809      	addeq	r1, r1, r0
 8008656:	6021      	streq	r1, [r4, #0]
 8008658:	605c      	str	r4, [r3, #4]
 800865a:	e7c7      	b.n	80085ec <_free_r+0x24>
 800865c:	bd38      	pop	{r3, r4, r5, pc}
 800865e:	bf00      	nop
 8008660:	20000300 	.word	0x20000300

08008664 <_malloc_r>:
 8008664:	b570      	push	{r4, r5, r6, lr}
 8008666:	1ccd      	adds	r5, r1, #3
 8008668:	f025 0503 	bic.w	r5, r5, #3
 800866c:	3508      	adds	r5, #8
 800866e:	2d0c      	cmp	r5, #12
 8008670:	bf38      	it	cc
 8008672:	250c      	movcc	r5, #12
 8008674:	2d00      	cmp	r5, #0
 8008676:	4606      	mov	r6, r0
 8008678:	db01      	blt.n	800867e <_malloc_r+0x1a>
 800867a:	42a9      	cmp	r1, r5
 800867c:	d903      	bls.n	8008686 <_malloc_r+0x22>
 800867e:	230c      	movs	r3, #12
 8008680:	6033      	str	r3, [r6, #0]
 8008682:	2000      	movs	r0, #0
 8008684:	bd70      	pop	{r4, r5, r6, pc}
 8008686:	f001 fb30 	bl	8009cea <__malloc_lock>
 800868a:	4a21      	ldr	r2, [pc, #132]	; (8008710 <_malloc_r+0xac>)
 800868c:	6814      	ldr	r4, [r2, #0]
 800868e:	4621      	mov	r1, r4
 8008690:	b991      	cbnz	r1, 80086b8 <_malloc_r+0x54>
 8008692:	4c20      	ldr	r4, [pc, #128]	; (8008714 <_malloc_r+0xb0>)
 8008694:	6823      	ldr	r3, [r4, #0]
 8008696:	b91b      	cbnz	r3, 80086a0 <_malloc_r+0x3c>
 8008698:	4630      	mov	r0, r6
 800869a:	f000 fc99 	bl	8008fd0 <_sbrk_r>
 800869e:	6020      	str	r0, [r4, #0]
 80086a0:	4629      	mov	r1, r5
 80086a2:	4630      	mov	r0, r6
 80086a4:	f000 fc94 	bl	8008fd0 <_sbrk_r>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d124      	bne.n	80086f6 <_malloc_r+0x92>
 80086ac:	230c      	movs	r3, #12
 80086ae:	6033      	str	r3, [r6, #0]
 80086b0:	4630      	mov	r0, r6
 80086b2:	f001 fb1b 	bl	8009cec <__malloc_unlock>
 80086b6:	e7e4      	b.n	8008682 <_malloc_r+0x1e>
 80086b8:	680b      	ldr	r3, [r1, #0]
 80086ba:	1b5b      	subs	r3, r3, r5
 80086bc:	d418      	bmi.n	80086f0 <_malloc_r+0x8c>
 80086be:	2b0b      	cmp	r3, #11
 80086c0:	d90f      	bls.n	80086e2 <_malloc_r+0x7e>
 80086c2:	600b      	str	r3, [r1, #0]
 80086c4:	50cd      	str	r5, [r1, r3]
 80086c6:	18cc      	adds	r4, r1, r3
 80086c8:	4630      	mov	r0, r6
 80086ca:	f001 fb0f 	bl	8009cec <__malloc_unlock>
 80086ce:	f104 000b 	add.w	r0, r4, #11
 80086d2:	1d23      	adds	r3, r4, #4
 80086d4:	f020 0007 	bic.w	r0, r0, #7
 80086d8:	1ac3      	subs	r3, r0, r3
 80086da:	d0d3      	beq.n	8008684 <_malloc_r+0x20>
 80086dc:	425a      	negs	r2, r3
 80086de:	50e2      	str	r2, [r4, r3]
 80086e0:	e7d0      	b.n	8008684 <_malloc_r+0x20>
 80086e2:	428c      	cmp	r4, r1
 80086e4:	684b      	ldr	r3, [r1, #4]
 80086e6:	bf16      	itet	ne
 80086e8:	6063      	strne	r3, [r4, #4]
 80086ea:	6013      	streq	r3, [r2, #0]
 80086ec:	460c      	movne	r4, r1
 80086ee:	e7eb      	b.n	80086c8 <_malloc_r+0x64>
 80086f0:	460c      	mov	r4, r1
 80086f2:	6849      	ldr	r1, [r1, #4]
 80086f4:	e7cc      	b.n	8008690 <_malloc_r+0x2c>
 80086f6:	1cc4      	adds	r4, r0, #3
 80086f8:	f024 0403 	bic.w	r4, r4, #3
 80086fc:	42a0      	cmp	r0, r4
 80086fe:	d005      	beq.n	800870c <_malloc_r+0xa8>
 8008700:	1a21      	subs	r1, r4, r0
 8008702:	4630      	mov	r0, r6
 8008704:	f000 fc64 	bl	8008fd0 <_sbrk_r>
 8008708:	3001      	adds	r0, #1
 800870a:	d0cf      	beq.n	80086ac <_malloc_r+0x48>
 800870c:	6025      	str	r5, [r4, #0]
 800870e:	e7db      	b.n	80086c8 <_malloc_r+0x64>
 8008710:	20000300 	.word	0x20000300
 8008714:	20000304 	.word	0x20000304

08008718 <__cvt>:
 8008718:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800871c:	ec55 4b10 	vmov	r4, r5, d0
 8008720:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008722:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008726:	2d00      	cmp	r5, #0
 8008728:	460e      	mov	r6, r1
 800872a:	4691      	mov	r9, r2
 800872c:	4619      	mov	r1, r3
 800872e:	bfb8      	it	lt
 8008730:	4622      	movlt	r2, r4
 8008732:	462b      	mov	r3, r5
 8008734:	f027 0720 	bic.w	r7, r7, #32
 8008738:	bfbb      	ittet	lt
 800873a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800873e:	461d      	movlt	r5, r3
 8008740:	2300      	movge	r3, #0
 8008742:	232d      	movlt	r3, #45	; 0x2d
 8008744:	bfb8      	it	lt
 8008746:	4614      	movlt	r4, r2
 8008748:	2f46      	cmp	r7, #70	; 0x46
 800874a:	700b      	strb	r3, [r1, #0]
 800874c:	d004      	beq.n	8008758 <__cvt+0x40>
 800874e:	2f45      	cmp	r7, #69	; 0x45
 8008750:	d100      	bne.n	8008754 <__cvt+0x3c>
 8008752:	3601      	adds	r6, #1
 8008754:	2102      	movs	r1, #2
 8008756:	e000      	b.n	800875a <__cvt+0x42>
 8008758:	2103      	movs	r1, #3
 800875a:	ab03      	add	r3, sp, #12
 800875c:	9301      	str	r3, [sp, #4]
 800875e:	ab02      	add	r3, sp, #8
 8008760:	9300      	str	r3, [sp, #0]
 8008762:	4632      	mov	r2, r6
 8008764:	4653      	mov	r3, sl
 8008766:	ec45 4b10 	vmov	d0, r4, r5
 800876a:	f000 fced 	bl	8009148 <_dtoa_r>
 800876e:	2f47      	cmp	r7, #71	; 0x47
 8008770:	4680      	mov	r8, r0
 8008772:	d102      	bne.n	800877a <__cvt+0x62>
 8008774:	f019 0f01 	tst.w	r9, #1
 8008778:	d026      	beq.n	80087c8 <__cvt+0xb0>
 800877a:	2f46      	cmp	r7, #70	; 0x46
 800877c:	eb08 0906 	add.w	r9, r8, r6
 8008780:	d111      	bne.n	80087a6 <__cvt+0x8e>
 8008782:	f898 3000 	ldrb.w	r3, [r8]
 8008786:	2b30      	cmp	r3, #48	; 0x30
 8008788:	d10a      	bne.n	80087a0 <__cvt+0x88>
 800878a:	2200      	movs	r2, #0
 800878c:	2300      	movs	r3, #0
 800878e:	4620      	mov	r0, r4
 8008790:	4629      	mov	r1, r5
 8008792:	f7f8 f9b9 	bl	8000b08 <__aeabi_dcmpeq>
 8008796:	b918      	cbnz	r0, 80087a0 <__cvt+0x88>
 8008798:	f1c6 0601 	rsb	r6, r6, #1
 800879c:	f8ca 6000 	str.w	r6, [sl]
 80087a0:	f8da 3000 	ldr.w	r3, [sl]
 80087a4:	4499      	add	r9, r3
 80087a6:	2200      	movs	r2, #0
 80087a8:	2300      	movs	r3, #0
 80087aa:	4620      	mov	r0, r4
 80087ac:	4629      	mov	r1, r5
 80087ae:	f7f8 f9ab 	bl	8000b08 <__aeabi_dcmpeq>
 80087b2:	b938      	cbnz	r0, 80087c4 <__cvt+0xac>
 80087b4:	2230      	movs	r2, #48	; 0x30
 80087b6:	9b03      	ldr	r3, [sp, #12]
 80087b8:	454b      	cmp	r3, r9
 80087ba:	d205      	bcs.n	80087c8 <__cvt+0xb0>
 80087bc:	1c59      	adds	r1, r3, #1
 80087be:	9103      	str	r1, [sp, #12]
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	e7f8      	b.n	80087b6 <__cvt+0x9e>
 80087c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80087c8:	9b03      	ldr	r3, [sp, #12]
 80087ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087cc:	eba3 0308 	sub.w	r3, r3, r8
 80087d0:	4640      	mov	r0, r8
 80087d2:	6013      	str	r3, [r2, #0]
 80087d4:	b004      	add	sp, #16
 80087d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080087da <__exponent>:
 80087da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087dc:	2900      	cmp	r1, #0
 80087de:	4604      	mov	r4, r0
 80087e0:	bfba      	itte	lt
 80087e2:	4249      	neglt	r1, r1
 80087e4:	232d      	movlt	r3, #45	; 0x2d
 80087e6:	232b      	movge	r3, #43	; 0x2b
 80087e8:	2909      	cmp	r1, #9
 80087ea:	f804 2b02 	strb.w	r2, [r4], #2
 80087ee:	7043      	strb	r3, [r0, #1]
 80087f0:	dd20      	ble.n	8008834 <__exponent+0x5a>
 80087f2:	f10d 0307 	add.w	r3, sp, #7
 80087f6:	461f      	mov	r7, r3
 80087f8:	260a      	movs	r6, #10
 80087fa:	fb91 f5f6 	sdiv	r5, r1, r6
 80087fe:	fb06 1115 	mls	r1, r6, r5, r1
 8008802:	3130      	adds	r1, #48	; 0x30
 8008804:	2d09      	cmp	r5, #9
 8008806:	f803 1c01 	strb.w	r1, [r3, #-1]
 800880a:	f103 32ff 	add.w	r2, r3, #4294967295
 800880e:	4629      	mov	r1, r5
 8008810:	dc09      	bgt.n	8008826 <__exponent+0x4c>
 8008812:	3130      	adds	r1, #48	; 0x30
 8008814:	3b02      	subs	r3, #2
 8008816:	f802 1c01 	strb.w	r1, [r2, #-1]
 800881a:	42bb      	cmp	r3, r7
 800881c:	4622      	mov	r2, r4
 800881e:	d304      	bcc.n	800882a <__exponent+0x50>
 8008820:	1a10      	subs	r0, r2, r0
 8008822:	b003      	add	sp, #12
 8008824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008826:	4613      	mov	r3, r2
 8008828:	e7e7      	b.n	80087fa <__exponent+0x20>
 800882a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800882e:	f804 2b01 	strb.w	r2, [r4], #1
 8008832:	e7f2      	b.n	800881a <__exponent+0x40>
 8008834:	2330      	movs	r3, #48	; 0x30
 8008836:	4419      	add	r1, r3
 8008838:	7083      	strb	r3, [r0, #2]
 800883a:	1d02      	adds	r2, r0, #4
 800883c:	70c1      	strb	r1, [r0, #3]
 800883e:	e7ef      	b.n	8008820 <__exponent+0x46>

08008840 <_printf_float>:
 8008840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	b08d      	sub	sp, #52	; 0x34
 8008846:	460c      	mov	r4, r1
 8008848:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800884c:	4616      	mov	r6, r2
 800884e:	461f      	mov	r7, r3
 8008850:	4605      	mov	r5, r0
 8008852:	f001 fa31 	bl	8009cb8 <_localeconv_r>
 8008856:	6803      	ldr	r3, [r0, #0]
 8008858:	9304      	str	r3, [sp, #16]
 800885a:	4618      	mov	r0, r3
 800885c:	f7f7 fcd8 	bl	8000210 <strlen>
 8008860:	2300      	movs	r3, #0
 8008862:	930a      	str	r3, [sp, #40]	; 0x28
 8008864:	f8d8 3000 	ldr.w	r3, [r8]
 8008868:	9005      	str	r0, [sp, #20]
 800886a:	3307      	adds	r3, #7
 800886c:	f023 0307 	bic.w	r3, r3, #7
 8008870:	f103 0208 	add.w	r2, r3, #8
 8008874:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008878:	f8d4 b000 	ldr.w	fp, [r4]
 800887c:	f8c8 2000 	str.w	r2, [r8]
 8008880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008884:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008888:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800888c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008890:	9307      	str	r3, [sp, #28]
 8008892:	f8cd 8018 	str.w	r8, [sp, #24]
 8008896:	f04f 32ff 	mov.w	r2, #4294967295
 800889a:	4ba7      	ldr	r3, [pc, #668]	; (8008b38 <_printf_float+0x2f8>)
 800889c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088a0:	f7f8 f964 	bl	8000b6c <__aeabi_dcmpun>
 80088a4:	bb70      	cbnz	r0, 8008904 <_printf_float+0xc4>
 80088a6:	f04f 32ff 	mov.w	r2, #4294967295
 80088aa:	4ba3      	ldr	r3, [pc, #652]	; (8008b38 <_printf_float+0x2f8>)
 80088ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088b0:	f7f8 f93e 	bl	8000b30 <__aeabi_dcmple>
 80088b4:	bb30      	cbnz	r0, 8008904 <_printf_float+0xc4>
 80088b6:	2200      	movs	r2, #0
 80088b8:	2300      	movs	r3, #0
 80088ba:	4640      	mov	r0, r8
 80088bc:	4649      	mov	r1, r9
 80088be:	f7f8 f92d 	bl	8000b1c <__aeabi_dcmplt>
 80088c2:	b110      	cbz	r0, 80088ca <_printf_float+0x8a>
 80088c4:	232d      	movs	r3, #45	; 0x2d
 80088c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ca:	4a9c      	ldr	r2, [pc, #624]	; (8008b3c <_printf_float+0x2fc>)
 80088cc:	4b9c      	ldr	r3, [pc, #624]	; (8008b40 <_printf_float+0x300>)
 80088ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80088d2:	bf8c      	ite	hi
 80088d4:	4690      	movhi	r8, r2
 80088d6:	4698      	movls	r8, r3
 80088d8:	2303      	movs	r3, #3
 80088da:	f02b 0204 	bic.w	r2, fp, #4
 80088de:	6123      	str	r3, [r4, #16]
 80088e0:	6022      	str	r2, [r4, #0]
 80088e2:	f04f 0900 	mov.w	r9, #0
 80088e6:	9700      	str	r7, [sp, #0]
 80088e8:	4633      	mov	r3, r6
 80088ea:	aa0b      	add	r2, sp, #44	; 0x2c
 80088ec:	4621      	mov	r1, r4
 80088ee:	4628      	mov	r0, r5
 80088f0:	f000 f9e6 	bl	8008cc0 <_printf_common>
 80088f4:	3001      	adds	r0, #1
 80088f6:	f040 808d 	bne.w	8008a14 <_printf_float+0x1d4>
 80088fa:	f04f 30ff 	mov.w	r0, #4294967295
 80088fe:	b00d      	add	sp, #52	; 0x34
 8008900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008904:	4642      	mov	r2, r8
 8008906:	464b      	mov	r3, r9
 8008908:	4640      	mov	r0, r8
 800890a:	4649      	mov	r1, r9
 800890c:	f7f8 f92e 	bl	8000b6c <__aeabi_dcmpun>
 8008910:	b110      	cbz	r0, 8008918 <_printf_float+0xd8>
 8008912:	4a8c      	ldr	r2, [pc, #560]	; (8008b44 <_printf_float+0x304>)
 8008914:	4b8c      	ldr	r3, [pc, #560]	; (8008b48 <_printf_float+0x308>)
 8008916:	e7da      	b.n	80088ce <_printf_float+0x8e>
 8008918:	6861      	ldr	r1, [r4, #4]
 800891a:	1c4b      	adds	r3, r1, #1
 800891c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008920:	a80a      	add	r0, sp, #40	; 0x28
 8008922:	d13e      	bne.n	80089a2 <_printf_float+0x162>
 8008924:	2306      	movs	r3, #6
 8008926:	6063      	str	r3, [r4, #4]
 8008928:	2300      	movs	r3, #0
 800892a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800892e:	ab09      	add	r3, sp, #36	; 0x24
 8008930:	9300      	str	r3, [sp, #0]
 8008932:	ec49 8b10 	vmov	d0, r8, r9
 8008936:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800893a:	6022      	str	r2, [r4, #0]
 800893c:	f8cd a004 	str.w	sl, [sp, #4]
 8008940:	6861      	ldr	r1, [r4, #4]
 8008942:	4628      	mov	r0, r5
 8008944:	f7ff fee8 	bl	8008718 <__cvt>
 8008948:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800894c:	2b47      	cmp	r3, #71	; 0x47
 800894e:	4680      	mov	r8, r0
 8008950:	d109      	bne.n	8008966 <_printf_float+0x126>
 8008952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008954:	1cd8      	adds	r0, r3, #3
 8008956:	db02      	blt.n	800895e <_printf_float+0x11e>
 8008958:	6862      	ldr	r2, [r4, #4]
 800895a:	4293      	cmp	r3, r2
 800895c:	dd47      	ble.n	80089ee <_printf_float+0x1ae>
 800895e:	f1aa 0a02 	sub.w	sl, sl, #2
 8008962:	fa5f fa8a 	uxtb.w	sl, sl
 8008966:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800896a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800896c:	d824      	bhi.n	80089b8 <_printf_float+0x178>
 800896e:	3901      	subs	r1, #1
 8008970:	4652      	mov	r2, sl
 8008972:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008976:	9109      	str	r1, [sp, #36]	; 0x24
 8008978:	f7ff ff2f 	bl	80087da <__exponent>
 800897c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800897e:	1813      	adds	r3, r2, r0
 8008980:	2a01      	cmp	r2, #1
 8008982:	4681      	mov	r9, r0
 8008984:	6123      	str	r3, [r4, #16]
 8008986:	dc02      	bgt.n	800898e <_printf_float+0x14e>
 8008988:	6822      	ldr	r2, [r4, #0]
 800898a:	07d1      	lsls	r1, r2, #31
 800898c:	d501      	bpl.n	8008992 <_printf_float+0x152>
 800898e:	3301      	adds	r3, #1
 8008990:	6123      	str	r3, [r4, #16]
 8008992:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008996:	2b00      	cmp	r3, #0
 8008998:	d0a5      	beq.n	80088e6 <_printf_float+0xa6>
 800899a:	232d      	movs	r3, #45	; 0x2d
 800899c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089a0:	e7a1      	b.n	80088e6 <_printf_float+0xa6>
 80089a2:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80089a6:	f000 8177 	beq.w	8008c98 <_printf_float+0x458>
 80089aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80089ae:	d1bb      	bne.n	8008928 <_printf_float+0xe8>
 80089b0:	2900      	cmp	r1, #0
 80089b2:	d1b9      	bne.n	8008928 <_printf_float+0xe8>
 80089b4:	2301      	movs	r3, #1
 80089b6:	e7b6      	b.n	8008926 <_printf_float+0xe6>
 80089b8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80089bc:	d119      	bne.n	80089f2 <_printf_float+0x1b2>
 80089be:	2900      	cmp	r1, #0
 80089c0:	6863      	ldr	r3, [r4, #4]
 80089c2:	dd0c      	ble.n	80089de <_printf_float+0x19e>
 80089c4:	6121      	str	r1, [r4, #16]
 80089c6:	b913      	cbnz	r3, 80089ce <_printf_float+0x18e>
 80089c8:	6822      	ldr	r2, [r4, #0]
 80089ca:	07d2      	lsls	r2, r2, #31
 80089cc:	d502      	bpl.n	80089d4 <_printf_float+0x194>
 80089ce:	3301      	adds	r3, #1
 80089d0:	440b      	add	r3, r1
 80089d2:	6123      	str	r3, [r4, #16]
 80089d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089d6:	65a3      	str	r3, [r4, #88]	; 0x58
 80089d8:	f04f 0900 	mov.w	r9, #0
 80089dc:	e7d9      	b.n	8008992 <_printf_float+0x152>
 80089de:	b913      	cbnz	r3, 80089e6 <_printf_float+0x1a6>
 80089e0:	6822      	ldr	r2, [r4, #0]
 80089e2:	07d0      	lsls	r0, r2, #31
 80089e4:	d501      	bpl.n	80089ea <_printf_float+0x1aa>
 80089e6:	3302      	adds	r3, #2
 80089e8:	e7f3      	b.n	80089d2 <_printf_float+0x192>
 80089ea:	2301      	movs	r3, #1
 80089ec:	e7f1      	b.n	80089d2 <_printf_float+0x192>
 80089ee:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80089f2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80089f6:	4293      	cmp	r3, r2
 80089f8:	db05      	blt.n	8008a06 <_printf_float+0x1c6>
 80089fa:	6822      	ldr	r2, [r4, #0]
 80089fc:	6123      	str	r3, [r4, #16]
 80089fe:	07d1      	lsls	r1, r2, #31
 8008a00:	d5e8      	bpl.n	80089d4 <_printf_float+0x194>
 8008a02:	3301      	adds	r3, #1
 8008a04:	e7e5      	b.n	80089d2 <_printf_float+0x192>
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	bfd4      	ite	le
 8008a0a:	f1c3 0302 	rsble	r3, r3, #2
 8008a0e:	2301      	movgt	r3, #1
 8008a10:	4413      	add	r3, r2
 8008a12:	e7de      	b.n	80089d2 <_printf_float+0x192>
 8008a14:	6823      	ldr	r3, [r4, #0]
 8008a16:	055a      	lsls	r2, r3, #21
 8008a18:	d407      	bmi.n	8008a2a <_printf_float+0x1ea>
 8008a1a:	6923      	ldr	r3, [r4, #16]
 8008a1c:	4642      	mov	r2, r8
 8008a1e:	4631      	mov	r1, r6
 8008a20:	4628      	mov	r0, r5
 8008a22:	47b8      	blx	r7
 8008a24:	3001      	adds	r0, #1
 8008a26:	d12b      	bne.n	8008a80 <_printf_float+0x240>
 8008a28:	e767      	b.n	80088fa <_printf_float+0xba>
 8008a2a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008a2e:	f240 80dc 	bls.w	8008bea <_printf_float+0x3aa>
 8008a32:	2200      	movs	r2, #0
 8008a34:	2300      	movs	r3, #0
 8008a36:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a3a:	f7f8 f865 	bl	8000b08 <__aeabi_dcmpeq>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	d033      	beq.n	8008aaa <_printf_float+0x26a>
 8008a42:	2301      	movs	r3, #1
 8008a44:	4a41      	ldr	r2, [pc, #260]	; (8008b4c <_printf_float+0x30c>)
 8008a46:	4631      	mov	r1, r6
 8008a48:	4628      	mov	r0, r5
 8008a4a:	47b8      	blx	r7
 8008a4c:	3001      	adds	r0, #1
 8008a4e:	f43f af54 	beq.w	80088fa <_printf_float+0xba>
 8008a52:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a56:	429a      	cmp	r2, r3
 8008a58:	db02      	blt.n	8008a60 <_printf_float+0x220>
 8008a5a:	6823      	ldr	r3, [r4, #0]
 8008a5c:	07d8      	lsls	r0, r3, #31
 8008a5e:	d50f      	bpl.n	8008a80 <_printf_float+0x240>
 8008a60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a64:	4631      	mov	r1, r6
 8008a66:	4628      	mov	r0, r5
 8008a68:	47b8      	blx	r7
 8008a6a:	3001      	adds	r0, #1
 8008a6c:	f43f af45 	beq.w	80088fa <_printf_float+0xba>
 8008a70:	f04f 0800 	mov.w	r8, #0
 8008a74:	f104 091a 	add.w	r9, r4, #26
 8008a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a7a:	3b01      	subs	r3, #1
 8008a7c:	4543      	cmp	r3, r8
 8008a7e:	dc09      	bgt.n	8008a94 <_printf_float+0x254>
 8008a80:	6823      	ldr	r3, [r4, #0]
 8008a82:	079b      	lsls	r3, r3, #30
 8008a84:	f100 8103 	bmi.w	8008c8e <_printf_float+0x44e>
 8008a88:	68e0      	ldr	r0, [r4, #12]
 8008a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a8c:	4298      	cmp	r0, r3
 8008a8e:	bfb8      	it	lt
 8008a90:	4618      	movlt	r0, r3
 8008a92:	e734      	b.n	80088fe <_printf_float+0xbe>
 8008a94:	2301      	movs	r3, #1
 8008a96:	464a      	mov	r2, r9
 8008a98:	4631      	mov	r1, r6
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	47b8      	blx	r7
 8008a9e:	3001      	adds	r0, #1
 8008aa0:	f43f af2b 	beq.w	80088fa <_printf_float+0xba>
 8008aa4:	f108 0801 	add.w	r8, r8, #1
 8008aa8:	e7e6      	b.n	8008a78 <_printf_float+0x238>
 8008aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	dc2b      	bgt.n	8008b08 <_printf_float+0x2c8>
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	4a26      	ldr	r2, [pc, #152]	; (8008b4c <_printf_float+0x30c>)
 8008ab4:	4631      	mov	r1, r6
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b8      	blx	r7
 8008aba:	3001      	adds	r0, #1
 8008abc:	f43f af1d 	beq.w	80088fa <_printf_float+0xba>
 8008ac0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ac2:	b923      	cbnz	r3, 8008ace <_printf_float+0x28e>
 8008ac4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ac6:	b913      	cbnz	r3, 8008ace <_printf_float+0x28e>
 8008ac8:	6823      	ldr	r3, [r4, #0]
 8008aca:	07d9      	lsls	r1, r3, #31
 8008acc:	d5d8      	bpl.n	8008a80 <_printf_float+0x240>
 8008ace:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	47b8      	blx	r7
 8008ad8:	3001      	adds	r0, #1
 8008ada:	f43f af0e 	beq.w	80088fa <_printf_float+0xba>
 8008ade:	f04f 0900 	mov.w	r9, #0
 8008ae2:	f104 0a1a 	add.w	sl, r4, #26
 8008ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ae8:	425b      	negs	r3, r3
 8008aea:	454b      	cmp	r3, r9
 8008aec:	dc01      	bgt.n	8008af2 <_printf_float+0x2b2>
 8008aee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008af0:	e794      	b.n	8008a1c <_printf_float+0x1dc>
 8008af2:	2301      	movs	r3, #1
 8008af4:	4652      	mov	r2, sl
 8008af6:	4631      	mov	r1, r6
 8008af8:	4628      	mov	r0, r5
 8008afa:	47b8      	blx	r7
 8008afc:	3001      	adds	r0, #1
 8008afe:	f43f aefc 	beq.w	80088fa <_printf_float+0xba>
 8008b02:	f109 0901 	add.w	r9, r9, #1
 8008b06:	e7ee      	b.n	8008ae6 <_printf_float+0x2a6>
 8008b08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b0c:	429a      	cmp	r2, r3
 8008b0e:	bfa8      	it	ge
 8008b10:	461a      	movge	r2, r3
 8008b12:	2a00      	cmp	r2, #0
 8008b14:	4691      	mov	r9, r2
 8008b16:	dd07      	ble.n	8008b28 <_printf_float+0x2e8>
 8008b18:	4613      	mov	r3, r2
 8008b1a:	4631      	mov	r1, r6
 8008b1c:	4642      	mov	r2, r8
 8008b1e:	4628      	mov	r0, r5
 8008b20:	47b8      	blx	r7
 8008b22:	3001      	adds	r0, #1
 8008b24:	f43f aee9 	beq.w	80088fa <_printf_float+0xba>
 8008b28:	f104 031a 	add.w	r3, r4, #26
 8008b2c:	f04f 0b00 	mov.w	fp, #0
 8008b30:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b34:	9306      	str	r3, [sp, #24]
 8008b36:	e015      	b.n	8008b64 <_printf_float+0x324>
 8008b38:	7fefffff 	.word	0x7fefffff
 8008b3c:	0800aeec 	.word	0x0800aeec
 8008b40:	0800aee8 	.word	0x0800aee8
 8008b44:	0800aef4 	.word	0x0800aef4
 8008b48:	0800aef0 	.word	0x0800aef0
 8008b4c:	0800aef8 	.word	0x0800aef8
 8008b50:	2301      	movs	r3, #1
 8008b52:	9a06      	ldr	r2, [sp, #24]
 8008b54:	4631      	mov	r1, r6
 8008b56:	4628      	mov	r0, r5
 8008b58:	47b8      	blx	r7
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	f43f aecd 	beq.w	80088fa <_printf_float+0xba>
 8008b60:	f10b 0b01 	add.w	fp, fp, #1
 8008b64:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008b68:	ebaa 0309 	sub.w	r3, sl, r9
 8008b6c:	455b      	cmp	r3, fp
 8008b6e:	dcef      	bgt.n	8008b50 <_printf_float+0x310>
 8008b70:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b74:	429a      	cmp	r2, r3
 8008b76:	44d0      	add	r8, sl
 8008b78:	db15      	blt.n	8008ba6 <_printf_float+0x366>
 8008b7a:	6823      	ldr	r3, [r4, #0]
 8008b7c:	07da      	lsls	r2, r3, #31
 8008b7e:	d412      	bmi.n	8008ba6 <_printf_float+0x366>
 8008b80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b84:	eba3 020a 	sub.w	r2, r3, sl
 8008b88:	eba3 0a01 	sub.w	sl, r3, r1
 8008b8c:	4592      	cmp	sl, r2
 8008b8e:	bfa8      	it	ge
 8008b90:	4692      	movge	sl, r2
 8008b92:	f1ba 0f00 	cmp.w	sl, #0
 8008b96:	dc0e      	bgt.n	8008bb6 <_printf_float+0x376>
 8008b98:	f04f 0800 	mov.w	r8, #0
 8008b9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ba0:	f104 091a 	add.w	r9, r4, #26
 8008ba4:	e019      	b.n	8008bda <_printf_float+0x39a>
 8008ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008baa:	4631      	mov	r1, r6
 8008bac:	4628      	mov	r0, r5
 8008bae:	47b8      	blx	r7
 8008bb0:	3001      	adds	r0, #1
 8008bb2:	d1e5      	bne.n	8008b80 <_printf_float+0x340>
 8008bb4:	e6a1      	b.n	80088fa <_printf_float+0xba>
 8008bb6:	4653      	mov	r3, sl
 8008bb8:	4642      	mov	r2, r8
 8008bba:	4631      	mov	r1, r6
 8008bbc:	4628      	mov	r0, r5
 8008bbe:	47b8      	blx	r7
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d1e9      	bne.n	8008b98 <_printf_float+0x358>
 8008bc4:	e699      	b.n	80088fa <_printf_float+0xba>
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	464a      	mov	r2, r9
 8008bca:	4631      	mov	r1, r6
 8008bcc:	4628      	mov	r0, r5
 8008bce:	47b8      	blx	r7
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	f43f ae92 	beq.w	80088fa <_printf_float+0xba>
 8008bd6:	f108 0801 	add.w	r8, r8, #1
 8008bda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008bde:	1a9b      	subs	r3, r3, r2
 8008be0:	eba3 030a 	sub.w	r3, r3, sl
 8008be4:	4543      	cmp	r3, r8
 8008be6:	dcee      	bgt.n	8008bc6 <_printf_float+0x386>
 8008be8:	e74a      	b.n	8008a80 <_printf_float+0x240>
 8008bea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bec:	2a01      	cmp	r2, #1
 8008bee:	dc01      	bgt.n	8008bf4 <_printf_float+0x3b4>
 8008bf0:	07db      	lsls	r3, r3, #31
 8008bf2:	d53a      	bpl.n	8008c6a <_printf_float+0x42a>
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	4642      	mov	r2, r8
 8008bf8:	4631      	mov	r1, r6
 8008bfa:	4628      	mov	r0, r5
 8008bfc:	47b8      	blx	r7
 8008bfe:	3001      	adds	r0, #1
 8008c00:	f43f ae7b 	beq.w	80088fa <_printf_float+0xba>
 8008c04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008c08:	4631      	mov	r1, r6
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	47b8      	blx	r7
 8008c0e:	3001      	adds	r0, #1
 8008c10:	f108 0801 	add.w	r8, r8, #1
 8008c14:	f43f ae71 	beq.w	80088fa <_printf_float+0xba>
 8008c18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	f103 3aff 	add.w	sl, r3, #4294967295
 8008c20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c24:	2300      	movs	r3, #0
 8008c26:	f7f7 ff6f 	bl	8000b08 <__aeabi_dcmpeq>
 8008c2a:	b9c8      	cbnz	r0, 8008c60 <_printf_float+0x420>
 8008c2c:	4653      	mov	r3, sl
 8008c2e:	4642      	mov	r2, r8
 8008c30:	4631      	mov	r1, r6
 8008c32:	4628      	mov	r0, r5
 8008c34:	47b8      	blx	r7
 8008c36:	3001      	adds	r0, #1
 8008c38:	d10e      	bne.n	8008c58 <_printf_float+0x418>
 8008c3a:	e65e      	b.n	80088fa <_printf_float+0xba>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	4652      	mov	r2, sl
 8008c40:	4631      	mov	r1, r6
 8008c42:	4628      	mov	r0, r5
 8008c44:	47b8      	blx	r7
 8008c46:	3001      	adds	r0, #1
 8008c48:	f43f ae57 	beq.w	80088fa <_printf_float+0xba>
 8008c4c:	f108 0801 	add.w	r8, r8, #1
 8008c50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c52:	3b01      	subs	r3, #1
 8008c54:	4543      	cmp	r3, r8
 8008c56:	dcf1      	bgt.n	8008c3c <_printf_float+0x3fc>
 8008c58:	464b      	mov	r3, r9
 8008c5a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c5e:	e6de      	b.n	8008a1e <_printf_float+0x1de>
 8008c60:	f04f 0800 	mov.w	r8, #0
 8008c64:	f104 0a1a 	add.w	sl, r4, #26
 8008c68:	e7f2      	b.n	8008c50 <_printf_float+0x410>
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	e7df      	b.n	8008c2e <_printf_float+0x3ee>
 8008c6e:	2301      	movs	r3, #1
 8008c70:	464a      	mov	r2, r9
 8008c72:	4631      	mov	r1, r6
 8008c74:	4628      	mov	r0, r5
 8008c76:	47b8      	blx	r7
 8008c78:	3001      	adds	r0, #1
 8008c7a:	f43f ae3e 	beq.w	80088fa <_printf_float+0xba>
 8008c7e:	f108 0801 	add.w	r8, r8, #1
 8008c82:	68e3      	ldr	r3, [r4, #12]
 8008c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c86:	1a9b      	subs	r3, r3, r2
 8008c88:	4543      	cmp	r3, r8
 8008c8a:	dcf0      	bgt.n	8008c6e <_printf_float+0x42e>
 8008c8c:	e6fc      	b.n	8008a88 <_printf_float+0x248>
 8008c8e:	f04f 0800 	mov.w	r8, #0
 8008c92:	f104 0919 	add.w	r9, r4, #25
 8008c96:	e7f4      	b.n	8008c82 <_printf_float+0x442>
 8008c98:	2900      	cmp	r1, #0
 8008c9a:	f43f ae8b 	beq.w	80089b4 <_printf_float+0x174>
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008ca4:	ab09      	add	r3, sp, #36	; 0x24
 8008ca6:	9300      	str	r3, [sp, #0]
 8008ca8:	ec49 8b10 	vmov	d0, r8, r9
 8008cac:	6022      	str	r2, [r4, #0]
 8008cae:	f8cd a004 	str.w	sl, [sp, #4]
 8008cb2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f7ff fd2e 	bl	8008718 <__cvt>
 8008cbc:	4680      	mov	r8, r0
 8008cbe:	e648      	b.n	8008952 <_printf_float+0x112>

08008cc0 <_printf_common>:
 8008cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cc4:	4691      	mov	r9, r2
 8008cc6:	461f      	mov	r7, r3
 8008cc8:	688a      	ldr	r2, [r1, #8]
 8008cca:	690b      	ldr	r3, [r1, #16]
 8008ccc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	bfb8      	it	lt
 8008cd4:	4613      	movlt	r3, r2
 8008cd6:	f8c9 3000 	str.w	r3, [r9]
 8008cda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cde:	4606      	mov	r6, r0
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	b112      	cbz	r2, 8008cea <_printf_common+0x2a>
 8008ce4:	3301      	adds	r3, #1
 8008ce6:	f8c9 3000 	str.w	r3, [r9]
 8008cea:	6823      	ldr	r3, [r4, #0]
 8008cec:	0699      	lsls	r1, r3, #26
 8008cee:	bf42      	ittt	mi
 8008cf0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8008cf4:	3302      	addmi	r3, #2
 8008cf6:	f8c9 3000 	strmi.w	r3, [r9]
 8008cfa:	6825      	ldr	r5, [r4, #0]
 8008cfc:	f015 0506 	ands.w	r5, r5, #6
 8008d00:	d107      	bne.n	8008d12 <_printf_common+0x52>
 8008d02:	f104 0a19 	add.w	sl, r4, #25
 8008d06:	68e3      	ldr	r3, [r4, #12]
 8008d08:	f8d9 2000 	ldr.w	r2, [r9]
 8008d0c:	1a9b      	subs	r3, r3, r2
 8008d0e:	42ab      	cmp	r3, r5
 8008d10:	dc28      	bgt.n	8008d64 <_printf_common+0xa4>
 8008d12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8008d16:	6822      	ldr	r2, [r4, #0]
 8008d18:	3300      	adds	r3, #0
 8008d1a:	bf18      	it	ne
 8008d1c:	2301      	movne	r3, #1
 8008d1e:	0692      	lsls	r2, r2, #26
 8008d20:	d42d      	bmi.n	8008d7e <_printf_common+0xbe>
 8008d22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d26:	4639      	mov	r1, r7
 8008d28:	4630      	mov	r0, r6
 8008d2a:	47c0      	blx	r8
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	d020      	beq.n	8008d72 <_printf_common+0xb2>
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	68e5      	ldr	r5, [r4, #12]
 8008d34:	f8d9 2000 	ldr.w	r2, [r9]
 8008d38:	f003 0306 	and.w	r3, r3, #6
 8008d3c:	2b04      	cmp	r3, #4
 8008d3e:	bf08      	it	eq
 8008d40:	1aad      	subeq	r5, r5, r2
 8008d42:	68a3      	ldr	r3, [r4, #8]
 8008d44:	6922      	ldr	r2, [r4, #16]
 8008d46:	bf0c      	ite	eq
 8008d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d4c:	2500      	movne	r5, #0
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	bfc4      	itt	gt
 8008d52:	1a9b      	subgt	r3, r3, r2
 8008d54:	18ed      	addgt	r5, r5, r3
 8008d56:	f04f 0900 	mov.w	r9, #0
 8008d5a:	341a      	adds	r4, #26
 8008d5c:	454d      	cmp	r5, r9
 8008d5e:	d11a      	bne.n	8008d96 <_printf_common+0xd6>
 8008d60:	2000      	movs	r0, #0
 8008d62:	e008      	b.n	8008d76 <_printf_common+0xb6>
 8008d64:	2301      	movs	r3, #1
 8008d66:	4652      	mov	r2, sl
 8008d68:	4639      	mov	r1, r7
 8008d6a:	4630      	mov	r0, r6
 8008d6c:	47c0      	blx	r8
 8008d6e:	3001      	adds	r0, #1
 8008d70:	d103      	bne.n	8008d7a <_printf_common+0xba>
 8008d72:	f04f 30ff 	mov.w	r0, #4294967295
 8008d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d7a:	3501      	adds	r5, #1
 8008d7c:	e7c3      	b.n	8008d06 <_printf_common+0x46>
 8008d7e:	18e1      	adds	r1, r4, r3
 8008d80:	1c5a      	adds	r2, r3, #1
 8008d82:	2030      	movs	r0, #48	; 0x30
 8008d84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d88:	4422      	add	r2, r4
 8008d8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d92:	3302      	adds	r3, #2
 8008d94:	e7c5      	b.n	8008d22 <_printf_common+0x62>
 8008d96:	2301      	movs	r3, #1
 8008d98:	4622      	mov	r2, r4
 8008d9a:	4639      	mov	r1, r7
 8008d9c:	4630      	mov	r0, r6
 8008d9e:	47c0      	blx	r8
 8008da0:	3001      	adds	r0, #1
 8008da2:	d0e6      	beq.n	8008d72 <_printf_common+0xb2>
 8008da4:	f109 0901 	add.w	r9, r9, #1
 8008da8:	e7d8      	b.n	8008d5c <_printf_common+0x9c>
	...

08008dac <_printf_i>:
 8008dac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008db0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8008db4:	460c      	mov	r4, r1
 8008db6:	7e09      	ldrb	r1, [r1, #24]
 8008db8:	b085      	sub	sp, #20
 8008dba:	296e      	cmp	r1, #110	; 0x6e
 8008dbc:	4617      	mov	r7, r2
 8008dbe:	4606      	mov	r6, r0
 8008dc0:	4698      	mov	r8, r3
 8008dc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dc4:	f000 80b3 	beq.w	8008f2e <_printf_i+0x182>
 8008dc8:	d822      	bhi.n	8008e10 <_printf_i+0x64>
 8008dca:	2963      	cmp	r1, #99	; 0x63
 8008dcc:	d036      	beq.n	8008e3c <_printf_i+0x90>
 8008dce:	d80a      	bhi.n	8008de6 <_printf_i+0x3a>
 8008dd0:	2900      	cmp	r1, #0
 8008dd2:	f000 80b9 	beq.w	8008f48 <_printf_i+0x19c>
 8008dd6:	2958      	cmp	r1, #88	; 0x58
 8008dd8:	f000 8083 	beq.w	8008ee2 <_printf_i+0x136>
 8008ddc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008de0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8008de4:	e032      	b.n	8008e4c <_printf_i+0xa0>
 8008de6:	2964      	cmp	r1, #100	; 0x64
 8008de8:	d001      	beq.n	8008dee <_printf_i+0x42>
 8008dea:	2969      	cmp	r1, #105	; 0x69
 8008dec:	d1f6      	bne.n	8008ddc <_printf_i+0x30>
 8008dee:	6820      	ldr	r0, [r4, #0]
 8008df0:	6813      	ldr	r3, [r2, #0]
 8008df2:	0605      	lsls	r5, r0, #24
 8008df4:	f103 0104 	add.w	r1, r3, #4
 8008df8:	d52a      	bpl.n	8008e50 <_printf_i+0xa4>
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6011      	str	r1, [r2, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	da03      	bge.n	8008e0a <_printf_i+0x5e>
 8008e02:	222d      	movs	r2, #45	; 0x2d
 8008e04:	425b      	negs	r3, r3
 8008e06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008e0a:	486f      	ldr	r0, [pc, #444]	; (8008fc8 <_printf_i+0x21c>)
 8008e0c:	220a      	movs	r2, #10
 8008e0e:	e039      	b.n	8008e84 <_printf_i+0xd8>
 8008e10:	2973      	cmp	r1, #115	; 0x73
 8008e12:	f000 809d 	beq.w	8008f50 <_printf_i+0x1a4>
 8008e16:	d808      	bhi.n	8008e2a <_printf_i+0x7e>
 8008e18:	296f      	cmp	r1, #111	; 0x6f
 8008e1a:	d020      	beq.n	8008e5e <_printf_i+0xb2>
 8008e1c:	2970      	cmp	r1, #112	; 0x70
 8008e1e:	d1dd      	bne.n	8008ddc <_printf_i+0x30>
 8008e20:	6823      	ldr	r3, [r4, #0]
 8008e22:	f043 0320 	orr.w	r3, r3, #32
 8008e26:	6023      	str	r3, [r4, #0]
 8008e28:	e003      	b.n	8008e32 <_printf_i+0x86>
 8008e2a:	2975      	cmp	r1, #117	; 0x75
 8008e2c:	d017      	beq.n	8008e5e <_printf_i+0xb2>
 8008e2e:	2978      	cmp	r1, #120	; 0x78
 8008e30:	d1d4      	bne.n	8008ddc <_printf_i+0x30>
 8008e32:	2378      	movs	r3, #120	; 0x78
 8008e34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e38:	4864      	ldr	r0, [pc, #400]	; (8008fcc <_printf_i+0x220>)
 8008e3a:	e055      	b.n	8008ee8 <_printf_i+0x13c>
 8008e3c:	6813      	ldr	r3, [r2, #0]
 8008e3e:	1d19      	adds	r1, r3, #4
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	6011      	str	r1, [r2, #0]
 8008e44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	e08c      	b.n	8008f6a <_printf_i+0x1be>
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	6011      	str	r1, [r2, #0]
 8008e54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e58:	bf18      	it	ne
 8008e5a:	b21b      	sxthne	r3, r3
 8008e5c:	e7cf      	b.n	8008dfe <_printf_i+0x52>
 8008e5e:	6813      	ldr	r3, [r2, #0]
 8008e60:	6825      	ldr	r5, [r4, #0]
 8008e62:	1d18      	adds	r0, r3, #4
 8008e64:	6010      	str	r0, [r2, #0]
 8008e66:	0628      	lsls	r0, r5, #24
 8008e68:	d501      	bpl.n	8008e6e <_printf_i+0xc2>
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	e002      	b.n	8008e74 <_printf_i+0xc8>
 8008e6e:	0668      	lsls	r0, r5, #25
 8008e70:	d5fb      	bpl.n	8008e6a <_printf_i+0xbe>
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	4854      	ldr	r0, [pc, #336]	; (8008fc8 <_printf_i+0x21c>)
 8008e76:	296f      	cmp	r1, #111	; 0x6f
 8008e78:	bf14      	ite	ne
 8008e7a:	220a      	movne	r2, #10
 8008e7c:	2208      	moveq	r2, #8
 8008e7e:	2100      	movs	r1, #0
 8008e80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e84:	6865      	ldr	r5, [r4, #4]
 8008e86:	60a5      	str	r5, [r4, #8]
 8008e88:	2d00      	cmp	r5, #0
 8008e8a:	f2c0 8095 	blt.w	8008fb8 <_printf_i+0x20c>
 8008e8e:	6821      	ldr	r1, [r4, #0]
 8008e90:	f021 0104 	bic.w	r1, r1, #4
 8008e94:	6021      	str	r1, [r4, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d13d      	bne.n	8008f16 <_printf_i+0x16a>
 8008e9a:	2d00      	cmp	r5, #0
 8008e9c:	f040 808e 	bne.w	8008fbc <_printf_i+0x210>
 8008ea0:	4665      	mov	r5, ip
 8008ea2:	2a08      	cmp	r2, #8
 8008ea4:	d10b      	bne.n	8008ebe <_printf_i+0x112>
 8008ea6:	6823      	ldr	r3, [r4, #0]
 8008ea8:	07db      	lsls	r3, r3, #31
 8008eaa:	d508      	bpl.n	8008ebe <_printf_i+0x112>
 8008eac:	6923      	ldr	r3, [r4, #16]
 8008eae:	6862      	ldr	r2, [r4, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	bfde      	ittt	le
 8008eb4:	2330      	movle	r3, #48	; 0x30
 8008eb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008eba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ebe:	ebac 0305 	sub.w	r3, ip, r5
 8008ec2:	6123      	str	r3, [r4, #16]
 8008ec4:	f8cd 8000 	str.w	r8, [sp]
 8008ec8:	463b      	mov	r3, r7
 8008eca:	aa03      	add	r2, sp, #12
 8008ecc:	4621      	mov	r1, r4
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f7ff fef6 	bl	8008cc0 <_printf_common>
 8008ed4:	3001      	adds	r0, #1
 8008ed6:	d14d      	bne.n	8008f74 <_printf_i+0x1c8>
 8008ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8008edc:	b005      	add	sp, #20
 8008ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008ee2:	4839      	ldr	r0, [pc, #228]	; (8008fc8 <_printf_i+0x21c>)
 8008ee4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008ee8:	6813      	ldr	r3, [r2, #0]
 8008eea:	6821      	ldr	r1, [r4, #0]
 8008eec:	1d1d      	adds	r5, r3, #4
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	6015      	str	r5, [r2, #0]
 8008ef2:	060a      	lsls	r2, r1, #24
 8008ef4:	d50b      	bpl.n	8008f0e <_printf_i+0x162>
 8008ef6:	07ca      	lsls	r2, r1, #31
 8008ef8:	bf44      	itt	mi
 8008efa:	f041 0120 	orrmi.w	r1, r1, #32
 8008efe:	6021      	strmi	r1, [r4, #0]
 8008f00:	b91b      	cbnz	r3, 8008f0a <_printf_i+0x15e>
 8008f02:	6822      	ldr	r2, [r4, #0]
 8008f04:	f022 0220 	bic.w	r2, r2, #32
 8008f08:	6022      	str	r2, [r4, #0]
 8008f0a:	2210      	movs	r2, #16
 8008f0c:	e7b7      	b.n	8008e7e <_printf_i+0xd2>
 8008f0e:	064d      	lsls	r5, r1, #25
 8008f10:	bf48      	it	mi
 8008f12:	b29b      	uxthmi	r3, r3
 8008f14:	e7ef      	b.n	8008ef6 <_printf_i+0x14a>
 8008f16:	4665      	mov	r5, ip
 8008f18:	fbb3 f1f2 	udiv	r1, r3, r2
 8008f1c:	fb02 3311 	mls	r3, r2, r1, r3
 8008f20:	5cc3      	ldrb	r3, [r0, r3]
 8008f22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8008f26:	460b      	mov	r3, r1
 8008f28:	2900      	cmp	r1, #0
 8008f2a:	d1f5      	bne.n	8008f18 <_printf_i+0x16c>
 8008f2c:	e7b9      	b.n	8008ea2 <_printf_i+0xf6>
 8008f2e:	6813      	ldr	r3, [r2, #0]
 8008f30:	6825      	ldr	r5, [r4, #0]
 8008f32:	6961      	ldr	r1, [r4, #20]
 8008f34:	1d18      	adds	r0, r3, #4
 8008f36:	6010      	str	r0, [r2, #0]
 8008f38:	0628      	lsls	r0, r5, #24
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	d501      	bpl.n	8008f42 <_printf_i+0x196>
 8008f3e:	6019      	str	r1, [r3, #0]
 8008f40:	e002      	b.n	8008f48 <_printf_i+0x19c>
 8008f42:	066a      	lsls	r2, r5, #25
 8008f44:	d5fb      	bpl.n	8008f3e <_printf_i+0x192>
 8008f46:	8019      	strh	r1, [r3, #0]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	6123      	str	r3, [r4, #16]
 8008f4c:	4665      	mov	r5, ip
 8008f4e:	e7b9      	b.n	8008ec4 <_printf_i+0x118>
 8008f50:	6813      	ldr	r3, [r2, #0]
 8008f52:	1d19      	adds	r1, r3, #4
 8008f54:	6011      	str	r1, [r2, #0]
 8008f56:	681d      	ldr	r5, [r3, #0]
 8008f58:	6862      	ldr	r2, [r4, #4]
 8008f5a:	2100      	movs	r1, #0
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f7f7 f95f 	bl	8000220 <memchr>
 8008f62:	b108      	cbz	r0, 8008f68 <_printf_i+0x1bc>
 8008f64:	1b40      	subs	r0, r0, r5
 8008f66:	6060      	str	r0, [r4, #4]
 8008f68:	6863      	ldr	r3, [r4, #4]
 8008f6a:	6123      	str	r3, [r4, #16]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f72:	e7a7      	b.n	8008ec4 <_printf_i+0x118>
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	462a      	mov	r2, r5
 8008f78:	4639      	mov	r1, r7
 8008f7a:	4630      	mov	r0, r6
 8008f7c:	47c0      	blx	r8
 8008f7e:	3001      	adds	r0, #1
 8008f80:	d0aa      	beq.n	8008ed8 <_printf_i+0x12c>
 8008f82:	6823      	ldr	r3, [r4, #0]
 8008f84:	079b      	lsls	r3, r3, #30
 8008f86:	d413      	bmi.n	8008fb0 <_printf_i+0x204>
 8008f88:	68e0      	ldr	r0, [r4, #12]
 8008f8a:	9b03      	ldr	r3, [sp, #12]
 8008f8c:	4298      	cmp	r0, r3
 8008f8e:	bfb8      	it	lt
 8008f90:	4618      	movlt	r0, r3
 8008f92:	e7a3      	b.n	8008edc <_printf_i+0x130>
 8008f94:	2301      	movs	r3, #1
 8008f96:	464a      	mov	r2, r9
 8008f98:	4639      	mov	r1, r7
 8008f9a:	4630      	mov	r0, r6
 8008f9c:	47c0      	blx	r8
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	d09a      	beq.n	8008ed8 <_printf_i+0x12c>
 8008fa2:	3501      	adds	r5, #1
 8008fa4:	68e3      	ldr	r3, [r4, #12]
 8008fa6:	9a03      	ldr	r2, [sp, #12]
 8008fa8:	1a9b      	subs	r3, r3, r2
 8008faa:	42ab      	cmp	r3, r5
 8008fac:	dcf2      	bgt.n	8008f94 <_printf_i+0x1e8>
 8008fae:	e7eb      	b.n	8008f88 <_printf_i+0x1dc>
 8008fb0:	2500      	movs	r5, #0
 8008fb2:	f104 0919 	add.w	r9, r4, #25
 8008fb6:	e7f5      	b.n	8008fa4 <_printf_i+0x1f8>
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1ac      	bne.n	8008f16 <_printf_i+0x16a>
 8008fbc:	7803      	ldrb	r3, [r0, #0]
 8008fbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008fc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008fc6:	e76c      	b.n	8008ea2 <_printf_i+0xf6>
 8008fc8:	0800aefa 	.word	0x0800aefa
 8008fcc:	0800af0b 	.word	0x0800af0b

08008fd0 <_sbrk_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4c06      	ldr	r4, [pc, #24]	; (8008fec <_sbrk_r+0x1c>)
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4605      	mov	r5, r0
 8008fd8:	4608      	mov	r0, r1
 8008fda:	6023      	str	r3, [r4, #0]
 8008fdc:	f7f8 ff7a 	bl	8001ed4 <_sbrk>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d102      	bne.n	8008fea <_sbrk_r+0x1a>
 8008fe4:	6823      	ldr	r3, [r4, #0]
 8008fe6:	b103      	cbz	r3, 8008fea <_sbrk_r+0x1a>
 8008fe8:	602b      	str	r3, [r5, #0]
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	20000e04 	.word	0x20000e04

08008ff0 <siprintf>:
 8008ff0:	b40e      	push	{r1, r2, r3}
 8008ff2:	b500      	push	{lr}
 8008ff4:	b09c      	sub	sp, #112	; 0x70
 8008ff6:	ab1d      	add	r3, sp, #116	; 0x74
 8008ff8:	9002      	str	r0, [sp, #8]
 8008ffa:	9006      	str	r0, [sp, #24]
 8008ffc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009000:	4809      	ldr	r0, [pc, #36]	; (8009028 <siprintf+0x38>)
 8009002:	9107      	str	r1, [sp, #28]
 8009004:	9104      	str	r1, [sp, #16]
 8009006:	4909      	ldr	r1, [pc, #36]	; (800902c <siprintf+0x3c>)
 8009008:	f853 2b04 	ldr.w	r2, [r3], #4
 800900c:	9105      	str	r1, [sp, #20]
 800900e:	6800      	ldr	r0, [r0, #0]
 8009010:	9301      	str	r3, [sp, #4]
 8009012:	a902      	add	r1, sp, #8
 8009014:	f001 f9ae 	bl	800a374 <_svfiprintf_r>
 8009018:	9b02      	ldr	r3, [sp, #8]
 800901a:	2200      	movs	r2, #0
 800901c:	701a      	strb	r2, [r3, #0]
 800901e:	b01c      	add	sp, #112	; 0x70
 8009020:	f85d eb04 	ldr.w	lr, [sp], #4
 8009024:	b003      	add	sp, #12
 8009026:	4770      	bx	lr
 8009028:	2000000c 	.word	0x2000000c
 800902c:	ffff0208 	.word	0xffff0208

08009030 <quorem>:
 8009030:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009034:	6903      	ldr	r3, [r0, #16]
 8009036:	690c      	ldr	r4, [r1, #16]
 8009038:	42a3      	cmp	r3, r4
 800903a:	4680      	mov	r8, r0
 800903c:	f2c0 8082 	blt.w	8009144 <quorem+0x114>
 8009040:	3c01      	subs	r4, #1
 8009042:	f101 0714 	add.w	r7, r1, #20
 8009046:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800904a:	f100 0614 	add.w	r6, r0, #20
 800904e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009052:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009056:	eb06 030c 	add.w	r3, r6, ip
 800905a:	3501      	adds	r5, #1
 800905c:	eb07 090c 	add.w	r9, r7, ip
 8009060:	9301      	str	r3, [sp, #4]
 8009062:	fbb0 f5f5 	udiv	r5, r0, r5
 8009066:	b395      	cbz	r5, 80090ce <quorem+0x9e>
 8009068:	f04f 0a00 	mov.w	sl, #0
 800906c:	4638      	mov	r0, r7
 800906e:	46b6      	mov	lr, r6
 8009070:	46d3      	mov	fp, sl
 8009072:	f850 2b04 	ldr.w	r2, [r0], #4
 8009076:	b293      	uxth	r3, r2
 8009078:	fb05 a303 	mla	r3, r5, r3, sl
 800907c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009080:	b29b      	uxth	r3, r3
 8009082:	ebab 0303 	sub.w	r3, fp, r3
 8009086:	0c12      	lsrs	r2, r2, #16
 8009088:	f8de b000 	ldr.w	fp, [lr]
 800908c:	fb05 a202 	mla	r2, r5, r2, sl
 8009090:	fa13 f38b 	uxtah	r3, r3, fp
 8009094:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009098:	fa1f fb82 	uxth.w	fp, r2
 800909c:	f8de 2000 	ldr.w	r2, [lr]
 80090a0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80090a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80090ae:	4581      	cmp	r9, r0
 80090b0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80090b4:	f84e 3b04 	str.w	r3, [lr], #4
 80090b8:	d2db      	bcs.n	8009072 <quorem+0x42>
 80090ba:	f856 300c 	ldr.w	r3, [r6, ip]
 80090be:	b933      	cbnz	r3, 80090ce <quorem+0x9e>
 80090c0:	9b01      	ldr	r3, [sp, #4]
 80090c2:	3b04      	subs	r3, #4
 80090c4:	429e      	cmp	r6, r3
 80090c6:	461a      	mov	r2, r3
 80090c8:	d330      	bcc.n	800912c <quorem+0xfc>
 80090ca:	f8c8 4010 	str.w	r4, [r8, #16]
 80090ce:	4640      	mov	r0, r8
 80090d0:	f001 f822 	bl	800a118 <__mcmp>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	db25      	blt.n	8009124 <quorem+0xf4>
 80090d8:	3501      	adds	r5, #1
 80090da:	4630      	mov	r0, r6
 80090dc:	f04f 0c00 	mov.w	ip, #0
 80090e0:	f857 2b04 	ldr.w	r2, [r7], #4
 80090e4:	f8d0 e000 	ldr.w	lr, [r0]
 80090e8:	b293      	uxth	r3, r2
 80090ea:	ebac 0303 	sub.w	r3, ip, r3
 80090ee:	0c12      	lsrs	r2, r2, #16
 80090f0:	fa13 f38e 	uxtah	r3, r3, lr
 80090f4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80090f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80090fc:	b29b      	uxth	r3, r3
 80090fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009102:	45b9      	cmp	r9, r7
 8009104:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009108:	f840 3b04 	str.w	r3, [r0], #4
 800910c:	d2e8      	bcs.n	80090e0 <quorem+0xb0>
 800910e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009112:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009116:	b92a      	cbnz	r2, 8009124 <quorem+0xf4>
 8009118:	3b04      	subs	r3, #4
 800911a:	429e      	cmp	r6, r3
 800911c:	461a      	mov	r2, r3
 800911e:	d30b      	bcc.n	8009138 <quorem+0x108>
 8009120:	f8c8 4010 	str.w	r4, [r8, #16]
 8009124:	4628      	mov	r0, r5
 8009126:	b003      	add	sp, #12
 8009128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800912c:	6812      	ldr	r2, [r2, #0]
 800912e:	3b04      	subs	r3, #4
 8009130:	2a00      	cmp	r2, #0
 8009132:	d1ca      	bne.n	80090ca <quorem+0x9a>
 8009134:	3c01      	subs	r4, #1
 8009136:	e7c5      	b.n	80090c4 <quorem+0x94>
 8009138:	6812      	ldr	r2, [r2, #0]
 800913a:	3b04      	subs	r3, #4
 800913c:	2a00      	cmp	r2, #0
 800913e:	d1ef      	bne.n	8009120 <quorem+0xf0>
 8009140:	3c01      	subs	r4, #1
 8009142:	e7ea      	b.n	800911a <quorem+0xea>
 8009144:	2000      	movs	r0, #0
 8009146:	e7ee      	b.n	8009126 <quorem+0xf6>

08009148 <_dtoa_r>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	ec57 6b10 	vmov	r6, r7, d0
 8009150:	b097      	sub	sp, #92	; 0x5c
 8009152:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009154:	9106      	str	r1, [sp, #24]
 8009156:	4604      	mov	r4, r0
 8009158:	920b      	str	r2, [sp, #44]	; 0x2c
 800915a:	9312      	str	r3, [sp, #72]	; 0x48
 800915c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009160:	e9cd 6700 	strd	r6, r7, [sp]
 8009164:	b93d      	cbnz	r5, 8009176 <_dtoa_r+0x2e>
 8009166:	2010      	movs	r0, #16
 8009168:	f7ff fa16 	bl	8008598 <malloc>
 800916c:	6260      	str	r0, [r4, #36]	; 0x24
 800916e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009172:	6005      	str	r5, [r0, #0]
 8009174:	60c5      	str	r5, [r0, #12]
 8009176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009178:	6819      	ldr	r1, [r3, #0]
 800917a:	b151      	cbz	r1, 8009192 <_dtoa_r+0x4a>
 800917c:	685a      	ldr	r2, [r3, #4]
 800917e:	604a      	str	r2, [r1, #4]
 8009180:	2301      	movs	r3, #1
 8009182:	4093      	lsls	r3, r2
 8009184:	608b      	str	r3, [r1, #8]
 8009186:	4620      	mov	r0, r4
 8009188:	f000 fde5 	bl	8009d56 <_Bfree>
 800918c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800918e:	2200      	movs	r2, #0
 8009190:	601a      	str	r2, [r3, #0]
 8009192:	1e3b      	subs	r3, r7, #0
 8009194:	bfbb      	ittet	lt
 8009196:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800919a:	9301      	strlt	r3, [sp, #4]
 800919c:	2300      	movge	r3, #0
 800919e:	2201      	movlt	r2, #1
 80091a0:	bfac      	ite	ge
 80091a2:	f8c8 3000 	strge.w	r3, [r8]
 80091a6:	f8c8 2000 	strlt.w	r2, [r8]
 80091aa:	4baf      	ldr	r3, [pc, #700]	; (8009468 <_dtoa_r+0x320>)
 80091ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80091b0:	ea33 0308 	bics.w	r3, r3, r8
 80091b4:	d114      	bne.n	80091e0 <_dtoa_r+0x98>
 80091b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80091bc:	6013      	str	r3, [r2, #0]
 80091be:	9b00      	ldr	r3, [sp, #0]
 80091c0:	b923      	cbnz	r3, 80091cc <_dtoa_r+0x84>
 80091c2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 80091c6:	2800      	cmp	r0, #0
 80091c8:	f000 8542 	beq.w	8009c50 <_dtoa_r+0xb08>
 80091cc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091ce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800947c <_dtoa_r+0x334>
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	f000 8544 	beq.w	8009c60 <_dtoa_r+0xb18>
 80091d8:	f10b 0303 	add.w	r3, fp, #3
 80091dc:	f000 bd3e 	b.w	8009c5c <_dtoa_r+0xb14>
 80091e0:	e9dd 6700 	ldrd	r6, r7, [sp]
 80091e4:	2200      	movs	r2, #0
 80091e6:	2300      	movs	r3, #0
 80091e8:	4630      	mov	r0, r6
 80091ea:	4639      	mov	r1, r7
 80091ec:	f7f7 fc8c 	bl	8000b08 <__aeabi_dcmpeq>
 80091f0:	4681      	mov	r9, r0
 80091f2:	b168      	cbz	r0, 8009210 <_dtoa_r+0xc8>
 80091f4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80091f6:	2301      	movs	r3, #1
 80091f8:	6013      	str	r3, [r2, #0]
 80091fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	f000 8524 	beq.w	8009c4a <_dtoa_r+0xb02>
 8009202:	4b9a      	ldr	r3, [pc, #616]	; (800946c <_dtoa_r+0x324>)
 8009204:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009206:	f103 3bff 	add.w	fp, r3, #4294967295
 800920a:	6013      	str	r3, [r2, #0]
 800920c:	f000 bd28 	b.w	8009c60 <_dtoa_r+0xb18>
 8009210:	aa14      	add	r2, sp, #80	; 0x50
 8009212:	a915      	add	r1, sp, #84	; 0x54
 8009214:	ec47 6b10 	vmov	d0, r6, r7
 8009218:	4620      	mov	r0, r4
 800921a:	f000 fff4 	bl	800a206 <__d2b>
 800921e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009222:	9004      	str	r0, [sp, #16]
 8009224:	2d00      	cmp	r5, #0
 8009226:	d07c      	beq.n	8009322 <_dtoa_r+0x1da>
 8009228:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800922c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8009230:	46b2      	mov	sl, r6
 8009232:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8009236:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800923a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800923e:	2200      	movs	r2, #0
 8009240:	4b8b      	ldr	r3, [pc, #556]	; (8009470 <_dtoa_r+0x328>)
 8009242:	4650      	mov	r0, sl
 8009244:	4659      	mov	r1, fp
 8009246:	f7f7 f83f 	bl	80002c8 <__aeabi_dsub>
 800924a:	a381      	add	r3, pc, #516	; (adr r3, 8009450 <_dtoa_r+0x308>)
 800924c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009250:	f7f7 f9f2 	bl	8000638 <__aeabi_dmul>
 8009254:	a380      	add	r3, pc, #512	; (adr r3, 8009458 <_dtoa_r+0x310>)
 8009256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800925a:	f7f7 f837 	bl	80002cc <__adddf3>
 800925e:	4606      	mov	r6, r0
 8009260:	4628      	mov	r0, r5
 8009262:	460f      	mov	r7, r1
 8009264:	f7f7 f97e 	bl	8000564 <__aeabi_i2d>
 8009268:	a37d      	add	r3, pc, #500	; (adr r3, 8009460 <_dtoa_r+0x318>)
 800926a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800926e:	f7f7 f9e3 	bl	8000638 <__aeabi_dmul>
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	4630      	mov	r0, r6
 8009278:	4639      	mov	r1, r7
 800927a:	f7f7 f827 	bl	80002cc <__adddf3>
 800927e:	4606      	mov	r6, r0
 8009280:	460f      	mov	r7, r1
 8009282:	f7f7 fc89 	bl	8000b98 <__aeabi_d2iz>
 8009286:	2200      	movs	r2, #0
 8009288:	4682      	mov	sl, r0
 800928a:	2300      	movs	r3, #0
 800928c:	4630      	mov	r0, r6
 800928e:	4639      	mov	r1, r7
 8009290:	f7f7 fc44 	bl	8000b1c <__aeabi_dcmplt>
 8009294:	b148      	cbz	r0, 80092aa <_dtoa_r+0x162>
 8009296:	4650      	mov	r0, sl
 8009298:	f7f7 f964 	bl	8000564 <__aeabi_i2d>
 800929c:	4632      	mov	r2, r6
 800929e:	463b      	mov	r3, r7
 80092a0:	f7f7 fc32 	bl	8000b08 <__aeabi_dcmpeq>
 80092a4:	b908      	cbnz	r0, 80092aa <_dtoa_r+0x162>
 80092a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092aa:	f1ba 0f16 	cmp.w	sl, #22
 80092ae:	d859      	bhi.n	8009364 <_dtoa_r+0x21c>
 80092b0:	4970      	ldr	r1, [pc, #448]	; (8009474 <_dtoa_r+0x32c>)
 80092b2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 80092b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092be:	f7f7 fc4b 	bl	8000b58 <__aeabi_dcmpgt>
 80092c2:	2800      	cmp	r0, #0
 80092c4:	d050      	beq.n	8009368 <_dtoa_r+0x220>
 80092c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092ca:	2300      	movs	r3, #0
 80092cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80092ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80092d0:	1b5d      	subs	r5, r3, r5
 80092d2:	f1b5 0801 	subs.w	r8, r5, #1
 80092d6:	bf49      	itett	mi
 80092d8:	f1c5 0301 	rsbmi	r3, r5, #1
 80092dc:	2300      	movpl	r3, #0
 80092de:	9305      	strmi	r3, [sp, #20]
 80092e0:	f04f 0800 	movmi.w	r8, #0
 80092e4:	bf58      	it	pl
 80092e6:	9305      	strpl	r3, [sp, #20]
 80092e8:	f1ba 0f00 	cmp.w	sl, #0
 80092ec:	db3e      	blt.n	800936c <_dtoa_r+0x224>
 80092ee:	2300      	movs	r3, #0
 80092f0:	44d0      	add	r8, sl
 80092f2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80092f6:	9307      	str	r3, [sp, #28]
 80092f8:	9b06      	ldr	r3, [sp, #24]
 80092fa:	2b09      	cmp	r3, #9
 80092fc:	f200 8090 	bhi.w	8009420 <_dtoa_r+0x2d8>
 8009300:	2b05      	cmp	r3, #5
 8009302:	bfc4      	itt	gt
 8009304:	3b04      	subgt	r3, #4
 8009306:	9306      	strgt	r3, [sp, #24]
 8009308:	9b06      	ldr	r3, [sp, #24]
 800930a:	f1a3 0302 	sub.w	r3, r3, #2
 800930e:	bfcc      	ite	gt
 8009310:	2500      	movgt	r5, #0
 8009312:	2501      	movle	r5, #1
 8009314:	2b03      	cmp	r3, #3
 8009316:	f200 808f 	bhi.w	8009438 <_dtoa_r+0x2f0>
 800931a:	e8df f003 	tbb	[pc, r3]
 800931e:	7f7d      	.short	0x7f7d
 8009320:	7131      	.short	0x7131
 8009322:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8009326:	441d      	add	r5, r3
 8009328:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800932c:	2820      	cmp	r0, #32
 800932e:	dd13      	ble.n	8009358 <_dtoa_r+0x210>
 8009330:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8009334:	9b00      	ldr	r3, [sp, #0]
 8009336:	fa08 f800 	lsl.w	r8, r8, r0
 800933a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800933e:	fa23 f000 	lsr.w	r0, r3, r0
 8009342:	ea48 0000 	orr.w	r0, r8, r0
 8009346:	f7f7 f8fd 	bl	8000544 <__aeabi_ui2d>
 800934a:	2301      	movs	r3, #1
 800934c:	4682      	mov	sl, r0
 800934e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 8009352:	3d01      	subs	r5, #1
 8009354:	9313      	str	r3, [sp, #76]	; 0x4c
 8009356:	e772      	b.n	800923e <_dtoa_r+0xf6>
 8009358:	9b00      	ldr	r3, [sp, #0]
 800935a:	f1c0 0020 	rsb	r0, r0, #32
 800935e:	fa03 f000 	lsl.w	r0, r3, r0
 8009362:	e7f0      	b.n	8009346 <_dtoa_r+0x1fe>
 8009364:	2301      	movs	r3, #1
 8009366:	e7b1      	b.n	80092cc <_dtoa_r+0x184>
 8009368:	900f      	str	r0, [sp, #60]	; 0x3c
 800936a:	e7b0      	b.n	80092ce <_dtoa_r+0x186>
 800936c:	9b05      	ldr	r3, [sp, #20]
 800936e:	eba3 030a 	sub.w	r3, r3, sl
 8009372:	9305      	str	r3, [sp, #20]
 8009374:	f1ca 0300 	rsb	r3, sl, #0
 8009378:	9307      	str	r3, [sp, #28]
 800937a:	2300      	movs	r3, #0
 800937c:	930e      	str	r3, [sp, #56]	; 0x38
 800937e:	e7bb      	b.n	80092f8 <_dtoa_r+0x1b0>
 8009380:	2301      	movs	r3, #1
 8009382:	930a      	str	r3, [sp, #40]	; 0x28
 8009384:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009386:	2b00      	cmp	r3, #0
 8009388:	dd59      	ble.n	800943e <_dtoa_r+0x2f6>
 800938a:	9302      	str	r3, [sp, #8]
 800938c:	4699      	mov	r9, r3
 800938e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009390:	2200      	movs	r2, #0
 8009392:	6072      	str	r2, [r6, #4]
 8009394:	2204      	movs	r2, #4
 8009396:	f102 0014 	add.w	r0, r2, #20
 800939a:	4298      	cmp	r0, r3
 800939c:	6871      	ldr	r1, [r6, #4]
 800939e:	d953      	bls.n	8009448 <_dtoa_r+0x300>
 80093a0:	4620      	mov	r0, r4
 80093a2:	f000 fca4 	bl	8009cee <_Balloc>
 80093a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80093a8:	6030      	str	r0, [r6, #0]
 80093aa:	f1b9 0f0e 	cmp.w	r9, #14
 80093ae:	f8d3 b000 	ldr.w	fp, [r3]
 80093b2:	f200 80e6 	bhi.w	8009582 <_dtoa_r+0x43a>
 80093b6:	2d00      	cmp	r5, #0
 80093b8:	f000 80e3 	beq.w	8009582 <_dtoa_r+0x43a>
 80093bc:	ed9d 7b00 	vldr	d7, [sp]
 80093c0:	f1ba 0f00 	cmp.w	sl, #0
 80093c4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80093c8:	dd74      	ble.n	80094b4 <_dtoa_r+0x36c>
 80093ca:	4a2a      	ldr	r2, [pc, #168]	; (8009474 <_dtoa_r+0x32c>)
 80093cc:	f00a 030f 	and.w	r3, sl, #15
 80093d0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80093d4:	ed93 7b00 	vldr	d7, [r3]
 80093d8:	ea4f 162a 	mov.w	r6, sl, asr #4
 80093dc:	06f0      	lsls	r0, r6, #27
 80093de:	ed8d 7b08 	vstr	d7, [sp, #32]
 80093e2:	d565      	bpl.n	80094b0 <_dtoa_r+0x368>
 80093e4:	4b24      	ldr	r3, [pc, #144]	; (8009478 <_dtoa_r+0x330>)
 80093e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80093ea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80093ee:	f7f7 fa4d 	bl	800088c <__aeabi_ddiv>
 80093f2:	e9cd 0100 	strd	r0, r1, [sp]
 80093f6:	f006 060f 	and.w	r6, r6, #15
 80093fa:	2503      	movs	r5, #3
 80093fc:	4f1e      	ldr	r7, [pc, #120]	; (8009478 <_dtoa_r+0x330>)
 80093fe:	e04c      	b.n	800949a <_dtoa_r+0x352>
 8009400:	2301      	movs	r3, #1
 8009402:	930a      	str	r3, [sp, #40]	; 0x28
 8009404:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009406:	4453      	add	r3, sl
 8009408:	f103 0901 	add.w	r9, r3, #1
 800940c:	9302      	str	r3, [sp, #8]
 800940e:	464b      	mov	r3, r9
 8009410:	2b01      	cmp	r3, #1
 8009412:	bfb8      	it	lt
 8009414:	2301      	movlt	r3, #1
 8009416:	e7ba      	b.n	800938e <_dtoa_r+0x246>
 8009418:	2300      	movs	r3, #0
 800941a:	e7b2      	b.n	8009382 <_dtoa_r+0x23a>
 800941c:	2300      	movs	r3, #0
 800941e:	e7f0      	b.n	8009402 <_dtoa_r+0x2ba>
 8009420:	2501      	movs	r5, #1
 8009422:	2300      	movs	r3, #0
 8009424:	9306      	str	r3, [sp, #24]
 8009426:	950a      	str	r5, [sp, #40]	; 0x28
 8009428:	f04f 33ff 	mov.w	r3, #4294967295
 800942c:	9302      	str	r3, [sp, #8]
 800942e:	4699      	mov	r9, r3
 8009430:	2200      	movs	r2, #0
 8009432:	2312      	movs	r3, #18
 8009434:	920b      	str	r2, [sp, #44]	; 0x2c
 8009436:	e7aa      	b.n	800938e <_dtoa_r+0x246>
 8009438:	2301      	movs	r3, #1
 800943a:	930a      	str	r3, [sp, #40]	; 0x28
 800943c:	e7f4      	b.n	8009428 <_dtoa_r+0x2e0>
 800943e:	2301      	movs	r3, #1
 8009440:	9302      	str	r3, [sp, #8]
 8009442:	4699      	mov	r9, r3
 8009444:	461a      	mov	r2, r3
 8009446:	e7f5      	b.n	8009434 <_dtoa_r+0x2ec>
 8009448:	3101      	adds	r1, #1
 800944a:	6071      	str	r1, [r6, #4]
 800944c:	0052      	lsls	r2, r2, #1
 800944e:	e7a2      	b.n	8009396 <_dtoa_r+0x24e>
 8009450:	636f4361 	.word	0x636f4361
 8009454:	3fd287a7 	.word	0x3fd287a7
 8009458:	8b60c8b3 	.word	0x8b60c8b3
 800945c:	3fc68a28 	.word	0x3fc68a28
 8009460:	509f79fb 	.word	0x509f79fb
 8009464:	3fd34413 	.word	0x3fd34413
 8009468:	7ff00000 	.word	0x7ff00000
 800946c:	0800aef9 	.word	0x0800aef9
 8009470:	3ff80000 	.word	0x3ff80000
 8009474:	0800af58 	.word	0x0800af58
 8009478:	0800af30 	.word	0x0800af30
 800947c:	0800af25 	.word	0x0800af25
 8009480:	07f1      	lsls	r1, r6, #31
 8009482:	d508      	bpl.n	8009496 <_dtoa_r+0x34e>
 8009484:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800948c:	f7f7 f8d4 	bl	8000638 <__aeabi_dmul>
 8009490:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009494:	3501      	adds	r5, #1
 8009496:	1076      	asrs	r6, r6, #1
 8009498:	3708      	adds	r7, #8
 800949a:	2e00      	cmp	r6, #0
 800949c:	d1f0      	bne.n	8009480 <_dtoa_r+0x338>
 800949e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80094a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80094a6:	f7f7 f9f1 	bl	800088c <__aeabi_ddiv>
 80094aa:	e9cd 0100 	strd	r0, r1, [sp]
 80094ae:	e01a      	b.n	80094e6 <_dtoa_r+0x39e>
 80094b0:	2502      	movs	r5, #2
 80094b2:	e7a3      	b.n	80093fc <_dtoa_r+0x2b4>
 80094b4:	f000 80a0 	beq.w	80095f8 <_dtoa_r+0x4b0>
 80094b8:	f1ca 0600 	rsb	r6, sl, #0
 80094bc:	4b9f      	ldr	r3, [pc, #636]	; (800973c <_dtoa_r+0x5f4>)
 80094be:	4fa0      	ldr	r7, [pc, #640]	; (8009740 <_dtoa_r+0x5f8>)
 80094c0:	f006 020f 	and.w	r2, r6, #15
 80094c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80094d0:	f7f7 f8b2 	bl	8000638 <__aeabi_dmul>
 80094d4:	e9cd 0100 	strd	r0, r1, [sp]
 80094d8:	1136      	asrs	r6, r6, #4
 80094da:	2300      	movs	r3, #0
 80094dc:	2502      	movs	r5, #2
 80094de:	2e00      	cmp	r6, #0
 80094e0:	d17f      	bne.n	80095e2 <_dtoa_r+0x49a>
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e1      	bne.n	80094aa <_dtoa_r+0x362>
 80094e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	f000 8087 	beq.w	80095fc <_dtoa_r+0x4b4>
 80094ee:	e9dd 6700 	ldrd	r6, r7, [sp]
 80094f2:	2200      	movs	r2, #0
 80094f4:	4b93      	ldr	r3, [pc, #588]	; (8009744 <_dtoa_r+0x5fc>)
 80094f6:	4630      	mov	r0, r6
 80094f8:	4639      	mov	r1, r7
 80094fa:	f7f7 fb0f 	bl	8000b1c <__aeabi_dcmplt>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d07c      	beq.n	80095fc <_dtoa_r+0x4b4>
 8009502:	f1b9 0f00 	cmp.w	r9, #0
 8009506:	d079      	beq.n	80095fc <_dtoa_r+0x4b4>
 8009508:	9b02      	ldr	r3, [sp, #8]
 800950a:	2b00      	cmp	r3, #0
 800950c:	dd35      	ble.n	800957a <_dtoa_r+0x432>
 800950e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009512:	9308      	str	r3, [sp, #32]
 8009514:	4639      	mov	r1, r7
 8009516:	2200      	movs	r2, #0
 8009518:	4b8b      	ldr	r3, [pc, #556]	; (8009748 <_dtoa_r+0x600>)
 800951a:	4630      	mov	r0, r6
 800951c:	f7f7 f88c 	bl	8000638 <__aeabi_dmul>
 8009520:	e9cd 0100 	strd	r0, r1, [sp]
 8009524:	9f02      	ldr	r7, [sp, #8]
 8009526:	3501      	adds	r5, #1
 8009528:	4628      	mov	r0, r5
 800952a:	f7f7 f81b 	bl	8000564 <__aeabi_i2d>
 800952e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009532:	f7f7 f881 	bl	8000638 <__aeabi_dmul>
 8009536:	2200      	movs	r2, #0
 8009538:	4b84      	ldr	r3, [pc, #528]	; (800974c <_dtoa_r+0x604>)
 800953a:	f7f6 fec7 	bl	80002cc <__adddf3>
 800953e:	4605      	mov	r5, r0
 8009540:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8009544:	2f00      	cmp	r7, #0
 8009546:	d15d      	bne.n	8009604 <_dtoa_r+0x4bc>
 8009548:	2200      	movs	r2, #0
 800954a:	4b81      	ldr	r3, [pc, #516]	; (8009750 <_dtoa_r+0x608>)
 800954c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009550:	f7f6 feba 	bl	80002c8 <__aeabi_dsub>
 8009554:	462a      	mov	r2, r5
 8009556:	4633      	mov	r3, r6
 8009558:	e9cd 0100 	strd	r0, r1, [sp]
 800955c:	f7f7 fafc 	bl	8000b58 <__aeabi_dcmpgt>
 8009560:	2800      	cmp	r0, #0
 8009562:	f040 8288 	bne.w	8009a76 <_dtoa_r+0x92e>
 8009566:	462a      	mov	r2, r5
 8009568:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800956c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009570:	f7f7 fad4 	bl	8000b1c <__aeabi_dcmplt>
 8009574:	2800      	cmp	r0, #0
 8009576:	f040 827c 	bne.w	8009a72 <_dtoa_r+0x92a>
 800957a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800957e:	e9cd 2300 	strd	r2, r3, [sp]
 8009582:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009584:	2b00      	cmp	r3, #0
 8009586:	f2c0 8150 	blt.w	800982a <_dtoa_r+0x6e2>
 800958a:	f1ba 0f0e 	cmp.w	sl, #14
 800958e:	f300 814c 	bgt.w	800982a <_dtoa_r+0x6e2>
 8009592:	4b6a      	ldr	r3, [pc, #424]	; (800973c <_dtoa_r+0x5f4>)
 8009594:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009598:	ed93 7b00 	vldr	d7, [r3]
 800959c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800959e:	2b00      	cmp	r3, #0
 80095a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80095a4:	f280 80d8 	bge.w	8009758 <_dtoa_r+0x610>
 80095a8:	f1b9 0f00 	cmp.w	r9, #0
 80095ac:	f300 80d4 	bgt.w	8009758 <_dtoa_r+0x610>
 80095b0:	f040 825e 	bne.w	8009a70 <_dtoa_r+0x928>
 80095b4:	2200      	movs	r2, #0
 80095b6:	4b66      	ldr	r3, [pc, #408]	; (8009750 <_dtoa_r+0x608>)
 80095b8:	ec51 0b17 	vmov	r0, r1, d7
 80095bc:	f7f7 f83c 	bl	8000638 <__aeabi_dmul>
 80095c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80095c4:	f7f7 fabe 	bl	8000b44 <__aeabi_dcmpge>
 80095c8:	464f      	mov	r7, r9
 80095ca:	464e      	mov	r6, r9
 80095cc:	2800      	cmp	r0, #0
 80095ce:	f040 8234 	bne.w	8009a3a <_dtoa_r+0x8f2>
 80095d2:	2331      	movs	r3, #49	; 0x31
 80095d4:	f10b 0501 	add.w	r5, fp, #1
 80095d8:	f88b 3000 	strb.w	r3, [fp]
 80095dc:	f10a 0a01 	add.w	sl, sl, #1
 80095e0:	e22f      	b.n	8009a42 <_dtoa_r+0x8fa>
 80095e2:	07f2      	lsls	r2, r6, #31
 80095e4:	d505      	bpl.n	80095f2 <_dtoa_r+0x4aa>
 80095e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095ea:	f7f7 f825 	bl	8000638 <__aeabi_dmul>
 80095ee:	3501      	adds	r5, #1
 80095f0:	2301      	movs	r3, #1
 80095f2:	1076      	asrs	r6, r6, #1
 80095f4:	3708      	adds	r7, #8
 80095f6:	e772      	b.n	80094de <_dtoa_r+0x396>
 80095f8:	2502      	movs	r5, #2
 80095fa:	e774      	b.n	80094e6 <_dtoa_r+0x39e>
 80095fc:	f8cd a020 	str.w	sl, [sp, #32]
 8009600:	464f      	mov	r7, r9
 8009602:	e791      	b.n	8009528 <_dtoa_r+0x3e0>
 8009604:	4b4d      	ldr	r3, [pc, #308]	; (800973c <_dtoa_r+0x5f4>)
 8009606:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800960a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800960e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009610:	2b00      	cmp	r3, #0
 8009612:	d047      	beq.n	80096a4 <_dtoa_r+0x55c>
 8009614:	4602      	mov	r2, r0
 8009616:	460b      	mov	r3, r1
 8009618:	2000      	movs	r0, #0
 800961a:	494e      	ldr	r1, [pc, #312]	; (8009754 <_dtoa_r+0x60c>)
 800961c:	f7f7 f936 	bl	800088c <__aeabi_ddiv>
 8009620:	462a      	mov	r2, r5
 8009622:	4633      	mov	r3, r6
 8009624:	f7f6 fe50 	bl	80002c8 <__aeabi_dsub>
 8009628:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800962c:	465d      	mov	r5, fp
 800962e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009632:	f7f7 fab1 	bl	8000b98 <__aeabi_d2iz>
 8009636:	4606      	mov	r6, r0
 8009638:	f7f6 ff94 	bl	8000564 <__aeabi_i2d>
 800963c:	4602      	mov	r2, r0
 800963e:	460b      	mov	r3, r1
 8009640:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009644:	f7f6 fe40 	bl	80002c8 <__aeabi_dsub>
 8009648:	3630      	adds	r6, #48	; 0x30
 800964a:	f805 6b01 	strb.w	r6, [r5], #1
 800964e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009652:	e9cd 0100 	strd	r0, r1, [sp]
 8009656:	f7f7 fa61 	bl	8000b1c <__aeabi_dcmplt>
 800965a:	2800      	cmp	r0, #0
 800965c:	d163      	bne.n	8009726 <_dtoa_r+0x5de>
 800965e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009662:	2000      	movs	r0, #0
 8009664:	4937      	ldr	r1, [pc, #220]	; (8009744 <_dtoa_r+0x5fc>)
 8009666:	f7f6 fe2f 	bl	80002c8 <__aeabi_dsub>
 800966a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800966e:	f7f7 fa55 	bl	8000b1c <__aeabi_dcmplt>
 8009672:	2800      	cmp	r0, #0
 8009674:	f040 80b7 	bne.w	80097e6 <_dtoa_r+0x69e>
 8009678:	eba5 030b 	sub.w	r3, r5, fp
 800967c:	429f      	cmp	r7, r3
 800967e:	f77f af7c 	ble.w	800957a <_dtoa_r+0x432>
 8009682:	2200      	movs	r2, #0
 8009684:	4b30      	ldr	r3, [pc, #192]	; (8009748 <_dtoa_r+0x600>)
 8009686:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800968a:	f7f6 ffd5 	bl	8000638 <__aeabi_dmul>
 800968e:	2200      	movs	r2, #0
 8009690:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009694:	4b2c      	ldr	r3, [pc, #176]	; (8009748 <_dtoa_r+0x600>)
 8009696:	e9dd 0100 	ldrd	r0, r1, [sp]
 800969a:	f7f6 ffcd 	bl	8000638 <__aeabi_dmul>
 800969e:	e9cd 0100 	strd	r0, r1, [sp]
 80096a2:	e7c4      	b.n	800962e <_dtoa_r+0x4e6>
 80096a4:	462a      	mov	r2, r5
 80096a6:	4633      	mov	r3, r6
 80096a8:	f7f6 ffc6 	bl	8000638 <__aeabi_dmul>
 80096ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80096b0:	eb0b 0507 	add.w	r5, fp, r7
 80096b4:	465e      	mov	r6, fp
 80096b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096ba:	f7f7 fa6d 	bl	8000b98 <__aeabi_d2iz>
 80096be:	4607      	mov	r7, r0
 80096c0:	f7f6 ff50 	bl	8000564 <__aeabi_i2d>
 80096c4:	3730      	adds	r7, #48	; 0x30
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096ce:	f7f6 fdfb 	bl	80002c8 <__aeabi_dsub>
 80096d2:	f806 7b01 	strb.w	r7, [r6], #1
 80096d6:	42ae      	cmp	r6, r5
 80096d8:	e9cd 0100 	strd	r0, r1, [sp]
 80096dc:	f04f 0200 	mov.w	r2, #0
 80096e0:	d126      	bne.n	8009730 <_dtoa_r+0x5e8>
 80096e2:	4b1c      	ldr	r3, [pc, #112]	; (8009754 <_dtoa_r+0x60c>)
 80096e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80096e8:	f7f6 fdf0 	bl	80002cc <__adddf3>
 80096ec:	4602      	mov	r2, r0
 80096ee:	460b      	mov	r3, r1
 80096f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096f4:	f7f7 fa30 	bl	8000b58 <__aeabi_dcmpgt>
 80096f8:	2800      	cmp	r0, #0
 80096fa:	d174      	bne.n	80097e6 <_dtoa_r+0x69e>
 80096fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009700:	2000      	movs	r0, #0
 8009702:	4914      	ldr	r1, [pc, #80]	; (8009754 <_dtoa_r+0x60c>)
 8009704:	f7f6 fde0 	bl	80002c8 <__aeabi_dsub>
 8009708:	4602      	mov	r2, r0
 800970a:	460b      	mov	r3, r1
 800970c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009710:	f7f7 fa04 	bl	8000b1c <__aeabi_dcmplt>
 8009714:	2800      	cmp	r0, #0
 8009716:	f43f af30 	beq.w	800957a <_dtoa_r+0x432>
 800971a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800971e:	2b30      	cmp	r3, #48	; 0x30
 8009720:	f105 32ff 	add.w	r2, r5, #4294967295
 8009724:	d002      	beq.n	800972c <_dtoa_r+0x5e4>
 8009726:	f8dd a020 	ldr.w	sl, [sp, #32]
 800972a:	e04a      	b.n	80097c2 <_dtoa_r+0x67a>
 800972c:	4615      	mov	r5, r2
 800972e:	e7f4      	b.n	800971a <_dtoa_r+0x5d2>
 8009730:	4b05      	ldr	r3, [pc, #20]	; (8009748 <_dtoa_r+0x600>)
 8009732:	f7f6 ff81 	bl	8000638 <__aeabi_dmul>
 8009736:	e9cd 0100 	strd	r0, r1, [sp]
 800973a:	e7bc      	b.n	80096b6 <_dtoa_r+0x56e>
 800973c:	0800af58 	.word	0x0800af58
 8009740:	0800af30 	.word	0x0800af30
 8009744:	3ff00000 	.word	0x3ff00000
 8009748:	40240000 	.word	0x40240000
 800974c:	401c0000 	.word	0x401c0000
 8009750:	40140000 	.word	0x40140000
 8009754:	3fe00000 	.word	0x3fe00000
 8009758:	e9dd 6700 	ldrd	r6, r7, [sp]
 800975c:	465d      	mov	r5, fp
 800975e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009762:	4630      	mov	r0, r6
 8009764:	4639      	mov	r1, r7
 8009766:	f7f7 f891 	bl	800088c <__aeabi_ddiv>
 800976a:	f7f7 fa15 	bl	8000b98 <__aeabi_d2iz>
 800976e:	4680      	mov	r8, r0
 8009770:	f7f6 fef8 	bl	8000564 <__aeabi_i2d>
 8009774:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009778:	f7f6 ff5e 	bl	8000638 <__aeabi_dmul>
 800977c:	4602      	mov	r2, r0
 800977e:	460b      	mov	r3, r1
 8009780:	4630      	mov	r0, r6
 8009782:	4639      	mov	r1, r7
 8009784:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009788:	f7f6 fd9e 	bl	80002c8 <__aeabi_dsub>
 800978c:	f805 6b01 	strb.w	r6, [r5], #1
 8009790:	eba5 060b 	sub.w	r6, r5, fp
 8009794:	45b1      	cmp	r9, r6
 8009796:	4602      	mov	r2, r0
 8009798:	460b      	mov	r3, r1
 800979a:	d139      	bne.n	8009810 <_dtoa_r+0x6c8>
 800979c:	f7f6 fd96 	bl	80002cc <__adddf3>
 80097a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097a4:	4606      	mov	r6, r0
 80097a6:	460f      	mov	r7, r1
 80097a8:	f7f7 f9d6 	bl	8000b58 <__aeabi_dcmpgt>
 80097ac:	b9c8      	cbnz	r0, 80097e2 <_dtoa_r+0x69a>
 80097ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097b2:	4630      	mov	r0, r6
 80097b4:	4639      	mov	r1, r7
 80097b6:	f7f7 f9a7 	bl	8000b08 <__aeabi_dcmpeq>
 80097ba:	b110      	cbz	r0, 80097c2 <_dtoa_r+0x67a>
 80097bc:	f018 0f01 	tst.w	r8, #1
 80097c0:	d10f      	bne.n	80097e2 <_dtoa_r+0x69a>
 80097c2:	9904      	ldr	r1, [sp, #16]
 80097c4:	4620      	mov	r0, r4
 80097c6:	f000 fac6 	bl	8009d56 <_Bfree>
 80097ca:	2300      	movs	r3, #0
 80097cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80097ce:	702b      	strb	r3, [r5, #0]
 80097d0:	f10a 0301 	add.w	r3, sl, #1
 80097d4:	6013      	str	r3, [r2, #0]
 80097d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 8241 	beq.w	8009c60 <_dtoa_r+0xb18>
 80097de:	601d      	str	r5, [r3, #0]
 80097e0:	e23e      	b.n	8009c60 <_dtoa_r+0xb18>
 80097e2:	f8cd a020 	str.w	sl, [sp, #32]
 80097e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80097ea:	2a39      	cmp	r2, #57	; 0x39
 80097ec:	f105 33ff 	add.w	r3, r5, #4294967295
 80097f0:	d108      	bne.n	8009804 <_dtoa_r+0x6bc>
 80097f2:	459b      	cmp	fp, r3
 80097f4:	d10a      	bne.n	800980c <_dtoa_r+0x6c4>
 80097f6:	9b08      	ldr	r3, [sp, #32]
 80097f8:	3301      	adds	r3, #1
 80097fa:	9308      	str	r3, [sp, #32]
 80097fc:	2330      	movs	r3, #48	; 0x30
 80097fe:	f88b 3000 	strb.w	r3, [fp]
 8009802:	465b      	mov	r3, fp
 8009804:	781a      	ldrb	r2, [r3, #0]
 8009806:	3201      	adds	r2, #1
 8009808:	701a      	strb	r2, [r3, #0]
 800980a:	e78c      	b.n	8009726 <_dtoa_r+0x5de>
 800980c:	461d      	mov	r5, r3
 800980e:	e7ea      	b.n	80097e6 <_dtoa_r+0x69e>
 8009810:	2200      	movs	r2, #0
 8009812:	4b9b      	ldr	r3, [pc, #620]	; (8009a80 <_dtoa_r+0x938>)
 8009814:	f7f6 ff10 	bl	8000638 <__aeabi_dmul>
 8009818:	2200      	movs	r2, #0
 800981a:	2300      	movs	r3, #0
 800981c:	4606      	mov	r6, r0
 800981e:	460f      	mov	r7, r1
 8009820:	f7f7 f972 	bl	8000b08 <__aeabi_dcmpeq>
 8009824:	2800      	cmp	r0, #0
 8009826:	d09a      	beq.n	800975e <_dtoa_r+0x616>
 8009828:	e7cb      	b.n	80097c2 <_dtoa_r+0x67a>
 800982a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800982c:	2a00      	cmp	r2, #0
 800982e:	f000 808b 	beq.w	8009948 <_dtoa_r+0x800>
 8009832:	9a06      	ldr	r2, [sp, #24]
 8009834:	2a01      	cmp	r2, #1
 8009836:	dc6e      	bgt.n	8009916 <_dtoa_r+0x7ce>
 8009838:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800983a:	2a00      	cmp	r2, #0
 800983c:	d067      	beq.n	800990e <_dtoa_r+0x7c6>
 800983e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009842:	9f07      	ldr	r7, [sp, #28]
 8009844:	9d05      	ldr	r5, [sp, #20]
 8009846:	9a05      	ldr	r2, [sp, #20]
 8009848:	2101      	movs	r1, #1
 800984a:	441a      	add	r2, r3
 800984c:	4620      	mov	r0, r4
 800984e:	9205      	str	r2, [sp, #20]
 8009850:	4498      	add	r8, r3
 8009852:	f000 fb20 	bl	8009e96 <__i2b>
 8009856:	4606      	mov	r6, r0
 8009858:	2d00      	cmp	r5, #0
 800985a:	dd0c      	ble.n	8009876 <_dtoa_r+0x72e>
 800985c:	f1b8 0f00 	cmp.w	r8, #0
 8009860:	dd09      	ble.n	8009876 <_dtoa_r+0x72e>
 8009862:	4545      	cmp	r5, r8
 8009864:	9a05      	ldr	r2, [sp, #20]
 8009866:	462b      	mov	r3, r5
 8009868:	bfa8      	it	ge
 800986a:	4643      	movge	r3, r8
 800986c:	1ad2      	subs	r2, r2, r3
 800986e:	9205      	str	r2, [sp, #20]
 8009870:	1aed      	subs	r5, r5, r3
 8009872:	eba8 0803 	sub.w	r8, r8, r3
 8009876:	9b07      	ldr	r3, [sp, #28]
 8009878:	b1eb      	cbz	r3, 80098b6 <_dtoa_r+0x76e>
 800987a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800987c:	2b00      	cmp	r3, #0
 800987e:	d067      	beq.n	8009950 <_dtoa_r+0x808>
 8009880:	b18f      	cbz	r7, 80098a6 <_dtoa_r+0x75e>
 8009882:	4631      	mov	r1, r6
 8009884:	463a      	mov	r2, r7
 8009886:	4620      	mov	r0, r4
 8009888:	f000 fba4 	bl	8009fd4 <__pow5mult>
 800988c:	9a04      	ldr	r2, [sp, #16]
 800988e:	4601      	mov	r1, r0
 8009890:	4606      	mov	r6, r0
 8009892:	4620      	mov	r0, r4
 8009894:	f000 fb08 	bl	8009ea8 <__multiply>
 8009898:	9904      	ldr	r1, [sp, #16]
 800989a:	9008      	str	r0, [sp, #32]
 800989c:	4620      	mov	r0, r4
 800989e:	f000 fa5a 	bl	8009d56 <_Bfree>
 80098a2:	9b08      	ldr	r3, [sp, #32]
 80098a4:	9304      	str	r3, [sp, #16]
 80098a6:	9b07      	ldr	r3, [sp, #28]
 80098a8:	1bda      	subs	r2, r3, r7
 80098aa:	d004      	beq.n	80098b6 <_dtoa_r+0x76e>
 80098ac:	9904      	ldr	r1, [sp, #16]
 80098ae:	4620      	mov	r0, r4
 80098b0:	f000 fb90 	bl	8009fd4 <__pow5mult>
 80098b4:	9004      	str	r0, [sp, #16]
 80098b6:	2101      	movs	r1, #1
 80098b8:	4620      	mov	r0, r4
 80098ba:	f000 faec 	bl	8009e96 <__i2b>
 80098be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098c0:	4607      	mov	r7, r0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 81d0 	beq.w	8009c68 <_dtoa_r+0xb20>
 80098c8:	461a      	mov	r2, r3
 80098ca:	4601      	mov	r1, r0
 80098cc:	4620      	mov	r0, r4
 80098ce:	f000 fb81 	bl	8009fd4 <__pow5mult>
 80098d2:	9b06      	ldr	r3, [sp, #24]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	4607      	mov	r7, r0
 80098d8:	dc40      	bgt.n	800995c <_dtoa_r+0x814>
 80098da:	9b00      	ldr	r3, [sp, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d139      	bne.n	8009954 <_dtoa_r+0x80c>
 80098e0:	9b01      	ldr	r3, [sp, #4]
 80098e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d136      	bne.n	8009958 <_dtoa_r+0x810>
 80098ea:	9b01      	ldr	r3, [sp, #4]
 80098ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098f0:	0d1b      	lsrs	r3, r3, #20
 80098f2:	051b      	lsls	r3, r3, #20
 80098f4:	b12b      	cbz	r3, 8009902 <_dtoa_r+0x7ba>
 80098f6:	9b05      	ldr	r3, [sp, #20]
 80098f8:	3301      	adds	r3, #1
 80098fa:	9305      	str	r3, [sp, #20]
 80098fc:	f108 0801 	add.w	r8, r8, #1
 8009900:	2301      	movs	r3, #1
 8009902:	9307      	str	r3, [sp, #28]
 8009904:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009906:	2b00      	cmp	r3, #0
 8009908:	d12a      	bne.n	8009960 <_dtoa_r+0x818>
 800990a:	2001      	movs	r0, #1
 800990c:	e030      	b.n	8009970 <_dtoa_r+0x828>
 800990e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009910:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009914:	e795      	b.n	8009842 <_dtoa_r+0x6fa>
 8009916:	9b07      	ldr	r3, [sp, #28]
 8009918:	f109 37ff 	add.w	r7, r9, #4294967295
 800991c:	42bb      	cmp	r3, r7
 800991e:	bfbf      	itttt	lt
 8009920:	9b07      	ldrlt	r3, [sp, #28]
 8009922:	9707      	strlt	r7, [sp, #28]
 8009924:	1afa      	sublt	r2, r7, r3
 8009926:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009928:	bfbb      	ittet	lt
 800992a:	189b      	addlt	r3, r3, r2
 800992c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800992e:	1bdf      	subge	r7, r3, r7
 8009930:	2700      	movlt	r7, #0
 8009932:	f1b9 0f00 	cmp.w	r9, #0
 8009936:	bfb5      	itete	lt
 8009938:	9b05      	ldrlt	r3, [sp, #20]
 800993a:	9d05      	ldrge	r5, [sp, #20]
 800993c:	eba3 0509 	sublt.w	r5, r3, r9
 8009940:	464b      	movge	r3, r9
 8009942:	bfb8      	it	lt
 8009944:	2300      	movlt	r3, #0
 8009946:	e77e      	b.n	8009846 <_dtoa_r+0x6fe>
 8009948:	9f07      	ldr	r7, [sp, #28]
 800994a:	9d05      	ldr	r5, [sp, #20]
 800994c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800994e:	e783      	b.n	8009858 <_dtoa_r+0x710>
 8009950:	9a07      	ldr	r2, [sp, #28]
 8009952:	e7ab      	b.n	80098ac <_dtoa_r+0x764>
 8009954:	2300      	movs	r3, #0
 8009956:	e7d4      	b.n	8009902 <_dtoa_r+0x7ba>
 8009958:	9b00      	ldr	r3, [sp, #0]
 800995a:	e7d2      	b.n	8009902 <_dtoa_r+0x7ba>
 800995c:	2300      	movs	r3, #0
 800995e:	9307      	str	r3, [sp, #28]
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009966:	6918      	ldr	r0, [r3, #16]
 8009968:	f000 fa47 	bl	8009dfa <__hi0bits>
 800996c:	f1c0 0020 	rsb	r0, r0, #32
 8009970:	4440      	add	r0, r8
 8009972:	f010 001f 	ands.w	r0, r0, #31
 8009976:	d047      	beq.n	8009a08 <_dtoa_r+0x8c0>
 8009978:	f1c0 0320 	rsb	r3, r0, #32
 800997c:	2b04      	cmp	r3, #4
 800997e:	dd3b      	ble.n	80099f8 <_dtoa_r+0x8b0>
 8009980:	9b05      	ldr	r3, [sp, #20]
 8009982:	f1c0 001c 	rsb	r0, r0, #28
 8009986:	4403      	add	r3, r0
 8009988:	9305      	str	r3, [sp, #20]
 800998a:	4405      	add	r5, r0
 800998c:	4480      	add	r8, r0
 800998e:	9b05      	ldr	r3, [sp, #20]
 8009990:	2b00      	cmp	r3, #0
 8009992:	dd05      	ble.n	80099a0 <_dtoa_r+0x858>
 8009994:	461a      	mov	r2, r3
 8009996:	9904      	ldr	r1, [sp, #16]
 8009998:	4620      	mov	r0, r4
 800999a:	f000 fb69 	bl	800a070 <__lshift>
 800999e:	9004      	str	r0, [sp, #16]
 80099a0:	f1b8 0f00 	cmp.w	r8, #0
 80099a4:	dd05      	ble.n	80099b2 <_dtoa_r+0x86a>
 80099a6:	4639      	mov	r1, r7
 80099a8:	4642      	mov	r2, r8
 80099aa:	4620      	mov	r0, r4
 80099ac:	f000 fb60 	bl	800a070 <__lshift>
 80099b0:	4607      	mov	r7, r0
 80099b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099b4:	b353      	cbz	r3, 8009a0c <_dtoa_r+0x8c4>
 80099b6:	4639      	mov	r1, r7
 80099b8:	9804      	ldr	r0, [sp, #16]
 80099ba:	f000 fbad 	bl	800a118 <__mcmp>
 80099be:	2800      	cmp	r0, #0
 80099c0:	da24      	bge.n	8009a0c <_dtoa_r+0x8c4>
 80099c2:	2300      	movs	r3, #0
 80099c4:	220a      	movs	r2, #10
 80099c6:	9904      	ldr	r1, [sp, #16]
 80099c8:	4620      	mov	r0, r4
 80099ca:	f000 f9db 	bl	8009d84 <__multadd>
 80099ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80099d0:	9004      	str	r0, [sp, #16]
 80099d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 814d 	beq.w	8009c76 <_dtoa_r+0xb2e>
 80099dc:	2300      	movs	r3, #0
 80099de:	4631      	mov	r1, r6
 80099e0:	220a      	movs	r2, #10
 80099e2:	4620      	mov	r0, r4
 80099e4:	f000 f9ce 	bl	8009d84 <__multadd>
 80099e8:	9b02      	ldr	r3, [sp, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	4606      	mov	r6, r0
 80099ee:	dc4f      	bgt.n	8009a90 <_dtoa_r+0x948>
 80099f0:	9b06      	ldr	r3, [sp, #24]
 80099f2:	2b02      	cmp	r3, #2
 80099f4:	dd4c      	ble.n	8009a90 <_dtoa_r+0x948>
 80099f6:	e011      	b.n	8009a1c <_dtoa_r+0x8d4>
 80099f8:	d0c9      	beq.n	800998e <_dtoa_r+0x846>
 80099fa:	9a05      	ldr	r2, [sp, #20]
 80099fc:	331c      	adds	r3, #28
 80099fe:	441a      	add	r2, r3
 8009a00:	9205      	str	r2, [sp, #20]
 8009a02:	441d      	add	r5, r3
 8009a04:	4498      	add	r8, r3
 8009a06:	e7c2      	b.n	800998e <_dtoa_r+0x846>
 8009a08:	4603      	mov	r3, r0
 8009a0a:	e7f6      	b.n	80099fa <_dtoa_r+0x8b2>
 8009a0c:	f1b9 0f00 	cmp.w	r9, #0
 8009a10:	dc38      	bgt.n	8009a84 <_dtoa_r+0x93c>
 8009a12:	9b06      	ldr	r3, [sp, #24]
 8009a14:	2b02      	cmp	r3, #2
 8009a16:	dd35      	ble.n	8009a84 <_dtoa_r+0x93c>
 8009a18:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a1c:	9b02      	ldr	r3, [sp, #8]
 8009a1e:	b963      	cbnz	r3, 8009a3a <_dtoa_r+0x8f2>
 8009a20:	4639      	mov	r1, r7
 8009a22:	2205      	movs	r2, #5
 8009a24:	4620      	mov	r0, r4
 8009a26:	f000 f9ad 	bl	8009d84 <__multadd>
 8009a2a:	4601      	mov	r1, r0
 8009a2c:	4607      	mov	r7, r0
 8009a2e:	9804      	ldr	r0, [sp, #16]
 8009a30:	f000 fb72 	bl	800a118 <__mcmp>
 8009a34:	2800      	cmp	r0, #0
 8009a36:	f73f adcc 	bgt.w	80095d2 <_dtoa_r+0x48a>
 8009a3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a3c:	465d      	mov	r5, fp
 8009a3e:	ea6f 0a03 	mvn.w	sl, r3
 8009a42:	f04f 0900 	mov.w	r9, #0
 8009a46:	4639      	mov	r1, r7
 8009a48:	4620      	mov	r0, r4
 8009a4a:	f000 f984 	bl	8009d56 <_Bfree>
 8009a4e:	2e00      	cmp	r6, #0
 8009a50:	f43f aeb7 	beq.w	80097c2 <_dtoa_r+0x67a>
 8009a54:	f1b9 0f00 	cmp.w	r9, #0
 8009a58:	d005      	beq.n	8009a66 <_dtoa_r+0x91e>
 8009a5a:	45b1      	cmp	r9, r6
 8009a5c:	d003      	beq.n	8009a66 <_dtoa_r+0x91e>
 8009a5e:	4649      	mov	r1, r9
 8009a60:	4620      	mov	r0, r4
 8009a62:	f000 f978 	bl	8009d56 <_Bfree>
 8009a66:	4631      	mov	r1, r6
 8009a68:	4620      	mov	r0, r4
 8009a6a:	f000 f974 	bl	8009d56 <_Bfree>
 8009a6e:	e6a8      	b.n	80097c2 <_dtoa_r+0x67a>
 8009a70:	2700      	movs	r7, #0
 8009a72:	463e      	mov	r6, r7
 8009a74:	e7e1      	b.n	8009a3a <_dtoa_r+0x8f2>
 8009a76:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009a7a:	463e      	mov	r6, r7
 8009a7c:	e5a9      	b.n	80095d2 <_dtoa_r+0x48a>
 8009a7e:	bf00      	nop
 8009a80:	40240000 	.word	0x40240000
 8009a84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a86:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f000 80fa 	beq.w	8009c84 <_dtoa_r+0xb3c>
 8009a90:	2d00      	cmp	r5, #0
 8009a92:	dd05      	ble.n	8009aa0 <_dtoa_r+0x958>
 8009a94:	4631      	mov	r1, r6
 8009a96:	462a      	mov	r2, r5
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f000 fae9 	bl	800a070 <__lshift>
 8009a9e:	4606      	mov	r6, r0
 8009aa0:	9b07      	ldr	r3, [sp, #28]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d04c      	beq.n	8009b40 <_dtoa_r+0x9f8>
 8009aa6:	6871      	ldr	r1, [r6, #4]
 8009aa8:	4620      	mov	r0, r4
 8009aaa:	f000 f920 	bl	8009cee <_Balloc>
 8009aae:	6932      	ldr	r2, [r6, #16]
 8009ab0:	3202      	adds	r2, #2
 8009ab2:	4605      	mov	r5, r0
 8009ab4:	0092      	lsls	r2, r2, #2
 8009ab6:	f106 010c 	add.w	r1, r6, #12
 8009aba:	300c      	adds	r0, #12
 8009abc:	f000 f90a 	bl	8009cd4 <memcpy>
 8009ac0:	2201      	movs	r2, #1
 8009ac2:	4629      	mov	r1, r5
 8009ac4:	4620      	mov	r0, r4
 8009ac6:	f000 fad3 	bl	800a070 <__lshift>
 8009aca:	9b00      	ldr	r3, [sp, #0]
 8009acc:	f8cd b014 	str.w	fp, [sp, #20]
 8009ad0:	f003 0301 	and.w	r3, r3, #1
 8009ad4:	46b1      	mov	r9, r6
 8009ad6:	9307      	str	r3, [sp, #28]
 8009ad8:	4606      	mov	r6, r0
 8009ada:	4639      	mov	r1, r7
 8009adc:	9804      	ldr	r0, [sp, #16]
 8009ade:	f7ff faa7 	bl	8009030 <quorem>
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009aea:	9804      	ldr	r0, [sp, #16]
 8009aec:	f000 fb14 	bl	800a118 <__mcmp>
 8009af0:	4632      	mov	r2, r6
 8009af2:	9000      	str	r0, [sp, #0]
 8009af4:	4639      	mov	r1, r7
 8009af6:	4620      	mov	r0, r4
 8009af8:	f000 fb28 	bl	800a14c <__mdiff>
 8009afc:	68c3      	ldr	r3, [r0, #12]
 8009afe:	4602      	mov	r2, r0
 8009b00:	bb03      	cbnz	r3, 8009b44 <_dtoa_r+0x9fc>
 8009b02:	4601      	mov	r1, r0
 8009b04:	9008      	str	r0, [sp, #32]
 8009b06:	9804      	ldr	r0, [sp, #16]
 8009b08:	f000 fb06 	bl	800a118 <__mcmp>
 8009b0c:	9a08      	ldr	r2, [sp, #32]
 8009b0e:	4603      	mov	r3, r0
 8009b10:	4611      	mov	r1, r2
 8009b12:	4620      	mov	r0, r4
 8009b14:	9308      	str	r3, [sp, #32]
 8009b16:	f000 f91e 	bl	8009d56 <_Bfree>
 8009b1a:	9b08      	ldr	r3, [sp, #32]
 8009b1c:	b9a3      	cbnz	r3, 8009b48 <_dtoa_r+0xa00>
 8009b1e:	9a06      	ldr	r2, [sp, #24]
 8009b20:	b992      	cbnz	r2, 8009b48 <_dtoa_r+0xa00>
 8009b22:	9a07      	ldr	r2, [sp, #28]
 8009b24:	b982      	cbnz	r2, 8009b48 <_dtoa_r+0xa00>
 8009b26:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009b2a:	d029      	beq.n	8009b80 <_dtoa_r+0xa38>
 8009b2c:	9b00      	ldr	r3, [sp, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	dd01      	ble.n	8009b36 <_dtoa_r+0x9ee>
 8009b32:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009b36:	9b05      	ldr	r3, [sp, #20]
 8009b38:	1c5d      	adds	r5, r3, #1
 8009b3a:	f883 8000 	strb.w	r8, [r3]
 8009b3e:	e782      	b.n	8009a46 <_dtoa_r+0x8fe>
 8009b40:	4630      	mov	r0, r6
 8009b42:	e7c2      	b.n	8009aca <_dtoa_r+0x982>
 8009b44:	2301      	movs	r3, #1
 8009b46:	e7e3      	b.n	8009b10 <_dtoa_r+0x9c8>
 8009b48:	9a00      	ldr	r2, [sp, #0]
 8009b4a:	2a00      	cmp	r2, #0
 8009b4c:	db04      	blt.n	8009b58 <_dtoa_r+0xa10>
 8009b4e:	d125      	bne.n	8009b9c <_dtoa_r+0xa54>
 8009b50:	9a06      	ldr	r2, [sp, #24]
 8009b52:	bb1a      	cbnz	r2, 8009b9c <_dtoa_r+0xa54>
 8009b54:	9a07      	ldr	r2, [sp, #28]
 8009b56:	bb0a      	cbnz	r2, 8009b9c <_dtoa_r+0xa54>
 8009b58:	2b00      	cmp	r3, #0
 8009b5a:	ddec      	ble.n	8009b36 <_dtoa_r+0x9ee>
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	9904      	ldr	r1, [sp, #16]
 8009b60:	4620      	mov	r0, r4
 8009b62:	f000 fa85 	bl	800a070 <__lshift>
 8009b66:	4639      	mov	r1, r7
 8009b68:	9004      	str	r0, [sp, #16]
 8009b6a:	f000 fad5 	bl	800a118 <__mcmp>
 8009b6e:	2800      	cmp	r0, #0
 8009b70:	dc03      	bgt.n	8009b7a <_dtoa_r+0xa32>
 8009b72:	d1e0      	bne.n	8009b36 <_dtoa_r+0x9ee>
 8009b74:	f018 0f01 	tst.w	r8, #1
 8009b78:	d0dd      	beq.n	8009b36 <_dtoa_r+0x9ee>
 8009b7a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009b7e:	d1d8      	bne.n	8009b32 <_dtoa_r+0x9ea>
 8009b80:	9b05      	ldr	r3, [sp, #20]
 8009b82:	9a05      	ldr	r2, [sp, #20]
 8009b84:	1c5d      	adds	r5, r3, #1
 8009b86:	2339      	movs	r3, #57	; 0x39
 8009b88:	7013      	strb	r3, [r2, #0]
 8009b8a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b8e:	2b39      	cmp	r3, #57	; 0x39
 8009b90:	f105 32ff 	add.w	r2, r5, #4294967295
 8009b94:	d04f      	beq.n	8009c36 <_dtoa_r+0xaee>
 8009b96:	3301      	adds	r3, #1
 8009b98:	7013      	strb	r3, [r2, #0]
 8009b9a:	e754      	b.n	8009a46 <_dtoa_r+0x8fe>
 8009b9c:	9a05      	ldr	r2, [sp, #20]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	f102 0501 	add.w	r5, r2, #1
 8009ba4:	dd06      	ble.n	8009bb4 <_dtoa_r+0xa6c>
 8009ba6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009baa:	d0e9      	beq.n	8009b80 <_dtoa_r+0xa38>
 8009bac:	f108 0801 	add.w	r8, r8, #1
 8009bb0:	9b05      	ldr	r3, [sp, #20]
 8009bb2:	e7c2      	b.n	8009b3a <_dtoa_r+0x9f2>
 8009bb4:	9a02      	ldr	r2, [sp, #8]
 8009bb6:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009bba:	eba5 030b 	sub.w	r3, r5, fp
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d021      	beq.n	8009c06 <_dtoa_r+0xabe>
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	220a      	movs	r2, #10
 8009bc6:	9904      	ldr	r1, [sp, #16]
 8009bc8:	4620      	mov	r0, r4
 8009bca:	f000 f8db 	bl	8009d84 <__multadd>
 8009bce:	45b1      	cmp	r9, r6
 8009bd0:	9004      	str	r0, [sp, #16]
 8009bd2:	f04f 0300 	mov.w	r3, #0
 8009bd6:	f04f 020a 	mov.w	r2, #10
 8009bda:	4649      	mov	r1, r9
 8009bdc:	4620      	mov	r0, r4
 8009bde:	d105      	bne.n	8009bec <_dtoa_r+0xaa4>
 8009be0:	f000 f8d0 	bl	8009d84 <__multadd>
 8009be4:	4681      	mov	r9, r0
 8009be6:	4606      	mov	r6, r0
 8009be8:	9505      	str	r5, [sp, #20]
 8009bea:	e776      	b.n	8009ada <_dtoa_r+0x992>
 8009bec:	f000 f8ca 	bl	8009d84 <__multadd>
 8009bf0:	4631      	mov	r1, r6
 8009bf2:	4681      	mov	r9, r0
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	220a      	movs	r2, #10
 8009bf8:	4620      	mov	r0, r4
 8009bfa:	f000 f8c3 	bl	8009d84 <__multadd>
 8009bfe:	4606      	mov	r6, r0
 8009c00:	e7f2      	b.n	8009be8 <_dtoa_r+0xaa0>
 8009c02:	f04f 0900 	mov.w	r9, #0
 8009c06:	2201      	movs	r2, #1
 8009c08:	9904      	ldr	r1, [sp, #16]
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 fa30 	bl	800a070 <__lshift>
 8009c10:	4639      	mov	r1, r7
 8009c12:	9004      	str	r0, [sp, #16]
 8009c14:	f000 fa80 	bl	800a118 <__mcmp>
 8009c18:	2800      	cmp	r0, #0
 8009c1a:	dcb6      	bgt.n	8009b8a <_dtoa_r+0xa42>
 8009c1c:	d102      	bne.n	8009c24 <_dtoa_r+0xadc>
 8009c1e:	f018 0f01 	tst.w	r8, #1
 8009c22:	d1b2      	bne.n	8009b8a <_dtoa_r+0xa42>
 8009c24:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c28:	2b30      	cmp	r3, #48	; 0x30
 8009c2a:	f105 32ff 	add.w	r2, r5, #4294967295
 8009c2e:	f47f af0a 	bne.w	8009a46 <_dtoa_r+0x8fe>
 8009c32:	4615      	mov	r5, r2
 8009c34:	e7f6      	b.n	8009c24 <_dtoa_r+0xadc>
 8009c36:	4593      	cmp	fp, r2
 8009c38:	d105      	bne.n	8009c46 <_dtoa_r+0xafe>
 8009c3a:	2331      	movs	r3, #49	; 0x31
 8009c3c:	f10a 0a01 	add.w	sl, sl, #1
 8009c40:	f88b 3000 	strb.w	r3, [fp]
 8009c44:	e6ff      	b.n	8009a46 <_dtoa_r+0x8fe>
 8009c46:	4615      	mov	r5, r2
 8009c48:	e79f      	b.n	8009b8a <_dtoa_r+0xa42>
 8009c4a:	f8df b064 	ldr.w	fp, [pc, #100]	; 8009cb0 <_dtoa_r+0xb68>
 8009c4e:	e007      	b.n	8009c60 <_dtoa_r+0xb18>
 8009c50:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c52:	f8df b060 	ldr.w	fp, [pc, #96]	; 8009cb4 <_dtoa_r+0xb6c>
 8009c56:	b11b      	cbz	r3, 8009c60 <_dtoa_r+0xb18>
 8009c58:	f10b 0308 	add.w	r3, fp, #8
 8009c5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009c5e:	6013      	str	r3, [r2, #0]
 8009c60:	4658      	mov	r0, fp
 8009c62:	b017      	add	sp, #92	; 0x5c
 8009c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c68:	9b06      	ldr	r3, [sp, #24]
 8009c6a:	2b01      	cmp	r3, #1
 8009c6c:	f77f ae35 	ble.w	80098da <_dtoa_r+0x792>
 8009c70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c72:	9307      	str	r3, [sp, #28]
 8009c74:	e649      	b.n	800990a <_dtoa_r+0x7c2>
 8009c76:	9b02      	ldr	r3, [sp, #8]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	dc03      	bgt.n	8009c84 <_dtoa_r+0xb3c>
 8009c7c:	9b06      	ldr	r3, [sp, #24]
 8009c7e:	2b02      	cmp	r3, #2
 8009c80:	f73f aecc 	bgt.w	8009a1c <_dtoa_r+0x8d4>
 8009c84:	465d      	mov	r5, fp
 8009c86:	4639      	mov	r1, r7
 8009c88:	9804      	ldr	r0, [sp, #16]
 8009c8a:	f7ff f9d1 	bl	8009030 <quorem>
 8009c8e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009c92:	f805 8b01 	strb.w	r8, [r5], #1
 8009c96:	9a02      	ldr	r2, [sp, #8]
 8009c98:	eba5 030b 	sub.w	r3, r5, fp
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	ddb0      	ble.n	8009c02 <_dtoa_r+0xaba>
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	220a      	movs	r2, #10
 8009ca4:	9904      	ldr	r1, [sp, #16]
 8009ca6:	4620      	mov	r0, r4
 8009ca8:	f000 f86c 	bl	8009d84 <__multadd>
 8009cac:	9004      	str	r0, [sp, #16]
 8009cae:	e7ea      	b.n	8009c86 <_dtoa_r+0xb3e>
 8009cb0:	0800aef8 	.word	0x0800aef8
 8009cb4:	0800af1c 	.word	0x0800af1c

08009cb8 <_localeconv_r>:
 8009cb8:	4b04      	ldr	r3, [pc, #16]	; (8009ccc <_localeconv_r+0x14>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	6a18      	ldr	r0, [r3, #32]
 8009cbe:	4b04      	ldr	r3, [pc, #16]	; (8009cd0 <_localeconv_r+0x18>)
 8009cc0:	2800      	cmp	r0, #0
 8009cc2:	bf08      	it	eq
 8009cc4:	4618      	moveq	r0, r3
 8009cc6:	30f0      	adds	r0, #240	; 0xf0
 8009cc8:	4770      	bx	lr
 8009cca:	bf00      	nop
 8009ccc:	2000000c 	.word	0x2000000c
 8009cd0:	20000070 	.word	0x20000070

08009cd4 <memcpy>:
 8009cd4:	b510      	push	{r4, lr}
 8009cd6:	1e43      	subs	r3, r0, #1
 8009cd8:	440a      	add	r2, r1
 8009cda:	4291      	cmp	r1, r2
 8009cdc:	d100      	bne.n	8009ce0 <memcpy+0xc>
 8009cde:	bd10      	pop	{r4, pc}
 8009ce0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009ce4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009ce8:	e7f7      	b.n	8009cda <memcpy+0x6>

08009cea <__malloc_lock>:
 8009cea:	4770      	bx	lr

08009cec <__malloc_unlock>:
 8009cec:	4770      	bx	lr

08009cee <_Balloc>:
 8009cee:	b570      	push	{r4, r5, r6, lr}
 8009cf0:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009cf2:	4604      	mov	r4, r0
 8009cf4:	460e      	mov	r6, r1
 8009cf6:	b93d      	cbnz	r5, 8009d08 <_Balloc+0x1a>
 8009cf8:	2010      	movs	r0, #16
 8009cfa:	f7fe fc4d 	bl	8008598 <malloc>
 8009cfe:	6260      	str	r0, [r4, #36]	; 0x24
 8009d00:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009d04:	6005      	str	r5, [r0, #0]
 8009d06:	60c5      	str	r5, [r0, #12]
 8009d08:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009d0a:	68eb      	ldr	r3, [r5, #12]
 8009d0c:	b183      	cbz	r3, 8009d30 <_Balloc+0x42>
 8009d0e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d10:	68db      	ldr	r3, [r3, #12]
 8009d12:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009d16:	b9b8      	cbnz	r0, 8009d48 <_Balloc+0x5a>
 8009d18:	2101      	movs	r1, #1
 8009d1a:	fa01 f506 	lsl.w	r5, r1, r6
 8009d1e:	1d6a      	adds	r2, r5, #5
 8009d20:	0092      	lsls	r2, r2, #2
 8009d22:	4620      	mov	r0, r4
 8009d24:	f000 fabe 	bl	800a2a4 <_calloc_r>
 8009d28:	b160      	cbz	r0, 8009d44 <_Balloc+0x56>
 8009d2a:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009d2e:	e00e      	b.n	8009d4e <_Balloc+0x60>
 8009d30:	2221      	movs	r2, #33	; 0x21
 8009d32:	2104      	movs	r1, #4
 8009d34:	4620      	mov	r0, r4
 8009d36:	f000 fab5 	bl	800a2a4 <_calloc_r>
 8009d3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d3c:	60e8      	str	r0, [r5, #12]
 8009d3e:	68db      	ldr	r3, [r3, #12]
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1e4      	bne.n	8009d0e <_Balloc+0x20>
 8009d44:	2000      	movs	r0, #0
 8009d46:	bd70      	pop	{r4, r5, r6, pc}
 8009d48:	6802      	ldr	r2, [r0, #0]
 8009d4a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009d4e:	2300      	movs	r3, #0
 8009d50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009d54:	e7f7      	b.n	8009d46 <_Balloc+0x58>

08009d56 <_Bfree>:
 8009d56:	b570      	push	{r4, r5, r6, lr}
 8009d58:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009d5a:	4606      	mov	r6, r0
 8009d5c:	460d      	mov	r5, r1
 8009d5e:	b93c      	cbnz	r4, 8009d70 <_Bfree+0x1a>
 8009d60:	2010      	movs	r0, #16
 8009d62:	f7fe fc19 	bl	8008598 <malloc>
 8009d66:	6270      	str	r0, [r6, #36]	; 0x24
 8009d68:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d6c:	6004      	str	r4, [r0, #0]
 8009d6e:	60c4      	str	r4, [r0, #12]
 8009d70:	b13d      	cbz	r5, 8009d82 <_Bfree+0x2c>
 8009d72:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8009d74:	686a      	ldr	r2, [r5, #4]
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009d7c:	6029      	str	r1, [r5, #0]
 8009d7e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009d82:	bd70      	pop	{r4, r5, r6, pc}

08009d84 <__multadd>:
 8009d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d88:	690d      	ldr	r5, [r1, #16]
 8009d8a:	461f      	mov	r7, r3
 8009d8c:	4606      	mov	r6, r0
 8009d8e:	460c      	mov	r4, r1
 8009d90:	f101 0c14 	add.w	ip, r1, #20
 8009d94:	2300      	movs	r3, #0
 8009d96:	f8dc 0000 	ldr.w	r0, [ip]
 8009d9a:	b281      	uxth	r1, r0
 8009d9c:	fb02 7101 	mla	r1, r2, r1, r7
 8009da0:	0c0f      	lsrs	r7, r1, #16
 8009da2:	0c00      	lsrs	r0, r0, #16
 8009da4:	fb02 7000 	mla	r0, r2, r0, r7
 8009da8:	b289      	uxth	r1, r1
 8009daa:	3301      	adds	r3, #1
 8009dac:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8009db0:	429d      	cmp	r5, r3
 8009db2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009db6:	f84c 1b04 	str.w	r1, [ip], #4
 8009dba:	dcec      	bgt.n	8009d96 <__multadd+0x12>
 8009dbc:	b1d7      	cbz	r7, 8009df4 <__multadd+0x70>
 8009dbe:	68a3      	ldr	r3, [r4, #8]
 8009dc0:	42ab      	cmp	r3, r5
 8009dc2:	dc12      	bgt.n	8009dea <__multadd+0x66>
 8009dc4:	6861      	ldr	r1, [r4, #4]
 8009dc6:	4630      	mov	r0, r6
 8009dc8:	3101      	adds	r1, #1
 8009dca:	f7ff ff90 	bl	8009cee <_Balloc>
 8009dce:	6922      	ldr	r2, [r4, #16]
 8009dd0:	3202      	adds	r2, #2
 8009dd2:	f104 010c 	add.w	r1, r4, #12
 8009dd6:	4680      	mov	r8, r0
 8009dd8:	0092      	lsls	r2, r2, #2
 8009dda:	300c      	adds	r0, #12
 8009ddc:	f7ff ff7a 	bl	8009cd4 <memcpy>
 8009de0:	4621      	mov	r1, r4
 8009de2:	4630      	mov	r0, r6
 8009de4:	f7ff ffb7 	bl	8009d56 <_Bfree>
 8009de8:	4644      	mov	r4, r8
 8009dea:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009dee:	3501      	adds	r5, #1
 8009df0:	615f      	str	r7, [r3, #20]
 8009df2:	6125      	str	r5, [r4, #16]
 8009df4:	4620      	mov	r0, r4
 8009df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009dfa <__hi0bits>:
 8009dfa:	0c02      	lsrs	r2, r0, #16
 8009dfc:	0412      	lsls	r2, r2, #16
 8009dfe:	4603      	mov	r3, r0
 8009e00:	b9b2      	cbnz	r2, 8009e30 <__hi0bits+0x36>
 8009e02:	0403      	lsls	r3, r0, #16
 8009e04:	2010      	movs	r0, #16
 8009e06:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009e0a:	bf04      	itt	eq
 8009e0c:	021b      	lsleq	r3, r3, #8
 8009e0e:	3008      	addeq	r0, #8
 8009e10:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009e14:	bf04      	itt	eq
 8009e16:	011b      	lsleq	r3, r3, #4
 8009e18:	3004      	addeq	r0, #4
 8009e1a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009e1e:	bf04      	itt	eq
 8009e20:	009b      	lsleq	r3, r3, #2
 8009e22:	3002      	addeq	r0, #2
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	db06      	blt.n	8009e36 <__hi0bits+0x3c>
 8009e28:	005b      	lsls	r3, r3, #1
 8009e2a:	d503      	bpl.n	8009e34 <__hi0bits+0x3a>
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	4770      	bx	lr
 8009e30:	2000      	movs	r0, #0
 8009e32:	e7e8      	b.n	8009e06 <__hi0bits+0xc>
 8009e34:	2020      	movs	r0, #32
 8009e36:	4770      	bx	lr

08009e38 <__lo0bits>:
 8009e38:	6803      	ldr	r3, [r0, #0]
 8009e3a:	f013 0207 	ands.w	r2, r3, #7
 8009e3e:	4601      	mov	r1, r0
 8009e40:	d00b      	beq.n	8009e5a <__lo0bits+0x22>
 8009e42:	07da      	lsls	r2, r3, #31
 8009e44:	d423      	bmi.n	8009e8e <__lo0bits+0x56>
 8009e46:	0798      	lsls	r0, r3, #30
 8009e48:	bf49      	itett	mi
 8009e4a:	085b      	lsrmi	r3, r3, #1
 8009e4c:	089b      	lsrpl	r3, r3, #2
 8009e4e:	2001      	movmi	r0, #1
 8009e50:	600b      	strmi	r3, [r1, #0]
 8009e52:	bf5c      	itt	pl
 8009e54:	600b      	strpl	r3, [r1, #0]
 8009e56:	2002      	movpl	r0, #2
 8009e58:	4770      	bx	lr
 8009e5a:	b298      	uxth	r0, r3
 8009e5c:	b9a8      	cbnz	r0, 8009e8a <__lo0bits+0x52>
 8009e5e:	0c1b      	lsrs	r3, r3, #16
 8009e60:	2010      	movs	r0, #16
 8009e62:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009e66:	bf04      	itt	eq
 8009e68:	0a1b      	lsreq	r3, r3, #8
 8009e6a:	3008      	addeq	r0, #8
 8009e6c:	071a      	lsls	r2, r3, #28
 8009e6e:	bf04      	itt	eq
 8009e70:	091b      	lsreq	r3, r3, #4
 8009e72:	3004      	addeq	r0, #4
 8009e74:	079a      	lsls	r2, r3, #30
 8009e76:	bf04      	itt	eq
 8009e78:	089b      	lsreq	r3, r3, #2
 8009e7a:	3002      	addeq	r0, #2
 8009e7c:	07da      	lsls	r2, r3, #31
 8009e7e:	d402      	bmi.n	8009e86 <__lo0bits+0x4e>
 8009e80:	085b      	lsrs	r3, r3, #1
 8009e82:	d006      	beq.n	8009e92 <__lo0bits+0x5a>
 8009e84:	3001      	adds	r0, #1
 8009e86:	600b      	str	r3, [r1, #0]
 8009e88:	4770      	bx	lr
 8009e8a:	4610      	mov	r0, r2
 8009e8c:	e7e9      	b.n	8009e62 <__lo0bits+0x2a>
 8009e8e:	2000      	movs	r0, #0
 8009e90:	4770      	bx	lr
 8009e92:	2020      	movs	r0, #32
 8009e94:	4770      	bx	lr

08009e96 <__i2b>:
 8009e96:	b510      	push	{r4, lr}
 8009e98:	460c      	mov	r4, r1
 8009e9a:	2101      	movs	r1, #1
 8009e9c:	f7ff ff27 	bl	8009cee <_Balloc>
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	6144      	str	r4, [r0, #20]
 8009ea4:	6102      	str	r2, [r0, #16]
 8009ea6:	bd10      	pop	{r4, pc}

08009ea8 <__multiply>:
 8009ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eac:	4614      	mov	r4, r2
 8009eae:	690a      	ldr	r2, [r1, #16]
 8009eb0:	6923      	ldr	r3, [r4, #16]
 8009eb2:	429a      	cmp	r2, r3
 8009eb4:	bfb8      	it	lt
 8009eb6:	460b      	movlt	r3, r1
 8009eb8:	4688      	mov	r8, r1
 8009eba:	bfbc      	itt	lt
 8009ebc:	46a0      	movlt	r8, r4
 8009ebe:	461c      	movlt	r4, r3
 8009ec0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009ec4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8009ec8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ecc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ed0:	eb07 0609 	add.w	r6, r7, r9
 8009ed4:	42b3      	cmp	r3, r6
 8009ed6:	bfb8      	it	lt
 8009ed8:	3101      	addlt	r1, #1
 8009eda:	f7ff ff08 	bl	8009cee <_Balloc>
 8009ede:	f100 0514 	add.w	r5, r0, #20
 8009ee2:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8009ee6:	462b      	mov	r3, r5
 8009ee8:	2200      	movs	r2, #0
 8009eea:	4573      	cmp	r3, lr
 8009eec:	d316      	bcc.n	8009f1c <__multiply+0x74>
 8009eee:	f104 0214 	add.w	r2, r4, #20
 8009ef2:	f108 0114 	add.w	r1, r8, #20
 8009ef6:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009efa:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009efe:	9300      	str	r3, [sp, #0]
 8009f00:	9b00      	ldr	r3, [sp, #0]
 8009f02:	9201      	str	r2, [sp, #4]
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d80c      	bhi.n	8009f22 <__multiply+0x7a>
 8009f08:	2e00      	cmp	r6, #0
 8009f0a:	dd03      	ble.n	8009f14 <__multiply+0x6c>
 8009f0c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d05d      	beq.n	8009fd0 <__multiply+0x128>
 8009f14:	6106      	str	r6, [r0, #16]
 8009f16:	b003      	add	sp, #12
 8009f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f1c:	f843 2b04 	str.w	r2, [r3], #4
 8009f20:	e7e3      	b.n	8009eea <__multiply+0x42>
 8009f22:	f8b2 b000 	ldrh.w	fp, [r2]
 8009f26:	f1bb 0f00 	cmp.w	fp, #0
 8009f2a:	d023      	beq.n	8009f74 <__multiply+0xcc>
 8009f2c:	4689      	mov	r9, r1
 8009f2e:	46ac      	mov	ip, r5
 8009f30:	f04f 0800 	mov.w	r8, #0
 8009f34:	f859 4b04 	ldr.w	r4, [r9], #4
 8009f38:	f8dc a000 	ldr.w	sl, [ip]
 8009f3c:	b2a3      	uxth	r3, r4
 8009f3e:	fa1f fa8a 	uxth.w	sl, sl
 8009f42:	fb0b a303 	mla	r3, fp, r3, sl
 8009f46:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009f4a:	f8dc 4000 	ldr.w	r4, [ip]
 8009f4e:	4443      	add	r3, r8
 8009f50:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009f54:	fb0b 840a 	mla	r4, fp, sl, r8
 8009f58:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009f5c:	46e2      	mov	sl, ip
 8009f5e:	b29b      	uxth	r3, r3
 8009f60:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009f64:	454f      	cmp	r7, r9
 8009f66:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009f6a:	f84a 3b04 	str.w	r3, [sl], #4
 8009f6e:	d82b      	bhi.n	8009fc8 <__multiply+0x120>
 8009f70:	f8cc 8004 	str.w	r8, [ip, #4]
 8009f74:	9b01      	ldr	r3, [sp, #4]
 8009f76:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009f7a:	3204      	adds	r2, #4
 8009f7c:	f1ba 0f00 	cmp.w	sl, #0
 8009f80:	d020      	beq.n	8009fc4 <__multiply+0x11c>
 8009f82:	682b      	ldr	r3, [r5, #0]
 8009f84:	4689      	mov	r9, r1
 8009f86:	46a8      	mov	r8, r5
 8009f88:	f04f 0b00 	mov.w	fp, #0
 8009f8c:	f8b9 c000 	ldrh.w	ip, [r9]
 8009f90:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8009f94:	fb0a 440c 	mla	r4, sl, ip, r4
 8009f98:	445c      	add	r4, fp
 8009f9a:	46c4      	mov	ip, r8
 8009f9c:	b29b      	uxth	r3, r3
 8009f9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8009fa2:	f84c 3b04 	str.w	r3, [ip], #4
 8009fa6:	f859 3b04 	ldr.w	r3, [r9], #4
 8009faa:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8009fae:	0c1b      	lsrs	r3, r3, #16
 8009fb0:	fb0a b303 	mla	r3, sl, r3, fp
 8009fb4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8009fb8:	454f      	cmp	r7, r9
 8009fba:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8009fbe:	d805      	bhi.n	8009fcc <__multiply+0x124>
 8009fc0:	f8c8 3004 	str.w	r3, [r8, #4]
 8009fc4:	3504      	adds	r5, #4
 8009fc6:	e79b      	b.n	8009f00 <__multiply+0x58>
 8009fc8:	46d4      	mov	ip, sl
 8009fca:	e7b3      	b.n	8009f34 <__multiply+0x8c>
 8009fcc:	46e0      	mov	r8, ip
 8009fce:	e7dd      	b.n	8009f8c <__multiply+0xe4>
 8009fd0:	3e01      	subs	r6, #1
 8009fd2:	e799      	b.n	8009f08 <__multiply+0x60>

08009fd4 <__pow5mult>:
 8009fd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009fd8:	4615      	mov	r5, r2
 8009fda:	f012 0203 	ands.w	r2, r2, #3
 8009fde:	4606      	mov	r6, r0
 8009fe0:	460f      	mov	r7, r1
 8009fe2:	d007      	beq.n	8009ff4 <__pow5mult+0x20>
 8009fe4:	3a01      	subs	r2, #1
 8009fe6:	4c21      	ldr	r4, [pc, #132]	; (800a06c <__pow5mult+0x98>)
 8009fe8:	2300      	movs	r3, #0
 8009fea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009fee:	f7ff fec9 	bl	8009d84 <__multadd>
 8009ff2:	4607      	mov	r7, r0
 8009ff4:	10ad      	asrs	r5, r5, #2
 8009ff6:	d035      	beq.n	800a064 <__pow5mult+0x90>
 8009ff8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009ffa:	b93c      	cbnz	r4, 800a00c <__pow5mult+0x38>
 8009ffc:	2010      	movs	r0, #16
 8009ffe:	f7fe facb 	bl	8008598 <malloc>
 800a002:	6270      	str	r0, [r6, #36]	; 0x24
 800a004:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a008:	6004      	str	r4, [r0, #0]
 800a00a:	60c4      	str	r4, [r0, #12]
 800a00c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a010:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a014:	b94c      	cbnz	r4, 800a02a <__pow5mult+0x56>
 800a016:	f240 2171 	movw	r1, #625	; 0x271
 800a01a:	4630      	mov	r0, r6
 800a01c:	f7ff ff3b 	bl	8009e96 <__i2b>
 800a020:	2300      	movs	r3, #0
 800a022:	f8c8 0008 	str.w	r0, [r8, #8]
 800a026:	4604      	mov	r4, r0
 800a028:	6003      	str	r3, [r0, #0]
 800a02a:	f04f 0800 	mov.w	r8, #0
 800a02e:	07eb      	lsls	r3, r5, #31
 800a030:	d50a      	bpl.n	800a048 <__pow5mult+0x74>
 800a032:	4639      	mov	r1, r7
 800a034:	4622      	mov	r2, r4
 800a036:	4630      	mov	r0, r6
 800a038:	f7ff ff36 	bl	8009ea8 <__multiply>
 800a03c:	4639      	mov	r1, r7
 800a03e:	4681      	mov	r9, r0
 800a040:	4630      	mov	r0, r6
 800a042:	f7ff fe88 	bl	8009d56 <_Bfree>
 800a046:	464f      	mov	r7, r9
 800a048:	106d      	asrs	r5, r5, #1
 800a04a:	d00b      	beq.n	800a064 <__pow5mult+0x90>
 800a04c:	6820      	ldr	r0, [r4, #0]
 800a04e:	b938      	cbnz	r0, 800a060 <__pow5mult+0x8c>
 800a050:	4622      	mov	r2, r4
 800a052:	4621      	mov	r1, r4
 800a054:	4630      	mov	r0, r6
 800a056:	f7ff ff27 	bl	8009ea8 <__multiply>
 800a05a:	6020      	str	r0, [r4, #0]
 800a05c:	f8c0 8000 	str.w	r8, [r0]
 800a060:	4604      	mov	r4, r0
 800a062:	e7e4      	b.n	800a02e <__pow5mult+0x5a>
 800a064:	4638      	mov	r0, r7
 800a066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a06a:	bf00      	nop
 800a06c:	0800b020 	.word	0x0800b020

0800a070 <__lshift>:
 800a070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a074:	460c      	mov	r4, r1
 800a076:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a07a:	6923      	ldr	r3, [r4, #16]
 800a07c:	6849      	ldr	r1, [r1, #4]
 800a07e:	eb0a 0903 	add.w	r9, sl, r3
 800a082:	68a3      	ldr	r3, [r4, #8]
 800a084:	4607      	mov	r7, r0
 800a086:	4616      	mov	r6, r2
 800a088:	f109 0501 	add.w	r5, r9, #1
 800a08c:	42ab      	cmp	r3, r5
 800a08e:	db32      	blt.n	800a0f6 <__lshift+0x86>
 800a090:	4638      	mov	r0, r7
 800a092:	f7ff fe2c 	bl	8009cee <_Balloc>
 800a096:	2300      	movs	r3, #0
 800a098:	4680      	mov	r8, r0
 800a09a:	f100 0114 	add.w	r1, r0, #20
 800a09e:	461a      	mov	r2, r3
 800a0a0:	4553      	cmp	r3, sl
 800a0a2:	db2b      	blt.n	800a0fc <__lshift+0x8c>
 800a0a4:	6920      	ldr	r0, [r4, #16]
 800a0a6:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a0aa:	f104 0314 	add.w	r3, r4, #20
 800a0ae:	f016 021f 	ands.w	r2, r6, #31
 800a0b2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a0b6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a0ba:	d025      	beq.n	800a108 <__lshift+0x98>
 800a0bc:	f1c2 0e20 	rsb	lr, r2, #32
 800a0c0:	2000      	movs	r0, #0
 800a0c2:	681e      	ldr	r6, [r3, #0]
 800a0c4:	468a      	mov	sl, r1
 800a0c6:	4096      	lsls	r6, r2
 800a0c8:	4330      	orrs	r0, r6
 800a0ca:	f84a 0b04 	str.w	r0, [sl], #4
 800a0ce:	f853 0b04 	ldr.w	r0, [r3], #4
 800a0d2:	459c      	cmp	ip, r3
 800a0d4:	fa20 f00e 	lsr.w	r0, r0, lr
 800a0d8:	d814      	bhi.n	800a104 <__lshift+0x94>
 800a0da:	6048      	str	r0, [r1, #4]
 800a0dc:	b108      	cbz	r0, 800a0e2 <__lshift+0x72>
 800a0de:	f109 0502 	add.w	r5, r9, #2
 800a0e2:	3d01      	subs	r5, #1
 800a0e4:	4638      	mov	r0, r7
 800a0e6:	f8c8 5010 	str.w	r5, [r8, #16]
 800a0ea:	4621      	mov	r1, r4
 800a0ec:	f7ff fe33 	bl	8009d56 <_Bfree>
 800a0f0:	4640      	mov	r0, r8
 800a0f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0f6:	3101      	adds	r1, #1
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	e7c7      	b.n	800a08c <__lshift+0x1c>
 800a0fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a100:	3301      	adds	r3, #1
 800a102:	e7cd      	b.n	800a0a0 <__lshift+0x30>
 800a104:	4651      	mov	r1, sl
 800a106:	e7dc      	b.n	800a0c2 <__lshift+0x52>
 800a108:	3904      	subs	r1, #4
 800a10a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a10e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a112:	459c      	cmp	ip, r3
 800a114:	d8f9      	bhi.n	800a10a <__lshift+0x9a>
 800a116:	e7e4      	b.n	800a0e2 <__lshift+0x72>

0800a118 <__mcmp>:
 800a118:	6903      	ldr	r3, [r0, #16]
 800a11a:	690a      	ldr	r2, [r1, #16]
 800a11c:	1a9b      	subs	r3, r3, r2
 800a11e:	b530      	push	{r4, r5, lr}
 800a120:	d10c      	bne.n	800a13c <__mcmp+0x24>
 800a122:	0092      	lsls	r2, r2, #2
 800a124:	3014      	adds	r0, #20
 800a126:	3114      	adds	r1, #20
 800a128:	1884      	adds	r4, r0, r2
 800a12a:	4411      	add	r1, r2
 800a12c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a130:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a134:	4295      	cmp	r5, r2
 800a136:	d003      	beq.n	800a140 <__mcmp+0x28>
 800a138:	d305      	bcc.n	800a146 <__mcmp+0x2e>
 800a13a:	2301      	movs	r3, #1
 800a13c:	4618      	mov	r0, r3
 800a13e:	bd30      	pop	{r4, r5, pc}
 800a140:	42a0      	cmp	r0, r4
 800a142:	d3f3      	bcc.n	800a12c <__mcmp+0x14>
 800a144:	e7fa      	b.n	800a13c <__mcmp+0x24>
 800a146:	f04f 33ff 	mov.w	r3, #4294967295
 800a14a:	e7f7      	b.n	800a13c <__mcmp+0x24>

0800a14c <__mdiff>:
 800a14c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a150:	460d      	mov	r5, r1
 800a152:	4607      	mov	r7, r0
 800a154:	4611      	mov	r1, r2
 800a156:	4628      	mov	r0, r5
 800a158:	4614      	mov	r4, r2
 800a15a:	f7ff ffdd 	bl	800a118 <__mcmp>
 800a15e:	1e06      	subs	r6, r0, #0
 800a160:	d108      	bne.n	800a174 <__mdiff+0x28>
 800a162:	4631      	mov	r1, r6
 800a164:	4638      	mov	r0, r7
 800a166:	f7ff fdc2 	bl	8009cee <_Balloc>
 800a16a:	2301      	movs	r3, #1
 800a16c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a170:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a174:	bfa4      	itt	ge
 800a176:	4623      	movge	r3, r4
 800a178:	462c      	movge	r4, r5
 800a17a:	4638      	mov	r0, r7
 800a17c:	6861      	ldr	r1, [r4, #4]
 800a17e:	bfa6      	itte	ge
 800a180:	461d      	movge	r5, r3
 800a182:	2600      	movge	r6, #0
 800a184:	2601      	movlt	r6, #1
 800a186:	f7ff fdb2 	bl	8009cee <_Balloc>
 800a18a:	692b      	ldr	r3, [r5, #16]
 800a18c:	60c6      	str	r6, [r0, #12]
 800a18e:	6926      	ldr	r6, [r4, #16]
 800a190:	f105 0914 	add.w	r9, r5, #20
 800a194:	f104 0214 	add.w	r2, r4, #20
 800a198:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a19c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a1a0:	f100 0514 	add.w	r5, r0, #20
 800a1a4:	f04f 0e00 	mov.w	lr, #0
 800a1a8:	f852 ab04 	ldr.w	sl, [r2], #4
 800a1ac:	f859 4b04 	ldr.w	r4, [r9], #4
 800a1b0:	fa1e f18a 	uxtah	r1, lr, sl
 800a1b4:	b2a3      	uxth	r3, r4
 800a1b6:	1ac9      	subs	r1, r1, r3
 800a1b8:	0c23      	lsrs	r3, r4, #16
 800a1ba:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a1be:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a1c2:	b289      	uxth	r1, r1
 800a1c4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a1c8:	45c8      	cmp	r8, r9
 800a1ca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a1ce:	4694      	mov	ip, r2
 800a1d0:	f845 3b04 	str.w	r3, [r5], #4
 800a1d4:	d8e8      	bhi.n	800a1a8 <__mdiff+0x5c>
 800a1d6:	45bc      	cmp	ip, r7
 800a1d8:	d304      	bcc.n	800a1e4 <__mdiff+0x98>
 800a1da:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a1de:	b183      	cbz	r3, 800a202 <__mdiff+0xb6>
 800a1e0:	6106      	str	r6, [r0, #16]
 800a1e2:	e7c5      	b.n	800a170 <__mdiff+0x24>
 800a1e4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a1e8:	fa1e f381 	uxtah	r3, lr, r1
 800a1ec:	141a      	asrs	r2, r3, #16
 800a1ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1f8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a1fc:	f845 3b04 	str.w	r3, [r5], #4
 800a200:	e7e9      	b.n	800a1d6 <__mdiff+0x8a>
 800a202:	3e01      	subs	r6, #1
 800a204:	e7e9      	b.n	800a1da <__mdiff+0x8e>

0800a206 <__d2b>:
 800a206:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a20a:	460e      	mov	r6, r1
 800a20c:	2101      	movs	r1, #1
 800a20e:	ec59 8b10 	vmov	r8, r9, d0
 800a212:	4615      	mov	r5, r2
 800a214:	f7ff fd6b 	bl	8009cee <_Balloc>
 800a218:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a21c:	4607      	mov	r7, r0
 800a21e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a222:	bb34      	cbnz	r4, 800a272 <__d2b+0x6c>
 800a224:	9301      	str	r3, [sp, #4]
 800a226:	f1b8 0300 	subs.w	r3, r8, #0
 800a22a:	d027      	beq.n	800a27c <__d2b+0x76>
 800a22c:	a802      	add	r0, sp, #8
 800a22e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a232:	f7ff fe01 	bl	8009e38 <__lo0bits>
 800a236:	9900      	ldr	r1, [sp, #0]
 800a238:	b1f0      	cbz	r0, 800a278 <__d2b+0x72>
 800a23a:	9a01      	ldr	r2, [sp, #4]
 800a23c:	f1c0 0320 	rsb	r3, r0, #32
 800a240:	fa02 f303 	lsl.w	r3, r2, r3
 800a244:	430b      	orrs	r3, r1
 800a246:	40c2      	lsrs	r2, r0
 800a248:	617b      	str	r3, [r7, #20]
 800a24a:	9201      	str	r2, [sp, #4]
 800a24c:	9b01      	ldr	r3, [sp, #4]
 800a24e:	61bb      	str	r3, [r7, #24]
 800a250:	2b00      	cmp	r3, #0
 800a252:	bf14      	ite	ne
 800a254:	2102      	movne	r1, #2
 800a256:	2101      	moveq	r1, #1
 800a258:	6139      	str	r1, [r7, #16]
 800a25a:	b1c4      	cbz	r4, 800a28e <__d2b+0x88>
 800a25c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a260:	4404      	add	r4, r0
 800a262:	6034      	str	r4, [r6, #0]
 800a264:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a268:	6028      	str	r0, [r5, #0]
 800a26a:	4638      	mov	r0, r7
 800a26c:	b003      	add	sp, #12
 800a26e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a272:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a276:	e7d5      	b.n	800a224 <__d2b+0x1e>
 800a278:	6179      	str	r1, [r7, #20]
 800a27a:	e7e7      	b.n	800a24c <__d2b+0x46>
 800a27c:	a801      	add	r0, sp, #4
 800a27e:	f7ff fddb 	bl	8009e38 <__lo0bits>
 800a282:	9b01      	ldr	r3, [sp, #4]
 800a284:	617b      	str	r3, [r7, #20]
 800a286:	2101      	movs	r1, #1
 800a288:	6139      	str	r1, [r7, #16]
 800a28a:	3020      	adds	r0, #32
 800a28c:	e7e5      	b.n	800a25a <__d2b+0x54>
 800a28e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a292:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a296:	6030      	str	r0, [r6, #0]
 800a298:	6918      	ldr	r0, [r3, #16]
 800a29a:	f7ff fdae 	bl	8009dfa <__hi0bits>
 800a29e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a2a2:	e7e1      	b.n	800a268 <__d2b+0x62>

0800a2a4 <_calloc_r>:
 800a2a4:	b538      	push	{r3, r4, r5, lr}
 800a2a6:	fb02 f401 	mul.w	r4, r2, r1
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	f7fe f9da 	bl	8008664 <_malloc_r>
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	b118      	cbz	r0, 800a2bc <_calloc_r+0x18>
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	2100      	movs	r1, #0
 800a2b8:	f7fe f97e 	bl	80085b8 <memset>
 800a2bc:	4628      	mov	r0, r5
 800a2be:	bd38      	pop	{r3, r4, r5, pc}

0800a2c0 <__ssputs_r>:
 800a2c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a2c4:	688e      	ldr	r6, [r1, #8]
 800a2c6:	429e      	cmp	r6, r3
 800a2c8:	4682      	mov	sl, r0
 800a2ca:	460c      	mov	r4, r1
 800a2cc:	4690      	mov	r8, r2
 800a2ce:	4699      	mov	r9, r3
 800a2d0:	d837      	bhi.n	800a342 <__ssputs_r+0x82>
 800a2d2:	898a      	ldrh	r2, [r1, #12]
 800a2d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a2d8:	d031      	beq.n	800a33e <__ssputs_r+0x7e>
 800a2da:	6825      	ldr	r5, [r4, #0]
 800a2dc:	6909      	ldr	r1, [r1, #16]
 800a2de:	1a6f      	subs	r7, r5, r1
 800a2e0:	6965      	ldr	r5, [r4, #20]
 800a2e2:	2302      	movs	r3, #2
 800a2e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a2e8:	fb95 f5f3 	sdiv	r5, r5, r3
 800a2ec:	f109 0301 	add.w	r3, r9, #1
 800a2f0:	443b      	add	r3, r7
 800a2f2:	429d      	cmp	r5, r3
 800a2f4:	bf38      	it	cc
 800a2f6:	461d      	movcc	r5, r3
 800a2f8:	0553      	lsls	r3, r2, #21
 800a2fa:	d530      	bpl.n	800a35e <__ssputs_r+0x9e>
 800a2fc:	4629      	mov	r1, r5
 800a2fe:	f7fe f9b1 	bl	8008664 <_malloc_r>
 800a302:	4606      	mov	r6, r0
 800a304:	b950      	cbnz	r0, 800a31c <__ssputs_r+0x5c>
 800a306:	230c      	movs	r3, #12
 800a308:	f8ca 3000 	str.w	r3, [sl]
 800a30c:	89a3      	ldrh	r3, [r4, #12]
 800a30e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a312:	81a3      	strh	r3, [r4, #12]
 800a314:	f04f 30ff 	mov.w	r0, #4294967295
 800a318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a31c:	463a      	mov	r2, r7
 800a31e:	6921      	ldr	r1, [r4, #16]
 800a320:	f7ff fcd8 	bl	8009cd4 <memcpy>
 800a324:	89a3      	ldrh	r3, [r4, #12]
 800a326:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a32a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a32e:	81a3      	strh	r3, [r4, #12]
 800a330:	6126      	str	r6, [r4, #16]
 800a332:	6165      	str	r5, [r4, #20]
 800a334:	443e      	add	r6, r7
 800a336:	1bed      	subs	r5, r5, r7
 800a338:	6026      	str	r6, [r4, #0]
 800a33a:	60a5      	str	r5, [r4, #8]
 800a33c:	464e      	mov	r6, r9
 800a33e:	454e      	cmp	r6, r9
 800a340:	d900      	bls.n	800a344 <__ssputs_r+0x84>
 800a342:	464e      	mov	r6, r9
 800a344:	4632      	mov	r2, r6
 800a346:	4641      	mov	r1, r8
 800a348:	6820      	ldr	r0, [r4, #0]
 800a34a:	f000 f91d 	bl	800a588 <memmove>
 800a34e:	68a3      	ldr	r3, [r4, #8]
 800a350:	1b9b      	subs	r3, r3, r6
 800a352:	60a3      	str	r3, [r4, #8]
 800a354:	6823      	ldr	r3, [r4, #0]
 800a356:	441e      	add	r6, r3
 800a358:	6026      	str	r6, [r4, #0]
 800a35a:	2000      	movs	r0, #0
 800a35c:	e7dc      	b.n	800a318 <__ssputs_r+0x58>
 800a35e:	462a      	mov	r2, r5
 800a360:	f000 f92b 	bl	800a5ba <_realloc_r>
 800a364:	4606      	mov	r6, r0
 800a366:	2800      	cmp	r0, #0
 800a368:	d1e2      	bne.n	800a330 <__ssputs_r+0x70>
 800a36a:	6921      	ldr	r1, [r4, #16]
 800a36c:	4650      	mov	r0, sl
 800a36e:	f7fe f92b 	bl	80085c8 <_free_r>
 800a372:	e7c8      	b.n	800a306 <__ssputs_r+0x46>

0800a374 <_svfiprintf_r>:
 800a374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a378:	461d      	mov	r5, r3
 800a37a:	898b      	ldrh	r3, [r1, #12]
 800a37c:	061f      	lsls	r7, r3, #24
 800a37e:	b09d      	sub	sp, #116	; 0x74
 800a380:	4680      	mov	r8, r0
 800a382:	460c      	mov	r4, r1
 800a384:	4616      	mov	r6, r2
 800a386:	d50f      	bpl.n	800a3a8 <_svfiprintf_r+0x34>
 800a388:	690b      	ldr	r3, [r1, #16]
 800a38a:	b96b      	cbnz	r3, 800a3a8 <_svfiprintf_r+0x34>
 800a38c:	2140      	movs	r1, #64	; 0x40
 800a38e:	f7fe f969 	bl	8008664 <_malloc_r>
 800a392:	6020      	str	r0, [r4, #0]
 800a394:	6120      	str	r0, [r4, #16]
 800a396:	b928      	cbnz	r0, 800a3a4 <_svfiprintf_r+0x30>
 800a398:	230c      	movs	r3, #12
 800a39a:	f8c8 3000 	str.w	r3, [r8]
 800a39e:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a2:	e0c8      	b.n	800a536 <_svfiprintf_r+0x1c2>
 800a3a4:	2340      	movs	r3, #64	; 0x40
 800a3a6:	6163      	str	r3, [r4, #20]
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ac:	2320      	movs	r3, #32
 800a3ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a3b2:	2330      	movs	r3, #48	; 0x30
 800a3b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a3b8:	9503      	str	r5, [sp, #12]
 800a3ba:	f04f 0b01 	mov.w	fp, #1
 800a3be:	4637      	mov	r7, r6
 800a3c0:	463d      	mov	r5, r7
 800a3c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a3c6:	b10b      	cbz	r3, 800a3cc <_svfiprintf_r+0x58>
 800a3c8:	2b25      	cmp	r3, #37	; 0x25
 800a3ca:	d13e      	bne.n	800a44a <_svfiprintf_r+0xd6>
 800a3cc:	ebb7 0a06 	subs.w	sl, r7, r6
 800a3d0:	d00b      	beq.n	800a3ea <_svfiprintf_r+0x76>
 800a3d2:	4653      	mov	r3, sl
 800a3d4:	4632      	mov	r2, r6
 800a3d6:	4621      	mov	r1, r4
 800a3d8:	4640      	mov	r0, r8
 800a3da:	f7ff ff71 	bl	800a2c0 <__ssputs_r>
 800a3de:	3001      	adds	r0, #1
 800a3e0:	f000 80a4 	beq.w	800a52c <_svfiprintf_r+0x1b8>
 800a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e6:	4453      	add	r3, sl
 800a3e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ea:	783b      	ldrb	r3, [r7, #0]
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	f000 809d 	beq.w	800a52c <_svfiprintf_r+0x1b8>
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3fc:	9304      	str	r3, [sp, #16]
 800a3fe:	9307      	str	r3, [sp, #28]
 800a400:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a404:	931a      	str	r3, [sp, #104]	; 0x68
 800a406:	462f      	mov	r7, r5
 800a408:	2205      	movs	r2, #5
 800a40a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a40e:	4850      	ldr	r0, [pc, #320]	; (800a550 <_svfiprintf_r+0x1dc>)
 800a410:	f7f5 ff06 	bl	8000220 <memchr>
 800a414:	9b04      	ldr	r3, [sp, #16]
 800a416:	b9d0      	cbnz	r0, 800a44e <_svfiprintf_r+0xda>
 800a418:	06d9      	lsls	r1, r3, #27
 800a41a:	bf44      	itt	mi
 800a41c:	2220      	movmi	r2, #32
 800a41e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a422:	071a      	lsls	r2, r3, #28
 800a424:	bf44      	itt	mi
 800a426:	222b      	movmi	r2, #43	; 0x2b
 800a428:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a42c:	782a      	ldrb	r2, [r5, #0]
 800a42e:	2a2a      	cmp	r2, #42	; 0x2a
 800a430:	d015      	beq.n	800a45e <_svfiprintf_r+0xea>
 800a432:	9a07      	ldr	r2, [sp, #28]
 800a434:	462f      	mov	r7, r5
 800a436:	2000      	movs	r0, #0
 800a438:	250a      	movs	r5, #10
 800a43a:	4639      	mov	r1, r7
 800a43c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a440:	3b30      	subs	r3, #48	; 0x30
 800a442:	2b09      	cmp	r3, #9
 800a444:	d94d      	bls.n	800a4e2 <_svfiprintf_r+0x16e>
 800a446:	b1b8      	cbz	r0, 800a478 <_svfiprintf_r+0x104>
 800a448:	e00f      	b.n	800a46a <_svfiprintf_r+0xf6>
 800a44a:	462f      	mov	r7, r5
 800a44c:	e7b8      	b.n	800a3c0 <_svfiprintf_r+0x4c>
 800a44e:	4a40      	ldr	r2, [pc, #256]	; (800a550 <_svfiprintf_r+0x1dc>)
 800a450:	1a80      	subs	r0, r0, r2
 800a452:	fa0b f000 	lsl.w	r0, fp, r0
 800a456:	4318      	orrs	r0, r3
 800a458:	9004      	str	r0, [sp, #16]
 800a45a:	463d      	mov	r5, r7
 800a45c:	e7d3      	b.n	800a406 <_svfiprintf_r+0x92>
 800a45e:	9a03      	ldr	r2, [sp, #12]
 800a460:	1d11      	adds	r1, r2, #4
 800a462:	6812      	ldr	r2, [r2, #0]
 800a464:	9103      	str	r1, [sp, #12]
 800a466:	2a00      	cmp	r2, #0
 800a468:	db01      	blt.n	800a46e <_svfiprintf_r+0xfa>
 800a46a:	9207      	str	r2, [sp, #28]
 800a46c:	e004      	b.n	800a478 <_svfiprintf_r+0x104>
 800a46e:	4252      	negs	r2, r2
 800a470:	f043 0302 	orr.w	r3, r3, #2
 800a474:	9207      	str	r2, [sp, #28]
 800a476:	9304      	str	r3, [sp, #16]
 800a478:	783b      	ldrb	r3, [r7, #0]
 800a47a:	2b2e      	cmp	r3, #46	; 0x2e
 800a47c:	d10c      	bne.n	800a498 <_svfiprintf_r+0x124>
 800a47e:	787b      	ldrb	r3, [r7, #1]
 800a480:	2b2a      	cmp	r3, #42	; 0x2a
 800a482:	d133      	bne.n	800a4ec <_svfiprintf_r+0x178>
 800a484:	9b03      	ldr	r3, [sp, #12]
 800a486:	1d1a      	adds	r2, r3, #4
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	9203      	str	r2, [sp, #12]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	bfb8      	it	lt
 800a490:	f04f 33ff 	movlt.w	r3, #4294967295
 800a494:	3702      	adds	r7, #2
 800a496:	9305      	str	r3, [sp, #20]
 800a498:	4d2e      	ldr	r5, [pc, #184]	; (800a554 <_svfiprintf_r+0x1e0>)
 800a49a:	7839      	ldrb	r1, [r7, #0]
 800a49c:	2203      	movs	r2, #3
 800a49e:	4628      	mov	r0, r5
 800a4a0:	f7f5 febe 	bl	8000220 <memchr>
 800a4a4:	b138      	cbz	r0, 800a4b6 <_svfiprintf_r+0x142>
 800a4a6:	2340      	movs	r3, #64	; 0x40
 800a4a8:	1b40      	subs	r0, r0, r5
 800a4aa:	fa03 f000 	lsl.w	r0, r3, r0
 800a4ae:	9b04      	ldr	r3, [sp, #16]
 800a4b0:	4303      	orrs	r3, r0
 800a4b2:	3701      	adds	r7, #1
 800a4b4:	9304      	str	r3, [sp, #16]
 800a4b6:	7839      	ldrb	r1, [r7, #0]
 800a4b8:	4827      	ldr	r0, [pc, #156]	; (800a558 <_svfiprintf_r+0x1e4>)
 800a4ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a4be:	2206      	movs	r2, #6
 800a4c0:	1c7e      	adds	r6, r7, #1
 800a4c2:	f7f5 fead 	bl	8000220 <memchr>
 800a4c6:	2800      	cmp	r0, #0
 800a4c8:	d038      	beq.n	800a53c <_svfiprintf_r+0x1c8>
 800a4ca:	4b24      	ldr	r3, [pc, #144]	; (800a55c <_svfiprintf_r+0x1e8>)
 800a4cc:	bb13      	cbnz	r3, 800a514 <_svfiprintf_r+0x1a0>
 800a4ce:	9b03      	ldr	r3, [sp, #12]
 800a4d0:	3307      	adds	r3, #7
 800a4d2:	f023 0307 	bic.w	r3, r3, #7
 800a4d6:	3308      	adds	r3, #8
 800a4d8:	9303      	str	r3, [sp, #12]
 800a4da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4dc:	444b      	add	r3, r9
 800a4de:	9309      	str	r3, [sp, #36]	; 0x24
 800a4e0:	e76d      	b.n	800a3be <_svfiprintf_r+0x4a>
 800a4e2:	fb05 3202 	mla	r2, r5, r2, r3
 800a4e6:	2001      	movs	r0, #1
 800a4e8:	460f      	mov	r7, r1
 800a4ea:	e7a6      	b.n	800a43a <_svfiprintf_r+0xc6>
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	3701      	adds	r7, #1
 800a4f0:	9305      	str	r3, [sp, #20]
 800a4f2:	4619      	mov	r1, r3
 800a4f4:	250a      	movs	r5, #10
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4fc:	3a30      	subs	r2, #48	; 0x30
 800a4fe:	2a09      	cmp	r2, #9
 800a500:	d903      	bls.n	800a50a <_svfiprintf_r+0x196>
 800a502:	2b00      	cmp	r3, #0
 800a504:	d0c8      	beq.n	800a498 <_svfiprintf_r+0x124>
 800a506:	9105      	str	r1, [sp, #20]
 800a508:	e7c6      	b.n	800a498 <_svfiprintf_r+0x124>
 800a50a:	fb05 2101 	mla	r1, r5, r1, r2
 800a50e:	2301      	movs	r3, #1
 800a510:	4607      	mov	r7, r0
 800a512:	e7f0      	b.n	800a4f6 <_svfiprintf_r+0x182>
 800a514:	ab03      	add	r3, sp, #12
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	4622      	mov	r2, r4
 800a51a:	4b11      	ldr	r3, [pc, #68]	; (800a560 <_svfiprintf_r+0x1ec>)
 800a51c:	a904      	add	r1, sp, #16
 800a51e:	4640      	mov	r0, r8
 800a520:	f7fe f98e 	bl	8008840 <_printf_float>
 800a524:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a528:	4681      	mov	r9, r0
 800a52a:	d1d6      	bne.n	800a4da <_svfiprintf_r+0x166>
 800a52c:	89a3      	ldrh	r3, [r4, #12]
 800a52e:	065b      	lsls	r3, r3, #25
 800a530:	f53f af35 	bmi.w	800a39e <_svfiprintf_r+0x2a>
 800a534:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a536:	b01d      	add	sp, #116	; 0x74
 800a538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a53c:	ab03      	add	r3, sp, #12
 800a53e:	9300      	str	r3, [sp, #0]
 800a540:	4622      	mov	r2, r4
 800a542:	4b07      	ldr	r3, [pc, #28]	; (800a560 <_svfiprintf_r+0x1ec>)
 800a544:	a904      	add	r1, sp, #16
 800a546:	4640      	mov	r0, r8
 800a548:	f7fe fc30 	bl	8008dac <_printf_i>
 800a54c:	e7ea      	b.n	800a524 <_svfiprintf_r+0x1b0>
 800a54e:	bf00      	nop
 800a550:	0800b02c 	.word	0x0800b02c
 800a554:	0800b032 	.word	0x0800b032
 800a558:	0800b036 	.word	0x0800b036
 800a55c:	08008841 	.word	0x08008841
 800a560:	0800a2c1 	.word	0x0800a2c1

0800a564 <__ascii_mbtowc>:
 800a564:	b082      	sub	sp, #8
 800a566:	b901      	cbnz	r1, 800a56a <__ascii_mbtowc+0x6>
 800a568:	a901      	add	r1, sp, #4
 800a56a:	b142      	cbz	r2, 800a57e <__ascii_mbtowc+0x1a>
 800a56c:	b14b      	cbz	r3, 800a582 <__ascii_mbtowc+0x1e>
 800a56e:	7813      	ldrb	r3, [r2, #0]
 800a570:	600b      	str	r3, [r1, #0]
 800a572:	7812      	ldrb	r2, [r2, #0]
 800a574:	1c10      	adds	r0, r2, #0
 800a576:	bf18      	it	ne
 800a578:	2001      	movne	r0, #1
 800a57a:	b002      	add	sp, #8
 800a57c:	4770      	bx	lr
 800a57e:	4610      	mov	r0, r2
 800a580:	e7fb      	b.n	800a57a <__ascii_mbtowc+0x16>
 800a582:	f06f 0001 	mvn.w	r0, #1
 800a586:	e7f8      	b.n	800a57a <__ascii_mbtowc+0x16>

0800a588 <memmove>:
 800a588:	4288      	cmp	r0, r1
 800a58a:	b510      	push	{r4, lr}
 800a58c:	eb01 0302 	add.w	r3, r1, r2
 800a590:	d807      	bhi.n	800a5a2 <memmove+0x1a>
 800a592:	1e42      	subs	r2, r0, #1
 800a594:	4299      	cmp	r1, r3
 800a596:	d00a      	beq.n	800a5ae <memmove+0x26>
 800a598:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a59c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a5a0:	e7f8      	b.n	800a594 <memmove+0xc>
 800a5a2:	4283      	cmp	r3, r0
 800a5a4:	d9f5      	bls.n	800a592 <memmove+0xa>
 800a5a6:	1881      	adds	r1, r0, r2
 800a5a8:	1ad2      	subs	r2, r2, r3
 800a5aa:	42d3      	cmn	r3, r2
 800a5ac:	d100      	bne.n	800a5b0 <memmove+0x28>
 800a5ae:	bd10      	pop	{r4, pc}
 800a5b0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5b4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a5b8:	e7f7      	b.n	800a5aa <memmove+0x22>

0800a5ba <_realloc_r>:
 800a5ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5bc:	4607      	mov	r7, r0
 800a5be:	4614      	mov	r4, r2
 800a5c0:	460e      	mov	r6, r1
 800a5c2:	b921      	cbnz	r1, 800a5ce <_realloc_r+0x14>
 800a5c4:	4611      	mov	r1, r2
 800a5c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a5ca:	f7fe b84b 	b.w	8008664 <_malloc_r>
 800a5ce:	b922      	cbnz	r2, 800a5da <_realloc_r+0x20>
 800a5d0:	f7fd fffa 	bl	80085c8 <_free_r>
 800a5d4:	4625      	mov	r5, r4
 800a5d6:	4628      	mov	r0, r5
 800a5d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a5da:	f000 f821 	bl	800a620 <_malloc_usable_size_r>
 800a5de:	42a0      	cmp	r0, r4
 800a5e0:	d20f      	bcs.n	800a602 <_realloc_r+0x48>
 800a5e2:	4621      	mov	r1, r4
 800a5e4:	4638      	mov	r0, r7
 800a5e6:	f7fe f83d 	bl	8008664 <_malloc_r>
 800a5ea:	4605      	mov	r5, r0
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d0f2      	beq.n	800a5d6 <_realloc_r+0x1c>
 800a5f0:	4631      	mov	r1, r6
 800a5f2:	4622      	mov	r2, r4
 800a5f4:	f7ff fb6e 	bl	8009cd4 <memcpy>
 800a5f8:	4631      	mov	r1, r6
 800a5fa:	4638      	mov	r0, r7
 800a5fc:	f7fd ffe4 	bl	80085c8 <_free_r>
 800a600:	e7e9      	b.n	800a5d6 <_realloc_r+0x1c>
 800a602:	4635      	mov	r5, r6
 800a604:	e7e7      	b.n	800a5d6 <_realloc_r+0x1c>

0800a606 <__ascii_wctomb>:
 800a606:	b149      	cbz	r1, 800a61c <__ascii_wctomb+0x16>
 800a608:	2aff      	cmp	r2, #255	; 0xff
 800a60a:	bf85      	ittet	hi
 800a60c:	238a      	movhi	r3, #138	; 0x8a
 800a60e:	6003      	strhi	r3, [r0, #0]
 800a610:	700a      	strbls	r2, [r1, #0]
 800a612:	f04f 30ff 	movhi.w	r0, #4294967295
 800a616:	bf98      	it	ls
 800a618:	2001      	movls	r0, #1
 800a61a:	4770      	bx	lr
 800a61c:	4608      	mov	r0, r1
 800a61e:	4770      	bx	lr

0800a620 <_malloc_usable_size_r>:
 800a620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a624:	1f18      	subs	r0, r3, #4
 800a626:	2b00      	cmp	r3, #0
 800a628:	bfbc      	itt	lt
 800a62a:	580b      	ldrlt	r3, [r1, r0]
 800a62c:	18c0      	addlt	r0, r0, r3
 800a62e:	4770      	bx	lr

0800a630 <_init>:
 800a630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a632:	bf00      	nop
 800a634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a636:	bc08      	pop	{r3}
 800a638:	469e      	mov	lr, r3
 800a63a:	4770      	bx	lr

0800a63c <_fini>:
 800a63c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a63e:	bf00      	nop
 800a640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a642:	bc08      	pop	{r3}
 800a644:	469e      	mov	lr, r3
 800a646:	4770      	bx	lr
