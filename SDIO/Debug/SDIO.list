
SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb20  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007f28  0800bcf0  0800bcf0  0001bcf0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013c18  08013c18  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08013c18  08013c18  00023c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013c20  08013c20  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013c20  08013c20  00023c20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013c24  08013c24  00023c24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08013c28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cf4  200001e0  08013e08  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ed4  08013e08  00030ed4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a9a  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002afa  00000000  00000000  00043caa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cb8  00000000  00000000  000467a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b80  00000000  00000000  00047460  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245fd  00000000  00000000  00047fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d5a2  00000000  00000000  0006c5dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cde90  00000000  00000000  00079b7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147a0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042d8  00000000  00000000  00147a8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bcd8 	.word	0x0800bcd8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800bcd8 	.word	0x0800bcd8

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b972 	b.w	8000f04 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4688      	mov	r8, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14b      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4615      	mov	r5, r2
 8000c4a:	d967      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0720 	rsb	r7, r2, #32
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c5e:	4095      	lsls	r5, r2
 8000c60:	ea47 0803 	orr.w	r8, r7, r3
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c70:	fa1f fc85 	uxth.w	ip, r5
 8000c74:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c78:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c8a:	f080 811b 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8118 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000c94:	3f02      	subs	r7, #2
 8000c96:	442b      	add	r3, r5
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cac:	45a4      	cmp	ip, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	192c      	adds	r4, r5, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8107 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	f240 8104 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	442c      	add	r4, r5
 8000cc4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cc8:	eba4 040c 	sub.w	r4, r4, ip
 8000ccc:	2700      	movs	r7, #0
 8000cce:	b11e      	cbz	r6, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd8:	4639      	mov	r1, r7
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0xbe>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80eb 	beq.w	8000ebe <__udivmoddi4+0x286>
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e9c6 0100 	strd	r0, r1, [r6]
 8000cee:	4638      	mov	r0, r7
 8000cf0:	4639      	mov	r1, r7
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f783 	clz	r7, r3
 8000cfa:	2f00      	cmp	r7, #0
 8000cfc:	d147      	bne.n	8000d8e <__udivmoddi4+0x156>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xd0>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80fa 	bhi.w	8000efc <__udivmoddi4+0x2c4>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	4698      	mov	r8, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d0e0      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d16:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1a:	e7dd      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d1c:	b902      	cbnz	r2, 8000d20 <__udivmoddi4+0xe8>
 8000d1e:	deff      	udf	#255	; 0xff
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f040 808f 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d2a:	1b49      	subs	r1, r1, r5
 8000d2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d30:	fa1f f885 	uxth.w	r8, r5
 8000d34:	2701      	movs	r7, #1
 8000d36:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb08 f10c 	mul.w	r1, r8, ip
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4c:	18eb      	adds	r3, r5, r3
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4299      	cmp	r1, r3
 8000d56:	f200 80cd 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x14c>
 8000d74:	192c      	adds	r4, r5, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x14a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80b6 	bhi.w	8000eee <__udivmoddi4+0x2b6>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e79f      	b.n	8000cce <__udivmoddi4+0x96>
 8000d8e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d92:	40bb      	lsls	r3, r7
 8000d94:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d98:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d9c:	fa01 f407 	lsl.w	r4, r1, r7
 8000da0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000da4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000da8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dac:	4325      	orrs	r5, r4
 8000dae:	fbb3 f9f8 	udiv	r9, r3, r8
 8000db2:	0c2c      	lsrs	r4, r5, #16
 8000db4:	fb08 3319 	mls	r3, r8, r9, r3
 8000db8:	fa1f fa8e 	uxth.w	sl, lr
 8000dbc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dc0:	fb09 f40a 	mul.w	r4, r9, sl
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dca:	fa00 f107 	lsl.w	r1, r0, r7
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd8:	f080 8087 	bcs.w	8000eea <__udivmoddi4+0x2b2>
 8000ddc:	429c      	cmp	r4, r3
 8000dde:	f240 8084 	bls.w	8000eea <__udivmoddi4+0x2b2>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4473      	add	r3, lr
 8000de8:	1b1b      	subs	r3, r3, r4
 8000dea:	b2ad      	uxth	r5, r5
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000df8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dfc:	45a2      	cmp	sl, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1e 0404 	adds.w	r4, lr, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	d26b      	bcs.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0a:	45a2      	cmp	sl, r4
 8000e0c:	d969      	bls.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4474      	add	r4, lr
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1a:	eba4 040a 	sub.w	r4, r4, sl
 8000e1e:	454c      	cmp	r4, r9
 8000e20:	46c2      	mov	sl, r8
 8000e22:	464b      	mov	r3, r9
 8000e24:	d354      	bcc.n	8000ed0 <__udivmoddi4+0x298>
 8000e26:	d051      	beq.n	8000ecc <__udivmoddi4+0x294>
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d069      	beq.n	8000f00 <__udivmoddi4+0x2c8>
 8000e2c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e30:	eb64 0403 	sbc.w	r4, r4, r3
 8000e34:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e38:	40fd      	lsrs	r5, r7
 8000e3a:	40fc      	lsrs	r4, r7
 8000e3c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e40:	e9c6 5400 	strd	r5, r4, [r6]
 8000e44:	2700      	movs	r7, #0
 8000e46:	e747      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000e48:	f1c2 0320 	rsb	r3, r2, #32
 8000e4c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e50:	4095      	lsls	r5, r2
 8000e52:	fa01 f002 	lsl.w	r0, r1, r2
 8000e56:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e5e:	4338      	orrs	r0, r7
 8000e60:	0c01      	lsrs	r1, r0, #16
 8000e62:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e66:	fa1f f885 	uxth.w	r8, r5
 8000e6a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb07 f308 	mul.w	r3, r7, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x256>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e84:	d22f      	bcs.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d92d      	bls.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e8a:	3f02      	subs	r7, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1acb      	subs	r3, r1, r3
 8000e90:	b281      	uxth	r1, r0
 8000e92:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e96:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e9e:	fb00 f308 	mul.w	r3, r0, r8
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x27e>
 8000ea6:	1869      	adds	r1, r5, r1
 8000ea8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eac:	d217      	bcs.n	8000ede <__udivmoddi4+0x2a6>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d915      	bls.n	8000ede <__udivmoddi4+0x2a6>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4429      	add	r1, r5
 8000eb6:	1ac9      	subs	r1, r1, r3
 8000eb8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ebc:	e73b      	b.n	8000d36 <__udivmoddi4+0xfe>
 8000ebe:	4637      	mov	r7, r6
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	e709      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec4:	4607      	mov	r7, r0
 8000ec6:	e6e7      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6fb      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ecc:	4541      	cmp	r1, r8
 8000ece:	d2ab      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ed4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ed8:	3801      	subs	r0, #1
 8000eda:	4613      	mov	r3, r2
 8000edc:	e7a4      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ede:	4660      	mov	r0, ip
 8000ee0:	e7e9      	b.n	8000eb6 <__udivmoddi4+0x27e>
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	e795      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee6:	4667      	mov	r7, ip
 8000ee8:	e7d1      	b.n	8000e8e <__udivmoddi4+0x256>
 8000eea:	4681      	mov	r9, r0
 8000eec:	e77c      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	442c      	add	r4, r5
 8000ef2:	e747      	b.n	8000d84 <__udivmoddi4+0x14c>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	442b      	add	r3, r5
 8000efa:	e72f      	b.n	8000d5c <__udivmoddi4+0x124>
 8000efc:	4638      	mov	r0, r7
 8000efe:	e708      	b.n	8000d12 <__udivmoddi4+0xda>
 8000f00:	4637      	mov	r7, r6
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0xa0>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (src <= 0x80) {	/* ASCII */
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	2b80      	cmp	r3, #128	; 0x80
 8000f18:	d802      	bhi.n	8000f20 <ff_convert+0x18>
		c = src;
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	837b      	strh	r3, [r7, #26]
 8000f1e:	e053      	b.n	8000fc8 <ff_convert+0xc0>
			else
				hi = i;
		}
		c = n ? p[i * 2 + 1] : 0;
#else
		if (dir) {		/* OEMCP to unicode (Incremental search)*/
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d015      	beq.n	8000f52 <ff_convert+0x4a>
			p = &uni2sjis[1];
 8000f26:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <ff_convert+0xd0>)
 8000f28:	61fb      	str	r3, [r7, #28]
			do {
				c = *p;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	837b      	strh	r3, [r7, #26]
				p += 2;
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	3304      	adds	r3, #4
 8000f34:	61fb      	str	r3, [r7, #28]
			} while (c && c != src);
 8000f36:	8b7b      	ldrh	r3, [r7, #26]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <ff_convert+0x3c>
 8000f3c:	8b7a      	ldrh	r2, [r7, #26]
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d1f2      	bne.n	8000f2a <ff_convert+0x22>
			p -= 3;
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	3b06      	subs	r3, #6
 8000f48:	61fb      	str	r3, [r7, #28]
			c = *p;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	837b      	strh	r3, [r7, #26]
 8000f50:	e03a      	b.n	8000fc8 <ff_convert+0xc0>
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 8000f5a:	60bb      	str	r3, [r7, #8]
			for (n = 16; n; n--) {
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	e021      	b.n	8000fa6 <ff_convert+0x9e>
				i = li + (hi - li) / 2;
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	0fda      	lsrs	r2, r3, #31
 8000f6a:	4413      	add	r3, r2
 8000f6c:	105b      	asrs	r3, r3, #1
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]
				if (src == uni2sjis[i * 2]) break;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <ff_convert+0xd4>)
 8000f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f80:	88fa      	ldrh	r2, [r7, #6]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d013      	beq.n	8000fae <ff_convert+0xa6>
				if (src > uni2sjis[i * 2])
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <ff_convert+0xd4>)
 8000f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f90:	88fa      	ldrh	r2, [r7, #6]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d902      	bls.n	8000f9c <ff_convert+0x94>
					li = i;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	e001      	b.n	8000fa0 <ff_convert+0x98>
				else
					hi = i;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	60bb      	str	r3, [r7, #8]
			for (n = 16; n; n--) {
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1da      	bne.n	8000f62 <ff_convert+0x5a>
 8000fac:	e000      	b.n	8000fb0 <ff_convert+0xa8>
				if (src == uni2sjis[i * 2]) break;
 8000fae:	bf00      	nop
			}
			c = n ? uni2sjis[i * 2 + 1] : 0;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d006      	beq.n	8000fc4 <ff_convert+0xbc>
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <ff_convert+0xd4>)
 8000fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fc2:	e000      	b.n	8000fc6 <ff_convert+0xbe>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	837b      	strh	r3, [r7, #26]
		}
#endif
	}

	return c;
 8000fc8:	8b7b      	ldrh	r3, [r7, #26]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	; 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	0800c52e 	.word	0x0800c52e
 8000fdc:	0800c52c 	.word	0x0800c52c

08000fe0 <ff_wtoupper>:

WCHAR ff_wtoupper(WCHAR chr)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
	if(chr >= 'a' && chr <= 'z')
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	2b60      	cmp	r3, #96	; 0x60
 8000fee:	d906      	bls.n	8000ffe <ff_wtoupper+0x1e>
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	2b7a      	cmp	r3, #122	; 0x7a
 8000ff4:	d803      	bhi.n	8000ffe <ff_wtoupper+0x1e>
		return (chr - 32);
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	3b20      	subs	r3, #32
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	e000      	b.n	8001000 <ff_wtoupper+0x20>
	else
		return chr;
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <Mount_SD>:
//Debugging
const short sdioPrints = 1;


FRESULT Mount_SD (const TCHAR* path)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8001014:	2201      	movs	r2, #1
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	480e      	ldr	r0, [pc, #56]	; (8001054 <Mount_SD+0x48>)
 800101a:	f007 f975 	bl	8008308 <f_mount>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b0d      	ldr	r3, [pc, #52]	; (8001058 <Mount_SD+0x4c>)
 8001024:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 8001026:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <Mount_SD+0x4c>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d006      	beq.n	800103c <Mount_SD+0x30>
		if(sdioPrints) printf("ERROR!!! in mounting SD CARD...\n");
 800102e:	2301      	movs	r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	d009      	beq.n	8001048 <Mount_SD+0x3c>
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <Mount_SD+0x50>)
 8001036:	f008 fe4d 	bl	8009cd4 <puts>
 800103a:	e005      	b.n	8001048 <Mount_SD+0x3c>
	}
	else if(sdioPrints) printf("SD CARD mounted successfully...\n");
 800103c:	2301      	movs	r3, #1
 800103e:	2b00      	cmp	r3, #0
 8001040:	d002      	beq.n	8001048 <Mount_SD+0x3c>
 8001042:	4807      	ldr	r0, [pc, #28]	; (8001060 <Mount_SD+0x54>)
 8001044:	f008 fe46 	bl	8009cd4 <puts>

	return fresult;
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <Mount_SD+0x4c>)
 800104a:	781b      	ldrb	r3, [r3, #0]
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	20000428 	.word	0x20000428
 8001058:	2000066c 	.word	0x2000066c
 800105c:	0800bcf0 	.word	0x0800bcf0
 8001060:	0800bd10 	.word	0x0800bd10

08001064 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 800106c:	2201      	movs	r2, #1
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	2000      	movs	r0, #0
 8001072:	f007 f949 	bl	8008308 <f_mount>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <Unmount_SD+0x44>)
 800107c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 800107e:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <Unmount_SD+0x44>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d106      	bne.n	8001094 <Unmount_SD+0x30>
		if(sdioPrints) printf("SD CARD UNMOUNTED successfully...\n\n");
 8001086:	2301      	movs	r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d009      	beq.n	80010a0 <Unmount_SD+0x3c>
 800108c:	4807      	ldr	r0, [pc, #28]	; (80010ac <Unmount_SD+0x48>)
 800108e:	f008 fe21 	bl	8009cd4 <puts>
	}
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 8001092:	e005      	b.n	80010a0 <Unmount_SD+0x3c>
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 8001094:	2301      	movs	r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d002      	beq.n	80010a0 <Unmount_SD+0x3c>
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <Unmount_SD+0x4c>)
 800109c:	f008 fe1a 	bl	8009cd4 <puts>
}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	2000066c 	.word	0x2000066c
 80010ac:	0800bd30 	.word	0x0800bd30
 80010b0:	0800bd54 	.word	0x0800bd54

080010b4 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08e      	sub	sp, #56	; 0x38
 80010b8:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 80010ba:	2014      	movs	r0, #20
 80010bc:	f008 f87a 	bl	80091b4 <malloc>
 80010c0:	4603      	mov	r3, r0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 80010c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80010c6:	4929      	ldr	r1, [pc, #164]	; (800116c <Format_SD+0xb8>)
 80010c8:	461a      	mov	r2, r3
 80010ca:	460b      	mov	r3, r1
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	8013      	strh	r3, [r2, #0]

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80010d0:	463b      	mov	r3, r7
 80010d2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010d4:	4618      	mov	r0, r3
 80010d6:	f007 fdc4 	bl	8008c62 <f_opendir>
 80010da:	4603      	mov	r3, r0
 80010dc:	461a      	mov	r2, r3
 80010de:	4b24      	ldr	r3, [pc, #144]	; (8001170 <Format_SD+0xbc>)
 80010e0:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80010e2:	4b23      	ldr	r3, [pc, #140]	; (8001170 <Format_SD+0xbc>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d136      	bne.n	8001158 <Format_SD+0xa4>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80010ea:	463b      	mov	r3, r7
 80010ec:	4921      	ldr	r1, [pc, #132]	; (8001174 <Format_SD+0xc0>)
 80010ee:	4618      	mov	r0, r3
 80010f0:	f007 fe7b 	bl	8008dea <f_readdir>
 80010f4:	4603      	mov	r3, r0
 80010f6:	461a      	mov	r2, r3
 80010f8:	4b1d      	ldr	r3, [pc, #116]	; (8001170 <Format_SD+0xbc>)
 80010fa:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80010fc:	4b1c      	ldr	r3, [pc, #112]	; (8001170 <Format_SD+0xbc>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d125      	bne.n	8001150 <Format_SD+0x9c>
 8001104:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <Format_SD+0xc0>)
 8001106:	7d9b      	ldrb	r3, [r3, #22]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d021      	beq.n	8001150 <Format_SD+0x9c>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 800110c:	4b19      	ldr	r3, [pc, #100]	; (8001174 <Format_SD+0xc0>)
 800110e:	7a1b      	ldrb	r3, [r3, #8]
 8001110:	f003 0310 	and.w	r3, r3, #16
 8001114:	2b00      	cmp	r3, #0
 8001116:	d011      	beq.n	800113c <Format_SD+0x88>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001118:	4917      	ldr	r1, [pc, #92]	; (8001178 <Format_SD+0xc4>)
 800111a:	4818      	ldr	r0, [pc, #96]	; (800117c <Format_SD+0xc8>)
 800111c:	f7ff f878 	bl	8000210 <strcmp>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d012      	beq.n	800114c <Format_SD+0x98>
            	fresult = f_unlink(fno.fname);
 8001126:	4814      	ldr	r0, [pc, #80]	; (8001178 <Format_SD+0xc4>)
 8001128:	f007 fefc 	bl	8008f24 <f_unlink>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b0f      	ldr	r3, [pc, #60]	; (8001170 <Format_SD+0xbc>)
 8001132:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <Format_SD+0xbc>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b07      	cmp	r3, #7
 800113a:	e7d6      	b.n	80010ea <Format_SD+0x36>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 800113c:	480e      	ldr	r0, [pc, #56]	; (8001178 <Format_SD+0xc4>)
 800113e:	f007 fef1 	bl	8008f24 <f_unlink>
 8001142:	4603      	mov	r3, r0
 8001144:	461a      	mov	r2, r3
 8001146:	4b0a      	ldr	r3, [pc, #40]	; (8001170 <Format_SD+0xbc>)
 8001148:	701a      	strb	r2, [r3, #0]
 800114a:	e7ce      	b.n	80010ea <Format_SD+0x36>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800114c:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 800114e:	e7cc      	b.n	80010ea <Format_SD+0x36>
            }
        }
        f_closedir(&dir);
 8001150:	463b      	mov	r3, r7
 8001152:	4618      	mov	r0, r3
 8001154:	f007 fe23 	bl	8008d9e <f_closedir>
    }
    free(path);
 8001158:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800115a:	f008 f833 	bl	80091c4 <free>
    return fresult;
 800115e:	4b04      	ldr	r3, [pc, #16]	; (8001170 <Format_SD+0xbc>)
 8001160:	781b      	ldrb	r3, [r3, #0]
}
 8001162:	4618      	mov	r0, r3
 8001164:	3738      	adds	r7, #56	; 0x38
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	0800bda0 	.word	0x0800bda0
 8001170:	2000066c 	.word	0x2000066c
 8001174:	20000310 	.word	0x20000310
 8001178:	20000326 	.word	0x20000326
 800117c:	0800bd74 	.word	0x0800bd74

08001180 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b088      	sub	sp, #32
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001188:	494a      	ldr	r1, [pc, #296]	; (80012b4 <Create_File+0x134>)
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f007 fe85 	bl	8008e9a <f_stat>
 8001190:	4603      	mov	r3, r0
 8001192:	461a      	mov	r2, r3
 8001194:	4b48      	ldr	r3, [pc, #288]	; (80012b8 <Create_File+0x138>)
 8001196:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001198:	4b47      	ldr	r3, [pc, #284]	; (80012b8 <Create_File+0x138>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d115      	bne.n	80011cc <Create_File+0x4c>
	{
		char *buf = malloc(100*sizeof(char));
 80011a0:	2064      	movs	r0, #100	; 0x64
 80011a2:	f008 f807 	bl	80091b4 <malloc>
 80011a6:	4603      	mov	r3, r0
 80011a8:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",name);
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4943      	ldr	r1, [pc, #268]	; (80012bc <Create_File+0x13c>)
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f008 fddc 	bl	8009d6c <siprintf>
		if(sdioPrints) printf(buf);
 80011b4:	2301      	movs	r3, #1
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d002      	beq.n	80011c0 <Create_File+0x40>
 80011ba:	68f8      	ldr	r0, [r7, #12]
 80011bc:	f008 fd16 	bl	8009bec <iprintf>
		free(buf);
 80011c0:	68f8      	ldr	r0, [r7, #12]
 80011c2:	f007 ffff 	bl	80091c4 <free>
	    return fresult;
 80011c6:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <Create_File+0x138>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	e06f      	b.n	80012ac <Create_File+0x12c>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80011cc:	220b      	movs	r2, #11
 80011ce:	6879      	ldr	r1, [r7, #4]
 80011d0:	483b      	ldr	r0, [pc, #236]	; (80012c0 <Create_File+0x140>)
 80011d2:	f007 f8df 	bl	8008394 <f_open>
 80011d6:	4603      	mov	r3, r0
 80011d8:	461a      	mov	r2, r3
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <Create_File+0x138>)
 80011dc:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011de:	4b36      	ldr	r3, [pc, #216]	; (80012b8 <Create_File+0x138>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d018      	beq.n	8001218 <Create_File+0x98>
		{
			char *buf = malloc(100*sizeof(char));
 80011e6:	2064      	movs	r0, #100	; 0x64
 80011e8:	f007 ffe4 	bl	80091b4 <malloc>
 80011ec:	4603      	mov	r3, r0
 80011ee:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n", fresult, name);
 80011f0:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <Create_File+0x138>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4932      	ldr	r1, [pc, #200]	; (80012c4 <Create_File+0x144>)
 80011fa:	6938      	ldr	r0, [r7, #16]
 80011fc:	f008 fdb6 	bl	8009d6c <siprintf>
			if(sdioPrints) printf(buf);
 8001200:	2301      	movs	r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d002      	beq.n	800120c <Create_File+0x8c>
 8001206:	6938      	ldr	r0, [r7, #16]
 8001208:	f008 fcf0 	bl	8009bec <iprintf>
			free(buf);
 800120c:	6938      	ldr	r0, [r7, #16]
 800120e:	f007 ffd9 	bl	80091c4 <free>
		    return fresult;
 8001212:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <Create_File+0x138>)
 8001214:	781b      	ldrb	r3, [r3, #0]
 8001216:	e049      	b.n	80012ac <Create_File+0x12c>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001218:	2064      	movs	r0, #100	; 0x64
 800121a:	f007 ffcb 	bl	80091b4 <malloc>
 800121e:	4603      	mov	r3, r0
 8001220:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	4928      	ldr	r1, [pc, #160]	; (80012c8 <Create_File+0x148>)
 8001226:	69f8      	ldr	r0, [r7, #28]
 8001228:	f008 fda0 	bl	8009d6c <siprintf>
			if(sdioPrints) printf(buf);
 800122c:	2301      	movs	r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d002      	beq.n	8001238 <Create_File+0xb8>
 8001232:	69f8      	ldr	r0, [r7, #28]
 8001234:	f008 fcda 	bl	8009bec <iprintf>
			free(buf);
 8001238:	69f8      	ldr	r0, [r7, #28]
 800123a:	f007 ffc3 	bl	80091c4 <free>
		}

		fresult = f_close(&fil);
 800123e:	4820      	ldr	r0, [pc, #128]	; (80012c0 <Create_File+0x140>)
 8001240:	f007 fce5 	bl	8008c0e <f_close>
 8001244:	4603      	mov	r3, r0
 8001246:	461a      	mov	r2, r3
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <Create_File+0x138>)
 800124a:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <Create_File+0x138>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d016      	beq.n	8001282 <Create_File+0x102>
		{
			char *buf = malloc(100*sizeof(char));
 8001254:	2064      	movs	r0, #100	; 0x64
 8001256:	f007 ffad 	bl	80091b4 <malloc>
 800125a:	4603      	mov	r3, r0
 800125c:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 800125e:	4b16      	ldr	r3, [pc, #88]	; (80012b8 <Create_File+0x138>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4919      	ldr	r1, [pc, #100]	; (80012cc <Create_File+0x14c>)
 8001268:	6978      	ldr	r0, [r7, #20]
 800126a:	f008 fd7f 	bl	8009d6c <siprintf>
			if(sdioPrints) printf(buf);
 800126e:	2301      	movs	r3, #1
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <Create_File+0xfa>
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f008 fcb9 	bl	8009bec <iprintf>
			free(buf);
 800127a:	6978      	ldr	r0, [r7, #20]
 800127c:	f007 ffa2 	bl	80091c4 <free>
 8001280:	e012      	b.n	80012a8 <Create_File+0x128>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001282:	2064      	movs	r0, #100	; 0x64
 8001284:	f007 ff96 	bl	80091b4 <malloc>
 8001288:	4603      	mov	r3, r0
 800128a:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	4910      	ldr	r1, [pc, #64]	; (80012d0 <Create_File+0x150>)
 8001290:	69b8      	ldr	r0, [r7, #24]
 8001292:	f008 fd6b 	bl	8009d6c <siprintf>
			if(sdioPrints) printf(buf);
 8001296:	2301      	movs	r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <Create_File+0x122>
 800129c:	69b8      	ldr	r0, [r7, #24]
 800129e:	f008 fca5 	bl	8009bec <iprintf>
			free(buf);
 80012a2:	69b8      	ldr	r0, [r7, #24]
 80012a4:	f007 ff8e 	bl	80091c4 <free>
		}
	}
    return fresult;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <Create_File+0x138>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3720      	adds	r7, #32
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000310 	.word	0x20000310
 80012b8:	2000066c 	.word	0x2000066c
 80012bc:	0800bf14 	.word	0x0800bf14
 80012c0:	20000674 	.word	0x20000674
 80012c4:	0800bf48 	.word	0x0800bf48
 80012c8:	0800bf70 	.word	0x0800bf70
 80012cc:	0800bfb0 	.word	0x0800bfb0
 80012d0:	0800bef4 	.word	0x0800bef4

080012d4 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b088      	sub	sp, #32
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80012de:	495f      	ldr	r1, [pc, #380]	; (800145c <Update_File+0x188>)
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f007 fdda 	bl	8008e9a <f_stat>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	4b5d      	ldr	r3, [pc, #372]	; (8001460 <Update_File+0x18c>)
 80012ec:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80012ee:	4b5c      	ldr	r3, [pc, #368]	; (8001460 <Update_File+0x18c>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d015      	beq.n	8001322 <Update_File+0x4e>
	{
		char *buf = malloc(100*sizeof(char));
 80012f6:	2064      	movs	r0, #100	; 0x64
 80012f8:	f007 ff5c 	bl	80091b4 <malloc>
 80012fc:	4603      	mov	r3, r0
 80012fe:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n", name);
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	4958      	ldr	r1, [pc, #352]	; (8001464 <Update_File+0x190>)
 8001304:	68b8      	ldr	r0, [r7, #8]
 8001306:	f008 fd31 	bl	8009d6c <siprintf>
		if(sdioPrints) printf (buf);
 800130a:	2301      	movs	r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d002      	beq.n	8001316 <Update_File+0x42>
 8001310:	68b8      	ldr	r0, [r7, #8]
 8001312:	f008 fc6b 	bl	8009bec <iprintf>
		free(buf);
 8001316:	68b8      	ldr	r0, [r7, #8]
 8001318:	f007 ff54 	bl	80091c4 <free>
	    return fresult;
 800131c:	4b50      	ldr	r3, [pc, #320]	; (8001460 <Update_File+0x18c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	e097      	b.n	8001452 <Update_File+0x17e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8001322:	2232      	movs	r2, #50	; 0x32
 8001324:	6879      	ldr	r1, [r7, #4]
 8001326:	4850      	ldr	r0, [pc, #320]	; (8001468 <Update_File+0x194>)
 8001328:	f007 f834 	bl	8008394 <f_open>
 800132c:	4603      	mov	r3, r0
 800132e:	461a      	mov	r2, r3
 8001330:	4b4b      	ldr	r3, [pc, #300]	; (8001460 <Update_File+0x18c>)
 8001332:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001334:	4b4a      	ldr	r3, [pc, #296]	; (8001460 <Update_File+0x18c>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b00      	cmp	r3, #0
 800133a:	d018      	beq.n	800136e <Update_File+0x9a>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800133c:	2064      	movs	r0, #100	; 0x64
 800133e:	f007 ff39 	bl	80091b4 <malloc>
 8001342:	4603      	mov	r3, r0
 8001344:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n", fresult, name);
 8001346:	4b46      	ldr	r3, [pc, #280]	; (8001460 <Update_File+0x18c>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	461a      	mov	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4947      	ldr	r1, [pc, #284]	; (800146c <Update_File+0x198>)
 8001350:	68f8      	ldr	r0, [r7, #12]
 8001352:	f008 fd0b 	bl	8009d6c <siprintf>
	    	if(sdioPrints) printf(buf);
 8001356:	2301      	movs	r3, #1
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <Update_File+0x8e>
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f008 fc45 	bl	8009bec <iprintf>
	        free(buf);
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f007 ff2e 	bl	80091c4 <free>
	        return fresult;
 8001368:	4b3d      	ldr	r3, [pc, #244]	; (8001460 <Update_File+0x18c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	e071      	b.n	8001452 <Update_File+0x17e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f7fe ff58 	bl	8000224 <strlen>
 8001374:	4602      	mov	r2, r0
 8001376:	4b3e      	ldr	r3, [pc, #248]	; (8001470 <Update_File+0x19c>)
 8001378:	6839      	ldr	r1, [r7, #0]
 800137a:	483b      	ldr	r0, [pc, #236]	; (8001468 <Update_File+0x194>)
 800137c:	f007 fa54 	bl	8008828 <f_write>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <Update_File+0x18c>)
 8001386:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001388:	4b35      	ldr	r3, [pc, #212]	; (8001460 <Update_File+0x18c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d016      	beq.n	80013be <Update_File+0xea>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001390:	2064      	movs	r0, #100	; 0x64
 8001392:	f007 ff0f 	bl	80091b4 <malloc>
 8001396:	4603      	mov	r3, r0
 8001398:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n", fresult, name);
 800139a:	4b31      	ldr	r3, [pc, #196]	; (8001460 <Update_File+0x18c>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	4934      	ldr	r1, [pc, #208]	; (8001474 <Update_File+0x1a0>)
 80013a4:	69b8      	ldr	r0, [r7, #24]
 80013a6:	f008 fce1 	bl	8009d6c <siprintf>
	    	if(sdioPrints) printf(buf);
 80013aa:	2301      	movs	r3, #1
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d002      	beq.n	80013b6 <Update_File+0xe2>
 80013b0:	69b8      	ldr	r0, [r7, #24]
 80013b2:	f008 fc1b 	bl	8009bec <iprintf>
	    	free(buf);
 80013b6:	69b8      	ldr	r0, [r7, #24]
 80013b8:	f007 ff04 	bl	80091c4 <free>
 80013bc:	e012      	b.n	80013e4 <Update_File+0x110>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013be:	2064      	movs	r0, #100	; 0x64
 80013c0:	f007 fef8 	bl	80091b4 <malloc>
 80013c4:	4603      	mov	r3, r0
 80013c6:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	492b      	ldr	r1, [pc, #172]	; (8001478 <Update_File+0x1a4>)
 80013cc:	69f8      	ldr	r0, [r7, #28]
 80013ce:	f008 fccd 	bl	8009d6c <siprintf>
	    	if(sdioPrints) printf(buf);
 80013d2:	2301      	movs	r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d002      	beq.n	80013de <Update_File+0x10a>
 80013d8:	69f8      	ldr	r0, [r7, #28]
 80013da:	f008 fc07 	bl	8009bec <iprintf>
	    	free(buf);
 80013de:	69f8      	ldr	r0, [r7, #28]
 80013e0:	f007 fef0 	bl	80091c4 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80013e4:	4820      	ldr	r0, [pc, #128]	; (8001468 <Update_File+0x194>)
 80013e6:	f007 fc12 	bl	8008c0e <f_close>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <Update_File+0x18c>)
 80013f0:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <Update_File+0x18c>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d016      	beq.n	8001428 <Update_File+0x154>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013fa:	2064      	movs	r0, #100	; 0x64
 80013fc:	f007 feda 	bl	80091b4 <malloc>
 8001400:	4603      	mov	r3, r0
 8001402:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n", fresult, name);
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <Update_File+0x18c>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	491b      	ldr	r1, [pc, #108]	; (800147c <Update_File+0x1a8>)
 800140e:	6938      	ldr	r0, [r7, #16]
 8001410:	f008 fcac 	bl	8009d6c <siprintf>
	    	if(sdioPrints) printf(buf);
 8001414:	2301      	movs	r3, #1
 8001416:	2b00      	cmp	r3, #0
 8001418:	d002      	beq.n	8001420 <Update_File+0x14c>
 800141a:	6938      	ldr	r0, [r7, #16]
 800141c:	f008 fbe6 	bl	8009bec <iprintf>
	    	free(buf);
 8001420:	6938      	ldr	r0, [r7, #16]
 8001422:	f007 fecf 	bl	80091c4 <free>
 8001426:	e012      	b.n	800144e <Update_File+0x17a>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001428:	2064      	movs	r0, #100	; 0x64
 800142a:	f007 fec3 	bl	80091b4 <malloc>
 800142e:	4603      	mov	r3, r0
 8001430:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001432:	687a      	ldr	r2, [r7, #4]
 8001434:	4912      	ldr	r1, [pc, #72]	; (8001480 <Update_File+0x1ac>)
 8001436:	6978      	ldr	r0, [r7, #20]
 8001438:	f008 fc98 	bl	8009d6c <siprintf>
	    	if(sdioPrints) printf(buf);
 800143c:	2301      	movs	r3, #1
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <Update_File+0x174>
 8001442:	6978      	ldr	r0, [r7, #20]
 8001444:	f008 fbd2 	bl	8009bec <iprintf>
	    	free(buf);
 8001448:	6978      	ldr	r0, [r7, #20]
 800144a:	f007 febb 	bl	80091c4 <free>
	     }
	}
    return fresult;
 800144e:	4b04      	ldr	r3, [pc, #16]	; (8001460 <Update_File+0x18c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3720      	adds	r7, #32
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000310 	.word	0x20000310
 8001460:	2000066c 	.word	0x2000066c
 8001464:	0800bda4 	.word	0x0800bda4
 8001468:	20000674 	.word	0x20000674
 800146c:	0800bdc4 	.word	0x0800bdc4
 8001470:	20000664 	.word	0x20000664
 8001474:	0800bfd4 	.word	0x0800bfd4
 8001478:	0800bffc 	.word	0x0800bffc
 800147c:	0800becc 	.word	0x0800becc
 8001480:	0800bef4 	.word	0x0800bef4

08001484 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800148c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001490:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b00      	cmp	r3, #0
 800149a:	d013      	beq.n	80014c4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800149c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014a0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80014a4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d00b      	beq.n	80014c4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014ac:	e000      	b.n	80014b0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014ae:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d0f9      	beq.n	80014ae <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014ba:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014c4:	687b      	ldr	r3, [r7, #4]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr

080014d2 <_write>:
int indx = 0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
int _write(int file, char *ptr, int len)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b086      	sub	sp, #24
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 80014de:	2300      	movs	r3, #0
 80014e0:	617b      	str	r3, [r7, #20]
 80014e2:	e009      	b.n	80014f8 <_write+0x26>
		ITM_SendChar((*ptr++));
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	1c5a      	adds	r2, r3, #1
 80014e8:	60ba      	str	r2, [r7, #8]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff ffc9 	bl	8001484 <ITM_SendChar>
	for(int i=0; i<len; i++)
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	3301      	adds	r3, #1
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	697a      	ldr	r2, [r7, #20]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	dbf1      	blt.n	80014e4 <_write+0x12>

	return len;
 8001500:	687b      	ldr	r3, [r7, #4]
}
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
	...

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	b590      	push	{r4, r7, lr}
 800150e:	b09d      	sub	sp, #116	; 0x74
 8001510:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001512:	f001 f81b 	bl	800254c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001516:	f000 f903 	bl	8001720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151a:	f000 f9ad 	bl	8001878 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 800151e:	f000 f98b 	bl	8001838 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001522:	f004 fa1f 	bl	8005964 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	/* Initialize all configured peripherals */
    MX_GPIO_Init();
 8001526:	f000 f9a7 	bl	8001878 <MX_GPIO_Init>
    MX_SDIO_SD_Init();
 800152a:	f000 f985 	bl	8001838 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 800152e:	f004 fa19 	bl	8005964 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */

    //Create new file with a GPS naming convention
	second = 53;
 8001532:	4b6f      	ldr	r3, [pc, #444]	; (80016f0 <main+0x1e4>)
 8001534:	2235      	movs	r2, #53	; 0x35
 8001536:	601a      	str	r2, [r3, #0]
	minute = 33;
 8001538:	4b6e      	ldr	r3, [pc, #440]	; (80016f4 <main+0x1e8>)
 800153a:	2221      	movs	r2, #33	; 0x21
 800153c:	601a      	str	r2, [r3, #0]
	hour = 14;
 800153e:	4b6e      	ldr	r3, [pc, #440]	; (80016f8 <main+0x1ec>)
 8001540:	220e      	movs	r2, #14
 8001542:	601a      	str	r2, [r3, #0]
	day = 24;
 8001544:	4b6d      	ldr	r3, [pc, #436]	; (80016fc <main+0x1f0>)
 8001546:	2218      	movs	r2, #24
 8001548:	601a      	str	r2, [r3, #0]
	month = 3;
 800154a:	4b6d      	ldr	r3, [pc, #436]	; (8001700 <main+0x1f4>)
 800154c:	2203      	movs	r2, #3
 800154e:	601a      	str	r2, [r3, #0]
	year = 2021;
 8001550:	4b6c      	ldr	r3, [pc, #432]	; (8001704 <main+0x1f8>)
 8001552:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8001556:	601a      	str	r2, [r3, #0]
	char dayS[12], monthS[12], yearS[12], hourS[12], minuteS[12], secondS[12];
	sprintf(dayS, "%d", day);
 8001558:	4b68      	ldr	r3, [pc, #416]	; (80016fc <main+0x1f0>)
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001560:	4969      	ldr	r1, [pc, #420]	; (8001708 <main+0x1fc>)
 8001562:	4618      	mov	r0, r3
 8001564:	f008 fc02 	bl	8009d6c <siprintf>
	sprintf(monthS, "%d", month);
 8001568:	4b65      	ldr	r3, [pc, #404]	; (8001700 <main+0x1f4>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001570:	4965      	ldr	r1, [pc, #404]	; (8001708 <main+0x1fc>)
 8001572:	4618      	mov	r0, r3
 8001574:	f008 fbfa 	bl	8009d6c <siprintf>
	sprintf(yearS, "%d", year);
 8001578:	4b62      	ldr	r3, [pc, #392]	; (8001704 <main+0x1f8>)
 800157a:	681a      	ldr	r2, [r3, #0]
 800157c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001580:	4961      	ldr	r1, [pc, #388]	; (8001708 <main+0x1fc>)
 8001582:	4618      	mov	r0, r3
 8001584:	f008 fbf2 	bl	8009d6c <siprintf>
	sprintf(hourS, "%d", hour);
 8001588:	4b5b      	ldr	r3, [pc, #364]	; (80016f8 <main+0x1ec>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	f107 031c 	add.w	r3, r7, #28
 8001590:	495d      	ldr	r1, [pc, #372]	; (8001708 <main+0x1fc>)
 8001592:	4618      	mov	r0, r3
 8001594:	f008 fbea 	bl	8009d6c <siprintf>
	sprintf(minuteS, "%d", minute);
 8001598:	4b56      	ldr	r3, [pc, #344]	; (80016f4 <main+0x1e8>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	f107 0310 	add.w	r3, r7, #16
 80015a0:	4959      	ldr	r1, [pc, #356]	; (8001708 <main+0x1fc>)
 80015a2:	4618      	mov	r0, r3
 80015a4:	f008 fbe2 	bl	8009d6c <siprintf>
	sprintf(secondS, "%d", second);
 80015a8:	4b51      	ldr	r3, [pc, #324]	; (80016f0 <main+0x1e4>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	1d3b      	adds	r3, r7, #4
 80015ae:	4956      	ldr	r1, [pc, #344]	; (8001708 <main+0x1fc>)
 80015b0:	4618      	mov	r0, r3
 80015b2:	f008 fbdb 	bl	8009d6c <siprintf>
	int lenF = strlen("DFR_")+strlen(dayS)+strlen("-")+strlen(monthS)+strlen("-")+strlen(yearS)+strlen("_")+strlen(secondS)+strlen("-")+strlen(minuteS)+strlen("-")+strlen(hourS)+strlen(".csv")+1;
 80015b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe fe32 	bl	8000224 <strlen>
 80015c0:	4604      	mov	r4, r0
 80015c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe fe2c 	bl	8000224 <strlen>
 80015cc:	4603      	mov	r3, r0
 80015ce:	441c      	add	r4, r3
 80015d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7fe fe25 	bl	8000224 <strlen>
 80015da:	4603      	mov	r3, r0
 80015dc:	441c      	add	r4, r3
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	4618      	mov	r0, r3
 80015e2:	f7fe fe1f 	bl	8000224 <strlen>
 80015e6:	4603      	mov	r3, r0
 80015e8:	441c      	add	r4, r3
 80015ea:	f107 0310 	add.w	r3, r7, #16
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fe18 	bl	8000224 <strlen>
 80015f4:	4603      	mov	r3, r0
 80015f6:	441c      	add	r4, r3
 80015f8:	f107 031c 	add.w	r3, r7, #28
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7fe fe11 	bl	8000224 <strlen>
 8001602:	4603      	mov	r3, r0
 8001604:	4423      	add	r3, r4
 8001606:	330e      	adds	r3, #14
 8001608:	657b      	str	r3, [r7, #84]	; 0x54
	char FileName[lenF];
 800160a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800160c:	1e43      	subs	r3, r0, #1
 800160e:	653b      	str	r3, [r7, #80]	; 0x50
 8001610:	4603      	mov	r3, r0
 8001612:	4619      	mov	r1, r3
 8001614:	f04f 0200 	mov.w	r2, #0
 8001618:	f04f 0300 	mov.w	r3, #0
 800161c:	f04f 0400 	mov.w	r4, #0
 8001620:	00d4      	lsls	r4, r2, #3
 8001622:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001626:	00cb      	lsls	r3, r1, #3
 8001628:	4603      	mov	r3, r0
 800162a:	4619      	mov	r1, r3
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	f04f 0300 	mov.w	r3, #0
 8001634:	f04f 0400 	mov.w	r4, #0
 8001638:	00d4      	lsls	r4, r2, #3
 800163a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800163e:	00cb      	lsls	r3, r1, #3
 8001640:	4603      	mov	r3, r0
 8001642:	3307      	adds	r3, #7
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	ebad 0d03 	sub.w	sp, sp, r3
 800164c:	ab06      	add	r3, sp, #24
 800164e:	3300      	adds	r3, #0
 8001650:	64fb      	str	r3, [r7, #76]	; 0x4c
	snprintf(FileName,lenF,"DFR_%s-%s-%s_%s-%s-%s.CSV", dayS, monthS, yearS, secondS, minuteS, hourS);
 8001652:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001654:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001656:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800165a:	f107 031c 	add.w	r3, r7, #28
 800165e:	9304      	str	r3, [sp, #16]
 8001660:	f107 0310 	add.w	r3, r7, #16
 8001664:	9303      	str	r3, [sp, #12]
 8001666:	1d3b      	adds	r3, r7, #4
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800166e:	9301      	str	r3, [sp, #4]
 8001670:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001674:	9300      	str	r3, [sp, #0]
 8001676:	4613      	mov	r3, r2
 8001678:	4a24      	ldr	r2, [pc, #144]	; (800170c <main+0x200>)
 800167a:	f008 fb43 	bl	8009d04 <sniprintf>

	fresult = Mount_SD("/");
 800167e:	4824      	ldr	r0, [pc, #144]	; (8001710 <main+0x204>)
 8001680:	f7ff fcc4 	bl	800100c <Mount_SD>
 8001684:	4603      	mov	r3, r0
 8001686:	461a      	mov	r2, r3
 8001688:	4b22      	ldr	r3, [pc, #136]	; (8001714 <main+0x208>)
 800168a:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 800168c:	4b21      	ldr	r3, [pc, #132]	; (8001714 <main+0x208>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f000 f97f 	bl	8001994 <SD_Check>
	Format_SD();
 8001696:	f7ff fd0d 	bl	80010b4 <Format_SD>
	fresult = Create_File(FileName);
 800169a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fd6f 	bl	8001180 <Create_File>
 80016a2:	4603      	mov	r3, r0
 80016a4:	461a      	mov	r2, r3
 80016a6:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <main+0x208>)
 80016a8:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <main+0x208>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	4618      	mov	r0, r3
 80016b0:	f000 f970 	bl	8001994 <SD_Check>
	Unmount_SD("/");
 80016b4:	4816      	ldr	r0, [pc, #88]	; (8001710 <main+0x204>)
 80016b6:	f7ff fcd5 	bl	8001064 <Unmount_SD>



	csvHeader(FileName, lenF);
 80016ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016be:	4618      	mov	r0, r3
 80016c0:	f000 f994 	bl	80019ec <csvHeader>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		csvUpdate(FileName, lenF);
 80016c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fb9b 	bl	8001e04 <csvUpdate>
		indx++;
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <main+0x20c>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	4a10      	ldr	r2, [pc, #64]	; (8001718 <main+0x20c>)
 80016d6:	6013      	str	r3, [r2, #0]
		printf("\n Count: %d \n", indx);
 80016d8:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <main+0x20c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	480f      	ldr	r0, [pc, #60]	; (800171c <main+0x210>)
 80016e0:	f008 fa84 	bl	8009bec <iprintf>

		HAL_Delay(2000);
 80016e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016e8:	f000 ffa2 	bl	8002630 <HAL_Delay>
		csvUpdate(FileName, lenF);
 80016ec:	e7ea      	b.n	80016c4 <main+0x1b8>
 80016ee:	bf00      	nop
 80016f0:	200008d4 	.word	0x200008d4
 80016f4:	200008dc 	.word	0x200008dc
 80016f8:	2000096c 	.word	0x2000096c
 80016fc:	20000a20 	.word	0x20000a20
 8001700:	200008d0 	.word	0x200008d0
 8001704:	20000a14 	.word	0x20000a14
 8001708:	0800c0e8 	.word	0x0800c0e8
 800170c:	0800c0ec 	.word	0x0800c0ec
 8001710:	0800c108 	.word	0x0800c108
 8001714:	2000066c 	.word	0x2000066c
 8001718:	200002c8 	.word	0x200002c8
 800171c:	0800c10c 	.word	0x0800c10c

08001720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b0ac      	sub	sp, #176	; 0xb0
 8001724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001726:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800172a:	2234      	movs	r2, #52	; 0x34
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f007 fd50 	bl	80091d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001734:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001744:	f107 030c 	add.w	r3, r7, #12
 8001748:	225c      	movs	r2, #92	; 0x5c
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f007 fd41 	bl	80091d4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60bb      	str	r3, [r7, #8]
 8001756:	4b36      	ldr	r3, [pc, #216]	; (8001830 <SystemClock_Config+0x110>)
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	4a35      	ldr	r2, [pc, #212]	; (8001830 <SystemClock_Config+0x110>)
 800175c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001760:	6413      	str	r3, [r2, #64]	; 0x40
 8001762:	4b33      	ldr	r3, [pc, #204]	; (8001830 <SystemClock_Config+0x110>)
 8001764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800176a:	60bb      	str	r3, [r7, #8]
 800176c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800176e:	2300      	movs	r3, #0
 8001770:	607b      	str	r3, [r7, #4]
 8001772:	4b30      	ldr	r3, [pc, #192]	; (8001834 <SystemClock_Config+0x114>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800177a:	4a2e      	ldr	r2, [pc, #184]	; (8001834 <SystemClock_Config+0x114>)
 800177c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001780:	6013      	str	r3, [r2, #0]
 8001782:	4b2c      	ldr	r3, [pc, #176]	; (8001834 <SystemClock_Config+0x114>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800178e:	2301      	movs	r3, #1
 8001790:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001792:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001796:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800179a:	2302      	movs	r3, #2
 800179c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017a8:	2308      	movs	r3, #8
 80017aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 100;
 80017ae:	2364      	movs	r3, #100	; 0x64
 80017b0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017b4:	2302      	movs	r3, #2
 80017b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017ba:	2303      	movs	r3, #3
 80017bc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017c0:	2302      	movs	r3, #2
 80017c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017ca:	4618      	mov	r0, r3
 80017cc:	f001 ff94 	bl	80036f8 <HAL_RCC_OscConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <SystemClock_Config+0xba>
  {
    Error_Handler();
 80017d6:	f000 fd2b 	bl	8002230 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017da:	230f      	movs	r3, #15
 80017dc:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017de:	2302      	movs	r3, #2
 80017e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ea:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017f0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80017f4:	2101      	movs	r1, #1
 80017f6:	4618      	mov	r0, r3
 80017f8:	f001 f9ce 	bl	8002b98 <HAL_RCC_ClockConfig>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001802:	f000 fd15 	bl	8002230 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001806:	f44f 7340 	mov.w	r3, #768	; 0x300
 800180a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 800180c:	2300      	movs	r3, #0
 800180e:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001810:	2300      	movs	r3, #0
 8001812:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	4618      	mov	r0, r3
 800181a:	f001 faa3 	bl	8002d64 <HAL_RCCEx_PeriphCLKConfig>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <SystemClock_Config+0x108>
  {
    Error_Handler();
 8001824:	f000 fd04 	bl	8002230 <Error_Handler>
  }
}
 8001828:	bf00      	nop
 800182a:	37b0      	adds	r7, #176	; 0xb0
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40023800 	.word	0x40023800
 8001834:	40007000 	.word	0x40007000

08001838 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_SDIO_SD_Init+0x38>)
 800183e:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <MX_SDIO_SD_Init+0x3c>)
 8001840:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <MX_SDIO_SD_Init+0x38>)
 8001844:	2200      	movs	r2, #0
 8001846:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_SDIO_SD_Init+0x38>)
 800184a:	2200      	movs	r2, #0
 800184c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <MX_SDIO_SD_Init+0x38>)
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_SDIO_SD_Init+0x38>)
 8001856:	2200      	movs	r2, #0
 8001858:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <MX_SDIO_SD_Init+0x38>)
 800185c:	2200      	movs	r2, #0
 800185e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 16;
 8001860:	4b03      	ldr	r3, [pc, #12]	; (8001870 <MX_SDIO_SD_Init+0x38>)
 8001862:	2210      	movs	r2, #16
 8001864:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001866:	bf00      	nop
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	20000980 	.word	0x20000980
 8001874:	40012c00 	.word	0x40012c00

08001878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	613b      	str	r3, [r7, #16]
 8001892:	4b3c      	ldr	r3, [pc, #240]	; (8001984 <MX_GPIO_Init+0x10c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a3b      	ldr	r2, [pc, #236]	; (8001984 <MX_GPIO_Init+0x10c>)
 8001898:	f043 0304 	orr.w	r3, r3, #4
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b39      	ldr	r3, [pc, #228]	; (8001984 <MX_GPIO_Init+0x10c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0304 	and.w	r3, r3, #4
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b35      	ldr	r3, [pc, #212]	; (8001984 <MX_GPIO_Init+0x10c>)
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	4a34      	ldr	r2, [pc, #208]	; (8001984 <MX_GPIO_Init+0x10c>)
 80018b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018b8:	6313      	str	r3, [r2, #48]	; 0x30
 80018ba:	4b32      	ldr	r3, [pc, #200]	; (8001984 <MX_GPIO_Init+0x10c>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <MX_GPIO_Init+0x10c>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a2d      	ldr	r2, [pc, #180]	; (8001984 <MX_GPIO_Init+0x10c>)
 80018d0:	f043 0301 	orr.w	r3, r3, #1
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b2b      	ldr	r3, [pc, #172]	; (8001984 <MX_GPIO_Init+0x10c>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	607b      	str	r3, [r7, #4]
 80018e6:	4b27      	ldr	r3, [pc, #156]	; (8001984 <MX_GPIO_Init+0x10c>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a26      	ldr	r2, [pc, #152]	; (8001984 <MX_GPIO_Init+0x10c>)
 80018ec:	f043 0308 	orr.w	r3, r3, #8
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b24      	ldr	r3, [pc, #144]	; (8001984 <MX_GPIO_Init+0x10c>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <MX_GPIO_Init+0x10c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a1f      	ldr	r2, [pc, #124]	; (8001984 <MX_GPIO_Init+0x10c>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <MX_GPIO_Init+0x10c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	603b      	str	r3, [r7, #0]
 8001918:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	2120      	movs	r1, #32
 800191e:	481a      	ldr	r0, [pc, #104]	; (8001988 <MX_GPIO_Init+0x110>)
 8001920:	f001 f920 	bl	8002b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001924:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001928:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800192a:	4b18      	ldr	r3, [pc, #96]	; (800198c <MX_GPIO_Init+0x114>)
 800192c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800192e:	2300      	movs	r3, #0
 8001930:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001932:	f107 0314 	add.w	r3, r7, #20
 8001936:	4619      	mov	r1, r3
 8001938:	4815      	ldr	r0, [pc, #84]	; (8001990 <MX_GPIO_Init+0x118>)
 800193a:	f000 ff81 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 800193e:	2308      	movs	r3, #8
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800194a:	2303      	movs	r3, #3
 800194c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800194e:	2307      	movs	r3, #7
 8001950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001952:	f107 0314 	add.w	r3, r7, #20
 8001956:	4619      	mov	r1, r3
 8001958:	480b      	ldr	r0, [pc, #44]	; (8001988 <MX_GPIO_Init+0x110>)
 800195a:	f000 ff71 	bl	8002840 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800195e:	2320      	movs	r3, #32
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001962:	2301      	movs	r3, #1
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800196e:	f107 0314 	add.w	r3, r7, #20
 8001972:	4619      	mov	r1, r3
 8001974:	4804      	ldr	r0, [pc, #16]	; (8001988 <MX_GPIO_Init+0x110>)
 8001976:	f000 ff63 	bl	8002840 <HAL_GPIO_Init>

}
 800197a:	bf00      	nop
 800197c:	3728      	adds	r7, #40	; 0x28
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40020000 	.word	0x40020000
 800198c:	10210000 	.word	0x10210000
 8001990:	40020800 	.word	0x40020800

08001994 <SD_Check>:

/* USER CODE BEGIN 4 */


void SD_Check(FRESULT fresult) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	4603      	mov	r3, r0
 800199c:	71fb      	strb	r3, [r7, #7]
	if(fresult != FR_OK) {
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d00b      	beq.n	80019bc <SD_Check+0x28>
		isSaving = 0;
 80019a4:	4b0d      	ldr	r3, [pc, #52]	; (80019dc <SD_Check+0x48>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	801a      	strh	r2, [r3, #0]
		if(enablePrintf)
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <SD_Check+0x4c>)
 80019ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00e      	beq.n	80019d2 <SD_Check+0x3e>
			printf("ERROR - SD card is NOT saving!\n");
 80019b4:	480b      	ldr	r0, [pc, #44]	; (80019e4 <SD_Check+0x50>)
 80019b6:	f008 f98d 	bl	8009cd4 <puts>
	else {
		isSaving = 1;
		if(enablePrintf)
			printf("Successfully saved to SD Card\n");
	}
}
 80019ba:	e00a      	b.n	80019d2 <SD_Check+0x3e>
		isSaving = 1;
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <SD_Check+0x48>)
 80019be:	2201      	movs	r2, #1
 80019c0:	801a      	strh	r2, [r3, #0]
		if(enablePrintf)
 80019c2:	4b07      	ldr	r3, [pc, #28]	; (80019e0 <SD_Check+0x4c>)
 80019c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d002      	beq.n	80019d2 <SD_Check+0x3e>
			printf("Successfully saved to SD Card\n");
 80019cc:	4806      	ldr	r0, [pc, #24]	; (80019e8 <SD_Check+0x54>)
 80019ce:	f008 f981 	bl	8009cd4 <puts>
}
 80019d2:	bf00      	nop
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200002c4 	.word	0x200002c4
 80019e0:	20000000 	.word	0x20000000
 80019e4:	0800c11c 	.word	0x0800c11c
 80019e8:	0800c13c 	.word	0x0800c13c

080019ec <csvHeader>:

int SD_Status() { return isSaving; }

void csvHeader(char* FileName, int lenF) {
 80019ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f0:	b084      	sub	sp, #16
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
 80019f8:	466b      	mov	r3, sp
 80019fa:	4698      	mov	r8, r3

	char name[lenF];
 80019fc:	6838      	ldr	r0, [r7, #0]
 80019fe:	1e43      	subs	r3, r0, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	4603      	mov	r3, r0
 8001a04:	4619      	mov	r1, r3
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	f04f 0400 	mov.w	r4, #0
 8001a12:	00d4      	lsls	r4, r2, #3
 8001a14:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001a18:	00cb      	lsls	r3, r1, #3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f04f 0200 	mov.w	r2, #0
 8001a22:	f04f 0300 	mov.w	r3, #0
 8001a26:	f04f 0400 	mov.w	r4, #0
 8001a2a:	00d4      	lsls	r4, r2, #3
 8001a2c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001a30:	00cb      	lsls	r3, r1, #3
 8001a32:	4603      	mov	r3, r0
 8001a34:	3307      	adds	r3, #7
 8001a36:	08db      	lsrs	r3, r3, #3
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	ebad 0d03 	sub.w	sp, sp, r3
 8001a3e:	466b      	mov	r3, sp
 8001a40:	3300      	adds	r3, #0
 8001a42:	60bb      	str	r3, [r7, #8]
	strcpy(name, FileName);
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	6879      	ldr	r1, [r7, #4]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f008 f9af 	bl	8009dac <strcpy>

	fresult = Mount_SD("/");
 8001a4e:	48cc      	ldr	r0, [pc, #816]	; (8001d80 <csvHeader+0x394>)
 8001a50:	f7ff fadc 	bl	800100c <Mount_SD>
 8001a54:	4603      	mov	r3, r0
 8001a56:	461a      	mov	r2, r3
 8001a58:	4bca      	ldr	r3, [pc, #808]	; (8001d84 <csvHeader+0x398>)
 8001a5a:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 8001a5c:	4bc9      	ldr	r3, [pc, #804]	; (8001d84 <csvHeader+0x398>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff97 	bl	8001994 <SD_Check>

	//CAN Bus
	sprintf(buffer, "Time, RPM, TPS (%%), Fuel Open Time (ms), Ignition Angle (Degrees),");
 8001a66:	49c8      	ldr	r1, [pc, #800]	; (8001d88 <csvHeader+0x39c>)
 8001a68:	48c8      	ldr	r0, [pc, #800]	; (8001d8c <csvHeader+0x3a0>)
 8001a6a:	f008 f97f 	bl	8009d6c <siprintf>
	Update_File(name, buffer);
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	49c6      	ldr	r1, [pc, #792]	; (8001d8c <csvHeader+0x3a0>)
 8001a72:	4618      	mov	r0, r3
 8001a74:	f7ff fc2e 	bl	80012d4 <Update_File>
	sprintf(buffer, "Barometer (PSI), MAP (PSI), Pressure Type,");
 8001a78:	4bc4      	ldr	r3, [pc, #784]	; (8001d8c <csvHeader+0x3a0>)
 8001a7a:	4ac5      	ldr	r2, [pc, #788]	; (8001d90 <csvHeader+0x3a4>)
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	469c      	mov	ip, r3
 8001a80:	f104 0e20 	add.w	lr, r4, #32
 8001a84:	4665      	mov	r5, ip
 8001a86:	4626      	mov	r6, r4
 8001a88:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a8a:	6028      	str	r0, [r5, #0]
 8001a8c:	6069      	str	r1, [r5, #4]
 8001a8e:	60aa      	str	r2, [r5, #8]
 8001a90:	60eb      	str	r3, [r5, #12]
 8001a92:	3410      	adds	r4, #16
 8001a94:	f10c 0c10 	add.w	ip, ip, #16
 8001a98:	4574      	cmp	r4, lr
 8001a9a:	d1f3      	bne.n	8001a84 <csvHeader+0x98>
 8001a9c:	4662      	mov	r2, ip
 8001a9e:	4623      	mov	r3, r4
 8001aa0:	cb03      	ldmia	r3!, {r0, r1}
 8001aa2:	6010      	str	r0, [r2, #0]
 8001aa4:	6051      	str	r1, [r2, #4]
 8001aa6:	8819      	ldrh	r1, [r3, #0]
 8001aa8:	789b      	ldrb	r3, [r3, #2]
 8001aaa:	8111      	strh	r1, [r2, #8]
 8001aac:	7293      	strb	r3, [r2, #10]
	Update_File(name, buffer);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	49b6      	ldr	r1, [pc, #728]	; (8001d8c <csvHeader+0x3a0>)
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff fc0e 	bl	80012d4 <Update_File>
	sprintf(buffer, "Pre Radiator Air Temp (C), Post Radiator Air Temp (C),");
 8001ab8:	4bb4      	ldr	r3, [pc, #720]	; (8001d8c <csvHeader+0x3a0>)
 8001aba:	4ab6      	ldr	r2, [pc, #728]	; (8001d94 <csvHeader+0x3a8>)
 8001abc:	4614      	mov	r4, r2
 8001abe:	469c      	mov	ip, r3
 8001ac0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001ac4:	4665      	mov	r5, ip
 8001ac6:	4626      	mov	r6, r4
 8001ac8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001aca:	6028      	str	r0, [r5, #0]
 8001acc:	6069      	str	r1, [r5, #4]
 8001ace:	60aa      	str	r2, [r5, #8]
 8001ad0:	60eb      	str	r3, [r5, #12]
 8001ad2:	3410      	adds	r4, #16
 8001ad4:	f10c 0c10 	add.w	ip, ip, #16
 8001ad8:	4574      	cmp	r4, lr
 8001ada:	d1f3      	bne.n	8001ac4 <csvHeader+0xd8>
 8001adc:	4663      	mov	r3, ip
 8001ade:	4622      	mov	r2, r4
 8001ae0:	6810      	ldr	r0, [r2, #0]
 8001ae2:	6018      	str	r0, [r3, #0]
 8001ae4:	8891      	ldrh	r1, [r2, #4]
 8001ae6:	7992      	ldrb	r2, [r2, #6]
 8001ae8:	8099      	strh	r1, [r3, #4]
 8001aea:	719a      	strb	r2, [r3, #6]
	Update_File(name, buffer);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	49a7      	ldr	r1, [pc, #668]	; (8001d8c <csvHeader+0x3a0>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fbef 	bl	80012d4 <Update_File>
	sprintf(buffer, "Labmda #1 (A/F R), Lambda #2 (A/F R),");
 8001af6:	4ba5      	ldr	r3, [pc, #660]	; (8001d8c <csvHeader+0x3a0>)
 8001af8:	4aa7      	ldr	r2, [pc, #668]	; (8001d98 <csvHeader+0x3ac>)
 8001afa:	4614      	mov	r4, r2
 8001afc:	469c      	mov	ip, r3
 8001afe:	f104 0e20 	add.w	lr, r4, #32
 8001b02:	4665      	mov	r5, ip
 8001b04:	4626      	mov	r6, r4
 8001b06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b08:	6028      	str	r0, [r5, #0]
 8001b0a:	6069      	str	r1, [r5, #4]
 8001b0c:	60aa      	str	r2, [r5, #8]
 8001b0e:	60eb      	str	r3, [r5, #12]
 8001b10:	3410      	adds	r4, #16
 8001b12:	f10c 0c10 	add.w	ip, ip, #16
 8001b16:	4574      	cmp	r4, lr
 8001b18:	d1f3      	bne.n	8001b02 <csvHeader+0x116>
 8001b1a:	4663      	mov	r3, ip
 8001b1c:	4622      	mov	r2, r4
 8001b1e:	6810      	ldr	r0, [r2, #0]
 8001b20:	6018      	str	r0, [r3, #0]
 8001b22:	8892      	ldrh	r2, [r2, #4]
 8001b24:	809a      	strh	r2, [r3, #4]
	Update_File(name, buffer);
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	4998      	ldr	r1, [pc, #608]	; (8001d8c <csvHeader+0x3a0>)
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f7ff fbd2 	bl	80012d4 <Update_File>
	sprintf(buffer, "Pre Radiator Coolant Temp (C), Post Radiator Coolant Temp (C),");
 8001b30:	4b96      	ldr	r3, [pc, #600]	; (8001d8c <csvHeader+0x3a0>)
 8001b32:	4a9a      	ldr	r2, [pc, #616]	; (8001d9c <csvHeader+0x3b0>)
 8001b34:	4615      	mov	r5, r2
 8001b36:	469c      	mov	ip, r3
 8001b38:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8001b3c:	4664      	mov	r4, ip
 8001b3e:	462e      	mov	r6, r5
 8001b40:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b42:	6020      	str	r0, [r4, #0]
 8001b44:	6061      	str	r1, [r4, #4]
 8001b46:	60a2      	str	r2, [r4, #8]
 8001b48:	60e3      	str	r3, [r4, #12]
 8001b4a:	3510      	adds	r5, #16
 8001b4c:	f10c 0c10 	add.w	ip, ip, #16
 8001b50:	4575      	cmp	r5, lr
 8001b52:	d1f3      	bne.n	8001b3c <csvHeader+0x150>
 8001b54:	4664      	mov	r4, ip
 8001b56:	462b      	mov	r3, r5
 8001b58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b5a:	6020      	str	r0, [r4, #0]
 8001b5c:	6061      	str	r1, [r4, #4]
 8001b5e:	60a2      	str	r2, [r4, #8]
 8001b60:	881a      	ldrh	r2, [r3, #0]
 8001b62:	789b      	ldrb	r3, [r3, #2]
 8001b64:	81a2      	strh	r2, [r4, #12]
 8001b66:	73a3      	strb	r3, [r4, #14]
	Update_File(name, buffer);
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4988      	ldr	r1, [pc, #544]	; (8001d8c <csvHeader+0x3a0>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f7ff fbb1 	bl	80012d4 <Update_File>
	sprintf(buffer, "Oil Pressure (PSI), Mass Air Flow Sensor (kg/s),");
 8001b72:	4b86      	ldr	r3, [pc, #536]	; (8001d8c <csvHeader+0x3a0>)
 8001b74:	4a8a      	ldr	r2, [pc, #552]	; (8001da0 <csvHeader+0x3b4>)
 8001b76:	4614      	mov	r4, r2
 8001b78:	469c      	mov	ip, r3
 8001b7a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001b7e:	4665      	mov	r5, ip
 8001b80:	4626      	mov	r6, r4
 8001b82:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b84:	6028      	str	r0, [r5, #0]
 8001b86:	6069      	str	r1, [r5, #4]
 8001b88:	60aa      	str	r2, [r5, #8]
 8001b8a:	60eb      	str	r3, [r5, #12]
 8001b8c:	3410      	adds	r4, #16
 8001b8e:	f10c 0c10 	add.w	ip, ip, #16
 8001b92:	4574      	cmp	r4, lr
 8001b94:	d1f3      	bne.n	8001b7e <csvHeader+0x192>
 8001b96:	4663      	mov	r3, ip
 8001b98:	4622      	mov	r2, r4
 8001b9a:	7812      	ldrb	r2, [r2, #0]
 8001b9c:	701a      	strb	r2, [r3, #0]
	Update_File(name, buffer);
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	497a      	ldr	r1, [pc, #488]	; (8001d8c <csvHeader+0x3a0>)
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7ff fb96 	bl	80012d4 <Update_File>
	sprintf(buffer, "FR Wheel Speed (mph), FL Wheel Speed (mph),");
 8001ba8:	4b78      	ldr	r3, [pc, #480]	; (8001d8c <csvHeader+0x3a0>)
 8001baa:	4a7e      	ldr	r2, [pc, #504]	; (8001da4 <csvHeader+0x3b8>)
 8001bac:	4614      	mov	r4, r2
 8001bae:	469c      	mov	ip, r3
 8001bb0:	f104 0e20 	add.w	lr, r4, #32
 8001bb4:	4665      	mov	r5, ip
 8001bb6:	4626      	mov	r6, r4
 8001bb8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001bba:	6028      	str	r0, [r5, #0]
 8001bbc:	6069      	str	r1, [r5, #4]
 8001bbe:	60aa      	str	r2, [r5, #8]
 8001bc0:	60eb      	str	r3, [r5, #12]
 8001bc2:	3410      	adds	r4, #16
 8001bc4:	f10c 0c10 	add.w	ip, ip, #16
 8001bc8:	4574      	cmp	r4, lr
 8001bca:	d1f3      	bne.n	8001bb4 <csvHeader+0x1c8>
 8001bcc:	4665      	mov	r5, ip
 8001bce:	4623      	mov	r3, r4
 8001bd0:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001bd2:	6028      	str	r0, [r5, #0]
 8001bd4:	6069      	str	r1, [r5, #4]
 8001bd6:	60aa      	str	r2, [r5, #8]
	Update_File(name, buffer);
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	496c      	ldr	r1, [pc, #432]	; (8001d8c <csvHeader+0x3a0>)
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff fb79 	bl	80012d4 <Update_File>
	sprintf(buffer, "RR Wheel Speed (mph), RL Wheel Speed (mph),");
 8001be2:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <csvHeader+0x3a0>)
 8001be4:	4a70      	ldr	r2, [pc, #448]	; (8001da8 <csvHeader+0x3bc>)
 8001be6:	4614      	mov	r4, r2
 8001be8:	469c      	mov	ip, r3
 8001bea:	f104 0e20 	add.w	lr, r4, #32
 8001bee:	4665      	mov	r5, ip
 8001bf0:	4626      	mov	r6, r4
 8001bf2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001bf4:	6028      	str	r0, [r5, #0]
 8001bf6:	6069      	str	r1, [r5, #4]
 8001bf8:	60aa      	str	r2, [r5, #8]
 8001bfa:	60eb      	str	r3, [r5, #12]
 8001bfc:	3410      	adds	r4, #16
 8001bfe:	f10c 0c10 	add.w	ip, ip, #16
 8001c02:	4574      	cmp	r4, lr
 8001c04:	d1f3      	bne.n	8001bee <csvHeader+0x202>
 8001c06:	4665      	mov	r5, ip
 8001c08:	4623      	mov	r3, r4
 8001c0a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001c0c:	6028      	str	r0, [r5, #0]
 8001c0e:	6069      	str	r1, [r5, #4]
 8001c10:	60aa      	str	r2, [r5, #8]
	Update_File(name, buffer);
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	495d      	ldr	r1, [pc, #372]	; (8001d8c <csvHeader+0x3a0>)
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff fb5c 	bl	80012d4 <Update_File>
	sprintf(buffer, "Battery Voltage (V), Air Temp (C), Coolant Temp (C),");
 8001c1c:	4b5b      	ldr	r3, [pc, #364]	; (8001d8c <csvHeader+0x3a0>)
 8001c1e:	4a63      	ldr	r2, [pc, #396]	; (8001dac <csvHeader+0x3c0>)
 8001c20:	4614      	mov	r4, r2
 8001c22:	469c      	mov	ip, r3
 8001c24:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001c28:	4665      	mov	r5, ip
 8001c2a:	4626      	mov	r6, r4
 8001c2c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c2e:	6028      	str	r0, [r5, #0]
 8001c30:	6069      	str	r1, [r5, #4]
 8001c32:	60aa      	str	r2, [r5, #8]
 8001c34:	60eb      	str	r3, [r5, #12]
 8001c36:	3410      	adds	r4, #16
 8001c38:	f10c 0c10 	add.w	ip, ip, #16
 8001c3c:	4574      	cmp	r4, lr
 8001c3e:	d1f3      	bne.n	8001c28 <csvHeader+0x23c>
 8001c40:	4663      	mov	r3, ip
 8001c42:	4622      	mov	r2, r4
 8001c44:	6810      	ldr	r0, [r2, #0]
 8001c46:	6018      	str	r0, [r3, #0]
 8001c48:	7912      	ldrb	r2, [r2, #4]
 8001c4a:	711a      	strb	r2, [r3, #4]
	Update_File(name, buffer);
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	494f      	ldr	r1, [pc, #316]	; (8001d8c <csvHeader+0x3a0>)
 8001c50:	4618      	mov	r0, r3
 8001c52:	f7ff fb3f 	bl	80012d4 <Update_File>

	//GPS
	sprintf(buffer, "Day, Month, Year, Hour, Minute, Second, gSpeed,");
 8001c56:	4b4d      	ldr	r3, [pc, #308]	; (8001d8c <csvHeader+0x3a0>)
 8001c58:	4a55      	ldr	r2, [pc, #340]	; (8001db0 <csvHeader+0x3c4>)
 8001c5a:	4614      	mov	r4, r2
 8001c5c:	469c      	mov	ip, r3
 8001c5e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001c62:	4665      	mov	r5, ip
 8001c64:	4626      	mov	r6, r4
 8001c66:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c68:	6028      	str	r0, [r5, #0]
 8001c6a:	6069      	str	r1, [r5, #4]
 8001c6c:	60aa      	str	r2, [r5, #8]
 8001c6e:	60eb      	str	r3, [r5, #12]
 8001c70:	3410      	adds	r4, #16
 8001c72:	f10c 0c10 	add.w	ip, ip, #16
 8001c76:	4574      	cmp	r4, lr
 8001c78:	d1f3      	bne.n	8001c62 <csvHeader+0x276>
	Update_File(name, buffer);
 8001c7a:	68bb      	ldr	r3, [r7, #8]
 8001c7c:	4943      	ldr	r1, [pc, #268]	; (8001d8c <csvHeader+0x3a0>)
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f7ff fb28 	bl	80012d4 <Update_File>
	sprintf(buffer, "Latitude, Longitude, Height Ellipsoid, Height Sea Level,");
 8001c84:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <csvHeader+0x3a0>)
 8001c86:	4a4b      	ldr	r2, [pc, #300]	; (8001db4 <csvHeader+0x3c8>)
 8001c88:	4614      	mov	r4, r2
 8001c8a:	469c      	mov	ip, r3
 8001c8c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001c90:	4665      	mov	r5, ip
 8001c92:	4626      	mov	r6, r4
 8001c94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c96:	6028      	str	r0, [r5, #0]
 8001c98:	6069      	str	r1, [r5, #4]
 8001c9a:	60aa      	str	r2, [r5, #8]
 8001c9c:	60eb      	str	r3, [r5, #12]
 8001c9e:	3410      	adds	r4, #16
 8001ca0:	f10c 0c10 	add.w	ip, ip, #16
 8001ca4:	4574      	cmp	r4, lr
 8001ca6:	d1f3      	bne.n	8001c90 <csvHeader+0x2a4>
 8001ca8:	4662      	mov	r2, ip
 8001caa:	4623      	mov	r3, r4
 8001cac:	cb03      	ldmia	r3!, {r0, r1}
 8001cae:	6010      	str	r0, [r2, #0]
 8001cb0:	6051      	str	r1, [r2, #4]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	7213      	strb	r3, [r2, #8]
	Update_File(name, buffer);
 8001cb6:	68bb      	ldr	r3, [r7, #8]
 8001cb8:	4934      	ldr	r1, [pc, #208]	; (8001d8c <csvHeader+0x3a0>)
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff fb0a 	bl	80012d4 <Update_File>

	//ADC1
	sprintf(buffer, "FL Damper Sensor, FR Damper Sensor,");
 8001cc0:	4b32      	ldr	r3, [pc, #200]	; (8001d8c <csvHeader+0x3a0>)
 8001cc2:	4a3d      	ldr	r2, [pc, #244]	; (8001db8 <csvHeader+0x3cc>)
 8001cc4:	4614      	mov	r4, r2
 8001cc6:	469c      	mov	ip, r3
 8001cc8:	f104 0e20 	add.w	lr, r4, #32
 8001ccc:	4665      	mov	r5, ip
 8001cce:	4626      	mov	r6, r4
 8001cd0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001cd2:	6028      	str	r0, [r5, #0]
 8001cd4:	6069      	str	r1, [r5, #4]
 8001cd6:	60aa      	str	r2, [r5, #8]
 8001cd8:	60eb      	str	r3, [r5, #12]
 8001cda:	3410      	adds	r4, #16
 8001cdc:	f10c 0c10 	add.w	ip, ip, #16
 8001ce0:	4574      	cmp	r4, lr
 8001ce2:	d1f3      	bne.n	8001ccc <csvHeader+0x2e0>
 8001ce4:	4663      	mov	r3, ip
 8001ce6:	4622      	mov	r2, r4
 8001ce8:	6810      	ldr	r0, [r2, #0]
 8001cea:	6018      	str	r0, [r3, #0]
	Update_File(name, buffer);
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	4927      	ldr	r1, [pc, #156]	; (8001d8c <csvHeader+0x3a0>)
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff faef 	bl	80012d4 <Update_File>
	sprintf(buffer, "RL Damper Sensor, RR Damper Sensor,");
 8001cf6:	4b25      	ldr	r3, [pc, #148]	; (8001d8c <csvHeader+0x3a0>)
 8001cf8:	4a30      	ldr	r2, [pc, #192]	; (8001dbc <csvHeader+0x3d0>)
 8001cfa:	4614      	mov	r4, r2
 8001cfc:	469c      	mov	ip, r3
 8001cfe:	f104 0e20 	add.w	lr, r4, #32
 8001d02:	4665      	mov	r5, ip
 8001d04:	4626      	mov	r6, r4
 8001d06:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d08:	6028      	str	r0, [r5, #0]
 8001d0a:	6069      	str	r1, [r5, #4]
 8001d0c:	60aa      	str	r2, [r5, #8]
 8001d0e:	60eb      	str	r3, [r5, #12]
 8001d10:	3410      	adds	r4, #16
 8001d12:	f10c 0c10 	add.w	ip, ip, #16
 8001d16:	4574      	cmp	r4, lr
 8001d18:	d1f3      	bne.n	8001d02 <csvHeader+0x316>
 8001d1a:	4663      	mov	r3, ip
 8001d1c:	4622      	mov	r2, r4
 8001d1e:	6810      	ldr	r0, [r2, #0]
 8001d20:	6018      	str	r0, [r3, #0]
	Update_File(name, buffer);
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	4919      	ldr	r1, [pc, #100]	; (8001d8c <csvHeader+0x3a0>)
 8001d26:	4618      	mov	r0, r3
 8001d28:	f7ff fad4 	bl	80012d4 <Update_File>

	//ADC2
	sprintf(buffer, "Steering Sensor, Brake Sensor #1, Brake Sensor #2,");
 8001d2c:	4b17      	ldr	r3, [pc, #92]	; (8001d8c <csvHeader+0x3a0>)
 8001d2e:	4a24      	ldr	r2, [pc, #144]	; (8001dc0 <csvHeader+0x3d4>)
 8001d30:	4614      	mov	r4, r2
 8001d32:	469c      	mov	ip, r3
 8001d34:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001d38:	4665      	mov	r5, ip
 8001d3a:	4626      	mov	r6, r4
 8001d3c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001d3e:	6028      	str	r0, [r5, #0]
 8001d40:	6069      	str	r1, [r5, #4]
 8001d42:	60aa      	str	r2, [r5, #8]
 8001d44:	60eb      	str	r3, [r5, #12]
 8001d46:	3410      	adds	r4, #16
 8001d48:	f10c 0c10 	add.w	ip, ip, #16
 8001d4c:	4574      	cmp	r4, lr
 8001d4e:	d1f3      	bne.n	8001d38 <csvHeader+0x34c>
 8001d50:	4663      	mov	r3, ip
 8001d52:	4622      	mov	r2, r4
 8001d54:	8811      	ldrh	r1, [r2, #0]
 8001d56:	7892      	ldrb	r2, [r2, #2]
 8001d58:	8019      	strh	r1, [r3, #0]
 8001d5a:	709a      	strb	r2, [r3, #2]
	Update_File(name, buffer);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	490b      	ldr	r1, [pc, #44]	; (8001d8c <csvHeader+0x3a0>)
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff fab7 	bl	80012d4 <Update_File>

	//Ask about Unused #1 and #2

	//Accelerometer & Gyroscope
	sprintf(buffer, "X, Y, Z, Roll, Pitch, Yaw\n\n");
 8001d66:	4a09      	ldr	r2, [pc, #36]	; (8001d8c <csvHeader+0x3a0>)
 8001d68:	4b16      	ldr	r3, [pc, #88]	; (8001dc4 <csvHeader+0x3d8>)
 8001d6a:	4615      	mov	r5, r2
 8001d6c:	461c      	mov	r4, r3
 8001d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d70:	6028      	str	r0, [r5, #0]
 8001d72:	6069      	str	r1, [r5, #4]
 8001d74:	60aa      	str	r2, [r5, #8]
 8001d76:	60eb      	str	r3, [r5, #12]
 8001d78:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001d7a:	6128      	str	r0, [r5, #16]
 8001d7c:	6169      	str	r1, [r5, #20]
 8001d7e:	e023      	b.n	8001dc8 <csvHeader+0x3dc>
 8001d80:	0800c108 	.word	0x0800c108
 8001d84:	2000066c 	.word	0x2000066c
 8001d88:	0800c15c 	.word	0x0800c15c
 8001d8c:	200008e0 	.word	0x200008e0
 8001d90:	0800c1a0 	.word	0x0800c1a0
 8001d94:	0800c1cc 	.word	0x0800c1cc
 8001d98:	0800c204 	.word	0x0800c204
 8001d9c:	0800c22c 	.word	0x0800c22c
 8001da0:	0800c26c 	.word	0x0800c26c
 8001da4:	0800c2a0 	.word	0x0800c2a0
 8001da8:	0800c2cc 	.word	0x0800c2cc
 8001dac:	0800c2f8 	.word	0x0800c2f8
 8001db0:	0800c330 	.word	0x0800c330
 8001db4:	0800c360 	.word	0x0800c360
 8001db8:	0800c39c 	.word	0x0800c39c
 8001dbc:	0800c3c0 	.word	0x0800c3c0
 8001dc0:	0800c3e4 	.word	0x0800c3e4
 8001dc4:	0800c418 	.word	0x0800c418
 8001dc8:	61aa      	str	r2, [r5, #24]
	fresult = Update_File(name, buffer);
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	490a      	ldr	r1, [pc, #40]	; (8001df8 <csvHeader+0x40c>)
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff fa80 	bl	80012d4 <Update_File>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	4b08      	ldr	r3, [pc, #32]	; (8001dfc <csvHeader+0x410>)
 8001dda:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 8001ddc:	4b07      	ldr	r3, [pc, #28]	; (8001dfc <csvHeader+0x410>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fdd7 	bl	8001994 <SD_Check>


	Unmount_SD("/");
 8001de6:	4806      	ldr	r0, [pc, #24]	; (8001e00 <csvHeader+0x414>)
 8001de8:	f7ff f93c 	bl	8001064 <Unmount_SD>
 8001dec:	46c5      	mov	sp, r8
}
 8001dee:	bf00      	nop
 8001df0:	3710      	adds	r7, #16
 8001df2:	46bd      	mov	sp, r7
 8001df4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001df8:	200008e0 	.word	0x200008e0
 8001dfc:	2000066c 	.word	0x2000066c
 8001e00:	0800c108 	.word	0x0800c108

08001e04 <csvUpdate>:

void csvUpdate(char* FileName, int lenF) {
 8001e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e08:	b097      	sub	sp, #92	; 0x5c
 8001e0a:	af0e      	add	r7, sp, #56	; 0x38
 8001e0c:	6178      	str	r0, [r7, #20]
 8001e0e:	6139      	str	r1, [r7, #16]
 8001e10:	466b      	mov	r3, sp
 8001e12:	60fb      	str	r3, [r7, #12]

	char name[lenF];
 8001e14:	6938      	ldr	r0, [r7, #16]
 8001e16:	1e43      	subs	r3, r0, #1
 8001e18:	61fb      	str	r3, [r7, #28]
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	f04f 0400 	mov.w	r4, #0
 8001e2a:	00d4      	lsls	r4, r2, #3
 8001e2c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001e30:	00cb      	lsls	r3, r1, #3
 8001e32:	4603      	mov	r3, r0
 8001e34:	4619      	mov	r1, r3
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	f04f 0300 	mov.w	r3, #0
 8001e3e:	f04f 0400 	mov.w	r4, #0
 8001e42:	00d4      	lsls	r4, r2, #3
 8001e44:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001e48:	00cb      	lsls	r3, r1, #3
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	3307      	adds	r3, #7
 8001e4e:	08db      	lsrs	r3, r3, #3
 8001e50:	00db      	lsls	r3, r3, #3
 8001e52:	ebad 0d03 	sub.w	sp, sp, r3
 8001e56:	ab0e      	add	r3, sp, #56	; 0x38
 8001e58:	3300      	adds	r3, #0
 8001e5a:	61bb      	str	r3, [r7, #24]
	strcpy(name, FileName);
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6979      	ldr	r1, [r7, #20]
 8001e60:	4618      	mov	r0, r3
 8001e62:	f007 ffa3 	bl	8009dac <strcpy>

	fresult = Mount_SD("/");
 8001e66:	4898      	ldr	r0, [pc, #608]	; (80020c8 <csvUpdate+0x2c4>)
 8001e68:	f7ff f8d0 	bl	800100c <Mount_SD>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4b96      	ldr	r3, [pc, #600]	; (80020cc <csvUpdate+0x2c8>)
 8001e72:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 8001e74:	4b95      	ldr	r3, [pc, #596]	; (80020cc <csvUpdate+0x2c8>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7ff fd8b 	bl	8001994 <SD_Check>


	sprintf(buffer, "%d,%hu,%f,%f,%f,", indx, RPM, TPS, fuelOpenTime, ignitionAngle);
 8001e7e:	4b94      	ldr	r3, [pc, #592]	; (80020d0 <csvUpdate+0x2cc>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	603a      	str	r2, [r7, #0]
 8001e84:	4b93      	ldr	r3, [pc, #588]	; (80020d4 <csvUpdate+0x2d0>)
 8001e86:	6819      	ldr	r1, [r3, #0]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	4b93      	ldr	r3, [pc, #588]	; (80020d8 <csvUpdate+0x2d4>)
 8001e8c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e90:	4a92      	ldr	r2, [pc, #584]	; (80020dc <csvUpdate+0x2d8>)
 8001e92:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001e96:	4892      	ldr	r0, [pc, #584]	; (80020e0 <csvUpdate+0x2dc>)
 8001e98:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001e9c:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8001ea0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001ea4:	e9cd 3400 	strd	r3, r4, [sp]
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	498d      	ldr	r1, [pc, #564]	; (80020e4 <csvUpdate+0x2e0>)
 8001eae:	488e      	ldr	r0, [pc, #568]	; (80020e8 <csvUpdate+0x2e4>)
 8001eb0:	f007 ff5c 	bl	8009d6c <siprintf>
	Update_File(name, buffer);
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	498c      	ldr	r1, [pc, #560]	; (80020e8 <csvUpdate+0x2e4>)
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7ff fa0b 	bl	80012d4 <Update_File>
	sprintf(buffer, "%f,%f,%i,", barometer, MAP, pressureType);
 8001ebe:	4b8b      	ldr	r3, [pc, #556]	; (80020ec <csvUpdate+0x2e8>)
 8001ec0:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001ec4:	4b8a      	ldr	r3, [pc, #552]	; (80020f0 <csvUpdate+0x2ec>)
 8001ec6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001eca:	488a      	ldr	r0, [pc, #552]	; (80020f4 <csvUpdate+0x2f0>)
 8001ecc:	6800      	ldr	r0, [r0, #0]
 8001ece:	9002      	str	r0, [sp, #8]
 8001ed0:	e9cd 3400 	strd	r3, r4, [sp]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	460a      	mov	r2, r1
 8001ed8:	4987      	ldr	r1, [pc, #540]	; (80020f8 <csvUpdate+0x2f4>)
 8001eda:	4883      	ldr	r0, [pc, #524]	; (80020e8 <csvUpdate+0x2e4>)
 8001edc:	f007 ff46 	bl	8009d6c <siprintf>
	Update_File(name, buffer);
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	4981      	ldr	r1, [pc, #516]	; (80020e8 <csvUpdate+0x2e4>)
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f7ff f9f5 	bl	80012d4 <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,", AnIn1, AnIn2, AnIn3, AnIn4, AnIn5, AnIn6, AnIn7, AnIn8);
 8001eea:	4b84      	ldr	r3, [pc, #528]	; (80020fc <csvUpdate+0x2f8>)
 8001eec:	ed93 7b00 	vldr	d7, [r3]
 8001ef0:	ed87 7b00 	vstr	d7, [r7]
 8001ef4:	4b82      	ldr	r3, [pc, #520]	; (8002100 <csvUpdate+0x2fc>)
 8001ef6:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001efa:	4b82      	ldr	r3, [pc, #520]	; (8002104 <csvUpdate+0x300>)
 8001efc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001f00:	4b81      	ldr	r3, [pc, #516]	; (8002108 <csvUpdate+0x304>)
 8001f02:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001f06:	4b81      	ldr	r3, [pc, #516]	; (800210c <csvUpdate+0x308>)
 8001f08:	ed93 7b00 	vldr	d7, [r3]
 8001f0c:	4b80      	ldr	r3, [pc, #512]	; (8002110 <csvUpdate+0x30c>)
 8001f0e:	ed93 6b00 	vldr	d6, [r3]
 8001f12:	4b80      	ldr	r3, [pc, #512]	; (8002114 <csvUpdate+0x310>)
 8001f14:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001f18:	4b7f      	ldr	r3, [pc, #508]	; (8002118 <csvUpdate+0x314>)
 8001f1a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f1e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8001f22:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8001f26:	ed8d 6b08 	vstr	d6, [sp, #32]
 8001f2a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001f2e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001f32:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001f36:	e9cd 5600 	strd	r5, r6, [sp]
 8001f3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f3e:	4977      	ldr	r1, [pc, #476]	; (800211c <csvUpdate+0x318>)
 8001f40:	4869      	ldr	r0, [pc, #420]	; (80020e8 <csvUpdate+0x2e4>)
 8001f42:	f007 ff13 	bl	8009d6c <siprintf>
	Update_File(name, buffer);
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	4967      	ldr	r1, [pc, #412]	; (80020e8 <csvUpdate+0x2e4>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f9c2 	bl	80012d4 <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,%f,", freq1, freq2, freq3, freq4, batteryVoltage);
 8001f50:	4b73      	ldr	r3, [pc, #460]	; (8002120 <csvUpdate+0x31c>)
 8001f52:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001f56:	4b73      	ldr	r3, [pc, #460]	; (8002124 <csvUpdate+0x320>)
 8001f58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f5c:	4a72      	ldr	r2, [pc, #456]	; (8002128 <csvUpdate+0x324>)
 8001f5e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001f62:	4872      	ldr	r0, [pc, #456]	; (800212c <csvUpdate+0x328>)
 8001f64:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001f68:	4871      	ldr	r0, [pc, #452]	; (8002130 <csvUpdate+0x32c>)
 8001f6a:	e9d0 8900 	ldrd	r8, r9, [r0]
 8001f6e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001f72:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8001f76:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001f7a:	e9cd 3400 	strd	r3, r4, [sp]
 8001f7e:	4652      	mov	r2, sl
 8001f80:	465b      	mov	r3, fp
 8001f82:	496c      	ldr	r1, [pc, #432]	; (8002134 <csvUpdate+0x330>)
 8001f84:	4858      	ldr	r0, [pc, #352]	; (80020e8 <csvUpdate+0x2e4>)
 8001f86:	f007 fef1 	bl	8009d6c <siprintf>
	Update_File(name, buffer);
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4956      	ldr	r1, [pc, #344]	; (80020e8 <csvUpdate+0x2e4>)
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff f9a0 	bl	80012d4 <Update_File>
	sprintf(buffer, "%f,%f,", airTemp, coolantTemp);
 8001f94:	4b68      	ldr	r3, [pc, #416]	; (8002138 <csvUpdate+0x334>)
 8001f96:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001f9a:	4b68      	ldr	r3, [pc, #416]	; (800213c <csvUpdate+0x338>)
 8001f9c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fa0:	e9cd 3400 	strd	r3, r4, [sp]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	460a      	mov	r2, r1
 8001fa8:	4965      	ldr	r1, [pc, #404]	; (8002140 <csvUpdate+0x33c>)
 8001faa:	484f      	ldr	r0, [pc, #316]	; (80020e8 <csvUpdate+0x2e4>)
 8001fac:	f007 fede 	bl	8009d6c <siprintf>
	Update_File(name, buffer);
 8001fb0:	69bb      	ldr	r3, [r7, #24]
 8001fb2:	494d      	ldr	r1, [pc, #308]	; (80020e8 <csvUpdate+0x2e4>)
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f7ff f98d 	bl	80012d4 <Update_File>

	sprintf(buffer, "%d,%d,%d,%d,%d,%d,%d,", day, month, year, hour, minute, second, gSpeed);
 8001fba:	4b62      	ldr	r3, [pc, #392]	; (8002144 <csvUpdate+0x340>)
 8001fbc:	681d      	ldr	r5, [r3, #0]
 8001fbe:	4b62      	ldr	r3, [pc, #392]	; (8002148 <csvUpdate+0x344>)
 8001fc0:	681e      	ldr	r6, [r3, #0]
 8001fc2:	4b62      	ldr	r3, [pc, #392]	; (800214c <csvUpdate+0x348>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a62      	ldr	r2, [pc, #392]	; (8002150 <csvUpdate+0x34c>)
 8001fc8:	6812      	ldr	r2, [r2, #0]
 8001fca:	4962      	ldr	r1, [pc, #392]	; (8002154 <csvUpdate+0x350>)
 8001fcc:	6809      	ldr	r1, [r1, #0]
 8001fce:	4862      	ldr	r0, [pc, #392]	; (8002158 <csvUpdate+0x354>)
 8001fd0:	6800      	ldr	r0, [r0, #0]
 8001fd2:	4c62      	ldr	r4, [pc, #392]	; (800215c <csvUpdate+0x358>)
 8001fd4:	6824      	ldr	r4, [r4, #0]
 8001fd6:	9404      	str	r4, [sp, #16]
 8001fd8:	9003      	str	r0, [sp, #12]
 8001fda:	9102      	str	r1, [sp, #8]
 8001fdc:	9201      	str	r2, [sp, #4]
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	4633      	mov	r3, r6
 8001fe2:	462a      	mov	r2, r5
 8001fe4:	495e      	ldr	r1, [pc, #376]	; (8002160 <csvUpdate+0x35c>)
 8001fe6:	4840      	ldr	r0, [pc, #256]	; (80020e8 <csvUpdate+0x2e4>)
 8001fe8:	f007 fec0 	bl	8009d6c <siprintf>
	Update_File(name, buffer);
 8001fec:	69bb      	ldr	r3, [r7, #24]
 8001fee:	493e      	ldr	r1, [pc, #248]	; (80020e8 <csvUpdate+0x2e4>)
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff f96f 	bl	80012d4 <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,", latitude, longitude, height_Ellipsoid, height_SeaLvl);
 8001ff6:	4b5b      	ldr	r3, [pc, #364]	; (8002164 <csvUpdate+0x360>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe fad4 	bl	80005a8 <__aeabi_f2d>
 8002000:	4682      	mov	sl, r0
 8002002:	468b      	mov	fp, r1
 8002004:	4b58      	ldr	r3, [pc, #352]	; (8002168 <csvUpdate+0x364>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4618      	mov	r0, r3
 800200a:	f7fe facd 	bl	80005a8 <__aeabi_f2d>
 800200e:	4604      	mov	r4, r0
 8002010:	460d      	mov	r5, r1
 8002012:	4b56      	ldr	r3, [pc, #344]	; (800216c <csvUpdate+0x368>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7fe fac6 	bl	80005a8 <__aeabi_f2d>
 800201c:	4680      	mov	r8, r0
 800201e:	4689      	mov	r9, r1
 8002020:	4b53      	ldr	r3, [pc, #332]	; (8002170 <csvUpdate+0x36c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7fe fabf 	bl	80005a8 <__aeabi_f2d>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002032:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002036:	e9cd 4500 	strd	r4, r5, [sp]
 800203a:	4652      	mov	r2, sl
 800203c:	465b      	mov	r3, fp
 800203e:	494d      	ldr	r1, [pc, #308]	; (8002174 <csvUpdate+0x370>)
 8002040:	4829      	ldr	r0, [pc, #164]	; (80020e8 <csvUpdate+0x2e4>)
 8002042:	f007 fe93 	bl	8009d6c <siprintf>
	Update_File(name, buffer);
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	4927      	ldr	r1, [pc, #156]	; (80020e8 <csvUpdate+0x2e4>)
 800204a:	4618      	mov	r0, r3
 800204c:	f7ff f942 	bl	80012d4 <Update_File>

	sprintf(buffer, "%d,%d,%d,%d,", damperT_Sense_FL, damperT_Sense_FR, damperT_Sense_RL, damperT_Sense_RR);
 8002050:	4b49      	ldr	r3, [pc, #292]	; (8002178 <csvUpdate+0x374>)
 8002052:	6819      	ldr	r1, [r3, #0]
 8002054:	4b49      	ldr	r3, [pc, #292]	; (800217c <csvUpdate+0x378>)
 8002056:	6818      	ldr	r0, [r3, #0]
 8002058:	4b49      	ldr	r3, [pc, #292]	; (8002180 <csvUpdate+0x37c>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a49      	ldr	r2, [pc, #292]	; (8002184 <csvUpdate+0x380>)
 800205e:	6812      	ldr	r2, [r2, #0]
 8002060:	9201      	str	r2, [sp, #4]
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	4603      	mov	r3, r0
 8002066:	460a      	mov	r2, r1
 8002068:	4947      	ldr	r1, [pc, #284]	; (8002188 <csvUpdate+0x384>)
 800206a:	481f      	ldr	r0, [pc, #124]	; (80020e8 <csvUpdate+0x2e4>)
 800206c:	f007 fe7e 	bl	8009d6c <siprintf>
	Update_File(name, buffer);
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	491d      	ldr	r1, [pc, #116]	; (80020e8 <csvUpdate+0x2e4>)
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff f92d 	bl	80012d4 <Update_File>

	sprintf(buffer, "%d,%d,%d,", steeringA_Sense, brakeP_Sense1, brakeP_Sense2);
 800207a:	4b44      	ldr	r3, [pc, #272]	; (800218c <csvUpdate+0x388>)
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	4b44      	ldr	r3, [pc, #272]	; (8002190 <csvUpdate+0x38c>)
 8002080:	6819      	ldr	r1, [r3, #0]
 8002082:	4b44      	ldr	r3, [pc, #272]	; (8002194 <csvUpdate+0x390>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	9300      	str	r3, [sp, #0]
 8002088:	460b      	mov	r3, r1
 800208a:	4943      	ldr	r1, [pc, #268]	; (8002198 <csvUpdate+0x394>)
 800208c:	4816      	ldr	r0, [pc, #88]	; (80020e8 <csvUpdate+0x2e4>)
 800208e:	f007 fe6d 	bl	8009d6c <siprintf>
	Update_File(name, buffer);
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4914      	ldr	r1, [pc, #80]	; (80020e8 <csvUpdate+0x2e4>)
 8002096:	4618      	mov	r0, r3
 8002098:	f7ff f91c 	bl	80012d4 <Update_File>

	sprintf(buffer, "%f,%f,%f,%f,%f,%f", x_LS, y_LS, z_LS, roll_LS, pitch_LS, yaw_LS);
 800209c:	4b3f      	ldr	r3, [pc, #252]	; (800219c <csvUpdate+0x398>)
 800209e:	ed93 7b00 	vldr	d7, [r3]
 80020a2:	ed87 7b00 	vstr	d7, [r7]
 80020a6:	4b3e      	ldr	r3, [pc, #248]	; (80021a0 <csvUpdate+0x39c>)
 80020a8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80020ac:	4a3d      	ldr	r2, [pc, #244]	; (80021a4 <csvUpdate+0x3a0>)
 80020ae:	e9d2 1200 	ldrd	r1, r2, [r2]
 80020b2:	483d      	ldr	r0, [pc, #244]	; (80021a8 <csvUpdate+0x3a4>)
 80020b4:	e9d0 5600 	ldrd	r5, r6, [r0]
 80020b8:	483c      	ldr	r0, [pc, #240]	; (80021ac <csvUpdate+0x3a8>)
 80020ba:	e9d0 8900 	ldrd	r8, r9, [r0]
 80020be:	483c      	ldr	r0, [pc, #240]	; (80021b0 <csvUpdate+0x3ac>)
 80020c0:	e9d0 ab00 	ldrd	sl, fp, [r0]
 80020c4:	e076      	b.n	80021b4 <csvUpdate+0x3b0>
 80020c6:	bf00      	nop
 80020c8:	0800c108 	.word	0x0800c108
 80020cc:	2000066c 	.word	0x2000066c
 80020d0:	200002c8 	.word	0x200002c8
 80020d4:	200001fc 	.word	0x200001fc
 80020d8:	20000200 	.word	0x20000200
 80020dc:	20000208 	.word	0x20000208
 80020e0:	20000210 	.word	0x20000210
 80020e4:	0800c434 	.word	0x0800c434
 80020e8:	200008e0 	.word	0x200008e0
 80020ec:	20000218 	.word	0x20000218
 80020f0:	20000220 	.word	0x20000220
 80020f4:	20000228 	.word	0x20000228
 80020f8:	0800c448 	.word	0x0800c448
 80020fc:	20000230 	.word	0x20000230
 8002100:	20000238 	.word	0x20000238
 8002104:	20000240 	.word	0x20000240
 8002108:	20000248 	.word	0x20000248
 800210c:	20000250 	.word	0x20000250
 8002110:	20000258 	.word	0x20000258
 8002114:	20000260 	.word	0x20000260
 8002118:	20000268 	.word	0x20000268
 800211c:	0800c454 	.word	0x0800c454
 8002120:	20000270 	.word	0x20000270
 8002124:	20000278 	.word	0x20000278
 8002128:	20000280 	.word	0x20000280
 800212c:	20000288 	.word	0x20000288
 8002130:	20000290 	.word	0x20000290
 8002134:	0800c470 	.word	0x0800c470
 8002138:	20000298 	.word	0x20000298
 800213c:	200002a0 	.word	0x200002a0
 8002140:	0800c480 	.word	0x0800c480
 8002144:	20000a20 	.word	0x20000a20
 8002148:	200008d0 	.word	0x200008d0
 800214c:	20000a14 	.word	0x20000a14
 8002150:	2000096c 	.word	0x2000096c
 8002154:	200008dc 	.word	0x200008dc
 8002158:	200008d4 	.word	0x200008d4
 800215c:	200008d8 	.word	0x200008d8
 8002160:	0800c488 	.word	0x0800c488
 8002164:	20000a1c 	.word	0x20000a1c
 8002168:	20000970 	.word	0x20000970
 800216c:	200008b4 	.word	0x200008b4
 8002170:	20000944 	.word	0x20000944
 8002174:	0800c4a0 	.word	0x0800c4a0
 8002178:	200002a8 	.word	0x200002a8
 800217c:	200002ac 	.word	0x200002ac
 8002180:	200002b0 	.word	0x200002b0
 8002184:	200002b4 	.word	0x200002b4
 8002188:	0800c4b0 	.word	0x0800c4b0
 800218c:	200002b8 	.word	0x200002b8
 8002190:	200002bc 	.word	0x200002bc
 8002194:	200002c0 	.word	0x200002c0
 8002198:	0800c4c0 	.word	0x0800c4c0
 800219c:	20000978 	.word	0x20000978
 80021a0:	20000a08 	.word	0x20000a08
 80021a4:	200008a8 	.word	0x200008a8
 80021a8:	20000a28 	.word	0x20000a28
 80021ac:	20000948 	.word	0x20000948
 80021b0:	20000960 	.word	0x20000960
 80021b4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80021b8:	e9cd 8906 	strd	r8, r9, [sp, #24]
 80021bc:	e9cd 5604 	strd	r5, r6, [sp, #16]
 80021c0:	e9cd 1202 	strd	r1, r2, [sp, #8]
 80021c4:	e9cd 3400 	strd	r3, r4, [sp]
 80021c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80021cc:	4913      	ldr	r1, [pc, #76]	; (800221c <csvUpdate+0x418>)
 80021ce:	4814      	ldr	r0, [pc, #80]	; (8002220 <csvUpdate+0x41c>)
 80021d0:	f007 fdcc 	bl	8009d6c <siprintf>
	Update_File(name, buffer);
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	4912      	ldr	r1, [pc, #72]	; (8002220 <csvUpdate+0x41c>)
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f87b 	bl	80012d4 <Update_File>

	sprintf(buffer, "\n\n");
 80021de:	4b10      	ldr	r3, [pc, #64]	; (8002220 <csvUpdate+0x41c>)
 80021e0:	4a10      	ldr	r2, [pc, #64]	; (8002224 <csvUpdate+0x420>)
 80021e2:	8811      	ldrh	r1, [r2, #0]
 80021e4:	7892      	ldrb	r2, [r2, #2]
 80021e6:	8019      	strh	r1, [r3, #0]
 80021e8:	709a      	strb	r2, [r3, #2]
	fresult = Update_File(name, buffer);
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	490c      	ldr	r1, [pc, #48]	; (8002220 <csvUpdate+0x41c>)
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f870 	bl	80012d4 <Update_File>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b0b      	ldr	r3, [pc, #44]	; (8002228 <csvUpdate+0x424>)
 80021fa:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 80021fc:	4b0a      	ldr	r3, [pc, #40]	; (8002228 <csvUpdate+0x424>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff fbc7 	bl	8001994 <SD_Check>


	Unmount_SD("/");
 8002206:	4809      	ldr	r0, [pc, #36]	; (800222c <csvUpdate+0x428>)
 8002208:	f7fe ff2c 	bl	8001064 <Unmount_SD>
 800220c:	f8d7 d00c 	ldr.w	sp, [r7, #12]
}
 8002210:	bf00      	nop
 8002212:	3724      	adds	r7, #36	; 0x24
 8002214:	46bd      	mov	sp, r7
 8002216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800221a:	bf00      	nop
 800221c:	0800c4cc 	.word	0x0800c4cc
 8002220:	200008e0 	.word	0x200008e0
 8002224:	0800c4e0 	.word	0x0800c4e0
 8002228:	2000066c 	.word	0x2000066c
 800222c:	0800c108 	.word	0x0800c108

08002230 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002234:	bf00      	nop
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr
	...

08002240 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002246:	2300      	movs	r3, #0
 8002248:	607b      	str	r3, [r7, #4]
 800224a:	4b10      	ldr	r3, [pc, #64]	; (800228c <HAL_MspInit+0x4c>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	4a0f      	ldr	r2, [pc, #60]	; (800228c <HAL_MspInit+0x4c>)
 8002250:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002254:	6453      	str	r3, [r2, #68]	; 0x44
 8002256:	4b0d      	ldr	r3, [pc, #52]	; (800228c <HAL_MspInit+0x4c>)
 8002258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800225a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	603b      	str	r3, [r7, #0]
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_MspInit+0x4c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	4a08      	ldr	r2, [pc, #32]	; (800228c <HAL_MspInit+0x4c>)
 800226c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002270:	6413      	str	r3, [r2, #64]	; 0x40
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_MspInit+0x4c>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227a:	603b      	str	r3, [r7, #0]
 800227c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800227e:	2007      	movs	r0, #7
 8002280:	f000 faaa 	bl	80027d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40023800 	.word	0x40023800

08002290 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b08a      	sub	sp, #40	; 0x28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a28      	ldr	r2, [pc, #160]	; (8002350 <HAL_SD_MspInit+0xc0>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d14a      	bne.n	8002348 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80022b2:	2300      	movs	r3, #0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	4b27      	ldr	r3, [pc, #156]	; (8002354 <HAL_SD_MspInit+0xc4>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a26      	ldr	r2, [pc, #152]	; (8002354 <HAL_SD_MspInit+0xc4>)
 80022bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b24      	ldr	r3, [pc, #144]	; (8002354 <HAL_SD_MspInit+0xc4>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ce:	2300      	movs	r3, #0
 80022d0:	60fb      	str	r3, [r7, #12]
 80022d2:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_SD_MspInit+0xc4>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	4a1f      	ldr	r2, [pc, #124]	; (8002354 <HAL_SD_MspInit+0xc4>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	6313      	str	r3, [r2, #48]	; 0x30
 80022de:	4b1d      	ldr	r3, [pc, #116]	; (8002354 <HAL_SD_MspInit+0xc4>)
 80022e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e2:	f003 0304 	and.w	r3, r3, #4
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
 80022ee:	4b19      	ldr	r3, [pc, #100]	; (8002354 <HAL_SD_MspInit+0xc4>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	4a18      	ldr	r2, [pc, #96]	; (8002354 <HAL_SD_MspInit+0xc4>)
 80022f4:	f043 0308 	orr.w	r3, r3, #8
 80022f8:	6313      	str	r3, [r2, #48]	; 0x30
 80022fa:	4b16      	ldr	r3, [pc, #88]	; (8002354 <HAL_SD_MspInit+0xc4>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	f003 0308 	and.w	r3, r3, #8
 8002302:	60bb      	str	r3, [r7, #8]
 8002304:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002306:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800230a:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002318:	230c      	movs	r3, #12
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	4619      	mov	r1, r3
 8002322:	480d      	ldr	r0, [pc, #52]	; (8002358 <HAL_SD_MspInit+0xc8>)
 8002324:	f000 fa8c 	bl	8002840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002328:	2304      	movs	r3, #4
 800232a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232c:	2302      	movs	r3, #2
 800232e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002330:	2300      	movs	r3, #0
 8002332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002334:	2303      	movs	r3, #3
 8002336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002338:	230c      	movs	r3, #12
 800233a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800233c:	f107 0314 	add.w	r3, r7, #20
 8002340:	4619      	mov	r1, r3
 8002342:	4806      	ldr	r0, [pc, #24]	; (800235c <HAL_SD_MspInit+0xcc>)
 8002344:	f000 fa7c 	bl	8002840 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002348:	bf00      	nop
 800234a:	3728      	adds	r7, #40	; 0x28
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40012c00 	.word	0x40012c00
 8002354:	40023800 	.word	0x40023800
 8002358:	40020800 	.word	0x40020800
 800235c:	40020c00 	.word	0x40020c00

08002360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002372:	e7fe      	b.n	8002372 <HardFault_Handler+0x4>

08002374 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <MemManage_Handler+0x4>

0800237a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800237e:	e7fe      	b.n	800237e <BusFault_Handler+0x4>

08002380 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002380:	b480      	push	{r7}
 8002382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002384:	e7fe      	b.n	8002384 <UsageFault_Handler+0x4>

08002386 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002398:	bf00      	nop
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023a2:	b480      	push	{r7}
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr

080023b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023b4:	f000 f91c 	bl	80025f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023b8:	bf00      	nop
 80023ba:	bd80      	pop	{r7, pc}

080023bc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b086      	sub	sp, #24
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	60f8      	str	r0, [r7, #12]
 80023c4:	60b9      	str	r1, [r7, #8]
 80023c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c8:	2300      	movs	r3, #0
 80023ca:	617b      	str	r3, [r7, #20]
 80023cc:	e00a      	b.n	80023e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80023ce:	f3af 8000 	nop.w
 80023d2:	4601      	mov	r1, r0
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	1c5a      	adds	r2, r3, #1
 80023d8:	60ba      	str	r2, [r7, #8]
 80023da:	b2ca      	uxtb	r2, r1
 80023dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3301      	adds	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	dbf0      	blt.n	80023ce <_read+0x12>
	}

return len;
 80023ec:	687b      	ldr	r3, [r7, #4]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	return -1;
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002402:	4618      	mov	r0, r3
 8002404:	370c      	adds	r7, #12
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr

0800240e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800241e:	605a      	str	r2, [r3, #4]
	return 0;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr

0800242e <_isatty>:

int _isatty(int file)
{
 800242e:	b480      	push	{r7}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
	return 1;
 8002436:	2301      	movs	r3, #1
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
	return 0;
 8002450:	2300      	movs	r3, #0
}
 8002452:	4618      	mov	r0, r3
 8002454:	3714      	adds	r7, #20
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
	...

08002460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002468:	4a14      	ldr	r2, [pc, #80]	; (80024bc <_sbrk+0x5c>)
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <_sbrk+0x60>)
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <_sbrk+0x64>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <_sbrk+0x64>)
 800247e:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <_sbrk+0x68>)
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	429a      	cmp	r2, r3
 800248e:	d207      	bcs.n	80024a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002490:	f006 fe66 	bl	8009160 <__errno>
 8002494:	4602      	mov	r2, r0
 8002496:	230c      	movs	r3, #12
 8002498:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	e009      	b.n	80024b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	4a05      	ldr	r2, [pc, #20]	; (80024c4 <_sbrk+0x64>)
 80024b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024b2:	68fb      	ldr	r3, [r7, #12]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20020000 	.word	0x20020000
 80024c0:	00000400 	.word	0x00000400
 80024c4:	200002cc 	.word	0x200002cc
 80024c8:	20000ed8 	.word	0x20000ed8

080024cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024d0:	4b08      	ldr	r3, [pc, #32]	; (80024f4 <SystemInit+0x28>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	4a07      	ldr	r2, [pc, #28]	; (80024f4 <SystemInit+0x28>)
 80024d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <SystemInit+0x28>)
 80024e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024e6:	609a      	str	r2, [r3, #8]
#endif
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80024f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002530 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80024fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80024fe:	e003      	b.n	8002508 <LoopCopyDataInit>

08002500 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002500:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002502:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002504:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002506:	3104      	adds	r1, #4

08002508 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002508:	480b      	ldr	r0, [pc, #44]	; (8002538 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800250a:	4b0c      	ldr	r3, [pc, #48]	; (800253c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800250c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800250e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002510:	d3f6      	bcc.n	8002500 <CopyDataInit>
  ldr  r2, =_sbss
 8002512:	4a0b      	ldr	r2, [pc, #44]	; (8002540 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002514:	e002      	b.n	800251c <LoopFillZerobss>

08002516 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002516:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002518:	f842 3b04 	str.w	r3, [r2], #4

0800251c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800251e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002520:	d3f9      	bcc.n	8002516 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002522:	f7ff ffd3 	bl	80024cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002526:	f006 fe21 	bl	800916c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800252a:	f7fe ffef 	bl	800150c <main>
  bx  lr    
 800252e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002530:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002534:	08013c28 	.word	0x08013c28
  ldr  r0, =_sdata
 8002538:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800253c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002540:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002544:	20000ed4 	.word	0x20000ed4

08002548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002548:	e7fe      	b.n	8002548 <ADC_IRQHandler>
	...

0800254c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0d      	ldr	r2, [pc, #52]	; (800258c <HAL_Init+0x40>)
 8002556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800255a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_Init+0x40>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_Init+0x40>)
 8002562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002566:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_Init+0x40>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a07      	ldr	r2, [pc, #28]	; (800258c <HAL_Init+0x40>)
 800256e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002574:	2003      	movs	r0, #3
 8002576:	f000 f92f 	bl	80027d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257a:	2000      	movs	r0, #0
 800257c:	f000 f808 	bl	8002590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002580:	f7ff fe5e 	bl	8002240 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023c00 	.word	0x40023c00

08002590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_InitTick+0x54>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_InitTick+0x58>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4619      	mov	r1, r3
 80025a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 f939 	bl	8002826 <HAL_SYSTICK_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00e      	b.n	80025dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b0f      	cmp	r3, #15
 80025c2:	d80a      	bhi.n	80025da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c4:	2200      	movs	r2, #0
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f000 f90f 	bl	80027ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d0:	4a06      	ldr	r2, [pc, #24]	; (80025ec <HAL_InitTick+0x5c>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e000      	b.n	80025dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20000004 	.word	0x20000004
 80025e8:	2000000c 	.word	0x2000000c
 80025ec:	20000008 	.word	0x20000008

080025f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x20>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_IncTick+0x24>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_IncTick+0x24>)
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	2000000c 	.word	0x2000000c
 8002614:	20000a60 	.word	0x20000a60

08002618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return uwTick;
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <HAL_GetTick+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000a60 	.word	0x20000a60

08002630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff ffee 	bl	8002618 <HAL_GetTick>
 800263c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d005      	beq.n	8002656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <HAL_Delay+0x40>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002656:	bf00      	nop
 8002658:	f7ff ffde 	bl	8002618 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	429a      	cmp	r2, r3
 8002666:	d8f7      	bhi.n	8002658 <HAL_Delay+0x28>
  {
  }
}
 8002668:	bf00      	nop
 800266a:	3710      	adds	r7, #16
 800266c:	46bd      	mov	sp, r7
 800266e:	bd80      	pop	{r7, pc}
 8002670:	2000000c 	.word	0x2000000c

08002674 <__NVIC_SetPriorityGrouping>:
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800268a:	68ba      	ldr	r2, [r7, #8]
 800268c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002690:	4013      	ands	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800269c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80026a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026a6:	4a04      	ldr	r2, [pc, #16]	; (80026b8 <__NVIC_SetPriorityGrouping+0x44>)
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	60d3      	str	r3, [r2, #12]
}
 80026ac:	bf00      	nop
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	e000ed00 	.word	0xe000ed00

080026bc <__NVIC_GetPriorityGrouping>:
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026c0:	4b04      	ldr	r3, [pc, #16]	; (80026d4 <__NVIC_GetPriorityGrouping+0x18>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	0a1b      	lsrs	r3, r3, #8
 80026c6:	f003 0307 	and.w	r3, r3, #7
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	e000ed00 	.word	0xe000ed00

080026d8 <__NVIC_SetPriority>:
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	6039      	str	r1, [r7, #0]
 80026e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	db0a      	blt.n	8002702 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	b2da      	uxtb	r2, r3
 80026f0:	490c      	ldr	r1, [pc, #48]	; (8002724 <__NVIC_SetPriority+0x4c>)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	0112      	lsls	r2, r2, #4
 80026f8:	b2d2      	uxtb	r2, r2
 80026fa:	440b      	add	r3, r1
 80026fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002700:	e00a      	b.n	8002718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	b2da      	uxtb	r2, r3
 8002706:	4908      	ldr	r1, [pc, #32]	; (8002728 <__NVIC_SetPriority+0x50>)
 8002708:	79fb      	ldrb	r3, [r7, #7]
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	3b04      	subs	r3, #4
 8002710:	0112      	lsls	r2, r2, #4
 8002712:	b2d2      	uxtb	r2, r2
 8002714:	440b      	add	r3, r1
 8002716:	761a      	strb	r2, [r3, #24]
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	e000e100 	.word	0xe000e100
 8002728:	e000ed00 	.word	0xe000ed00

0800272c <NVIC_EncodePriority>:
{
 800272c:	b480      	push	{r7}
 800272e:	b089      	sub	sp, #36	; 0x24
 8002730:	af00      	add	r7, sp, #0
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	60b9      	str	r1, [r7, #8]
 8002736:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f003 0307 	and.w	r3, r3, #7
 800273e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	f1c3 0307 	rsb	r3, r3, #7
 8002746:	2b04      	cmp	r3, #4
 8002748:	bf28      	it	cs
 800274a:	2304      	movcs	r3, #4
 800274c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	3304      	adds	r3, #4
 8002752:	2b06      	cmp	r3, #6
 8002754:	d902      	bls.n	800275c <NVIC_EncodePriority+0x30>
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	3b03      	subs	r3, #3
 800275a:	e000      	b.n	800275e <NVIC_EncodePriority+0x32>
 800275c:	2300      	movs	r3, #0
 800275e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002760:	f04f 32ff 	mov.w	r2, #4294967295
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43da      	mvns	r2, r3
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	401a      	ands	r2, r3
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002774:	f04f 31ff 	mov.w	r1, #4294967295
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	fa01 f303 	lsl.w	r3, r1, r3
 800277e:	43d9      	mvns	r1, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	4313      	orrs	r3, r2
}
 8002786:	4618      	mov	r0, r3
 8002788:	3724      	adds	r7, #36	; 0x24
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <SysTick_Config>:
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	3b01      	subs	r3, #1
 80027a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027a4:	d301      	bcc.n	80027aa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80027a6:	2301      	movs	r3, #1
 80027a8:	e00f      	b.n	80027ca <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027aa:	4a0a      	ldr	r2, [pc, #40]	; (80027d4 <SysTick_Config+0x40>)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3b01      	subs	r3, #1
 80027b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b2:	210f      	movs	r1, #15
 80027b4:	f04f 30ff 	mov.w	r0, #4294967295
 80027b8:	f7ff ff8e 	bl	80026d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027bc:	4b05      	ldr	r3, [pc, #20]	; (80027d4 <SysTick_Config+0x40>)
 80027be:	2200      	movs	r2, #0
 80027c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c2:	4b04      	ldr	r3, [pc, #16]	; (80027d4 <SysTick_Config+0x40>)
 80027c4:	2207      	movs	r2, #7
 80027c6:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	e000e010 	.word	0xe000e010

080027d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff47 	bl	8002674 <__NVIC_SetPriorityGrouping>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002800:	f7ff ff5c 	bl	80026bc <__NVIC_GetPriorityGrouping>
 8002804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f7ff ff8e 	bl	800272c <NVIC_EncodePriority>
 8002810:	4602      	mov	r2, r0
 8002812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff5d 	bl	80026d8 <__NVIC_SetPriority>
}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ffb0 	bl	8002794 <SysTick_Config>
 8002834:	4603      	mov	r3, r0
}
 8002836:	4618      	mov	r0, r3
 8002838:	3708      	adds	r7, #8
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
	...

08002840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	; 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800284a:	2300      	movs	r3, #0
 800284c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800284e:	2300      	movs	r3, #0
 8002850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002852:	2300      	movs	r3, #0
 8002854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002856:	2300      	movs	r3, #0
 8002858:	61fb      	str	r3, [r7, #28]
 800285a:	e165      	b.n	8002b28 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800285c:	2201      	movs	r2, #1
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	697a      	ldr	r2, [r7, #20]
 800286c:	4013      	ands	r3, r2
 800286e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002870:	693a      	ldr	r2, [r7, #16]
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	429a      	cmp	r2, r3
 8002876:	f040 8154 	bne.w	8002b22 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d00b      	beq.n	800289a <HAL_GPIO_Init+0x5a>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d007      	beq.n	800289a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800288e:	2b11      	cmp	r3, #17
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b12      	cmp	r3, #18
 8002898:	d130      	bne.n	80028fc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	2203      	movs	r2, #3
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43db      	mvns	r3, r3
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	4013      	ands	r3, r2
 80028b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	68da      	ldr	r2, [r3, #12]
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028d0:	2201      	movs	r2, #1
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	fa02 f303 	lsl.w	r3, r2, r3
 80028d8:	43db      	mvns	r3, r3
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	4013      	ands	r3, r2
 80028de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 0201 	and.w	r2, r3, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	2203      	movs	r2, #3
 8002908:	fa02 f303 	lsl.w	r3, r2, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	4013      	ands	r3, r2
 8002912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	005b      	lsls	r3, r3, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4313      	orrs	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b02      	cmp	r3, #2
 8002932:	d003      	beq.n	800293c <HAL_GPIO_Init+0xfc>
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b12      	cmp	r3, #18
 800293a:	d123      	bne.n	8002984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	08da      	lsrs	r2, r3, #3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3208      	adds	r2, #8
 8002944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	220f      	movs	r2, #15
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	43db      	mvns	r3, r3
 800295a:	69ba      	ldr	r2, [r7, #24]
 800295c:	4013      	ands	r3, r2
 800295e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	691a      	ldr	r2, [r3, #16]
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	08da      	lsrs	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	3208      	adds	r2, #8
 800297e:	69b9      	ldr	r1, [r7, #24]
 8002980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	005b      	lsls	r3, r3, #1
 800298e:	2203      	movs	r2, #3
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	43db      	mvns	r3, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4013      	ands	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	f003 0203 	and.w	r2, r3, #3
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ac:	69ba      	ldr	r2, [r7, #24]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f000 80ae 	beq.w	8002b22 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
 80029ca:	4b5c      	ldr	r3, [pc, #368]	; (8002b3c <HAL_GPIO_Init+0x2fc>)
 80029cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ce:	4a5b      	ldr	r2, [pc, #364]	; (8002b3c <HAL_GPIO_Init+0x2fc>)
 80029d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029d4:	6453      	str	r3, [r2, #68]	; 0x44
 80029d6:	4b59      	ldr	r3, [pc, #356]	; (8002b3c <HAL_GPIO_Init+0x2fc>)
 80029d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80029e2:	4a57      	ldr	r2, [pc, #348]	; (8002b40 <HAL_GPIO_Init+0x300>)
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	089b      	lsrs	r3, r3, #2
 80029e8:	3302      	adds	r3, #2
 80029ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f003 0303 	and.w	r3, r3, #3
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	220f      	movs	r2, #15
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4a4e      	ldr	r2, [pc, #312]	; (8002b44 <HAL_GPIO_Init+0x304>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d025      	beq.n	8002a5a <HAL_GPIO_Init+0x21a>
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a4d      	ldr	r2, [pc, #308]	; (8002b48 <HAL_GPIO_Init+0x308>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d01f      	beq.n	8002a56 <HAL_GPIO_Init+0x216>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a4c      	ldr	r2, [pc, #304]	; (8002b4c <HAL_GPIO_Init+0x30c>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d019      	beq.n	8002a52 <HAL_GPIO_Init+0x212>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a4b      	ldr	r2, [pc, #300]	; (8002b50 <HAL_GPIO_Init+0x310>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d013      	beq.n	8002a4e <HAL_GPIO_Init+0x20e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a4a      	ldr	r2, [pc, #296]	; (8002b54 <HAL_GPIO_Init+0x314>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00d      	beq.n	8002a4a <HAL_GPIO_Init+0x20a>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a49      	ldr	r2, [pc, #292]	; (8002b58 <HAL_GPIO_Init+0x318>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d007      	beq.n	8002a46 <HAL_GPIO_Init+0x206>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a48      	ldr	r2, [pc, #288]	; (8002b5c <HAL_GPIO_Init+0x31c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d101      	bne.n	8002a42 <HAL_GPIO_Init+0x202>
 8002a3e:	2306      	movs	r3, #6
 8002a40:	e00c      	b.n	8002a5c <HAL_GPIO_Init+0x21c>
 8002a42:	2307      	movs	r3, #7
 8002a44:	e00a      	b.n	8002a5c <HAL_GPIO_Init+0x21c>
 8002a46:	2305      	movs	r3, #5
 8002a48:	e008      	b.n	8002a5c <HAL_GPIO_Init+0x21c>
 8002a4a:	2304      	movs	r3, #4
 8002a4c:	e006      	b.n	8002a5c <HAL_GPIO_Init+0x21c>
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e004      	b.n	8002a5c <HAL_GPIO_Init+0x21c>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e002      	b.n	8002a5c <HAL_GPIO_Init+0x21c>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <HAL_GPIO_Init+0x21c>
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	69fa      	ldr	r2, [r7, #28]
 8002a5e:	f002 0203 	and.w	r2, r2, #3
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	4093      	lsls	r3, r2
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a6c:	4934      	ldr	r1, [pc, #208]	; (8002b40 <HAL_GPIO_Init+0x300>)
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	089b      	lsrs	r3, r3, #2
 8002a72:	3302      	adds	r3, #2
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a7a:	4b39      	ldr	r3, [pc, #228]	; (8002b60 <HAL_GPIO_Init+0x320>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	43db      	mvns	r3, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4013      	ands	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a9e:	4a30      	ldr	r2, [pc, #192]	; (8002b60 <HAL_GPIO_Init+0x320>)
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002aa4:	4b2e      	ldr	r3, [pc, #184]	; (8002b60 <HAL_GPIO_Init+0x320>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	43db      	mvns	r3, r3
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d003      	beq.n	8002ac8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ac8:	4a25      	ldr	r2, [pc, #148]	; (8002b60 <HAL_GPIO_Init+0x320>)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ace:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <HAL_GPIO_Init+0x320>)
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	43db      	mvns	r3, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4013      	ands	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002af2:	4a1b      	ldr	r2, [pc, #108]	; (8002b60 <HAL_GPIO_Init+0x320>)
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af8:	4b19      	ldr	r3, [pc, #100]	; (8002b60 <HAL_GPIO_Init+0x320>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d003      	beq.n	8002b1c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b1c:	4a10      	ldr	r2, [pc, #64]	; (8002b60 <HAL_GPIO_Init+0x320>)
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	3301      	adds	r3, #1
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b0f      	cmp	r3, #15
 8002b2c:	f67f ae96 	bls.w	800285c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b30:	bf00      	nop
 8002b32:	3724      	adds	r7, #36	; 0x24
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	40023800 	.word	0x40023800
 8002b40:	40013800 	.word	0x40013800
 8002b44:	40020000 	.word	0x40020000
 8002b48:	40020400 	.word	0x40020400
 8002b4c:	40020800 	.word	0x40020800
 8002b50:	40020c00 	.word	0x40020c00
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40021400 	.word	0x40021400
 8002b5c:	40021800 	.word	0x40021800
 8002b60:	40013c00 	.word	0x40013c00

08002b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	807b      	strh	r3, [r7, #2]
 8002b70:	4613      	mov	r3, r2
 8002b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b74:	787b      	ldrb	r3, [r7, #1]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d003      	beq.n	8002b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b7a:	887a      	ldrh	r2, [r7, #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b80:	e003      	b.n	8002b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b82:	887b      	ldrh	r3, [r7, #2]
 8002b84:	041a      	lsls	r2, r3, #16
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	619a      	str	r2, [r3, #24]
}
 8002b8a:	bf00      	nop
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d101      	bne.n	8002bac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e0cc      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002bac:	4b68      	ldr	r3, [pc, #416]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d90c      	bls.n	8002bd4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bba:	4b65      	ldr	r3, [pc, #404]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bbc:	683a      	ldr	r2, [r7, #0]
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc2:	4b63      	ldr	r3, [pc, #396]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d001      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	e0b8      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0302 	and.w	r3, r3, #2
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d020      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0304 	and.w	r3, r3, #4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d005      	beq.n	8002bf8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bec:	4b59      	ldr	r3, [pc, #356]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	4a58      	ldr	r2, [pc, #352]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bf6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f003 0308 	and.w	r3, r3, #8
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c04:	4b53      	ldr	r3, [pc, #332]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	4a52      	ldr	r2, [pc, #328]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002c0e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c10:	4b50      	ldr	r3, [pc, #320]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	494d      	ldr	r1, [pc, #308]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d044      	beq.n	8002cb8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d107      	bne.n	8002c46 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c36:	4b47      	ldr	r3, [pc, #284]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d119      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e07f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d003      	beq.n	8002c56 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c52:	2b03      	cmp	r3, #3
 8002c54:	d107      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c56:	4b3f      	ldr	r3, [pc, #252]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d109      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e06f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c66:	4b3b      	ldr	r3, [pc, #236]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e067      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c76:	4b37      	ldr	r3, [pc, #220]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f023 0203 	bic.w	r2, r3, #3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4934      	ldr	r1, [pc, #208]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	4313      	orrs	r3, r2
 8002c86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c88:	f7ff fcc6 	bl	8002618 <HAL_GetTick>
 8002c8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c90:	f7ff fcc2 	bl	8002618 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e04f      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca6:	4b2b      	ldr	r3, [pc, #172]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 020c 	and.w	r2, r3, #12
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d1eb      	bne.n	8002c90 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002cb8:	4b25      	ldr	r3, [pc, #148]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 030f 	and.w	r3, r3, #15
 8002cc0:	683a      	ldr	r2, [r7, #0]
 8002cc2:	429a      	cmp	r2, r3
 8002cc4:	d20c      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc6:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cce:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_RCC_ClockConfig+0x1b8>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 030f 	and.w	r3, r3, #15
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e032      	b.n	8002d46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cec:	4b19      	ldr	r3, [pc, #100]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	4916      	ldr	r1, [pc, #88]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0a:	4b12      	ldr	r3, [pc, #72]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	490e      	ldr	r1, [pc, #56]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002d1e:	f000 fb4b 	bl	80033b8 <HAL_RCC_GetSysClockFreq>
 8002d22:	4601      	mov	r1, r0
 8002d24:	4b0b      	ldr	r3, [pc, #44]	; (8002d54 <HAL_RCC_ClockConfig+0x1bc>)
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	091b      	lsrs	r3, r3, #4
 8002d2a:	f003 030f 	and.w	r3, r3, #15
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <HAL_RCC_ClockConfig+0x1c0>)
 8002d30:	5cd3      	ldrb	r3, [r2, r3]
 8002d32:	fa21 f303 	lsr.w	r3, r1, r3
 8002d36:	4a09      	ldr	r2, [pc, #36]	; (8002d5c <HAL_RCC_ClockConfig+0x1c4>)
 8002d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002d3a:	4b09      	ldr	r3, [pc, #36]	; (8002d60 <HAL_RCC_ClockConfig+0x1c8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff fc26 	bl	8002590 <HAL_InitTick>

  return HAL_OK;
 8002d44:	2300      	movs	r3, #0
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023c00 	.word	0x40023c00
 8002d54:	40023800 	.word	0x40023800
 8002d58:	080138a4 	.word	0x080138a4
 8002d5c:	20000004 	.word	0x20000004
 8002d60:	20000008 	.word	0x20000008

08002d64 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b08c      	sub	sp, #48	; 0x30
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002d74:	2300      	movs	r3, #0
 8002d76:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002d84:	2300      	movs	r3, #0
 8002d86:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0301 	and.w	r3, r3, #1
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d010      	beq.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002d9c:	4b6f      	ldr	r3, [pc, #444]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002da2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002daa:	496c      	ldr	r1, [pc, #432]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f003 0302 	and.w	r3, r3, #2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d010      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002dca:	4b64      	ldr	r3, [pc, #400]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dd0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dd8:	4960      	ldr	r1, [pc, #384]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002de8:	2301      	movs	r3, #1
 8002dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0304 	and.w	r3, r3, #4
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d017      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002df8:	4b58      	ldr	r3, [pc, #352]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dfa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002dfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	4955      	ldr	r1, [pc, #340]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e16:	d101      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d101      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002e24:	2301      	movs	r3, #1
 8002e26:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0308 	and.w	r3, r3, #8
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d017      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e34:	4b49      	ldr	r3, [pc, #292]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e3a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e42:	4946      	ldr	r1, [pc, #280]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e52:	d101      	bne.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002e54:	2301      	movs	r3, #1
 8002e56:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d101      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002e60:	2301      	movs	r3, #1
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0320 	and.w	r3, r3, #32
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 808a 	beq.w	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60bb      	str	r3, [r7, #8]
 8002e76:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7a:	4a38      	ldr	r2, [pc, #224]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e80:	6413      	str	r3, [r2, #64]	; 0x40
 8002e82:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e8a:	60bb      	str	r3, [r7, #8]
 8002e8c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e8e:	4b34      	ldr	r3, [pc, #208]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a33      	ldr	r2, [pc, #204]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e98:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e9a:	f7ff fbbd 	bl	8002618 <HAL_GetTick>
 8002e9e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002ea0:	e008      	b.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002ea2:	f7ff fbb9 	bl	8002618 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d901      	bls.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002eb0:	2303      	movs	r3, #3
 8002eb2:	e278      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002eb4:	4b2a      	ldr	r3, [pc, #168]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d0f0      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ec0:	4b26      	ldr	r3, [pc, #152]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ec2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ec4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002eca:	6a3b      	ldr	r3, [r7, #32]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d02f      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed8:	6a3a      	ldr	r2, [r7, #32]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d028      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002ede:	4b1f      	ldr	r3, [pc, #124]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ee6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ee8:	4b1e      	ldr	r3, [pc, #120]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002eea:	2201      	movs	r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eee:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ef4:	4a19      	ldr	r2, [pc, #100]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002efa:	4b18      	ldr	r3, [pc, #96]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	f003 0301 	and.w	r3, r3, #1
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d114      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002f06:	f7ff fb87 	bl	8002618 <HAL_GetTick>
 8002f0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f0c:	e00a      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f0e:	f7ff fb83 	bl	8002618 <HAL_GetTick>
 8002f12:	4602      	mov	r2, r0
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	1ad3      	subs	r3, r2, r3
 8002f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d901      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e240      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f24:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f28:	f003 0302 	and.w	r3, r3, #2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ee      	beq.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f3c:	d114      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f52:	4902      	ldr	r1, [pc, #8]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	608b      	str	r3, [r1, #8]
 8002f58:	e00c      	b.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002f5a:	bf00      	nop
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40007000 	.word	0x40007000
 8002f64:	42470e40 	.word	0x42470e40
 8002f68:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	4a49      	ldr	r2, [pc, #292]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f6e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f72:	6093      	str	r3, [r2, #8]
 8002f74:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f80:	4944      	ldr	r1, [pc, #272]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0310 	and.w	r3, r3, #16
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d004      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002f98:	4b3f      	ldr	r3, [pc, #252]	; (8003098 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002f9a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002fa8:	4b3a      	ldr	r3, [pc, #232]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002faa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb6:	4937      	ldr	r1, [pc, #220]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fca:	4b32      	ldr	r3, [pc, #200]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fcc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002fd0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd8:	492e      	ldr	r1, [pc, #184]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d011      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fec:	4b29      	ldr	r3, [pc, #164]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ffa:	4926      	ldr	r1, [pc, #152]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800300a:	d101      	bne.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 800300c:	2301      	movs	r3, #1
 800300e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 800301c:	4b1d      	ldr	r3, [pc, #116]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800301e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003022:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302a:	491a      	ldr	r1, [pc, #104]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303a:	2b00      	cmp	r3, #0
 800303c:	d011      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800303e:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003044:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304c:	4911      	ldr	r1, [pc, #68]	; (8003094 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800305c:	d101      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800305e:	2301      	movs	r3, #1
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003062:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003064:	2b01      	cmp	r3, #1
 8003066:	d005      	beq.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003070:	f040 80ff 	bne.w	8003272 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003074:	4b09      	ldr	r3, [pc, #36]	; (800309c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800307a:	f7ff facd 	bl	8002618 <HAL_GetTick>
 800307e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003080:	e00e      	b.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003082:	f7ff fac9 	bl	8002618 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d907      	bls.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e188      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003094:	40023800 	.word	0x40023800
 8003098:	424711e0 	.word	0x424711e0
 800309c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030a0:	4b7e      	ldr	r3, [pc, #504]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d1ea      	bne.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 0301 	and.w	r3, r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d009      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d028      	beq.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d124      	bne.n	800311e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80030d4:	4b71      	ldr	r3, [pc, #452]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030da:	0c1b      	lsrs	r3, r3, #16
 80030dc:	f003 0303 	and.w	r3, r3, #3
 80030e0:	3301      	adds	r3, #1
 80030e2:	005b      	lsls	r3, r3, #1
 80030e4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030e6:	4b6d      	ldr	r3, [pc, #436]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ec:	0e1b      	lsrs	r3, r3, #24
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	019b      	lsls	r3, r3, #6
 80030fe:	431a      	orrs	r2, r3
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	085b      	lsrs	r3, r3, #1
 8003104:	3b01      	subs	r3, #1
 8003106:	041b      	lsls	r3, r3, #16
 8003108:	431a      	orrs	r2, r3
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	061b      	lsls	r3, r3, #24
 800310e:	431a      	orrs	r2, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	071b      	lsls	r3, r3, #28
 8003116:	4961      	ldr	r1, [pc, #388]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003118:	4313      	orrs	r3, r2
 800311a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0304 	and.w	r3, r3, #4
 8003126:	2b00      	cmp	r3, #0
 8003128:	d004      	beq.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003132:	d00a      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800313c:	2b00      	cmp	r3, #0
 800313e:	d035      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003144:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003148:	d130      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800314a:	4b54      	ldr	r3, [pc, #336]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800314c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f003 0303 	and.w	r3, r3, #3
 8003156:	3301      	adds	r3, #1
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800315c:	4b4f      	ldr	r3, [pc, #316]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800315e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003162:	0f1b      	lsrs	r3, r3, #28
 8003164:	f003 0307 	and.w	r3, r3, #7
 8003168:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685a      	ldr	r2, [r3, #4]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	019b      	lsls	r3, r3, #6
 8003174:	431a      	orrs	r2, r3
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	085b      	lsrs	r3, r3, #1
 800317a:	3b01      	subs	r3, #1
 800317c:	041b      	lsls	r3, r3, #16
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	691b      	ldr	r3, [r3, #16]
 8003184:	061b      	lsls	r3, r3, #24
 8003186:	431a      	orrs	r2, r3
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	071b      	lsls	r3, r3, #28
 800318c:	4943      	ldr	r1, [pc, #268]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800318e:	4313      	orrs	r3, r2
 8003190:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003194:	4b41      	ldr	r3, [pc, #260]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800319a:	f023 021f 	bic.w	r2, r3, #31
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a2:	3b01      	subs	r3, #1
 80031a4:	493d      	ldr	r1, [pc, #244]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031a6:	4313      	orrs	r3, r2
 80031a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d029      	beq.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031c0:	d124      	bne.n	800320c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80031c2:	4b36      	ldr	r3, [pc, #216]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031c8:	0c1b      	lsrs	r3, r3, #16
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	3301      	adds	r3, #1
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031d4:	4b31      	ldr	r3, [pc, #196]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031da:	0f1b      	lsrs	r3, r3, #28
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	019b      	lsls	r3, r3, #6
 80031ec:	431a      	orrs	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	085b      	lsrs	r3, r3, #1
 80031f4:	3b01      	subs	r3, #1
 80031f6:	041b      	lsls	r3, r3, #16
 80031f8:	431a      	orrs	r2, r3
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	061b      	lsls	r3, r3, #24
 80031fe:	431a      	orrs	r2, r3
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	071b      	lsls	r3, r3, #28
 8003204:	4925      	ldr	r1, [pc, #148]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003206:	4313      	orrs	r3, r2
 8003208:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003214:	2b00      	cmp	r3, #0
 8003216:	d016      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	019b      	lsls	r3, r3, #6
 8003222:	431a      	orrs	r2, r3
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	085b      	lsrs	r3, r3, #1
 800322a:	3b01      	subs	r3, #1
 800322c:	041b      	lsls	r3, r3, #16
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691b      	ldr	r3, [r3, #16]
 8003234:	061b      	lsls	r3, r3, #24
 8003236:	431a      	orrs	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	071b      	lsls	r3, r3, #28
 800323e:	4917      	ldr	r1, [pc, #92]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003248:	2201      	movs	r2, #1
 800324a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800324c:	f7ff f9e4 	bl	8002618 <HAL_GetTick>
 8003250:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003252:	e008      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003254:	f7ff f9e0 	bl	8002618 <HAL_GetTick>
 8003258:	4602      	mov	r2, r0
 800325a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	2b02      	cmp	r3, #2
 8003260:	d901      	bls.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e09f      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003266:	4b0d      	ldr	r3, [pc, #52]	; (800329c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0f0      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	2b01      	cmp	r3, #1
 8003276:	f040 8095 	bne.w	80033a4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800327a:	4b0a      	ldr	r3, [pc, #40]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003280:	f7ff f9ca 	bl	8002618 <HAL_GetTick>
 8003284:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003286:	e00f      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003288:	f7ff f9c6 	bl	8002618 <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d908      	bls.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e085      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800329a:	bf00      	nop
 800329c:	40023800 	.word	0x40023800
 80032a0:	42470068 	.word	0x42470068
 80032a4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032a8:	4b41      	ldr	r3, [pc, #260]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b4:	d0e8      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0304 	and.w	r3, r3, #4
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x566>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d009      	beq.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d02b      	beq.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d127      	bne.n	800332e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80032de:	4b34      	ldr	r3, [pc, #208]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e4:	0c1b      	lsrs	r3, r3, #16
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	3301      	adds	r3, #1
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	699a      	ldr	r2, [r3, #24]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
 80032f8:	019b      	lsls	r3, r3, #6
 80032fa:	431a      	orrs	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	085b      	lsrs	r3, r3, #1
 8003300:	3b01      	subs	r3, #1
 8003302:	041b      	lsls	r3, r3, #16
 8003304:	431a      	orrs	r2, r3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330a:	061b      	lsls	r3, r3, #24
 800330c:	4928      	ldr	r1, [pc, #160]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800330e:	4313      	orrs	r3, r2
 8003310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003314:	4b26      	ldr	r3, [pc, #152]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003316:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800331a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	3b01      	subs	r3, #1
 8003324:	021b      	lsls	r3, r3, #8
 8003326:	4922      	ldr	r1, [pc, #136]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003328:	4313      	orrs	r3, r2
 800332a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003336:	2b00      	cmp	r3, #0
 8003338:	d01d      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x612>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003342:	d118      	bne.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003344:	4b1a      	ldr	r3, [pc, #104]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334a:	0e1b      	lsrs	r3, r3, #24
 800334c:	f003 030f 	and.w	r3, r3, #15
 8003350:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699a      	ldr	r2, [r3, #24]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69db      	ldr	r3, [r3, #28]
 800335a:	019b      	lsls	r3, r3, #6
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	085b      	lsrs	r3, r3, #1
 8003364:	3b01      	subs	r3, #1
 8003366:	041b      	lsls	r3, r3, #16
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	061b      	lsls	r3, r3, #24
 800336e:	4910      	ldr	r1, [pc, #64]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003376:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003378:	2201      	movs	r2, #1
 800337a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800337c:	f7ff f94c 	bl	8002618 <HAL_GetTick>
 8003380:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003384:	f7ff f948 	bl	8002618 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e007      	b.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800339e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033a2:	d1ef      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3730      	adds	r7, #48	; 0x30
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40023800 	.word	0x40023800
 80033b4:	42470070 	.word	0x42470070

080033b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ba:	b087      	sub	sp, #28
 80033bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80033c2:	2300      	movs	r3, #0
 80033c4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 80033c6:	2300      	movs	r3, #0
 80033c8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 80033ca:	2300      	movs	r3, #0
 80033cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033d2:	4bc6      	ldr	r3, [pc, #792]	; (80036ec <HAL_RCC_GetSysClockFreq+0x334>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 030c 	and.w	r3, r3, #12
 80033da:	2b0c      	cmp	r3, #12
 80033dc:	f200 817e 	bhi.w	80036dc <HAL_RCC_GetSysClockFreq+0x324>
 80033e0:	a201      	add	r2, pc, #4	; (adr r2, 80033e8 <HAL_RCC_GetSysClockFreq+0x30>)
 80033e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e6:	bf00      	nop
 80033e8:	0800341d 	.word	0x0800341d
 80033ec:	080036dd 	.word	0x080036dd
 80033f0:	080036dd 	.word	0x080036dd
 80033f4:	080036dd 	.word	0x080036dd
 80033f8:	08003423 	.word	0x08003423
 80033fc:	080036dd 	.word	0x080036dd
 8003400:	080036dd 	.word	0x080036dd
 8003404:	080036dd 	.word	0x080036dd
 8003408:	08003429 	.word	0x08003429
 800340c:	080036dd 	.word	0x080036dd
 8003410:	080036dd 	.word	0x080036dd
 8003414:	080036dd 	.word	0x080036dd
 8003418:	08003585 	.word	0x08003585
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800341c:	4bb4      	ldr	r3, [pc, #720]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x338>)
 800341e:	613b      	str	r3, [r7, #16]
       break;
 8003420:	e15f      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003422:	4bb4      	ldr	r3, [pc, #720]	; (80036f4 <HAL_RCC_GetSysClockFreq+0x33c>)
 8003424:	613b      	str	r3, [r7, #16]
      break;
 8003426:	e15c      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003428:	4bb0      	ldr	r3, [pc, #704]	; (80036ec <HAL_RCC_GetSysClockFreq+0x334>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003430:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003432:	4bae      	ldr	r3, [pc, #696]	; (80036ec <HAL_RCC_GetSysClockFreq+0x334>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d04a      	beq.n	80034d4 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800343e:	4bab      	ldr	r3, [pc, #684]	; (80036ec <HAL_RCC_GetSysClockFreq+0x334>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	099b      	lsrs	r3, r3, #6
 8003444:	f04f 0400 	mov.w	r4, #0
 8003448:	f240 11ff 	movw	r1, #511	; 0x1ff
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	ea03 0501 	and.w	r5, r3, r1
 8003454:	ea04 0602 	and.w	r6, r4, r2
 8003458:	4629      	mov	r1, r5
 800345a:	4632      	mov	r2, r6
 800345c:	f04f 0300 	mov.w	r3, #0
 8003460:	f04f 0400 	mov.w	r4, #0
 8003464:	0154      	lsls	r4, r2, #5
 8003466:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800346a:	014b      	lsls	r3, r1, #5
 800346c:	4619      	mov	r1, r3
 800346e:	4622      	mov	r2, r4
 8003470:	1b49      	subs	r1, r1, r5
 8003472:	eb62 0206 	sbc.w	r2, r2, r6
 8003476:	f04f 0300 	mov.w	r3, #0
 800347a:	f04f 0400 	mov.w	r4, #0
 800347e:	0194      	lsls	r4, r2, #6
 8003480:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003484:	018b      	lsls	r3, r1, #6
 8003486:	1a5b      	subs	r3, r3, r1
 8003488:	eb64 0402 	sbc.w	r4, r4, r2
 800348c:	f04f 0100 	mov.w	r1, #0
 8003490:	f04f 0200 	mov.w	r2, #0
 8003494:	00e2      	lsls	r2, r4, #3
 8003496:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800349a:	00d9      	lsls	r1, r3, #3
 800349c:	460b      	mov	r3, r1
 800349e:	4614      	mov	r4, r2
 80034a0:	195b      	adds	r3, r3, r5
 80034a2:	eb44 0406 	adc.w	r4, r4, r6
 80034a6:	f04f 0100 	mov.w	r1, #0
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	0262      	lsls	r2, r4, #9
 80034b0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034b4:	0259      	lsls	r1, r3, #9
 80034b6:	460b      	mov	r3, r1
 80034b8:	4614      	mov	r4, r2
 80034ba:	4618      	mov	r0, r3
 80034bc:	4621      	mov	r1, r4
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f04f 0400 	mov.w	r4, #0
 80034c4:	461a      	mov	r2, r3
 80034c6:	4623      	mov	r3, r4
 80034c8:	f7fd fb9e 	bl	8000c08 <__aeabi_uldivmod>
 80034cc:	4603      	mov	r3, r0
 80034ce:	460c      	mov	r4, r1
 80034d0:	617b      	str	r3, [r7, #20]
 80034d2:	e049      	b.n	8003568 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034d4:	4b85      	ldr	r3, [pc, #532]	; (80036ec <HAL_RCC_GetSysClockFreq+0x334>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	f04f 0400 	mov.w	r4, #0
 80034de:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	ea03 0501 	and.w	r5, r3, r1
 80034ea:	ea04 0602 	and.w	r6, r4, r2
 80034ee:	4629      	mov	r1, r5
 80034f0:	4632      	mov	r2, r6
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	f04f 0400 	mov.w	r4, #0
 80034fa:	0154      	lsls	r4, r2, #5
 80034fc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003500:	014b      	lsls	r3, r1, #5
 8003502:	4619      	mov	r1, r3
 8003504:	4622      	mov	r2, r4
 8003506:	1b49      	subs	r1, r1, r5
 8003508:	eb62 0206 	sbc.w	r2, r2, r6
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	f04f 0400 	mov.w	r4, #0
 8003514:	0194      	lsls	r4, r2, #6
 8003516:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800351a:	018b      	lsls	r3, r1, #6
 800351c:	1a5b      	subs	r3, r3, r1
 800351e:	eb64 0402 	sbc.w	r4, r4, r2
 8003522:	f04f 0100 	mov.w	r1, #0
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	00e2      	lsls	r2, r4, #3
 800352c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003530:	00d9      	lsls	r1, r3, #3
 8003532:	460b      	mov	r3, r1
 8003534:	4614      	mov	r4, r2
 8003536:	195b      	adds	r3, r3, r5
 8003538:	eb44 0406 	adc.w	r4, r4, r6
 800353c:	f04f 0100 	mov.w	r1, #0
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	02a2      	lsls	r2, r4, #10
 8003546:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800354a:	0299      	lsls	r1, r3, #10
 800354c:	460b      	mov	r3, r1
 800354e:	4614      	mov	r4, r2
 8003550:	4618      	mov	r0, r3
 8003552:	4621      	mov	r1, r4
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	f04f 0400 	mov.w	r4, #0
 800355a:	461a      	mov	r2, r3
 800355c:	4623      	mov	r3, r4
 800355e:	f7fd fb53 	bl	8000c08 <__aeabi_uldivmod>
 8003562:	4603      	mov	r3, r0
 8003564:	460c      	mov	r4, r1
 8003566:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003568:	4b60      	ldr	r3, [pc, #384]	; (80036ec <HAL_RCC_GetSysClockFreq+0x334>)
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	0c1b      	lsrs	r3, r3, #16
 800356e:	f003 0303 	and.w	r3, r3, #3
 8003572:	3301      	adds	r3, #1
 8003574:	005b      	lsls	r3, r3, #1
 8003576:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003578:	697a      	ldr	r2, [r7, #20]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003580:	613b      	str	r3, [r7, #16]
      break;
 8003582:	e0ae      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003584:	4b59      	ldr	r3, [pc, #356]	; (80036ec <HAL_RCC_GetSysClockFreq+0x334>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800358c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800358e:	4b57      	ldr	r3, [pc, #348]	; (80036ec <HAL_RCC_GetSysClockFreq+0x334>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d04a      	beq.n	8003630 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800359a:	4b54      	ldr	r3, [pc, #336]	; (80036ec <HAL_RCC_GetSysClockFreq+0x334>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	099b      	lsrs	r3, r3, #6
 80035a0:	f04f 0400 	mov.w	r4, #0
 80035a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035a8:	f04f 0200 	mov.w	r2, #0
 80035ac:	ea03 0501 	and.w	r5, r3, r1
 80035b0:	ea04 0602 	and.w	r6, r4, r2
 80035b4:	4629      	mov	r1, r5
 80035b6:	4632      	mov	r2, r6
 80035b8:	f04f 0300 	mov.w	r3, #0
 80035bc:	f04f 0400 	mov.w	r4, #0
 80035c0:	0154      	lsls	r4, r2, #5
 80035c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80035c6:	014b      	lsls	r3, r1, #5
 80035c8:	4619      	mov	r1, r3
 80035ca:	4622      	mov	r2, r4
 80035cc:	1b49      	subs	r1, r1, r5
 80035ce:	eb62 0206 	sbc.w	r2, r2, r6
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	f04f 0400 	mov.w	r4, #0
 80035da:	0194      	lsls	r4, r2, #6
 80035dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80035e0:	018b      	lsls	r3, r1, #6
 80035e2:	1a5b      	subs	r3, r3, r1
 80035e4:	eb64 0402 	sbc.w	r4, r4, r2
 80035e8:	f04f 0100 	mov.w	r1, #0
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	00e2      	lsls	r2, r4, #3
 80035f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80035f6:	00d9      	lsls	r1, r3, #3
 80035f8:	460b      	mov	r3, r1
 80035fa:	4614      	mov	r4, r2
 80035fc:	195b      	adds	r3, r3, r5
 80035fe:	eb44 0406 	adc.w	r4, r4, r6
 8003602:	f04f 0100 	mov.w	r1, #0
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	0262      	lsls	r2, r4, #9
 800360c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003610:	0259      	lsls	r1, r3, #9
 8003612:	460b      	mov	r3, r1
 8003614:	4614      	mov	r4, r2
 8003616:	4618      	mov	r0, r3
 8003618:	4621      	mov	r1, r4
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f04f 0400 	mov.w	r4, #0
 8003620:	461a      	mov	r2, r3
 8003622:	4623      	mov	r3, r4
 8003624:	f7fd faf0 	bl	8000c08 <__aeabi_uldivmod>
 8003628:	4603      	mov	r3, r0
 800362a:	460c      	mov	r4, r1
 800362c:	617b      	str	r3, [r7, #20]
 800362e:	e049      	b.n	80036c4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003630:	4b2e      	ldr	r3, [pc, #184]	; (80036ec <HAL_RCC_GetSysClockFreq+0x334>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	099b      	lsrs	r3, r3, #6
 8003636:	f04f 0400 	mov.w	r4, #0
 800363a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800363e:	f04f 0200 	mov.w	r2, #0
 8003642:	ea03 0501 	and.w	r5, r3, r1
 8003646:	ea04 0602 	and.w	r6, r4, r2
 800364a:	4629      	mov	r1, r5
 800364c:	4632      	mov	r2, r6
 800364e:	f04f 0300 	mov.w	r3, #0
 8003652:	f04f 0400 	mov.w	r4, #0
 8003656:	0154      	lsls	r4, r2, #5
 8003658:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800365c:	014b      	lsls	r3, r1, #5
 800365e:	4619      	mov	r1, r3
 8003660:	4622      	mov	r2, r4
 8003662:	1b49      	subs	r1, r1, r5
 8003664:	eb62 0206 	sbc.w	r2, r2, r6
 8003668:	f04f 0300 	mov.w	r3, #0
 800366c:	f04f 0400 	mov.w	r4, #0
 8003670:	0194      	lsls	r4, r2, #6
 8003672:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003676:	018b      	lsls	r3, r1, #6
 8003678:	1a5b      	subs	r3, r3, r1
 800367a:	eb64 0402 	sbc.w	r4, r4, r2
 800367e:	f04f 0100 	mov.w	r1, #0
 8003682:	f04f 0200 	mov.w	r2, #0
 8003686:	00e2      	lsls	r2, r4, #3
 8003688:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800368c:	00d9      	lsls	r1, r3, #3
 800368e:	460b      	mov	r3, r1
 8003690:	4614      	mov	r4, r2
 8003692:	195b      	adds	r3, r3, r5
 8003694:	eb44 0406 	adc.w	r4, r4, r6
 8003698:	f04f 0100 	mov.w	r1, #0
 800369c:	f04f 0200 	mov.w	r2, #0
 80036a0:	02a2      	lsls	r2, r4, #10
 80036a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036a6:	0299      	lsls	r1, r3, #10
 80036a8:	460b      	mov	r3, r1
 80036aa:	4614      	mov	r4, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	4621      	mov	r1, r4
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f04f 0400 	mov.w	r4, #0
 80036b6:	461a      	mov	r2, r3
 80036b8:	4623      	mov	r3, r4
 80036ba:	f7fd faa5 	bl	8000c08 <__aeabi_uldivmod>
 80036be:	4603      	mov	r3, r0
 80036c0:	460c      	mov	r4, r1
 80036c2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80036c4:	4b09      	ldr	r3, [pc, #36]	; (80036ec <HAL_RCC_GetSysClockFreq+0x334>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	0f1b      	lsrs	r3, r3, #28
 80036ca:	f003 0307 	and.w	r3, r3, #7
 80036ce:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80036d0:	697a      	ldr	r2, [r7, #20]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	613b      	str	r3, [r7, #16]
      break;
 80036da:	e002      	b.n	80036e2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036dc:	4b04      	ldr	r3, [pc, #16]	; (80036f0 <HAL_RCC_GetSysClockFreq+0x338>)
 80036de:	613b      	str	r3, [r7, #16]
      break;
 80036e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036e2:	693b      	ldr	r3, [r7, #16]
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	371c      	adds	r7, #28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036ec:	40023800 	.word	0x40023800
 80036f0:	00f42400 	.word	0x00f42400
 80036f4:	007a1200 	.word	0x007a1200

080036f8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003700:	2300      	movs	r3, #0
 8003702:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 8083 	beq.w	8003818 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003712:	4b95      	ldr	r3, [pc, #596]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f003 030c 	and.w	r3, r3, #12
 800371a:	2b04      	cmp	r3, #4
 800371c:	d019      	beq.n	8003752 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800371e:	4b92      	ldr	r3, [pc, #584]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003726:	2b08      	cmp	r3, #8
 8003728:	d106      	bne.n	8003738 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800372a:	4b8f      	ldr	r3, [pc, #572]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003732:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003736:	d00c      	beq.n	8003752 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003738:	4b8b      	ldr	r3, [pc, #556]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003740:	2b0c      	cmp	r3, #12
 8003742:	d112      	bne.n	800376a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003744:	4b88      	ldr	r3, [pc, #544]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800374c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003750:	d10b      	bne.n	800376a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003752:	4b85      	ldr	r3, [pc, #532]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d05b      	beq.n	8003816 <HAL_RCC_OscConfig+0x11e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d157      	bne.n	8003816 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e216      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003772:	d106      	bne.n	8003782 <HAL_RCC_OscConfig+0x8a>
 8003774:	4b7c      	ldr	r3, [pc, #496]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a7b      	ldr	r2, [pc, #492]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 800377a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	e01d      	b.n	80037be <HAL_RCC_OscConfig+0xc6>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800378a:	d10c      	bne.n	80037a6 <HAL_RCC_OscConfig+0xae>
 800378c:	4b76      	ldr	r3, [pc, #472]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a75      	ldr	r2, [pc, #468]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 8003792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b73      	ldr	r3, [pc, #460]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a72      	ldr	r2, [pc, #456]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 800379e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037a2:	6013      	str	r3, [r2, #0]
 80037a4:	e00b      	b.n	80037be <HAL_RCC_OscConfig+0xc6>
 80037a6:	4b70      	ldr	r3, [pc, #448]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a6f      	ldr	r2, [pc, #444]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 80037ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b0:	6013      	str	r3, [r2, #0]
 80037b2:	4b6d      	ldr	r3, [pc, #436]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a6c      	ldr	r2, [pc, #432]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 80037b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d013      	beq.n	80037ee <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c6:	f7fe ff27 	bl	8002618 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037cc:	e008      	b.n	80037e0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037ce:	f7fe ff23 	bl	8002618 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b64      	cmp	r3, #100	; 0x64
 80037da:	d901      	bls.n	80037e0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e1db      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e0:	4b61      	ldr	r3, [pc, #388]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d0f0      	beq.n	80037ce <HAL_RCC_OscConfig+0xd6>
 80037ec:	e014      	b.n	8003818 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ee:	f7fe ff13 	bl	8002618 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80037f6:	f7fe ff0f 	bl	8002618 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b64      	cmp	r3, #100	; 0x64
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e1c7      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003808:	4b57      	ldr	r3, [pc, #348]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1f0      	bne.n	80037f6 <HAL_RCC_OscConfig+0xfe>
 8003814:	e000      	b.n	8003818 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003816:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d06f      	beq.n	8003904 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003824:	4b50      	ldr	r3, [pc, #320]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	2b00      	cmp	r3, #0
 800382e:	d017      	beq.n	8003860 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003830:	4b4d      	ldr	r3, [pc, #308]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003838:	2b08      	cmp	r3, #8
 800383a:	d105      	bne.n	8003848 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800383c:	4b4a      	ldr	r3, [pc, #296]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003844:	2b00      	cmp	r3, #0
 8003846:	d00b      	beq.n	8003860 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003848:	4b47      	ldr	r3, [pc, #284]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003850:	2b0c      	cmp	r3, #12
 8003852:	d11c      	bne.n	800388e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003854:	4b44      	ldr	r3, [pc, #272]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800385c:	2b00      	cmp	r3, #0
 800385e:	d116      	bne.n	800388e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003860:	4b41      	ldr	r3, [pc, #260]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d005      	beq.n	8003878 <HAL_RCC_OscConfig+0x180>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	68db      	ldr	r3, [r3, #12]
 8003870:	2b01      	cmp	r3, #1
 8003872:	d001      	beq.n	8003878 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e18f      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003878:	4b3b      	ldr	r3, [pc, #236]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4938      	ldr	r1, [pc, #224]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800388c:	e03a      	b.n	8003904 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d020      	beq.n	80038d8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003896:	4b35      	ldr	r3, [pc, #212]	; (800396c <HAL_RCC_OscConfig+0x274>)
 8003898:	2201      	movs	r2, #1
 800389a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fe febc 	bl	8002618 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038a4:	f7fe feb8 	bl	8002618 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e170      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038b6:	4b2c      	ldr	r3, [pc, #176]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038c2:	4b29      	ldr	r3, [pc, #164]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	00db      	lsls	r3, r3, #3
 80038d0:	4925      	ldr	r1, [pc, #148]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	600b      	str	r3, [r1, #0]
 80038d6:	e015      	b.n	8003904 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80038d8:	4b24      	ldr	r3, [pc, #144]	; (800396c <HAL_RCC_OscConfig+0x274>)
 80038da:	2200      	movs	r2, #0
 80038dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038de:	f7fe fe9b 	bl	8002618 <HAL_GetTick>
 80038e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038e4:	e008      	b.n	80038f8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80038e6:	f7fe fe97 	bl	8002618 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	693b      	ldr	r3, [r7, #16]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d901      	bls.n	80038f8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80038f4:	2303      	movs	r3, #3
 80038f6:	e14f      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0302 	and.w	r3, r3, #2
 8003900:	2b00      	cmp	r3, #0
 8003902:	d1f0      	bne.n	80038e6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0308 	and.w	r3, r3, #8
 800390c:	2b00      	cmp	r3, #0
 800390e:	d037      	beq.n	8003980 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d016      	beq.n	8003946 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003918:	4b15      	ldr	r3, [pc, #84]	; (8003970 <HAL_RCC_OscConfig+0x278>)
 800391a:	2201      	movs	r2, #1
 800391c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800391e:	f7fe fe7b 	bl	8002618 <HAL_GetTick>
 8003922:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003924:	e008      	b.n	8003938 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003926:	f7fe fe77 	bl	8002618 <HAL_GetTick>
 800392a:	4602      	mov	r2, r0
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	1ad3      	subs	r3, r2, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d901      	bls.n	8003938 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e12f      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003938:	4b0b      	ldr	r3, [pc, #44]	; (8003968 <HAL_RCC_OscConfig+0x270>)
 800393a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d0f0      	beq.n	8003926 <HAL_RCC_OscConfig+0x22e>
 8003944:	e01c      	b.n	8003980 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003946:	4b0a      	ldr	r3, [pc, #40]	; (8003970 <HAL_RCC_OscConfig+0x278>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800394c:	f7fe fe64 	bl	8002618 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003952:	e00f      	b.n	8003974 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003954:	f7fe fe60 	bl	8002618 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d908      	bls.n	8003974 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e118      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
 8003966:	bf00      	nop
 8003968:	40023800 	.word	0x40023800
 800396c:	42470000 	.word	0x42470000
 8003970:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003974:	4b8a      	ldr	r3, [pc, #552]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003978:	f003 0302 	and.w	r3, r3, #2
 800397c:	2b00      	cmp	r3, #0
 800397e:	d1e9      	bne.n	8003954 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8097 	beq.w	8003abc <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398e:	2300      	movs	r3, #0
 8003990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003992:	4b83      	ldr	r3, [pc, #524]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10f      	bne.n	80039be <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399e:	2300      	movs	r3, #0
 80039a0:	60fb      	str	r3, [r7, #12]
 80039a2:	4b7f      	ldr	r3, [pc, #508]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	4a7e      	ldr	r2, [pc, #504]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ac:	6413      	str	r3, [r2, #64]	; 0x40
 80039ae:	4b7c      	ldr	r3, [pc, #496]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 80039b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039b6:	60fb      	str	r3, [r7, #12]
 80039b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80039ba:	2301      	movs	r3, #1
 80039bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039be:	4b79      	ldr	r3, [pc, #484]	; (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d118      	bne.n	80039fc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80039ca:	4b76      	ldr	r3, [pc, #472]	; (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a75      	ldr	r2, [pc, #468]	; (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 80039d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039d6:	f7fe fe1f 	bl	8002618 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039de:	f7fe fe1b 	bl	8002618 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e0d3      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039f0:	4b6c      	ldr	r3, [pc, #432]	; (8003ba4 <HAL_RCC_OscConfig+0x4ac>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d106      	bne.n	8003a12 <HAL_RCC_OscConfig+0x31a>
 8003a04:	4b66      	ldr	r3, [pc, #408]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a08:	4a65      	ldr	r2, [pc, #404]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003a0a:	f043 0301 	orr.w	r3, r3, #1
 8003a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a10:	e01c      	b.n	8003a4c <HAL_RCC_OscConfig+0x354>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2b05      	cmp	r3, #5
 8003a18:	d10c      	bne.n	8003a34 <HAL_RCC_OscConfig+0x33c>
 8003a1a:	4b61      	ldr	r3, [pc, #388]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a1e:	4a60      	ldr	r2, [pc, #384]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003a20:	f043 0304 	orr.w	r3, r3, #4
 8003a24:	6713      	str	r3, [r2, #112]	; 0x70
 8003a26:	4b5e      	ldr	r3, [pc, #376]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	4a5d      	ldr	r2, [pc, #372]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003a2c:	f043 0301 	orr.w	r3, r3, #1
 8003a30:	6713      	str	r3, [r2, #112]	; 0x70
 8003a32:	e00b      	b.n	8003a4c <HAL_RCC_OscConfig+0x354>
 8003a34:	4b5a      	ldr	r3, [pc, #360]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a38:	4a59      	ldr	r2, [pc, #356]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003a3a:	f023 0301 	bic.w	r3, r3, #1
 8003a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003a40:	4b57      	ldr	r3, [pc, #348]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a44:	4a56      	ldr	r2, [pc, #344]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003a46:	f023 0304 	bic.w	r3, r3, #4
 8003a4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d015      	beq.n	8003a80 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a54:	f7fe fde0 	bl	8002618 <HAL_GetTick>
 8003a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a5a:	e00a      	b.n	8003a72 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fddc 	bl	8002618 <HAL_GetTick>
 8003a60:	4602      	mov	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d901      	bls.n	8003a72 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8003a6e:	2303      	movs	r3, #3
 8003a70:	e092      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a72:	4b4b      	ldr	r3, [pc, #300]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a76:	f003 0302 	and.w	r3, r3, #2
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d0ee      	beq.n	8003a5c <HAL_RCC_OscConfig+0x364>
 8003a7e:	e014      	b.n	8003aaa <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a80:	f7fe fdca 	bl	8002618 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a86:	e00a      	b.n	8003a9e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a88:	f7fe fdc6 	bl	8002618 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e07c      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a9e:	4b40      	ldr	r3, [pc, #256]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1ee      	bne.n	8003a88 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aaa:	7dfb      	ldrb	r3, [r7, #23]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d105      	bne.n	8003abc <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ab0:	4b3b      	ldr	r3, [pc, #236]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab4:	4a3a      	ldr	r2, [pc, #232]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d068      	beq.n	8003b96 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ac4:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 030c 	and.w	r3, r3, #12
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d060      	beq.n	8003b92 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	699b      	ldr	r3, [r3, #24]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d145      	bne.n	8003b64 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ad8:	4b33      	ldr	r3, [pc, #204]	; (8003ba8 <HAL_RCC_OscConfig+0x4b0>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ade:	f7fe fd9b 	bl	8002618 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ae6:	f7fe fd97 	bl	8002618 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e04f      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003af8:	4b29      	ldr	r3, [pc, #164]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d1f0      	bne.n	8003ae6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	69da      	ldr	r2, [r3, #28]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b12:	019b      	lsls	r3, r3, #6
 8003b14:	431a      	orrs	r2, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1a:	085b      	lsrs	r3, r3, #1
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	041b      	lsls	r3, r3, #16
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	061b      	lsls	r3, r3, #24
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	071b      	lsls	r3, r3, #28
 8003b30:	491b      	ldr	r1, [pc, #108]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b36:	4b1c      	ldr	r3, [pc, #112]	; (8003ba8 <HAL_RCC_OscConfig+0x4b0>)
 8003b38:	2201      	movs	r2, #1
 8003b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3c:	f7fe fd6c 	bl	8002618 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b44:	f7fe fd68 	bl	8002618 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e020      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b56:	4b12      	ldr	r3, [pc, #72]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x44c>
 8003b62:	e018      	b.n	8003b96 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b64:	4b10      	ldr	r3, [pc, #64]	; (8003ba8 <HAL_RCC_OscConfig+0x4b0>)
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b6a:	f7fe fd55 	bl	8002618 <HAL_GetTick>
 8003b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b70:	e008      	b.n	8003b84 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b72:	f7fe fd51 	bl	8002618 <HAL_GetTick>
 8003b76:	4602      	mov	r2, r0
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	2b02      	cmp	r3, #2
 8003b7e:	d901      	bls.n	8003b84 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003b80:	2303      	movs	r3, #3
 8003b82:	e009      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b84:	4b06      	ldr	r3, [pc, #24]	; (8003ba0 <HAL_RCC_OscConfig+0x4a8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1f0      	bne.n	8003b72 <HAL_RCC_OscConfig+0x47a>
 8003b90:	e001      	b.n	8003b96 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e000      	b.n	8003b98 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003b96:	2300      	movs	r3, #0
}
 8003b98:	4618      	mov	r0, r3
 8003b9a:	3718      	adds	r7, #24
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40007000 	.word	0x40007000
 8003ba8:	42470060 	.word	0x42470060

08003bac <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e022      	b.n	8003c04 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d105      	bne.n	8003bd6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fe fb5d 	bl	8002290 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2203      	movs	r2, #3
 8003bda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 f814 	bl	8003c0c <HAL_SD_InitCard>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d001      	beq.n	8003bee <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e00a      	b.n	8003c04 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3708      	adds	r7, #8
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003c0c:	b5b0      	push	{r4, r5, r7, lr}
 8003c0e:	b08e      	sub	sp, #56	; 0x38
 8003c10:	af04      	add	r7, sp, #16
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003c14:	2300      	movs	r3, #0
 8003c16:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003c18:	2300      	movs	r3, #0
 8003c1a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003c20:	2300      	movs	r3, #0
 8003c22:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c24:	2300      	movs	r3, #0
 8003c26:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003c28:	2376      	movs	r3, #118	; 0x76
 8003c2a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681d      	ldr	r5, [r3, #0]
 8003c30:	466c      	mov	r4, sp
 8003c32:	f107 0314 	add.w	r3, r7, #20
 8003c36:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c3a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c3e:	f107 0308 	add.w	r3, r7, #8
 8003c42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c44:	4628      	mov	r0, r5
 8003c46:	f001 f929 	bl	8004e9c <SDIO_Init>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003c50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d001      	beq.n	8003c5c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e031      	b.n	8003cc0 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003c5c:	4b1a      	ldr	r3, [pc, #104]	; (8003cc8 <HAL_SD_InitCard+0xbc>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f001 f961 	bl	8004f2e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003c6c:	4b16      	ldr	r3, [pc, #88]	; (8003cc8 <HAL_SD_InitCard+0xbc>)
 8003c6e:	2201      	movs	r2, #1
 8003c70:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 fefc 	bl	8004a70 <SD_PowerON>
 8003c78:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c7a:	6a3b      	ldr	r3, [r7, #32]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00b      	beq.n	8003c98 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c8c:	6a3b      	ldr	r3, [r7, #32]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	e013      	b.n	8003cc0 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fe1b 	bl	80048d4 <SD_InitCard>
 8003c9e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ca0:	6a3b      	ldr	r3, [r7, #32]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d00b      	beq.n	8003cbe <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3728      	adds	r7, #40	; 0x28
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc8:	422580a0 	.word	0x422580a0

08003ccc <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b092      	sub	sp, #72	; 0x48
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	60b9      	str	r1, [r7, #8]
 8003cd6:	607a      	str	r2, [r7, #4]
 8003cd8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003cda:	f7fe fc9d 	bl	8002618 <HAL_GetTick>
 8003cde:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d107      	bne.n	8003cfe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e1d7      	b.n	80040ae <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	f040 81ca 	bne.w	80040a0 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	441a      	add	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d907      	bls.n	8003d30 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d24:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e1be      	b.n	80040ae <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2203      	movs	r2, #3
 8003d34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d002      	beq.n	8003d4e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d4a:	025b      	lsls	r3, r3, #9
 8003d4c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003d56:	4618      	mov	r0, r3
 8003d58:	f001 f97c 	bl	8005054 <SDMMC_CmdBlockLength>
 8003d5c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00f      	beq.n	8003d84 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a9a      	ldr	r2, [pc, #616]	; (8003fd4 <HAL_SD_ReadBlocks+0x308>)
 8003d6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003d80:	2301      	movs	r3, #1
 8003d82:	e194      	b.n	80040ae <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d84:	f04f 33ff 	mov.w	r3, #4294967295
 8003d88:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	025b      	lsls	r3, r3, #9
 8003d8e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d90:	2390      	movs	r3, #144	; 0x90
 8003d92:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003d94:	2302      	movs	r3, #2
 8003d96:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f107 0214 	add.w	r2, r7, #20
 8003da8:	4611      	mov	r1, r2
 8003daa:	4618      	mov	r0, r3
 8003dac:	f001 f926 	bl	8004ffc <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d90a      	bls.n	8003dcc <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2202      	movs	r2, #2
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f001 f98a 	bl	80050dc <SDMMC_CmdReadMultiBlock>
 8003dc8:	6478      	str	r0, [r7, #68]	; 0x44
 8003dca:	e009      	b.n	8003de0 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f001 f95d 	bl	8005098 <SDMMC_CmdReadSingleBlock>
 8003dde:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003de0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d012      	beq.n	8003e0c <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a7a      	ldr	r2, [pc, #488]	; (8003fd4 <HAL_SD_ReadBlocks+0x308>)
 8003dec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003df2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df4:	431a      	orrs	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e150      	b.n	80040ae <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003e0c:	69bb      	ldr	r3, [r7, #24]
 8003e0e:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003e10:	e061      	b.n	8003ed6 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d03c      	beq.n	8003e9a <HAL_SD_ReadBlocks+0x1ce>
 8003e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d039      	beq.n	8003e9a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003e26:	2300      	movs	r3, #0
 8003e28:	643b      	str	r3, [r7, #64]	; 0x40
 8003e2a:	e033      	b.n	8003e94 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f001 f85e 	bl	8004ef2 <SDIO_ReadFIFO>
 8003e36:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e42:	3301      	adds	r3, #1
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	0a1b      	lsrs	r3, r3, #8
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e54:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e58:	3301      	adds	r3, #1
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	0c1b      	lsrs	r3, r3, #16
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6e:	3301      	adds	r3, #1
 8003e70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e74:	3b01      	subs	r3, #1
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e7a:	0e1b      	lsrs	r3, r3, #24
 8003e7c:	b2da      	uxtb	r2, r3
 8003e7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e80:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e84:	3301      	adds	r3, #1
 8003e86:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e90:	3301      	adds	r3, #1
 8003e92:	643b      	str	r3, [r7, #64]	; 0x40
 8003e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e96:	2b07      	cmp	r3, #7
 8003e98:	d9c8      	bls.n	8003e2c <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003e9a:	f7fe fbbd 	bl	8002618 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d902      	bls.n	8003eb0 <HAL_SD_ReadBlocks+0x1e4>
 8003eaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d112      	bne.n	8003ed6 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a47      	ldr	r2, [pc, #284]	; (8003fd4 <HAL_SD_ReadBlocks+0x308>)
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e0eb      	b.n	80040ae <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d096      	beq.n	8003e12 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d022      	beq.n	8003f38 <HAL_SD_ReadBlocks+0x26c>
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d91f      	bls.n	8003f38 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	d01b      	beq.n	8003f38 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 f94f 	bl	80051a8 <SDMMC_CmdStopTransfer>
 8003f0a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d012      	beq.n	8003f38 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a2f      	ldr	r2, [pc, #188]	; (8003fd4 <HAL_SD_ReadBlocks+0x308>)
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f20:	431a      	orrs	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2201      	movs	r2, #1
 8003f2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e0ba      	b.n	80040ae <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d012      	beq.n	8003f6c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a22      	ldr	r2, [pc, #136]	; (8003fd4 <HAL_SD_ReadBlocks+0x308>)
 8003f4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	f043 0208 	orr.w	r2, r3, #8
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e0a0      	b.n	80040ae <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d012      	beq.n	8003fa0 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <HAL_SD_ReadBlocks+0x308>)
 8003f80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f86:	f043 0202 	orr.w	r2, r3, #2
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e086      	b.n	80040ae <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d063      	beq.n	8004076 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a08      	ldr	r2, [pc, #32]	; (8003fd4 <HAL_SD_ReadBlocks+0x308>)
 8003fb4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	f043 0220 	orr.w	r2, r3, #32
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e06c      	b.n	80040ae <HAL_SD_ReadBlocks+0x3e2>
 8003fd4:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f000 ff88 	bl	8004ef2 <SDIO_ReadFIFO>
 8003fe2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fea:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fee:	3301      	adds	r3, #1
 8003ff0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffa:	0a1b      	lsrs	r3, r3, #8
 8003ffc:	b2da      	uxtb	r2, r3
 8003ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004000:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004004:	3301      	adds	r3, #1
 8004006:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004008:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400a:	3b01      	subs	r3, #1
 800400c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800400e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004010:	0c1b      	lsrs	r3, r3, #16
 8004012:	b2da      	uxtb	r2, r3
 8004014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004016:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004018:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401a:	3301      	adds	r3, #1
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800401e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004020:	3b01      	subs	r3, #1
 8004022:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	0e1b      	lsrs	r3, r3, #24
 8004028:	b2da      	uxtb	r2, r3
 800402a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800402c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800402e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004030:	3301      	adds	r3, #1
 8004032:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004036:	3b01      	subs	r3, #1
 8004038:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800403a:	f7fe faed 	bl	8002618 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004046:	429a      	cmp	r2, r3
 8004048:	d902      	bls.n	8004050 <HAL_SD_ReadBlocks+0x384>
 800404a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404c:	2b00      	cmp	r3, #0
 800404e:	d112      	bne.n	8004076 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a18      	ldr	r2, [pc, #96]	; (80040b8 <HAL_SD_ReadBlocks+0x3ec>)
 8004056:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800405c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2200      	movs	r2, #0
 8004070:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e01b      	b.n	80040ae <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800407c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004080:	2b00      	cmp	r3, #0
 8004082:	d002      	beq.n	800408a <HAL_SD_ReadBlocks+0x3be>
 8004084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1a6      	bne.n	8003fd8 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f240 523a 	movw	r2, #1338	; 0x53a
 8004092:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2201      	movs	r2, #1
 8004098:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	e006      	b.n	80040ae <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
  }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3748      	adds	r7, #72	; 0x48
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	004005ff 	.word	0x004005ff

080040bc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b092      	sub	sp, #72	; 0x48
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
 80040c8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80040ca:	f7fe faa5 	bl	8002618 <HAL_GetTick>
 80040ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d107      	bne.n	80040ee <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e182      	b.n	80043f4 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	f040 8175 	bne.w	80043e6 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004102:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	441a      	add	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800410c:	429a      	cmp	r2, r3
 800410e:	d907      	bls.n	8004120 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004114:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	e169      	b.n	80043f4 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2203      	movs	r2, #3
 8004124:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2200      	movs	r2, #0
 800412e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004134:	2b01      	cmp	r3, #1
 8004136:	d002      	beq.n	800413e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413a:	025b      	lsls	r3, r3, #9
 800413c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004146:	4618      	mov	r0, r3
 8004148:	f000 ff84 	bl	8005054 <SDMMC_CmdBlockLength>
 800414c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800414e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00f      	beq.n	8004174 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4a9c      	ldr	r2, [pc, #624]	; (80043cc <HAL_SD_WriteBlocks+0x310>)
 800415a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004162:	431a      	orrs	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e13f      	b.n	80043f4 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004174:	f04f 33ff 	mov.w	r3, #4294967295
 8004178:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	025b      	lsls	r3, r3, #9
 800417e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004180:	2390      	movs	r3, #144	; 0x90
 8004182:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004184:	2300      	movs	r3, #0
 8004186:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004188:	2300      	movs	r3, #0
 800418a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800418c:	2301      	movs	r3, #1
 800418e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f107 0218 	add.w	r2, r7, #24
 8004198:	4611      	mov	r1, r2
 800419a:	4618      	mov	r0, r3
 800419c:	f000 ff2e 	bl	8004ffc <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d90a      	bls.n	80041bc <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041b2:	4618      	mov	r0, r3
 80041b4:	f000 ffd6 	bl	8005164 <SDMMC_CmdWriteMultiBlock>
 80041b8:	6478      	str	r0, [r7, #68]	; 0x44
 80041ba:	e009      	b.n	80041d0 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2210      	movs	r2, #16
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80041c8:	4618      	mov	r0, r3
 80041ca:	f000 ffa9 	bl	8005120 <SDMMC_CmdWriteSingleBlock>
 80041ce:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80041d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d012      	beq.n	80041fc <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a7c      	ldr	r2, [pc, #496]	; (80043cc <HAL_SD_WriteBlocks+0x310>)
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041e4:	431a      	orrs	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e0fb      	b.n	80043f4 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004200:	e065      	b.n	80042ce <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800420c:	2b00      	cmp	r3, #0
 800420e:	d040      	beq.n	8004292 <HAL_SD_WriteBlocks+0x1d6>
 8004210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004212:	2b00      	cmp	r3, #0
 8004214:	d03d      	beq.n	8004292 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004216:	2300      	movs	r3, #0
 8004218:	643b      	str	r3, [r7, #64]	; 0x40
 800421a:	e037      	b.n	800428c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 800421c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004224:	3301      	adds	r3, #1
 8004226:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004228:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800422a:	3b01      	subs	r3, #1
 800422c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800422e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	021a      	lsls	r2, r3, #8
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	4313      	orrs	r3, r2
 8004238:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800423a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800423c:	3301      	adds	r3, #1
 800423e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004242:	3b01      	subs	r3, #1
 8004244:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	041a      	lsls	r2, r3, #16
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004254:	3301      	adds	r3, #1
 8004256:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800425a:	3b01      	subs	r3, #1
 800425c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800425e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	061a      	lsls	r2, r3, #24
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800426a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426c:	3301      	adds	r3, #1
 800426e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004272:	3b01      	subs	r3, #1
 8004274:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f107 0214 	add.w	r2, r7, #20
 800427e:	4611      	mov	r1, r2
 8004280:	4618      	mov	r0, r3
 8004282:	f000 fe43 	bl	8004f0c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004286:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004288:	3301      	adds	r3, #1
 800428a:	643b      	str	r3, [r7, #64]	; 0x40
 800428c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800428e:	2b07      	cmp	r3, #7
 8004290:	d9c4      	bls.n	800421c <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004292:	f7fe f9c1 	bl	8002618 <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800429e:	429a      	cmp	r2, r3
 80042a0:	d902      	bls.n	80042a8 <HAL_SD_WriteBlocks+0x1ec>
 80042a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d112      	bne.n	80042ce <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a47      	ldr	r2, [pc, #284]	; (80043cc <HAL_SD_WriteBlocks+0x310>)
 80042ae:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042b6:	431a      	orrs	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e092      	b.n	80043f4 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d4:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d092      	beq.n	8004202 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d022      	beq.n	8004330 <HAL_SD_WriteBlocks+0x274>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d91f      	bls.n	8004330 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f4:	2b03      	cmp	r3, #3
 80042f6:	d01b      	beq.n	8004330 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f000 ff53 	bl	80051a8 <SDMMC_CmdStopTransfer>
 8004302:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8004304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004306:	2b00      	cmp	r3, #0
 8004308:	d012      	beq.n	8004330 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2f      	ldr	r2, [pc, #188]	; (80043cc <HAL_SD_WriteBlocks+0x310>)
 8004310:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004316:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004318:	431a      	orrs	r2, r3
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	e061      	b.n	80043f4 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004336:	f003 0308 	and.w	r3, r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	d012      	beq.n	8004364 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a22      	ldr	r2, [pc, #136]	; (80043cc <HAL_SD_WriteBlocks+0x310>)
 8004344:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434a:	f043 0208 	orr.w	r2, r3, #8
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e047      	b.n	80043f4 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d012      	beq.n	8004398 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a15      	ldr	r2, [pc, #84]	; (80043cc <HAL_SD_WriteBlocks+0x310>)
 8004378:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800437e:	f043 0202 	orr.w	r2, r3, #2
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e02d      	b.n	80043f4 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d014      	beq.n	80043d0 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a08      	ldr	r2, [pc, #32]	; (80043cc <HAL_SD_WriteBlocks+0x310>)
 80043ac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043b2:	f043 0210 	orr.w	r2, r3, #16
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e013      	b.n	80043f4 <HAL_SD_WriteBlocks+0x338>
 80043cc:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f240 523a 	movw	r2, #1338	; 0x53a
 80043d8:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	e006      	b.n	80043f4 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
  }
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3748      	adds	r7, #72	; 0x48
 80043f8:	46bd      	mov	sp, r7
 80043fa:	bd80      	pop	{r7, pc}

080043fc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b083      	sub	sp, #12
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
 8004404:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800440a:	0f9b      	lsrs	r3, r3, #30
 800440c:	b2da      	uxtb	r2, r3
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004416:	0e9b      	lsrs	r3, r3, #26
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f003 030f 	and.w	r3, r3, #15
 800441e:	b2da      	uxtb	r2, r3
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004428:	0e1b      	lsrs	r3, r3, #24
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f003 0303 	and.w	r3, r3, #3
 8004430:	b2da      	uxtb	r2, r3
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800443a:	0c1b      	lsrs	r3, r3, #16
 800443c:	b2da      	uxtb	r2, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004446:	0a1b      	lsrs	r3, r3, #8
 8004448:	b2da      	uxtb	r2, r3
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004452:	b2da      	uxtb	r2, r3
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800445c:	0d1b      	lsrs	r3, r3, #20
 800445e:	b29a      	uxth	r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f003 030f 	and.w	r3, r3, #15
 8004470:	b2da      	uxtb	r2, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800447a:	0bdb      	lsrs	r3, r3, #15
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	b2da      	uxtb	r2, r3
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800448c:	0b9b      	lsrs	r3, r3, #14
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f003 0301 	and.w	r3, r3, #1
 8004494:	b2da      	uxtb	r2, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800449e:	0b5b      	lsrs	r3, r3, #13
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b0:	0b1b      	lsrs	r3, r3, #12
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	2200      	movs	r2, #0
 80044c2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d163      	bne.n	8004594 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044d0:	009a      	lsls	r2, r3, #2
 80044d2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80044d6:	4013      	ands	r3, r2
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80044dc:	0f92      	lsrs	r2, r2, #30
 80044de:	431a      	orrs	r2, r3
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e8:	0edb      	lsrs	r3, r3, #27
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044fa:	0e1b      	lsrs	r3, r3, #24
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	b2da      	uxtb	r2, r3
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800450c:	0d5b      	lsrs	r3, r3, #21
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f003 0307 	and.w	r3, r3, #7
 8004514:	b2da      	uxtb	r2, r3
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800451e:	0c9b      	lsrs	r3, r3, #18
 8004520:	b2db      	uxtb	r3, r3
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	b2da      	uxtb	r2, r3
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004530:	0bdb      	lsrs	r3, r3, #15
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	b2da      	uxtb	r2, r3
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	1c5a      	adds	r2, r3, #1
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	7e1b      	ldrb	r3, [r3, #24]
 800454c:	b2db      	uxtb	r3, r3
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	3302      	adds	r3, #2
 8004554:	2201      	movs	r2, #1
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800455e:	fb02 f203 	mul.w	r2, r2, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	7a1b      	ldrb	r3, [r3, #8]
 800456a:	b2db      	uxtb	r3, r3
 800456c:	f003 030f 	and.w	r3, r3, #15
 8004570:	2201      	movs	r2, #1
 8004572:	409a      	lsls	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800457c:	687a      	ldr	r2, [r7, #4]
 800457e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004580:	0a52      	lsrs	r2, r2, #9
 8004582:	fb02 f203 	mul.w	r2, r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004590:	661a      	str	r2, [r3, #96]	; 0x60
 8004592:	e031      	b.n	80045f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004598:	2b01      	cmp	r3, #1
 800459a:	d11d      	bne.n	80045d8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045a0:	041b      	lsls	r3, r3, #16
 80045a2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045aa:	0c1b      	lsrs	r3, r3, #16
 80045ac:	431a      	orrs	r2, r3
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	3301      	adds	r3, #1
 80045b8:	029a      	lsls	r2, r3, #10
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045cc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	661a      	str	r2, [r3, #96]	; 0x60
 80045d6:	e00f      	b.n	80045f8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a58      	ldr	r2, [pc, #352]	; (8004740 <HAL_SD_GetCardCSD+0x344>)
 80045de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045e4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	e09d      	b.n	8004734 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045fc:	0b9b      	lsrs	r3, r3, #14
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	b2da      	uxtb	r2, r3
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800460e:	09db      	lsrs	r3, r3, #7
 8004610:	b2db      	uxtb	r3, r3
 8004612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004616:	b2da      	uxtb	r2, r3
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004620:	b2db      	uxtb	r3, r3
 8004622:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004626:	b2da      	uxtb	r2, r3
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004630:	0fdb      	lsrs	r3, r3, #31
 8004632:	b2da      	uxtb	r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463c:	0f5b      	lsrs	r3, r3, #29
 800463e:	b2db      	uxtb	r3, r3
 8004640:	f003 0303 	and.w	r3, r3, #3
 8004644:	b2da      	uxtb	r2, r3
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	0e9b      	lsrs	r3, r3, #26
 8004650:	b2db      	uxtb	r3, r3
 8004652:	f003 0307 	and.w	r3, r3, #7
 8004656:	b2da      	uxtb	r2, r3
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	0d9b      	lsrs	r3, r3, #22
 8004662:	b2db      	uxtb	r3, r3
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	b2da      	uxtb	r2, r3
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	0d5b      	lsrs	r3, r3, #21
 8004674:	b2db      	uxtb	r3, r3
 8004676:	f003 0301 	and.w	r3, r3, #1
 800467a:	b2da      	uxtb	r2, r3
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800468e:	0c1b      	lsrs	r3, r3, #16
 8004690:	b2db      	uxtb	r3, r3
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	b2da      	uxtb	r2, r3
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	0bdb      	lsrs	r3, r3, #15
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b6:	0b9b      	lsrs	r3, r3, #14
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	b2da      	uxtb	r2, r3
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	0b5b      	lsrs	r3, r3, #13
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	f003 0301 	and.w	r3, r3, #1
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046de:	0b1b      	lsrs	r3, r3, #12
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	b2da      	uxtb	r2, r3
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f2:	0a9b      	lsrs	r3, r3, #10
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	f003 0303 	and.w	r3, r3, #3
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f003 0303 	and.w	r3, r3, #3
 800470e:	b2da      	uxtb	r2, r3
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800471a:	085b      	lsrs	r3, r3, #1
 800471c:	b2db      	uxtb	r3, r3
 800471e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004722:	b2da      	uxtb	r2, r3
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	370c      	adds	r7, #12
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	004005ff 	.word	0x004005ff

08004744 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
 800474c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800478e:	2300      	movs	r3, #0
}
 8004790:	4618      	mov	r0, r3
 8004792:	370c      	adds	r7, #12
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800479c:	b5b0      	push	{r4, r5, r7, lr}
 800479e:	b08e      	sub	sp, #56	; 0x38
 80047a0:	af04      	add	r7, sp, #16
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2203      	movs	r2, #3
 80047aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b2:	2b03      	cmp	r3, #3
 80047b4:	d02e      	beq.n	8004814 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047bc:	d106      	bne.n	80047cc <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	639a      	str	r2, [r3, #56]	; 0x38
 80047ca:	e029      	b.n	8004820 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047d2:	d10a      	bne.n	80047ea <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f000 fa01 	bl	8004bdc <SD_WideBus_Enable>
 80047da:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	431a      	orrs	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38
 80047e8:	e01a      	b.n	8004820 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f000 fa3e 	bl	8004c72 <SD_WideBus_Disable>
 80047f6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	639a      	str	r2, [r3, #56]	; 0x38
 8004804:	e00c      	b.n	8004820 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	639a      	str	r2, [r3, #56]	; 0x38
 8004812:	e005      	b.n	8004820 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004818:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004824:	2b00      	cmp	r3, #0
 8004826:	d009      	beq.n	800483c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a18      	ldr	r2, [pc, #96]	; (8004890 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800482e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e024      	b.n	8004886 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	699b      	ldr	r3, [r3, #24]
 800485c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681d      	ldr	r5, [r3, #0]
 8004862:	466c      	mov	r4, sp
 8004864:	f107 0318 	add.w	r3, r7, #24
 8004868:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800486c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004870:	f107 030c 	add.w	r3, r7, #12
 8004874:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004876:	4628      	mov	r0, r5
 8004878:	f000 fb10 	bl	8004e9c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3728      	adds	r7, #40	; 0x28
 800488a:	46bd      	mov	sp, r7
 800488c:	bdb0      	pop	{r4, r5, r7, pc}
 800488e:	bf00      	nop
 8004890:	004005ff 	.word	0x004005ff

08004894 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80048a0:	f107 030c 	add.w	r3, r7, #12
 80048a4:	4619      	mov	r1, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f970 	bl	8004b8c <SD_SendStatus>
 80048ac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	431a      	orrs	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	0a5b      	lsrs	r3, r3, #9
 80048c4:	f003 030f 	and.w	r3, r3, #15
 80048c8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80048ca:	693b      	ldr	r3, [r7, #16]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	3718      	adds	r7, #24
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80048d4:	b5b0      	push	{r4, r5, r7, lr}
 80048d6:	b094      	sub	sp, #80	; 0x50
 80048d8:	af04      	add	r7, sp, #16
 80048da:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80048dc:	2301      	movs	r3, #1
 80048de:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f000 fb31 	bl	8004f4c <SDIO_GetPowerState>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d102      	bne.n	80048f6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80048f0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80048f4:	e0b7      	b.n	8004a66 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	2b03      	cmp	r3, #3
 80048fc:	d02f      	beq.n	800495e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f000 fd5a 	bl	80053bc <SDMMC_CmdSendCID>
 8004908:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800490a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490c:	2b00      	cmp	r3, #0
 800490e:	d001      	beq.n	8004914 <SD_InitCard+0x40>
    {
      return errorstate;
 8004910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004912:	e0a8      	b.n	8004a66 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2100      	movs	r1, #0
 800491a:	4618      	mov	r0, r3
 800491c:	f000 fb5b 	bl	8004fd6 <SDIO_GetResponse>
 8004920:	4602      	mov	r2, r0
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	2104      	movs	r1, #4
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fb52 	bl	8004fd6 <SDIO_GetResponse>
 8004932:	4602      	mov	r2, r0
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2108      	movs	r1, #8
 800493e:	4618      	mov	r0, r3
 8004940:	f000 fb49 	bl	8004fd6 <SDIO_GetResponse>
 8004944:	4602      	mov	r2, r0
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	210c      	movs	r1, #12
 8004950:	4618      	mov	r0, r3
 8004952:	f000 fb40 	bl	8004fd6 <SDIO_GetResponse>
 8004956:	4602      	mov	r2, r0
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004962:	2b03      	cmp	r3, #3
 8004964:	d00d      	beq.n	8004982 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f107 020e 	add.w	r2, r7, #14
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f000 fd60 	bl	8005436 <SDMMC_CmdSetRelAdd>
 8004976:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <SD_InitCard+0xae>
    {
      return errorstate;
 800497e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004980:	e071      	b.n	8004a66 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	2b03      	cmp	r3, #3
 8004988:	d036      	beq.n	80049f8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800498a:	89fb      	ldrh	r3, [r7, #14]
 800498c:	461a      	mov	r2, r3
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499a:	041b      	lsls	r3, r3, #16
 800499c:	4619      	mov	r1, r3
 800499e:	4610      	mov	r0, r2
 80049a0:	f000 fd2a 	bl	80053f8 <SDMMC_CmdSendCSD>
 80049a4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80049a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80049ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ae:	e05a      	b.n	8004a66 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2100      	movs	r1, #0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fb0d 	bl	8004fd6 <SDIO_GetResponse>
 80049bc:	4602      	mov	r2, r0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	2104      	movs	r1, #4
 80049c8:	4618      	mov	r0, r3
 80049ca:	f000 fb04 	bl	8004fd6 <SDIO_GetResponse>
 80049ce:	4602      	mov	r2, r0
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2108      	movs	r1, #8
 80049da:	4618      	mov	r0, r3
 80049dc:	f000 fafb 	bl	8004fd6 <SDIO_GetResponse>
 80049e0:	4602      	mov	r2, r0
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	210c      	movs	r1, #12
 80049ec:	4618      	mov	r0, r3
 80049ee:	f000 faf2 	bl	8004fd6 <SDIO_GetResponse>
 80049f2:	4602      	mov	r2, r0
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2104      	movs	r1, #4
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 fae9 	bl	8004fd6 <SDIO_GetResponse>
 8004a04:	4603      	mov	r3, r0
 8004a06:	0d1a      	lsrs	r2, r3, #20
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004a0c:	f107 0310 	add.w	r3, r7, #16
 8004a10:	4619      	mov	r1, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fcf2 	bl	80043fc <HAL_SD_GetCardCSD>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a22:	e020      	b.n	8004a66 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6819      	ldr	r1, [r3, #0]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2c:	041b      	lsls	r3, r3, #16
 8004a2e:	f04f 0400 	mov.w	r4, #0
 8004a32:	461a      	mov	r2, r3
 8004a34:	4623      	mov	r3, r4
 8004a36:	4608      	mov	r0, r1
 8004a38:	f000 fbd8 	bl	80051ec <SDMMC_CmdSelDesel>
 8004a3c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d001      	beq.n	8004a48 <SD_InitCard+0x174>
  {
    return errorstate;
 8004a44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a46:	e00e      	b.n	8004a66 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681d      	ldr	r5, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	466c      	mov	r4, sp
 8004a50:	f103 0210 	add.w	r2, r3, #16
 8004a54:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a5a:	3304      	adds	r3, #4
 8004a5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a5e:	4628      	mov	r0, r5
 8004a60:	f000 fa1c 	bl	8004e9c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3740      	adds	r7, #64	; 0x40
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004a70 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a78:	2300      	movs	r3, #0
 8004a7a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fbd2 	bl	8005232 <SDMMC_CmdGoIdleState>
 8004a8e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	e072      	b.n	8004b80 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 fbe5 	bl	800526e <SDMMC_CmdOperCond>
 8004aa4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d00d      	beq.n	8004ac8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 fbbb 	bl	8005232 <SDMMC_CmdGoIdleState>
 8004abc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d004      	beq.n	8004ace <SD_PowerON+0x5e>
    {
      return errorstate;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	e05b      	b.n	8004b80 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2201      	movs	r2, #1
 8004acc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d137      	bne.n	8004b46 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2100      	movs	r1, #0
 8004adc:	4618      	mov	r0, r3
 8004ade:	f000 fbe5 	bl	80052ac <SDMMC_CmdAppCommand>
 8004ae2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d02d      	beq.n	8004b46 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004aea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004aee:	e047      	b.n	8004b80 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2100      	movs	r1, #0
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 fbd8 	bl	80052ac <SDMMC_CmdAppCommand>
 8004afc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <SD_PowerON+0x98>
    {
      return errorstate;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	e03b      	b.n	8004b80 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	491e      	ldr	r1, [pc, #120]	; (8004b88 <SD_PowerON+0x118>)
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f000 fbee 	bl	80052f0 <SDMMC_CmdAppOperCommand>
 8004b14:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d002      	beq.n	8004b22 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b1c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b20:	e02e      	b.n	8004b80 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	2100      	movs	r1, #0
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f000 fa54 	bl	8004fd6 <SDIO_GetResponse>
 8004b2e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	0fdb      	lsrs	r3, r3, #31
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d101      	bne.n	8004b3c <SD_PowerON+0xcc>
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <SD_PowerON+0xce>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	613b      	str	r3, [r7, #16]

    count++;
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d802      	bhi.n	8004b56 <SD_PowerON+0xe6>
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0cc      	beq.n	8004af0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d902      	bls.n	8004b66 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004b60:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b64:	e00c      	b.n	8004b80 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	645a      	str	r2, [r3, #68]	; 0x44
 8004b76:	e002      	b.n	8004b7e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	c1100000 	.word	0xc1100000

08004b8c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b084      	sub	sp, #16
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
 8004b94:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d102      	bne.n	8004ba2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004b9c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ba0:	e018      	b.n	8004bd4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004baa:	041b      	lsls	r3, r3, #16
 8004bac:	4619      	mov	r1, r3
 8004bae:	4610      	mov	r0, r2
 8004bb0:	f000 fc62 	bl	8005478 <SDMMC_CmdSendStatus>
 8004bb4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d001      	beq.n	8004bc0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	e009      	b.n	8004bd4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fa05 	bl	8004fd6 <SDIO_GetResponse>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004bd2:	2300      	movs	r3, #0
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
 8004be8:	2300      	movs	r3, #0
 8004bea:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 f9ef 	bl	8004fd6 <SDIO_GetResponse>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bfe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c02:	d102      	bne.n	8004c0a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c08:	e02f      	b.n	8004c6a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c0a:	f107 030c 	add.w	r3, r7, #12
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f879 	bl	8004d08 <SD_FindSCR>
 8004c16:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c18:	697b      	ldr	r3, [r7, #20]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	e023      	b.n	8004c6a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d01c      	beq.n	8004c66 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	4619      	mov	r1, r3
 8004c38:	4610      	mov	r0, r2
 8004c3a:	f000 fb37 	bl	80052ac <SDMMC_CmdAppCommand>
 8004c3e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d001      	beq.n	8004c4a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	e00f      	b.n	8004c6a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2102      	movs	r1, #2
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 fb70 	bl	8005336 <SDMMC_CmdBusWidth>
 8004c56:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	e003      	b.n	8004c6a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c62:	2300      	movs	r3, #0
 8004c64:	e001      	b.n	8004c6a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c66:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3718      	adds	r7, #24
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b086      	sub	sp, #24
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	60fb      	str	r3, [r7, #12]
 8004c7e:	2300      	movs	r3, #0
 8004c80:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2100      	movs	r1, #0
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f000 f9a4 	bl	8004fd6 <SDIO_GetResponse>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c94:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c98:	d102      	bne.n	8004ca0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c9e:	e02f      	b.n	8004d00 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004ca0:	f107 030c 	add.w	r3, r7, #12
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f82e 	bl	8004d08 <SD_FindSCR>
 8004cac:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	e023      	b.n	8004d00 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d01c      	beq.n	8004cfc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cca:	041b      	lsls	r3, r3, #16
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f000 faec 	bl	80052ac <SDMMC_CmdAppCommand>
 8004cd4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d001      	beq.n	8004ce0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	e00f      	b.n	8004d00 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2100      	movs	r1, #0
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f000 fb25 	bl	8005336 <SDMMC_CmdBusWidth>
 8004cec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d001      	beq.n	8004cf8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	e003      	b.n	8004d00 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	e001      	b.n	8004d00 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cfc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004d08:	b590      	push	{r4, r7, lr}
 8004d0a:	b08f      	sub	sp, #60	; 0x3c
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004d12:	f7fd fc81 	bl	8002618 <HAL_GetTick>
 8004d16:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60bb      	str	r3, [r7, #8]
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	2108      	movs	r1, #8
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 f990 	bl	8005054 <SDMMC_CmdBlockLength>
 8004d34:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	e0a9      	b.n	8004e94 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	4619      	mov	r1, r3
 8004d4c:	4610      	mov	r0, r2
 8004d4e:	f000 faad 	bl	80052ac <SDMMC_CmdAppCommand>
 8004d52:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d001      	beq.n	8004d5e <SD_FindSCR+0x56>
  {
    return errorstate;
 8004d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5c:	e09a      	b.n	8004e94 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d62:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004d64:	2308      	movs	r3, #8
 8004d66:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004d68:	2330      	movs	r3, #48	; 0x30
 8004d6a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d70:	2300      	movs	r3, #0
 8004d72:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004d74:	2301      	movs	r3, #1
 8004d76:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f107 0210 	add.w	r2, r7, #16
 8004d80:	4611      	mov	r1, r2
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 f93a 	bl	8004ffc <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 faf4 	bl	800537a <SDMMC_CmdSendSCR>
 8004d92:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d022      	beq.n	8004de0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d9c:	e07a      	b.n	8004e94 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004da4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d00e      	beq.n	8004dca <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6819      	ldr	r1, [r3, #0]
 8004db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	f107 0208 	add.w	r2, r7, #8
 8004db8:	18d4      	adds	r4, r2, r3
 8004dba:	4608      	mov	r0, r1
 8004dbc:	f000 f899 	bl	8004ef2 <SDIO_ReadFIFO>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	6023      	str	r3, [r4, #0]
      index++;
 8004dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004dca:	f7fd fc25 	bl	8002618 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d102      	bne.n	8004de0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004dda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dde:	e059      	b.n	8004e94 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004de6:	f240 432a 	movw	r3, #1066	; 0x42a
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0d6      	beq.n	8004d9e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df6:	f003 0308 	and.w	r3, r3, #8
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2208      	movs	r2, #8
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004e06:	2308      	movs	r3, #8
 8004e08:	e044      	b.n	8004e94 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e10:	f003 0302 	and.w	r3, r3, #2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d005      	beq.n	8004e24 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e20:	2302      	movs	r3, #2
 8004e22:	e037      	b.n	8004e94 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2a:	f003 0320 	and.w	r3, r3, #32
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2220      	movs	r2, #32
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004e3a:	2320      	movs	r3, #32
 8004e3c:	e02a      	b.n	8004e94 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	061a      	lsls	r2, r3, #24
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	021b      	lsls	r3, r3, #8
 8004e50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e54:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	0a1b      	lsrs	r3, r3, #8
 8004e5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e5e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	0e1b      	lsrs	r3, r3, #24
 8004e64:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	601a      	str	r2, [r3, #0]
    scr++;
 8004e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6c:	3304      	adds	r3, #4
 8004e6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	061a      	lsls	r2, r3, #24
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e7c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	0a1b      	lsrs	r3, r3, #8
 8004e82:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e86:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	0e1b      	lsrs	r3, r3, #24
 8004e8c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e90:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	373c      	adds	r7, #60	; 0x3c
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd90      	pop	{r4, r7, pc}

08004e9c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004e9c:	b084      	sub	sp, #16
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	f107 001c 	add.w	r0, r7, #28
 8004eaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004eb2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004eb4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004eb6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004eba:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004ebe:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004ec2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004ec6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004ed6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	431a      	orrs	r2, r3
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	b004      	add	sp, #16
 8004ef0:	4770      	bx	lr

08004ef2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004ef2:	b480      	push	{r7}
 8004ef4:	b083      	sub	sp, #12
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004f2e:	b580      	push	{r7, lr}
 8004f30:	b082      	sub	sp, #8
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2203      	movs	r2, #3
 8004f3a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004f3c:	2002      	movs	r0, #2
 8004f3e:	f7fd fb77 	bl	8002630 <HAL_Delay>
  
  return HAL_OK;
 8004f42:	2300      	movs	r3, #0
}
 8004f44:	4618      	mov	r0, r3
 8004f46:	3708      	adds	r7, #8
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}

08004f4c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b083      	sub	sp, #12
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f003 0303 	and.w	r3, r3, #3
}
 8004f5c:	4618      	mov	r0, r3
 8004f5e:	370c      	adds	r7, #12
 8004f60:	46bd      	mov	sp, r7
 8004f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f66:	4770      	bx	lr

08004f68 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f86:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004f8c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004f92:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004fa2:	f023 030f 	bic.w	r3, r3, #15
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3714      	adds	r7, #20
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	691b      	ldr	r3, [r3, #16]
 8004fc8:	b2db      	uxtb	r3, r3
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3314      	adds	r3, #20
 8004fe4:	461a      	mov	r2, r3
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	4413      	add	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
}  
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005006:	2300      	movs	r3, #0
 8005008:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005022:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8005028:	431a      	orrs	r2, r3
                       Data->DPSM);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800502e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	431a      	orrs	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005046:	2300      	movs	r3, #0

}
 8005048:	4618      	mov	r0, r3
 800504a:	3714      	adds	r7, #20
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b088      	sub	sp, #32
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005062:	2310      	movs	r3, #16
 8005064:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005066:	2340      	movs	r3, #64	; 0x40
 8005068:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800506a:	2300      	movs	r3, #0
 800506c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800506e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005072:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005074:	f107 0308 	add.w	r3, r7, #8
 8005078:	4619      	mov	r1, r3
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff ff74 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005080:	f241 3288 	movw	r2, #5000	; 0x1388
 8005084:	2110      	movs	r1, #16
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fa40 	bl	800550c <SDMMC_GetCmdResp1>
 800508c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800508e:	69fb      	ldr	r3, [r7, #28]
}
 8005090:	4618      	mov	r0, r3
 8005092:	3720      	adds	r7, #32
 8005094:	46bd      	mov	sp, r7
 8005096:	bd80      	pop	{r7, pc}

08005098 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b088      	sub	sp, #32
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80050a6:	2311      	movs	r3, #17
 80050a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050aa:	2340      	movs	r3, #64	; 0x40
 80050ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050ae:	2300      	movs	r3, #0
 80050b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050b8:	f107 0308 	add.w	r3, r7, #8
 80050bc:	4619      	mov	r1, r3
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff ff52 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80050c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80050c8:	2111      	movs	r1, #17
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fa1e 	bl	800550c <SDMMC_GetCmdResp1>
 80050d0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050d2:	69fb      	ldr	r3, [r7, #28]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3720      	adds	r7, #32
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80050ea:	2312      	movs	r3, #18
 80050ec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050ee:	2340      	movs	r3, #64	; 0x40
 80050f0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050f2:	2300      	movs	r3, #0
 80050f4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050fa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050fc:	f107 0308 	add.w	r3, r7, #8
 8005100:	4619      	mov	r1, r3
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff ff30 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005108:	f241 3288 	movw	r2, #5000	; 0x1388
 800510c:	2112      	movs	r1, #18
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f9fc 	bl	800550c <SDMMC_GetCmdResp1>
 8005114:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005116:	69fb      	ldr	r3, [r7, #28]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3720      	adds	r7, #32
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b088      	sub	sp, #32
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800512e:	2318      	movs	r3, #24
 8005130:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005132:	2340      	movs	r3, #64	; 0x40
 8005134:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800513a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800513e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005140:	f107 0308 	add.w	r3, r7, #8
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff ff0e 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800514c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005150:	2118      	movs	r1, #24
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f9da 	bl	800550c <SDMMC_GetCmdResp1>
 8005158:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800515a:	69fb      	ldr	r3, [r7, #28]
}
 800515c:	4618      	mov	r0, r3
 800515e:	3720      	adds	r7, #32
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b088      	sub	sp, #32
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005172:	2319      	movs	r3, #25
 8005174:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005176:	2340      	movs	r3, #64	; 0x40
 8005178:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800517e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005182:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005184:	f107 0308 	add.w	r3, r7, #8
 8005188:	4619      	mov	r1, r3
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff feec 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005190:	f241 3288 	movw	r2, #5000	; 0x1388
 8005194:	2119      	movs	r1, #25
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 f9b8 	bl	800550c <SDMMC_GetCmdResp1>
 800519c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800519e:	69fb      	ldr	r3, [r7, #28]
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3720      	adds	r7, #32
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}

080051a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b088      	sub	sp, #32
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80051b4:	230c      	movs	r3, #12
 80051b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051b8:	2340      	movs	r3, #64	; 0x40
 80051ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051bc:	2300      	movs	r3, #0
 80051be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051c6:	f107 0308 	add.w	r3, r7, #8
 80051ca:	4619      	mov	r1, r3
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7ff fecb 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80051d2:	4a05      	ldr	r2, [pc, #20]	; (80051e8 <SDMMC_CmdStopTransfer+0x40>)
 80051d4:	210c      	movs	r1, #12
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f998 	bl	800550c <SDMMC_GetCmdResp1>
 80051dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051de:	69fb      	ldr	r3, [r7, #28]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	05f5e100 	.word	0x05f5e100

080051ec <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b08a      	sub	sp, #40	; 0x28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80051fc:	2307      	movs	r3, #7
 80051fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005200:	2340      	movs	r3, #64	; 0x40
 8005202:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005204:	2300      	movs	r3, #0
 8005206:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005208:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800520c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800520e:	f107 0310 	add.w	r3, r7, #16
 8005212:	4619      	mov	r1, r3
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff fea7 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800521a:	f241 3288 	movw	r2, #5000	; 0x1388
 800521e:	2107      	movs	r1, #7
 8005220:	68f8      	ldr	r0, [r7, #12]
 8005222:	f000 f973 	bl	800550c <SDMMC_GetCmdResp1>
 8005226:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800522a:	4618      	mov	r0, r3
 800522c:	3728      	adds	r7, #40	; 0x28
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b088      	sub	sp, #32
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800523a:	2300      	movs	r3, #0
 800523c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800523e:	2300      	movs	r3, #0
 8005240:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005242:	2300      	movs	r3, #0
 8005244:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005246:	2300      	movs	r3, #0
 8005248:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800524a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800524e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005250:	f107 0308 	add.w	r3, r7, #8
 8005254:	4619      	mov	r1, r3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f7ff fe86 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 f92d 	bl	80054bc <SDMMC_GetCmdError>
 8005262:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005264:	69fb      	ldr	r3, [r7, #28]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3720      	adds	r7, #32
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}

0800526e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	b088      	sub	sp, #32
 8005272:	af00      	add	r7, sp, #0
 8005274:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005276:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800527a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800527c:	2308      	movs	r3, #8
 800527e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005280:	2340      	movs	r3, #64	; 0x40
 8005282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005284:	2300      	movs	r3, #0
 8005286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800528c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800528e:	f107 0308 	add.w	r3, r7, #8
 8005292:	4619      	mov	r1, r3
 8005294:	6878      	ldr	r0, [r7, #4]
 8005296:	f7ff fe67 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 fb16 	bl	80058cc <SDMMC_GetCmdResp7>
 80052a0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052a2:	69fb      	ldr	r3, [r7, #28]
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3720      	adds	r7, #32
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80052ba:	2337      	movs	r3, #55	; 0x37
 80052bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052be:	2340      	movs	r3, #64	; 0x40
 80052c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052c2:	2300      	movs	r3, #0
 80052c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052ca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052cc:	f107 0308 	add.w	r3, r7, #8
 80052d0:	4619      	mov	r1, r3
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f7ff fe48 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80052d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052dc:	2137      	movs	r1, #55	; 0x37
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f914 	bl	800550c <SDMMC_GetCmdResp1>
 80052e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052e6:	69fb      	ldr	r3, [r7, #28]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b088      	sub	sp, #32
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005300:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005306:	2329      	movs	r3, #41	; 0x29
 8005308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800530a:	2340      	movs	r3, #64	; 0x40
 800530c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800530e:	2300      	movs	r3, #0
 8005310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005316:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005318:	f107 0308 	add.w	r3, r7, #8
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f7ff fe22 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 fa23 	bl	8005770 <SDMMC_GetCmdResp3>
 800532a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800532c:	69fb      	ldr	r3, [r7, #28]
}
 800532e:	4618      	mov	r0, r3
 8005330:	3720      	adds	r7, #32
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005336:	b580      	push	{r7, lr}
 8005338:	b088      	sub	sp, #32
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005344:	2306      	movs	r3, #6
 8005346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005348:	2340      	movs	r3, #64	; 0x40
 800534a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800534c:	2300      	movs	r3, #0
 800534e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005354:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005356:	f107 0308 	add.w	r3, r7, #8
 800535a:	4619      	mov	r1, r3
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f7ff fe03 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005362:	f241 3288 	movw	r2, #5000	; 0x1388
 8005366:	2106      	movs	r1, #6
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f000 f8cf 	bl	800550c <SDMMC_GetCmdResp1>
 800536e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005370:	69fb      	ldr	r3, [r7, #28]
}
 8005372:	4618      	mov	r0, r3
 8005374:	3720      	adds	r7, #32
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}

0800537a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800537a:	b580      	push	{r7, lr}
 800537c:	b088      	sub	sp, #32
 800537e:	af00      	add	r7, sp, #0
 8005380:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005386:	2333      	movs	r3, #51	; 0x33
 8005388:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800538a:	2340      	movs	r3, #64	; 0x40
 800538c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800538e:	2300      	movs	r3, #0
 8005390:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005396:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005398:	f107 0308 	add.w	r3, r7, #8
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f7ff fde2 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80053a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80053a8:	2133      	movs	r1, #51	; 0x33
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f8ae 	bl	800550c <SDMMC_GetCmdResp1>
 80053b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053b2:	69fb      	ldr	r3, [r7, #28]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3720      	adds	r7, #32
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b088      	sub	sp, #32
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80053c8:	2302      	movs	r3, #2
 80053ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80053cc:	23c0      	movs	r3, #192	; 0xc0
 80053ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053d0:	2300      	movs	r3, #0
 80053d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053da:	f107 0308 	add.w	r3, r7, #8
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f7ff fdc1 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f97c 	bl	80056e4 <SDMMC_GetCmdResp2>
 80053ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053ee:	69fb      	ldr	r3, [r7, #28]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3720      	adds	r7, #32
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b088      	sub	sp, #32
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005406:	2309      	movs	r3, #9
 8005408:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800540a:	23c0      	movs	r3, #192	; 0xc0
 800540c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800540e:	2300      	movs	r3, #0
 8005410:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005416:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005418:	f107 0308 	add.w	r3, r7, #8
 800541c:	4619      	mov	r1, r3
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f7ff fda2 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 f95d 	bl	80056e4 <SDMMC_GetCmdResp2>
 800542a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800542c:	69fb      	ldr	r3, [r7, #28]
}
 800542e:	4618      	mov	r0, r3
 8005430:	3720      	adds	r7, #32
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b088      	sub	sp, #32
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005440:	2300      	movs	r3, #0
 8005442:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005444:	2303      	movs	r3, #3
 8005446:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005448:	2340      	movs	r3, #64	; 0x40
 800544a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005450:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005454:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005456:	f107 0308 	add.w	r3, r7, #8
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f7ff fd83 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005462:	683a      	ldr	r2, [r7, #0]
 8005464:	2103      	movs	r1, #3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 f9bc 	bl	80057e4 <SDMMC_GetCmdResp6>
 800546c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800546e:	69fb      	ldr	r3, [r7, #28]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3720      	adds	r7, #32
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b088      	sub	sp, #32
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005486:	230d      	movs	r3, #13
 8005488:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800548a:	2340      	movs	r3, #64	; 0x40
 800548c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800548e:	2300      	movs	r3, #0
 8005490:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005496:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005498:	f107 0308 	add.w	r3, r7, #8
 800549c:	4619      	mov	r1, r3
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f7ff fd62 	bl	8004f68 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80054a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054a8:	210d      	movs	r1, #13
 80054aa:	6878      	ldr	r0, [r7, #4]
 80054ac:	f000 f82e 	bl	800550c <SDMMC_GetCmdResp1>
 80054b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054b2:	69fb      	ldr	r3, [r7, #28]
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3720      	adds	r7, #32
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80054bc:	b490      	push	{r4, r7}
 80054be:	b082      	sub	sp, #8
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054c4:	4b0f      	ldr	r3, [pc, #60]	; (8005504 <SDMMC_GetCmdError+0x48>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a0f      	ldr	r2, [pc, #60]	; (8005508 <SDMMC_GetCmdError+0x4c>)
 80054ca:	fba2 2303 	umull	r2, r3, r2, r3
 80054ce:	0a5b      	lsrs	r3, r3, #9
 80054d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80054d8:	4623      	mov	r3, r4
 80054da:	1e5c      	subs	r4, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d102      	bne.n	80054e6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054e4:	e009      	b.n	80054fa <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0f2      	beq.n	80054d8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	22c5      	movs	r2, #197	; 0xc5
 80054f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80054f8:	2300      	movs	r3, #0
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3708      	adds	r7, #8
 80054fe:	46bd      	mov	sp, r7
 8005500:	bc90      	pop	{r4, r7}
 8005502:	4770      	bx	lr
 8005504:	20000004 	.word	0x20000004
 8005508:	10624dd3 	.word	0x10624dd3

0800550c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800550c:	b590      	push	{r4, r7, lr}
 800550e:	b087      	sub	sp, #28
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	460b      	mov	r3, r1
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800551a:	4b6f      	ldr	r3, [pc, #444]	; (80056d8 <SDMMC_GetCmdResp1+0x1cc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a6f      	ldr	r2, [pc, #444]	; (80056dc <SDMMC_GetCmdResp1+0x1d0>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	0a5b      	lsrs	r3, r3, #9
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800552c:	4623      	mov	r3, r4
 800552e:	1e5c      	subs	r4, r3, #1
 8005530:	2b00      	cmp	r3, #0
 8005532:	d102      	bne.n	800553a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005534:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005538:	e0c9      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005546:	2b00      	cmp	r3, #0
 8005548:	d0f0      	beq.n	800552c <SDMMC_GetCmdResp1+0x20>
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1eb      	bne.n	800552c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	d004      	beq.n	800556a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2204      	movs	r2, #4
 8005564:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005566:	2304      	movs	r3, #4
 8005568:	e0b1      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d004      	beq.n	8005580 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2201      	movs	r2, #1
 800557a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800557c:	2301      	movs	r3, #1
 800557e:	e0a6      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	22c5      	movs	r2, #197	; 0xc5
 8005584:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005586:	68f8      	ldr	r0, [r7, #12]
 8005588:	f7ff fd18 	bl	8004fbc <SDIO_GetCommandResponse>
 800558c:	4603      	mov	r3, r0
 800558e:	461a      	mov	r2, r3
 8005590:	7afb      	ldrb	r3, [r7, #11]
 8005592:	4293      	cmp	r3, r2
 8005594:	d001      	beq.n	800559a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005596:	2301      	movs	r3, #1
 8005598:	e099      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800559a:	2100      	movs	r1, #0
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f7ff fd1a 	bl	8004fd6 <SDIO_GetResponse>
 80055a2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4b4e      	ldr	r3, [pc, #312]	; (80056e0 <SDMMC_GetCmdResp1+0x1d4>)
 80055a8:	4013      	ands	r3, r2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e08d      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	da02      	bge.n	80055be <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80055b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055bc:	e087      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80055c8:	2340      	movs	r3, #64	; 0x40
 80055ca:	e080      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80055d6:	2380      	movs	r3, #128	; 0x80
 80055d8:	e079      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80055e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055e8:	e071      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80055f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80055f8:	e069      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005604:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005608:	e061      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005614:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005618:	e059      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005628:	e051      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005634:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005638:	e049      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005644:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005648:	e041      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005658:	e039      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005664:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005668:	e031      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005674:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005678:	e029      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005684:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005688:	e021      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005694:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005698:	e019      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80056a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056a8:	e011      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80056b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056b8:	e009      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80056c4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80056c8:	e001      	b.n	80056ce <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80056ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80056ce:	4618      	mov	r0, r3
 80056d0:	371c      	adds	r7, #28
 80056d2:	46bd      	mov	sp, r7
 80056d4:	bd90      	pop	{r4, r7, pc}
 80056d6:	bf00      	nop
 80056d8:	20000004 	.word	0x20000004
 80056dc:	10624dd3 	.word	0x10624dd3
 80056e0:	fdffe008 	.word	0xfdffe008

080056e4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80056e4:	b490      	push	{r4, r7}
 80056e6:	b084      	sub	sp, #16
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056ec:	4b1e      	ldr	r3, [pc, #120]	; (8005768 <SDMMC_GetCmdResp2+0x84>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a1e      	ldr	r2, [pc, #120]	; (800576c <SDMMC_GetCmdResp2+0x88>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	0a5b      	lsrs	r3, r3, #9
 80056f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80056fc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005700:	4623      	mov	r3, r4
 8005702:	1e5c      	subs	r4, r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005708:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800570c:	e026      	b.n	800575c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005712:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800571a:	2b00      	cmp	r3, #0
 800571c:	d0f0      	beq.n	8005700 <SDMMC_GetCmdResp2+0x1c>
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1eb      	bne.n	8005700 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800572c:	f003 0304 	and.w	r3, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	d004      	beq.n	800573e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2204      	movs	r2, #4
 8005738:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800573a:	2304      	movs	r3, #4
 800573c:	e00e      	b.n	800575c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005742:	f003 0301 	and.w	r3, r3, #1
 8005746:	2b00      	cmp	r3, #0
 8005748:	d004      	beq.n	8005754 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005750:	2301      	movs	r3, #1
 8005752:	e003      	b.n	800575c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	22c5      	movs	r2, #197	; 0xc5
 8005758:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bc90      	pop	{r4, r7}
 8005764:	4770      	bx	lr
 8005766:	bf00      	nop
 8005768:	20000004 	.word	0x20000004
 800576c:	10624dd3 	.word	0x10624dd3

08005770 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005770:	b490      	push	{r4, r7}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005778:	4b18      	ldr	r3, [pc, #96]	; (80057dc <SDMMC_GetCmdResp3+0x6c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a18      	ldr	r2, [pc, #96]	; (80057e0 <SDMMC_GetCmdResp3+0x70>)
 800577e:	fba2 2303 	umull	r2, r3, r2, r3
 8005782:	0a5b      	lsrs	r3, r3, #9
 8005784:	f241 3288 	movw	r2, #5000	; 0x1388
 8005788:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800578c:	4623      	mov	r3, r4
 800578e:	1e5c      	subs	r4, r3, #1
 8005790:	2b00      	cmp	r3, #0
 8005792:	d102      	bne.n	800579a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005794:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005798:	e01b      	b.n	80057d2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800579e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d0f0      	beq.n	800578c <SDMMC_GetCmdResp3+0x1c>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1eb      	bne.n	800578c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b8:	f003 0304 	and.w	r3, r3, #4
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d004      	beq.n	80057ca <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2204      	movs	r2, #4
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057c6:	2304      	movs	r3, #4
 80057c8:	e003      	b.n	80057d2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	22c5      	movs	r2, #197	; 0xc5
 80057ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bc90      	pop	{r4, r7}
 80057da:	4770      	bx	lr
 80057dc:	20000004 	.word	0x20000004
 80057e0:	10624dd3 	.word	0x10624dd3

080057e4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80057e4:	b590      	push	{r4, r7, lr}
 80057e6:	b087      	sub	sp, #28
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	460b      	mov	r3, r1
 80057ee:	607a      	str	r2, [r7, #4]
 80057f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80057f2:	4b34      	ldr	r3, [pc, #208]	; (80058c4 <SDMMC_GetCmdResp6+0xe0>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a34      	ldr	r2, [pc, #208]	; (80058c8 <SDMMC_GetCmdResp6+0xe4>)
 80057f8:	fba2 2303 	umull	r2, r3, r2, r3
 80057fc:	0a5b      	lsrs	r3, r3, #9
 80057fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005802:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005806:	4623      	mov	r3, r4
 8005808:	1e5c      	subs	r4, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d102      	bne.n	8005814 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800580e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005812:	e052      	b.n	80058ba <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005818:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <SDMMC_GetCmdResp6+0x22>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1eb      	bne.n	8005806 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	f003 0304 	and.w	r3, r3, #4
 8005836:	2b00      	cmp	r3, #0
 8005838:	d004      	beq.n	8005844 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2204      	movs	r2, #4
 800583e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005840:	2304      	movs	r3, #4
 8005842:	e03a      	b.n	80058ba <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005848:	f003 0301 	and.w	r3, r3, #1
 800584c:	2b00      	cmp	r3, #0
 800584e:	d004      	beq.n	800585a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2201      	movs	r2, #1
 8005854:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005856:	2301      	movs	r3, #1
 8005858:	e02f      	b.n	80058ba <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f7ff fbae 	bl	8004fbc <SDIO_GetCommandResponse>
 8005860:	4603      	mov	r3, r0
 8005862:	461a      	mov	r2, r3
 8005864:	7afb      	ldrb	r3, [r7, #11]
 8005866:	4293      	cmp	r3, r2
 8005868:	d001      	beq.n	800586e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800586a:	2301      	movs	r3, #1
 800586c:	e025      	b.n	80058ba <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	22c5      	movs	r2, #197	; 0xc5
 8005872:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005874:	2100      	movs	r1, #0
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f7ff fbad 	bl	8004fd6 <SDIO_GetResponse>
 800587c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005884:	2b00      	cmp	r3, #0
 8005886:	d106      	bne.n	8005896 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	0c1b      	lsrs	r3, r3, #16
 800588c:	b29a      	uxth	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005892:	2300      	movs	r3, #0
 8005894:	e011      	b.n	80058ba <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005896:	693b      	ldr	r3, [r7, #16]
 8005898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d002      	beq.n	80058a6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80058a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058a4:	e009      	b.n	80058ba <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80058a6:	693b      	ldr	r3, [r7, #16]
 80058a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80058b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058b4:	e001      	b.n	80058ba <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80058b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd90      	pop	{r4, r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20000004 	.word	0x20000004
 80058c8:	10624dd3 	.word	0x10624dd3

080058cc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80058cc:	b490      	push	{r4, r7}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058d4:	4b21      	ldr	r3, [pc, #132]	; (800595c <SDMMC_GetCmdResp7+0x90>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a21      	ldr	r2, [pc, #132]	; (8005960 <SDMMC_GetCmdResp7+0x94>)
 80058da:	fba2 2303 	umull	r2, r3, r2, r3
 80058de:	0a5b      	lsrs	r3, r3, #9
 80058e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80058e8:	4623      	mov	r3, r4
 80058ea:	1e5c      	subs	r4, r3, #1
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d102      	bne.n	80058f6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058f4:	e02c      	b.n	8005950 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058fa:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0f0      	beq.n	80058e8 <SDMMC_GetCmdResp7+0x1c>
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1eb      	bne.n	80058e8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d004      	beq.n	8005926 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2204      	movs	r2, #4
 8005920:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005922:	2304      	movs	r3, #4
 8005924:	e014      	b.n	8005950 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592a:	f003 0301 	and.w	r3, r3, #1
 800592e:	2b00      	cmp	r3, #0
 8005930:	d004      	beq.n	800593c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005938:	2301      	movs	r3, #1
 800593a:	e009      	b.n	8005950 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2240      	movs	r2, #64	; 0x40
 800594c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800594e:	2300      	movs	r3, #0
  
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bc90      	pop	{r4, r7}
 8005958:	4770      	bx	lr
 800595a:	bf00      	nop
 800595c:	20000004 	.word	0x20000004
 8005960:	10624dd3 	.word	0x10624dd3

08005964 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005968:	4904      	ldr	r1, [pc, #16]	; (800597c <MX_FATFS_Init+0x18>)
 800596a:	4805      	ldr	r0, [pc, #20]	; (8005980 <MX_FATFS_Init+0x1c>)
 800596c:	f003 fbe8 	bl	8009140 <FATFS_LinkDriver>
 8005970:	4603      	mov	r3, r0
 8005972:	461a      	mov	r2, r3
 8005974:	4b03      	ldr	r3, [pc, #12]	; (8005984 <MX_FATFS_Init+0x20>)
 8005976:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005978:	bf00      	nop
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20000a68 	.word	0x20000a68
 8005980:	080138b4 	.word	0x080138b4
 8005984:	20000a64 	.word	0x20000a64

08005988 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005988:	b480      	push	{r7}
 800598a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800598c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800598e:	4618      	mov	r0, r3
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80059a2:	f000 f879 	bl	8005a98 <BSP_SD_IsDetected>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d001      	beq.n	80059b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e012      	b.n	80059d6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80059b0:	480b      	ldr	r0, [pc, #44]	; (80059e0 <BSP_SD_Init+0x48>)
 80059b2:	f7fe f8fb 	bl	8003bac <HAL_SD_Init>
 80059b6:	4603      	mov	r3, r0
 80059b8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80059ba:	79fb      	ldrb	r3, [r7, #7]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d109      	bne.n	80059d4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80059c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059c4:	4806      	ldr	r0, [pc, #24]	; (80059e0 <BSP_SD_Init+0x48>)
 80059c6:	f7fe fee9 	bl	800479c <HAL_SD_ConfigWideBusOperation>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d001      	beq.n	80059d4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80059d4:	79fb      	ldrb	r3, [r7, #7]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3708      	adds	r7, #8
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	20000980 	.word	0x20000980

080059e4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b088      	sub	sp, #32
 80059e8:	af02      	add	r7, sp, #8
 80059ea:	60f8      	str	r0, [r7, #12]
 80059ec:	60b9      	str	r1, [r7, #8]
 80059ee:	607a      	str	r2, [r7, #4]
 80059f0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80059f2:	2300      	movs	r3, #0
 80059f4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	9300      	str	r3, [sp, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	68f9      	ldr	r1, [r7, #12]
 8005a00:	4806      	ldr	r0, [pc, #24]	; (8005a1c <BSP_SD_ReadBlocks+0x38>)
 8005a02:	f7fe f963 	bl	8003ccc <HAL_SD_ReadBlocks>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000980 	.word	0x20000980

08005a20 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b088      	sub	sp, #32
 8005a24:	af02      	add	r7, sp, #8
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
 8005a2c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	68ba      	ldr	r2, [r7, #8]
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	4806      	ldr	r0, [pc, #24]	; (8005a58 <BSP_SD_WriteBlocks+0x38>)
 8005a3e:	f7fe fb3d 	bl	80040bc <HAL_SD_WriteBlocks>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005a4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3718      	adds	r7, #24
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	20000980 	.word	0x20000980

08005a5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005a60:	4805      	ldr	r0, [pc, #20]	; (8005a78 <BSP_SD_GetCardState+0x1c>)
 8005a62:	f7fe ff17 	bl	8004894 <HAL_SD_GetCardState>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b04      	cmp	r3, #4
 8005a6a:	bf14      	ite	ne
 8005a6c:	2301      	movne	r3, #1
 8005a6e:	2300      	moveq	r3, #0
 8005a70:	b2db      	uxtb	r3, r3
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	20000980 	.word	0x20000980

08005a7c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b082      	sub	sp, #8
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	4803      	ldr	r0, [pc, #12]	; (8005a94 <BSP_SD_GetCardInfo+0x18>)
 8005a88:	f7fe fe5c 	bl	8004744 <HAL_SD_GetCardInfo>
}
 8005a8c:	bf00      	nop
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	20000980 	.word	0x20000980

08005a98 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	b2db      	uxtb	r3, r3
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	370c      	adds	r7, #12
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab0:	4770      	bx	lr
	...

08005ab4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b082      	sub	sp, #8
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	4603      	mov	r3, r0
 8005abc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005abe:	4b0b      	ldr	r3, [pc, #44]	; (8005aec <SD_CheckStatus+0x38>)
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005ac4:	f7ff ffca 	bl	8005a5c <BSP_SD_GetCardState>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d107      	bne.n	8005ade <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005ace:	4b07      	ldr	r3, [pc, #28]	; (8005aec <SD_CheckStatus+0x38>)
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	b2db      	uxtb	r3, r3
 8005ad4:	f023 0301 	bic.w	r3, r3, #1
 8005ad8:	b2da      	uxtb	r2, r3
 8005ada:	4b04      	ldr	r3, [pc, #16]	; (8005aec <SD_CheckStatus+0x38>)
 8005adc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005ade:	4b03      	ldr	r3, [pc, #12]	; (8005aec <SD_CheckStatus+0x38>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	b2db      	uxtb	r3, r3
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3708      	adds	r7, #8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}
 8005aec:	2000000d 	.word	0x2000000d

08005af0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b082      	sub	sp, #8
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	4603      	mov	r3, r0
 8005af8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <SD_initialize+0x38>)
 8005afc:	2201      	movs	r2, #1
 8005afe:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005b00:	f7ff ff4a 	bl	8005998 <BSP_SD_Init>
 8005b04:	4603      	mov	r3, r0
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d107      	bne.n	8005b1a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f7ff ffd1 	bl	8005ab4 <SD_CheckStatus>
 8005b12:	4603      	mov	r3, r0
 8005b14:	461a      	mov	r2, r3
 8005b16:	4b04      	ldr	r3, [pc, #16]	; (8005b28 <SD_initialize+0x38>)
 8005b18:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005b1a:	4b03      	ldr	r3, [pc, #12]	; (8005b28 <SD_initialize+0x38>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	b2db      	uxtb	r3, r3
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}
 8005b28:	2000000d 	.word	0x2000000d

08005b2c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	4603      	mov	r3, r0
 8005b34:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005b36:	79fb      	ldrb	r3, [r7, #7]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f7ff ffbb 	bl	8005ab4 <SD_CheckStatus>
 8005b3e:	4603      	mov	r3, r0
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3708      	adds	r7, #8
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b086      	sub	sp, #24
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60b9      	str	r1, [r7, #8]
 8005b50:	607a      	str	r2, [r7, #4]
 8005b52:	603b      	str	r3, [r7, #0]
 8005b54:	4603      	mov	r3, r0
 8005b56:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8005b60:	683a      	ldr	r2, [r7, #0]
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	68b8      	ldr	r0, [r7, #8]
 8005b66:	f7ff ff3d 	bl	80059e4 <BSP_SD_ReadBlocks>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d107      	bne.n	8005b80 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005b70:	bf00      	nop
 8005b72:	f7ff ff73 	bl	8005a5c <BSP_SD_GetCardState>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1fa      	bne.n	8005b72 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005b80:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3718      	adds	r7, #24
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b086      	sub	sp, #24
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	4603      	mov	r3, r0
 8005b98:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	6879      	ldr	r1, [r7, #4]
 8005ba6:	68b8      	ldr	r0, [r7, #8]
 8005ba8:	f7ff ff3a 	bl	8005a20 <BSP_SD_WriteBlocks>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d107      	bne.n	8005bc2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005bb2:	bf00      	nop
 8005bb4:	f7ff ff52 	bl	8005a5c <BSP_SD_GetCardState>
 8005bb8:	4603      	mov	r3, r0
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1fa      	bne.n	8005bb4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b08c      	sub	sp, #48	; 0x30
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	603a      	str	r2, [r7, #0]
 8005bd6:	71fb      	strb	r3, [r7, #7]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005be2:	4b25      	ldr	r3, [pc, #148]	; (8005c78 <SD_ioctl+0xac>)
 8005be4:	781b      	ldrb	r3, [r3, #0]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <SD_ioctl+0x28>
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e03c      	b.n	8005c6e <SD_ioctl+0xa2>

  switch (cmd)
 8005bf4:	79bb      	ldrb	r3, [r7, #6]
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d834      	bhi.n	8005c64 <SD_ioctl+0x98>
 8005bfa:	a201      	add	r2, pc, #4	; (adr r2, 8005c00 <SD_ioctl+0x34>)
 8005bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c00:	08005c11 	.word	0x08005c11
 8005c04:	08005c19 	.word	0x08005c19
 8005c08:	08005c31 	.word	0x08005c31
 8005c0c:	08005c4b 	.word	0x08005c4b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005c10:	2300      	movs	r3, #0
 8005c12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c16:	e028      	b.n	8005c6a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c18:	f107 030c 	add.w	r3, r7, #12
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff ff2d 	bl	8005a7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005c22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c2e:	e01c      	b.n	8005c6a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c30:	f107 030c 	add.w	r3, r7, #12
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7ff ff21 	bl	8005a7c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c48:	e00f      	b.n	8005c6a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c4a:	f107 030c 	add.w	r3, r7, #12
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f7ff ff14 	bl	8005a7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c56:	0a5a      	lsrs	r2, r3, #9
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c62:	e002      	b.n	8005c6a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005c64:	2304      	movs	r3, #4
 8005c66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005c6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3730      	adds	r7, #48	; 0x30
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	2000000d 	.word	0x2000000d

08005c7c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005c86:	79fb      	ldrb	r3, [r7, #7]
 8005c88:	4a08      	ldr	r2, [pc, #32]	; (8005cac <disk_status+0x30>)
 8005c8a:	009b      	lsls	r3, r3, #2
 8005c8c:	4413      	add	r3, r2
 8005c8e:	685b      	ldr	r3, [r3, #4]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	79fa      	ldrb	r2, [r7, #7]
 8005c94:	4905      	ldr	r1, [pc, #20]	; (8005cac <disk_status+0x30>)
 8005c96:	440a      	add	r2, r1
 8005c98:	7a12      	ldrb	r2, [r2, #8]
 8005c9a:	4610      	mov	r0, r2
 8005c9c:	4798      	blx	r3
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	200002f8 	.word	0x200002f8

08005cb0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005cbe:	79fb      	ldrb	r3, [r7, #7]
 8005cc0:	4a0d      	ldr	r2, [pc, #52]	; (8005cf8 <disk_initialize+0x48>)
 8005cc2:	5cd3      	ldrb	r3, [r2, r3]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d111      	bne.n	8005cec <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005cc8:	79fb      	ldrb	r3, [r7, #7]
 8005cca:	4a0b      	ldr	r2, [pc, #44]	; (8005cf8 <disk_initialize+0x48>)
 8005ccc:	2101      	movs	r1, #1
 8005cce:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	4a09      	ldr	r2, [pc, #36]	; (8005cf8 <disk_initialize+0x48>)
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4413      	add	r3, r2
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	79fa      	ldrb	r2, [r7, #7]
 8005cde:	4906      	ldr	r1, [pc, #24]	; (8005cf8 <disk_initialize+0x48>)
 8005ce0:	440a      	add	r2, r1
 8005ce2:	7a12      	ldrb	r2, [r2, #8]
 8005ce4:	4610      	mov	r0, r2
 8005ce6:	4798      	blx	r3
 8005ce8:	4603      	mov	r3, r0
 8005cea:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	200002f8 	.word	0x200002f8

08005cfc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005cfc:	b590      	push	{r4, r7, lr}
 8005cfe:	b087      	sub	sp, #28
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60b9      	str	r1, [r7, #8]
 8005d04:	607a      	str	r2, [r7, #4]
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	4603      	mov	r3, r0
 8005d0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005d0c:	7bfb      	ldrb	r3, [r7, #15]
 8005d0e:	4a0a      	ldr	r2, [pc, #40]	; (8005d38 <disk_read+0x3c>)
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	4413      	add	r3, r2
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	689c      	ldr	r4, [r3, #8]
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	4a07      	ldr	r2, [pc, #28]	; (8005d38 <disk_read+0x3c>)
 8005d1c:	4413      	add	r3, r2
 8005d1e:	7a18      	ldrb	r0, [r3, #8]
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	47a0      	blx	r4
 8005d28:	4603      	mov	r3, r0
 8005d2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	371c      	adds	r7, #28
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd90      	pop	{r4, r7, pc}
 8005d36:	bf00      	nop
 8005d38:	200002f8 	.word	0x200002f8

08005d3c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005d3c:	b590      	push	{r4, r7, lr}
 8005d3e:	b087      	sub	sp, #28
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60b9      	str	r1, [r7, #8]
 8005d44:	607a      	str	r2, [r7, #4]
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	4603      	mov	r3, r0
 8005d4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	4a0a      	ldr	r2, [pc, #40]	; (8005d78 <disk_write+0x3c>)
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	4413      	add	r3, r2
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	68dc      	ldr	r4, [r3, #12]
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	4a07      	ldr	r2, [pc, #28]	; (8005d78 <disk_write+0x3c>)
 8005d5c:	4413      	add	r3, r2
 8005d5e:	7a18      	ldrb	r0, [r3, #8]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	47a0      	blx	r4
 8005d68:	4603      	mov	r3, r0
 8005d6a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	371c      	adds	r7, #28
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd90      	pop	{r4, r7, pc}
 8005d76:	bf00      	nop
 8005d78:	200002f8 	.word	0x200002f8

08005d7c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	4603      	mov	r3, r0
 8005d84:	603a      	str	r2, [r7, #0]
 8005d86:	71fb      	strb	r3, [r7, #7]
 8005d88:	460b      	mov	r3, r1
 8005d8a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005d8c:	79fb      	ldrb	r3, [r7, #7]
 8005d8e:	4a09      	ldr	r2, [pc, #36]	; (8005db4 <disk_ioctl+0x38>)
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	4413      	add	r3, r2
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	691b      	ldr	r3, [r3, #16]
 8005d98:	79fa      	ldrb	r2, [r7, #7]
 8005d9a:	4906      	ldr	r1, [pc, #24]	; (8005db4 <disk_ioctl+0x38>)
 8005d9c:	440a      	add	r2, r1
 8005d9e:	7a10      	ldrb	r0, [r2, #8]
 8005da0:	79b9      	ldrb	r1, [r7, #6]
 8005da2:	683a      	ldr	r2, [r7, #0]
 8005da4:	4798      	blx	r3
 8005da6:	4603      	mov	r3, r0
 8005da8:	73fb      	strb	r3, [r7, #15]
  return res;
 8005daa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	200002f8 	.word	0x200002f8

08005db8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005db8:	b480      	push	{r7}
 8005dba:	b085      	sub	sp, #20
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005dc8:	89fb      	ldrh	r3, [r7, #14]
 8005dca:	021b      	lsls	r3, r3, #8
 8005dcc:	b21a      	sxth	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	b21b      	sxth	r3, r3
 8005dd4:	4313      	orrs	r3, r2
 8005dd6:	b21b      	sxth	r3, r3
 8005dd8:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005dda:	89fb      	ldrh	r3, [r7, #14]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3303      	adds	r3, #3
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	021b      	lsls	r3, r3, #8
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	3202      	adds	r2, #2
 8005e00:	7812      	ldrb	r2, [r2, #0]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	021b      	lsls	r3, r3, #8
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	3201      	adds	r2, #1
 8005e0e:	7812      	ldrb	r2, [r2, #0]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	021b      	lsls	r3, r3, #8
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	7812      	ldrb	r2, [r2, #0]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005e20:	68fb      	ldr	r3, [r7, #12]
}
 8005e22:	4618      	mov	r0, r3
 8005e24:	3714      	adds	r7, #20
 8005e26:	46bd      	mov	sp, r7
 8005e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2c:	4770      	bx	lr

08005e2e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005e2e:	b480      	push	{r7}
 8005e30:	b083      	sub	sp, #12
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
 8005e36:	460b      	mov	r3, r1
 8005e38:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	887a      	ldrh	r2, [r7, #2]
 8005e42:	b2d2      	uxtb	r2, r2
 8005e44:	701a      	strb	r2, [r3, #0]
 8005e46:	887b      	ldrh	r3, [r7, #2]
 8005e48:	0a1b      	lsrs	r3, r3, #8
 8005e4a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	607a      	str	r2, [r7, #4]
 8005e52:	887a      	ldrh	r2, [r7, #2]
 8005e54:	b2d2      	uxtb	r2, r2
 8005e56:	701a      	strb	r2, [r3, #0]
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
 8005e6c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	607a      	str	r2, [r7, #4]
 8005e74:	683a      	ldr	r2, [r7, #0]
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	0a1b      	lsrs	r3, r3, #8
 8005e7e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	607a      	str	r2, [r7, #4]
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	0a1b      	lsrs	r3, r3, #8
 8005ea2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005ebc:	b480      	push	{r7}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00d      	beq.n	8005ef2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005ed6:	693a      	ldr	r2, [r7, #16]
 8005ed8:	1c53      	adds	r3, r2, #1
 8005eda:	613b      	str	r3, [r7, #16]
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	1c59      	adds	r1, r3, #1
 8005ee0:	6179      	str	r1, [r7, #20]
 8005ee2:	7812      	ldrb	r2, [r2, #0]
 8005ee4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	3b01      	subs	r3, #1
 8005eea:	607b      	str	r3, [r7, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1f1      	bne.n	8005ed6 <mem_cpy+0x1a>
	}
}
 8005ef2:	bf00      	nop
 8005ef4:	371c      	adds	r7, #28
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005efe:	b480      	push	{r7}
 8005f00:	b087      	sub	sp, #28
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	60f8      	str	r0, [r7, #12]
 8005f06:	60b9      	str	r1, [r7, #8]
 8005f08:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	1c5a      	adds	r2, r3, #1
 8005f12:	617a      	str	r2, [r7, #20]
 8005f14:	68ba      	ldr	r2, [r7, #8]
 8005f16:	b2d2      	uxtb	r2, r2
 8005f18:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	607b      	str	r3, [r7, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1f3      	bne.n	8005f0e <mem_set+0x10>
}
 8005f26:	bf00      	nop
 8005f28:	371c      	adds	r7, #28
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005f32:	b480      	push	{r7}
 8005f34:	b089      	sub	sp, #36	; 0x24
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	60f8      	str	r0, [r7, #12]
 8005f3a:	60b9      	str	r1, [r7, #8]
 8005f3c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005f46:	2300      	movs	r3, #0
 8005f48:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	1c5a      	adds	r2, r3, #1
 8005f4e:	61fa      	str	r2, [r7, #28]
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	4619      	mov	r1, r3
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	61ba      	str	r2, [r7, #24]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
 8005f5c:	1acb      	subs	r3, r1, r3
 8005f5e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3b01      	subs	r3, #1
 8005f64:	607b      	str	r3, [r7, #4]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d002      	beq.n	8005f72 <mem_cmp+0x40>
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0eb      	beq.n	8005f4a <mem_cmp+0x18>

	return r;
 8005f72:	697b      	ldr	r3, [r7, #20]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3724      	adds	r7, #36	; 0x24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005f8a:	e002      	b.n	8005f92 <chk_chr+0x12>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	607b      	str	r3, [r7, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d005      	beq.n	8005fa6 <chk_chr+0x26>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	781b      	ldrb	r3, [r3, #0]
 8005f9e:	461a      	mov	r2, r3
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d1f2      	bne.n	8005f8c <chk_chr+0xc>
	return *str;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	781b      	ldrb	r3, [r3, #0]
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	370c      	adds	r7, #12
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb4:	4770      	bx	lr
	...

08005fb8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	60bb      	str	r3, [r7, #8]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	60fb      	str	r3, [r7, #12]
 8005fca:	e029      	b.n	8006020 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005fcc:	4a27      	ldr	r2, [pc, #156]	; (800606c <chk_lock+0xb4>)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	4413      	add	r3, r2
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01d      	beq.n	8006016 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005fda:	4a24      	ldr	r2, [pc, #144]	; (800606c <chk_lock+0xb4>)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	4413      	add	r3, r2
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	429a      	cmp	r2, r3
 8005fea:	d116      	bne.n	800601a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005fec:	4a1f      	ldr	r2, [pc, #124]	; (800606c <chk_lock+0xb4>)
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	011b      	lsls	r3, r3, #4
 8005ff2:	4413      	add	r3, r2
 8005ff4:	3304      	adds	r3, #4
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d10c      	bne.n	800601a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006000:	4a1a      	ldr	r2, [pc, #104]	; (800606c <chk_lock+0xb4>)
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	011b      	lsls	r3, r3, #4
 8006006:	4413      	add	r3, r2
 8006008:	3308      	adds	r3, #8
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006010:	429a      	cmp	r2, r3
 8006012:	d102      	bne.n	800601a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006014:	e007      	b.n	8006026 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8006016:	2301      	movs	r3, #1
 8006018:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3301      	adds	r3, #1
 800601e:	60fb      	str	r3, [r7, #12]
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2b01      	cmp	r3, #1
 8006024:	d9d2      	bls.n	8005fcc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2b02      	cmp	r3, #2
 800602a:	d109      	bne.n	8006040 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d102      	bne.n	8006038 <chk_lock+0x80>
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	2b02      	cmp	r3, #2
 8006036:	d101      	bne.n	800603c <chk_lock+0x84>
 8006038:	2300      	movs	r3, #0
 800603a:	e010      	b.n	800605e <chk_lock+0xa6>
 800603c:	2312      	movs	r3, #18
 800603e:	e00e      	b.n	800605e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d108      	bne.n	8006058 <chk_lock+0xa0>
 8006046:	4a09      	ldr	r2, [pc, #36]	; (800606c <chk_lock+0xb4>)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	4413      	add	r3, r2
 800604e:	330c      	adds	r3, #12
 8006050:	881b      	ldrh	r3, [r3, #0]
 8006052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006056:	d101      	bne.n	800605c <chk_lock+0xa4>
 8006058:	2310      	movs	r3, #16
 800605a:	e000      	b.n	800605e <chk_lock+0xa6>
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3714      	adds	r7, #20
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr
 800606a:	bf00      	nop
 800606c:	200002d8 	.word	0x200002d8

08006070 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006076:	2300      	movs	r3, #0
 8006078:	607b      	str	r3, [r7, #4]
 800607a:	e002      	b.n	8006082 <enq_lock+0x12>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	3301      	adds	r3, #1
 8006080:	607b      	str	r3, [r7, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2b01      	cmp	r3, #1
 8006086:	d806      	bhi.n	8006096 <enq_lock+0x26>
 8006088:	4a09      	ldr	r2, [pc, #36]	; (80060b0 <enq_lock+0x40>)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	011b      	lsls	r3, r3, #4
 800608e:	4413      	add	r3, r2
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1f2      	bne.n	800607c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2b02      	cmp	r3, #2
 800609a:	bf14      	ite	ne
 800609c:	2301      	movne	r3, #1
 800609e:	2300      	moveq	r3, #0
 80060a0:	b2db      	uxtb	r3, r3
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	370c      	adds	r7, #12
 80060a6:	46bd      	mov	sp, r7
 80060a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ac:	4770      	bx	lr
 80060ae:	bf00      	nop
 80060b0:	200002d8 	.word	0x200002d8

080060b4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80060be:	2300      	movs	r3, #0
 80060c0:	60fb      	str	r3, [r7, #12]
 80060c2:	e01f      	b.n	8006104 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80060c4:	4a41      	ldr	r2, [pc, #260]	; (80061cc <inc_lock+0x118>)
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	4413      	add	r3, r2
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d113      	bne.n	80060fe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80060d6:	4a3d      	ldr	r2, [pc, #244]	; (80061cc <inc_lock+0x118>)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	4413      	add	r3, r2
 80060de:	3304      	adds	r3, #4
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d109      	bne.n	80060fe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80060ea:	4a38      	ldr	r2, [pc, #224]	; (80061cc <inc_lock+0x118>)
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	4413      	add	r3, r2
 80060f2:	3308      	adds	r3, #8
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d006      	beq.n	800610c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3301      	adds	r3, #1
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b01      	cmp	r3, #1
 8006108:	d9dc      	bls.n	80060c4 <inc_lock+0x10>
 800610a:	e000      	b.n	800610e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800610c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b02      	cmp	r3, #2
 8006112:	d132      	bne.n	800617a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006114:	2300      	movs	r3, #0
 8006116:	60fb      	str	r3, [r7, #12]
 8006118:	e002      	b.n	8006120 <inc_lock+0x6c>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3301      	adds	r3, #1
 800611e:	60fb      	str	r3, [r7, #12]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	2b01      	cmp	r3, #1
 8006124:	d806      	bhi.n	8006134 <inc_lock+0x80>
 8006126:	4a29      	ldr	r2, [pc, #164]	; (80061cc <inc_lock+0x118>)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	4413      	add	r3, r2
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d1f2      	bne.n	800611a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b02      	cmp	r3, #2
 8006138:	d101      	bne.n	800613e <inc_lock+0x8a>
 800613a:	2300      	movs	r3, #0
 800613c:	e040      	b.n	80061c0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4922      	ldr	r1, [pc, #136]	; (80061cc <inc_lock+0x118>)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	011b      	lsls	r3, r3, #4
 8006148:	440b      	add	r3, r1
 800614a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	491e      	ldr	r1, [pc, #120]	; (80061cc <inc_lock+0x118>)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	440b      	add	r3, r1
 8006158:	3304      	adds	r3, #4
 800615a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	695a      	ldr	r2, [r3, #20]
 8006160:	491a      	ldr	r1, [pc, #104]	; (80061cc <inc_lock+0x118>)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	440b      	add	r3, r1
 8006168:	3308      	adds	r3, #8
 800616a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800616c:	4a17      	ldr	r2, [pc, #92]	; (80061cc <inc_lock+0x118>)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	4413      	add	r3, r2
 8006174:	330c      	adds	r3, #12
 8006176:	2200      	movs	r2, #0
 8006178:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d009      	beq.n	8006194 <inc_lock+0xe0>
 8006180:	4a12      	ldr	r2, [pc, #72]	; (80061cc <inc_lock+0x118>)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	4413      	add	r3, r2
 8006188:	330c      	adds	r3, #12
 800618a:	881b      	ldrh	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d001      	beq.n	8006194 <inc_lock+0xe0>
 8006190:	2300      	movs	r3, #0
 8006192:	e015      	b.n	80061c0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d108      	bne.n	80061ac <inc_lock+0xf8>
 800619a:	4a0c      	ldr	r2, [pc, #48]	; (80061cc <inc_lock+0x118>)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	4413      	add	r3, r2
 80061a2:	330c      	adds	r3, #12
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	3301      	adds	r3, #1
 80061a8:	b29a      	uxth	r2, r3
 80061aa:	e001      	b.n	80061b0 <inc_lock+0xfc>
 80061ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061b0:	4906      	ldr	r1, [pc, #24]	; (80061cc <inc_lock+0x118>)
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	440b      	add	r3, r1
 80061b8:	330c      	adds	r3, #12
 80061ba:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3301      	adds	r3, #1
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	200002d8 	.word	0x200002d8

080061d0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b085      	sub	sp, #20
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3b01      	subs	r3, #1
 80061dc:	607b      	str	r3, [r7, #4]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d825      	bhi.n	8006230 <dec_lock+0x60>
		n = Files[i].ctr;
 80061e4:	4a17      	ldr	r2, [pc, #92]	; (8006244 <dec_lock+0x74>)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	4413      	add	r3, r2
 80061ec:	330c      	adds	r3, #12
 80061ee:	881b      	ldrh	r3, [r3, #0]
 80061f0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80061f2:	89fb      	ldrh	r3, [r7, #14]
 80061f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061f8:	d101      	bne.n	80061fe <dec_lock+0x2e>
 80061fa:	2300      	movs	r3, #0
 80061fc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80061fe:	89fb      	ldrh	r3, [r7, #14]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d002      	beq.n	800620a <dec_lock+0x3a>
 8006204:	89fb      	ldrh	r3, [r7, #14]
 8006206:	3b01      	subs	r3, #1
 8006208:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800620a:	4a0e      	ldr	r2, [pc, #56]	; (8006244 <dec_lock+0x74>)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	4413      	add	r3, r2
 8006212:	330c      	adds	r3, #12
 8006214:	89fa      	ldrh	r2, [r7, #14]
 8006216:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006218:	89fb      	ldrh	r3, [r7, #14]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d105      	bne.n	800622a <dec_lock+0x5a>
 800621e:	4a09      	ldr	r2, [pc, #36]	; (8006244 <dec_lock+0x74>)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	011b      	lsls	r3, r3, #4
 8006224:	4413      	add	r3, r2
 8006226:	2200      	movs	r2, #0
 8006228:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800622a:	2300      	movs	r3, #0
 800622c:	737b      	strb	r3, [r7, #13]
 800622e:	e001      	b.n	8006234 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006230:	2302      	movs	r3, #2
 8006232:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006234:	7b7b      	ldrb	r3, [r7, #13]
}
 8006236:	4618      	mov	r0, r3
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	200002d8 	.word	0x200002d8

08006248 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006248:	b480      	push	{r7}
 800624a:	b085      	sub	sp, #20
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006250:	2300      	movs	r3, #0
 8006252:	60fb      	str	r3, [r7, #12]
 8006254:	e010      	b.n	8006278 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006256:	4a0d      	ldr	r2, [pc, #52]	; (800628c <clear_lock+0x44>)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	4413      	add	r3, r2
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	687a      	ldr	r2, [r7, #4]
 8006262:	429a      	cmp	r2, r3
 8006264:	d105      	bne.n	8006272 <clear_lock+0x2a>
 8006266:	4a09      	ldr	r2, [pc, #36]	; (800628c <clear_lock+0x44>)
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	011b      	lsls	r3, r3, #4
 800626c:	4413      	add	r3, r2
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	3301      	adds	r3, #1
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d9eb      	bls.n	8006256 <clear_lock+0xe>
	}
}
 800627e:	bf00      	nop
 8006280:	3714      	adds	r7, #20
 8006282:	46bd      	mov	sp, r7
 8006284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006288:	4770      	bx	lr
 800628a:	bf00      	nop
 800628c:	200002d8 	.word	0x200002d8

08006290 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006298:	2300      	movs	r3, #0
 800629a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	78db      	ldrb	r3, [r3, #3]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d034      	beq.n	800630e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	7858      	ldrb	r0, [r3, #1]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80062b4:	2301      	movs	r3, #1
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	f7ff fd40 	bl	8005d3c <disk_write>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d002      	beq.n	80062c8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	73fb      	strb	r3, [r7, #15]
 80062c6:	e022      	b.n	800630e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	1ad2      	subs	r2, r2, r3
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	429a      	cmp	r2, r3
 80062dc:	d217      	bcs.n	800630e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	789b      	ldrb	r3, [r3, #2]
 80062e2:	613b      	str	r3, [r7, #16]
 80062e4:	e010      	b.n	8006308 <sync_window+0x78>
					wsect += fs->fsize;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	697a      	ldr	r2, [r7, #20]
 80062ec:	4413      	add	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	7858      	ldrb	r0, [r3, #1]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80062fa:	2301      	movs	r3, #1
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	f7ff fd1d 	bl	8005d3c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	3b01      	subs	r3, #1
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d8eb      	bhi.n	80062e6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800630e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3718      	adds	r7, #24
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632a:	683a      	ldr	r2, [r7, #0]
 800632c:	429a      	cmp	r2, r3
 800632e:	d01b      	beq.n	8006368 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f7ff ffad 	bl	8006290 <sync_window>
 8006336:	4603      	mov	r3, r0
 8006338:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800633a:	7bfb      	ldrb	r3, [r7, #15]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d113      	bne.n	8006368 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	7858      	ldrb	r0, [r3, #1]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800634a:	2301      	movs	r3, #1
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	f7ff fcd5 	bl	8005cfc <disk_read>
 8006352:	4603      	mov	r3, r0
 8006354:	2b00      	cmp	r3, #0
 8006356:	d004      	beq.n	8006362 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006358:	f04f 33ff 	mov.w	r3, #4294967295
 800635c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800635e:	2301      	movs	r3, #1
 8006360:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006368:	7bfb      	ldrb	r3, [r7, #15]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
	...

08006374 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006374:	b580      	push	{r7, lr}
 8006376:	b084      	sub	sp, #16
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f7ff ff87 	bl	8006290 <sync_window>
 8006382:	4603      	mov	r3, r0
 8006384:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006386:	7bfb      	ldrb	r3, [r7, #15]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d158      	bne.n	800643e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	2b03      	cmp	r3, #3
 8006392:	d148      	bne.n	8006426 <sync_fs+0xb2>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	791b      	ldrb	r3, [r3, #4]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d144      	bne.n	8006426 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	3334      	adds	r3, #52	; 0x34
 80063a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063a4:	2100      	movs	r1, #0
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff fda9 	bl	8005efe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	3334      	adds	r3, #52	; 0x34
 80063b0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80063b4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff fd38 	bl	8005e2e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3334      	adds	r3, #52	; 0x34
 80063c2:	4921      	ldr	r1, [pc, #132]	; (8006448 <sync_fs+0xd4>)
 80063c4:	4618      	mov	r0, r3
 80063c6:	f7ff fd4d 	bl	8005e64 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	3334      	adds	r3, #52	; 0x34
 80063ce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80063d2:	491e      	ldr	r1, [pc, #120]	; (800644c <sync_fs+0xd8>)
 80063d4:	4618      	mov	r0, r3
 80063d6:	f7ff fd45 	bl	8005e64 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	3334      	adds	r3, #52	; 0x34
 80063de:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	4619      	mov	r1, r3
 80063e8:	4610      	mov	r0, r2
 80063ea:	f7ff fd3b 	bl	8005e64 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3334      	adds	r3, #52	; 0x34
 80063f2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	4619      	mov	r1, r3
 80063fc:	4610      	mov	r0, r2
 80063fe:	f7ff fd31 	bl	8005e64 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a1b      	ldr	r3, [r3, #32]
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	7858      	ldrb	r0, [r3, #1]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800641a:	2301      	movs	r3, #1
 800641c:	f7ff fc8e 	bl	8005d3c <disk_write>
			fs->fsi_flag = 0;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	2200      	movs	r2, #0
 800642c:	2100      	movs	r1, #0
 800642e:	4618      	mov	r0, r3
 8006430:	f7ff fca4 	bl	8005d7c <disk_ioctl>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <sync_fs+0xca>
 800643a:	2301      	movs	r3, #1
 800643c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	41615252 	.word	0x41615252
 800644c:	61417272 	.word	0x61417272

08006450 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	3b02      	subs	r3, #2
 800645e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	3b02      	subs	r3, #2
 8006466:	683a      	ldr	r2, [r7, #0]
 8006468:	429a      	cmp	r2, r3
 800646a:	d301      	bcc.n	8006470 <clust2sect+0x20>
 800646c:	2300      	movs	r3, #0
 800646e:	e008      	b.n	8006482 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	895b      	ldrh	r3, [r3, #10]
 8006474:	461a      	mov	r2, r3
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	fb03 f202 	mul.w	r2, r3, r2
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006480:	4413      	add	r3, r2
}
 8006482:	4618      	mov	r0, r3
 8006484:	370c      	adds	r7, #12
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b086      	sub	sp, #24
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800649e:	683b      	ldr	r3, [r7, #0]
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d904      	bls.n	80064ae <get_fat+0x20>
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d302      	bcc.n	80064b4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80064ae:	2301      	movs	r3, #1
 80064b0:	617b      	str	r3, [r7, #20]
 80064b2:	e08c      	b.n	80065ce <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80064b4:	f04f 33ff 	mov.w	r3, #4294967295
 80064b8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b02      	cmp	r3, #2
 80064c0:	d045      	beq.n	800654e <get_fat+0xc0>
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	d05d      	beq.n	8006582 <get_fat+0xf4>
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d177      	bne.n	80065ba <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	60fb      	str	r3, [r7, #12]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	085b      	lsrs	r3, r3, #1
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4413      	add	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	0a5b      	lsrs	r3, r3, #9
 80064e0:	4413      	add	r3, r2
 80064e2:	4619      	mov	r1, r3
 80064e4:	6938      	ldr	r0, [r7, #16]
 80064e6:	f7ff ff17 	bl	8006318 <move_window>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d167      	bne.n	80065c0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	1c5a      	adds	r2, r3, #1
 80064f4:	60fa      	str	r2, [r7, #12]
 80064f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fa:	693a      	ldr	r2, [r7, #16]
 80064fc:	4413      	add	r3, r2
 80064fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006502:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006504:	693b      	ldr	r3, [r7, #16]
 8006506:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	0a5b      	lsrs	r3, r3, #9
 800650c:	4413      	add	r3, r2
 800650e:	4619      	mov	r1, r3
 8006510:	6938      	ldr	r0, [r7, #16]
 8006512:	f7ff ff01 	bl	8006318 <move_window>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d153      	bne.n	80065c4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006522:	693a      	ldr	r2, [r7, #16]
 8006524:	4413      	add	r3, r2
 8006526:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800652a:	021b      	lsls	r3, r3, #8
 800652c:	461a      	mov	r2, r3
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	4313      	orrs	r3, r2
 8006532:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	f003 0301 	and.w	r3, r3, #1
 800653a:	2b00      	cmp	r3, #0
 800653c:	d002      	beq.n	8006544 <get_fat+0xb6>
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	091b      	lsrs	r3, r3, #4
 8006542:	e002      	b.n	800654a <get_fat+0xbc>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800654a:	617b      	str	r3, [r7, #20]
			break;
 800654c:	e03f      	b.n	80065ce <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800654e:	693b      	ldr	r3, [r7, #16]
 8006550:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	0a1b      	lsrs	r3, r3, #8
 8006556:	4413      	add	r3, r2
 8006558:	4619      	mov	r1, r3
 800655a:	6938      	ldr	r0, [r7, #16]
 800655c:	f7ff fedc 	bl	8006318 <move_window>
 8006560:	4603      	mov	r3, r0
 8006562:	2b00      	cmp	r3, #0
 8006564:	d130      	bne.n	80065c8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	005b      	lsls	r3, r3, #1
 8006570:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006574:	4413      	add	r3, r2
 8006576:	4618      	mov	r0, r3
 8006578:	f7ff fc1e 	bl	8005db8 <ld_word>
 800657c:	4603      	mov	r3, r0
 800657e:	617b      	str	r3, [r7, #20]
			break;
 8006580:	e025      	b.n	80065ce <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006582:	693b      	ldr	r3, [r7, #16]
 8006584:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	09db      	lsrs	r3, r3, #7
 800658a:	4413      	add	r3, r2
 800658c:	4619      	mov	r1, r3
 800658e:	6938      	ldr	r0, [r7, #16]
 8006590:	f7ff fec2 	bl	8006318 <move_window>
 8006594:	4603      	mov	r3, r0
 8006596:	2b00      	cmp	r3, #0
 8006598:	d118      	bne.n	80065cc <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	009b      	lsls	r3, r3, #2
 80065a4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80065a8:	4413      	add	r3, r2
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7ff fc1c 	bl	8005de8 <ld_dword>
 80065b0:	4603      	mov	r3, r0
 80065b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80065b6:	617b      	str	r3, [r7, #20]
			break;
 80065b8:	e009      	b.n	80065ce <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80065ba:	2301      	movs	r3, #1
 80065bc:	617b      	str	r3, [r7, #20]
 80065be:	e006      	b.n	80065ce <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065c0:	bf00      	nop
 80065c2:	e004      	b.n	80065ce <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065c4:	bf00      	nop
 80065c6:	e002      	b.n	80065ce <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80065c8:	bf00      	nop
 80065ca:	e000      	b.n	80065ce <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065cc:	bf00      	nop
		}
	}

	return val;
 80065ce:	697b      	ldr	r3, [r7, #20]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80065d8:	b590      	push	{r4, r7, lr}
 80065da:	b089      	sub	sp, #36	; 0x24
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80065e4:	2302      	movs	r3, #2
 80065e6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	f240 80d6 	bls.w	800679c <put_fat+0x1c4>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	429a      	cmp	r2, r3
 80065f8:	f080 80d0 	bcs.w	800679c <put_fat+0x1c4>
		switch (fs->fs_type) {
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b02      	cmp	r3, #2
 8006602:	d073      	beq.n	80066ec <put_fat+0x114>
 8006604:	2b03      	cmp	r3, #3
 8006606:	f000 8091 	beq.w	800672c <put_fat+0x154>
 800660a:	2b01      	cmp	r3, #1
 800660c:	f040 80c6 	bne.w	800679c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	61bb      	str	r3, [r7, #24]
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	085b      	lsrs	r3, r3, #1
 8006618:	69ba      	ldr	r2, [r7, #24]
 800661a:	4413      	add	r3, r2
 800661c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	0a5b      	lsrs	r3, r3, #9
 8006626:	4413      	add	r3, r2
 8006628:	4619      	mov	r1, r3
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f7ff fe74 	bl	8006318 <move_window>
 8006630:	4603      	mov	r3, r0
 8006632:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006634:	7ffb      	ldrb	r3, [r7, #31]
 8006636:	2b00      	cmp	r3, #0
 8006638:	f040 80a9 	bne.w	800678e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	1c59      	adds	r1, r3, #1
 8006646:	61b9      	str	r1, [r7, #24]
 8006648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800664c:	4413      	add	r3, r2
 800664e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00d      	beq.n	8006676 <put_fat+0x9e>
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	b25b      	sxtb	r3, r3
 8006660:	f003 030f 	and.w	r3, r3, #15
 8006664:	b25a      	sxtb	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	b2db      	uxtb	r3, r3
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	b25b      	sxtb	r3, r3
 800666e:	4313      	orrs	r3, r2
 8006670:	b25b      	sxtb	r3, r3
 8006672:	b2db      	uxtb	r3, r3
 8006674:	e001      	b.n	800667a <put_fat+0xa2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	697a      	ldr	r2, [r7, #20]
 800667c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2201      	movs	r2, #1
 8006682:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	0a5b      	lsrs	r3, r3, #9
 800668c:	4413      	add	r3, r2
 800668e:	4619      	mov	r1, r3
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f7ff fe41 	bl	8006318 <move_window>
 8006696:	4603      	mov	r3, r0
 8006698:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800669a:	7ffb      	ldrb	r3, [r7, #31]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d178      	bne.n	8006792 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066ac:	4413      	add	r3, r2
 80066ae:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80066b0:	68bb      	ldr	r3, [r7, #8]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <put_fat+0xea>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	091b      	lsrs	r3, r3, #4
 80066be:	b2db      	uxtb	r3, r3
 80066c0:	e00e      	b.n	80066e0 <put_fat+0x108>
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	b25b      	sxtb	r3, r3
 80066c8:	f023 030f 	bic.w	r3, r3, #15
 80066cc:	b25a      	sxtb	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	0a1b      	lsrs	r3, r3, #8
 80066d2:	b25b      	sxtb	r3, r3
 80066d4:	f003 030f 	and.w	r3, r3, #15
 80066d8:	b25b      	sxtb	r3, r3
 80066da:	4313      	orrs	r3, r2
 80066dc:	b25b      	sxtb	r3, r3
 80066de:	b2db      	uxtb	r3, r3
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2201      	movs	r2, #1
 80066e8:	70da      	strb	r2, [r3, #3]
			break;
 80066ea:	e057      	b.n	800679c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	0a1b      	lsrs	r3, r3, #8
 80066f4:	4413      	add	r3, r2
 80066f6:	4619      	mov	r1, r3
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7ff fe0d 	bl	8006318 <move_window>
 80066fe:	4603      	mov	r3, r0
 8006700:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006702:	7ffb      	ldrb	r3, [r7, #31]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d146      	bne.n	8006796 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	005b      	lsls	r3, r3, #1
 8006712:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006716:	4413      	add	r3, r2
 8006718:	687a      	ldr	r2, [r7, #4]
 800671a:	b292      	uxth	r2, r2
 800671c:	4611      	mov	r1, r2
 800671e:	4618      	mov	r0, r3
 8006720:	f7ff fb85 	bl	8005e2e <st_word>
			fs->wflag = 1;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	70da      	strb	r2, [r3, #3]
			break;
 800672a:	e037      	b.n	800679c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	09db      	lsrs	r3, r3, #7
 8006734:	4413      	add	r3, r2
 8006736:	4619      	mov	r1, r3
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff fded 	bl	8006318 <move_window>
 800673e:	4603      	mov	r3, r0
 8006740:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006742:	7ffb      	ldrb	r3, [r7, #31]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d128      	bne.n	800679a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800675c:	4413      	add	r3, r2
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fb42 	bl	8005de8 <ld_dword>
 8006764:	4603      	mov	r3, r0
 8006766:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800676a:	4323      	orrs	r3, r4
 800676c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800677c:	4413      	add	r3, r2
 800677e:	6879      	ldr	r1, [r7, #4]
 8006780:	4618      	mov	r0, r3
 8006782:	f7ff fb6f 	bl	8005e64 <st_dword>
			fs->wflag = 1;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	70da      	strb	r2, [r3, #3]
			break;
 800678c:	e006      	b.n	800679c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800678e:	bf00      	nop
 8006790:	e004      	b.n	800679c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006792:	bf00      	nop
 8006794:	e002      	b.n	800679c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006796:	bf00      	nop
 8006798:	e000      	b.n	800679c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800679a:	bf00      	nop
		}
	}
	return res;
 800679c:	7ffb      	ldrb	r3, [r7, #31]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3724      	adds	r7, #36	; 0x24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd90      	pop	{r4, r7, pc}

080067a6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b088      	sub	sp, #32
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	60f8      	str	r0, [r7, #12]
 80067ae:	60b9      	str	r1, [r7, #8]
 80067b0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80067b2:	2300      	movs	r3, #0
 80067b4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d904      	bls.n	80067cc <remove_chain+0x26>
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d301      	bcc.n	80067d0 <remove_chain+0x2a>
 80067cc:	2302      	movs	r3, #2
 80067ce:	e04b      	b.n	8006868 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d00c      	beq.n	80067f0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80067d6:	f04f 32ff 	mov.w	r2, #4294967295
 80067da:	6879      	ldr	r1, [r7, #4]
 80067dc:	69b8      	ldr	r0, [r7, #24]
 80067de:	f7ff fefb 	bl	80065d8 <put_fat>
 80067e2:	4603      	mov	r3, r0
 80067e4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80067e6:	7ffb      	ldrb	r3, [r7, #31]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <remove_chain+0x4a>
 80067ec:	7ffb      	ldrb	r3, [r7, #31]
 80067ee:	e03b      	b.n	8006868 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80067f0:	68b9      	ldr	r1, [r7, #8]
 80067f2:	68f8      	ldr	r0, [r7, #12]
 80067f4:	f7ff fe4b 	bl	800648e <get_fat>
 80067f8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d031      	beq.n	8006864 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006800:	697b      	ldr	r3, [r7, #20]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d101      	bne.n	800680a <remove_chain+0x64>
 8006806:	2302      	movs	r3, #2
 8006808:	e02e      	b.n	8006868 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006810:	d101      	bne.n	8006816 <remove_chain+0x70>
 8006812:	2301      	movs	r3, #1
 8006814:	e028      	b.n	8006868 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006816:	2200      	movs	r2, #0
 8006818:	68b9      	ldr	r1, [r7, #8]
 800681a:	69b8      	ldr	r0, [r7, #24]
 800681c:	f7ff fedc 	bl	80065d8 <put_fat>
 8006820:	4603      	mov	r3, r0
 8006822:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006824:	7ffb      	ldrb	r3, [r7, #31]
 8006826:	2b00      	cmp	r3, #0
 8006828:	d001      	beq.n	800682e <remove_chain+0x88>
 800682a:	7ffb      	ldrb	r3, [r7, #31]
 800682c:	e01c      	b.n	8006868 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800682e:	69bb      	ldr	r3, [r7, #24]
 8006830:	695a      	ldr	r2, [r3, #20]
 8006832:	69bb      	ldr	r3, [r7, #24]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	3b02      	subs	r3, #2
 8006838:	429a      	cmp	r2, r3
 800683a:	d20b      	bcs.n	8006854 <remove_chain+0xae>
			fs->free_clst++;
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	695b      	ldr	r3, [r3, #20]
 8006840:	1c5a      	adds	r2, r3, #1
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006846:	69bb      	ldr	r3, [r7, #24]
 8006848:	791b      	ldrb	r3, [r3, #4]
 800684a:	f043 0301 	orr.w	r3, r3, #1
 800684e:	b2da      	uxtb	r2, r3
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	d3c6      	bcc.n	80067f0 <remove_chain+0x4a>
 8006862:	e000      	b.n	8006866 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006864:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3720      	adds	r7, #32
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b088      	sub	sp, #32
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d10d      	bne.n	80068a2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	691b      	ldr	r3, [r3, #16]
 800688a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d004      	beq.n	800689c <create_chain+0x2c>
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	699b      	ldr	r3, [r3, #24]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	429a      	cmp	r2, r3
 800689a:	d31b      	bcc.n	80068d4 <create_chain+0x64>
 800689c:	2301      	movs	r3, #1
 800689e:	61bb      	str	r3, [r7, #24]
 80068a0:	e018      	b.n	80068d4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f7ff fdf2 	bl	800648e <get_fat>
 80068aa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d801      	bhi.n	80068b6 <create_chain+0x46>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e070      	b.n	8006998 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068bc:	d101      	bne.n	80068c2 <create_chain+0x52>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	e06a      	b.n	8006998 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	429a      	cmp	r2, r3
 80068ca:	d201      	bcs.n	80068d0 <create_chain+0x60>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	e063      	b.n	8006998 <create_chain+0x128>
		scl = clst;
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	3301      	adds	r3, #1
 80068dc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d307      	bcc.n	80068f8 <create_chain+0x88>
				ncl = 2;
 80068e8:	2302      	movs	r3, #2
 80068ea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80068ec:	69fa      	ldr	r2, [r7, #28]
 80068ee:	69bb      	ldr	r3, [r7, #24]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d901      	bls.n	80068f8 <create_chain+0x88>
 80068f4:	2300      	movs	r3, #0
 80068f6:	e04f      	b.n	8006998 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80068f8:	69f9      	ldr	r1, [r7, #28]
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f7ff fdc7 	bl	800648e <get_fat>
 8006900:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d00e      	beq.n	8006926 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d003      	beq.n	8006916 <create_chain+0xa6>
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006914:	d101      	bne.n	800691a <create_chain+0xaa>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	e03e      	b.n	8006998 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800691a:	69fa      	ldr	r2, [r7, #28]
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	429a      	cmp	r2, r3
 8006920:	d1da      	bne.n	80068d8 <create_chain+0x68>
 8006922:	2300      	movs	r3, #0
 8006924:	e038      	b.n	8006998 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006926:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006928:	f04f 32ff 	mov.w	r2, #4294967295
 800692c:	69f9      	ldr	r1, [r7, #28]
 800692e:	6938      	ldr	r0, [r7, #16]
 8006930:	f7ff fe52 	bl	80065d8 <put_fat>
 8006934:	4603      	mov	r3, r0
 8006936:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006938:	7dfb      	ldrb	r3, [r7, #23]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d109      	bne.n	8006952 <create_chain+0xe2>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d006      	beq.n	8006952 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006944:	69fa      	ldr	r2, [r7, #28]
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6938      	ldr	r0, [r7, #16]
 800694a:	f7ff fe45 	bl	80065d8 <put_fat>
 800694e:	4603      	mov	r3, r0
 8006950:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006952:	7dfb      	ldrb	r3, [r7, #23]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d116      	bne.n	8006986 <create_chain+0x116>
		fs->last_clst = ncl;
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	695a      	ldr	r2, [r3, #20]
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	3b02      	subs	r3, #2
 8006968:	429a      	cmp	r2, r3
 800696a:	d804      	bhi.n	8006976 <create_chain+0x106>
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	1e5a      	subs	r2, r3, #1
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	791b      	ldrb	r3, [r3, #4]
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	b2da      	uxtb	r2, r3
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	711a      	strb	r2, [r3, #4]
 8006984:	e007      	b.n	8006996 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d102      	bne.n	8006992 <create_chain+0x122>
 800698c:	f04f 33ff 	mov.w	r3, #4294967295
 8006990:	e000      	b.n	8006994 <create_chain+0x124>
 8006992:	2301      	movs	r3, #1
 8006994:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006996:	69fb      	ldr	r3, [r7, #28]
}
 8006998:	4618      	mov	r0, r3
 800699a:	3720      	adds	r7, #32
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}

080069a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b4:	3304      	adds	r3, #4
 80069b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	0a5b      	lsrs	r3, r3, #9
 80069bc:	68fa      	ldr	r2, [r7, #12]
 80069be:	8952      	ldrh	r2, [r2, #10]
 80069c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80069c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1d1a      	adds	r2, r3, #4
 80069ca:	613a      	str	r2, [r7, #16]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d101      	bne.n	80069da <clmt_clust+0x3a>
 80069d6:	2300      	movs	r3, #0
 80069d8:	e010      	b.n	80069fc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80069da:	697a      	ldr	r2, [r7, #20]
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d307      	bcc.n	80069f2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	617b      	str	r3, [r7, #20]
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	3304      	adds	r3, #4
 80069ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069f0:	e7e9      	b.n	80069c6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80069f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	681a      	ldr	r2, [r3, #0]
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	4413      	add	r3, r2
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a1e:	d204      	bcs.n	8006a2a <dir_sdi+0x22>
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	f003 031f 	and.w	r3, r3, #31
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d001      	beq.n	8006a2e <dir_sdi+0x26>
		return FR_INT_ERR;
 8006a2a:	2302      	movs	r3, #2
 8006a2c:	e063      	b.n	8006af6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	683a      	ldr	r2, [r7, #0]
 8006a32:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d106      	bne.n	8006a4e <dir_sdi+0x46>
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d902      	bls.n	8006a4e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a4c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10c      	bne.n	8006a6e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	8912      	ldrh	r2, [r2, #8]
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d301      	bcc.n	8006a64 <dir_sdi+0x5c>
 8006a60:	2302      	movs	r3, #2
 8006a62:	e048      	b.n	8006af6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	61da      	str	r2, [r3, #28]
 8006a6c:	e029      	b.n	8006ac2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	895b      	ldrh	r3, [r3, #10]
 8006a72:	025b      	lsls	r3, r3, #9
 8006a74:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a76:	e019      	b.n	8006aac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6979      	ldr	r1, [r7, #20]
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f7ff fd06 	bl	800648e <get_fat>
 8006a82:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8a:	d101      	bne.n	8006a90 <dir_sdi+0x88>
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e032      	b.n	8006af6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d904      	bls.n	8006aa0 <dir_sdi+0x98>
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	699b      	ldr	r3, [r3, #24]
 8006a9a:	697a      	ldr	r2, [r7, #20]
 8006a9c:	429a      	cmp	r2, r3
 8006a9e:	d301      	bcc.n	8006aa4 <dir_sdi+0x9c>
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	e028      	b.n	8006af6 <dir_sdi+0xee>
			ofs -= csz;
 8006aa4:	683a      	ldr	r2, [r7, #0]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	1ad3      	subs	r3, r2, r3
 8006aaa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006aac:	683a      	ldr	r2, [r7, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d2e1      	bcs.n	8006a78 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006ab4:	6979      	ldr	r1, [r7, #20]
 8006ab6:	6938      	ldr	r0, [r7, #16]
 8006ab8:	f7ff fcca 	bl	8006450 <clust2sect>
 8006abc:	4602      	mov	r2, r0
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d101      	bne.n	8006ad4 <dir_sdi+0xcc>
 8006ad0:	2302      	movs	r3, #2
 8006ad2:	e010      	b.n	8006af6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	69da      	ldr	r2, [r3, #28]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	0a5b      	lsrs	r3, r3, #9
 8006adc:	441a      	add	r2, r3
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aee:	441a      	add	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b086      	sub	sp, #24
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	695b      	ldr	r3, [r3, #20]
 8006b12:	3320      	adds	r3, #32
 8006b14:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	69db      	ldr	r3, [r3, #28]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d003      	beq.n	8006b26 <dir_next+0x28>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b24:	d301      	bcc.n	8006b2a <dir_next+0x2c>
 8006b26:	2304      	movs	r3, #4
 8006b28:	e0aa      	b.n	8006c80 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f040 8098 	bne.w	8006c66 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	1c5a      	adds	r2, r3, #1
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	699b      	ldr	r3, [r3, #24]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d10b      	bne.n	8006b60 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	095b      	lsrs	r3, r3, #5
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	8912      	ldrh	r2, [r2, #8]
 8006b50:	4293      	cmp	r3, r2
 8006b52:	f0c0 8088 	bcc.w	8006c66 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	61da      	str	r2, [r3, #28]
 8006b5c:	2304      	movs	r3, #4
 8006b5e:	e08f      	b.n	8006c80 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	0a5b      	lsrs	r3, r3, #9
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	8952      	ldrh	r2, [r2, #10]
 8006b68:	3a01      	subs	r2, #1
 8006b6a:	4013      	ands	r3, r2
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d17a      	bne.n	8006c66 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	699b      	ldr	r3, [r3, #24]
 8006b76:	4619      	mov	r1, r3
 8006b78:	4610      	mov	r0, r2
 8006b7a:	f7ff fc88 	bl	800648e <get_fat>
 8006b7e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006b80:	697b      	ldr	r3, [r7, #20]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d801      	bhi.n	8006b8a <dir_next+0x8c>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e07a      	b.n	8006c80 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b90:	d101      	bne.n	8006b96 <dir_next+0x98>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e074      	b.n	8006c80 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d358      	bcc.n	8006c52 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d104      	bne.n	8006bb0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	61da      	str	r2, [r3, #28]
 8006bac:	2304      	movs	r3, #4
 8006bae:	e067      	b.n	8006c80 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	699b      	ldr	r3, [r3, #24]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	4610      	mov	r0, r2
 8006bba:	f7ff fe59 	bl	8006870 <create_chain>
 8006bbe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d101      	bne.n	8006bca <dir_next+0xcc>
 8006bc6:	2307      	movs	r3, #7
 8006bc8:	e05a      	b.n	8006c80 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d101      	bne.n	8006bd4 <dir_next+0xd6>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	e055      	b.n	8006c80 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bda:	d101      	bne.n	8006be0 <dir_next+0xe2>
 8006bdc:	2301      	movs	r3, #1
 8006bde:	e04f      	b.n	8006c80 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	f7ff fb55 	bl	8006290 <sync_window>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d001      	beq.n	8006bf0 <dir_next+0xf2>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e047      	b.n	8006c80 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	3334      	adds	r3, #52	; 0x34
 8006bf4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006bf8:	2100      	movs	r1, #0
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff f97f 	bl	8005efe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c00:	2300      	movs	r3, #0
 8006c02:	613b      	str	r3, [r7, #16]
 8006c04:	6979      	ldr	r1, [r7, #20]
 8006c06:	68f8      	ldr	r0, [r7, #12]
 8006c08:	f7ff fc22 	bl	8006450 <clust2sect>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	631a      	str	r2, [r3, #48]	; 0x30
 8006c12:	e012      	b.n	8006c3a <dir_next+0x13c>
						fs->wflag = 1;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2201      	movs	r2, #1
 8006c18:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f7ff fb38 	bl	8006290 <sync_window>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d001      	beq.n	8006c2a <dir_next+0x12c>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e02a      	b.n	8006c80 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	613b      	str	r3, [r7, #16]
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c34:	1c5a      	adds	r2, r3, #1
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	631a      	str	r2, [r3, #48]	; 0x30
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	895b      	ldrh	r3, [r3, #10]
 8006c3e:	461a      	mov	r2, r3
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d3e6      	bcc.n	8006c14 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	1ad2      	subs	r2, r2, r3
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006c58:	6979      	ldr	r1, [r7, #20]
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f7ff fbf8 	bl	8006450 <clust2sect>
 8006c60:	4602      	mov	r2, r0
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c78:	441a      	add	r2, r3
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3718      	adds	r7, #24
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b086      	sub	sp, #24
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006c98:	2100      	movs	r1, #0
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7ff feb4 	bl	8006a08 <dir_sdi>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006ca4:	7dfb      	ldrb	r3, [r7, #23]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d12b      	bne.n	8006d02 <dir_alloc+0x7a>
		n = 0;
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	69db      	ldr	r3, [r3, #28]
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f7ff fb2f 	bl	8006318 <move_window>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006cbe:	7dfb      	ldrb	r3, [r7, #23]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d11d      	bne.n	8006d00 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6a1b      	ldr	r3, [r3, #32]
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	2be5      	cmp	r3, #229	; 0xe5
 8006ccc:	d004      	beq.n	8006cd8 <dir_alloc+0x50>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a1b      	ldr	r3, [r3, #32]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d107      	bne.n	8006ce8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	693a      	ldr	r2, [r7, #16]
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d102      	bne.n	8006cec <dir_alloc+0x64>
 8006ce6:	e00c      	b.n	8006d02 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006ce8:	2300      	movs	r3, #0
 8006cea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006cec:	2101      	movs	r1, #1
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f7ff ff05 	bl	8006afe <dir_next>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006cf8:	7dfb      	ldrb	r3, [r7, #23]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d0d7      	beq.n	8006cae <dir_alloc+0x26>
 8006cfe:	e000      	b.n	8006d02 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006d00:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006d02:	7dfb      	ldrb	r3, [r7, #23]
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d101      	bne.n	8006d0c <dir_alloc+0x84>
 8006d08:	2307      	movs	r3, #7
 8006d0a:	75fb      	strb	r3, [r7, #23]
	return res;
 8006d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3718      	adds	r7, #24
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b084      	sub	sp, #16
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	331a      	adds	r3, #26
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff f847 	bl	8005db8 <ld_word>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d109      	bne.n	8006d4a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	3314      	adds	r3, #20
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7ff f83c 	bl	8005db8 <ld_word>
 8006d40:	4603      	mov	r3, r0
 8006d42:	041b      	lsls	r3, r3, #16
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3710      	adds	r7, #16
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}

08006d54 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b084      	sub	sp, #16
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	60f8      	str	r0, [r7, #12]
 8006d5c:	60b9      	str	r1, [r7, #8]
 8006d5e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	331a      	adds	r3, #26
 8006d64:	687a      	ldr	r2, [r7, #4]
 8006d66:	b292      	uxth	r2, r2
 8006d68:	4611      	mov	r1, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7ff f85f 	bl	8005e2e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b03      	cmp	r3, #3
 8006d76:	d109      	bne.n	8006d8c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	f103 0214 	add.w	r2, r3, #20
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	0c1b      	lsrs	r3, r3, #16
 8006d82:	b29b      	uxth	r3, r3
 8006d84:	4619      	mov	r1, r3
 8006d86:	4610      	mov	r0, r2
 8006d88:	f7ff f851 	bl	8005e2e <st_word>
	}
}
 8006d8c:	bf00      	nop
 8006d8e:	3710      	adds	r7, #16
 8006d90:	46bd      	mov	sp, r7
 8006d92:	bd80      	pop	{r7, pc}

08006d94 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006d94:	b590      	push	{r4, r7, lr}
 8006d96:	b087      	sub	sp, #28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
 8006d9c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	331a      	adds	r3, #26
 8006da2:	4618      	mov	r0, r3
 8006da4:	f7ff f808 	bl	8005db8 <ld_word>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <cmp_lfn+0x1e>
 8006dae:	2300      	movs	r3, #0
 8006db0:	e059      	b.n	8006e66 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dba:	1e5a      	subs	r2, r3, #1
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	005b      	lsls	r3, r3, #1
 8006dc0:	4413      	add	r3, r2
 8006dc2:	009b      	lsls	r3, r3, #2
 8006dc4:	4413      	add	r3, r2
 8006dc6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006dc8:	2301      	movs	r3, #1
 8006dca:	81fb      	strh	r3, [r7, #14]
 8006dcc:	2300      	movs	r3, #0
 8006dce:	613b      	str	r3, [r7, #16]
 8006dd0:	e033      	b.n	8006e3a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006dd2:	4a27      	ldr	r2, [pc, #156]	; (8006e70 <cmp_lfn+0xdc>)
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	4413      	add	r3, r2
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	461a      	mov	r2, r3
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	4413      	add	r3, r2
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe ffe9 	bl	8005db8 <ld_word>
 8006de6:	4603      	mov	r3, r0
 8006de8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006dea:	89fb      	ldrh	r3, [r7, #14]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d01a      	beq.n	8006e26 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	2bfe      	cmp	r3, #254	; 0xfe
 8006df4:	d812      	bhi.n	8006e1c <cmp_lfn+0x88>
 8006df6:	89bb      	ldrh	r3, [r7, #12]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f7fa f8f1 	bl	8000fe0 <ff_wtoupper>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	461c      	mov	r4, r3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	617a      	str	r2, [r7, #20]
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	881b      	ldrh	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fa f8e5 	bl	8000fe0 <ff_wtoupper>
 8006e16:	4603      	mov	r3, r0
 8006e18:	429c      	cmp	r4, r3
 8006e1a:	d001      	beq.n	8006e20 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	e022      	b.n	8006e66 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006e20:	89bb      	ldrh	r3, [r7, #12]
 8006e22:	81fb      	strh	r3, [r7, #14]
 8006e24:	e006      	b.n	8006e34 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006e26:	89bb      	ldrh	r3, [r7, #12]
 8006e28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d001      	beq.n	8006e34 <cmp_lfn+0xa0>
 8006e30:	2300      	movs	r3, #0
 8006e32:	e018      	b.n	8006e66 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	3301      	adds	r3, #1
 8006e38:	613b      	str	r3, [r7, #16]
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	2b0c      	cmp	r3, #12
 8006e3e:	d9c8      	bls.n	8006dd2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00b      	beq.n	8006e64 <cmp_lfn+0xd0>
 8006e4c:	89fb      	ldrh	r3, [r7, #14]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d008      	beq.n	8006e64 <cmp_lfn+0xd0>
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	005b      	lsls	r3, r3, #1
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	4413      	add	r3, r2
 8006e5a:	881b      	ldrh	r3, [r3, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d001      	beq.n	8006e64 <cmp_lfn+0xd0>
 8006e60:	2300      	movs	r3, #0
 8006e62:	e000      	b.n	8006e66 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006e64:	2301      	movs	r3, #1
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	371c      	adds	r7, #28
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd90      	pop	{r4, r7, pc}
 8006e6e:	bf00      	nop
 8006e70:	08013948 	.word	0x08013948

08006e74 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b086      	sub	sp, #24
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
 8006e7c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	331a      	adds	r3, #26
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe ff98 	bl	8005db8 <ld_word>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d001      	beq.n	8006e92 <pick_lfn+0x1e>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	e04d      	b.n	8006f2e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9a:	1e5a      	subs	r2, r3, #1
 8006e9c:	4613      	mov	r3, r2
 8006e9e:	005b      	lsls	r3, r3, #1
 8006ea0:	4413      	add	r3, r2
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	81fb      	strh	r3, [r7, #14]
 8006eac:	2300      	movs	r3, #0
 8006eae:	613b      	str	r3, [r7, #16]
 8006eb0:	e028      	b.n	8006f04 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006eb2:	4a21      	ldr	r2, [pc, #132]	; (8006f38 <pick_lfn+0xc4>)
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	461a      	mov	r2, r3
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fe ff79 	bl	8005db8 <ld_word>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006eca:	89fb      	ldrh	r3, [r7, #14]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d00f      	beq.n	8006ef0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2bfe      	cmp	r3, #254	; 0xfe
 8006ed4:	d901      	bls.n	8006eda <pick_lfn+0x66>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e029      	b.n	8006f2e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006eda:	89bb      	ldrh	r3, [r7, #12]
 8006edc:	81fb      	strh	r3, [r7, #14]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	1c5a      	adds	r2, r3, #1
 8006ee2:	617a      	str	r2, [r7, #20]
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	4413      	add	r3, r2
 8006eea:	89fa      	ldrh	r2, [r7, #14]
 8006eec:	801a      	strh	r2, [r3, #0]
 8006eee:	e006      	b.n	8006efe <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006ef0:	89bb      	ldrh	r3, [r7, #12]
 8006ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d001      	beq.n	8006efe <pick_lfn+0x8a>
 8006efa:	2300      	movs	r3, #0
 8006efc:	e017      	b.n	8006f2e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	3301      	adds	r3, #1
 8006f02:	613b      	str	r3, [r7, #16]
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	2b0c      	cmp	r3, #12
 8006f08:	d9d3      	bls.n	8006eb2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d00a      	beq.n	8006f2c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	2bfe      	cmp	r3, #254	; 0xfe
 8006f1a:	d901      	bls.n	8006f20 <pick_lfn+0xac>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e006      	b.n	8006f2e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006f20:	697b      	ldr	r3, [r7, #20]
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	4413      	add	r3, r2
 8006f28:	2200      	movs	r2, #0
 8006f2a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006f2c:	2301      	movs	r3, #1
}
 8006f2e:	4618      	mov	r0, r3
 8006f30:	3718      	adds	r7, #24
 8006f32:	46bd      	mov	sp, r7
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	08013948 	.word	0x08013948

08006f3c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b088      	sub	sp, #32
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	60f8      	str	r0, [r7, #12]
 8006f44:	60b9      	str	r1, [r7, #8]
 8006f46:	4611      	mov	r1, r2
 8006f48:	461a      	mov	r2, r3
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	71fb      	strb	r3, [r7, #7]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	330d      	adds	r3, #13
 8006f56:	79ba      	ldrb	r2, [r7, #6]
 8006f58:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	330b      	adds	r3, #11
 8006f5e:	220f      	movs	r2, #15
 8006f60:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	330c      	adds	r3, #12
 8006f66:	2200      	movs	r2, #0
 8006f68:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	331a      	adds	r3, #26
 8006f6e:	2100      	movs	r1, #0
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe ff5c 	bl	8005e2e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006f76:	79fb      	ldrb	r3, [r7, #7]
 8006f78:	1e5a      	subs	r2, r3, #1
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	005b      	lsls	r3, r3, #1
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	4413      	add	r3, r2
 8006f84:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006f86:	2300      	movs	r3, #0
 8006f88:	82fb      	strh	r3, [r7, #22]
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006f8e:	8afb      	ldrh	r3, [r7, #22]
 8006f90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d007      	beq.n	8006fa8 <put_lfn+0x6c>
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	1c5a      	adds	r2, r3, #1
 8006f9c:	61fa      	str	r2, [r7, #28]
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	4413      	add	r3, r2
 8006fa4:	881b      	ldrh	r3, [r3, #0]
 8006fa6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006fa8:	4a17      	ldr	r2, [pc, #92]	; (8007008 <put_lfn+0xcc>)
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	4413      	add	r3, r2
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	4413      	add	r3, r2
 8006fb6:	8afa      	ldrh	r2, [r7, #22]
 8006fb8:	4611      	mov	r1, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fe ff37 	bl	8005e2e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006fc0:	8afb      	ldrh	r3, [r7, #22]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d102      	bne.n	8006fcc <put_lfn+0x90>
 8006fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006fca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006fcc:	69bb      	ldr	r3, [r7, #24]
 8006fce:	3301      	adds	r3, #1
 8006fd0:	61bb      	str	r3, [r7, #24]
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	2b0c      	cmp	r3, #12
 8006fd6:	d9da      	bls.n	8006f8e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006fd8:	8afb      	ldrh	r3, [r7, #22]
 8006fda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d006      	beq.n	8006ff0 <put_lfn+0xb4>
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4413      	add	r3, r2
 8006fea:	881b      	ldrh	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d103      	bne.n	8006ff8 <put_lfn+0xbc>
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ff6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	79fa      	ldrb	r2, [r7, #7]
 8006ffc:	701a      	strb	r2, [r3, #0]
}
 8006ffe:	bf00      	nop
 8007000:	3720      	adds	r7, #32
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	08013948 	.word	0x08013948

0800700c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08c      	sub	sp, #48	; 0x30
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	607a      	str	r2, [r7, #4]
 8007018:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800701a:	220b      	movs	r2, #11
 800701c:	68b9      	ldr	r1, [r7, #8]
 800701e:	68f8      	ldr	r0, [r7, #12]
 8007020:	f7fe ff4c 	bl	8005ebc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	2b05      	cmp	r3, #5
 8007028:	d92b      	bls.n	8007082 <gen_numname+0x76>
		sr = seq;
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800702e:	e022      	b.n	8007076 <gen_numname+0x6a>
			wc = *lfn++;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	1c9a      	adds	r2, r3, #2
 8007034:	607a      	str	r2, [r7, #4]
 8007036:	881b      	ldrh	r3, [r3, #0]
 8007038:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800703a:	2300      	movs	r3, #0
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28
 800703e:	e017      	b.n	8007070 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	005a      	lsls	r2, r3, #1
 8007044:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007046:	f003 0301 	and.w	r3, r3, #1
 800704a:	4413      	add	r3, r2
 800704c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800704e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007050:	085b      	lsrs	r3, r3, #1
 8007052:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800705a:	2b00      	cmp	r3, #0
 800705c:	d005      	beq.n	800706a <gen_numname+0x5e>
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007064:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8007068:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800706a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706c:	3301      	adds	r3, #1
 800706e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007072:	2b0f      	cmp	r3, #15
 8007074:	d9e4      	bls.n	8007040 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1d8      	bne.n	8007030 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007082:	2307      	movs	r3, #7
 8007084:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	b2db      	uxtb	r3, r3
 800708a:	f003 030f 	and.w	r3, r3, #15
 800708e:	b2db      	uxtb	r3, r3
 8007090:	3330      	adds	r3, #48	; 0x30
 8007092:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007096:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800709a:	2b39      	cmp	r3, #57	; 0x39
 800709c:	d904      	bls.n	80070a8 <gen_numname+0x9c>
 800709e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070a2:	3307      	adds	r3, #7
 80070a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	1e5a      	subs	r2, r3, #1
 80070ac:	62ba      	str	r2, [r7, #40]	; 0x28
 80070ae:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80070b2:	4413      	add	r3, r2
 80070b4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80070b8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	091b      	lsrs	r3, r3, #4
 80070c0:	603b      	str	r3, [r7, #0]
	} while (seq);
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d1de      	bne.n	8007086 <gen_numname+0x7a>
	ns[i] = '~';
 80070c8:	f107 0214 	add.w	r2, r7, #20
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	4413      	add	r3, r2
 80070d0:	227e      	movs	r2, #126	; 0x7e
 80070d2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80070d4:	2300      	movs	r3, #0
 80070d6:	627b      	str	r3, [r7, #36]	; 0x24
 80070d8:	e002      	b.n	80070e0 <gen_numname+0xd4>
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	3301      	adds	r3, #1
 80070de:	627b      	str	r3, [r7, #36]	; 0x24
 80070e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d205      	bcs.n	80070f4 <gen_numname+0xe8>
 80070e8:	68fa      	ldr	r2, [r7, #12]
 80070ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ec:	4413      	add	r3, r2
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	2b20      	cmp	r3, #32
 80070f2:	d1f2      	bne.n	80070da <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	2b07      	cmp	r3, #7
 80070f8:	d808      	bhi.n	800710c <gen_numname+0x100>
 80070fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fc:	1c5a      	adds	r2, r3, #1
 80070fe:	62ba      	str	r2, [r7, #40]	; 0x28
 8007100:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007104:	4413      	add	r3, r2
 8007106:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800710a:	e000      	b.n	800710e <gen_numname+0x102>
 800710c:	2120      	movs	r1, #32
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	1c5a      	adds	r2, r3, #1
 8007112:	627a      	str	r2, [r7, #36]	; 0x24
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	460a      	mov	r2, r1
 800711a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711e:	2b07      	cmp	r3, #7
 8007120:	d9e8      	bls.n	80070f4 <gen_numname+0xe8>
}
 8007122:	bf00      	nop
 8007124:	3730      	adds	r7, #48	; 0x30
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}

0800712a <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800712a:	b480      	push	{r7}
 800712c:	b085      	sub	sp, #20
 800712e:	af00      	add	r7, sp, #0
 8007130:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007136:	230b      	movs	r3, #11
 8007138:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800713a:	7bfb      	ldrb	r3, [r7, #15]
 800713c:	b2da      	uxtb	r2, r3
 800713e:	0852      	lsrs	r2, r2, #1
 8007140:	01db      	lsls	r3, r3, #7
 8007142:	4313      	orrs	r3, r2
 8007144:	b2da      	uxtb	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	1c59      	adds	r1, r3, #1
 800714a:	6079      	str	r1, [r7, #4]
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	4413      	add	r3, r2
 8007150:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	3b01      	subs	r3, #1
 8007156:	60bb      	str	r3, [r7, #8]
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1ed      	bne.n	800713a <sum_sfn+0x10>
	return sum;
 800715e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007160:	4618      	mov	r0, r3
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007176:	2304      	movs	r3, #4
 8007178:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8007180:	23ff      	movs	r3, #255	; 0xff
 8007182:	757b      	strb	r3, [r7, #21]
 8007184:	23ff      	movs	r3, #255	; 0xff
 8007186:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8007188:	e081      	b.n	800728e <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	69db      	ldr	r3, [r3, #28]
 800718e:	4619      	mov	r1, r3
 8007190:	6938      	ldr	r0, [r7, #16]
 8007192:	f7ff f8c1 	bl	8006318 <move_window>
 8007196:	4603      	mov	r3, r0
 8007198:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d17c      	bne.n	800729a <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6a1b      	ldr	r3, [r3, #32]
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80071a8:	7dbb      	ldrb	r3, [r7, #22]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d102      	bne.n	80071b4 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80071ae:	2304      	movs	r3, #4
 80071b0:	75fb      	strb	r3, [r7, #23]
 80071b2:	e077      	b.n	80072a4 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a1b      	ldr	r3, [r3, #32]
 80071b8:	330b      	adds	r3, #11
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071c0:	73fb      	strb	r3, [r7, #15]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	7bfa      	ldrb	r2, [r7, #15]
 80071c6:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80071c8:	7dbb      	ldrb	r3, [r7, #22]
 80071ca:	2be5      	cmp	r3, #229	; 0xe5
 80071cc:	d00e      	beq.n	80071ec <dir_read+0x80>
 80071ce:	7dbb      	ldrb	r3, [r7, #22]
 80071d0:	2b2e      	cmp	r3, #46	; 0x2e
 80071d2:	d00b      	beq.n	80071ec <dir_read+0x80>
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	f023 0320 	bic.w	r3, r3, #32
 80071da:	2b08      	cmp	r3, #8
 80071dc:	bf0c      	ite	eq
 80071de:	2301      	moveq	r3, #1
 80071e0:	2300      	movne	r3, #0
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	461a      	mov	r2, r3
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d002      	beq.n	80071f2 <dir_read+0x86>
				ord = 0xFF;
 80071ec:	23ff      	movs	r3, #255	; 0xff
 80071ee:	757b      	strb	r3, [r7, #21]
 80071f0:	e044      	b.n	800727c <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80071f2:	7bfb      	ldrb	r3, [r7, #15]
 80071f4:	2b0f      	cmp	r3, #15
 80071f6:	d12f      	bne.n	8007258 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80071f8:	7dbb      	ldrb	r3, [r7, #22]
 80071fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d00d      	beq.n	800721e <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	7b5b      	ldrb	r3, [r3, #13]
 8007208:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800720a:	7dbb      	ldrb	r3, [r7, #22]
 800720c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007210:	75bb      	strb	r3, [r7, #22]
 8007212:	7dbb      	ldrb	r3, [r7, #22]
 8007214:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	695a      	ldr	r2, [r3, #20]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800721e:	7dba      	ldrb	r2, [r7, #22]
 8007220:	7d7b      	ldrb	r3, [r7, #21]
 8007222:	429a      	cmp	r2, r3
 8007224:	d115      	bne.n	8007252 <dir_read+0xe6>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6a1b      	ldr	r3, [r3, #32]
 800722a:	330d      	adds	r3, #13
 800722c:	781b      	ldrb	r3, [r3, #0]
 800722e:	7d3a      	ldrb	r2, [r7, #20]
 8007230:	429a      	cmp	r2, r3
 8007232:	d10e      	bne.n	8007252 <dir_read+0xe6>
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	68da      	ldr	r2, [r3, #12]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	4619      	mov	r1, r3
 800723e:	4610      	mov	r0, r2
 8007240:	f7ff fe18 	bl	8006e74 <pick_lfn>
 8007244:	4603      	mov	r3, r0
 8007246:	2b00      	cmp	r3, #0
 8007248:	d003      	beq.n	8007252 <dir_read+0xe6>
 800724a:	7d7b      	ldrb	r3, [r7, #21]
 800724c:	3b01      	subs	r3, #1
 800724e:	b2db      	uxtb	r3, r3
 8007250:	e000      	b.n	8007254 <dir_read+0xe8>
 8007252:	23ff      	movs	r3, #255	; 0xff
 8007254:	757b      	strb	r3, [r7, #21]
 8007256:	e011      	b.n	800727c <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8007258:	7d7b      	ldrb	r3, [r7, #21]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d109      	bne.n	8007272 <dir_read+0x106>
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	4618      	mov	r0, r3
 8007264:	f7ff ff61 	bl	800712a <sum_sfn>
 8007268:	4603      	mov	r3, r0
 800726a:	461a      	mov	r2, r3
 800726c:	7d3b      	ldrb	r3, [r7, #20]
 800726e:	4293      	cmp	r3, r2
 8007270:	d015      	beq.n	800729e <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f04f 32ff 	mov.w	r2, #4294967295
 8007278:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800727a:	e010      	b.n	800729e <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800727c:	2100      	movs	r1, #0
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7ff fc3d 	bl	8006afe <dir_next>
 8007284:	4603      	mov	r3, r0
 8007286:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d109      	bne.n	80072a2 <dir_read+0x136>
	while (dp->sect) {
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	2b00      	cmp	r3, #0
 8007294:	f47f af79 	bne.w	800718a <dir_read+0x1e>
 8007298:	e004      	b.n	80072a4 <dir_read+0x138>
		if (res != FR_OK) break;
 800729a:	bf00      	nop
 800729c:	e002      	b.n	80072a4 <dir_read+0x138>
					break;
 800729e:	bf00      	nop
 80072a0:	e000      	b.n	80072a4 <dir_read+0x138>
		if (res != FR_OK) break;
 80072a2:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80072a4:	7dfb      	ldrb	r3, [r7, #23]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d002      	beq.n	80072b0 <dir_read+0x144>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	61da      	str	r2, [r3, #28]
	return res;
 80072b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}

080072ba <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80072ba:	b580      	push	{r7, lr}
 80072bc:	b086      	sub	sp, #24
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80072c8:	2100      	movs	r1, #0
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f7ff fb9c 	bl	8006a08 <dir_sdi>
 80072d0:	4603      	mov	r3, r0
 80072d2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <dir_find+0x24>
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	e0a9      	b.n	8007432 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80072de:	23ff      	movs	r3, #255	; 0xff
 80072e0:	753b      	strb	r3, [r7, #20]
 80072e2:	7d3b      	ldrb	r3, [r7, #20]
 80072e4:	757b      	strb	r3, [r7, #21]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	f04f 32ff 	mov.w	r2, #4294967295
 80072ec:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	69db      	ldr	r3, [r3, #28]
 80072f2:	4619      	mov	r1, r3
 80072f4:	6938      	ldr	r0, [r7, #16]
 80072f6:	f7ff f80f 	bl	8006318 <move_window>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80072fe:	7dfb      	ldrb	r3, [r7, #23]
 8007300:	2b00      	cmp	r3, #0
 8007302:	f040 8090 	bne.w	8007426 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6a1b      	ldr	r3, [r3, #32]
 800730a:	781b      	ldrb	r3, [r3, #0]
 800730c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800730e:	7dbb      	ldrb	r3, [r7, #22]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d102      	bne.n	800731a <dir_find+0x60>
 8007314:	2304      	movs	r3, #4
 8007316:	75fb      	strb	r3, [r7, #23]
 8007318:	e08a      	b.n	8007430 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6a1b      	ldr	r3, [r3, #32]
 800731e:	330b      	adds	r3, #11
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007326:	73fb      	strb	r3, [r7, #15]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	7bfa      	ldrb	r2, [r7, #15]
 800732c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800732e:	7dbb      	ldrb	r3, [r7, #22]
 8007330:	2be5      	cmp	r3, #229	; 0xe5
 8007332:	d007      	beq.n	8007344 <dir_find+0x8a>
 8007334:	7bfb      	ldrb	r3, [r7, #15]
 8007336:	f003 0308 	and.w	r3, r3, #8
 800733a:	2b00      	cmp	r3, #0
 800733c:	d009      	beq.n	8007352 <dir_find+0x98>
 800733e:	7bfb      	ldrb	r3, [r7, #15]
 8007340:	2b0f      	cmp	r3, #15
 8007342:	d006      	beq.n	8007352 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007344:	23ff      	movs	r3, #255	; 0xff
 8007346:	757b      	strb	r3, [r7, #21]
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f04f 32ff 	mov.w	r2, #4294967295
 800734e:	631a      	str	r2, [r3, #48]	; 0x30
 8007350:	e05e      	b.n	8007410 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007352:	7bfb      	ldrb	r3, [r7, #15]
 8007354:	2b0f      	cmp	r3, #15
 8007356:	d136      	bne.n	80073c6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800735e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007362:	2b00      	cmp	r3, #0
 8007364:	d154      	bne.n	8007410 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007366:	7dbb      	ldrb	r3, [r7, #22]
 8007368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00d      	beq.n	800738c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6a1b      	ldr	r3, [r3, #32]
 8007374:	7b5b      	ldrb	r3, [r3, #13]
 8007376:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007378:	7dbb      	ldrb	r3, [r7, #22]
 800737a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800737e:	75bb      	strb	r3, [r7, #22]
 8007380:	7dbb      	ldrb	r3, [r7, #22]
 8007382:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	695a      	ldr	r2, [r3, #20]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800738c:	7dba      	ldrb	r2, [r7, #22]
 800738e:	7d7b      	ldrb	r3, [r7, #21]
 8007390:	429a      	cmp	r2, r3
 8007392:	d115      	bne.n	80073c0 <dir_find+0x106>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	330d      	adds	r3, #13
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	7d3a      	ldrb	r2, [r7, #20]
 800739e:	429a      	cmp	r2, r3
 80073a0:	d10e      	bne.n	80073c0 <dir_find+0x106>
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	68da      	ldr	r2, [r3, #12]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f7ff fcf1 	bl	8006d94 <cmp_lfn>
 80073b2:	4603      	mov	r3, r0
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <dir_find+0x106>
 80073b8:	7d7b      	ldrb	r3, [r7, #21]
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	e000      	b.n	80073c2 <dir_find+0x108>
 80073c0:	23ff      	movs	r3, #255	; 0xff
 80073c2:	757b      	strb	r3, [r7, #21]
 80073c4:	e024      	b.n	8007410 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80073c6:	7d7b      	ldrb	r3, [r7, #21]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d109      	bne.n	80073e0 <dir_find+0x126>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6a1b      	ldr	r3, [r3, #32]
 80073d0:	4618      	mov	r0, r3
 80073d2:	f7ff feaa 	bl	800712a <sum_sfn>
 80073d6:	4603      	mov	r3, r0
 80073d8:	461a      	mov	r2, r3
 80073da:	7d3b      	ldrb	r3, [r7, #20]
 80073dc:	4293      	cmp	r3, r2
 80073de:	d024      	beq.n	800742a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d10a      	bne.n	8007404 <dir_find+0x14a>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6a18      	ldr	r0, [r3, #32]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3324      	adds	r3, #36	; 0x24
 80073f6:	220b      	movs	r2, #11
 80073f8:	4619      	mov	r1, r3
 80073fa:	f7fe fd9a 	bl	8005f32 <mem_cmp>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d014      	beq.n	800742e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007404:	23ff      	movs	r3, #255	; 0xff
 8007406:	757b      	strb	r3, [r7, #21]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f04f 32ff 	mov.w	r2, #4294967295
 800740e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007410:	2100      	movs	r1, #0
 8007412:	6878      	ldr	r0, [r7, #4]
 8007414:	f7ff fb73 	bl	8006afe <dir_next>
 8007418:	4603      	mov	r3, r0
 800741a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800741c:	7dfb      	ldrb	r3, [r7, #23]
 800741e:	2b00      	cmp	r3, #0
 8007420:	f43f af65 	beq.w	80072ee <dir_find+0x34>
 8007424:	e004      	b.n	8007430 <dir_find+0x176>
		if (res != FR_OK) break;
 8007426:	bf00      	nop
 8007428:	e002      	b.n	8007430 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800742a:	bf00      	nop
 800742c:	e000      	b.n	8007430 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800742e:	bf00      	nop

	return res;
 8007430:	7dfb      	ldrb	r3, [r7, #23]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3718      	adds	r7, #24
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b08c      	sub	sp, #48	; 0x30
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007450:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <dir_register+0x20>
 8007458:	2306      	movs	r3, #6
 800745a:	e0e0      	b.n	800761e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800745c:	2300      	movs	r3, #0
 800745e:	627b      	str	r3, [r7, #36]	; 0x24
 8007460:	e002      	b.n	8007468 <dir_register+0x2c>
 8007462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007464:	3301      	adds	r3, #1
 8007466:	627b      	str	r3, [r7, #36]	; 0x24
 8007468:	69fb      	ldr	r3, [r7, #28]
 800746a:	68da      	ldr	r2, [r3, #12]
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	4413      	add	r3, r2
 8007472:	881b      	ldrh	r3, [r3, #0]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1f4      	bne.n	8007462 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800747e:	f107 030c 	add.w	r3, r7, #12
 8007482:	220c      	movs	r2, #12
 8007484:	4618      	mov	r0, r3
 8007486:	f7fe fd19 	bl	8005ebc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800748a:	7dfb      	ldrb	r3, [r7, #23]
 800748c:	f003 0301 	and.w	r3, r3, #1
 8007490:	2b00      	cmp	r3, #0
 8007492:	d032      	beq.n	80074fa <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2240      	movs	r2, #64	; 0x40
 8007498:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800749c:	2301      	movs	r3, #1
 800749e:	62bb      	str	r3, [r7, #40]	; 0x28
 80074a0:	e016      	b.n	80074d0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80074a8:	69fb      	ldr	r3, [r7, #28]
 80074aa:	68da      	ldr	r2, [r3, #12]
 80074ac:	f107 010c 	add.w	r1, r7, #12
 80074b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b2:	f7ff fdab 	bl	800700c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff feff 	bl	80072ba <dir_find>
 80074bc:	4603      	mov	r3, r0
 80074be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80074c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d106      	bne.n	80074d8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80074ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074cc:	3301      	adds	r3, #1
 80074ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80074d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d2:	2b63      	cmp	r3, #99	; 0x63
 80074d4:	d9e5      	bls.n	80074a2 <dir_register+0x66>
 80074d6:	e000      	b.n	80074da <dir_register+0x9e>
			if (res != FR_OK) break;
 80074d8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80074da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074dc:	2b64      	cmp	r3, #100	; 0x64
 80074de:	d101      	bne.n	80074e4 <dir_register+0xa8>
 80074e0:	2307      	movs	r3, #7
 80074e2:	e09c      	b.n	800761e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80074e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074e8:	2b04      	cmp	r3, #4
 80074ea:	d002      	beq.n	80074f2 <dir_register+0xb6>
 80074ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074f0:	e095      	b.n	800761e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80074f2:	7dfa      	ldrb	r2, [r7, #23]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
 80074fc:	f003 0302 	and.w	r3, r3, #2
 8007500:	2b00      	cmp	r3, #0
 8007502:	d007      	beq.n	8007514 <dir_register+0xd8>
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	330c      	adds	r3, #12
 8007508:	4a47      	ldr	r2, [pc, #284]	; (8007628 <dir_register+0x1ec>)
 800750a:	fba2 2303 	umull	r2, r3, r2, r3
 800750e:	089b      	lsrs	r3, r3, #2
 8007510:	3301      	adds	r3, #1
 8007512:	e000      	b.n	8007516 <dir_register+0xda>
 8007514:	2301      	movs	r3, #1
 8007516:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007518:	6a39      	ldr	r1, [r7, #32]
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7ff fbb4 	bl	8006c88 <dir_alloc>
 8007520:	4603      	mov	r3, r0
 8007522:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007526:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800752a:	2b00      	cmp	r3, #0
 800752c:	d148      	bne.n	80075c0 <dir_register+0x184>
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	3b01      	subs	r3, #1
 8007532:	623b      	str	r3, [r7, #32]
 8007534:	6a3b      	ldr	r3, [r7, #32]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d042      	beq.n	80075c0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	695a      	ldr	r2, [r3, #20]
 800753e:	6a3b      	ldr	r3, [r7, #32]
 8007540:	015b      	lsls	r3, r3, #5
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	4619      	mov	r1, r3
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f7ff fa5e 	bl	8006a08 <dir_sdi>
 800754c:	4603      	mov	r3, r0
 800754e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007552:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007556:	2b00      	cmp	r3, #0
 8007558:	d132      	bne.n	80075c0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	3324      	adds	r3, #36	; 0x24
 800755e:	4618      	mov	r0, r3
 8007560:	f7ff fde3 	bl	800712a <sum_sfn>
 8007564:	4603      	mov	r3, r0
 8007566:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	69db      	ldr	r3, [r3, #28]
 800756c:	4619      	mov	r1, r3
 800756e:	69f8      	ldr	r0, [r7, #28]
 8007570:	f7fe fed2 	bl	8006318 <move_window>
 8007574:	4603      	mov	r3, r0
 8007576:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800757a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800757e:	2b00      	cmp	r3, #0
 8007580:	d11d      	bne.n	80075be <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	68d8      	ldr	r0, [r3, #12]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6a19      	ldr	r1, [r3, #32]
 800758a:	6a3b      	ldr	r3, [r7, #32]
 800758c:	b2da      	uxtb	r2, r3
 800758e:	7efb      	ldrb	r3, [r7, #27]
 8007590:	f7ff fcd4 	bl	8006f3c <put_lfn>
				fs->wflag = 1;
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	2201      	movs	r2, #1
 8007598:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800759a:	2100      	movs	r1, #0
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff faae 	bl	8006afe <dir_next>
 80075a2:	4603      	mov	r3, r0
 80075a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80075a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d107      	bne.n	80075c0 <dir_register+0x184>
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	3b01      	subs	r3, #1
 80075b4:	623b      	str	r3, [r7, #32]
 80075b6:	6a3b      	ldr	r3, [r7, #32]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1d5      	bne.n	8007568 <dir_register+0x12c>
 80075bc:	e000      	b.n	80075c0 <dir_register+0x184>
				if (res != FR_OK) break;
 80075be:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80075c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d128      	bne.n	800761a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	69db      	ldr	r3, [r3, #28]
 80075cc:	4619      	mov	r1, r3
 80075ce:	69f8      	ldr	r0, [r7, #28]
 80075d0:	f7fe fea2 	bl	8006318 <move_window>
 80075d4:	4603      	mov	r3, r0
 80075d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80075da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d11b      	bne.n	800761a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6a1b      	ldr	r3, [r3, #32]
 80075e6:	2220      	movs	r2, #32
 80075e8:	2100      	movs	r1, #0
 80075ea:	4618      	mov	r0, r3
 80075ec:	f7fe fc87 	bl	8005efe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6a18      	ldr	r0, [r3, #32]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	3324      	adds	r3, #36	; 0x24
 80075f8:	220b      	movs	r2, #11
 80075fa:	4619      	mov	r1, r3
 80075fc:	f7fe fc5e 	bl	8005ebc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	330c      	adds	r3, #12
 800760c:	f002 0218 	and.w	r2, r2, #24
 8007610:	b2d2      	uxtb	r2, r2
 8007612:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007614:	69fb      	ldr	r3, [r7, #28]
 8007616:	2201      	movs	r2, #1
 8007618:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800761a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800761e:	4618      	mov	r0, r3
 8007620:	3730      	adds	r7, #48	; 0x30
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	4ec4ec4f 	.word	0x4ec4ec4f

0800762c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	695b      	ldr	r3, [r3, #20]
 800763e:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007648:	d007      	beq.n	800765a <dir_remove+0x2e>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764e:	4619      	mov	r1, r3
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f7ff f9d9 	bl	8006a08 <dir_sdi>
 8007656:	4603      	mov	r3, r0
 8007658:	e000      	b.n	800765c <dir_remove+0x30>
 800765a:	2300      	movs	r3, #0
 800765c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800765e:	7dfb      	ldrb	r3, [r7, #23]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d128      	bne.n	80076b6 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	4619      	mov	r1, r3
 800766a:	6938      	ldr	r0, [r7, #16]
 800766c:	f7fe fe54 	bl	8006318 <move_window>
 8007670:	4603      	mov	r3, r0
 8007672:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007674:	7dfb      	ldrb	r3, [r7, #23]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d115      	bne.n	80076a6 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a1b      	ldr	r3, [r3, #32]
 800767e:	22e5      	movs	r2, #229	; 0xe5
 8007680:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	2201      	movs	r2, #1
 8007686:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	429a      	cmp	r2, r3
 8007690:	d90b      	bls.n	80076aa <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8007692:	2100      	movs	r1, #0
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7ff fa32 	bl	8006afe <dir_next>
 800769a:	4603      	mov	r3, r0
 800769c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800769e:	7dfb      	ldrb	r3, [r7, #23]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0df      	beq.n	8007664 <dir_remove+0x38>
 80076a4:	e002      	b.n	80076ac <dir_remove+0x80>
			if (res != FR_OK) break;
 80076a6:	bf00      	nop
 80076a8:	e000      	b.n	80076ac <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80076aa:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d101      	bne.n	80076b6 <dir_remove+0x8a>
 80076b2:	2302      	movs	r3, #2
 80076b4:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 80076b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3718      	adds	r7, #24
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	2200      	movs	r2, #0
 80076d4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	f000 80c9 	beq.w	8007872 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e8:	d032      	beq.n	8007750 <get_fileinfo+0x90>
			i = j = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	61bb      	str	r3, [r7, #24]
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80076f2:	e01b      	b.n	800772c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80076f4:	89fb      	ldrh	r3, [r7, #14]
 80076f6:	2100      	movs	r1, #0
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7f9 fc05 	bl	8000f08 <ff_convert>
 80076fe:	4603      	mov	r3, r0
 8007700:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007702:	89fb      	ldrh	r3, [r7, #14]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d102      	bne.n	800770e <get_fileinfo+0x4e>
 8007708:	2300      	movs	r3, #0
 800770a:	61fb      	str	r3, [r7, #28]
 800770c:	e01a      	b.n	8007744 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800770e:	69fb      	ldr	r3, [r7, #28]
 8007710:	2bfe      	cmp	r3, #254	; 0xfe
 8007712:	d902      	bls.n	800771a <get_fileinfo+0x5a>
 8007714:	2300      	movs	r3, #0
 8007716:	61fb      	str	r3, [r7, #28]
 8007718:	e014      	b.n	8007744 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800771a:	69fb      	ldr	r3, [r7, #28]
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	61fa      	str	r2, [r7, #28]
 8007720:	89fa      	ldrh	r2, [r7, #14]
 8007722:	b2d1      	uxtb	r1, r2
 8007724:	683a      	ldr	r2, [r7, #0]
 8007726:	4413      	add	r3, r2
 8007728:	460a      	mov	r2, r1
 800772a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	68da      	ldr	r2, [r3, #12]
 8007730:	69bb      	ldr	r3, [r7, #24]
 8007732:	1c59      	adds	r1, r3, #1
 8007734:	61b9      	str	r1, [r7, #24]
 8007736:	005b      	lsls	r3, r3, #1
 8007738:	4413      	add	r3, r2
 800773a:	881b      	ldrh	r3, [r3, #0]
 800773c:	81fb      	strh	r3, [r7, #14]
 800773e:	89fb      	ldrh	r3, [r7, #14]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1d7      	bne.n	80076f4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	4413      	add	r3, r2
 800774a:	3316      	adds	r3, #22
 800774c:	2200      	movs	r2, #0
 800774e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8007750:	2300      	movs	r3, #0
 8007752:	61bb      	str	r3, [r7, #24]
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	4413      	add	r3, r2
 800775e:	3316      	adds	r3, #22
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8007764:	e04c      	b.n	8007800 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1a      	ldr	r2, [r3, #32]
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	1c59      	adds	r1, r3, #1
 800776e:	61f9      	str	r1, [r7, #28]
 8007770:	4413      	add	r3, r2
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007776:	7dfb      	ldrb	r3, [r7, #23]
 8007778:	2b20      	cmp	r3, #32
 800777a:	d100      	bne.n	800777e <get_fileinfo+0xbe>
 800777c:	e040      	b.n	8007800 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	2b05      	cmp	r3, #5
 8007782:	d101      	bne.n	8007788 <get_fileinfo+0xc8>
 8007784:	23e5      	movs	r3, #229	; 0xe5
 8007786:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	2b09      	cmp	r3, #9
 800778c:	d10f      	bne.n	80077ae <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800778e:	89bb      	ldrh	r3, [r7, #12]
 8007790:	2b00      	cmp	r3, #0
 8007792:	d105      	bne.n	80077a0 <get_fileinfo+0xe0>
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	4413      	add	r3, r2
 800779a:	3316      	adds	r3, #22
 800779c:	222e      	movs	r2, #46	; 0x2e
 800779e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	1c5a      	adds	r2, r3, #1
 80077a4:	61ba      	str	r2, [r7, #24]
 80077a6:	683a      	ldr	r2, [r7, #0]
 80077a8:	4413      	add	r3, r2
 80077aa:	222e      	movs	r2, #46	; 0x2e
 80077ac:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80077ae:	683a      	ldr	r2, [r7, #0]
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	4413      	add	r3, r2
 80077b4:	3309      	adds	r3, #9
 80077b6:	7dfa      	ldrb	r2, [r7, #23]
 80077b8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80077ba:	89bb      	ldrh	r3, [r7, #12]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d11c      	bne.n	80077fa <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80077c0:	7dfb      	ldrb	r3, [r7, #23]
 80077c2:	2b40      	cmp	r3, #64	; 0x40
 80077c4:	d913      	bls.n	80077ee <get_fileinfo+0x12e>
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	2b5a      	cmp	r3, #90	; 0x5a
 80077ca:	d810      	bhi.n	80077ee <get_fileinfo+0x12e>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	6a1b      	ldr	r3, [r3, #32]
 80077d0:	330c      	adds	r3, #12
 80077d2:	781b      	ldrb	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	69fb      	ldr	r3, [r7, #28]
 80077d8:	2b08      	cmp	r3, #8
 80077da:	d901      	bls.n	80077e0 <get_fileinfo+0x120>
 80077dc:	2310      	movs	r3, #16
 80077de:	e000      	b.n	80077e2 <get_fileinfo+0x122>
 80077e0:	2308      	movs	r3, #8
 80077e2:	4013      	ands	r3, r2
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d002      	beq.n	80077ee <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80077e8:	7dfb      	ldrb	r3, [r7, #23]
 80077ea:	3320      	adds	r3, #32
 80077ec:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80077ee:	683a      	ldr	r2, [r7, #0]
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	4413      	add	r3, r2
 80077f4:	3316      	adds	r3, #22
 80077f6:	7dfa      	ldrb	r2, [r7, #23]
 80077f8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	3301      	adds	r3, #1
 80077fe:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	2b0a      	cmp	r3, #10
 8007804:	d9af      	bls.n	8007766 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8007806:	89bb      	ldrh	r3, [r7, #12]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10d      	bne.n	8007828 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800780c:	683a      	ldr	r2, [r7, #0]
 800780e:	69bb      	ldr	r3, [r7, #24]
 8007810:	4413      	add	r3, r2
 8007812:	3316      	adds	r3, #22
 8007814:	2200      	movs	r2, #0
 8007816:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a1b      	ldr	r3, [r3, #32]
 800781c:	330c      	adds	r3, #12
 800781e:	781b      	ldrb	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d101      	bne.n	8007828 <get_fileinfo+0x168>
 8007824:	2300      	movs	r3, #0
 8007826:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8007828:	683a      	ldr	r2, [r7, #0]
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	4413      	add	r3, r2
 800782e:	3309      	adds	r3, #9
 8007830:	2200      	movs	r2, #0
 8007832:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	7ada      	ldrb	r2, [r3, #11]
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6a1b      	ldr	r3, [r3, #32]
 8007842:	331c      	adds	r3, #28
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe facf 	bl	8005de8 <ld_dword>
 800784a:	4602      	mov	r2, r0
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6a1b      	ldr	r3, [r3, #32]
 8007854:	3316      	adds	r3, #22
 8007856:	4618      	mov	r0, r3
 8007858:	f7fe fac6 	bl	8005de8 <ld_dword>
 800785c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	b29a      	uxth	r2, r3
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	80da      	strh	r2, [r3, #6]
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	0c1b      	lsrs	r3, r3, #16
 800786a:	b29a      	uxth	r2, r3
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	809a      	strh	r2, [r3, #4]
 8007870:	e000      	b.n	8007874 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007872:	bf00      	nop
}
 8007874:	3720      	adds	r7, #32
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}
	...

0800787c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b08a      	sub	sp, #40	; 0x28
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	613b      	str	r3, [r7, #16]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	60fb      	str	r3, [r7, #12]
 8007894:	2300      	movs	r3, #0
 8007896:	617b      	str	r3, [r7, #20]
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	61ba      	str	r2, [r7, #24]
 80078a2:	693a      	ldr	r2, [r7, #16]
 80078a4:	4413      	add	r3, r2
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80078aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078ac:	2b1f      	cmp	r3, #31
 80078ae:	d940      	bls.n	8007932 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80078b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078b2:	2b2f      	cmp	r3, #47	; 0x2f
 80078b4:	d006      	beq.n	80078c4 <create_name+0x48>
 80078b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078b8:	2b5c      	cmp	r3, #92	; 0x5c
 80078ba:	d110      	bne.n	80078de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80078bc:	e002      	b.n	80078c4 <create_name+0x48>
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	3301      	adds	r3, #1
 80078c2:	61bb      	str	r3, [r7, #24]
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	69bb      	ldr	r3, [r7, #24]
 80078c8:	4413      	add	r3, r2
 80078ca:	781b      	ldrb	r3, [r3, #0]
 80078cc:	2b2f      	cmp	r3, #47	; 0x2f
 80078ce:	d0f6      	beq.n	80078be <create_name+0x42>
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	69bb      	ldr	r3, [r7, #24]
 80078d4:	4413      	add	r3, r2
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b5c      	cmp	r3, #92	; 0x5c
 80078da:	d0f0      	beq.n	80078be <create_name+0x42>
			break;
 80078dc:	e02a      	b.n	8007934 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	2bfe      	cmp	r3, #254	; 0xfe
 80078e2:	d901      	bls.n	80078e8 <create_name+0x6c>
 80078e4:	2306      	movs	r3, #6
 80078e6:	e177      	b.n	8007bd8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80078e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078ea:	b2db      	uxtb	r3, r3
 80078ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80078ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078f0:	2101      	movs	r1, #1
 80078f2:	4618      	mov	r0, r3
 80078f4:	f7f9 fb08 	bl	8000f08 <ff_convert>
 80078f8:	4603      	mov	r3, r0
 80078fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80078fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d101      	bne.n	8007906 <create_name+0x8a>
 8007902:	2306      	movs	r3, #6
 8007904:	e168      	b.n	8007bd8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007906:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007908:	2b7f      	cmp	r3, #127	; 0x7f
 800790a:	d809      	bhi.n	8007920 <create_name+0xa4>
 800790c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800790e:	4619      	mov	r1, r3
 8007910:	48b3      	ldr	r0, [pc, #716]	; (8007be0 <create_name+0x364>)
 8007912:	f7fe fb35 	bl	8005f80 <chk_chr>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <create_name+0xa4>
 800791c:	2306      	movs	r3, #6
 800791e:	e15b      	b.n	8007bd8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	1c5a      	adds	r2, r3, #1
 8007924:	617a      	str	r2, [r7, #20]
 8007926:	005b      	lsls	r3, r3, #1
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4413      	add	r3, r2
 800792c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800792e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007930:	e7b4      	b.n	800789c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007932:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	441a      	add	r2, r3
 800793a:	683b      	ldr	r3, [r7, #0]
 800793c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800793e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007940:	2b1f      	cmp	r3, #31
 8007942:	d801      	bhi.n	8007948 <create_name+0xcc>
 8007944:	2304      	movs	r3, #4
 8007946:	e000      	b.n	800794a <create_name+0xce>
 8007948:	2300      	movs	r3, #0
 800794a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800794e:	e011      	b.n	8007974 <create_name+0xf8>
		w = lfn[di - 1];
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007956:	3b01      	subs	r3, #1
 8007958:	005b      	lsls	r3, r3, #1
 800795a:	68fa      	ldr	r2, [r7, #12]
 800795c:	4413      	add	r3, r2
 800795e:	881b      	ldrh	r3, [r3, #0]
 8007960:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007962:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007964:	2b20      	cmp	r3, #32
 8007966:	d002      	beq.n	800796e <create_name+0xf2>
 8007968:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800796a:	2b2e      	cmp	r3, #46	; 0x2e
 800796c:	d106      	bne.n	800797c <create_name+0x100>
		di--;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	3b01      	subs	r3, #1
 8007972:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1ea      	bne.n	8007950 <create_name+0xd4>
 800797a:	e000      	b.n	800797e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800797c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	68fa      	ldr	r2, [r7, #12]
 8007984:	4413      	add	r3, r2
 8007986:	2200      	movs	r2, #0
 8007988:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	2b00      	cmp	r3, #0
 800798e:	d101      	bne.n	8007994 <create_name+0x118>
 8007990:	2306      	movs	r3, #6
 8007992:	e121      	b.n	8007bd8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3324      	adds	r3, #36	; 0x24
 8007998:	220b      	movs	r2, #11
 800799a:	2120      	movs	r1, #32
 800799c:	4618      	mov	r0, r3
 800799e:	f7fe faae 	bl	8005efe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80079a2:	2300      	movs	r3, #0
 80079a4:	61bb      	str	r3, [r7, #24]
 80079a6:	e002      	b.n	80079ae <create_name+0x132>
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	3301      	adds	r3, #1
 80079ac:	61bb      	str	r3, [r7, #24]
 80079ae:	69bb      	ldr	r3, [r7, #24]
 80079b0:	005b      	lsls	r3, r3, #1
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	4413      	add	r3, r2
 80079b6:	881b      	ldrh	r3, [r3, #0]
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	d0f5      	beq.n	80079a8 <create_name+0x12c>
 80079bc:	69bb      	ldr	r3, [r7, #24]
 80079be:	005b      	lsls	r3, r3, #1
 80079c0:	68fa      	ldr	r2, [r7, #12]
 80079c2:	4413      	add	r3, r2
 80079c4:	881b      	ldrh	r3, [r3, #0]
 80079c6:	2b2e      	cmp	r3, #46	; 0x2e
 80079c8:	d0ee      	beq.n	80079a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80079ca:	69bb      	ldr	r3, [r7, #24]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d009      	beq.n	80079e4 <create_name+0x168>
 80079d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079d4:	f043 0303 	orr.w	r3, r3, #3
 80079d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80079dc:	e002      	b.n	80079e4 <create_name+0x168>
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	3b01      	subs	r3, #1
 80079e2:	617b      	str	r3, [r7, #20]
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d009      	beq.n	80079fe <create_name+0x182>
 80079ea:	697b      	ldr	r3, [r7, #20]
 80079ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80079f0:	3b01      	subs	r3, #1
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4413      	add	r3, r2
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	2b2e      	cmp	r3, #46	; 0x2e
 80079fc:	d1ef      	bne.n	80079de <create_name+0x162>

	i = b = 0; ni = 8;
 80079fe:	2300      	movs	r3, #0
 8007a00:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007a04:	2300      	movs	r3, #0
 8007a06:	623b      	str	r3, [r7, #32]
 8007a08:	2308      	movs	r3, #8
 8007a0a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	1c5a      	adds	r2, r3, #1
 8007a10:	61ba      	str	r2, [r7, #24]
 8007a12:	005b      	lsls	r3, r3, #1
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	4413      	add	r3, r2
 8007a18:	881b      	ldrh	r3, [r3, #0]
 8007a1a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007a1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f000 8090 	beq.w	8007b44 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007a24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a26:	2b20      	cmp	r3, #32
 8007a28:	d006      	beq.n	8007a38 <create_name+0x1bc>
 8007a2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a2c:	2b2e      	cmp	r3, #46	; 0x2e
 8007a2e:	d10a      	bne.n	8007a46 <create_name+0x1ca>
 8007a30:	69ba      	ldr	r2, [r7, #24]
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d006      	beq.n	8007a46 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007a38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a3c:	f043 0303 	orr.w	r3, r3, #3
 8007a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a44:	e07d      	b.n	8007b42 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007a46:	6a3a      	ldr	r2, [r7, #32]
 8007a48:	69fb      	ldr	r3, [r7, #28]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d203      	bcs.n	8007a56 <create_name+0x1da>
 8007a4e:	69ba      	ldr	r2, [r7, #24]
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d123      	bne.n	8007a9e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	2b0b      	cmp	r3, #11
 8007a5a:	d106      	bne.n	8007a6a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a60:	f043 0303 	orr.w	r3, r3, #3
 8007a64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a68:	e06f      	b.n	8007b4a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007a6a:	69ba      	ldr	r2, [r7, #24]
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d005      	beq.n	8007a7e <create_name+0x202>
 8007a72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a76:	f043 0303 	orr.w	r3, r3, #3
 8007a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007a7e:	69ba      	ldr	r2, [r7, #24]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	429a      	cmp	r2, r3
 8007a84:	d860      	bhi.n	8007b48 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	61bb      	str	r3, [r7, #24]
 8007a8a:	2308      	movs	r3, #8
 8007a8c:	623b      	str	r3, [r7, #32]
 8007a8e:	230b      	movs	r3, #11
 8007a90:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007a92:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a96:	009b      	lsls	r3, r3, #2
 8007a98:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007a9c:	e051      	b.n	8007b42 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007a9e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aa0:	2b7f      	cmp	r3, #127	; 0x7f
 8007aa2:	d914      	bls.n	8007ace <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007aa4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aa6:	2100      	movs	r1, #0
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7f9 fa2d 	bl	8000f08 <ff_convert>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007ab2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d004      	beq.n	8007ac2 <create_name+0x246>
 8007ab8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aba:	3b80      	subs	r3, #128	; 0x80
 8007abc:	4a49      	ldr	r2, [pc, #292]	; (8007be4 <create_name+0x368>)
 8007abe:	5cd3      	ldrb	r3, [r2, r3]
 8007ac0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007ac2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ac6:	f043 0302 	orr.w	r3, r3, #2
 8007aca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007ace:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d007      	beq.n	8007ae4 <create_name+0x268>
 8007ad4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ad6:	4619      	mov	r1, r3
 8007ad8:	4843      	ldr	r0, [pc, #268]	; (8007be8 <create_name+0x36c>)
 8007ada:	f7fe fa51 	bl	8005f80 <chk_chr>
 8007ade:	4603      	mov	r3, r0
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d008      	beq.n	8007af6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007ae4:	235f      	movs	r3, #95	; 0x5f
 8007ae6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aec:	f043 0303 	orr.w	r3, r3, #3
 8007af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007af4:	e01b      	b.n	8007b2e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007af8:	2b40      	cmp	r3, #64	; 0x40
 8007afa:	d909      	bls.n	8007b10 <create_name+0x294>
 8007afc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007afe:	2b5a      	cmp	r3, #90	; 0x5a
 8007b00:	d806      	bhi.n	8007b10 <create_name+0x294>
					b |= 2;
 8007b02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b06:	f043 0302 	orr.w	r3, r3, #2
 8007b0a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b0e:	e00e      	b.n	8007b2e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007b10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b12:	2b60      	cmp	r3, #96	; 0x60
 8007b14:	d90b      	bls.n	8007b2e <create_name+0x2b2>
 8007b16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b18:	2b7a      	cmp	r3, #122	; 0x7a
 8007b1a:	d808      	bhi.n	8007b2e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007b1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b20:	f043 0301 	orr.w	r3, r3, #1
 8007b24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b2a:	3b20      	subs	r3, #32
 8007b2c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007b2e:	6a3b      	ldr	r3, [r7, #32]
 8007b30:	1c5a      	adds	r2, r3, #1
 8007b32:	623a      	str	r2, [r7, #32]
 8007b34:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b36:	b2d1      	uxtb	r1, r2
 8007b38:	687a      	ldr	r2, [r7, #4]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	460a      	mov	r2, r1
 8007b3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007b42:	e763      	b.n	8007a0c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007b44:	bf00      	nop
 8007b46:	e000      	b.n	8007b4a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007b48:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b50:	2be5      	cmp	r3, #229	; 0xe5
 8007b52:	d103      	bne.n	8007b5c <create_name+0x2e0>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2205      	movs	r2, #5
 8007b58:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007b5c:	69fb      	ldr	r3, [r7, #28]
 8007b5e:	2b08      	cmp	r3, #8
 8007b60:	d104      	bne.n	8007b6c <create_name+0x2f0>
 8007b62:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007b6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b70:	f003 030c 	and.w	r3, r3, #12
 8007b74:	2b0c      	cmp	r3, #12
 8007b76:	d005      	beq.n	8007b84 <create_name+0x308>
 8007b78:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b7c:	f003 0303 	and.w	r3, r3, #3
 8007b80:	2b03      	cmp	r3, #3
 8007b82:	d105      	bne.n	8007b90 <create_name+0x314>
 8007b84:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b88:	f043 0302 	orr.w	r3, r3, #2
 8007b8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b94:	f003 0302 	and.w	r3, r3, #2
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d117      	bne.n	8007bcc <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007b9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ba0:	f003 0303 	and.w	r3, r3, #3
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d105      	bne.n	8007bb4 <create_name+0x338>
 8007ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bac:	f043 0310 	orr.w	r3, r3, #16
 8007bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007bb4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bb8:	f003 030c 	and.w	r3, r3, #12
 8007bbc:	2b04      	cmp	r3, #4
 8007bbe:	d105      	bne.n	8007bcc <create_name+0x350>
 8007bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bc4:	f043 0308 	orr.w	r3, r3, #8
 8007bc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007bd2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007bd6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3728      	adds	r7, #40	; 0x28
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	0800c4e4 	.word	0x0800c4e4
 8007be4:	080138c8 	.word	0x080138c8
 8007be8:	0800c4f0 	.word	0x0800c4f0

08007bec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007bfa:	693b      	ldr	r3, [r7, #16]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007c00:	e002      	b.n	8007c08 <follow_path+0x1c>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	3301      	adds	r3, #1
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b2f      	cmp	r3, #47	; 0x2f
 8007c0e:	d0f8      	beq.n	8007c02 <follow_path+0x16>
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	781b      	ldrb	r3, [r3, #0]
 8007c14:	2b5c      	cmp	r3, #92	; 0x5c
 8007c16:	d0f4      	beq.n	8007c02 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	781b      	ldrb	r3, [r3, #0]
 8007c22:	2b1f      	cmp	r3, #31
 8007c24:	d80a      	bhi.n	8007c3c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2280      	movs	r2, #128	; 0x80
 8007c2a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007c2e:	2100      	movs	r1, #0
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7fe fee9 	bl	8006a08 <dir_sdi>
 8007c36:	4603      	mov	r3, r0
 8007c38:	75fb      	strb	r3, [r7, #23]
 8007c3a:	e043      	b.n	8007cc4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007c3c:	463b      	mov	r3, r7
 8007c3e:	4619      	mov	r1, r3
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7ff fe1b 	bl	800787c <create_name>
 8007c46:	4603      	mov	r3, r0
 8007c48:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d134      	bne.n	8007cba <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7ff fb32 	bl	80072ba <dir_find>
 8007c56:	4603      	mov	r3, r0
 8007c58:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007c60:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007c62:	7dfb      	ldrb	r3, [r7, #23]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d00a      	beq.n	8007c7e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007c68:	7dfb      	ldrb	r3, [r7, #23]
 8007c6a:	2b04      	cmp	r3, #4
 8007c6c:	d127      	bne.n	8007cbe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007c6e:	7afb      	ldrb	r3, [r7, #11]
 8007c70:	f003 0304 	and.w	r3, r3, #4
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d122      	bne.n	8007cbe <follow_path+0xd2>
 8007c78:	2305      	movs	r3, #5
 8007c7a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007c7c:	e01f      	b.n	8007cbe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007c7e:	7afb      	ldrb	r3, [r7, #11]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d11c      	bne.n	8007cc2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007c88:	693b      	ldr	r3, [r7, #16]
 8007c8a:	799b      	ldrb	r3, [r3, #6]
 8007c8c:	f003 0310 	and.w	r3, r3, #16
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d102      	bne.n	8007c9a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007c94:	2305      	movs	r3, #5
 8007c96:	75fb      	strb	r3, [r7, #23]
 8007c98:	e014      	b.n	8007cc4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ca8:	4413      	add	r3, r2
 8007caa:	4619      	mov	r1, r3
 8007cac:	68f8      	ldr	r0, [r7, #12]
 8007cae:	f7ff f832 	bl	8006d16 <ld_clust>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007cb8:	e7c0      	b.n	8007c3c <follow_path+0x50>
			if (res != FR_OK) break;
 8007cba:	bf00      	nop
 8007cbc:	e002      	b.n	8007cc4 <follow_path+0xd8>
				break;
 8007cbe:	bf00      	nop
 8007cc0:	e000      	b.n	8007cc4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007cc2:	bf00      	nop
			}
		}
	}

	return res;
 8007cc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	3718      	adds	r7, #24
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007cce:	b480      	push	{r7}
 8007cd0:	b087      	sub	sp, #28
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007cda:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d031      	beq.n	8007d48 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	617b      	str	r3, [r7, #20]
 8007cea:	e002      	b.n	8007cf2 <get_ldnumber+0x24>
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	3301      	adds	r3, #1
 8007cf0:	617b      	str	r3, [r7, #20]
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	2b1f      	cmp	r3, #31
 8007cf8:	d903      	bls.n	8007d02 <get_ldnumber+0x34>
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	2b3a      	cmp	r3, #58	; 0x3a
 8007d00:	d1f4      	bne.n	8007cec <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b3a      	cmp	r3, #58	; 0x3a
 8007d08:	d11c      	bne.n	8007d44 <get_ldnumber+0x76>
			tp = *path;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	1c5a      	adds	r2, r3, #1
 8007d14:	60fa      	str	r2, [r7, #12]
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	3b30      	subs	r3, #48	; 0x30
 8007d1a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007d1c:	68bb      	ldr	r3, [r7, #8]
 8007d1e:	2b09      	cmp	r3, #9
 8007d20:	d80e      	bhi.n	8007d40 <get_ldnumber+0x72>
 8007d22:	68fa      	ldr	r2, [r7, #12]
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d10a      	bne.n	8007d40 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007d2a:	68bb      	ldr	r3, [r7, #8]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d107      	bne.n	8007d40 <get_ldnumber+0x72>
					vol = (int)i;
 8007d30:	68bb      	ldr	r3, [r7, #8]
 8007d32:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	3301      	adds	r3, #1
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	697a      	ldr	r2, [r7, #20]
 8007d3e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	e002      	b.n	8007d4a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007d44:	2300      	movs	r3, #0
 8007d46:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007d48:	693b      	ldr	r3, [r7, #16]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	371c      	adds	r7, #28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
	...

08007d58 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b082      	sub	sp, #8
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	70da      	strb	r2, [r3, #3]
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d6e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f7fe fad0 	bl	8006318 <move_window>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <check_fs+0x2a>
 8007d7e:	2304      	movs	r3, #4
 8007d80:	e038      	b.n	8007df4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	3334      	adds	r3, #52	; 0x34
 8007d86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe f814 	bl	8005db8 <ld_word>
 8007d90:	4603      	mov	r3, r0
 8007d92:	461a      	mov	r2, r3
 8007d94:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007d98:	429a      	cmp	r2, r3
 8007d9a:	d001      	beq.n	8007da0 <check_fs+0x48>
 8007d9c:	2303      	movs	r3, #3
 8007d9e:	e029      	b.n	8007df4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007da6:	2be9      	cmp	r3, #233	; 0xe9
 8007da8:	d009      	beq.n	8007dbe <check_fs+0x66>
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007db0:	2beb      	cmp	r3, #235	; 0xeb
 8007db2:	d11e      	bne.n	8007df2 <check_fs+0x9a>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007dba:	2b90      	cmp	r3, #144	; 0x90
 8007dbc:	d119      	bne.n	8007df2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	3334      	adds	r3, #52	; 0x34
 8007dc2:	3336      	adds	r3, #54	; 0x36
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fe f80f 	bl	8005de8 <ld_dword>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007dd0:	4a0a      	ldr	r2, [pc, #40]	; (8007dfc <check_fs+0xa4>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d101      	bne.n	8007dda <check_fs+0x82>
 8007dd6:	2300      	movs	r3, #0
 8007dd8:	e00c      	b.n	8007df4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	3334      	adds	r3, #52	; 0x34
 8007dde:	3352      	adds	r3, #82	; 0x52
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe f801 	bl	8005de8 <ld_dword>
 8007de6:	4602      	mov	r2, r0
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <check_fs+0xa8>)
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d101      	bne.n	8007df2 <check_fs+0x9a>
 8007dee:	2300      	movs	r3, #0
 8007df0:	e000      	b.n	8007df4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007df2:	2302      	movs	r3, #2
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3708      	adds	r7, #8
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}
 8007dfc:	00544146 	.word	0x00544146
 8007e00:	33544146 	.word	0x33544146

08007e04 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b096      	sub	sp, #88	; 0x58
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7ff ff58 	bl	8007cce <get_ldnumber>
 8007e1e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	da01      	bge.n	8007e2a <find_volume+0x26>
 8007e26:	230b      	movs	r3, #11
 8007e28:	e22e      	b.n	8008288 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007e2a:	4aa8      	ldr	r2, [pc, #672]	; (80080cc <find_volume+0x2c8>)
 8007e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e32:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d101      	bne.n	8007e3e <find_volume+0x3a>
 8007e3a:	230c      	movs	r3, #12
 8007e3c:	e224      	b.n	8008288 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e42:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007e44:	79fb      	ldrb	r3, [r7, #7]
 8007e46:	f023 0301 	bic.w	r3, r3, #1
 8007e4a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e4e:	781b      	ldrb	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d01a      	beq.n	8007e8a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007e54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e56:	785b      	ldrb	r3, [r3, #1]
 8007e58:	4618      	mov	r0, r3
 8007e5a:	f7fd ff0f 	bl	8005c7c <disk_status>
 8007e5e:	4603      	mov	r3, r0
 8007e60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007e64:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e68:	f003 0301 	and.w	r3, r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10c      	bne.n	8007e8a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007e70:	79fb      	ldrb	r3, [r7, #7]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d007      	beq.n	8007e86 <find_volume+0x82>
 8007e76:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e7a:	f003 0304 	and.w	r3, r3, #4
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007e82:	230a      	movs	r3, #10
 8007e84:	e200      	b.n	8008288 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007e86:	2300      	movs	r3, #0
 8007e88:	e1fe      	b.n	8008288 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007e8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8c:	2200      	movs	r2, #0
 8007e8e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007e90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e92:	b2da      	uxtb	r2, r3
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9a:	785b      	ldrb	r3, [r3, #1]
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7fd ff07 	bl	8005cb0 <disk_initialize>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007ea8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d001      	beq.n	8007eb8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007eb4:	2303      	movs	r3, #3
 8007eb6:	e1e7      	b.n	8008288 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007eb8:	79fb      	ldrb	r3, [r7, #7]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d007      	beq.n	8007ece <find_volume+0xca>
 8007ebe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ec2:	f003 0304 	and.w	r3, r3, #4
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d001      	beq.n	8007ece <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007eca:	230a      	movs	r3, #10
 8007ecc:	e1dc      	b.n	8008288 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007ed2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ed4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007ed6:	f7ff ff3f 	bl	8007d58 <check_fs>
 8007eda:	4603      	mov	r3, r0
 8007edc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007ee0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d14b      	bne.n	8007f80 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007ee8:	2300      	movs	r3, #0
 8007eea:	643b      	str	r3, [r7, #64]	; 0x40
 8007eec:	e01f      	b.n	8007f2e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007ef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ef6:	011b      	lsls	r3, r3, #4
 8007ef8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007efc:	4413      	add	r3, r2
 8007efe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f02:	3304      	adds	r3, #4
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d006      	beq.n	8007f18 <find_volume+0x114>
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f0c:	3308      	adds	r3, #8
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7fd ff6a 	bl	8005de8 <ld_dword>
 8007f14:	4602      	mov	r2, r0
 8007f16:	e000      	b.n	8007f1a <find_volume+0x116>
 8007f18:	2200      	movs	r2, #0
 8007f1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007f22:	440b      	add	r3, r1
 8007f24:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8007f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d9dc      	bls.n	8007eee <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007f34:	2300      	movs	r3, #0
 8007f36:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007f38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d002      	beq.n	8007f44 <find_volume+0x140>
 8007f3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f40:	3b01      	subs	r3, #1
 8007f42:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007f44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f46:	009b      	lsls	r3, r3, #2
 8007f48:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007f4c:	4413      	add	r3, r2
 8007f4e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007f52:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d005      	beq.n	8007f66 <find_volume+0x162>
 8007f5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f5c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f5e:	f7ff fefb 	bl	8007d58 <check_fs>
 8007f62:	4603      	mov	r3, r0
 8007f64:	e000      	b.n	8007f68 <find_volume+0x164>
 8007f66:	2303      	movs	r3, #3
 8007f68:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007f6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d905      	bls.n	8007f80 <find_volume+0x17c>
 8007f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f76:	3301      	adds	r3, #1
 8007f78:	643b      	str	r3, [r7, #64]	; 0x40
 8007f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f7c:	2b03      	cmp	r3, #3
 8007f7e:	d9e1      	bls.n	8007f44 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007f80:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f84:	2b04      	cmp	r3, #4
 8007f86:	d101      	bne.n	8007f8c <find_volume+0x188>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	e17d      	b.n	8008288 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007f8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f90:	2b01      	cmp	r3, #1
 8007f92:	d901      	bls.n	8007f98 <find_volume+0x194>
 8007f94:	230d      	movs	r3, #13
 8007f96:	e177      	b.n	8008288 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9a:	3334      	adds	r3, #52	; 0x34
 8007f9c:	330b      	adds	r3, #11
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f7fd ff0a 	bl	8005db8 <ld_word>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007faa:	d001      	beq.n	8007fb0 <find_volume+0x1ac>
 8007fac:	230d      	movs	r3, #13
 8007fae:	e16b      	b.n	8008288 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	3334      	adds	r3, #52	; 0x34
 8007fb4:	3316      	adds	r3, #22
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f7fd fefe 	bl	8005db8 <ld_word>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007fc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d106      	bne.n	8007fd4 <find_volume+0x1d0>
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc8:	3334      	adds	r3, #52	; 0x34
 8007fca:	3324      	adds	r3, #36	; 0x24
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f7fd ff0b 	bl	8005de8 <ld_dword>
 8007fd2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007fd8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fdc:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	789b      	ldrb	r3, [r3, #2]
 8007fe8:	2b01      	cmp	r3, #1
 8007fea:	d005      	beq.n	8007ff8 <find_volume+0x1f4>
 8007fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fee:	789b      	ldrb	r3, [r3, #2]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	d001      	beq.n	8007ff8 <find_volume+0x1f4>
 8007ff4:	230d      	movs	r3, #13
 8007ff6:	e147      	b.n	8008288 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffa:	789b      	ldrb	r3, [r3, #2]
 8007ffc:	461a      	mov	r2, r3
 8007ffe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008000:	fb02 f303 	mul.w	r3, r2, r3
 8008004:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008008:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800800c:	b29a      	uxth	r2, r3
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008014:	895b      	ldrh	r3, [r3, #10]
 8008016:	2b00      	cmp	r3, #0
 8008018:	d008      	beq.n	800802c <find_volume+0x228>
 800801a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801c:	895b      	ldrh	r3, [r3, #10]
 800801e:	461a      	mov	r2, r3
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	895b      	ldrh	r3, [r3, #10]
 8008024:	3b01      	subs	r3, #1
 8008026:	4013      	ands	r3, r2
 8008028:	2b00      	cmp	r3, #0
 800802a:	d001      	beq.n	8008030 <find_volume+0x22c>
 800802c:	230d      	movs	r3, #13
 800802e:	e12b      	b.n	8008288 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008032:	3334      	adds	r3, #52	; 0x34
 8008034:	3311      	adds	r3, #17
 8008036:	4618      	mov	r0, r3
 8008038:	f7fd febe 	bl	8005db8 <ld_word>
 800803c:	4603      	mov	r3, r0
 800803e:	461a      	mov	r2, r3
 8008040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008042:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	891b      	ldrh	r3, [r3, #8]
 8008048:	f003 030f 	and.w	r3, r3, #15
 800804c:	b29b      	uxth	r3, r3
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <find_volume+0x252>
 8008052:	230d      	movs	r3, #13
 8008054:	e118      	b.n	8008288 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	3334      	adds	r3, #52	; 0x34
 800805a:	3313      	adds	r3, #19
 800805c:	4618      	mov	r0, r3
 800805e:	f7fd feab 	bl	8005db8 <ld_word>
 8008062:	4603      	mov	r3, r0
 8008064:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008068:	2b00      	cmp	r3, #0
 800806a:	d106      	bne.n	800807a <find_volume+0x276>
 800806c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806e:	3334      	adds	r3, #52	; 0x34
 8008070:	3320      	adds	r3, #32
 8008072:	4618      	mov	r0, r3
 8008074:	f7fd feb8 	bl	8005de8 <ld_dword>
 8008078:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800807a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807c:	3334      	adds	r3, #52	; 0x34
 800807e:	330e      	adds	r3, #14
 8008080:	4618      	mov	r0, r3
 8008082:	f7fd fe99 	bl	8005db8 <ld_word>
 8008086:	4603      	mov	r3, r0
 8008088:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800808a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <find_volume+0x290>
 8008090:	230d      	movs	r3, #13
 8008092:	e0f9      	b.n	8008288 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008094:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008098:	4413      	add	r3, r2
 800809a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800809c:	8912      	ldrh	r2, [r2, #8]
 800809e:	0912      	lsrs	r2, r2, #4
 80080a0:	b292      	uxth	r2, r2
 80080a2:	4413      	add	r3, r2
 80080a4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80080a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d201      	bcs.n	80080b2 <find_volume+0x2ae>
 80080ae:	230d      	movs	r3, #13
 80080b0:	e0ea      	b.n	8008288 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80080b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080ba:	8952      	ldrh	r2, [r2, #10]
 80080bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80080c0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80080c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d103      	bne.n	80080d0 <find_volume+0x2cc>
 80080c8:	230d      	movs	r3, #13
 80080ca:	e0dd      	b.n	8008288 <find_volume+0x484>
 80080cc:	200002d0 	.word	0x200002d0
		fmt = FS_FAT32;
 80080d0:	2303      	movs	r3, #3
 80080d2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80080d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80080dc:	4293      	cmp	r3, r2
 80080de:	d802      	bhi.n	80080e6 <find_volume+0x2e2>
 80080e0:	2302      	movs	r3, #2
 80080e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80080e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e8:	f640 72f5 	movw	r2, #4085	; 0xff5
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d802      	bhi.n	80080f6 <find_volume+0x2f2>
 80080f0:	2301      	movs	r3, #1
 80080f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	1c9a      	adds	r2, r3, #2
 80080fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fc:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008102:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008104:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008108:	441a      	add	r2, r3
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800810e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008112:	441a      	add	r2, r3
 8008114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008116:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008118:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800811c:	2b03      	cmp	r3, #3
 800811e:	d11e      	bne.n	800815e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	3334      	adds	r3, #52	; 0x34
 8008124:	332a      	adds	r3, #42	; 0x2a
 8008126:	4618      	mov	r0, r3
 8008128:	f7fd fe46 	bl	8005db8 <ld_word>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d001      	beq.n	8008136 <find_volume+0x332>
 8008132:	230d      	movs	r3, #13
 8008134:	e0a8      	b.n	8008288 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	891b      	ldrh	r3, [r3, #8]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d001      	beq.n	8008142 <find_volume+0x33e>
 800813e:	230d      	movs	r3, #13
 8008140:	e0a2      	b.n	8008288 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008144:	3334      	adds	r3, #52	; 0x34
 8008146:	332c      	adds	r3, #44	; 0x2c
 8008148:	4618      	mov	r0, r3
 800814a:	f7fd fe4d 	bl	8005de8 <ld_dword>
 800814e:	4602      	mov	r2, r0
 8008150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008152:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	009b      	lsls	r3, r3, #2
 800815a:	647b      	str	r3, [r7, #68]	; 0x44
 800815c:	e01f      	b.n	800819e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800815e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008160:	891b      	ldrh	r3, [r3, #8]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d101      	bne.n	800816a <find_volume+0x366>
 8008166:	230d      	movs	r3, #13
 8008168:	e08e      	b.n	8008288 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800816e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008170:	441a      	add	r2, r3
 8008172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008174:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800817a:	2b02      	cmp	r3, #2
 800817c:	d103      	bne.n	8008186 <find_volume+0x382>
 800817e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008180:	699b      	ldr	r3, [r3, #24]
 8008182:	005b      	lsls	r3, r3, #1
 8008184:	e00a      	b.n	800819c <find_volume+0x398>
 8008186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008188:	699a      	ldr	r2, [r3, #24]
 800818a:	4613      	mov	r3, r2
 800818c:	005b      	lsls	r3, r3, #1
 800818e:	4413      	add	r3, r2
 8008190:	085a      	lsrs	r2, r3, #1
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	699b      	ldr	r3, [r3, #24]
 8008196:	f003 0301 	and.w	r3, r3, #1
 800819a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800819c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	69da      	ldr	r2, [r3, #28]
 80081a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081a4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80081a8:	0a5b      	lsrs	r3, r3, #9
 80081aa:	429a      	cmp	r2, r3
 80081ac:	d201      	bcs.n	80081b2 <find_volume+0x3ae>
 80081ae:	230d      	movs	r3, #13
 80081b0:	e06a      	b.n	8008288 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	f04f 32ff 	mov.w	r2, #4294967295
 80081b8:	615a      	str	r2, [r3, #20]
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	695a      	ldr	r2, [r3, #20]
 80081be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80081c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c4:	2280      	movs	r2, #128	; 0x80
 80081c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80081c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081cc:	2b03      	cmp	r3, #3
 80081ce:	d149      	bne.n	8008264 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	3334      	adds	r3, #52	; 0x34
 80081d4:	3330      	adds	r3, #48	; 0x30
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fd fdee 	bl	8005db8 <ld_word>
 80081dc:	4603      	mov	r3, r0
 80081de:	2b01      	cmp	r3, #1
 80081e0:	d140      	bne.n	8008264 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80081e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081e4:	3301      	adds	r3, #1
 80081e6:	4619      	mov	r1, r3
 80081e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081ea:	f7fe f895 	bl	8006318 <move_window>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d137      	bne.n	8008264 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80081f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f6:	2200      	movs	r2, #0
 80081f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80081fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081fc:	3334      	adds	r3, #52	; 0x34
 80081fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008202:	4618      	mov	r0, r3
 8008204:	f7fd fdd8 	bl	8005db8 <ld_word>
 8008208:	4603      	mov	r3, r0
 800820a:	461a      	mov	r2, r3
 800820c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008210:	429a      	cmp	r2, r3
 8008212:	d127      	bne.n	8008264 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008216:	3334      	adds	r3, #52	; 0x34
 8008218:	4618      	mov	r0, r3
 800821a:	f7fd fde5 	bl	8005de8 <ld_dword>
 800821e:	4602      	mov	r2, r0
 8008220:	4b1b      	ldr	r3, [pc, #108]	; (8008290 <find_volume+0x48c>)
 8008222:	429a      	cmp	r2, r3
 8008224:	d11e      	bne.n	8008264 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008228:	3334      	adds	r3, #52	; 0x34
 800822a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800822e:	4618      	mov	r0, r3
 8008230:	f7fd fdda 	bl	8005de8 <ld_dword>
 8008234:	4602      	mov	r2, r0
 8008236:	4b17      	ldr	r3, [pc, #92]	; (8008294 <find_volume+0x490>)
 8008238:	429a      	cmp	r2, r3
 800823a:	d113      	bne.n	8008264 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800823c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823e:	3334      	adds	r3, #52	; 0x34
 8008240:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008244:	4618      	mov	r0, r3
 8008246:	f7fd fdcf 	bl	8005de8 <ld_dword>
 800824a:	4602      	mov	r2, r0
 800824c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008252:	3334      	adds	r3, #52	; 0x34
 8008254:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008258:	4618      	mov	r0, r3
 800825a:	f7fd fdc5 	bl	8005de8 <ld_dword>
 800825e:	4602      	mov	r2, r0
 8008260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008262:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008266:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800826a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800826c:	4b0a      	ldr	r3, [pc, #40]	; (8008298 <find_volume+0x494>)
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	3301      	adds	r3, #1
 8008272:	b29a      	uxth	r2, r3
 8008274:	4b08      	ldr	r3, [pc, #32]	; (8008298 <find_volume+0x494>)
 8008276:	801a      	strh	r2, [r3, #0]
 8008278:	4b07      	ldr	r3, [pc, #28]	; (8008298 <find_volume+0x494>)
 800827a:	881a      	ldrh	r2, [r3, #0]
 800827c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008280:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008282:	f7fd ffe1 	bl	8006248 <clear_lock>
#endif
	return FR_OK;
 8008286:	2300      	movs	r3, #0
}
 8008288:	4618      	mov	r0, r3
 800828a:	3758      	adds	r7, #88	; 0x58
 800828c:	46bd      	mov	sp, r7
 800828e:	bd80      	pop	{r7, pc}
 8008290:	41615252 	.word	0x41615252
 8008294:	61417272 	.word	0x61417272
 8008298:	200002d4 	.word	0x200002d4

0800829c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800829c:	b580      	push	{r7, lr}
 800829e:	b084      	sub	sp, #16
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80082a6:	2309      	movs	r3, #9
 80082a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d01c      	beq.n	80082ea <validate+0x4e>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d018      	beq.n	80082ea <validate+0x4e>
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	781b      	ldrb	r3, [r3, #0]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d013      	beq.n	80082ea <validate+0x4e>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	889a      	ldrh	r2, [r3, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	88db      	ldrh	r3, [r3, #6]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d10c      	bne.n	80082ea <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	785b      	ldrb	r3, [r3, #1]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f7fd fcd0 	bl	8005c7c <disk_status>
 80082dc:	4603      	mov	r3, r0
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d101      	bne.n	80082ea <validate+0x4e>
			res = FR_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80082ea:	7bfb      	ldrb	r3, [r7, #15]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d102      	bne.n	80082f6 <validate+0x5a>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	e000      	b.n	80082f8 <validate+0x5c>
 80082f6:	2300      	movs	r3, #0
 80082f8:	683a      	ldr	r2, [r7, #0]
 80082fa:	6013      	str	r3, [r2, #0]
	return res;
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3710      	adds	r7, #16
 8008302:	46bd      	mov	sp, r7
 8008304:	bd80      	pop	{r7, pc}
	...

08008308 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b088      	sub	sp, #32
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	4613      	mov	r3, r2
 8008314:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800831a:	f107 0310 	add.w	r3, r7, #16
 800831e:	4618      	mov	r0, r3
 8008320:	f7ff fcd5 	bl	8007cce <get_ldnumber>
 8008324:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	2b00      	cmp	r3, #0
 800832a:	da01      	bge.n	8008330 <f_mount+0x28>
 800832c:	230b      	movs	r3, #11
 800832e:	e02b      	b.n	8008388 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008330:	4a17      	ldr	r2, [pc, #92]	; (8008390 <f_mount+0x88>)
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008338:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d005      	beq.n	800834c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008340:	69b8      	ldr	r0, [r7, #24]
 8008342:	f7fd ff81 	bl	8006248 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008346:	69bb      	ldr	r3, [r7, #24]
 8008348:	2200      	movs	r2, #0
 800834a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d002      	beq.n	8008358 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008358:	68fa      	ldr	r2, [r7, #12]
 800835a:	490d      	ldr	r1, [pc, #52]	; (8008390 <f_mount+0x88>)
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d002      	beq.n	800836e <f_mount+0x66>
 8008368:	79fb      	ldrb	r3, [r7, #7]
 800836a:	2b01      	cmp	r3, #1
 800836c:	d001      	beq.n	8008372 <f_mount+0x6a>
 800836e:	2300      	movs	r3, #0
 8008370:	e00a      	b.n	8008388 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008372:	f107 010c 	add.w	r1, r7, #12
 8008376:	f107 0308 	add.w	r3, r7, #8
 800837a:	2200      	movs	r2, #0
 800837c:	4618      	mov	r0, r3
 800837e:	f7ff fd41 	bl	8007e04 <find_volume>
 8008382:	4603      	mov	r3, r0
 8008384:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008386:	7dfb      	ldrb	r3, [r7, #23]
}
 8008388:	4618      	mov	r0, r3
 800838a:	3720      	adds	r7, #32
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}
 8008390:	200002d0 	.word	0x200002d0

08008394 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800839a:	af00      	add	r7, sp, #0
 800839c:	f107 030c 	add.w	r3, r7, #12
 80083a0:	6018      	str	r0, [r3, #0]
 80083a2:	f107 0308 	add.w	r3, r7, #8
 80083a6:	6019      	str	r1, [r3, #0]
 80083a8:	1dfb      	adds	r3, r7, #7
 80083aa:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80083ac:	f107 030c 	add.w	r3, r7, #12
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d101      	bne.n	80083ba <f_open+0x26>
 80083b6:	2309      	movs	r3, #9
 80083b8:	e231      	b.n	800881e <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80083ba:	1dfb      	adds	r3, r7, #7
 80083bc:	1dfa      	adds	r2, r7, #7
 80083be:	7812      	ldrb	r2, [r2, #0]
 80083c0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80083c4:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80083c6:	1dfb      	adds	r3, r7, #7
 80083c8:	781a      	ldrb	r2, [r3, #0]
 80083ca:	f507 7105 	add.w	r1, r7, #532	; 0x214
 80083ce:	f107 0308 	add.w	r3, r7, #8
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7ff fd16 	bl	8007e04 <find_volume>
 80083d8:	4603      	mov	r3, r0
 80083da:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 80083de:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f040 8210 	bne.w	8008808 <f_open+0x474>
		dj.obj.fs = fs;
 80083e8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80083ec:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80083f0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80083f4:	f107 0214 	add.w	r2, r7, #20
 80083f8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80083fa:	f107 0308 	add.w	r3, r7, #8
 80083fe:	681a      	ldr	r2, [r3, #0]
 8008400:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008404:	4611      	mov	r1, r2
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff fbf0 	bl	8007bec <follow_path>
 800840c:	4603      	mov	r3, r0
 800840e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008412:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008416:	2b00      	cmp	r3, #0
 8008418:	d11b      	bne.n	8008452 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800841a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800841e:	b25b      	sxtb	r3, r3
 8008420:	2b00      	cmp	r3, #0
 8008422:	da03      	bge.n	800842c <f_open+0x98>
				res = FR_INVALID_NAME;
 8008424:	2306      	movs	r3, #6
 8008426:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800842a:	e012      	b.n	8008452 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800842c:	1dfb      	adds	r3, r7, #7
 800842e:	781b      	ldrb	r3, [r3, #0]
 8008430:	f023 0301 	bic.w	r3, r3, #1
 8008434:	2b00      	cmp	r3, #0
 8008436:	bf14      	ite	ne
 8008438:	2301      	movne	r3, #1
 800843a:	2300      	moveq	r3, #0
 800843c:	b2db      	uxtb	r3, r3
 800843e:	461a      	mov	r2, r3
 8008440:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008444:	4611      	mov	r1, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f7fd fdb6 	bl	8005fb8 <chk_lock>
 800844c:	4603      	mov	r3, r0
 800844e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008452:	1dfb      	adds	r3, r7, #7
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	f003 031c 	and.w	r3, r3, #28
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 809b 	beq.w	8008596 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8008460:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008464:	2b00      	cmp	r3, #0
 8008466:	d019      	beq.n	800849c <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008468:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800846c:	2b04      	cmp	r3, #4
 800846e:	d10e      	bne.n	800848e <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008470:	f7fd fdfe 	bl	8006070 <enq_lock>
 8008474:	4603      	mov	r3, r0
 8008476:	2b00      	cmp	r3, #0
 8008478:	d006      	beq.n	8008488 <f_open+0xf4>
 800847a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800847e:	4618      	mov	r0, r3
 8008480:	f7fe ffdc 	bl	800743c <dir_register>
 8008484:	4603      	mov	r3, r0
 8008486:	e000      	b.n	800848a <f_open+0xf6>
 8008488:	2312      	movs	r3, #18
 800848a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800848e:	1dfb      	adds	r3, r7, #7
 8008490:	1dfa      	adds	r2, r7, #7
 8008492:	7812      	ldrb	r2, [r2, #0]
 8008494:	f042 0208 	orr.w	r2, r2, #8
 8008498:	701a      	strb	r2, [r3, #0]
 800849a:	e012      	b.n	80084c2 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800849c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80084a0:	f003 0311 	and.w	r3, r3, #17
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d003      	beq.n	80084b0 <f_open+0x11c>
					res = FR_DENIED;
 80084a8:	2307      	movs	r3, #7
 80084aa:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80084ae:	e008      	b.n	80084c2 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80084b0:	1dfb      	adds	r3, r7, #7
 80084b2:	781b      	ldrb	r3, [r3, #0]
 80084b4:	f003 0304 	and.w	r3, r3, #4
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d002      	beq.n	80084c2 <f_open+0x12e>
 80084bc:	2308      	movs	r3, #8
 80084be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80084c2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	f040 8082 	bne.w	80085d0 <f_open+0x23c>
 80084cc:	1dfb      	adds	r3, r7, #7
 80084ce:	781b      	ldrb	r3, [r3, #0]
 80084d0:	f003 0308 	and.w	r3, r3, #8
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d07b      	beq.n	80085d0 <f_open+0x23c>
				dw = GET_FATTIME();
 80084d8:	f7fd fa56 	bl	8005988 <get_fattime>
 80084dc:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80084e0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80084e4:	330e      	adds	r3, #14
 80084e6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fd fcba 	bl	8005e64 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80084f0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80084f4:	3316      	adds	r3, #22
 80084f6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fd fcb2 	bl	8005e64 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008500:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008504:	330b      	adds	r3, #11
 8008506:	2220      	movs	r2, #32
 8008508:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800850a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800850e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008512:	4611      	mov	r1, r2
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe fbfe 	bl	8006d16 <ld_clust>
 800851a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800851e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008522:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8008526:	2200      	movs	r2, #0
 8008528:	4618      	mov	r0, r3
 800852a:	f7fe fc13 	bl	8006d54 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800852e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008532:	331c      	adds	r3, #28
 8008534:	2100      	movs	r1, #0
 8008536:	4618      	mov	r0, r3
 8008538:	f7fd fc94 	bl	8005e64 <st_dword>
					fs->wflag = 1;
 800853c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008540:	2201      	movs	r2, #1
 8008542:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008544:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008548:	2b00      	cmp	r3, #0
 800854a:	d041      	beq.n	80085d0 <f_open+0x23c>
						dw = fs->winsect;
 800854c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008552:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8008556:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800855a:	2200      	movs	r2, #0
 800855c:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8008560:	4618      	mov	r0, r3
 8008562:	f7fe f920 	bl	80067a6 <remove_chain>
 8008566:	4603      	mov	r3, r0
 8008568:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800856c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008570:	2b00      	cmp	r3, #0
 8008572:	d12d      	bne.n	80085d0 <f_open+0x23c>
							res = move_window(fs, dw);
 8008574:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008578:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800857c:	4618      	mov	r0, r3
 800857e:	f7fd fecb 	bl	8006318 <move_window>
 8008582:	4603      	mov	r3, r0
 8008584:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008588:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800858c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008590:	3a01      	subs	r2, #1
 8008592:	611a      	str	r2, [r3, #16]
 8008594:	e01c      	b.n	80085d0 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008596:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800859a:	2b00      	cmp	r3, #0
 800859c:	d118      	bne.n	80085d0 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800859e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80085a2:	f003 0310 	and.w	r3, r3, #16
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d003      	beq.n	80085b2 <f_open+0x21e>
					res = FR_NO_FILE;
 80085aa:	2304      	movs	r3, #4
 80085ac:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80085b0:	e00e      	b.n	80085d0 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80085b2:	1dfb      	adds	r3, r7, #7
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d008      	beq.n	80085d0 <f_open+0x23c>
 80085be:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d002      	beq.n	80085d0 <f_open+0x23c>
						res = FR_DENIED;
 80085ca:	2307      	movs	r3, #7
 80085cc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 80085d0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d136      	bne.n	8008646 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80085d8:	1dfb      	adds	r3, r7, #7
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	f003 0308 	and.w	r3, r3, #8
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d005      	beq.n	80085f0 <f_open+0x25c>
				mode |= FA_MODIFIED;
 80085e4:	1dfb      	adds	r3, r7, #7
 80085e6:	1dfa      	adds	r2, r7, #7
 80085e8:	7812      	ldrb	r2, [r2, #0]
 80085ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80085ee:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80085f0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80085f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085f6:	f107 030c 	add.w	r3, r7, #12
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80085fe:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008602:	f107 030c 	add.w	r3, r7, #12
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800860a:	1dfb      	adds	r3, r7, #7
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	f023 0301 	bic.w	r3, r3, #1
 8008612:	2b00      	cmp	r3, #0
 8008614:	bf14      	ite	ne
 8008616:	2301      	movne	r3, #1
 8008618:	2300      	moveq	r3, #0
 800861a:	b2db      	uxtb	r3, r3
 800861c:	461a      	mov	r2, r3
 800861e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008622:	4611      	mov	r1, r2
 8008624:	4618      	mov	r0, r3
 8008626:	f7fd fd45 	bl	80060b4 <inc_lock>
 800862a:	4602      	mov	r2, r0
 800862c:	f107 030c 	add.w	r3, r7, #12
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008634:	f107 030c 	add.w	r3, r7, #12
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	691b      	ldr	r3, [r3, #16]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d102      	bne.n	8008646 <f_open+0x2b2>
 8008640:	2302      	movs	r3, #2
 8008642:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008646:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800864a:	2b00      	cmp	r3, #0
 800864c:	f040 80dc 	bne.w	8008808 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008650:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008654:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008658:	4611      	mov	r1, r2
 800865a:	4618      	mov	r0, r3
 800865c:	f7fe fb5b 	bl	8006d16 <ld_clust>
 8008660:	4602      	mov	r2, r0
 8008662:	f107 030c 	add.w	r3, r7, #12
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800866a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800866e:	331c      	adds	r3, #28
 8008670:	4618      	mov	r0, r3
 8008672:	f7fd fbb9 	bl	8005de8 <ld_dword>
 8008676:	4602      	mov	r2, r0
 8008678:	f107 030c 	add.w	r3, r7, #12
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008680:	f107 030c 	add.w	r3, r7, #12
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2200      	movs	r2, #0
 8008688:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800868a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800868e:	f107 030c 	add.w	r3, r7, #12
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008696:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800869a:	88da      	ldrh	r2, [r3, #6]
 800869c:	f107 030c 	add.w	r3, r7, #12
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80086a4:	f107 030c 	add.w	r3, r7, #12
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	1dfa      	adds	r2, r7, #7
 80086ac:	7812      	ldrb	r2, [r2, #0]
 80086ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80086b0:	f107 030c 	add.w	r3, r7, #12
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2200      	movs	r2, #0
 80086b8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80086ba:	f107 030c 	add.w	r3, r7, #12
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	2200      	movs	r2, #0
 80086c2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80086c4:	f107 030c 	add.w	r3, r7, #12
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	2200      	movs	r2, #0
 80086cc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80086ce:	f107 030c 	add.w	r3, r7, #12
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	3330      	adds	r3, #48	; 0x30
 80086d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80086da:	2100      	movs	r1, #0
 80086dc:	4618      	mov	r0, r3
 80086de:	f7fd fc0e 	bl	8005efe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80086e2:	1dfb      	adds	r3, r7, #7
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	f003 0320 	and.w	r3, r3, #32
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 808c 	beq.w	8008808 <f_open+0x474>
 80086f0:	f107 030c 	add.w	r3, r7, #12
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	68db      	ldr	r3, [r3, #12]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	f000 8085 	beq.w	8008808 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80086fe:	f107 030c 	add.w	r3, r7, #12
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68da      	ldr	r2, [r3, #12]
 8008706:	f107 030c 	add.w	r3, r7, #12
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800870e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008712:	895b      	ldrh	r3, [r3, #10]
 8008714:	025b      	lsls	r3, r3, #9
 8008716:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800871a:	f107 030c 	add.w	r3, r7, #12
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008726:	f107 030c 	add.w	r3, r7, #12
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8008732:	e01f      	b.n	8008774 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 8008734:	f107 030c 	add.w	r3, r7, #12
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800873e:	4618      	mov	r0, r3
 8008740:	f7fd fea5 	bl	800648e <get_fat>
 8008744:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8008748:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800874c:	2b01      	cmp	r3, #1
 800874e:	d802      	bhi.n	8008756 <f_open+0x3c2>
 8008750:	2302      	movs	r3, #2
 8008752:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008756:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800875a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800875e:	d102      	bne.n	8008766 <f_open+0x3d2>
 8008760:	2301      	movs	r3, #1
 8008762:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008766:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800876a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8008774:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008778:	2b00      	cmp	r3, #0
 800877a:	d105      	bne.n	8008788 <f_open+0x3f4>
 800877c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8008780:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008784:	429a      	cmp	r2, r3
 8008786:	d8d5      	bhi.n	8008734 <f_open+0x3a0>
				}
				fp->clust = clst;
 8008788:	f107 030c 	add.w	r3, r7, #12
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8008792:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008794:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008798:	2b00      	cmp	r3, #0
 800879a:	d135      	bne.n	8008808 <f_open+0x474>
 800879c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80087a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d02f      	beq.n	8008808 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80087a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80087ac:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fd fe4d 	bl	8006450 <clust2sect>
 80087b6:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 80087ba:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d103      	bne.n	80087ca <f_open+0x436>
						res = FR_INT_ERR;
 80087c2:	2302      	movs	r3, #2
 80087c4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80087c8:	e01e      	b.n	8008808 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80087ca:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80087ce:	0a5a      	lsrs	r2, r3, #9
 80087d0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087d4:	441a      	add	r2, r3
 80087d6:	f107 030c 	add.w	r3, r7, #12
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80087de:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80087e2:	7858      	ldrb	r0, [r3, #1]
 80087e4:	f107 030c 	add.w	r3, r7, #12
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80087ee:	f107 030c 	add.w	r3, r7, #12
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	6a1a      	ldr	r2, [r3, #32]
 80087f6:	2301      	movs	r3, #1
 80087f8:	f7fd fa80 	bl	8005cfc <disk_read>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <f_open+0x474>
 8008802:	2301      	movs	r3, #1
 8008804:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008808:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800880c:	2b00      	cmp	r3, #0
 800880e:	d004      	beq.n	800881a <f_open+0x486>
 8008810:	f107 030c 	add.w	r3, r7, #12
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	2200      	movs	r2, #0
 8008818:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800881a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800881e:	4618      	mov	r0, r3
 8008820:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8008824:	46bd      	mov	sp, r7
 8008826:	bd80      	pop	{r7, pc}

08008828 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b08c      	sub	sp, #48	; 0x30
 800882c:	af00      	add	r7, sp, #0
 800882e:	60f8      	str	r0, [r7, #12]
 8008830:	60b9      	str	r1, [r7, #8]
 8008832:	607a      	str	r2, [r7, #4]
 8008834:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008836:	68bb      	ldr	r3, [r7, #8]
 8008838:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2200      	movs	r2, #0
 800883e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	f107 0210 	add.w	r2, r7, #16
 8008846:	4611      	mov	r1, r2
 8008848:	4618      	mov	r0, r3
 800884a:	f7ff fd27 	bl	800829c <validate>
 800884e:	4603      	mov	r3, r0
 8008850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008854:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008858:	2b00      	cmp	r3, #0
 800885a:	d107      	bne.n	800886c <f_write+0x44>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	7d5b      	ldrb	r3, [r3, #21]
 8008860:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008864:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <f_write+0x4a>
 800886c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008870:	e14b      	b.n	8008b0a <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	7d1b      	ldrb	r3, [r3, #20]
 8008876:	f003 0302 	and.w	r3, r3, #2
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <f_write+0x5a>
 800887e:	2307      	movs	r3, #7
 8008880:	e143      	b.n	8008b0a <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	699a      	ldr	r2, [r3, #24]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	441a      	add	r2, r3
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	699b      	ldr	r3, [r3, #24]
 800888e:	429a      	cmp	r2, r3
 8008890:	f080 812d 	bcs.w	8008aee <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	699b      	ldr	r3, [r3, #24]
 8008898:	43db      	mvns	r3, r3
 800889a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800889c:	e127      	b.n	8008aee <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f040 80e3 	bne.w	8008a72 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	0a5b      	lsrs	r3, r3, #9
 80088b2:	693a      	ldr	r2, [r7, #16]
 80088b4:	8952      	ldrh	r2, [r2, #10]
 80088b6:	3a01      	subs	r2, #1
 80088b8:	4013      	ands	r3, r2
 80088ba:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80088bc:	69bb      	ldr	r3, [r7, #24]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d143      	bne.n	800894a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d10c      	bne.n	80088e4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80088d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d11a      	bne.n	800890c <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2100      	movs	r1, #0
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fd ffc8 	bl	8006870 <create_chain>
 80088e0:	62b8      	str	r0, [r7, #40]	; 0x28
 80088e2:	e013      	b.n	800890c <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d007      	beq.n	80088fc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	699b      	ldr	r3, [r3, #24]
 80088f0:	4619      	mov	r1, r3
 80088f2:	68f8      	ldr	r0, [r7, #12]
 80088f4:	f7fe f854 	bl	80069a0 <clmt_clust>
 80088f8:	62b8      	str	r0, [r7, #40]	; 0x28
 80088fa:	e007      	b.n	800890c <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	69db      	ldr	r3, [r3, #28]
 8008902:	4619      	mov	r1, r3
 8008904:	4610      	mov	r0, r2
 8008906:	f7fd ffb3 	bl	8006870 <create_chain>
 800890a:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800890c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800890e:	2b00      	cmp	r3, #0
 8008910:	f000 80f2 	beq.w	8008af8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008916:	2b01      	cmp	r3, #1
 8008918:	d104      	bne.n	8008924 <f_write+0xfc>
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2202      	movs	r2, #2
 800891e:	755a      	strb	r2, [r3, #21]
 8008920:	2302      	movs	r3, #2
 8008922:	e0f2      	b.n	8008b0a <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295
 800892a:	d104      	bne.n	8008936 <f_write+0x10e>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	2201      	movs	r2, #1
 8008930:	755a      	strb	r2, [r3, #21]
 8008932:	2301      	movs	r3, #1
 8008934:	e0e9      	b.n	8008b0a <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800893a:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d102      	bne.n	800894a <f_write+0x122>
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008948:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	7d1b      	ldrb	r3, [r3, #20]
 800894e:	b25b      	sxtb	r3, r3
 8008950:	2b00      	cmp	r3, #0
 8008952:	da18      	bge.n	8008986 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	7858      	ldrb	r0, [r3, #1]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a1a      	ldr	r2, [r3, #32]
 8008962:	2301      	movs	r3, #1
 8008964:	f7fd f9ea 	bl	8005d3c <disk_write>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d004      	beq.n	8008978 <f_write+0x150>
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	755a      	strb	r2, [r3, #21]
 8008974:	2301      	movs	r3, #1
 8008976:	e0c8      	b.n	8008b0a <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	7d1b      	ldrb	r3, [r3, #20]
 800897c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008980:	b2da      	uxtb	r2, r3
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008986:	693a      	ldr	r2, [r7, #16]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	4619      	mov	r1, r3
 800898e:	4610      	mov	r0, r2
 8008990:	f7fd fd5e 	bl	8006450 <clust2sect>
 8008994:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d104      	bne.n	80089a6 <f_write+0x17e>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2202      	movs	r2, #2
 80089a0:	755a      	strb	r2, [r3, #21]
 80089a2:	2302      	movs	r3, #2
 80089a4:	e0b1      	b.n	8008b0a <f_write+0x2e2>
			sect += csect;
 80089a6:	697a      	ldr	r2, [r7, #20]
 80089a8:	69bb      	ldr	r3, [r7, #24]
 80089aa:	4413      	add	r3, r2
 80089ac:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	0a5b      	lsrs	r3, r3, #9
 80089b2:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80089b4:	6a3b      	ldr	r3, [r7, #32]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d03c      	beq.n	8008a34 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80089ba:	69ba      	ldr	r2, [r7, #24]
 80089bc:	6a3b      	ldr	r3, [r7, #32]
 80089be:	4413      	add	r3, r2
 80089c0:	693a      	ldr	r2, [r7, #16]
 80089c2:	8952      	ldrh	r2, [r2, #10]
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d905      	bls.n	80089d4 <f_write+0x1ac>
					cc = fs->csize - csect;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	895b      	ldrh	r3, [r3, #10]
 80089cc:	461a      	mov	r2, r3
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	1ad3      	subs	r3, r2, r3
 80089d2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	7858      	ldrb	r0, [r3, #1]
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	69f9      	ldr	r1, [r7, #28]
 80089de:	f7fd f9ad 	bl	8005d3c <disk_write>
 80089e2:	4603      	mov	r3, r0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d004      	beq.n	80089f2 <f_write+0x1ca>
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	2201      	movs	r2, #1
 80089ec:	755a      	strb	r2, [r3, #21]
 80089ee:	2301      	movs	r3, #1
 80089f0:	e08b      	b.n	8008b0a <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	6a1a      	ldr	r2, [r3, #32]
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	6a3a      	ldr	r2, [r7, #32]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d915      	bls.n	8008a2c <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	6a1a      	ldr	r2, [r3, #32]
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	1ad3      	subs	r3, r2, r3
 8008a0e:	025b      	lsls	r3, r3, #9
 8008a10:	69fa      	ldr	r2, [r7, #28]
 8008a12:	4413      	add	r3, r2
 8008a14:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a18:	4619      	mov	r1, r3
 8008a1a:	f7fd fa4f 	bl	8005ebc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	7d1b      	ldrb	r3, [r3, #20]
 8008a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a26:	b2da      	uxtb	r2, r3
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008a2c:	6a3b      	ldr	r3, [r7, #32]
 8008a2e:	025b      	lsls	r3, r3, #9
 8008a30:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008a32:	e03f      	b.n	8008ab4 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	6a1b      	ldr	r3, [r3, #32]
 8008a38:	697a      	ldr	r2, [r7, #20]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d016      	beq.n	8008a6c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	699a      	ldr	r2, [r3, #24]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a46:	429a      	cmp	r2, r3
 8008a48:	d210      	bcs.n	8008a6c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	7858      	ldrb	r0, [r3, #1]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a54:	2301      	movs	r3, #1
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	f7fd f950 	bl	8005cfc <disk_read>
 8008a5c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d004      	beq.n	8008a6c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	2201      	movs	r2, #1
 8008a66:	755a      	strb	r2, [r3, #21]
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e04e      	b.n	8008b0a <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	697a      	ldr	r2, [r7, #20]
 8008a70:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a7a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008a7e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008a80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	429a      	cmp	r2, r3
 8008a86:	d901      	bls.n	8008a8c <f_write+0x264>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	699b      	ldr	r3, [r3, #24]
 8008a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a9a:	4413      	add	r3, r2
 8008a9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a9e:	69f9      	ldr	r1, [r7, #28]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f7fd fa0b 	bl	8005ebc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	7d1b      	ldrb	r3, [r3, #20]
 8008aaa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008aae:	b2da      	uxtb	r2, r3
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008ab4:	69fa      	ldr	r2, [r7, #28]
 8008ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ab8:	4413      	add	r3, r2
 8008aba:	61fb      	str	r3, [r7, #28]
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	699a      	ldr	r2, [r3, #24]
 8008ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac2:	441a      	add	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	619a      	str	r2, [r3, #24]
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	68da      	ldr	r2, [r3, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	429a      	cmp	r2, r3
 8008ad2:	bf38      	it	cc
 8008ad4:	461a      	movcc	r2, r3
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	60da      	str	r2, [r3, #12]
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ae0:	441a      	add	r2, r3
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	601a      	str	r2, [r3, #0]
 8008ae6:	687a      	ldr	r2, [r7, #4]
 8008ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	f47f aed4 	bne.w	800889e <f_write+0x76>
 8008af6:	e000      	b.n	8008afa <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008af8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	7d1b      	ldrb	r3, [r3, #20]
 8008afe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b02:	b2da      	uxtb	r2, r3
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008b08:	2300      	movs	r3, #0
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3730      	adds	r7, #48	; 0x30
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b086      	sub	sp, #24
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	f107 0208 	add.w	r2, r7, #8
 8008b20:	4611      	mov	r1, r2
 8008b22:	4618      	mov	r0, r3
 8008b24:	f7ff fbba 	bl	800829c <validate>
 8008b28:	4603      	mov	r3, r0
 8008b2a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b2c:	7dfb      	ldrb	r3, [r7, #23]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d168      	bne.n	8008c04 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	7d1b      	ldrb	r3, [r3, #20]
 8008b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d062      	beq.n	8008c04 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	7d1b      	ldrb	r3, [r3, #20]
 8008b42:	b25b      	sxtb	r3, r3
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	da15      	bge.n	8008b74 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	7858      	ldrb	r0, [r3, #1]
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6a1a      	ldr	r2, [r3, #32]
 8008b56:	2301      	movs	r3, #1
 8008b58:	f7fd f8f0 	bl	8005d3c <disk_write>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d001      	beq.n	8008b66 <f_sync+0x54>
 8008b62:	2301      	movs	r3, #1
 8008b64:	e04f      	b.n	8008c06 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	7d1b      	ldrb	r3, [r3, #20]
 8008b6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008b74:	f7fc ff08 	bl	8005988 <get_fattime>
 8008b78:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b80:	4619      	mov	r1, r3
 8008b82:	4610      	mov	r0, r2
 8008b84:	f7fd fbc8 	bl	8006318 <move_window>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008b8c:	7dfb      	ldrb	r3, [r7, #23]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d138      	bne.n	8008c04 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b96:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	330b      	adds	r3, #11
 8008b9c:	781a      	ldrb	r2, [r3, #0]
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	330b      	adds	r3, #11
 8008ba2:	f042 0220 	orr.w	r2, r2, #32
 8008ba6:	b2d2      	uxtb	r2, r2
 8008ba8:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6818      	ldr	r0, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	68f9      	ldr	r1, [r7, #12]
 8008bb6:	f7fe f8cd 	bl	8006d54 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	f103 021c 	add.w	r2, r3, #28
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	68db      	ldr	r3, [r3, #12]
 8008bc4:	4619      	mov	r1, r3
 8008bc6:	4610      	mov	r0, r2
 8008bc8:	f7fd f94c 	bl	8005e64 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	3316      	adds	r3, #22
 8008bd0:	6939      	ldr	r1, [r7, #16]
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	f7fd f946 	bl	8005e64 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	3312      	adds	r3, #18
 8008bdc:	2100      	movs	r1, #0
 8008bde:	4618      	mov	r0, r3
 8008be0:	f7fd f925 	bl	8005e2e <st_word>
					fs->wflag = 1;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2201      	movs	r2, #1
 8008be8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f7fd fbc1 	bl	8006374 <sync_fs>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	7d1b      	ldrb	r3, [r3, #20]
 8008bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008bfe:	b2da      	uxtb	r2, r3
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	3718      	adds	r7, #24
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff ff7b 	bl	8008b12 <f_sync>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c20:	7bfb      	ldrb	r3, [r7, #15]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d118      	bne.n	8008c58 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f107 0208 	add.w	r2, r7, #8
 8008c2c:	4611      	mov	r1, r2
 8008c2e:	4618      	mov	r0, r3
 8008c30:	f7ff fb34 	bl	800829c <validate>
 8008c34:	4603      	mov	r3, r0
 8008c36:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008c38:	7bfb      	ldrb	r3, [r7, #15]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10c      	bne.n	8008c58 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	691b      	ldr	r3, [r3, #16]
 8008c42:	4618      	mov	r0, r3
 8008c44:	f7fd fac4 	bl	80061d0 <dec_lock>
 8008c48:	4603      	mov	r3, r0
 8008c4a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008c4c:	7bfb      	ldrb	r3, [r7, #15]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d102      	bne.n	8008c58 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	2200      	movs	r2, #0
 8008c56:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	1d3b      	adds	r3, r7, #4
 8008c6c:	6018      	str	r0, [r3, #0]
 8008c6e:	463b      	mov	r3, r7
 8008c70:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008c72:	1d3b      	adds	r3, r7, #4
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d101      	bne.n	8008c7e <f_opendir+0x1c>
 8008c7a:	2309      	movs	r3, #9
 8008c7c:	e08a      	b.n	8008d94 <f_opendir+0x132>

	/* Get logical drive */
	obj = &dp->obj;
 8008c7e:	1d3b      	adds	r3, r7, #4
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 8008c86:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8008c8a:	463b      	mov	r3, r7
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f7ff f8b8 	bl	8007e04 <find_volume>
 8008c94:	4603      	mov	r3, r0
 8008c96:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 8008c9a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d16e      	bne.n	8008d80 <f_opendir+0x11e>
		obj->fs = fs;
 8008ca2:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8008ca6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008caa:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8008cac:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008cb0:	f107 020c 	add.w	r2, r7, #12
 8008cb4:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008cb6:	463b      	mov	r3, r7
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	1d3b      	adds	r3, r7, #4
 8008cbc:	4611      	mov	r1, r2
 8008cbe:	6818      	ldr	r0, [r3, #0]
 8008cc0:	f7fe ff94 	bl	8007bec <follow_path>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 8008cca:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d14f      	bne.n	8008d72 <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008cd2:	1d3b      	adds	r3, r7, #4
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008cda:	b25b      	sxtb	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	db17      	blt.n	8008d10 <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008ce0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008ce4:	799b      	ldrb	r3, [r3, #6]
 8008ce6:	f003 0310 	and.w	r3, r3, #16
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d00d      	beq.n	8008d0a <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008cee:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8008cf2:	1d3b      	adds	r3, r7, #4
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	6a1b      	ldr	r3, [r3, #32]
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4610      	mov	r0, r2
 8008cfc:	f7fe f80b 	bl	8006d16 <ld_clust>
 8008d00:	4602      	mov	r2, r0
 8008d02:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d06:	609a      	str	r2, [r3, #8]
 8008d08:	e002      	b.n	8008d10 <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008d0a:	2305      	movs	r3, #5
 8008d0c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 8008d10:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d12c      	bne.n	8008d72 <f_opendir+0x110>
				obj->id = fs->id;
 8008d18:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008d1c:	88da      	ldrh	r2, [r3, #6]
 8008d1e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d22:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008d24:	1d3b      	adds	r3, r7, #4
 8008d26:	2100      	movs	r1, #0
 8008d28:	6818      	ldr	r0, [r3, #0]
 8008d2a:	f7fd fe6d 	bl	8006a08 <dir_sdi>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008d34:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d11a      	bne.n	8008d72 <f_opendir+0x110>
					if (obj->sclust) {
 8008d3c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d011      	beq.n	8008d6a <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008d46:	1d3b      	adds	r3, r7, #4
 8008d48:	2100      	movs	r1, #0
 8008d4a:	6818      	ldr	r0, [r3, #0]
 8008d4c:	f7fd f9b2 	bl	80060b4 <inc_lock>
 8008d50:	4602      	mov	r2, r0
 8008d52:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d56:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008d58:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d107      	bne.n	8008d72 <f_opendir+0x110>
 8008d62:	2312      	movs	r3, #18
 8008d64:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 8008d68:	e003      	b.n	8008d72 <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008d6a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d6e:	2200      	movs	r2, #0
 8008d70:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008d72:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008d76:	2b04      	cmp	r3, #4
 8008d78:	d102      	bne.n	8008d80 <f_opendir+0x11e>
 8008d7a:	2305      	movs	r3, #5
 8008d7c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008d80:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d003      	beq.n	8008d90 <f_opendir+0x12e>
 8008d88:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008d90:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b084      	sub	sp, #16
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	f107 0208 	add.w	r2, r7, #8
 8008dac:	4611      	mov	r1, r2
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7ff fa74 	bl	800829c <validate>
 8008db4:	4603      	mov	r3, r0
 8008db6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008db8:	7bfb      	ldrb	r3, [r7, #15]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d110      	bne.n	8008de0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d006      	beq.n	8008dd4 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	f7fd fa00 	bl	80061d0 <dec_lock>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8008dd4:	7bfb      	ldrb	r3, [r7, #15]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d102      	bne.n	8008de0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2200      	movs	r2, #0
 8008dde:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008de0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3710      	adds	r7, #16
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}

08008dea <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	1d3b      	adds	r3, r7, #4
 8008df4:	6018      	str	r0, [r3, #0]
 8008df6:	463b      	mov	r3, r7
 8008df8:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008dfa:	1d3b      	adds	r3, r7, #4
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008e02:	4611      	mov	r1, r2
 8008e04:	4618      	mov	r0, r3
 8008e06:	f7ff fa49 	bl	800829c <validate>
 8008e0a:	4603      	mov	r3, r0
 8008e0c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 8008e10:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d139      	bne.n	8008e8c <f_readdir+0xa2>
		if (!fno) {
 8008e18:	463b      	mov	r3, r7
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d108      	bne.n	8008e32 <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008e20:	1d3b      	adds	r3, r7, #4
 8008e22:	2100      	movs	r1, #0
 8008e24:	6818      	ldr	r0, [r3, #0]
 8008e26:	f7fd fdef 	bl	8006a08 <dir_sdi>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008e30:	e02c      	b.n	8008e8c <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 8008e32:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008e36:	f107 0208 	add.w	r2, r7, #8
 8008e3a:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8008e3c:	1d3b      	adds	r3, r7, #4
 8008e3e:	2100      	movs	r1, #0
 8008e40:	6818      	ldr	r0, [r3, #0]
 8008e42:	f7fe f993 	bl	800716c <dir_read>
 8008e46:	4603      	mov	r3, r0
 8008e48:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008e4c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008e50:	2b04      	cmp	r3, #4
 8008e52:	d102      	bne.n	8008e5a <f_readdir+0x70>
 8008e54:	2300      	movs	r3, #0
 8008e56:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8008e5a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d114      	bne.n	8008e8c <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008e62:	463a      	mov	r2, r7
 8008e64:	1d3b      	adds	r3, r7, #4
 8008e66:	6811      	ldr	r1, [r2, #0]
 8008e68:	6818      	ldr	r0, [r3, #0]
 8008e6a:	f7fe fc29 	bl	80076c0 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008e6e:	1d3b      	adds	r3, r7, #4
 8008e70:	2100      	movs	r1, #0
 8008e72:	6818      	ldr	r0, [r3, #0]
 8008e74:	f7fd fe43 	bl	8006afe <dir_next>
 8008e78:	4603      	mov	r3, r0
 8008e7a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008e7e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008e82:	2b04      	cmp	r3, #4
 8008e84:	d102      	bne.n	8008e8c <f_readdir+0xa2>
 8008e86:	2300      	movs	r3, #0
 8008e88:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008e8c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8008e96:	46bd      	mov	sp, r7
 8008e98:	bd80      	pop	{r7, pc}

08008e9a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008e9a:	b580      	push	{r7, lr}
 8008e9c:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	1d3b      	adds	r3, r7, #4
 8008ea4:	6018      	str	r0, [r3, #0]
 8008ea6:	463b      	mov	r3, r7
 8008ea8:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008eaa:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8008eae:	1d3b      	adds	r3, r7, #4
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fe ffa6 	bl	8007e04 <find_volume>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 8008ebe:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d127      	bne.n	8008f16 <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 8008ec6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008eca:	f107 0208 	add.w	r2, r7, #8
 8008ece:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008ed0:	1d3b      	adds	r3, r7, #4
 8008ed2:	681a      	ldr	r2, [r3, #0]
 8008ed4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008ed8:	4611      	mov	r1, r2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe fe86 	bl	8007bec <follow_path>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8008ee6:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d113      	bne.n	8008f16 <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008eee:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8008ef2:	b25b      	sxtb	r3, r3
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	da03      	bge.n	8008f00 <f_stat+0x66>
				res = FR_INVALID_NAME;
 8008ef8:	2306      	movs	r3, #6
 8008efa:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8008efe:	e00a      	b.n	8008f16 <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008f00:	463b      	mov	r3, r7
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d006      	beq.n	8008f16 <f_stat+0x7c>
 8008f08:	463b      	mov	r3, r7
 8008f0a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008f0e:	6819      	ldr	r1, [r3, #0]
 8008f10:	4610      	mov	r0, r2
 8008f12:	f7fe fbd5 	bl	80076c0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008f16:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008f24:	b580      	push	{r7, lr}
 8008f26:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 8008f2a:	af00      	add	r7, sp, #0
 8008f2c:	1d3b      	adds	r3, r7, #4
 8008f2e:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008f30:	2300      	movs	r3, #0
 8008f32:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008f36:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8008f3a:	1d3b      	adds	r3, r7, #4
 8008f3c:	2202      	movs	r2, #2
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe ff60 	bl	8007e04 <find_volume>
 8008f44:	4603      	mov	r3, r0
 8008f46:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	dj.obj.fs = fs;
 8008f4a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008f4e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	if (res == FR_OK) {
 8008f52:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f040 809e 	bne.w	8009098 <f_unlink+0x174>
		INIT_NAMBUF(fs);
 8008f5c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008f60:	f107 020c 	add.w	r2, r7, #12
 8008f64:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8008f66:	1d3b      	adds	r3, r7, #4
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8008f6e:	4611      	mov	r1, r2
 8008f70:	4618      	mov	r0, r3
 8008f72:	f7fe fe3b 	bl	8007bec <follow_path>
 8008f76:	4603      	mov	r3, r0
 8008f78:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008f7c:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d108      	bne.n	8008f96 <f_unlink+0x72>
 8008f84:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8008f88:	2102      	movs	r1, #2
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f7fd f814 	bl	8005fb8 <chk_lock>
 8008f90:	4603      	mov	r3, r0
 8008f92:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008f96:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d17c      	bne.n	8009098 <f_unlink+0x174>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008f9e:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 8008fa2:	b25b      	sxtb	r3, r3
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	da03      	bge.n	8008fb0 <f_unlink+0x8c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8008fa8:	2306      	movs	r3, #6
 8008faa:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 8008fae:	e008      	b.n	8008fc2 <f_unlink+0x9e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008fb0:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8008fb4:	f003 0301 	and.w	r3, r3, #1
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d002      	beq.n	8008fc2 <f_unlink+0x9e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008fbc:	2307      	movs	r3, #7
 8008fbe:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				}
			}
			if (res == FR_OK) {
 8008fc2:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d13b      	bne.n	8009042 <f_unlink+0x11e>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8008fca:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008fce:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008fd2:	4611      	mov	r1, r2
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f7fd fe9e 	bl	8006d16 <ld_clust>
 8008fda:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8008fde:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8008fe2:	f003 0310 	and.w	r3, r3, #16
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d02b      	beq.n	8009042 <f_unlink+0x11e>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008fea:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008fee:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
						sdj.obj.sclust = dclst;
 8008ff2:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8008ff6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008ffa:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ffe:	2100      	movs	r1, #0
 8009000:	4618      	mov	r0, r3
 8009002:	f7fd fd01 	bl	8006a08 <dir_sdi>
 8009006:	4603      	mov	r3, r0
 8009008:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						if (res == FR_OK) {
 800900c:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8009010:	2b00      	cmp	r3, #0
 8009012:	d116      	bne.n	8009042 <f_unlink+0x11e>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009014:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009018:	2100      	movs	r1, #0
 800901a:	4618      	mov	r0, r3
 800901c:	f7fe f8a6 	bl	800716c <dir_read>
 8009020:	4603      	mov	r3, r0
 8009022:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8009026:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800902a:	2b00      	cmp	r3, #0
 800902c:	d102      	bne.n	8009034 <f_unlink+0x110>
 800902e:	2307      	movs	r3, #7
 8009030:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009034:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8009038:	2b04      	cmp	r3, #4
 800903a:	d102      	bne.n	8009042 <f_unlink+0x11e>
 800903c:	2300      	movs	r3, #0
 800903e:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						}
					}
				}
			}
			if (res == FR_OK) {
 8009042:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8009046:	2b00      	cmp	r3, #0
 8009048:	d126      	bne.n	8009098 <f_unlink+0x174>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800904a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe faec 	bl	800762c <dir_remove>
 8009054:	4603      	mov	r3, r0
 8009056:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800905a:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10e      	bne.n	8009080 <f_unlink+0x15c>
 8009062:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8009066:	2b00      	cmp	r3, #0
 8009068:	d00a      	beq.n	8009080 <f_unlink+0x15c>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800906a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 800906e:	2200      	movs	r2, #0
 8009070:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 8009074:	4618      	mov	r0, r3
 8009076:	f7fd fb96 	bl	80067a6 <remove_chain>
 800907a:	4603      	mov	r3, r0
 800907c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8009080:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8009084:	2b00      	cmp	r3, #0
 8009086:	d107      	bne.n	8009098 <f_unlink+0x174>
 8009088:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800908c:	4618      	mov	r0, r3
 800908e:	f7fd f971 	bl	8006374 <sync_fs>
 8009092:	4603      	mov	r3, r0
 8009094:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009098:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
}
 800909c:	4618      	mov	r0, r3
 800909e:	f507 7720 	add.w	r7, r7, #640	; 0x280
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}
	...

080090a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80090a8:	b480      	push	{r7}
 80090aa:	b087      	sub	sp, #28
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	60f8      	str	r0, [r7, #12]
 80090b0:	60b9      	str	r1, [r7, #8]
 80090b2:	4613      	mov	r3, r2
 80090b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80090b6:	2301      	movs	r3, #1
 80090b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80090ba:	2300      	movs	r3, #0
 80090bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80090be:	4b1f      	ldr	r3, [pc, #124]	; (800913c <FATFS_LinkDriverEx+0x94>)
 80090c0:	7a5b      	ldrb	r3, [r3, #9]
 80090c2:	b2db      	uxtb	r3, r3
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d131      	bne.n	800912c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80090c8:	4b1c      	ldr	r3, [pc, #112]	; (800913c <FATFS_LinkDriverEx+0x94>)
 80090ca:	7a5b      	ldrb	r3, [r3, #9]
 80090cc:	b2db      	uxtb	r3, r3
 80090ce:	461a      	mov	r2, r3
 80090d0:	4b1a      	ldr	r3, [pc, #104]	; (800913c <FATFS_LinkDriverEx+0x94>)
 80090d2:	2100      	movs	r1, #0
 80090d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80090d6:	4b19      	ldr	r3, [pc, #100]	; (800913c <FATFS_LinkDriverEx+0x94>)
 80090d8:	7a5b      	ldrb	r3, [r3, #9]
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	4a17      	ldr	r2, [pc, #92]	; (800913c <FATFS_LinkDriverEx+0x94>)
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4413      	add	r3, r2
 80090e2:	68fa      	ldr	r2, [r7, #12]
 80090e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80090e6:	4b15      	ldr	r3, [pc, #84]	; (800913c <FATFS_LinkDriverEx+0x94>)
 80090e8:	7a5b      	ldrb	r3, [r3, #9]
 80090ea:	b2db      	uxtb	r3, r3
 80090ec:	461a      	mov	r2, r3
 80090ee:	4b13      	ldr	r3, [pc, #76]	; (800913c <FATFS_LinkDriverEx+0x94>)
 80090f0:	4413      	add	r3, r2
 80090f2:	79fa      	ldrb	r2, [r7, #7]
 80090f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80090f6:	4b11      	ldr	r3, [pc, #68]	; (800913c <FATFS_LinkDriverEx+0x94>)
 80090f8:	7a5b      	ldrb	r3, [r3, #9]
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	1c5a      	adds	r2, r3, #1
 80090fe:	b2d1      	uxtb	r1, r2
 8009100:	4a0e      	ldr	r2, [pc, #56]	; (800913c <FATFS_LinkDriverEx+0x94>)
 8009102:	7251      	strb	r1, [r2, #9]
 8009104:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009106:	7dbb      	ldrb	r3, [r7, #22]
 8009108:	3330      	adds	r3, #48	; 0x30
 800910a:	b2da      	uxtb	r2, r3
 800910c:	68bb      	ldr	r3, [r7, #8]
 800910e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009110:	68bb      	ldr	r3, [r7, #8]
 8009112:	3301      	adds	r3, #1
 8009114:	223a      	movs	r2, #58	; 0x3a
 8009116:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	3302      	adds	r3, #2
 800911c:	222f      	movs	r2, #47	; 0x2f
 800911e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	3303      	adds	r3, #3
 8009124:	2200      	movs	r2, #0
 8009126:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009128:	2300      	movs	r3, #0
 800912a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800912c:	7dfb      	ldrb	r3, [r7, #23]
}
 800912e:	4618      	mov	r0, r3
 8009130:	371c      	adds	r7, #28
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	200002f8 	.word	0x200002f8

08009140 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b082      	sub	sp, #8
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800914a:	2200      	movs	r2, #0
 800914c:	6839      	ldr	r1, [r7, #0]
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f7ff ffaa 	bl	80090a8 <FATFS_LinkDriverEx>
 8009154:	4603      	mov	r3, r0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3708      	adds	r7, #8
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}
	...

08009160 <__errno>:
 8009160:	4b01      	ldr	r3, [pc, #4]	; (8009168 <__errno+0x8>)
 8009162:	6818      	ldr	r0, [r3, #0]
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	20000010 	.word	0x20000010

0800916c <__libc_init_array>:
 800916c:	b570      	push	{r4, r5, r6, lr}
 800916e:	4e0d      	ldr	r6, [pc, #52]	; (80091a4 <__libc_init_array+0x38>)
 8009170:	4c0d      	ldr	r4, [pc, #52]	; (80091a8 <__libc_init_array+0x3c>)
 8009172:	1ba4      	subs	r4, r4, r6
 8009174:	10a4      	asrs	r4, r4, #2
 8009176:	2500      	movs	r5, #0
 8009178:	42a5      	cmp	r5, r4
 800917a:	d109      	bne.n	8009190 <__libc_init_array+0x24>
 800917c:	4e0b      	ldr	r6, [pc, #44]	; (80091ac <__libc_init_array+0x40>)
 800917e:	4c0c      	ldr	r4, [pc, #48]	; (80091b0 <__libc_init_array+0x44>)
 8009180:	f002 fdaa 	bl	800bcd8 <_init>
 8009184:	1ba4      	subs	r4, r4, r6
 8009186:	10a4      	asrs	r4, r4, #2
 8009188:	2500      	movs	r5, #0
 800918a:	42a5      	cmp	r5, r4
 800918c:	d105      	bne.n	800919a <__libc_init_array+0x2e>
 800918e:	bd70      	pop	{r4, r5, r6, pc}
 8009190:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009194:	4798      	blx	r3
 8009196:	3501      	adds	r5, #1
 8009198:	e7ee      	b.n	8009178 <__libc_init_array+0xc>
 800919a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800919e:	4798      	blx	r3
 80091a0:	3501      	adds	r5, #1
 80091a2:	e7f2      	b.n	800918a <__libc_init_array+0x1e>
 80091a4:	08013c20 	.word	0x08013c20
 80091a8:	08013c20 	.word	0x08013c20
 80091ac:	08013c20 	.word	0x08013c20
 80091b0:	08013c24 	.word	0x08013c24

080091b4 <malloc>:
 80091b4:	4b02      	ldr	r3, [pc, #8]	; (80091c0 <malloc+0xc>)
 80091b6:	4601      	mov	r1, r0
 80091b8:	6818      	ldr	r0, [r3, #0]
 80091ba:	f000 b861 	b.w	8009280 <_malloc_r>
 80091be:	bf00      	nop
 80091c0:	20000010 	.word	0x20000010

080091c4 <free>:
 80091c4:	4b02      	ldr	r3, [pc, #8]	; (80091d0 <free+0xc>)
 80091c6:	4601      	mov	r1, r0
 80091c8:	6818      	ldr	r0, [r3, #0]
 80091ca:	f000 b80b 	b.w	80091e4 <_free_r>
 80091ce:	bf00      	nop
 80091d0:	20000010 	.word	0x20000010

080091d4 <memset>:
 80091d4:	4402      	add	r2, r0
 80091d6:	4603      	mov	r3, r0
 80091d8:	4293      	cmp	r3, r2
 80091da:	d100      	bne.n	80091de <memset+0xa>
 80091dc:	4770      	bx	lr
 80091de:	f803 1b01 	strb.w	r1, [r3], #1
 80091e2:	e7f9      	b.n	80091d8 <memset+0x4>

080091e4 <_free_r>:
 80091e4:	b538      	push	{r3, r4, r5, lr}
 80091e6:	4605      	mov	r5, r0
 80091e8:	2900      	cmp	r1, #0
 80091ea:	d045      	beq.n	8009278 <_free_r+0x94>
 80091ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091f0:	1f0c      	subs	r4, r1, #4
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	bfb8      	it	lt
 80091f6:	18e4      	addlt	r4, r4, r3
 80091f8:	f001 fedd 	bl	800afb6 <__malloc_lock>
 80091fc:	4a1f      	ldr	r2, [pc, #124]	; (800927c <_free_r+0x98>)
 80091fe:	6813      	ldr	r3, [r2, #0]
 8009200:	4610      	mov	r0, r2
 8009202:	b933      	cbnz	r3, 8009212 <_free_r+0x2e>
 8009204:	6063      	str	r3, [r4, #4]
 8009206:	6014      	str	r4, [r2, #0]
 8009208:	4628      	mov	r0, r5
 800920a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800920e:	f001 bed3 	b.w	800afb8 <__malloc_unlock>
 8009212:	42a3      	cmp	r3, r4
 8009214:	d90c      	bls.n	8009230 <_free_r+0x4c>
 8009216:	6821      	ldr	r1, [r4, #0]
 8009218:	1862      	adds	r2, r4, r1
 800921a:	4293      	cmp	r3, r2
 800921c:	bf04      	itt	eq
 800921e:	681a      	ldreq	r2, [r3, #0]
 8009220:	685b      	ldreq	r3, [r3, #4]
 8009222:	6063      	str	r3, [r4, #4]
 8009224:	bf04      	itt	eq
 8009226:	1852      	addeq	r2, r2, r1
 8009228:	6022      	streq	r2, [r4, #0]
 800922a:	6004      	str	r4, [r0, #0]
 800922c:	e7ec      	b.n	8009208 <_free_r+0x24>
 800922e:	4613      	mov	r3, r2
 8009230:	685a      	ldr	r2, [r3, #4]
 8009232:	b10a      	cbz	r2, 8009238 <_free_r+0x54>
 8009234:	42a2      	cmp	r2, r4
 8009236:	d9fa      	bls.n	800922e <_free_r+0x4a>
 8009238:	6819      	ldr	r1, [r3, #0]
 800923a:	1858      	adds	r0, r3, r1
 800923c:	42a0      	cmp	r0, r4
 800923e:	d10b      	bne.n	8009258 <_free_r+0x74>
 8009240:	6820      	ldr	r0, [r4, #0]
 8009242:	4401      	add	r1, r0
 8009244:	1858      	adds	r0, r3, r1
 8009246:	4282      	cmp	r2, r0
 8009248:	6019      	str	r1, [r3, #0]
 800924a:	d1dd      	bne.n	8009208 <_free_r+0x24>
 800924c:	6810      	ldr	r0, [r2, #0]
 800924e:	6852      	ldr	r2, [r2, #4]
 8009250:	605a      	str	r2, [r3, #4]
 8009252:	4401      	add	r1, r0
 8009254:	6019      	str	r1, [r3, #0]
 8009256:	e7d7      	b.n	8009208 <_free_r+0x24>
 8009258:	d902      	bls.n	8009260 <_free_r+0x7c>
 800925a:	230c      	movs	r3, #12
 800925c:	602b      	str	r3, [r5, #0]
 800925e:	e7d3      	b.n	8009208 <_free_r+0x24>
 8009260:	6820      	ldr	r0, [r4, #0]
 8009262:	1821      	adds	r1, r4, r0
 8009264:	428a      	cmp	r2, r1
 8009266:	bf04      	itt	eq
 8009268:	6811      	ldreq	r1, [r2, #0]
 800926a:	6852      	ldreq	r2, [r2, #4]
 800926c:	6062      	str	r2, [r4, #4]
 800926e:	bf04      	itt	eq
 8009270:	1809      	addeq	r1, r1, r0
 8009272:	6021      	streq	r1, [r4, #0]
 8009274:	605c      	str	r4, [r3, #4]
 8009276:	e7c7      	b.n	8009208 <_free_r+0x24>
 8009278:	bd38      	pop	{r3, r4, r5, pc}
 800927a:	bf00      	nop
 800927c:	20000304 	.word	0x20000304

08009280 <_malloc_r>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	1ccd      	adds	r5, r1, #3
 8009284:	f025 0503 	bic.w	r5, r5, #3
 8009288:	3508      	adds	r5, #8
 800928a:	2d0c      	cmp	r5, #12
 800928c:	bf38      	it	cc
 800928e:	250c      	movcc	r5, #12
 8009290:	2d00      	cmp	r5, #0
 8009292:	4606      	mov	r6, r0
 8009294:	db01      	blt.n	800929a <_malloc_r+0x1a>
 8009296:	42a9      	cmp	r1, r5
 8009298:	d903      	bls.n	80092a2 <_malloc_r+0x22>
 800929a:	230c      	movs	r3, #12
 800929c:	6033      	str	r3, [r6, #0]
 800929e:	2000      	movs	r0, #0
 80092a0:	bd70      	pop	{r4, r5, r6, pc}
 80092a2:	f001 fe88 	bl	800afb6 <__malloc_lock>
 80092a6:	4a21      	ldr	r2, [pc, #132]	; (800932c <_malloc_r+0xac>)
 80092a8:	6814      	ldr	r4, [r2, #0]
 80092aa:	4621      	mov	r1, r4
 80092ac:	b991      	cbnz	r1, 80092d4 <_malloc_r+0x54>
 80092ae:	4c20      	ldr	r4, [pc, #128]	; (8009330 <_malloc_r+0xb0>)
 80092b0:	6823      	ldr	r3, [r4, #0]
 80092b2:	b91b      	cbnz	r3, 80092bc <_malloc_r+0x3c>
 80092b4:	4630      	mov	r0, r6
 80092b6:	f000 fd15 	bl	8009ce4 <_sbrk_r>
 80092ba:	6020      	str	r0, [r4, #0]
 80092bc:	4629      	mov	r1, r5
 80092be:	4630      	mov	r0, r6
 80092c0:	f000 fd10 	bl	8009ce4 <_sbrk_r>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d124      	bne.n	8009312 <_malloc_r+0x92>
 80092c8:	230c      	movs	r3, #12
 80092ca:	6033      	str	r3, [r6, #0]
 80092cc:	4630      	mov	r0, r6
 80092ce:	f001 fe73 	bl	800afb8 <__malloc_unlock>
 80092d2:	e7e4      	b.n	800929e <_malloc_r+0x1e>
 80092d4:	680b      	ldr	r3, [r1, #0]
 80092d6:	1b5b      	subs	r3, r3, r5
 80092d8:	d418      	bmi.n	800930c <_malloc_r+0x8c>
 80092da:	2b0b      	cmp	r3, #11
 80092dc:	d90f      	bls.n	80092fe <_malloc_r+0x7e>
 80092de:	600b      	str	r3, [r1, #0]
 80092e0:	50cd      	str	r5, [r1, r3]
 80092e2:	18cc      	adds	r4, r1, r3
 80092e4:	4630      	mov	r0, r6
 80092e6:	f001 fe67 	bl	800afb8 <__malloc_unlock>
 80092ea:	f104 000b 	add.w	r0, r4, #11
 80092ee:	1d23      	adds	r3, r4, #4
 80092f0:	f020 0007 	bic.w	r0, r0, #7
 80092f4:	1ac3      	subs	r3, r0, r3
 80092f6:	d0d3      	beq.n	80092a0 <_malloc_r+0x20>
 80092f8:	425a      	negs	r2, r3
 80092fa:	50e2      	str	r2, [r4, r3]
 80092fc:	e7d0      	b.n	80092a0 <_malloc_r+0x20>
 80092fe:	428c      	cmp	r4, r1
 8009300:	684b      	ldr	r3, [r1, #4]
 8009302:	bf16      	itet	ne
 8009304:	6063      	strne	r3, [r4, #4]
 8009306:	6013      	streq	r3, [r2, #0]
 8009308:	460c      	movne	r4, r1
 800930a:	e7eb      	b.n	80092e4 <_malloc_r+0x64>
 800930c:	460c      	mov	r4, r1
 800930e:	6849      	ldr	r1, [r1, #4]
 8009310:	e7cc      	b.n	80092ac <_malloc_r+0x2c>
 8009312:	1cc4      	adds	r4, r0, #3
 8009314:	f024 0403 	bic.w	r4, r4, #3
 8009318:	42a0      	cmp	r0, r4
 800931a:	d005      	beq.n	8009328 <_malloc_r+0xa8>
 800931c:	1a21      	subs	r1, r4, r0
 800931e:	4630      	mov	r0, r6
 8009320:	f000 fce0 	bl	8009ce4 <_sbrk_r>
 8009324:	3001      	adds	r0, #1
 8009326:	d0cf      	beq.n	80092c8 <_malloc_r+0x48>
 8009328:	6025      	str	r5, [r4, #0]
 800932a:	e7db      	b.n	80092e4 <_malloc_r+0x64>
 800932c:	20000304 	.word	0x20000304
 8009330:	20000308 	.word	0x20000308

08009334 <__cvt>:
 8009334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009338:	ec55 4b10 	vmov	r4, r5, d0
 800933c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800933e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009342:	2d00      	cmp	r5, #0
 8009344:	460e      	mov	r6, r1
 8009346:	4691      	mov	r9, r2
 8009348:	4619      	mov	r1, r3
 800934a:	bfb8      	it	lt
 800934c:	4622      	movlt	r2, r4
 800934e:	462b      	mov	r3, r5
 8009350:	f027 0720 	bic.w	r7, r7, #32
 8009354:	bfbb      	ittet	lt
 8009356:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800935a:	461d      	movlt	r5, r3
 800935c:	2300      	movge	r3, #0
 800935e:	232d      	movlt	r3, #45	; 0x2d
 8009360:	bfb8      	it	lt
 8009362:	4614      	movlt	r4, r2
 8009364:	2f46      	cmp	r7, #70	; 0x46
 8009366:	700b      	strb	r3, [r1, #0]
 8009368:	d004      	beq.n	8009374 <__cvt+0x40>
 800936a:	2f45      	cmp	r7, #69	; 0x45
 800936c:	d100      	bne.n	8009370 <__cvt+0x3c>
 800936e:	3601      	adds	r6, #1
 8009370:	2102      	movs	r1, #2
 8009372:	e000      	b.n	8009376 <__cvt+0x42>
 8009374:	2103      	movs	r1, #3
 8009376:	ab03      	add	r3, sp, #12
 8009378:	9301      	str	r3, [sp, #4]
 800937a:	ab02      	add	r3, sp, #8
 800937c:	9300      	str	r3, [sp, #0]
 800937e:	4632      	mov	r2, r6
 8009380:	4653      	mov	r3, sl
 8009382:	ec45 4b10 	vmov	d0, r4, r5
 8009386:	f000 fe67 	bl	800a058 <_dtoa_r>
 800938a:	2f47      	cmp	r7, #71	; 0x47
 800938c:	4680      	mov	r8, r0
 800938e:	d102      	bne.n	8009396 <__cvt+0x62>
 8009390:	f019 0f01 	tst.w	r9, #1
 8009394:	d026      	beq.n	80093e4 <__cvt+0xb0>
 8009396:	2f46      	cmp	r7, #70	; 0x46
 8009398:	eb08 0906 	add.w	r9, r8, r6
 800939c:	d111      	bne.n	80093c2 <__cvt+0x8e>
 800939e:	f898 3000 	ldrb.w	r3, [r8]
 80093a2:	2b30      	cmp	r3, #48	; 0x30
 80093a4:	d10a      	bne.n	80093bc <__cvt+0x88>
 80093a6:	2200      	movs	r2, #0
 80093a8:	2300      	movs	r3, #0
 80093aa:	4620      	mov	r0, r4
 80093ac:	4629      	mov	r1, r5
 80093ae:	f7f7 fbbb 	bl	8000b28 <__aeabi_dcmpeq>
 80093b2:	b918      	cbnz	r0, 80093bc <__cvt+0x88>
 80093b4:	f1c6 0601 	rsb	r6, r6, #1
 80093b8:	f8ca 6000 	str.w	r6, [sl]
 80093bc:	f8da 3000 	ldr.w	r3, [sl]
 80093c0:	4499      	add	r9, r3
 80093c2:	2200      	movs	r2, #0
 80093c4:	2300      	movs	r3, #0
 80093c6:	4620      	mov	r0, r4
 80093c8:	4629      	mov	r1, r5
 80093ca:	f7f7 fbad 	bl	8000b28 <__aeabi_dcmpeq>
 80093ce:	b938      	cbnz	r0, 80093e0 <__cvt+0xac>
 80093d0:	2230      	movs	r2, #48	; 0x30
 80093d2:	9b03      	ldr	r3, [sp, #12]
 80093d4:	454b      	cmp	r3, r9
 80093d6:	d205      	bcs.n	80093e4 <__cvt+0xb0>
 80093d8:	1c59      	adds	r1, r3, #1
 80093da:	9103      	str	r1, [sp, #12]
 80093dc:	701a      	strb	r2, [r3, #0]
 80093de:	e7f8      	b.n	80093d2 <__cvt+0x9e>
 80093e0:	f8cd 900c 	str.w	r9, [sp, #12]
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093e8:	eba3 0308 	sub.w	r3, r3, r8
 80093ec:	4640      	mov	r0, r8
 80093ee:	6013      	str	r3, [r2, #0]
 80093f0:	b004      	add	sp, #16
 80093f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080093f6 <__exponent>:
 80093f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80093f8:	2900      	cmp	r1, #0
 80093fa:	4604      	mov	r4, r0
 80093fc:	bfba      	itte	lt
 80093fe:	4249      	neglt	r1, r1
 8009400:	232d      	movlt	r3, #45	; 0x2d
 8009402:	232b      	movge	r3, #43	; 0x2b
 8009404:	2909      	cmp	r1, #9
 8009406:	f804 2b02 	strb.w	r2, [r4], #2
 800940a:	7043      	strb	r3, [r0, #1]
 800940c:	dd20      	ble.n	8009450 <__exponent+0x5a>
 800940e:	f10d 0307 	add.w	r3, sp, #7
 8009412:	461f      	mov	r7, r3
 8009414:	260a      	movs	r6, #10
 8009416:	fb91 f5f6 	sdiv	r5, r1, r6
 800941a:	fb06 1115 	mls	r1, r6, r5, r1
 800941e:	3130      	adds	r1, #48	; 0x30
 8009420:	2d09      	cmp	r5, #9
 8009422:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009426:	f103 32ff 	add.w	r2, r3, #4294967295
 800942a:	4629      	mov	r1, r5
 800942c:	dc09      	bgt.n	8009442 <__exponent+0x4c>
 800942e:	3130      	adds	r1, #48	; 0x30
 8009430:	3b02      	subs	r3, #2
 8009432:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009436:	42bb      	cmp	r3, r7
 8009438:	4622      	mov	r2, r4
 800943a:	d304      	bcc.n	8009446 <__exponent+0x50>
 800943c:	1a10      	subs	r0, r2, r0
 800943e:	b003      	add	sp, #12
 8009440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009442:	4613      	mov	r3, r2
 8009444:	e7e7      	b.n	8009416 <__exponent+0x20>
 8009446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800944a:	f804 2b01 	strb.w	r2, [r4], #1
 800944e:	e7f2      	b.n	8009436 <__exponent+0x40>
 8009450:	2330      	movs	r3, #48	; 0x30
 8009452:	4419      	add	r1, r3
 8009454:	7083      	strb	r3, [r0, #2]
 8009456:	1d02      	adds	r2, r0, #4
 8009458:	70c1      	strb	r1, [r0, #3]
 800945a:	e7ef      	b.n	800943c <__exponent+0x46>

0800945c <_printf_float>:
 800945c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009460:	b08d      	sub	sp, #52	; 0x34
 8009462:	460c      	mov	r4, r1
 8009464:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009468:	4616      	mov	r6, r2
 800946a:	461f      	mov	r7, r3
 800946c:	4605      	mov	r5, r0
 800946e:	f001 fd25 	bl	800aebc <_localeconv_r>
 8009472:	6803      	ldr	r3, [r0, #0]
 8009474:	9304      	str	r3, [sp, #16]
 8009476:	4618      	mov	r0, r3
 8009478:	f7f6 fed4 	bl	8000224 <strlen>
 800947c:	2300      	movs	r3, #0
 800947e:	930a      	str	r3, [sp, #40]	; 0x28
 8009480:	f8d8 3000 	ldr.w	r3, [r8]
 8009484:	9005      	str	r0, [sp, #20]
 8009486:	3307      	adds	r3, #7
 8009488:	f023 0307 	bic.w	r3, r3, #7
 800948c:	f103 0208 	add.w	r2, r3, #8
 8009490:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009494:	f8d4 b000 	ldr.w	fp, [r4]
 8009498:	f8c8 2000 	str.w	r2, [r8]
 800949c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80094a4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80094a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094ac:	9307      	str	r3, [sp, #28]
 80094ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80094b2:	f04f 32ff 	mov.w	r2, #4294967295
 80094b6:	4ba7      	ldr	r3, [pc, #668]	; (8009754 <_printf_float+0x2f8>)
 80094b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094bc:	f7f7 fb66 	bl	8000b8c <__aeabi_dcmpun>
 80094c0:	bb70      	cbnz	r0, 8009520 <_printf_float+0xc4>
 80094c2:	f04f 32ff 	mov.w	r2, #4294967295
 80094c6:	4ba3      	ldr	r3, [pc, #652]	; (8009754 <_printf_float+0x2f8>)
 80094c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80094cc:	f7f7 fb40 	bl	8000b50 <__aeabi_dcmple>
 80094d0:	bb30      	cbnz	r0, 8009520 <_printf_float+0xc4>
 80094d2:	2200      	movs	r2, #0
 80094d4:	2300      	movs	r3, #0
 80094d6:	4640      	mov	r0, r8
 80094d8:	4649      	mov	r1, r9
 80094da:	f7f7 fb2f 	bl	8000b3c <__aeabi_dcmplt>
 80094de:	b110      	cbz	r0, 80094e6 <_printf_float+0x8a>
 80094e0:	232d      	movs	r3, #45	; 0x2d
 80094e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094e6:	4a9c      	ldr	r2, [pc, #624]	; (8009758 <_printf_float+0x2fc>)
 80094e8:	4b9c      	ldr	r3, [pc, #624]	; (800975c <_printf_float+0x300>)
 80094ea:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80094ee:	bf8c      	ite	hi
 80094f0:	4690      	movhi	r8, r2
 80094f2:	4698      	movls	r8, r3
 80094f4:	2303      	movs	r3, #3
 80094f6:	f02b 0204 	bic.w	r2, fp, #4
 80094fa:	6123      	str	r3, [r4, #16]
 80094fc:	6022      	str	r2, [r4, #0]
 80094fe:	f04f 0900 	mov.w	r9, #0
 8009502:	9700      	str	r7, [sp, #0]
 8009504:	4633      	mov	r3, r6
 8009506:	aa0b      	add	r2, sp, #44	; 0x2c
 8009508:	4621      	mov	r1, r4
 800950a:	4628      	mov	r0, r5
 800950c:	f000 f9e6 	bl	80098dc <_printf_common>
 8009510:	3001      	adds	r0, #1
 8009512:	f040 808d 	bne.w	8009630 <_printf_float+0x1d4>
 8009516:	f04f 30ff 	mov.w	r0, #4294967295
 800951a:	b00d      	add	sp, #52	; 0x34
 800951c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009520:	4642      	mov	r2, r8
 8009522:	464b      	mov	r3, r9
 8009524:	4640      	mov	r0, r8
 8009526:	4649      	mov	r1, r9
 8009528:	f7f7 fb30 	bl	8000b8c <__aeabi_dcmpun>
 800952c:	b110      	cbz	r0, 8009534 <_printf_float+0xd8>
 800952e:	4a8c      	ldr	r2, [pc, #560]	; (8009760 <_printf_float+0x304>)
 8009530:	4b8c      	ldr	r3, [pc, #560]	; (8009764 <_printf_float+0x308>)
 8009532:	e7da      	b.n	80094ea <_printf_float+0x8e>
 8009534:	6861      	ldr	r1, [r4, #4]
 8009536:	1c4b      	adds	r3, r1, #1
 8009538:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800953c:	a80a      	add	r0, sp, #40	; 0x28
 800953e:	d13e      	bne.n	80095be <_printf_float+0x162>
 8009540:	2306      	movs	r3, #6
 8009542:	6063      	str	r3, [r4, #4]
 8009544:	2300      	movs	r3, #0
 8009546:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800954a:	ab09      	add	r3, sp, #36	; 0x24
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	ec49 8b10 	vmov	d0, r8, r9
 8009552:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009556:	6022      	str	r2, [r4, #0]
 8009558:	f8cd a004 	str.w	sl, [sp, #4]
 800955c:	6861      	ldr	r1, [r4, #4]
 800955e:	4628      	mov	r0, r5
 8009560:	f7ff fee8 	bl	8009334 <__cvt>
 8009564:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009568:	2b47      	cmp	r3, #71	; 0x47
 800956a:	4680      	mov	r8, r0
 800956c:	d109      	bne.n	8009582 <_printf_float+0x126>
 800956e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009570:	1cd8      	adds	r0, r3, #3
 8009572:	db02      	blt.n	800957a <_printf_float+0x11e>
 8009574:	6862      	ldr	r2, [r4, #4]
 8009576:	4293      	cmp	r3, r2
 8009578:	dd47      	ble.n	800960a <_printf_float+0x1ae>
 800957a:	f1aa 0a02 	sub.w	sl, sl, #2
 800957e:	fa5f fa8a 	uxtb.w	sl, sl
 8009582:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009586:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009588:	d824      	bhi.n	80095d4 <_printf_float+0x178>
 800958a:	3901      	subs	r1, #1
 800958c:	4652      	mov	r2, sl
 800958e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009592:	9109      	str	r1, [sp, #36]	; 0x24
 8009594:	f7ff ff2f 	bl	80093f6 <__exponent>
 8009598:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800959a:	1813      	adds	r3, r2, r0
 800959c:	2a01      	cmp	r2, #1
 800959e:	4681      	mov	r9, r0
 80095a0:	6123      	str	r3, [r4, #16]
 80095a2:	dc02      	bgt.n	80095aa <_printf_float+0x14e>
 80095a4:	6822      	ldr	r2, [r4, #0]
 80095a6:	07d1      	lsls	r1, r2, #31
 80095a8:	d501      	bpl.n	80095ae <_printf_float+0x152>
 80095aa:	3301      	adds	r3, #1
 80095ac:	6123      	str	r3, [r4, #16]
 80095ae:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d0a5      	beq.n	8009502 <_printf_float+0xa6>
 80095b6:	232d      	movs	r3, #45	; 0x2d
 80095b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095bc:	e7a1      	b.n	8009502 <_printf_float+0xa6>
 80095be:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80095c2:	f000 8177 	beq.w	80098b4 <_printf_float+0x458>
 80095c6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80095ca:	d1bb      	bne.n	8009544 <_printf_float+0xe8>
 80095cc:	2900      	cmp	r1, #0
 80095ce:	d1b9      	bne.n	8009544 <_printf_float+0xe8>
 80095d0:	2301      	movs	r3, #1
 80095d2:	e7b6      	b.n	8009542 <_printf_float+0xe6>
 80095d4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80095d8:	d119      	bne.n	800960e <_printf_float+0x1b2>
 80095da:	2900      	cmp	r1, #0
 80095dc:	6863      	ldr	r3, [r4, #4]
 80095de:	dd0c      	ble.n	80095fa <_printf_float+0x19e>
 80095e0:	6121      	str	r1, [r4, #16]
 80095e2:	b913      	cbnz	r3, 80095ea <_printf_float+0x18e>
 80095e4:	6822      	ldr	r2, [r4, #0]
 80095e6:	07d2      	lsls	r2, r2, #31
 80095e8:	d502      	bpl.n	80095f0 <_printf_float+0x194>
 80095ea:	3301      	adds	r3, #1
 80095ec:	440b      	add	r3, r1
 80095ee:	6123      	str	r3, [r4, #16]
 80095f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095f2:	65a3      	str	r3, [r4, #88]	; 0x58
 80095f4:	f04f 0900 	mov.w	r9, #0
 80095f8:	e7d9      	b.n	80095ae <_printf_float+0x152>
 80095fa:	b913      	cbnz	r3, 8009602 <_printf_float+0x1a6>
 80095fc:	6822      	ldr	r2, [r4, #0]
 80095fe:	07d0      	lsls	r0, r2, #31
 8009600:	d501      	bpl.n	8009606 <_printf_float+0x1aa>
 8009602:	3302      	adds	r3, #2
 8009604:	e7f3      	b.n	80095ee <_printf_float+0x192>
 8009606:	2301      	movs	r3, #1
 8009608:	e7f1      	b.n	80095ee <_printf_float+0x192>
 800960a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800960e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009612:	4293      	cmp	r3, r2
 8009614:	db05      	blt.n	8009622 <_printf_float+0x1c6>
 8009616:	6822      	ldr	r2, [r4, #0]
 8009618:	6123      	str	r3, [r4, #16]
 800961a:	07d1      	lsls	r1, r2, #31
 800961c:	d5e8      	bpl.n	80095f0 <_printf_float+0x194>
 800961e:	3301      	adds	r3, #1
 8009620:	e7e5      	b.n	80095ee <_printf_float+0x192>
 8009622:	2b00      	cmp	r3, #0
 8009624:	bfd4      	ite	le
 8009626:	f1c3 0302 	rsble	r3, r3, #2
 800962a:	2301      	movgt	r3, #1
 800962c:	4413      	add	r3, r2
 800962e:	e7de      	b.n	80095ee <_printf_float+0x192>
 8009630:	6823      	ldr	r3, [r4, #0]
 8009632:	055a      	lsls	r2, r3, #21
 8009634:	d407      	bmi.n	8009646 <_printf_float+0x1ea>
 8009636:	6923      	ldr	r3, [r4, #16]
 8009638:	4642      	mov	r2, r8
 800963a:	4631      	mov	r1, r6
 800963c:	4628      	mov	r0, r5
 800963e:	47b8      	blx	r7
 8009640:	3001      	adds	r0, #1
 8009642:	d12b      	bne.n	800969c <_printf_float+0x240>
 8009644:	e767      	b.n	8009516 <_printf_float+0xba>
 8009646:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800964a:	f240 80dc 	bls.w	8009806 <_printf_float+0x3aa>
 800964e:	2200      	movs	r2, #0
 8009650:	2300      	movs	r3, #0
 8009652:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009656:	f7f7 fa67 	bl	8000b28 <__aeabi_dcmpeq>
 800965a:	2800      	cmp	r0, #0
 800965c:	d033      	beq.n	80096c6 <_printf_float+0x26a>
 800965e:	2301      	movs	r3, #1
 8009660:	4a41      	ldr	r2, [pc, #260]	; (8009768 <_printf_float+0x30c>)
 8009662:	4631      	mov	r1, r6
 8009664:	4628      	mov	r0, r5
 8009666:	47b8      	blx	r7
 8009668:	3001      	adds	r0, #1
 800966a:	f43f af54 	beq.w	8009516 <_printf_float+0xba>
 800966e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009672:	429a      	cmp	r2, r3
 8009674:	db02      	blt.n	800967c <_printf_float+0x220>
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	07d8      	lsls	r0, r3, #31
 800967a:	d50f      	bpl.n	800969c <_printf_float+0x240>
 800967c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009680:	4631      	mov	r1, r6
 8009682:	4628      	mov	r0, r5
 8009684:	47b8      	blx	r7
 8009686:	3001      	adds	r0, #1
 8009688:	f43f af45 	beq.w	8009516 <_printf_float+0xba>
 800968c:	f04f 0800 	mov.w	r8, #0
 8009690:	f104 091a 	add.w	r9, r4, #26
 8009694:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009696:	3b01      	subs	r3, #1
 8009698:	4543      	cmp	r3, r8
 800969a:	dc09      	bgt.n	80096b0 <_printf_float+0x254>
 800969c:	6823      	ldr	r3, [r4, #0]
 800969e:	079b      	lsls	r3, r3, #30
 80096a0:	f100 8103 	bmi.w	80098aa <_printf_float+0x44e>
 80096a4:	68e0      	ldr	r0, [r4, #12]
 80096a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096a8:	4298      	cmp	r0, r3
 80096aa:	bfb8      	it	lt
 80096ac:	4618      	movlt	r0, r3
 80096ae:	e734      	b.n	800951a <_printf_float+0xbe>
 80096b0:	2301      	movs	r3, #1
 80096b2:	464a      	mov	r2, r9
 80096b4:	4631      	mov	r1, r6
 80096b6:	4628      	mov	r0, r5
 80096b8:	47b8      	blx	r7
 80096ba:	3001      	adds	r0, #1
 80096bc:	f43f af2b 	beq.w	8009516 <_printf_float+0xba>
 80096c0:	f108 0801 	add.w	r8, r8, #1
 80096c4:	e7e6      	b.n	8009694 <_printf_float+0x238>
 80096c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	dc2b      	bgt.n	8009724 <_printf_float+0x2c8>
 80096cc:	2301      	movs	r3, #1
 80096ce:	4a26      	ldr	r2, [pc, #152]	; (8009768 <_printf_float+0x30c>)
 80096d0:	4631      	mov	r1, r6
 80096d2:	4628      	mov	r0, r5
 80096d4:	47b8      	blx	r7
 80096d6:	3001      	adds	r0, #1
 80096d8:	f43f af1d 	beq.w	8009516 <_printf_float+0xba>
 80096dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096de:	b923      	cbnz	r3, 80096ea <_printf_float+0x28e>
 80096e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096e2:	b913      	cbnz	r3, 80096ea <_printf_float+0x28e>
 80096e4:	6823      	ldr	r3, [r4, #0]
 80096e6:	07d9      	lsls	r1, r3, #31
 80096e8:	d5d8      	bpl.n	800969c <_printf_float+0x240>
 80096ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096ee:	4631      	mov	r1, r6
 80096f0:	4628      	mov	r0, r5
 80096f2:	47b8      	blx	r7
 80096f4:	3001      	adds	r0, #1
 80096f6:	f43f af0e 	beq.w	8009516 <_printf_float+0xba>
 80096fa:	f04f 0900 	mov.w	r9, #0
 80096fe:	f104 0a1a 	add.w	sl, r4, #26
 8009702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009704:	425b      	negs	r3, r3
 8009706:	454b      	cmp	r3, r9
 8009708:	dc01      	bgt.n	800970e <_printf_float+0x2b2>
 800970a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800970c:	e794      	b.n	8009638 <_printf_float+0x1dc>
 800970e:	2301      	movs	r3, #1
 8009710:	4652      	mov	r2, sl
 8009712:	4631      	mov	r1, r6
 8009714:	4628      	mov	r0, r5
 8009716:	47b8      	blx	r7
 8009718:	3001      	adds	r0, #1
 800971a:	f43f aefc 	beq.w	8009516 <_printf_float+0xba>
 800971e:	f109 0901 	add.w	r9, r9, #1
 8009722:	e7ee      	b.n	8009702 <_printf_float+0x2a6>
 8009724:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009726:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009728:	429a      	cmp	r2, r3
 800972a:	bfa8      	it	ge
 800972c:	461a      	movge	r2, r3
 800972e:	2a00      	cmp	r2, #0
 8009730:	4691      	mov	r9, r2
 8009732:	dd07      	ble.n	8009744 <_printf_float+0x2e8>
 8009734:	4613      	mov	r3, r2
 8009736:	4631      	mov	r1, r6
 8009738:	4642      	mov	r2, r8
 800973a:	4628      	mov	r0, r5
 800973c:	47b8      	blx	r7
 800973e:	3001      	adds	r0, #1
 8009740:	f43f aee9 	beq.w	8009516 <_printf_float+0xba>
 8009744:	f104 031a 	add.w	r3, r4, #26
 8009748:	f04f 0b00 	mov.w	fp, #0
 800974c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009750:	9306      	str	r3, [sp, #24]
 8009752:	e015      	b.n	8009780 <_printf_float+0x324>
 8009754:	7fefffff 	.word	0x7fefffff
 8009758:	08013960 	.word	0x08013960
 800975c:	0801395c 	.word	0x0801395c
 8009760:	08013968 	.word	0x08013968
 8009764:	08013964 	.word	0x08013964
 8009768:	0801396c 	.word	0x0801396c
 800976c:	2301      	movs	r3, #1
 800976e:	9a06      	ldr	r2, [sp, #24]
 8009770:	4631      	mov	r1, r6
 8009772:	4628      	mov	r0, r5
 8009774:	47b8      	blx	r7
 8009776:	3001      	adds	r0, #1
 8009778:	f43f aecd 	beq.w	8009516 <_printf_float+0xba>
 800977c:	f10b 0b01 	add.w	fp, fp, #1
 8009780:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009784:	ebaa 0309 	sub.w	r3, sl, r9
 8009788:	455b      	cmp	r3, fp
 800978a:	dcef      	bgt.n	800976c <_printf_float+0x310>
 800978c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009790:	429a      	cmp	r2, r3
 8009792:	44d0      	add	r8, sl
 8009794:	db15      	blt.n	80097c2 <_printf_float+0x366>
 8009796:	6823      	ldr	r3, [r4, #0]
 8009798:	07da      	lsls	r2, r3, #31
 800979a:	d412      	bmi.n	80097c2 <_printf_float+0x366>
 800979c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800979e:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097a0:	eba3 020a 	sub.w	r2, r3, sl
 80097a4:	eba3 0a01 	sub.w	sl, r3, r1
 80097a8:	4592      	cmp	sl, r2
 80097aa:	bfa8      	it	ge
 80097ac:	4692      	movge	sl, r2
 80097ae:	f1ba 0f00 	cmp.w	sl, #0
 80097b2:	dc0e      	bgt.n	80097d2 <_printf_float+0x376>
 80097b4:	f04f 0800 	mov.w	r8, #0
 80097b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097bc:	f104 091a 	add.w	r9, r4, #26
 80097c0:	e019      	b.n	80097f6 <_printf_float+0x39a>
 80097c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097c6:	4631      	mov	r1, r6
 80097c8:	4628      	mov	r0, r5
 80097ca:	47b8      	blx	r7
 80097cc:	3001      	adds	r0, #1
 80097ce:	d1e5      	bne.n	800979c <_printf_float+0x340>
 80097d0:	e6a1      	b.n	8009516 <_printf_float+0xba>
 80097d2:	4653      	mov	r3, sl
 80097d4:	4642      	mov	r2, r8
 80097d6:	4631      	mov	r1, r6
 80097d8:	4628      	mov	r0, r5
 80097da:	47b8      	blx	r7
 80097dc:	3001      	adds	r0, #1
 80097de:	d1e9      	bne.n	80097b4 <_printf_float+0x358>
 80097e0:	e699      	b.n	8009516 <_printf_float+0xba>
 80097e2:	2301      	movs	r3, #1
 80097e4:	464a      	mov	r2, r9
 80097e6:	4631      	mov	r1, r6
 80097e8:	4628      	mov	r0, r5
 80097ea:	47b8      	blx	r7
 80097ec:	3001      	adds	r0, #1
 80097ee:	f43f ae92 	beq.w	8009516 <_printf_float+0xba>
 80097f2:	f108 0801 	add.w	r8, r8, #1
 80097f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097fa:	1a9b      	subs	r3, r3, r2
 80097fc:	eba3 030a 	sub.w	r3, r3, sl
 8009800:	4543      	cmp	r3, r8
 8009802:	dcee      	bgt.n	80097e2 <_printf_float+0x386>
 8009804:	e74a      	b.n	800969c <_printf_float+0x240>
 8009806:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009808:	2a01      	cmp	r2, #1
 800980a:	dc01      	bgt.n	8009810 <_printf_float+0x3b4>
 800980c:	07db      	lsls	r3, r3, #31
 800980e:	d53a      	bpl.n	8009886 <_printf_float+0x42a>
 8009810:	2301      	movs	r3, #1
 8009812:	4642      	mov	r2, r8
 8009814:	4631      	mov	r1, r6
 8009816:	4628      	mov	r0, r5
 8009818:	47b8      	blx	r7
 800981a:	3001      	adds	r0, #1
 800981c:	f43f ae7b 	beq.w	8009516 <_printf_float+0xba>
 8009820:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009824:	4631      	mov	r1, r6
 8009826:	4628      	mov	r0, r5
 8009828:	47b8      	blx	r7
 800982a:	3001      	adds	r0, #1
 800982c:	f108 0801 	add.w	r8, r8, #1
 8009830:	f43f ae71 	beq.w	8009516 <_printf_float+0xba>
 8009834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009836:	2200      	movs	r2, #0
 8009838:	f103 3aff 	add.w	sl, r3, #4294967295
 800983c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009840:	2300      	movs	r3, #0
 8009842:	f7f7 f971 	bl	8000b28 <__aeabi_dcmpeq>
 8009846:	b9c8      	cbnz	r0, 800987c <_printf_float+0x420>
 8009848:	4653      	mov	r3, sl
 800984a:	4642      	mov	r2, r8
 800984c:	4631      	mov	r1, r6
 800984e:	4628      	mov	r0, r5
 8009850:	47b8      	blx	r7
 8009852:	3001      	adds	r0, #1
 8009854:	d10e      	bne.n	8009874 <_printf_float+0x418>
 8009856:	e65e      	b.n	8009516 <_printf_float+0xba>
 8009858:	2301      	movs	r3, #1
 800985a:	4652      	mov	r2, sl
 800985c:	4631      	mov	r1, r6
 800985e:	4628      	mov	r0, r5
 8009860:	47b8      	blx	r7
 8009862:	3001      	adds	r0, #1
 8009864:	f43f ae57 	beq.w	8009516 <_printf_float+0xba>
 8009868:	f108 0801 	add.w	r8, r8, #1
 800986c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800986e:	3b01      	subs	r3, #1
 8009870:	4543      	cmp	r3, r8
 8009872:	dcf1      	bgt.n	8009858 <_printf_float+0x3fc>
 8009874:	464b      	mov	r3, r9
 8009876:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800987a:	e6de      	b.n	800963a <_printf_float+0x1de>
 800987c:	f04f 0800 	mov.w	r8, #0
 8009880:	f104 0a1a 	add.w	sl, r4, #26
 8009884:	e7f2      	b.n	800986c <_printf_float+0x410>
 8009886:	2301      	movs	r3, #1
 8009888:	e7df      	b.n	800984a <_printf_float+0x3ee>
 800988a:	2301      	movs	r3, #1
 800988c:	464a      	mov	r2, r9
 800988e:	4631      	mov	r1, r6
 8009890:	4628      	mov	r0, r5
 8009892:	47b8      	blx	r7
 8009894:	3001      	adds	r0, #1
 8009896:	f43f ae3e 	beq.w	8009516 <_printf_float+0xba>
 800989a:	f108 0801 	add.w	r8, r8, #1
 800989e:	68e3      	ldr	r3, [r4, #12]
 80098a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80098a2:	1a9b      	subs	r3, r3, r2
 80098a4:	4543      	cmp	r3, r8
 80098a6:	dcf0      	bgt.n	800988a <_printf_float+0x42e>
 80098a8:	e6fc      	b.n	80096a4 <_printf_float+0x248>
 80098aa:	f04f 0800 	mov.w	r8, #0
 80098ae:	f104 0919 	add.w	r9, r4, #25
 80098b2:	e7f4      	b.n	800989e <_printf_float+0x442>
 80098b4:	2900      	cmp	r1, #0
 80098b6:	f43f ae8b 	beq.w	80095d0 <_printf_float+0x174>
 80098ba:	2300      	movs	r3, #0
 80098bc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80098c0:	ab09      	add	r3, sp, #36	; 0x24
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	ec49 8b10 	vmov	d0, r8, r9
 80098c8:	6022      	str	r2, [r4, #0]
 80098ca:	f8cd a004 	str.w	sl, [sp, #4]
 80098ce:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80098d2:	4628      	mov	r0, r5
 80098d4:	f7ff fd2e 	bl	8009334 <__cvt>
 80098d8:	4680      	mov	r8, r0
 80098da:	e648      	b.n	800956e <_printf_float+0x112>

080098dc <_printf_common>:
 80098dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098e0:	4691      	mov	r9, r2
 80098e2:	461f      	mov	r7, r3
 80098e4:	688a      	ldr	r2, [r1, #8]
 80098e6:	690b      	ldr	r3, [r1, #16]
 80098e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80098ec:	4293      	cmp	r3, r2
 80098ee:	bfb8      	it	lt
 80098f0:	4613      	movlt	r3, r2
 80098f2:	f8c9 3000 	str.w	r3, [r9]
 80098f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80098fa:	4606      	mov	r6, r0
 80098fc:	460c      	mov	r4, r1
 80098fe:	b112      	cbz	r2, 8009906 <_printf_common+0x2a>
 8009900:	3301      	adds	r3, #1
 8009902:	f8c9 3000 	str.w	r3, [r9]
 8009906:	6823      	ldr	r3, [r4, #0]
 8009908:	0699      	lsls	r1, r3, #26
 800990a:	bf42      	ittt	mi
 800990c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009910:	3302      	addmi	r3, #2
 8009912:	f8c9 3000 	strmi.w	r3, [r9]
 8009916:	6825      	ldr	r5, [r4, #0]
 8009918:	f015 0506 	ands.w	r5, r5, #6
 800991c:	d107      	bne.n	800992e <_printf_common+0x52>
 800991e:	f104 0a19 	add.w	sl, r4, #25
 8009922:	68e3      	ldr	r3, [r4, #12]
 8009924:	f8d9 2000 	ldr.w	r2, [r9]
 8009928:	1a9b      	subs	r3, r3, r2
 800992a:	42ab      	cmp	r3, r5
 800992c:	dc28      	bgt.n	8009980 <_printf_common+0xa4>
 800992e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8009932:	6822      	ldr	r2, [r4, #0]
 8009934:	3300      	adds	r3, #0
 8009936:	bf18      	it	ne
 8009938:	2301      	movne	r3, #1
 800993a:	0692      	lsls	r2, r2, #26
 800993c:	d42d      	bmi.n	800999a <_printf_common+0xbe>
 800993e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009942:	4639      	mov	r1, r7
 8009944:	4630      	mov	r0, r6
 8009946:	47c0      	blx	r8
 8009948:	3001      	adds	r0, #1
 800994a:	d020      	beq.n	800998e <_printf_common+0xb2>
 800994c:	6823      	ldr	r3, [r4, #0]
 800994e:	68e5      	ldr	r5, [r4, #12]
 8009950:	f8d9 2000 	ldr.w	r2, [r9]
 8009954:	f003 0306 	and.w	r3, r3, #6
 8009958:	2b04      	cmp	r3, #4
 800995a:	bf08      	it	eq
 800995c:	1aad      	subeq	r5, r5, r2
 800995e:	68a3      	ldr	r3, [r4, #8]
 8009960:	6922      	ldr	r2, [r4, #16]
 8009962:	bf0c      	ite	eq
 8009964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009968:	2500      	movne	r5, #0
 800996a:	4293      	cmp	r3, r2
 800996c:	bfc4      	itt	gt
 800996e:	1a9b      	subgt	r3, r3, r2
 8009970:	18ed      	addgt	r5, r5, r3
 8009972:	f04f 0900 	mov.w	r9, #0
 8009976:	341a      	adds	r4, #26
 8009978:	454d      	cmp	r5, r9
 800997a:	d11a      	bne.n	80099b2 <_printf_common+0xd6>
 800997c:	2000      	movs	r0, #0
 800997e:	e008      	b.n	8009992 <_printf_common+0xb6>
 8009980:	2301      	movs	r3, #1
 8009982:	4652      	mov	r2, sl
 8009984:	4639      	mov	r1, r7
 8009986:	4630      	mov	r0, r6
 8009988:	47c0      	blx	r8
 800998a:	3001      	adds	r0, #1
 800998c:	d103      	bne.n	8009996 <_printf_common+0xba>
 800998e:	f04f 30ff 	mov.w	r0, #4294967295
 8009992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009996:	3501      	adds	r5, #1
 8009998:	e7c3      	b.n	8009922 <_printf_common+0x46>
 800999a:	18e1      	adds	r1, r4, r3
 800999c:	1c5a      	adds	r2, r3, #1
 800999e:	2030      	movs	r0, #48	; 0x30
 80099a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099a4:	4422      	add	r2, r4
 80099a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099ae:	3302      	adds	r3, #2
 80099b0:	e7c5      	b.n	800993e <_printf_common+0x62>
 80099b2:	2301      	movs	r3, #1
 80099b4:	4622      	mov	r2, r4
 80099b6:	4639      	mov	r1, r7
 80099b8:	4630      	mov	r0, r6
 80099ba:	47c0      	blx	r8
 80099bc:	3001      	adds	r0, #1
 80099be:	d0e6      	beq.n	800998e <_printf_common+0xb2>
 80099c0:	f109 0901 	add.w	r9, r9, #1
 80099c4:	e7d8      	b.n	8009978 <_printf_common+0x9c>
	...

080099c8 <_printf_i>:
 80099c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80099d0:	460c      	mov	r4, r1
 80099d2:	7e09      	ldrb	r1, [r1, #24]
 80099d4:	b085      	sub	sp, #20
 80099d6:	296e      	cmp	r1, #110	; 0x6e
 80099d8:	4617      	mov	r7, r2
 80099da:	4606      	mov	r6, r0
 80099dc:	4698      	mov	r8, r3
 80099de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80099e0:	f000 80b3 	beq.w	8009b4a <_printf_i+0x182>
 80099e4:	d822      	bhi.n	8009a2c <_printf_i+0x64>
 80099e6:	2963      	cmp	r1, #99	; 0x63
 80099e8:	d036      	beq.n	8009a58 <_printf_i+0x90>
 80099ea:	d80a      	bhi.n	8009a02 <_printf_i+0x3a>
 80099ec:	2900      	cmp	r1, #0
 80099ee:	f000 80b9 	beq.w	8009b64 <_printf_i+0x19c>
 80099f2:	2958      	cmp	r1, #88	; 0x58
 80099f4:	f000 8083 	beq.w	8009afe <_printf_i+0x136>
 80099f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009a00:	e032      	b.n	8009a68 <_printf_i+0xa0>
 8009a02:	2964      	cmp	r1, #100	; 0x64
 8009a04:	d001      	beq.n	8009a0a <_printf_i+0x42>
 8009a06:	2969      	cmp	r1, #105	; 0x69
 8009a08:	d1f6      	bne.n	80099f8 <_printf_i+0x30>
 8009a0a:	6820      	ldr	r0, [r4, #0]
 8009a0c:	6813      	ldr	r3, [r2, #0]
 8009a0e:	0605      	lsls	r5, r0, #24
 8009a10:	f103 0104 	add.w	r1, r3, #4
 8009a14:	d52a      	bpl.n	8009a6c <_printf_i+0xa4>
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	6011      	str	r1, [r2, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	da03      	bge.n	8009a26 <_printf_i+0x5e>
 8009a1e:	222d      	movs	r2, #45	; 0x2d
 8009a20:	425b      	negs	r3, r3
 8009a22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009a26:	486f      	ldr	r0, [pc, #444]	; (8009be4 <_printf_i+0x21c>)
 8009a28:	220a      	movs	r2, #10
 8009a2a:	e039      	b.n	8009aa0 <_printf_i+0xd8>
 8009a2c:	2973      	cmp	r1, #115	; 0x73
 8009a2e:	f000 809d 	beq.w	8009b6c <_printf_i+0x1a4>
 8009a32:	d808      	bhi.n	8009a46 <_printf_i+0x7e>
 8009a34:	296f      	cmp	r1, #111	; 0x6f
 8009a36:	d020      	beq.n	8009a7a <_printf_i+0xb2>
 8009a38:	2970      	cmp	r1, #112	; 0x70
 8009a3a:	d1dd      	bne.n	80099f8 <_printf_i+0x30>
 8009a3c:	6823      	ldr	r3, [r4, #0]
 8009a3e:	f043 0320 	orr.w	r3, r3, #32
 8009a42:	6023      	str	r3, [r4, #0]
 8009a44:	e003      	b.n	8009a4e <_printf_i+0x86>
 8009a46:	2975      	cmp	r1, #117	; 0x75
 8009a48:	d017      	beq.n	8009a7a <_printf_i+0xb2>
 8009a4a:	2978      	cmp	r1, #120	; 0x78
 8009a4c:	d1d4      	bne.n	80099f8 <_printf_i+0x30>
 8009a4e:	2378      	movs	r3, #120	; 0x78
 8009a50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009a54:	4864      	ldr	r0, [pc, #400]	; (8009be8 <_printf_i+0x220>)
 8009a56:	e055      	b.n	8009b04 <_printf_i+0x13c>
 8009a58:	6813      	ldr	r3, [r2, #0]
 8009a5a:	1d19      	adds	r1, r3, #4
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	6011      	str	r1, [r2, #0]
 8009a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a68:	2301      	movs	r3, #1
 8009a6a:	e08c      	b.n	8009b86 <_printf_i+0x1be>
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	6011      	str	r1, [r2, #0]
 8009a70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009a74:	bf18      	it	ne
 8009a76:	b21b      	sxthne	r3, r3
 8009a78:	e7cf      	b.n	8009a1a <_printf_i+0x52>
 8009a7a:	6813      	ldr	r3, [r2, #0]
 8009a7c:	6825      	ldr	r5, [r4, #0]
 8009a7e:	1d18      	adds	r0, r3, #4
 8009a80:	6010      	str	r0, [r2, #0]
 8009a82:	0628      	lsls	r0, r5, #24
 8009a84:	d501      	bpl.n	8009a8a <_printf_i+0xc2>
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	e002      	b.n	8009a90 <_printf_i+0xc8>
 8009a8a:	0668      	lsls	r0, r5, #25
 8009a8c:	d5fb      	bpl.n	8009a86 <_printf_i+0xbe>
 8009a8e:	881b      	ldrh	r3, [r3, #0]
 8009a90:	4854      	ldr	r0, [pc, #336]	; (8009be4 <_printf_i+0x21c>)
 8009a92:	296f      	cmp	r1, #111	; 0x6f
 8009a94:	bf14      	ite	ne
 8009a96:	220a      	movne	r2, #10
 8009a98:	2208      	moveq	r2, #8
 8009a9a:	2100      	movs	r1, #0
 8009a9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009aa0:	6865      	ldr	r5, [r4, #4]
 8009aa2:	60a5      	str	r5, [r4, #8]
 8009aa4:	2d00      	cmp	r5, #0
 8009aa6:	f2c0 8095 	blt.w	8009bd4 <_printf_i+0x20c>
 8009aaa:	6821      	ldr	r1, [r4, #0]
 8009aac:	f021 0104 	bic.w	r1, r1, #4
 8009ab0:	6021      	str	r1, [r4, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d13d      	bne.n	8009b32 <_printf_i+0x16a>
 8009ab6:	2d00      	cmp	r5, #0
 8009ab8:	f040 808e 	bne.w	8009bd8 <_printf_i+0x210>
 8009abc:	4665      	mov	r5, ip
 8009abe:	2a08      	cmp	r2, #8
 8009ac0:	d10b      	bne.n	8009ada <_printf_i+0x112>
 8009ac2:	6823      	ldr	r3, [r4, #0]
 8009ac4:	07db      	lsls	r3, r3, #31
 8009ac6:	d508      	bpl.n	8009ada <_printf_i+0x112>
 8009ac8:	6923      	ldr	r3, [r4, #16]
 8009aca:	6862      	ldr	r2, [r4, #4]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	bfde      	ittt	le
 8009ad0:	2330      	movle	r3, #48	; 0x30
 8009ad2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009ad6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009ada:	ebac 0305 	sub.w	r3, ip, r5
 8009ade:	6123      	str	r3, [r4, #16]
 8009ae0:	f8cd 8000 	str.w	r8, [sp]
 8009ae4:	463b      	mov	r3, r7
 8009ae6:	aa03      	add	r2, sp, #12
 8009ae8:	4621      	mov	r1, r4
 8009aea:	4630      	mov	r0, r6
 8009aec:	f7ff fef6 	bl	80098dc <_printf_common>
 8009af0:	3001      	adds	r0, #1
 8009af2:	d14d      	bne.n	8009b90 <_printf_i+0x1c8>
 8009af4:	f04f 30ff 	mov.w	r0, #4294967295
 8009af8:	b005      	add	sp, #20
 8009afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009afe:	4839      	ldr	r0, [pc, #228]	; (8009be4 <_printf_i+0x21c>)
 8009b00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009b04:	6813      	ldr	r3, [r2, #0]
 8009b06:	6821      	ldr	r1, [r4, #0]
 8009b08:	1d1d      	adds	r5, r3, #4
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	6015      	str	r5, [r2, #0]
 8009b0e:	060a      	lsls	r2, r1, #24
 8009b10:	d50b      	bpl.n	8009b2a <_printf_i+0x162>
 8009b12:	07ca      	lsls	r2, r1, #31
 8009b14:	bf44      	itt	mi
 8009b16:	f041 0120 	orrmi.w	r1, r1, #32
 8009b1a:	6021      	strmi	r1, [r4, #0]
 8009b1c:	b91b      	cbnz	r3, 8009b26 <_printf_i+0x15e>
 8009b1e:	6822      	ldr	r2, [r4, #0]
 8009b20:	f022 0220 	bic.w	r2, r2, #32
 8009b24:	6022      	str	r2, [r4, #0]
 8009b26:	2210      	movs	r2, #16
 8009b28:	e7b7      	b.n	8009a9a <_printf_i+0xd2>
 8009b2a:	064d      	lsls	r5, r1, #25
 8009b2c:	bf48      	it	mi
 8009b2e:	b29b      	uxthmi	r3, r3
 8009b30:	e7ef      	b.n	8009b12 <_printf_i+0x14a>
 8009b32:	4665      	mov	r5, ip
 8009b34:	fbb3 f1f2 	udiv	r1, r3, r2
 8009b38:	fb02 3311 	mls	r3, r2, r1, r3
 8009b3c:	5cc3      	ldrb	r3, [r0, r3]
 8009b3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009b42:	460b      	mov	r3, r1
 8009b44:	2900      	cmp	r1, #0
 8009b46:	d1f5      	bne.n	8009b34 <_printf_i+0x16c>
 8009b48:	e7b9      	b.n	8009abe <_printf_i+0xf6>
 8009b4a:	6813      	ldr	r3, [r2, #0]
 8009b4c:	6825      	ldr	r5, [r4, #0]
 8009b4e:	6961      	ldr	r1, [r4, #20]
 8009b50:	1d18      	adds	r0, r3, #4
 8009b52:	6010      	str	r0, [r2, #0]
 8009b54:	0628      	lsls	r0, r5, #24
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	d501      	bpl.n	8009b5e <_printf_i+0x196>
 8009b5a:	6019      	str	r1, [r3, #0]
 8009b5c:	e002      	b.n	8009b64 <_printf_i+0x19c>
 8009b5e:	066a      	lsls	r2, r5, #25
 8009b60:	d5fb      	bpl.n	8009b5a <_printf_i+0x192>
 8009b62:	8019      	strh	r1, [r3, #0]
 8009b64:	2300      	movs	r3, #0
 8009b66:	6123      	str	r3, [r4, #16]
 8009b68:	4665      	mov	r5, ip
 8009b6a:	e7b9      	b.n	8009ae0 <_printf_i+0x118>
 8009b6c:	6813      	ldr	r3, [r2, #0]
 8009b6e:	1d19      	adds	r1, r3, #4
 8009b70:	6011      	str	r1, [r2, #0]
 8009b72:	681d      	ldr	r5, [r3, #0]
 8009b74:	6862      	ldr	r2, [r4, #4]
 8009b76:	2100      	movs	r1, #0
 8009b78:	4628      	mov	r0, r5
 8009b7a:	f7f6 fb61 	bl	8000240 <memchr>
 8009b7e:	b108      	cbz	r0, 8009b84 <_printf_i+0x1bc>
 8009b80:	1b40      	subs	r0, r0, r5
 8009b82:	6060      	str	r0, [r4, #4]
 8009b84:	6863      	ldr	r3, [r4, #4]
 8009b86:	6123      	str	r3, [r4, #16]
 8009b88:	2300      	movs	r3, #0
 8009b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b8e:	e7a7      	b.n	8009ae0 <_printf_i+0x118>
 8009b90:	6923      	ldr	r3, [r4, #16]
 8009b92:	462a      	mov	r2, r5
 8009b94:	4639      	mov	r1, r7
 8009b96:	4630      	mov	r0, r6
 8009b98:	47c0      	blx	r8
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	d0aa      	beq.n	8009af4 <_printf_i+0x12c>
 8009b9e:	6823      	ldr	r3, [r4, #0]
 8009ba0:	079b      	lsls	r3, r3, #30
 8009ba2:	d413      	bmi.n	8009bcc <_printf_i+0x204>
 8009ba4:	68e0      	ldr	r0, [r4, #12]
 8009ba6:	9b03      	ldr	r3, [sp, #12]
 8009ba8:	4298      	cmp	r0, r3
 8009baa:	bfb8      	it	lt
 8009bac:	4618      	movlt	r0, r3
 8009bae:	e7a3      	b.n	8009af8 <_printf_i+0x130>
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	464a      	mov	r2, r9
 8009bb4:	4639      	mov	r1, r7
 8009bb6:	4630      	mov	r0, r6
 8009bb8:	47c0      	blx	r8
 8009bba:	3001      	adds	r0, #1
 8009bbc:	d09a      	beq.n	8009af4 <_printf_i+0x12c>
 8009bbe:	3501      	adds	r5, #1
 8009bc0:	68e3      	ldr	r3, [r4, #12]
 8009bc2:	9a03      	ldr	r2, [sp, #12]
 8009bc4:	1a9b      	subs	r3, r3, r2
 8009bc6:	42ab      	cmp	r3, r5
 8009bc8:	dcf2      	bgt.n	8009bb0 <_printf_i+0x1e8>
 8009bca:	e7eb      	b.n	8009ba4 <_printf_i+0x1dc>
 8009bcc:	2500      	movs	r5, #0
 8009bce:	f104 0919 	add.w	r9, r4, #25
 8009bd2:	e7f5      	b.n	8009bc0 <_printf_i+0x1f8>
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d1ac      	bne.n	8009b32 <_printf_i+0x16a>
 8009bd8:	7803      	ldrb	r3, [r0, #0]
 8009bda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009bde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009be2:	e76c      	b.n	8009abe <_printf_i+0xf6>
 8009be4:	0801396e 	.word	0x0801396e
 8009be8:	0801397f 	.word	0x0801397f

08009bec <iprintf>:
 8009bec:	b40f      	push	{r0, r1, r2, r3}
 8009bee:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <iprintf+0x2c>)
 8009bf0:	b513      	push	{r0, r1, r4, lr}
 8009bf2:	681c      	ldr	r4, [r3, #0]
 8009bf4:	b124      	cbz	r4, 8009c00 <iprintf+0x14>
 8009bf6:	69a3      	ldr	r3, [r4, #24]
 8009bf8:	b913      	cbnz	r3, 8009c00 <iprintf+0x14>
 8009bfa:	4620      	mov	r0, r4
 8009bfc:	f001 f8d4 	bl	800ada8 <__sinit>
 8009c00:	ab05      	add	r3, sp, #20
 8009c02:	9a04      	ldr	r2, [sp, #16]
 8009c04:	68a1      	ldr	r1, [r4, #8]
 8009c06:	9301      	str	r3, [sp, #4]
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f001 fe3b 	bl	800b884 <_vfiprintf_r>
 8009c0e:	b002      	add	sp, #8
 8009c10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c14:	b004      	add	sp, #16
 8009c16:	4770      	bx	lr
 8009c18:	20000010 	.word	0x20000010

08009c1c <_puts_r>:
 8009c1c:	b570      	push	{r4, r5, r6, lr}
 8009c1e:	460e      	mov	r6, r1
 8009c20:	4605      	mov	r5, r0
 8009c22:	b118      	cbz	r0, 8009c2c <_puts_r+0x10>
 8009c24:	6983      	ldr	r3, [r0, #24]
 8009c26:	b90b      	cbnz	r3, 8009c2c <_puts_r+0x10>
 8009c28:	f001 f8be 	bl	800ada8 <__sinit>
 8009c2c:	69ab      	ldr	r3, [r5, #24]
 8009c2e:	68ac      	ldr	r4, [r5, #8]
 8009c30:	b913      	cbnz	r3, 8009c38 <_puts_r+0x1c>
 8009c32:	4628      	mov	r0, r5
 8009c34:	f001 f8b8 	bl	800ada8 <__sinit>
 8009c38:	4b23      	ldr	r3, [pc, #140]	; (8009cc8 <_puts_r+0xac>)
 8009c3a:	429c      	cmp	r4, r3
 8009c3c:	d117      	bne.n	8009c6e <_puts_r+0x52>
 8009c3e:	686c      	ldr	r4, [r5, #4]
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	071b      	lsls	r3, r3, #28
 8009c44:	d51d      	bpl.n	8009c82 <_puts_r+0x66>
 8009c46:	6923      	ldr	r3, [r4, #16]
 8009c48:	b1db      	cbz	r3, 8009c82 <_puts_r+0x66>
 8009c4a:	3e01      	subs	r6, #1
 8009c4c:	68a3      	ldr	r3, [r4, #8]
 8009c4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009c52:	3b01      	subs	r3, #1
 8009c54:	60a3      	str	r3, [r4, #8]
 8009c56:	b9e9      	cbnz	r1, 8009c94 <_puts_r+0x78>
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	da2e      	bge.n	8009cba <_puts_r+0x9e>
 8009c5c:	4622      	mov	r2, r4
 8009c5e:	210a      	movs	r1, #10
 8009c60:	4628      	mov	r0, r5
 8009c62:	f000 f8ab 	bl	8009dbc <__swbuf_r>
 8009c66:	3001      	adds	r0, #1
 8009c68:	d011      	beq.n	8009c8e <_puts_r+0x72>
 8009c6a:	200a      	movs	r0, #10
 8009c6c:	e011      	b.n	8009c92 <_puts_r+0x76>
 8009c6e:	4b17      	ldr	r3, [pc, #92]	; (8009ccc <_puts_r+0xb0>)
 8009c70:	429c      	cmp	r4, r3
 8009c72:	d101      	bne.n	8009c78 <_puts_r+0x5c>
 8009c74:	68ac      	ldr	r4, [r5, #8]
 8009c76:	e7e3      	b.n	8009c40 <_puts_r+0x24>
 8009c78:	4b15      	ldr	r3, [pc, #84]	; (8009cd0 <_puts_r+0xb4>)
 8009c7a:	429c      	cmp	r4, r3
 8009c7c:	bf08      	it	eq
 8009c7e:	68ec      	ldreq	r4, [r5, #12]
 8009c80:	e7de      	b.n	8009c40 <_puts_r+0x24>
 8009c82:	4621      	mov	r1, r4
 8009c84:	4628      	mov	r0, r5
 8009c86:	f000 f8eb 	bl	8009e60 <__swsetup_r>
 8009c8a:	2800      	cmp	r0, #0
 8009c8c:	d0dd      	beq.n	8009c4a <_puts_r+0x2e>
 8009c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009c92:	bd70      	pop	{r4, r5, r6, pc}
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	da04      	bge.n	8009ca2 <_puts_r+0x86>
 8009c98:	69a2      	ldr	r2, [r4, #24]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	dc06      	bgt.n	8009cac <_puts_r+0x90>
 8009c9e:	290a      	cmp	r1, #10
 8009ca0:	d004      	beq.n	8009cac <_puts_r+0x90>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	1c5a      	adds	r2, r3, #1
 8009ca6:	6022      	str	r2, [r4, #0]
 8009ca8:	7019      	strb	r1, [r3, #0]
 8009caa:	e7cf      	b.n	8009c4c <_puts_r+0x30>
 8009cac:	4622      	mov	r2, r4
 8009cae:	4628      	mov	r0, r5
 8009cb0:	f000 f884 	bl	8009dbc <__swbuf_r>
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d1c9      	bne.n	8009c4c <_puts_r+0x30>
 8009cb8:	e7e9      	b.n	8009c8e <_puts_r+0x72>
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	200a      	movs	r0, #10
 8009cbe:	1c5a      	adds	r2, r3, #1
 8009cc0:	6022      	str	r2, [r4, #0]
 8009cc2:	7018      	strb	r0, [r3, #0]
 8009cc4:	e7e5      	b.n	8009c92 <_puts_r+0x76>
 8009cc6:	bf00      	nop
 8009cc8:	080139c0 	.word	0x080139c0
 8009ccc:	080139e0 	.word	0x080139e0
 8009cd0:	080139a0 	.word	0x080139a0

08009cd4 <puts>:
 8009cd4:	4b02      	ldr	r3, [pc, #8]	; (8009ce0 <puts+0xc>)
 8009cd6:	4601      	mov	r1, r0
 8009cd8:	6818      	ldr	r0, [r3, #0]
 8009cda:	f7ff bf9f 	b.w	8009c1c <_puts_r>
 8009cde:	bf00      	nop
 8009ce0:	20000010 	.word	0x20000010

08009ce4 <_sbrk_r>:
 8009ce4:	b538      	push	{r3, r4, r5, lr}
 8009ce6:	4c06      	ldr	r4, [pc, #24]	; (8009d00 <_sbrk_r+0x1c>)
 8009ce8:	2300      	movs	r3, #0
 8009cea:	4605      	mov	r5, r0
 8009cec:	4608      	mov	r0, r1
 8009cee:	6023      	str	r3, [r4, #0]
 8009cf0:	f7f8 fbb6 	bl	8002460 <_sbrk>
 8009cf4:	1c43      	adds	r3, r0, #1
 8009cf6:	d102      	bne.n	8009cfe <_sbrk_r+0x1a>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	b103      	cbz	r3, 8009cfe <_sbrk_r+0x1a>
 8009cfc:	602b      	str	r3, [r5, #0]
 8009cfe:	bd38      	pop	{r3, r4, r5, pc}
 8009d00:	20000ed0 	.word	0x20000ed0

08009d04 <sniprintf>:
 8009d04:	b40c      	push	{r2, r3}
 8009d06:	b530      	push	{r4, r5, lr}
 8009d08:	4b17      	ldr	r3, [pc, #92]	; (8009d68 <sniprintf+0x64>)
 8009d0a:	1e0c      	subs	r4, r1, #0
 8009d0c:	b09d      	sub	sp, #116	; 0x74
 8009d0e:	681d      	ldr	r5, [r3, #0]
 8009d10:	da08      	bge.n	8009d24 <sniprintf+0x20>
 8009d12:	238b      	movs	r3, #139	; 0x8b
 8009d14:	602b      	str	r3, [r5, #0]
 8009d16:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1a:	b01d      	add	sp, #116	; 0x74
 8009d1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d20:	b002      	add	sp, #8
 8009d22:	4770      	bx	lr
 8009d24:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009d28:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009d2c:	bf14      	ite	ne
 8009d2e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d32:	4623      	moveq	r3, r4
 8009d34:	9304      	str	r3, [sp, #16]
 8009d36:	9307      	str	r3, [sp, #28]
 8009d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d3c:	9002      	str	r0, [sp, #8]
 8009d3e:	9006      	str	r0, [sp, #24]
 8009d40:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009d46:	ab21      	add	r3, sp, #132	; 0x84
 8009d48:	a902      	add	r1, sp, #8
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	9301      	str	r3, [sp, #4]
 8009d4e:	f001 fc77 	bl	800b640 <_svfiprintf_r>
 8009d52:	1c43      	adds	r3, r0, #1
 8009d54:	bfbc      	itt	lt
 8009d56:	238b      	movlt	r3, #139	; 0x8b
 8009d58:	602b      	strlt	r3, [r5, #0]
 8009d5a:	2c00      	cmp	r4, #0
 8009d5c:	d0dd      	beq.n	8009d1a <sniprintf+0x16>
 8009d5e:	9b02      	ldr	r3, [sp, #8]
 8009d60:	2200      	movs	r2, #0
 8009d62:	701a      	strb	r2, [r3, #0]
 8009d64:	e7d9      	b.n	8009d1a <sniprintf+0x16>
 8009d66:	bf00      	nop
 8009d68:	20000010 	.word	0x20000010

08009d6c <siprintf>:
 8009d6c:	b40e      	push	{r1, r2, r3}
 8009d6e:	b500      	push	{lr}
 8009d70:	b09c      	sub	sp, #112	; 0x70
 8009d72:	ab1d      	add	r3, sp, #116	; 0x74
 8009d74:	9002      	str	r0, [sp, #8]
 8009d76:	9006      	str	r0, [sp, #24]
 8009d78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d7c:	4809      	ldr	r0, [pc, #36]	; (8009da4 <siprintf+0x38>)
 8009d7e:	9107      	str	r1, [sp, #28]
 8009d80:	9104      	str	r1, [sp, #16]
 8009d82:	4909      	ldr	r1, [pc, #36]	; (8009da8 <siprintf+0x3c>)
 8009d84:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d88:	9105      	str	r1, [sp, #20]
 8009d8a:	6800      	ldr	r0, [r0, #0]
 8009d8c:	9301      	str	r3, [sp, #4]
 8009d8e:	a902      	add	r1, sp, #8
 8009d90:	f001 fc56 	bl	800b640 <_svfiprintf_r>
 8009d94:	9b02      	ldr	r3, [sp, #8]
 8009d96:	2200      	movs	r2, #0
 8009d98:	701a      	strb	r2, [r3, #0]
 8009d9a:	b01c      	add	sp, #112	; 0x70
 8009d9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009da0:	b003      	add	sp, #12
 8009da2:	4770      	bx	lr
 8009da4:	20000010 	.word	0x20000010
 8009da8:	ffff0208 	.word	0xffff0208

08009dac <strcpy>:
 8009dac:	4603      	mov	r3, r0
 8009dae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009db2:	f803 2b01 	strb.w	r2, [r3], #1
 8009db6:	2a00      	cmp	r2, #0
 8009db8:	d1f9      	bne.n	8009dae <strcpy+0x2>
 8009dba:	4770      	bx	lr

08009dbc <__swbuf_r>:
 8009dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dbe:	460e      	mov	r6, r1
 8009dc0:	4614      	mov	r4, r2
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	b118      	cbz	r0, 8009dce <__swbuf_r+0x12>
 8009dc6:	6983      	ldr	r3, [r0, #24]
 8009dc8:	b90b      	cbnz	r3, 8009dce <__swbuf_r+0x12>
 8009dca:	f000 ffed 	bl	800ada8 <__sinit>
 8009dce:	4b21      	ldr	r3, [pc, #132]	; (8009e54 <__swbuf_r+0x98>)
 8009dd0:	429c      	cmp	r4, r3
 8009dd2:	d12a      	bne.n	8009e2a <__swbuf_r+0x6e>
 8009dd4:	686c      	ldr	r4, [r5, #4]
 8009dd6:	69a3      	ldr	r3, [r4, #24]
 8009dd8:	60a3      	str	r3, [r4, #8]
 8009dda:	89a3      	ldrh	r3, [r4, #12]
 8009ddc:	071a      	lsls	r2, r3, #28
 8009dde:	d52e      	bpl.n	8009e3e <__swbuf_r+0x82>
 8009de0:	6923      	ldr	r3, [r4, #16]
 8009de2:	b363      	cbz	r3, 8009e3e <__swbuf_r+0x82>
 8009de4:	6923      	ldr	r3, [r4, #16]
 8009de6:	6820      	ldr	r0, [r4, #0]
 8009de8:	1ac0      	subs	r0, r0, r3
 8009dea:	6963      	ldr	r3, [r4, #20]
 8009dec:	b2f6      	uxtb	r6, r6
 8009dee:	4283      	cmp	r3, r0
 8009df0:	4637      	mov	r7, r6
 8009df2:	dc04      	bgt.n	8009dfe <__swbuf_r+0x42>
 8009df4:	4621      	mov	r1, r4
 8009df6:	4628      	mov	r0, r5
 8009df8:	f000 ff6c 	bl	800acd4 <_fflush_r>
 8009dfc:	bb28      	cbnz	r0, 8009e4a <__swbuf_r+0x8e>
 8009dfe:	68a3      	ldr	r3, [r4, #8]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	60a3      	str	r3, [r4, #8]
 8009e04:	6823      	ldr	r3, [r4, #0]
 8009e06:	1c5a      	adds	r2, r3, #1
 8009e08:	6022      	str	r2, [r4, #0]
 8009e0a:	701e      	strb	r6, [r3, #0]
 8009e0c:	6963      	ldr	r3, [r4, #20]
 8009e0e:	3001      	adds	r0, #1
 8009e10:	4283      	cmp	r3, r0
 8009e12:	d004      	beq.n	8009e1e <__swbuf_r+0x62>
 8009e14:	89a3      	ldrh	r3, [r4, #12]
 8009e16:	07db      	lsls	r3, r3, #31
 8009e18:	d519      	bpl.n	8009e4e <__swbuf_r+0x92>
 8009e1a:	2e0a      	cmp	r6, #10
 8009e1c:	d117      	bne.n	8009e4e <__swbuf_r+0x92>
 8009e1e:	4621      	mov	r1, r4
 8009e20:	4628      	mov	r0, r5
 8009e22:	f000 ff57 	bl	800acd4 <_fflush_r>
 8009e26:	b190      	cbz	r0, 8009e4e <__swbuf_r+0x92>
 8009e28:	e00f      	b.n	8009e4a <__swbuf_r+0x8e>
 8009e2a:	4b0b      	ldr	r3, [pc, #44]	; (8009e58 <__swbuf_r+0x9c>)
 8009e2c:	429c      	cmp	r4, r3
 8009e2e:	d101      	bne.n	8009e34 <__swbuf_r+0x78>
 8009e30:	68ac      	ldr	r4, [r5, #8]
 8009e32:	e7d0      	b.n	8009dd6 <__swbuf_r+0x1a>
 8009e34:	4b09      	ldr	r3, [pc, #36]	; (8009e5c <__swbuf_r+0xa0>)
 8009e36:	429c      	cmp	r4, r3
 8009e38:	bf08      	it	eq
 8009e3a:	68ec      	ldreq	r4, [r5, #12]
 8009e3c:	e7cb      	b.n	8009dd6 <__swbuf_r+0x1a>
 8009e3e:	4621      	mov	r1, r4
 8009e40:	4628      	mov	r0, r5
 8009e42:	f000 f80d 	bl	8009e60 <__swsetup_r>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d0cc      	beq.n	8009de4 <__swbuf_r+0x28>
 8009e4a:	f04f 37ff 	mov.w	r7, #4294967295
 8009e4e:	4638      	mov	r0, r7
 8009e50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e52:	bf00      	nop
 8009e54:	080139c0 	.word	0x080139c0
 8009e58:	080139e0 	.word	0x080139e0
 8009e5c:	080139a0 	.word	0x080139a0

08009e60 <__swsetup_r>:
 8009e60:	4b32      	ldr	r3, [pc, #200]	; (8009f2c <__swsetup_r+0xcc>)
 8009e62:	b570      	push	{r4, r5, r6, lr}
 8009e64:	681d      	ldr	r5, [r3, #0]
 8009e66:	4606      	mov	r6, r0
 8009e68:	460c      	mov	r4, r1
 8009e6a:	b125      	cbz	r5, 8009e76 <__swsetup_r+0x16>
 8009e6c:	69ab      	ldr	r3, [r5, #24]
 8009e6e:	b913      	cbnz	r3, 8009e76 <__swsetup_r+0x16>
 8009e70:	4628      	mov	r0, r5
 8009e72:	f000 ff99 	bl	800ada8 <__sinit>
 8009e76:	4b2e      	ldr	r3, [pc, #184]	; (8009f30 <__swsetup_r+0xd0>)
 8009e78:	429c      	cmp	r4, r3
 8009e7a:	d10f      	bne.n	8009e9c <__swsetup_r+0x3c>
 8009e7c:	686c      	ldr	r4, [r5, #4]
 8009e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e82:	b29a      	uxth	r2, r3
 8009e84:	0715      	lsls	r5, r2, #28
 8009e86:	d42c      	bmi.n	8009ee2 <__swsetup_r+0x82>
 8009e88:	06d0      	lsls	r0, r2, #27
 8009e8a:	d411      	bmi.n	8009eb0 <__swsetup_r+0x50>
 8009e8c:	2209      	movs	r2, #9
 8009e8e:	6032      	str	r2, [r6, #0]
 8009e90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009e94:	81a3      	strh	r3, [r4, #12]
 8009e96:	f04f 30ff 	mov.w	r0, #4294967295
 8009e9a:	e03e      	b.n	8009f1a <__swsetup_r+0xba>
 8009e9c:	4b25      	ldr	r3, [pc, #148]	; (8009f34 <__swsetup_r+0xd4>)
 8009e9e:	429c      	cmp	r4, r3
 8009ea0:	d101      	bne.n	8009ea6 <__swsetup_r+0x46>
 8009ea2:	68ac      	ldr	r4, [r5, #8]
 8009ea4:	e7eb      	b.n	8009e7e <__swsetup_r+0x1e>
 8009ea6:	4b24      	ldr	r3, [pc, #144]	; (8009f38 <__swsetup_r+0xd8>)
 8009ea8:	429c      	cmp	r4, r3
 8009eaa:	bf08      	it	eq
 8009eac:	68ec      	ldreq	r4, [r5, #12]
 8009eae:	e7e6      	b.n	8009e7e <__swsetup_r+0x1e>
 8009eb0:	0751      	lsls	r1, r2, #29
 8009eb2:	d512      	bpl.n	8009eda <__swsetup_r+0x7a>
 8009eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009eb6:	b141      	cbz	r1, 8009eca <__swsetup_r+0x6a>
 8009eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ebc:	4299      	cmp	r1, r3
 8009ebe:	d002      	beq.n	8009ec6 <__swsetup_r+0x66>
 8009ec0:	4630      	mov	r0, r6
 8009ec2:	f7ff f98f 	bl	80091e4 <_free_r>
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	6363      	str	r3, [r4, #52]	; 0x34
 8009eca:	89a3      	ldrh	r3, [r4, #12]
 8009ecc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009ed0:	81a3      	strh	r3, [r4, #12]
 8009ed2:	2300      	movs	r3, #0
 8009ed4:	6063      	str	r3, [r4, #4]
 8009ed6:	6923      	ldr	r3, [r4, #16]
 8009ed8:	6023      	str	r3, [r4, #0]
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	f043 0308 	orr.w	r3, r3, #8
 8009ee0:	81a3      	strh	r3, [r4, #12]
 8009ee2:	6923      	ldr	r3, [r4, #16]
 8009ee4:	b94b      	cbnz	r3, 8009efa <__swsetup_r+0x9a>
 8009ee6:	89a3      	ldrh	r3, [r4, #12]
 8009ee8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ef0:	d003      	beq.n	8009efa <__swsetup_r+0x9a>
 8009ef2:	4621      	mov	r1, r4
 8009ef4:	4630      	mov	r0, r6
 8009ef6:	f001 f813 	bl	800af20 <__smakebuf_r>
 8009efa:	89a2      	ldrh	r2, [r4, #12]
 8009efc:	f012 0301 	ands.w	r3, r2, #1
 8009f00:	d00c      	beq.n	8009f1c <__swsetup_r+0xbc>
 8009f02:	2300      	movs	r3, #0
 8009f04:	60a3      	str	r3, [r4, #8]
 8009f06:	6963      	ldr	r3, [r4, #20]
 8009f08:	425b      	negs	r3, r3
 8009f0a:	61a3      	str	r3, [r4, #24]
 8009f0c:	6923      	ldr	r3, [r4, #16]
 8009f0e:	b953      	cbnz	r3, 8009f26 <__swsetup_r+0xc6>
 8009f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f14:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009f18:	d1ba      	bne.n	8009e90 <__swsetup_r+0x30>
 8009f1a:	bd70      	pop	{r4, r5, r6, pc}
 8009f1c:	0792      	lsls	r2, r2, #30
 8009f1e:	bf58      	it	pl
 8009f20:	6963      	ldrpl	r3, [r4, #20]
 8009f22:	60a3      	str	r3, [r4, #8]
 8009f24:	e7f2      	b.n	8009f0c <__swsetup_r+0xac>
 8009f26:	2000      	movs	r0, #0
 8009f28:	e7f7      	b.n	8009f1a <__swsetup_r+0xba>
 8009f2a:	bf00      	nop
 8009f2c:	20000010 	.word	0x20000010
 8009f30:	080139c0 	.word	0x080139c0
 8009f34:	080139e0 	.word	0x080139e0
 8009f38:	080139a0 	.word	0x080139a0

08009f3c <quorem>:
 8009f3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f40:	6903      	ldr	r3, [r0, #16]
 8009f42:	690c      	ldr	r4, [r1, #16]
 8009f44:	42a3      	cmp	r3, r4
 8009f46:	4680      	mov	r8, r0
 8009f48:	f2c0 8082 	blt.w	800a050 <quorem+0x114>
 8009f4c:	3c01      	subs	r4, #1
 8009f4e:	f101 0714 	add.w	r7, r1, #20
 8009f52:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009f56:	f100 0614 	add.w	r6, r0, #20
 8009f5a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009f5e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009f62:	eb06 030c 	add.w	r3, r6, ip
 8009f66:	3501      	adds	r5, #1
 8009f68:	eb07 090c 	add.w	r9, r7, ip
 8009f6c:	9301      	str	r3, [sp, #4]
 8009f6e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009f72:	b395      	cbz	r5, 8009fda <quorem+0x9e>
 8009f74:	f04f 0a00 	mov.w	sl, #0
 8009f78:	4638      	mov	r0, r7
 8009f7a:	46b6      	mov	lr, r6
 8009f7c:	46d3      	mov	fp, sl
 8009f7e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f82:	b293      	uxth	r3, r2
 8009f84:	fb05 a303 	mla	r3, r5, r3, sl
 8009f88:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	ebab 0303 	sub.w	r3, fp, r3
 8009f92:	0c12      	lsrs	r2, r2, #16
 8009f94:	f8de b000 	ldr.w	fp, [lr]
 8009f98:	fb05 a202 	mla	r2, r5, r2, sl
 8009f9c:	fa13 f38b 	uxtah	r3, r3, fp
 8009fa0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009fa4:	fa1f fb82 	uxth.w	fp, r2
 8009fa8:	f8de 2000 	ldr.w	r2, [lr]
 8009fac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009fb0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fb4:	b29b      	uxth	r3, r3
 8009fb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fba:	4581      	cmp	r9, r0
 8009fbc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009fc0:	f84e 3b04 	str.w	r3, [lr], #4
 8009fc4:	d2db      	bcs.n	8009f7e <quorem+0x42>
 8009fc6:	f856 300c 	ldr.w	r3, [r6, ip]
 8009fca:	b933      	cbnz	r3, 8009fda <quorem+0x9e>
 8009fcc:	9b01      	ldr	r3, [sp, #4]
 8009fce:	3b04      	subs	r3, #4
 8009fd0:	429e      	cmp	r6, r3
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	d330      	bcc.n	800a038 <quorem+0xfc>
 8009fd6:	f8c8 4010 	str.w	r4, [r8, #16]
 8009fda:	4640      	mov	r0, r8
 8009fdc:	f001 fa02 	bl	800b3e4 <__mcmp>
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	db25      	blt.n	800a030 <quorem+0xf4>
 8009fe4:	3501      	adds	r5, #1
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	f04f 0c00 	mov.w	ip, #0
 8009fec:	f857 2b04 	ldr.w	r2, [r7], #4
 8009ff0:	f8d0 e000 	ldr.w	lr, [r0]
 8009ff4:	b293      	uxth	r3, r2
 8009ff6:	ebac 0303 	sub.w	r3, ip, r3
 8009ffa:	0c12      	lsrs	r2, r2, #16
 8009ffc:	fa13 f38e 	uxtah	r3, r3, lr
 800a000:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a004:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a008:	b29b      	uxth	r3, r3
 800a00a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a00e:	45b9      	cmp	r9, r7
 800a010:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a014:	f840 3b04 	str.w	r3, [r0], #4
 800a018:	d2e8      	bcs.n	8009fec <quorem+0xb0>
 800a01a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800a01e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800a022:	b92a      	cbnz	r2, 800a030 <quorem+0xf4>
 800a024:	3b04      	subs	r3, #4
 800a026:	429e      	cmp	r6, r3
 800a028:	461a      	mov	r2, r3
 800a02a:	d30b      	bcc.n	800a044 <quorem+0x108>
 800a02c:	f8c8 4010 	str.w	r4, [r8, #16]
 800a030:	4628      	mov	r0, r5
 800a032:	b003      	add	sp, #12
 800a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a038:	6812      	ldr	r2, [r2, #0]
 800a03a:	3b04      	subs	r3, #4
 800a03c:	2a00      	cmp	r2, #0
 800a03e:	d1ca      	bne.n	8009fd6 <quorem+0x9a>
 800a040:	3c01      	subs	r4, #1
 800a042:	e7c5      	b.n	8009fd0 <quorem+0x94>
 800a044:	6812      	ldr	r2, [r2, #0]
 800a046:	3b04      	subs	r3, #4
 800a048:	2a00      	cmp	r2, #0
 800a04a:	d1ef      	bne.n	800a02c <quorem+0xf0>
 800a04c:	3c01      	subs	r4, #1
 800a04e:	e7ea      	b.n	800a026 <quorem+0xea>
 800a050:	2000      	movs	r0, #0
 800a052:	e7ee      	b.n	800a032 <quorem+0xf6>
 800a054:	0000      	movs	r0, r0
	...

0800a058 <_dtoa_r>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	ec57 6b10 	vmov	r6, r7, d0
 800a060:	b097      	sub	sp, #92	; 0x5c
 800a062:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a064:	9106      	str	r1, [sp, #24]
 800a066:	4604      	mov	r4, r0
 800a068:	920b      	str	r2, [sp, #44]	; 0x2c
 800a06a:	9312      	str	r3, [sp, #72]	; 0x48
 800a06c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a070:	e9cd 6700 	strd	r6, r7, [sp]
 800a074:	b93d      	cbnz	r5, 800a086 <_dtoa_r+0x2e>
 800a076:	2010      	movs	r0, #16
 800a078:	f7ff f89c 	bl	80091b4 <malloc>
 800a07c:	6260      	str	r0, [r4, #36]	; 0x24
 800a07e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a082:	6005      	str	r5, [r0, #0]
 800a084:	60c5      	str	r5, [r0, #12]
 800a086:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a088:	6819      	ldr	r1, [r3, #0]
 800a08a:	b151      	cbz	r1, 800a0a2 <_dtoa_r+0x4a>
 800a08c:	685a      	ldr	r2, [r3, #4]
 800a08e:	604a      	str	r2, [r1, #4]
 800a090:	2301      	movs	r3, #1
 800a092:	4093      	lsls	r3, r2
 800a094:	608b      	str	r3, [r1, #8]
 800a096:	4620      	mov	r0, r4
 800a098:	f000 ffc3 	bl	800b022 <_Bfree>
 800a09c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a09e:	2200      	movs	r2, #0
 800a0a0:	601a      	str	r2, [r3, #0]
 800a0a2:	1e3b      	subs	r3, r7, #0
 800a0a4:	bfbb      	ittet	lt
 800a0a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a0aa:	9301      	strlt	r3, [sp, #4]
 800a0ac:	2300      	movge	r3, #0
 800a0ae:	2201      	movlt	r2, #1
 800a0b0:	bfac      	ite	ge
 800a0b2:	f8c8 3000 	strge.w	r3, [r8]
 800a0b6:	f8c8 2000 	strlt.w	r2, [r8]
 800a0ba:	4baf      	ldr	r3, [pc, #700]	; (800a378 <_dtoa_r+0x320>)
 800a0bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a0c0:	ea33 0308 	bics.w	r3, r3, r8
 800a0c4:	d114      	bne.n	800a0f0 <_dtoa_r+0x98>
 800a0c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a0c8:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0cc:	6013      	str	r3, [r2, #0]
 800a0ce:	9b00      	ldr	r3, [sp, #0]
 800a0d0:	b923      	cbnz	r3, 800a0dc <_dtoa_r+0x84>
 800a0d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800a0d6:	2800      	cmp	r0, #0
 800a0d8:	f000 8542 	beq.w	800ab60 <_dtoa_r+0xb08>
 800a0dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0de:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a38c <_dtoa_r+0x334>
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	f000 8544 	beq.w	800ab70 <_dtoa_r+0xb18>
 800a0e8:	f10b 0303 	add.w	r3, fp, #3
 800a0ec:	f000 bd3e 	b.w	800ab6c <_dtoa_r+0xb14>
 800a0f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a0f4:	2200      	movs	r2, #0
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	4630      	mov	r0, r6
 800a0fa:	4639      	mov	r1, r7
 800a0fc:	f7f6 fd14 	bl	8000b28 <__aeabi_dcmpeq>
 800a100:	4681      	mov	r9, r0
 800a102:	b168      	cbz	r0, 800a120 <_dtoa_r+0xc8>
 800a104:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a106:	2301      	movs	r3, #1
 800a108:	6013      	str	r3, [r2, #0]
 800a10a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	f000 8524 	beq.w	800ab5a <_dtoa_r+0xb02>
 800a112:	4b9a      	ldr	r3, [pc, #616]	; (800a37c <_dtoa_r+0x324>)
 800a114:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a116:	f103 3bff 	add.w	fp, r3, #4294967295
 800a11a:	6013      	str	r3, [r2, #0]
 800a11c:	f000 bd28 	b.w	800ab70 <_dtoa_r+0xb18>
 800a120:	aa14      	add	r2, sp, #80	; 0x50
 800a122:	a915      	add	r1, sp, #84	; 0x54
 800a124:	ec47 6b10 	vmov	d0, r6, r7
 800a128:	4620      	mov	r0, r4
 800a12a:	f001 f9d2 	bl	800b4d2 <__d2b>
 800a12e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a132:	9004      	str	r0, [sp, #16]
 800a134:	2d00      	cmp	r5, #0
 800a136:	d07c      	beq.n	800a232 <_dtoa_r+0x1da>
 800a138:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a13c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a140:	46b2      	mov	sl, r6
 800a142:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a146:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a14a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a14e:	2200      	movs	r2, #0
 800a150:	4b8b      	ldr	r3, [pc, #556]	; (800a380 <_dtoa_r+0x328>)
 800a152:	4650      	mov	r0, sl
 800a154:	4659      	mov	r1, fp
 800a156:	f7f6 f8c7 	bl	80002e8 <__aeabi_dsub>
 800a15a:	a381      	add	r3, pc, #516	; (adr r3, 800a360 <_dtoa_r+0x308>)
 800a15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a160:	f7f6 fa7a 	bl	8000658 <__aeabi_dmul>
 800a164:	a380      	add	r3, pc, #512	; (adr r3, 800a368 <_dtoa_r+0x310>)
 800a166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a16a:	f7f6 f8bf 	bl	80002ec <__adddf3>
 800a16e:	4606      	mov	r6, r0
 800a170:	4628      	mov	r0, r5
 800a172:	460f      	mov	r7, r1
 800a174:	f7f6 fa06 	bl	8000584 <__aeabi_i2d>
 800a178:	a37d      	add	r3, pc, #500	; (adr r3, 800a370 <_dtoa_r+0x318>)
 800a17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a17e:	f7f6 fa6b 	bl	8000658 <__aeabi_dmul>
 800a182:	4602      	mov	r2, r0
 800a184:	460b      	mov	r3, r1
 800a186:	4630      	mov	r0, r6
 800a188:	4639      	mov	r1, r7
 800a18a:	f7f6 f8af 	bl	80002ec <__adddf3>
 800a18e:	4606      	mov	r6, r0
 800a190:	460f      	mov	r7, r1
 800a192:	f7f6 fd11 	bl	8000bb8 <__aeabi_d2iz>
 800a196:	2200      	movs	r2, #0
 800a198:	4682      	mov	sl, r0
 800a19a:	2300      	movs	r3, #0
 800a19c:	4630      	mov	r0, r6
 800a19e:	4639      	mov	r1, r7
 800a1a0:	f7f6 fccc 	bl	8000b3c <__aeabi_dcmplt>
 800a1a4:	b148      	cbz	r0, 800a1ba <_dtoa_r+0x162>
 800a1a6:	4650      	mov	r0, sl
 800a1a8:	f7f6 f9ec 	bl	8000584 <__aeabi_i2d>
 800a1ac:	4632      	mov	r2, r6
 800a1ae:	463b      	mov	r3, r7
 800a1b0:	f7f6 fcba 	bl	8000b28 <__aeabi_dcmpeq>
 800a1b4:	b908      	cbnz	r0, 800a1ba <_dtoa_r+0x162>
 800a1b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1ba:	f1ba 0f16 	cmp.w	sl, #22
 800a1be:	d859      	bhi.n	800a274 <_dtoa_r+0x21c>
 800a1c0:	4970      	ldr	r1, [pc, #448]	; (800a384 <_dtoa_r+0x32c>)
 800a1c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a1c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a1ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ce:	f7f6 fcd3 	bl	8000b78 <__aeabi_dcmpgt>
 800a1d2:	2800      	cmp	r0, #0
 800a1d4:	d050      	beq.n	800a278 <_dtoa_r+0x220>
 800a1d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1da:	2300      	movs	r3, #0
 800a1dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a1e0:	1b5d      	subs	r5, r3, r5
 800a1e2:	f1b5 0801 	subs.w	r8, r5, #1
 800a1e6:	bf49      	itett	mi
 800a1e8:	f1c5 0301 	rsbmi	r3, r5, #1
 800a1ec:	2300      	movpl	r3, #0
 800a1ee:	9305      	strmi	r3, [sp, #20]
 800a1f0:	f04f 0800 	movmi.w	r8, #0
 800a1f4:	bf58      	it	pl
 800a1f6:	9305      	strpl	r3, [sp, #20]
 800a1f8:	f1ba 0f00 	cmp.w	sl, #0
 800a1fc:	db3e      	blt.n	800a27c <_dtoa_r+0x224>
 800a1fe:	2300      	movs	r3, #0
 800a200:	44d0      	add	r8, sl
 800a202:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a206:	9307      	str	r3, [sp, #28]
 800a208:	9b06      	ldr	r3, [sp, #24]
 800a20a:	2b09      	cmp	r3, #9
 800a20c:	f200 8090 	bhi.w	800a330 <_dtoa_r+0x2d8>
 800a210:	2b05      	cmp	r3, #5
 800a212:	bfc4      	itt	gt
 800a214:	3b04      	subgt	r3, #4
 800a216:	9306      	strgt	r3, [sp, #24]
 800a218:	9b06      	ldr	r3, [sp, #24]
 800a21a:	f1a3 0302 	sub.w	r3, r3, #2
 800a21e:	bfcc      	ite	gt
 800a220:	2500      	movgt	r5, #0
 800a222:	2501      	movle	r5, #1
 800a224:	2b03      	cmp	r3, #3
 800a226:	f200 808f 	bhi.w	800a348 <_dtoa_r+0x2f0>
 800a22a:	e8df f003 	tbb	[pc, r3]
 800a22e:	7f7d      	.short	0x7f7d
 800a230:	7131      	.short	0x7131
 800a232:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a236:	441d      	add	r5, r3
 800a238:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a23c:	2820      	cmp	r0, #32
 800a23e:	dd13      	ble.n	800a268 <_dtoa_r+0x210>
 800a240:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a244:	9b00      	ldr	r3, [sp, #0]
 800a246:	fa08 f800 	lsl.w	r8, r8, r0
 800a24a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a24e:	fa23 f000 	lsr.w	r0, r3, r0
 800a252:	ea48 0000 	orr.w	r0, r8, r0
 800a256:	f7f6 f985 	bl	8000564 <__aeabi_ui2d>
 800a25a:	2301      	movs	r3, #1
 800a25c:	4682      	mov	sl, r0
 800a25e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a262:	3d01      	subs	r5, #1
 800a264:	9313      	str	r3, [sp, #76]	; 0x4c
 800a266:	e772      	b.n	800a14e <_dtoa_r+0xf6>
 800a268:	9b00      	ldr	r3, [sp, #0]
 800a26a:	f1c0 0020 	rsb	r0, r0, #32
 800a26e:	fa03 f000 	lsl.w	r0, r3, r0
 800a272:	e7f0      	b.n	800a256 <_dtoa_r+0x1fe>
 800a274:	2301      	movs	r3, #1
 800a276:	e7b1      	b.n	800a1dc <_dtoa_r+0x184>
 800a278:	900f      	str	r0, [sp, #60]	; 0x3c
 800a27a:	e7b0      	b.n	800a1de <_dtoa_r+0x186>
 800a27c:	9b05      	ldr	r3, [sp, #20]
 800a27e:	eba3 030a 	sub.w	r3, r3, sl
 800a282:	9305      	str	r3, [sp, #20]
 800a284:	f1ca 0300 	rsb	r3, sl, #0
 800a288:	9307      	str	r3, [sp, #28]
 800a28a:	2300      	movs	r3, #0
 800a28c:	930e      	str	r3, [sp, #56]	; 0x38
 800a28e:	e7bb      	b.n	800a208 <_dtoa_r+0x1b0>
 800a290:	2301      	movs	r3, #1
 800a292:	930a      	str	r3, [sp, #40]	; 0x28
 800a294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a296:	2b00      	cmp	r3, #0
 800a298:	dd59      	ble.n	800a34e <_dtoa_r+0x2f6>
 800a29a:	9302      	str	r3, [sp, #8]
 800a29c:	4699      	mov	r9, r3
 800a29e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	6072      	str	r2, [r6, #4]
 800a2a4:	2204      	movs	r2, #4
 800a2a6:	f102 0014 	add.w	r0, r2, #20
 800a2aa:	4298      	cmp	r0, r3
 800a2ac:	6871      	ldr	r1, [r6, #4]
 800a2ae:	d953      	bls.n	800a358 <_dtoa_r+0x300>
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f000 fe82 	bl	800afba <_Balloc>
 800a2b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2b8:	6030      	str	r0, [r6, #0]
 800a2ba:	f1b9 0f0e 	cmp.w	r9, #14
 800a2be:	f8d3 b000 	ldr.w	fp, [r3]
 800a2c2:	f200 80e6 	bhi.w	800a492 <_dtoa_r+0x43a>
 800a2c6:	2d00      	cmp	r5, #0
 800a2c8:	f000 80e3 	beq.w	800a492 <_dtoa_r+0x43a>
 800a2cc:	ed9d 7b00 	vldr	d7, [sp]
 800a2d0:	f1ba 0f00 	cmp.w	sl, #0
 800a2d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a2d8:	dd74      	ble.n	800a3c4 <_dtoa_r+0x36c>
 800a2da:	4a2a      	ldr	r2, [pc, #168]	; (800a384 <_dtoa_r+0x32c>)
 800a2dc:	f00a 030f 	and.w	r3, sl, #15
 800a2e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a2e4:	ed93 7b00 	vldr	d7, [r3]
 800a2e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a2ec:	06f0      	lsls	r0, r6, #27
 800a2ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a2f2:	d565      	bpl.n	800a3c0 <_dtoa_r+0x368>
 800a2f4:	4b24      	ldr	r3, [pc, #144]	; (800a388 <_dtoa_r+0x330>)
 800a2f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a2fe:	f7f6 fad5 	bl	80008ac <__aeabi_ddiv>
 800a302:	e9cd 0100 	strd	r0, r1, [sp]
 800a306:	f006 060f 	and.w	r6, r6, #15
 800a30a:	2503      	movs	r5, #3
 800a30c:	4f1e      	ldr	r7, [pc, #120]	; (800a388 <_dtoa_r+0x330>)
 800a30e:	e04c      	b.n	800a3aa <_dtoa_r+0x352>
 800a310:	2301      	movs	r3, #1
 800a312:	930a      	str	r3, [sp, #40]	; 0x28
 800a314:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a316:	4453      	add	r3, sl
 800a318:	f103 0901 	add.w	r9, r3, #1
 800a31c:	9302      	str	r3, [sp, #8]
 800a31e:	464b      	mov	r3, r9
 800a320:	2b01      	cmp	r3, #1
 800a322:	bfb8      	it	lt
 800a324:	2301      	movlt	r3, #1
 800a326:	e7ba      	b.n	800a29e <_dtoa_r+0x246>
 800a328:	2300      	movs	r3, #0
 800a32a:	e7b2      	b.n	800a292 <_dtoa_r+0x23a>
 800a32c:	2300      	movs	r3, #0
 800a32e:	e7f0      	b.n	800a312 <_dtoa_r+0x2ba>
 800a330:	2501      	movs	r5, #1
 800a332:	2300      	movs	r3, #0
 800a334:	9306      	str	r3, [sp, #24]
 800a336:	950a      	str	r5, [sp, #40]	; 0x28
 800a338:	f04f 33ff 	mov.w	r3, #4294967295
 800a33c:	9302      	str	r3, [sp, #8]
 800a33e:	4699      	mov	r9, r3
 800a340:	2200      	movs	r2, #0
 800a342:	2312      	movs	r3, #18
 800a344:	920b      	str	r2, [sp, #44]	; 0x2c
 800a346:	e7aa      	b.n	800a29e <_dtoa_r+0x246>
 800a348:	2301      	movs	r3, #1
 800a34a:	930a      	str	r3, [sp, #40]	; 0x28
 800a34c:	e7f4      	b.n	800a338 <_dtoa_r+0x2e0>
 800a34e:	2301      	movs	r3, #1
 800a350:	9302      	str	r3, [sp, #8]
 800a352:	4699      	mov	r9, r3
 800a354:	461a      	mov	r2, r3
 800a356:	e7f5      	b.n	800a344 <_dtoa_r+0x2ec>
 800a358:	3101      	adds	r1, #1
 800a35a:	6071      	str	r1, [r6, #4]
 800a35c:	0052      	lsls	r2, r2, #1
 800a35e:	e7a2      	b.n	800a2a6 <_dtoa_r+0x24e>
 800a360:	636f4361 	.word	0x636f4361
 800a364:	3fd287a7 	.word	0x3fd287a7
 800a368:	8b60c8b3 	.word	0x8b60c8b3
 800a36c:	3fc68a28 	.word	0x3fc68a28
 800a370:	509f79fb 	.word	0x509f79fb
 800a374:	3fd34413 	.word	0x3fd34413
 800a378:	7ff00000 	.word	0x7ff00000
 800a37c:	0801396d 	.word	0x0801396d
 800a380:	3ff80000 	.word	0x3ff80000
 800a384:	08013a28 	.word	0x08013a28
 800a388:	08013a00 	.word	0x08013a00
 800a38c:	08013999 	.word	0x08013999
 800a390:	07f1      	lsls	r1, r6, #31
 800a392:	d508      	bpl.n	800a3a6 <_dtoa_r+0x34e>
 800a394:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a398:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a39c:	f7f6 f95c 	bl	8000658 <__aeabi_dmul>
 800a3a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a3a4:	3501      	adds	r5, #1
 800a3a6:	1076      	asrs	r6, r6, #1
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	2e00      	cmp	r6, #0
 800a3ac:	d1f0      	bne.n	800a390 <_dtoa_r+0x338>
 800a3ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a3b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a3b6:	f7f6 fa79 	bl	80008ac <__aeabi_ddiv>
 800a3ba:	e9cd 0100 	strd	r0, r1, [sp]
 800a3be:	e01a      	b.n	800a3f6 <_dtoa_r+0x39e>
 800a3c0:	2502      	movs	r5, #2
 800a3c2:	e7a3      	b.n	800a30c <_dtoa_r+0x2b4>
 800a3c4:	f000 80a0 	beq.w	800a508 <_dtoa_r+0x4b0>
 800a3c8:	f1ca 0600 	rsb	r6, sl, #0
 800a3cc:	4b9f      	ldr	r3, [pc, #636]	; (800a64c <_dtoa_r+0x5f4>)
 800a3ce:	4fa0      	ldr	r7, [pc, #640]	; (800a650 <_dtoa_r+0x5f8>)
 800a3d0:	f006 020f 	and.w	r2, r6, #15
 800a3d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3e0:	f7f6 f93a 	bl	8000658 <__aeabi_dmul>
 800a3e4:	e9cd 0100 	strd	r0, r1, [sp]
 800a3e8:	1136      	asrs	r6, r6, #4
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	2502      	movs	r5, #2
 800a3ee:	2e00      	cmp	r6, #0
 800a3f0:	d17f      	bne.n	800a4f2 <_dtoa_r+0x49a>
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1e1      	bne.n	800a3ba <_dtoa_r+0x362>
 800a3f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	f000 8087 	beq.w	800a50c <_dtoa_r+0x4b4>
 800a3fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a402:	2200      	movs	r2, #0
 800a404:	4b93      	ldr	r3, [pc, #588]	; (800a654 <_dtoa_r+0x5fc>)
 800a406:	4630      	mov	r0, r6
 800a408:	4639      	mov	r1, r7
 800a40a:	f7f6 fb97 	bl	8000b3c <__aeabi_dcmplt>
 800a40e:	2800      	cmp	r0, #0
 800a410:	d07c      	beq.n	800a50c <_dtoa_r+0x4b4>
 800a412:	f1b9 0f00 	cmp.w	r9, #0
 800a416:	d079      	beq.n	800a50c <_dtoa_r+0x4b4>
 800a418:	9b02      	ldr	r3, [sp, #8]
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	dd35      	ble.n	800a48a <_dtoa_r+0x432>
 800a41e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a422:	9308      	str	r3, [sp, #32]
 800a424:	4639      	mov	r1, r7
 800a426:	2200      	movs	r2, #0
 800a428:	4b8b      	ldr	r3, [pc, #556]	; (800a658 <_dtoa_r+0x600>)
 800a42a:	4630      	mov	r0, r6
 800a42c:	f7f6 f914 	bl	8000658 <__aeabi_dmul>
 800a430:	e9cd 0100 	strd	r0, r1, [sp]
 800a434:	9f02      	ldr	r7, [sp, #8]
 800a436:	3501      	adds	r5, #1
 800a438:	4628      	mov	r0, r5
 800a43a:	f7f6 f8a3 	bl	8000584 <__aeabi_i2d>
 800a43e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a442:	f7f6 f909 	bl	8000658 <__aeabi_dmul>
 800a446:	2200      	movs	r2, #0
 800a448:	4b84      	ldr	r3, [pc, #528]	; (800a65c <_dtoa_r+0x604>)
 800a44a:	f7f5 ff4f 	bl	80002ec <__adddf3>
 800a44e:	4605      	mov	r5, r0
 800a450:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a454:	2f00      	cmp	r7, #0
 800a456:	d15d      	bne.n	800a514 <_dtoa_r+0x4bc>
 800a458:	2200      	movs	r2, #0
 800a45a:	4b81      	ldr	r3, [pc, #516]	; (800a660 <_dtoa_r+0x608>)
 800a45c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a460:	f7f5 ff42 	bl	80002e8 <__aeabi_dsub>
 800a464:	462a      	mov	r2, r5
 800a466:	4633      	mov	r3, r6
 800a468:	e9cd 0100 	strd	r0, r1, [sp]
 800a46c:	f7f6 fb84 	bl	8000b78 <__aeabi_dcmpgt>
 800a470:	2800      	cmp	r0, #0
 800a472:	f040 8288 	bne.w	800a986 <_dtoa_r+0x92e>
 800a476:	462a      	mov	r2, r5
 800a478:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a47c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a480:	f7f6 fb5c 	bl	8000b3c <__aeabi_dcmplt>
 800a484:	2800      	cmp	r0, #0
 800a486:	f040 827c 	bne.w	800a982 <_dtoa_r+0x92a>
 800a48a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a48e:	e9cd 2300 	strd	r2, r3, [sp]
 800a492:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a494:	2b00      	cmp	r3, #0
 800a496:	f2c0 8150 	blt.w	800a73a <_dtoa_r+0x6e2>
 800a49a:	f1ba 0f0e 	cmp.w	sl, #14
 800a49e:	f300 814c 	bgt.w	800a73a <_dtoa_r+0x6e2>
 800a4a2:	4b6a      	ldr	r3, [pc, #424]	; (800a64c <_dtoa_r+0x5f4>)
 800a4a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4a8:	ed93 7b00 	vldr	d7, [r3]
 800a4ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a4b4:	f280 80d8 	bge.w	800a668 <_dtoa_r+0x610>
 800a4b8:	f1b9 0f00 	cmp.w	r9, #0
 800a4bc:	f300 80d4 	bgt.w	800a668 <_dtoa_r+0x610>
 800a4c0:	f040 825e 	bne.w	800a980 <_dtoa_r+0x928>
 800a4c4:	2200      	movs	r2, #0
 800a4c6:	4b66      	ldr	r3, [pc, #408]	; (800a660 <_dtoa_r+0x608>)
 800a4c8:	ec51 0b17 	vmov	r0, r1, d7
 800a4cc:	f7f6 f8c4 	bl	8000658 <__aeabi_dmul>
 800a4d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a4d4:	f7f6 fb46 	bl	8000b64 <__aeabi_dcmpge>
 800a4d8:	464f      	mov	r7, r9
 800a4da:	464e      	mov	r6, r9
 800a4dc:	2800      	cmp	r0, #0
 800a4de:	f040 8234 	bne.w	800a94a <_dtoa_r+0x8f2>
 800a4e2:	2331      	movs	r3, #49	; 0x31
 800a4e4:	f10b 0501 	add.w	r5, fp, #1
 800a4e8:	f88b 3000 	strb.w	r3, [fp]
 800a4ec:	f10a 0a01 	add.w	sl, sl, #1
 800a4f0:	e22f      	b.n	800a952 <_dtoa_r+0x8fa>
 800a4f2:	07f2      	lsls	r2, r6, #31
 800a4f4:	d505      	bpl.n	800a502 <_dtoa_r+0x4aa>
 800a4f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4fa:	f7f6 f8ad 	bl	8000658 <__aeabi_dmul>
 800a4fe:	3501      	adds	r5, #1
 800a500:	2301      	movs	r3, #1
 800a502:	1076      	asrs	r6, r6, #1
 800a504:	3708      	adds	r7, #8
 800a506:	e772      	b.n	800a3ee <_dtoa_r+0x396>
 800a508:	2502      	movs	r5, #2
 800a50a:	e774      	b.n	800a3f6 <_dtoa_r+0x39e>
 800a50c:	f8cd a020 	str.w	sl, [sp, #32]
 800a510:	464f      	mov	r7, r9
 800a512:	e791      	b.n	800a438 <_dtoa_r+0x3e0>
 800a514:	4b4d      	ldr	r3, [pc, #308]	; (800a64c <_dtoa_r+0x5f4>)
 800a516:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a51a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a51e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a520:	2b00      	cmp	r3, #0
 800a522:	d047      	beq.n	800a5b4 <_dtoa_r+0x55c>
 800a524:	4602      	mov	r2, r0
 800a526:	460b      	mov	r3, r1
 800a528:	2000      	movs	r0, #0
 800a52a:	494e      	ldr	r1, [pc, #312]	; (800a664 <_dtoa_r+0x60c>)
 800a52c:	f7f6 f9be 	bl	80008ac <__aeabi_ddiv>
 800a530:	462a      	mov	r2, r5
 800a532:	4633      	mov	r3, r6
 800a534:	f7f5 fed8 	bl	80002e8 <__aeabi_dsub>
 800a538:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a53c:	465d      	mov	r5, fp
 800a53e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a542:	f7f6 fb39 	bl	8000bb8 <__aeabi_d2iz>
 800a546:	4606      	mov	r6, r0
 800a548:	f7f6 f81c 	bl	8000584 <__aeabi_i2d>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a554:	f7f5 fec8 	bl	80002e8 <__aeabi_dsub>
 800a558:	3630      	adds	r6, #48	; 0x30
 800a55a:	f805 6b01 	strb.w	r6, [r5], #1
 800a55e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a562:	e9cd 0100 	strd	r0, r1, [sp]
 800a566:	f7f6 fae9 	bl	8000b3c <__aeabi_dcmplt>
 800a56a:	2800      	cmp	r0, #0
 800a56c:	d163      	bne.n	800a636 <_dtoa_r+0x5de>
 800a56e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a572:	2000      	movs	r0, #0
 800a574:	4937      	ldr	r1, [pc, #220]	; (800a654 <_dtoa_r+0x5fc>)
 800a576:	f7f5 feb7 	bl	80002e8 <__aeabi_dsub>
 800a57a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a57e:	f7f6 fadd 	bl	8000b3c <__aeabi_dcmplt>
 800a582:	2800      	cmp	r0, #0
 800a584:	f040 80b7 	bne.w	800a6f6 <_dtoa_r+0x69e>
 800a588:	eba5 030b 	sub.w	r3, r5, fp
 800a58c:	429f      	cmp	r7, r3
 800a58e:	f77f af7c 	ble.w	800a48a <_dtoa_r+0x432>
 800a592:	2200      	movs	r2, #0
 800a594:	4b30      	ldr	r3, [pc, #192]	; (800a658 <_dtoa_r+0x600>)
 800a596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a59a:	f7f6 f85d 	bl	8000658 <__aeabi_dmul>
 800a59e:	2200      	movs	r2, #0
 800a5a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a5a4:	4b2c      	ldr	r3, [pc, #176]	; (800a658 <_dtoa_r+0x600>)
 800a5a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5aa:	f7f6 f855 	bl	8000658 <__aeabi_dmul>
 800a5ae:	e9cd 0100 	strd	r0, r1, [sp]
 800a5b2:	e7c4      	b.n	800a53e <_dtoa_r+0x4e6>
 800a5b4:	462a      	mov	r2, r5
 800a5b6:	4633      	mov	r3, r6
 800a5b8:	f7f6 f84e 	bl	8000658 <__aeabi_dmul>
 800a5bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a5c0:	eb0b 0507 	add.w	r5, fp, r7
 800a5c4:	465e      	mov	r6, fp
 800a5c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5ca:	f7f6 faf5 	bl	8000bb8 <__aeabi_d2iz>
 800a5ce:	4607      	mov	r7, r0
 800a5d0:	f7f5 ffd8 	bl	8000584 <__aeabi_i2d>
 800a5d4:	3730      	adds	r7, #48	; 0x30
 800a5d6:	4602      	mov	r2, r0
 800a5d8:	460b      	mov	r3, r1
 800a5da:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a5de:	f7f5 fe83 	bl	80002e8 <__aeabi_dsub>
 800a5e2:	f806 7b01 	strb.w	r7, [r6], #1
 800a5e6:	42ae      	cmp	r6, r5
 800a5e8:	e9cd 0100 	strd	r0, r1, [sp]
 800a5ec:	f04f 0200 	mov.w	r2, #0
 800a5f0:	d126      	bne.n	800a640 <_dtoa_r+0x5e8>
 800a5f2:	4b1c      	ldr	r3, [pc, #112]	; (800a664 <_dtoa_r+0x60c>)
 800a5f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a5f8:	f7f5 fe78 	bl	80002ec <__adddf3>
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	460b      	mov	r3, r1
 800a600:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a604:	f7f6 fab8 	bl	8000b78 <__aeabi_dcmpgt>
 800a608:	2800      	cmp	r0, #0
 800a60a:	d174      	bne.n	800a6f6 <_dtoa_r+0x69e>
 800a60c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a610:	2000      	movs	r0, #0
 800a612:	4914      	ldr	r1, [pc, #80]	; (800a664 <_dtoa_r+0x60c>)
 800a614:	f7f5 fe68 	bl	80002e8 <__aeabi_dsub>
 800a618:	4602      	mov	r2, r0
 800a61a:	460b      	mov	r3, r1
 800a61c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a620:	f7f6 fa8c 	bl	8000b3c <__aeabi_dcmplt>
 800a624:	2800      	cmp	r0, #0
 800a626:	f43f af30 	beq.w	800a48a <_dtoa_r+0x432>
 800a62a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a62e:	2b30      	cmp	r3, #48	; 0x30
 800a630:	f105 32ff 	add.w	r2, r5, #4294967295
 800a634:	d002      	beq.n	800a63c <_dtoa_r+0x5e4>
 800a636:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a63a:	e04a      	b.n	800a6d2 <_dtoa_r+0x67a>
 800a63c:	4615      	mov	r5, r2
 800a63e:	e7f4      	b.n	800a62a <_dtoa_r+0x5d2>
 800a640:	4b05      	ldr	r3, [pc, #20]	; (800a658 <_dtoa_r+0x600>)
 800a642:	f7f6 f809 	bl	8000658 <__aeabi_dmul>
 800a646:	e9cd 0100 	strd	r0, r1, [sp]
 800a64a:	e7bc      	b.n	800a5c6 <_dtoa_r+0x56e>
 800a64c:	08013a28 	.word	0x08013a28
 800a650:	08013a00 	.word	0x08013a00
 800a654:	3ff00000 	.word	0x3ff00000
 800a658:	40240000 	.word	0x40240000
 800a65c:	401c0000 	.word	0x401c0000
 800a660:	40140000 	.word	0x40140000
 800a664:	3fe00000 	.word	0x3fe00000
 800a668:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a66c:	465d      	mov	r5, fp
 800a66e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a672:	4630      	mov	r0, r6
 800a674:	4639      	mov	r1, r7
 800a676:	f7f6 f919 	bl	80008ac <__aeabi_ddiv>
 800a67a:	f7f6 fa9d 	bl	8000bb8 <__aeabi_d2iz>
 800a67e:	4680      	mov	r8, r0
 800a680:	f7f5 ff80 	bl	8000584 <__aeabi_i2d>
 800a684:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a688:	f7f5 ffe6 	bl	8000658 <__aeabi_dmul>
 800a68c:	4602      	mov	r2, r0
 800a68e:	460b      	mov	r3, r1
 800a690:	4630      	mov	r0, r6
 800a692:	4639      	mov	r1, r7
 800a694:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a698:	f7f5 fe26 	bl	80002e8 <__aeabi_dsub>
 800a69c:	f805 6b01 	strb.w	r6, [r5], #1
 800a6a0:	eba5 060b 	sub.w	r6, r5, fp
 800a6a4:	45b1      	cmp	r9, r6
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	d139      	bne.n	800a720 <_dtoa_r+0x6c8>
 800a6ac:	f7f5 fe1e 	bl	80002ec <__adddf3>
 800a6b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6b4:	4606      	mov	r6, r0
 800a6b6:	460f      	mov	r7, r1
 800a6b8:	f7f6 fa5e 	bl	8000b78 <__aeabi_dcmpgt>
 800a6bc:	b9c8      	cbnz	r0, 800a6f2 <_dtoa_r+0x69a>
 800a6be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a6c2:	4630      	mov	r0, r6
 800a6c4:	4639      	mov	r1, r7
 800a6c6:	f7f6 fa2f 	bl	8000b28 <__aeabi_dcmpeq>
 800a6ca:	b110      	cbz	r0, 800a6d2 <_dtoa_r+0x67a>
 800a6cc:	f018 0f01 	tst.w	r8, #1
 800a6d0:	d10f      	bne.n	800a6f2 <_dtoa_r+0x69a>
 800a6d2:	9904      	ldr	r1, [sp, #16]
 800a6d4:	4620      	mov	r0, r4
 800a6d6:	f000 fca4 	bl	800b022 <_Bfree>
 800a6da:	2300      	movs	r3, #0
 800a6dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a6de:	702b      	strb	r3, [r5, #0]
 800a6e0:	f10a 0301 	add.w	r3, sl, #1
 800a6e4:	6013      	str	r3, [r2, #0]
 800a6e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	f000 8241 	beq.w	800ab70 <_dtoa_r+0xb18>
 800a6ee:	601d      	str	r5, [r3, #0]
 800a6f0:	e23e      	b.n	800ab70 <_dtoa_r+0xb18>
 800a6f2:	f8cd a020 	str.w	sl, [sp, #32]
 800a6f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a6fa:	2a39      	cmp	r2, #57	; 0x39
 800a6fc:	f105 33ff 	add.w	r3, r5, #4294967295
 800a700:	d108      	bne.n	800a714 <_dtoa_r+0x6bc>
 800a702:	459b      	cmp	fp, r3
 800a704:	d10a      	bne.n	800a71c <_dtoa_r+0x6c4>
 800a706:	9b08      	ldr	r3, [sp, #32]
 800a708:	3301      	adds	r3, #1
 800a70a:	9308      	str	r3, [sp, #32]
 800a70c:	2330      	movs	r3, #48	; 0x30
 800a70e:	f88b 3000 	strb.w	r3, [fp]
 800a712:	465b      	mov	r3, fp
 800a714:	781a      	ldrb	r2, [r3, #0]
 800a716:	3201      	adds	r2, #1
 800a718:	701a      	strb	r2, [r3, #0]
 800a71a:	e78c      	b.n	800a636 <_dtoa_r+0x5de>
 800a71c:	461d      	mov	r5, r3
 800a71e:	e7ea      	b.n	800a6f6 <_dtoa_r+0x69e>
 800a720:	2200      	movs	r2, #0
 800a722:	4b9b      	ldr	r3, [pc, #620]	; (800a990 <_dtoa_r+0x938>)
 800a724:	f7f5 ff98 	bl	8000658 <__aeabi_dmul>
 800a728:	2200      	movs	r2, #0
 800a72a:	2300      	movs	r3, #0
 800a72c:	4606      	mov	r6, r0
 800a72e:	460f      	mov	r7, r1
 800a730:	f7f6 f9fa 	bl	8000b28 <__aeabi_dcmpeq>
 800a734:	2800      	cmp	r0, #0
 800a736:	d09a      	beq.n	800a66e <_dtoa_r+0x616>
 800a738:	e7cb      	b.n	800a6d2 <_dtoa_r+0x67a>
 800a73a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a73c:	2a00      	cmp	r2, #0
 800a73e:	f000 808b 	beq.w	800a858 <_dtoa_r+0x800>
 800a742:	9a06      	ldr	r2, [sp, #24]
 800a744:	2a01      	cmp	r2, #1
 800a746:	dc6e      	bgt.n	800a826 <_dtoa_r+0x7ce>
 800a748:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a74a:	2a00      	cmp	r2, #0
 800a74c:	d067      	beq.n	800a81e <_dtoa_r+0x7c6>
 800a74e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a752:	9f07      	ldr	r7, [sp, #28]
 800a754:	9d05      	ldr	r5, [sp, #20]
 800a756:	9a05      	ldr	r2, [sp, #20]
 800a758:	2101      	movs	r1, #1
 800a75a:	441a      	add	r2, r3
 800a75c:	4620      	mov	r0, r4
 800a75e:	9205      	str	r2, [sp, #20]
 800a760:	4498      	add	r8, r3
 800a762:	f000 fcfe 	bl	800b162 <__i2b>
 800a766:	4606      	mov	r6, r0
 800a768:	2d00      	cmp	r5, #0
 800a76a:	dd0c      	ble.n	800a786 <_dtoa_r+0x72e>
 800a76c:	f1b8 0f00 	cmp.w	r8, #0
 800a770:	dd09      	ble.n	800a786 <_dtoa_r+0x72e>
 800a772:	4545      	cmp	r5, r8
 800a774:	9a05      	ldr	r2, [sp, #20]
 800a776:	462b      	mov	r3, r5
 800a778:	bfa8      	it	ge
 800a77a:	4643      	movge	r3, r8
 800a77c:	1ad2      	subs	r2, r2, r3
 800a77e:	9205      	str	r2, [sp, #20]
 800a780:	1aed      	subs	r5, r5, r3
 800a782:	eba8 0803 	sub.w	r8, r8, r3
 800a786:	9b07      	ldr	r3, [sp, #28]
 800a788:	b1eb      	cbz	r3, 800a7c6 <_dtoa_r+0x76e>
 800a78a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d067      	beq.n	800a860 <_dtoa_r+0x808>
 800a790:	b18f      	cbz	r7, 800a7b6 <_dtoa_r+0x75e>
 800a792:	4631      	mov	r1, r6
 800a794:	463a      	mov	r2, r7
 800a796:	4620      	mov	r0, r4
 800a798:	f000 fd82 	bl	800b2a0 <__pow5mult>
 800a79c:	9a04      	ldr	r2, [sp, #16]
 800a79e:	4601      	mov	r1, r0
 800a7a0:	4606      	mov	r6, r0
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	f000 fce6 	bl	800b174 <__multiply>
 800a7a8:	9904      	ldr	r1, [sp, #16]
 800a7aa:	9008      	str	r0, [sp, #32]
 800a7ac:	4620      	mov	r0, r4
 800a7ae:	f000 fc38 	bl	800b022 <_Bfree>
 800a7b2:	9b08      	ldr	r3, [sp, #32]
 800a7b4:	9304      	str	r3, [sp, #16]
 800a7b6:	9b07      	ldr	r3, [sp, #28]
 800a7b8:	1bda      	subs	r2, r3, r7
 800a7ba:	d004      	beq.n	800a7c6 <_dtoa_r+0x76e>
 800a7bc:	9904      	ldr	r1, [sp, #16]
 800a7be:	4620      	mov	r0, r4
 800a7c0:	f000 fd6e 	bl	800b2a0 <__pow5mult>
 800a7c4:	9004      	str	r0, [sp, #16]
 800a7c6:	2101      	movs	r1, #1
 800a7c8:	4620      	mov	r0, r4
 800a7ca:	f000 fcca 	bl	800b162 <__i2b>
 800a7ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a7d0:	4607      	mov	r7, r0
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f000 81d0 	beq.w	800ab78 <_dtoa_r+0xb20>
 800a7d8:	461a      	mov	r2, r3
 800a7da:	4601      	mov	r1, r0
 800a7dc:	4620      	mov	r0, r4
 800a7de:	f000 fd5f 	bl	800b2a0 <__pow5mult>
 800a7e2:	9b06      	ldr	r3, [sp, #24]
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	4607      	mov	r7, r0
 800a7e8:	dc40      	bgt.n	800a86c <_dtoa_r+0x814>
 800a7ea:	9b00      	ldr	r3, [sp, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d139      	bne.n	800a864 <_dtoa_r+0x80c>
 800a7f0:	9b01      	ldr	r3, [sp, #4]
 800a7f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d136      	bne.n	800a868 <_dtoa_r+0x810>
 800a7fa:	9b01      	ldr	r3, [sp, #4]
 800a7fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a800:	0d1b      	lsrs	r3, r3, #20
 800a802:	051b      	lsls	r3, r3, #20
 800a804:	b12b      	cbz	r3, 800a812 <_dtoa_r+0x7ba>
 800a806:	9b05      	ldr	r3, [sp, #20]
 800a808:	3301      	adds	r3, #1
 800a80a:	9305      	str	r3, [sp, #20]
 800a80c:	f108 0801 	add.w	r8, r8, #1
 800a810:	2301      	movs	r3, #1
 800a812:	9307      	str	r3, [sp, #28]
 800a814:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a816:	2b00      	cmp	r3, #0
 800a818:	d12a      	bne.n	800a870 <_dtoa_r+0x818>
 800a81a:	2001      	movs	r0, #1
 800a81c:	e030      	b.n	800a880 <_dtoa_r+0x828>
 800a81e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a820:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a824:	e795      	b.n	800a752 <_dtoa_r+0x6fa>
 800a826:	9b07      	ldr	r3, [sp, #28]
 800a828:	f109 37ff 	add.w	r7, r9, #4294967295
 800a82c:	42bb      	cmp	r3, r7
 800a82e:	bfbf      	itttt	lt
 800a830:	9b07      	ldrlt	r3, [sp, #28]
 800a832:	9707      	strlt	r7, [sp, #28]
 800a834:	1afa      	sublt	r2, r7, r3
 800a836:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a838:	bfbb      	ittet	lt
 800a83a:	189b      	addlt	r3, r3, r2
 800a83c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a83e:	1bdf      	subge	r7, r3, r7
 800a840:	2700      	movlt	r7, #0
 800a842:	f1b9 0f00 	cmp.w	r9, #0
 800a846:	bfb5      	itete	lt
 800a848:	9b05      	ldrlt	r3, [sp, #20]
 800a84a:	9d05      	ldrge	r5, [sp, #20]
 800a84c:	eba3 0509 	sublt.w	r5, r3, r9
 800a850:	464b      	movge	r3, r9
 800a852:	bfb8      	it	lt
 800a854:	2300      	movlt	r3, #0
 800a856:	e77e      	b.n	800a756 <_dtoa_r+0x6fe>
 800a858:	9f07      	ldr	r7, [sp, #28]
 800a85a:	9d05      	ldr	r5, [sp, #20]
 800a85c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a85e:	e783      	b.n	800a768 <_dtoa_r+0x710>
 800a860:	9a07      	ldr	r2, [sp, #28]
 800a862:	e7ab      	b.n	800a7bc <_dtoa_r+0x764>
 800a864:	2300      	movs	r3, #0
 800a866:	e7d4      	b.n	800a812 <_dtoa_r+0x7ba>
 800a868:	9b00      	ldr	r3, [sp, #0]
 800a86a:	e7d2      	b.n	800a812 <_dtoa_r+0x7ba>
 800a86c:	2300      	movs	r3, #0
 800a86e:	9307      	str	r3, [sp, #28]
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a876:	6918      	ldr	r0, [r3, #16]
 800a878:	f000 fc25 	bl	800b0c6 <__hi0bits>
 800a87c:	f1c0 0020 	rsb	r0, r0, #32
 800a880:	4440      	add	r0, r8
 800a882:	f010 001f 	ands.w	r0, r0, #31
 800a886:	d047      	beq.n	800a918 <_dtoa_r+0x8c0>
 800a888:	f1c0 0320 	rsb	r3, r0, #32
 800a88c:	2b04      	cmp	r3, #4
 800a88e:	dd3b      	ble.n	800a908 <_dtoa_r+0x8b0>
 800a890:	9b05      	ldr	r3, [sp, #20]
 800a892:	f1c0 001c 	rsb	r0, r0, #28
 800a896:	4403      	add	r3, r0
 800a898:	9305      	str	r3, [sp, #20]
 800a89a:	4405      	add	r5, r0
 800a89c:	4480      	add	r8, r0
 800a89e:	9b05      	ldr	r3, [sp, #20]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	dd05      	ble.n	800a8b0 <_dtoa_r+0x858>
 800a8a4:	461a      	mov	r2, r3
 800a8a6:	9904      	ldr	r1, [sp, #16]
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 fd47 	bl	800b33c <__lshift>
 800a8ae:	9004      	str	r0, [sp, #16]
 800a8b0:	f1b8 0f00 	cmp.w	r8, #0
 800a8b4:	dd05      	ble.n	800a8c2 <_dtoa_r+0x86a>
 800a8b6:	4639      	mov	r1, r7
 800a8b8:	4642      	mov	r2, r8
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f000 fd3e 	bl	800b33c <__lshift>
 800a8c0:	4607      	mov	r7, r0
 800a8c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a8c4:	b353      	cbz	r3, 800a91c <_dtoa_r+0x8c4>
 800a8c6:	4639      	mov	r1, r7
 800a8c8:	9804      	ldr	r0, [sp, #16]
 800a8ca:	f000 fd8b 	bl	800b3e4 <__mcmp>
 800a8ce:	2800      	cmp	r0, #0
 800a8d0:	da24      	bge.n	800a91c <_dtoa_r+0x8c4>
 800a8d2:	2300      	movs	r3, #0
 800a8d4:	220a      	movs	r2, #10
 800a8d6:	9904      	ldr	r1, [sp, #16]
 800a8d8:	4620      	mov	r0, r4
 800a8da:	f000 fbb9 	bl	800b050 <__multadd>
 800a8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e0:	9004      	str	r0, [sp, #16]
 800a8e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	f000 814d 	beq.w	800ab86 <_dtoa_r+0xb2e>
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	4631      	mov	r1, r6
 800a8f0:	220a      	movs	r2, #10
 800a8f2:	4620      	mov	r0, r4
 800a8f4:	f000 fbac 	bl	800b050 <__multadd>
 800a8f8:	9b02      	ldr	r3, [sp, #8]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	4606      	mov	r6, r0
 800a8fe:	dc4f      	bgt.n	800a9a0 <_dtoa_r+0x948>
 800a900:	9b06      	ldr	r3, [sp, #24]
 800a902:	2b02      	cmp	r3, #2
 800a904:	dd4c      	ble.n	800a9a0 <_dtoa_r+0x948>
 800a906:	e011      	b.n	800a92c <_dtoa_r+0x8d4>
 800a908:	d0c9      	beq.n	800a89e <_dtoa_r+0x846>
 800a90a:	9a05      	ldr	r2, [sp, #20]
 800a90c:	331c      	adds	r3, #28
 800a90e:	441a      	add	r2, r3
 800a910:	9205      	str	r2, [sp, #20]
 800a912:	441d      	add	r5, r3
 800a914:	4498      	add	r8, r3
 800a916:	e7c2      	b.n	800a89e <_dtoa_r+0x846>
 800a918:	4603      	mov	r3, r0
 800a91a:	e7f6      	b.n	800a90a <_dtoa_r+0x8b2>
 800a91c:	f1b9 0f00 	cmp.w	r9, #0
 800a920:	dc38      	bgt.n	800a994 <_dtoa_r+0x93c>
 800a922:	9b06      	ldr	r3, [sp, #24]
 800a924:	2b02      	cmp	r3, #2
 800a926:	dd35      	ble.n	800a994 <_dtoa_r+0x93c>
 800a928:	f8cd 9008 	str.w	r9, [sp, #8]
 800a92c:	9b02      	ldr	r3, [sp, #8]
 800a92e:	b963      	cbnz	r3, 800a94a <_dtoa_r+0x8f2>
 800a930:	4639      	mov	r1, r7
 800a932:	2205      	movs	r2, #5
 800a934:	4620      	mov	r0, r4
 800a936:	f000 fb8b 	bl	800b050 <__multadd>
 800a93a:	4601      	mov	r1, r0
 800a93c:	4607      	mov	r7, r0
 800a93e:	9804      	ldr	r0, [sp, #16]
 800a940:	f000 fd50 	bl	800b3e4 <__mcmp>
 800a944:	2800      	cmp	r0, #0
 800a946:	f73f adcc 	bgt.w	800a4e2 <_dtoa_r+0x48a>
 800a94a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a94c:	465d      	mov	r5, fp
 800a94e:	ea6f 0a03 	mvn.w	sl, r3
 800a952:	f04f 0900 	mov.w	r9, #0
 800a956:	4639      	mov	r1, r7
 800a958:	4620      	mov	r0, r4
 800a95a:	f000 fb62 	bl	800b022 <_Bfree>
 800a95e:	2e00      	cmp	r6, #0
 800a960:	f43f aeb7 	beq.w	800a6d2 <_dtoa_r+0x67a>
 800a964:	f1b9 0f00 	cmp.w	r9, #0
 800a968:	d005      	beq.n	800a976 <_dtoa_r+0x91e>
 800a96a:	45b1      	cmp	r9, r6
 800a96c:	d003      	beq.n	800a976 <_dtoa_r+0x91e>
 800a96e:	4649      	mov	r1, r9
 800a970:	4620      	mov	r0, r4
 800a972:	f000 fb56 	bl	800b022 <_Bfree>
 800a976:	4631      	mov	r1, r6
 800a978:	4620      	mov	r0, r4
 800a97a:	f000 fb52 	bl	800b022 <_Bfree>
 800a97e:	e6a8      	b.n	800a6d2 <_dtoa_r+0x67a>
 800a980:	2700      	movs	r7, #0
 800a982:	463e      	mov	r6, r7
 800a984:	e7e1      	b.n	800a94a <_dtoa_r+0x8f2>
 800a986:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a98a:	463e      	mov	r6, r7
 800a98c:	e5a9      	b.n	800a4e2 <_dtoa_r+0x48a>
 800a98e:	bf00      	nop
 800a990:	40240000 	.word	0x40240000
 800a994:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a996:	f8cd 9008 	str.w	r9, [sp, #8]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	f000 80fa 	beq.w	800ab94 <_dtoa_r+0xb3c>
 800a9a0:	2d00      	cmp	r5, #0
 800a9a2:	dd05      	ble.n	800a9b0 <_dtoa_r+0x958>
 800a9a4:	4631      	mov	r1, r6
 800a9a6:	462a      	mov	r2, r5
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f000 fcc7 	bl	800b33c <__lshift>
 800a9ae:	4606      	mov	r6, r0
 800a9b0:	9b07      	ldr	r3, [sp, #28]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d04c      	beq.n	800aa50 <_dtoa_r+0x9f8>
 800a9b6:	6871      	ldr	r1, [r6, #4]
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 fafe 	bl	800afba <_Balloc>
 800a9be:	6932      	ldr	r2, [r6, #16]
 800a9c0:	3202      	adds	r2, #2
 800a9c2:	4605      	mov	r5, r0
 800a9c4:	0092      	lsls	r2, r2, #2
 800a9c6:	f106 010c 	add.w	r1, r6, #12
 800a9ca:	300c      	adds	r0, #12
 800a9cc:	f000 fae8 	bl	800afa0 <memcpy>
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	4629      	mov	r1, r5
 800a9d4:	4620      	mov	r0, r4
 800a9d6:	f000 fcb1 	bl	800b33c <__lshift>
 800a9da:	9b00      	ldr	r3, [sp, #0]
 800a9dc:	f8cd b014 	str.w	fp, [sp, #20]
 800a9e0:	f003 0301 	and.w	r3, r3, #1
 800a9e4:	46b1      	mov	r9, r6
 800a9e6:	9307      	str	r3, [sp, #28]
 800a9e8:	4606      	mov	r6, r0
 800a9ea:	4639      	mov	r1, r7
 800a9ec:	9804      	ldr	r0, [sp, #16]
 800a9ee:	f7ff faa5 	bl	8009f3c <quorem>
 800a9f2:	4649      	mov	r1, r9
 800a9f4:	4605      	mov	r5, r0
 800a9f6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a9fa:	9804      	ldr	r0, [sp, #16]
 800a9fc:	f000 fcf2 	bl	800b3e4 <__mcmp>
 800aa00:	4632      	mov	r2, r6
 800aa02:	9000      	str	r0, [sp, #0]
 800aa04:	4639      	mov	r1, r7
 800aa06:	4620      	mov	r0, r4
 800aa08:	f000 fd06 	bl	800b418 <__mdiff>
 800aa0c:	68c3      	ldr	r3, [r0, #12]
 800aa0e:	4602      	mov	r2, r0
 800aa10:	bb03      	cbnz	r3, 800aa54 <_dtoa_r+0x9fc>
 800aa12:	4601      	mov	r1, r0
 800aa14:	9008      	str	r0, [sp, #32]
 800aa16:	9804      	ldr	r0, [sp, #16]
 800aa18:	f000 fce4 	bl	800b3e4 <__mcmp>
 800aa1c:	9a08      	ldr	r2, [sp, #32]
 800aa1e:	4603      	mov	r3, r0
 800aa20:	4611      	mov	r1, r2
 800aa22:	4620      	mov	r0, r4
 800aa24:	9308      	str	r3, [sp, #32]
 800aa26:	f000 fafc 	bl	800b022 <_Bfree>
 800aa2a:	9b08      	ldr	r3, [sp, #32]
 800aa2c:	b9a3      	cbnz	r3, 800aa58 <_dtoa_r+0xa00>
 800aa2e:	9a06      	ldr	r2, [sp, #24]
 800aa30:	b992      	cbnz	r2, 800aa58 <_dtoa_r+0xa00>
 800aa32:	9a07      	ldr	r2, [sp, #28]
 800aa34:	b982      	cbnz	r2, 800aa58 <_dtoa_r+0xa00>
 800aa36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa3a:	d029      	beq.n	800aa90 <_dtoa_r+0xa38>
 800aa3c:	9b00      	ldr	r3, [sp, #0]
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	dd01      	ble.n	800aa46 <_dtoa_r+0x9ee>
 800aa42:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800aa46:	9b05      	ldr	r3, [sp, #20]
 800aa48:	1c5d      	adds	r5, r3, #1
 800aa4a:	f883 8000 	strb.w	r8, [r3]
 800aa4e:	e782      	b.n	800a956 <_dtoa_r+0x8fe>
 800aa50:	4630      	mov	r0, r6
 800aa52:	e7c2      	b.n	800a9da <_dtoa_r+0x982>
 800aa54:	2301      	movs	r3, #1
 800aa56:	e7e3      	b.n	800aa20 <_dtoa_r+0x9c8>
 800aa58:	9a00      	ldr	r2, [sp, #0]
 800aa5a:	2a00      	cmp	r2, #0
 800aa5c:	db04      	blt.n	800aa68 <_dtoa_r+0xa10>
 800aa5e:	d125      	bne.n	800aaac <_dtoa_r+0xa54>
 800aa60:	9a06      	ldr	r2, [sp, #24]
 800aa62:	bb1a      	cbnz	r2, 800aaac <_dtoa_r+0xa54>
 800aa64:	9a07      	ldr	r2, [sp, #28]
 800aa66:	bb0a      	cbnz	r2, 800aaac <_dtoa_r+0xa54>
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	ddec      	ble.n	800aa46 <_dtoa_r+0x9ee>
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	9904      	ldr	r1, [sp, #16]
 800aa70:	4620      	mov	r0, r4
 800aa72:	f000 fc63 	bl	800b33c <__lshift>
 800aa76:	4639      	mov	r1, r7
 800aa78:	9004      	str	r0, [sp, #16]
 800aa7a:	f000 fcb3 	bl	800b3e4 <__mcmp>
 800aa7e:	2800      	cmp	r0, #0
 800aa80:	dc03      	bgt.n	800aa8a <_dtoa_r+0xa32>
 800aa82:	d1e0      	bne.n	800aa46 <_dtoa_r+0x9ee>
 800aa84:	f018 0f01 	tst.w	r8, #1
 800aa88:	d0dd      	beq.n	800aa46 <_dtoa_r+0x9ee>
 800aa8a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aa8e:	d1d8      	bne.n	800aa42 <_dtoa_r+0x9ea>
 800aa90:	9b05      	ldr	r3, [sp, #20]
 800aa92:	9a05      	ldr	r2, [sp, #20]
 800aa94:	1c5d      	adds	r5, r3, #1
 800aa96:	2339      	movs	r3, #57	; 0x39
 800aa98:	7013      	strb	r3, [r2, #0]
 800aa9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800aa9e:	2b39      	cmp	r3, #57	; 0x39
 800aaa0:	f105 32ff 	add.w	r2, r5, #4294967295
 800aaa4:	d04f      	beq.n	800ab46 <_dtoa_r+0xaee>
 800aaa6:	3301      	adds	r3, #1
 800aaa8:	7013      	strb	r3, [r2, #0]
 800aaaa:	e754      	b.n	800a956 <_dtoa_r+0x8fe>
 800aaac:	9a05      	ldr	r2, [sp, #20]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	f102 0501 	add.w	r5, r2, #1
 800aab4:	dd06      	ble.n	800aac4 <_dtoa_r+0xa6c>
 800aab6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800aaba:	d0e9      	beq.n	800aa90 <_dtoa_r+0xa38>
 800aabc:	f108 0801 	add.w	r8, r8, #1
 800aac0:	9b05      	ldr	r3, [sp, #20]
 800aac2:	e7c2      	b.n	800aa4a <_dtoa_r+0x9f2>
 800aac4:	9a02      	ldr	r2, [sp, #8]
 800aac6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800aaca:	eba5 030b 	sub.w	r3, r5, fp
 800aace:	4293      	cmp	r3, r2
 800aad0:	d021      	beq.n	800ab16 <_dtoa_r+0xabe>
 800aad2:	2300      	movs	r3, #0
 800aad4:	220a      	movs	r2, #10
 800aad6:	9904      	ldr	r1, [sp, #16]
 800aad8:	4620      	mov	r0, r4
 800aada:	f000 fab9 	bl	800b050 <__multadd>
 800aade:	45b1      	cmp	r9, r6
 800aae0:	9004      	str	r0, [sp, #16]
 800aae2:	f04f 0300 	mov.w	r3, #0
 800aae6:	f04f 020a 	mov.w	r2, #10
 800aaea:	4649      	mov	r1, r9
 800aaec:	4620      	mov	r0, r4
 800aaee:	d105      	bne.n	800aafc <_dtoa_r+0xaa4>
 800aaf0:	f000 faae 	bl	800b050 <__multadd>
 800aaf4:	4681      	mov	r9, r0
 800aaf6:	4606      	mov	r6, r0
 800aaf8:	9505      	str	r5, [sp, #20]
 800aafa:	e776      	b.n	800a9ea <_dtoa_r+0x992>
 800aafc:	f000 faa8 	bl	800b050 <__multadd>
 800ab00:	4631      	mov	r1, r6
 800ab02:	4681      	mov	r9, r0
 800ab04:	2300      	movs	r3, #0
 800ab06:	220a      	movs	r2, #10
 800ab08:	4620      	mov	r0, r4
 800ab0a:	f000 faa1 	bl	800b050 <__multadd>
 800ab0e:	4606      	mov	r6, r0
 800ab10:	e7f2      	b.n	800aaf8 <_dtoa_r+0xaa0>
 800ab12:	f04f 0900 	mov.w	r9, #0
 800ab16:	2201      	movs	r2, #1
 800ab18:	9904      	ldr	r1, [sp, #16]
 800ab1a:	4620      	mov	r0, r4
 800ab1c:	f000 fc0e 	bl	800b33c <__lshift>
 800ab20:	4639      	mov	r1, r7
 800ab22:	9004      	str	r0, [sp, #16]
 800ab24:	f000 fc5e 	bl	800b3e4 <__mcmp>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	dcb6      	bgt.n	800aa9a <_dtoa_r+0xa42>
 800ab2c:	d102      	bne.n	800ab34 <_dtoa_r+0xadc>
 800ab2e:	f018 0f01 	tst.w	r8, #1
 800ab32:	d1b2      	bne.n	800aa9a <_dtoa_r+0xa42>
 800ab34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ab38:	2b30      	cmp	r3, #48	; 0x30
 800ab3a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ab3e:	f47f af0a 	bne.w	800a956 <_dtoa_r+0x8fe>
 800ab42:	4615      	mov	r5, r2
 800ab44:	e7f6      	b.n	800ab34 <_dtoa_r+0xadc>
 800ab46:	4593      	cmp	fp, r2
 800ab48:	d105      	bne.n	800ab56 <_dtoa_r+0xafe>
 800ab4a:	2331      	movs	r3, #49	; 0x31
 800ab4c:	f10a 0a01 	add.w	sl, sl, #1
 800ab50:	f88b 3000 	strb.w	r3, [fp]
 800ab54:	e6ff      	b.n	800a956 <_dtoa_r+0x8fe>
 800ab56:	4615      	mov	r5, r2
 800ab58:	e79f      	b.n	800aa9a <_dtoa_r+0xa42>
 800ab5a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800abc0 <_dtoa_r+0xb68>
 800ab5e:	e007      	b.n	800ab70 <_dtoa_r+0xb18>
 800ab60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab62:	f8df b060 	ldr.w	fp, [pc, #96]	; 800abc4 <_dtoa_r+0xb6c>
 800ab66:	b11b      	cbz	r3, 800ab70 <_dtoa_r+0xb18>
 800ab68:	f10b 0308 	add.w	r3, fp, #8
 800ab6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ab6e:	6013      	str	r3, [r2, #0]
 800ab70:	4658      	mov	r0, fp
 800ab72:	b017      	add	sp, #92	; 0x5c
 800ab74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab78:	9b06      	ldr	r3, [sp, #24]
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	f77f ae35 	ble.w	800a7ea <_dtoa_r+0x792>
 800ab80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ab82:	9307      	str	r3, [sp, #28]
 800ab84:	e649      	b.n	800a81a <_dtoa_r+0x7c2>
 800ab86:	9b02      	ldr	r3, [sp, #8]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	dc03      	bgt.n	800ab94 <_dtoa_r+0xb3c>
 800ab8c:	9b06      	ldr	r3, [sp, #24]
 800ab8e:	2b02      	cmp	r3, #2
 800ab90:	f73f aecc 	bgt.w	800a92c <_dtoa_r+0x8d4>
 800ab94:	465d      	mov	r5, fp
 800ab96:	4639      	mov	r1, r7
 800ab98:	9804      	ldr	r0, [sp, #16]
 800ab9a:	f7ff f9cf 	bl	8009f3c <quorem>
 800ab9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aba2:	f805 8b01 	strb.w	r8, [r5], #1
 800aba6:	9a02      	ldr	r2, [sp, #8]
 800aba8:	eba5 030b 	sub.w	r3, r5, fp
 800abac:	429a      	cmp	r2, r3
 800abae:	ddb0      	ble.n	800ab12 <_dtoa_r+0xaba>
 800abb0:	2300      	movs	r3, #0
 800abb2:	220a      	movs	r2, #10
 800abb4:	9904      	ldr	r1, [sp, #16]
 800abb6:	4620      	mov	r0, r4
 800abb8:	f000 fa4a 	bl	800b050 <__multadd>
 800abbc:	9004      	str	r0, [sp, #16]
 800abbe:	e7ea      	b.n	800ab96 <_dtoa_r+0xb3e>
 800abc0:	0801396c 	.word	0x0801396c
 800abc4:	08013990 	.word	0x08013990

0800abc8 <__sflush_r>:
 800abc8:	898a      	ldrh	r2, [r1, #12]
 800abca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abce:	4605      	mov	r5, r0
 800abd0:	0710      	lsls	r0, r2, #28
 800abd2:	460c      	mov	r4, r1
 800abd4:	d458      	bmi.n	800ac88 <__sflush_r+0xc0>
 800abd6:	684b      	ldr	r3, [r1, #4]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	dc05      	bgt.n	800abe8 <__sflush_r+0x20>
 800abdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abde:	2b00      	cmp	r3, #0
 800abe0:	dc02      	bgt.n	800abe8 <__sflush_r+0x20>
 800abe2:	2000      	movs	r0, #0
 800abe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800abea:	2e00      	cmp	r6, #0
 800abec:	d0f9      	beq.n	800abe2 <__sflush_r+0x1a>
 800abee:	2300      	movs	r3, #0
 800abf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800abf4:	682f      	ldr	r7, [r5, #0]
 800abf6:	6a21      	ldr	r1, [r4, #32]
 800abf8:	602b      	str	r3, [r5, #0]
 800abfa:	d032      	beq.n	800ac62 <__sflush_r+0x9a>
 800abfc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800abfe:	89a3      	ldrh	r3, [r4, #12]
 800ac00:	075a      	lsls	r2, r3, #29
 800ac02:	d505      	bpl.n	800ac10 <__sflush_r+0x48>
 800ac04:	6863      	ldr	r3, [r4, #4]
 800ac06:	1ac0      	subs	r0, r0, r3
 800ac08:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac0a:	b10b      	cbz	r3, 800ac10 <__sflush_r+0x48>
 800ac0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac0e:	1ac0      	subs	r0, r0, r3
 800ac10:	2300      	movs	r3, #0
 800ac12:	4602      	mov	r2, r0
 800ac14:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac16:	6a21      	ldr	r1, [r4, #32]
 800ac18:	4628      	mov	r0, r5
 800ac1a:	47b0      	blx	r6
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	89a3      	ldrh	r3, [r4, #12]
 800ac20:	d106      	bne.n	800ac30 <__sflush_r+0x68>
 800ac22:	6829      	ldr	r1, [r5, #0]
 800ac24:	291d      	cmp	r1, #29
 800ac26:	d848      	bhi.n	800acba <__sflush_r+0xf2>
 800ac28:	4a29      	ldr	r2, [pc, #164]	; (800acd0 <__sflush_r+0x108>)
 800ac2a:	40ca      	lsrs	r2, r1
 800ac2c:	07d6      	lsls	r6, r2, #31
 800ac2e:	d544      	bpl.n	800acba <__sflush_r+0xf2>
 800ac30:	2200      	movs	r2, #0
 800ac32:	6062      	str	r2, [r4, #4]
 800ac34:	04d9      	lsls	r1, r3, #19
 800ac36:	6922      	ldr	r2, [r4, #16]
 800ac38:	6022      	str	r2, [r4, #0]
 800ac3a:	d504      	bpl.n	800ac46 <__sflush_r+0x7e>
 800ac3c:	1c42      	adds	r2, r0, #1
 800ac3e:	d101      	bne.n	800ac44 <__sflush_r+0x7c>
 800ac40:	682b      	ldr	r3, [r5, #0]
 800ac42:	b903      	cbnz	r3, 800ac46 <__sflush_r+0x7e>
 800ac44:	6560      	str	r0, [r4, #84]	; 0x54
 800ac46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac48:	602f      	str	r7, [r5, #0]
 800ac4a:	2900      	cmp	r1, #0
 800ac4c:	d0c9      	beq.n	800abe2 <__sflush_r+0x1a>
 800ac4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac52:	4299      	cmp	r1, r3
 800ac54:	d002      	beq.n	800ac5c <__sflush_r+0x94>
 800ac56:	4628      	mov	r0, r5
 800ac58:	f7fe fac4 	bl	80091e4 <_free_r>
 800ac5c:	2000      	movs	r0, #0
 800ac5e:	6360      	str	r0, [r4, #52]	; 0x34
 800ac60:	e7c0      	b.n	800abe4 <__sflush_r+0x1c>
 800ac62:	2301      	movs	r3, #1
 800ac64:	4628      	mov	r0, r5
 800ac66:	47b0      	blx	r6
 800ac68:	1c41      	adds	r1, r0, #1
 800ac6a:	d1c8      	bne.n	800abfe <__sflush_r+0x36>
 800ac6c:	682b      	ldr	r3, [r5, #0]
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d0c5      	beq.n	800abfe <__sflush_r+0x36>
 800ac72:	2b1d      	cmp	r3, #29
 800ac74:	d001      	beq.n	800ac7a <__sflush_r+0xb2>
 800ac76:	2b16      	cmp	r3, #22
 800ac78:	d101      	bne.n	800ac7e <__sflush_r+0xb6>
 800ac7a:	602f      	str	r7, [r5, #0]
 800ac7c:	e7b1      	b.n	800abe2 <__sflush_r+0x1a>
 800ac7e:	89a3      	ldrh	r3, [r4, #12]
 800ac80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac84:	81a3      	strh	r3, [r4, #12]
 800ac86:	e7ad      	b.n	800abe4 <__sflush_r+0x1c>
 800ac88:	690f      	ldr	r7, [r1, #16]
 800ac8a:	2f00      	cmp	r7, #0
 800ac8c:	d0a9      	beq.n	800abe2 <__sflush_r+0x1a>
 800ac8e:	0793      	lsls	r3, r2, #30
 800ac90:	680e      	ldr	r6, [r1, #0]
 800ac92:	bf08      	it	eq
 800ac94:	694b      	ldreq	r3, [r1, #20]
 800ac96:	600f      	str	r7, [r1, #0]
 800ac98:	bf18      	it	ne
 800ac9a:	2300      	movne	r3, #0
 800ac9c:	eba6 0807 	sub.w	r8, r6, r7
 800aca0:	608b      	str	r3, [r1, #8]
 800aca2:	f1b8 0f00 	cmp.w	r8, #0
 800aca6:	dd9c      	ble.n	800abe2 <__sflush_r+0x1a>
 800aca8:	4643      	mov	r3, r8
 800acaa:	463a      	mov	r2, r7
 800acac:	6a21      	ldr	r1, [r4, #32]
 800acae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acb0:	4628      	mov	r0, r5
 800acb2:	47b0      	blx	r6
 800acb4:	2800      	cmp	r0, #0
 800acb6:	dc06      	bgt.n	800acc6 <__sflush_r+0xfe>
 800acb8:	89a3      	ldrh	r3, [r4, #12]
 800acba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acbe:	81a3      	strh	r3, [r4, #12]
 800acc0:	f04f 30ff 	mov.w	r0, #4294967295
 800acc4:	e78e      	b.n	800abe4 <__sflush_r+0x1c>
 800acc6:	4407      	add	r7, r0
 800acc8:	eba8 0800 	sub.w	r8, r8, r0
 800accc:	e7e9      	b.n	800aca2 <__sflush_r+0xda>
 800acce:	bf00      	nop
 800acd0:	20400001 	.word	0x20400001

0800acd4 <_fflush_r>:
 800acd4:	b538      	push	{r3, r4, r5, lr}
 800acd6:	690b      	ldr	r3, [r1, #16]
 800acd8:	4605      	mov	r5, r0
 800acda:	460c      	mov	r4, r1
 800acdc:	b1db      	cbz	r3, 800ad16 <_fflush_r+0x42>
 800acde:	b118      	cbz	r0, 800ace8 <_fflush_r+0x14>
 800ace0:	6983      	ldr	r3, [r0, #24]
 800ace2:	b90b      	cbnz	r3, 800ace8 <_fflush_r+0x14>
 800ace4:	f000 f860 	bl	800ada8 <__sinit>
 800ace8:	4b0c      	ldr	r3, [pc, #48]	; (800ad1c <_fflush_r+0x48>)
 800acea:	429c      	cmp	r4, r3
 800acec:	d109      	bne.n	800ad02 <_fflush_r+0x2e>
 800acee:	686c      	ldr	r4, [r5, #4]
 800acf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acf4:	b17b      	cbz	r3, 800ad16 <_fflush_r+0x42>
 800acf6:	4621      	mov	r1, r4
 800acf8:	4628      	mov	r0, r5
 800acfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acfe:	f7ff bf63 	b.w	800abc8 <__sflush_r>
 800ad02:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <_fflush_r+0x4c>)
 800ad04:	429c      	cmp	r4, r3
 800ad06:	d101      	bne.n	800ad0c <_fflush_r+0x38>
 800ad08:	68ac      	ldr	r4, [r5, #8]
 800ad0a:	e7f1      	b.n	800acf0 <_fflush_r+0x1c>
 800ad0c:	4b05      	ldr	r3, [pc, #20]	; (800ad24 <_fflush_r+0x50>)
 800ad0e:	429c      	cmp	r4, r3
 800ad10:	bf08      	it	eq
 800ad12:	68ec      	ldreq	r4, [r5, #12]
 800ad14:	e7ec      	b.n	800acf0 <_fflush_r+0x1c>
 800ad16:	2000      	movs	r0, #0
 800ad18:	bd38      	pop	{r3, r4, r5, pc}
 800ad1a:	bf00      	nop
 800ad1c:	080139c0 	.word	0x080139c0
 800ad20:	080139e0 	.word	0x080139e0
 800ad24:	080139a0 	.word	0x080139a0

0800ad28 <std>:
 800ad28:	2300      	movs	r3, #0
 800ad2a:	b510      	push	{r4, lr}
 800ad2c:	4604      	mov	r4, r0
 800ad2e:	e9c0 3300 	strd	r3, r3, [r0]
 800ad32:	6083      	str	r3, [r0, #8]
 800ad34:	8181      	strh	r1, [r0, #12]
 800ad36:	6643      	str	r3, [r0, #100]	; 0x64
 800ad38:	81c2      	strh	r2, [r0, #14]
 800ad3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad3e:	6183      	str	r3, [r0, #24]
 800ad40:	4619      	mov	r1, r3
 800ad42:	2208      	movs	r2, #8
 800ad44:	305c      	adds	r0, #92	; 0x5c
 800ad46:	f7fe fa45 	bl	80091d4 <memset>
 800ad4a:	4b05      	ldr	r3, [pc, #20]	; (800ad60 <std+0x38>)
 800ad4c:	6263      	str	r3, [r4, #36]	; 0x24
 800ad4e:	4b05      	ldr	r3, [pc, #20]	; (800ad64 <std+0x3c>)
 800ad50:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad52:	4b05      	ldr	r3, [pc, #20]	; (800ad68 <std+0x40>)
 800ad54:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad56:	4b05      	ldr	r3, [pc, #20]	; (800ad6c <std+0x44>)
 800ad58:	6224      	str	r4, [r4, #32]
 800ad5a:	6323      	str	r3, [r4, #48]	; 0x30
 800ad5c:	bd10      	pop	{r4, pc}
 800ad5e:	bf00      	nop
 800ad60:	0800bab1 	.word	0x0800bab1
 800ad64:	0800bad3 	.word	0x0800bad3
 800ad68:	0800bb0b 	.word	0x0800bb0b
 800ad6c:	0800bb2f 	.word	0x0800bb2f

0800ad70 <_cleanup_r>:
 800ad70:	4901      	ldr	r1, [pc, #4]	; (800ad78 <_cleanup_r+0x8>)
 800ad72:	f000 b885 	b.w	800ae80 <_fwalk_reent>
 800ad76:	bf00      	nop
 800ad78:	0800acd5 	.word	0x0800acd5

0800ad7c <__sfmoreglue>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	1e4a      	subs	r2, r1, #1
 800ad80:	2568      	movs	r5, #104	; 0x68
 800ad82:	4355      	muls	r5, r2
 800ad84:	460e      	mov	r6, r1
 800ad86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ad8a:	f7fe fa79 	bl	8009280 <_malloc_r>
 800ad8e:	4604      	mov	r4, r0
 800ad90:	b140      	cbz	r0, 800ada4 <__sfmoreglue+0x28>
 800ad92:	2100      	movs	r1, #0
 800ad94:	e9c0 1600 	strd	r1, r6, [r0]
 800ad98:	300c      	adds	r0, #12
 800ad9a:	60a0      	str	r0, [r4, #8]
 800ad9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ada0:	f7fe fa18 	bl	80091d4 <memset>
 800ada4:	4620      	mov	r0, r4
 800ada6:	bd70      	pop	{r4, r5, r6, pc}

0800ada8 <__sinit>:
 800ada8:	6983      	ldr	r3, [r0, #24]
 800adaa:	b510      	push	{r4, lr}
 800adac:	4604      	mov	r4, r0
 800adae:	bb33      	cbnz	r3, 800adfe <__sinit+0x56>
 800adb0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800adb4:	6503      	str	r3, [r0, #80]	; 0x50
 800adb6:	4b12      	ldr	r3, [pc, #72]	; (800ae00 <__sinit+0x58>)
 800adb8:	4a12      	ldr	r2, [pc, #72]	; (800ae04 <__sinit+0x5c>)
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	6282      	str	r2, [r0, #40]	; 0x28
 800adbe:	4298      	cmp	r0, r3
 800adc0:	bf04      	itt	eq
 800adc2:	2301      	moveq	r3, #1
 800adc4:	6183      	streq	r3, [r0, #24]
 800adc6:	f000 f81f 	bl	800ae08 <__sfp>
 800adca:	6060      	str	r0, [r4, #4]
 800adcc:	4620      	mov	r0, r4
 800adce:	f000 f81b 	bl	800ae08 <__sfp>
 800add2:	60a0      	str	r0, [r4, #8]
 800add4:	4620      	mov	r0, r4
 800add6:	f000 f817 	bl	800ae08 <__sfp>
 800adda:	2200      	movs	r2, #0
 800addc:	60e0      	str	r0, [r4, #12]
 800adde:	2104      	movs	r1, #4
 800ade0:	6860      	ldr	r0, [r4, #4]
 800ade2:	f7ff ffa1 	bl	800ad28 <std>
 800ade6:	2201      	movs	r2, #1
 800ade8:	2109      	movs	r1, #9
 800adea:	68a0      	ldr	r0, [r4, #8]
 800adec:	f7ff ff9c 	bl	800ad28 <std>
 800adf0:	2202      	movs	r2, #2
 800adf2:	2112      	movs	r1, #18
 800adf4:	68e0      	ldr	r0, [r4, #12]
 800adf6:	f7ff ff97 	bl	800ad28 <std>
 800adfa:	2301      	movs	r3, #1
 800adfc:	61a3      	str	r3, [r4, #24]
 800adfe:	bd10      	pop	{r4, pc}
 800ae00:	08013958 	.word	0x08013958
 800ae04:	0800ad71 	.word	0x0800ad71

0800ae08 <__sfp>:
 800ae08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae0a:	4b1b      	ldr	r3, [pc, #108]	; (800ae78 <__sfp+0x70>)
 800ae0c:	681e      	ldr	r6, [r3, #0]
 800ae0e:	69b3      	ldr	r3, [r6, #24]
 800ae10:	4607      	mov	r7, r0
 800ae12:	b913      	cbnz	r3, 800ae1a <__sfp+0x12>
 800ae14:	4630      	mov	r0, r6
 800ae16:	f7ff ffc7 	bl	800ada8 <__sinit>
 800ae1a:	3648      	adds	r6, #72	; 0x48
 800ae1c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ae20:	3b01      	subs	r3, #1
 800ae22:	d503      	bpl.n	800ae2c <__sfp+0x24>
 800ae24:	6833      	ldr	r3, [r6, #0]
 800ae26:	b133      	cbz	r3, 800ae36 <__sfp+0x2e>
 800ae28:	6836      	ldr	r6, [r6, #0]
 800ae2a:	e7f7      	b.n	800ae1c <__sfp+0x14>
 800ae2c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ae30:	b16d      	cbz	r5, 800ae4e <__sfp+0x46>
 800ae32:	3468      	adds	r4, #104	; 0x68
 800ae34:	e7f4      	b.n	800ae20 <__sfp+0x18>
 800ae36:	2104      	movs	r1, #4
 800ae38:	4638      	mov	r0, r7
 800ae3a:	f7ff ff9f 	bl	800ad7c <__sfmoreglue>
 800ae3e:	6030      	str	r0, [r6, #0]
 800ae40:	2800      	cmp	r0, #0
 800ae42:	d1f1      	bne.n	800ae28 <__sfp+0x20>
 800ae44:	230c      	movs	r3, #12
 800ae46:	603b      	str	r3, [r7, #0]
 800ae48:	4604      	mov	r4, r0
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae4e:	4b0b      	ldr	r3, [pc, #44]	; (800ae7c <__sfp+0x74>)
 800ae50:	6665      	str	r5, [r4, #100]	; 0x64
 800ae52:	e9c4 5500 	strd	r5, r5, [r4]
 800ae56:	60a5      	str	r5, [r4, #8]
 800ae58:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ae5c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ae60:	2208      	movs	r2, #8
 800ae62:	4629      	mov	r1, r5
 800ae64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ae68:	f7fe f9b4 	bl	80091d4 <memset>
 800ae6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ae70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ae74:	e7e9      	b.n	800ae4a <__sfp+0x42>
 800ae76:	bf00      	nop
 800ae78:	08013958 	.word	0x08013958
 800ae7c:	ffff0001 	.word	0xffff0001

0800ae80 <_fwalk_reent>:
 800ae80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae84:	4680      	mov	r8, r0
 800ae86:	4689      	mov	r9, r1
 800ae88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ae8c:	2600      	movs	r6, #0
 800ae8e:	b914      	cbnz	r4, 800ae96 <_fwalk_reent+0x16>
 800ae90:	4630      	mov	r0, r6
 800ae92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae96:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ae9a:	3f01      	subs	r7, #1
 800ae9c:	d501      	bpl.n	800aea2 <_fwalk_reent+0x22>
 800ae9e:	6824      	ldr	r4, [r4, #0]
 800aea0:	e7f5      	b.n	800ae8e <_fwalk_reent+0xe>
 800aea2:	89ab      	ldrh	r3, [r5, #12]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d907      	bls.n	800aeb8 <_fwalk_reent+0x38>
 800aea8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800aeac:	3301      	adds	r3, #1
 800aeae:	d003      	beq.n	800aeb8 <_fwalk_reent+0x38>
 800aeb0:	4629      	mov	r1, r5
 800aeb2:	4640      	mov	r0, r8
 800aeb4:	47c8      	blx	r9
 800aeb6:	4306      	orrs	r6, r0
 800aeb8:	3568      	adds	r5, #104	; 0x68
 800aeba:	e7ee      	b.n	800ae9a <_fwalk_reent+0x1a>

0800aebc <_localeconv_r>:
 800aebc:	4b04      	ldr	r3, [pc, #16]	; (800aed0 <_localeconv_r+0x14>)
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	6a18      	ldr	r0, [r3, #32]
 800aec2:	4b04      	ldr	r3, [pc, #16]	; (800aed4 <_localeconv_r+0x18>)
 800aec4:	2800      	cmp	r0, #0
 800aec6:	bf08      	it	eq
 800aec8:	4618      	moveq	r0, r3
 800aeca:	30f0      	adds	r0, #240	; 0xf0
 800aecc:	4770      	bx	lr
 800aece:	bf00      	nop
 800aed0:	20000010 	.word	0x20000010
 800aed4:	20000074 	.word	0x20000074

0800aed8 <__swhatbuf_r>:
 800aed8:	b570      	push	{r4, r5, r6, lr}
 800aeda:	460e      	mov	r6, r1
 800aedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aee0:	2900      	cmp	r1, #0
 800aee2:	b096      	sub	sp, #88	; 0x58
 800aee4:	4614      	mov	r4, r2
 800aee6:	461d      	mov	r5, r3
 800aee8:	da07      	bge.n	800aefa <__swhatbuf_r+0x22>
 800aeea:	2300      	movs	r3, #0
 800aeec:	602b      	str	r3, [r5, #0]
 800aeee:	89b3      	ldrh	r3, [r6, #12]
 800aef0:	061a      	lsls	r2, r3, #24
 800aef2:	d410      	bmi.n	800af16 <__swhatbuf_r+0x3e>
 800aef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aef8:	e00e      	b.n	800af18 <__swhatbuf_r+0x40>
 800aefa:	466a      	mov	r2, sp
 800aefc:	f000 fe3e 	bl	800bb7c <_fstat_r>
 800af00:	2800      	cmp	r0, #0
 800af02:	dbf2      	blt.n	800aeea <__swhatbuf_r+0x12>
 800af04:	9a01      	ldr	r2, [sp, #4]
 800af06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af0e:	425a      	negs	r2, r3
 800af10:	415a      	adcs	r2, r3
 800af12:	602a      	str	r2, [r5, #0]
 800af14:	e7ee      	b.n	800aef4 <__swhatbuf_r+0x1c>
 800af16:	2340      	movs	r3, #64	; 0x40
 800af18:	2000      	movs	r0, #0
 800af1a:	6023      	str	r3, [r4, #0]
 800af1c:	b016      	add	sp, #88	; 0x58
 800af1e:	bd70      	pop	{r4, r5, r6, pc}

0800af20 <__smakebuf_r>:
 800af20:	898b      	ldrh	r3, [r1, #12]
 800af22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800af24:	079d      	lsls	r5, r3, #30
 800af26:	4606      	mov	r6, r0
 800af28:	460c      	mov	r4, r1
 800af2a:	d507      	bpl.n	800af3c <__smakebuf_r+0x1c>
 800af2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800af30:	6023      	str	r3, [r4, #0]
 800af32:	6123      	str	r3, [r4, #16]
 800af34:	2301      	movs	r3, #1
 800af36:	6163      	str	r3, [r4, #20]
 800af38:	b002      	add	sp, #8
 800af3a:	bd70      	pop	{r4, r5, r6, pc}
 800af3c:	ab01      	add	r3, sp, #4
 800af3e:	466a      	mov	r2, sp
 800af40:	f7ff ffca 	bl	800aed8 <__swhatbuf_r>
 800af44:	9900      	ldr	r1, [sp, #0]
 800af46:	4605      	mov	r5, r0
 800af48:	4630      	mov	r0, r6
 800af4a:	f7fe f999 	bl	8009280 <_malloc_r>
 800af4e:	b948      	cbnz	r0, 800af64 <__smakebuf_r+0x44>
 800af50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af54:	059a      	lsls	r2, r3, #22
 800af56:	d4ef      	bmi.n	800af38 <__smakebuf_r+0x18>
 800af58:	f023 0303 	bic.w	r3, r3, #3
 800af5c:	f043 0302 	orr.w	r3, r3, #2
 800af60:	81a3      	strh	r3, [r4, #12]
 800af62:	e7e3      	b.n	800af2c <__smakebuf_r+0xc>
 800af64:	4b0d      	ldr	r3, [pc, #52]	; (800af9c <__smakebuf_r+0x7c>)
 800af66:	62b3      	str	r3, [r6, #40]	; 0x28
 800af68:	89a3      	ldrh	r3, [r4, #12]
 800af6a:	6020      	str	r0, [r4, #0]
 800af6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af70:	81a3      	strh	r3, [r4, #12]
 800af72:	9b00      	ldr	r3, [sp, #0]
 800af74:	6163      	str	r3, [r4, #20]
 800af76:	9b01      	ldr	r3, [sp, #4]
 800af78:	6120      	str	r0, [r4, #16]
 800af7a:	b15b      	cbz	r3, 800af94 <__smakebuf_r+0x74>
 800af7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af80:	4630      	mov	r0, r6
 800af82:	f000 fe0d 	bl	800bba0 <_isatty_r>
 800af86:	b128      	cbz	r0, 800af94 <__smakebuf_r+0x74>
 800af88:	89a3      	ldrh	r3, [r4, #12]
 800af8a:	f023 0303 	bic.w	r3, r3, #3
 800af8e:	f043 0301 	orr.w	r3, r3, #1
 800af92:	81a3      	strh	r3, [r4, #12]
 800af94:	89a3      	ldrh	r3, [r4, #12]
 800af96:	431d      	orrs	r5, r3
 800af98:	81a5      	strh	r5, [r4, #12]
 800af9a:	e7cd      	b.n	800af38 <__smakebuf_r+0x18>
 800af9c:	0800ad71 	.word	0x0800ad71

0800afa0 <memcpy>:
 800afa0:	b510      	push	{r4, lr}
 800afa2:	1e43      	subs	r3, r0, #1
 800afa4:	440a      	add	r2, r1
 800afa6:	4291      	cmp	r1, r2
 800afa8:	d100      	bne.n	800afac <memcpy+0xc>
 800afaa:	bd10      	pop	{r4, pc}
 800afac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afb4:	e7f7      	b.n	800afa6 <memcpy+0x6>

0800afb6 <__malloc_lock>:
 800afb6:	4770      	bx	lr

0800afb8 <__malloc_unlock>:
 800afb8:	4770      	bx	lr

0800afba <_Balloc>:
 800afba:	b570      	push	{r4, r5, r6, lr}
 800afbc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800afbe:	4604      	mov	r4, r0
 800afc0:	460e      	mov	r6, r1
 800afc2:	b93d      	cbnz	r5, 800afd4 <_Balloc+0x1a>
 800afc4:	2010      	movs	r0, #16
 800afc6:	f7fe f8f5 	bl	80091b4 <malloc>
 800afca:	6260      	str	r0, [r4, #36]	; 0x24
 800afcc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800afd0:	6005      	str	r5, [r0, #0]
 800afd2:	60c5      	str	r5, [r0, #12]
 800afd4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800afd6:	68eb      	ldr	r3, [r5, #12]
 800afd8:	b183      	cbz	r3, 800affc <_Balloc+0x42>
 800afda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afdc:	68db      	ldr	r3, [r3, #12]
 800afde:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800afe2:	b9b8      	cbnz	r0, 800b014 <_Balloc+0x5a>
 800afe4:	2101      	movs	r1, #1
 800afe6:	fa01 f506 	lsl.w	r5, r1, r6
 800afea:	1d6a      	adds	r2, r5, #5
 800afec:	0092      	lsls	r2, r2, #2
 800afee:	4620      	mov	r0, r4
 800aff0:	f000 fabe 	bl	800b570 <_calloc_r>
 800aff4:	b160      	cbz	r0, 800b010 <_Balloc+0x56>
 800aff6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800affa:	e00e      	b.n	800b01a <_Balloc+0x60>
 800affc:	2221      	movs	r2, #33	; 0x21
 800affe:	2104      	movs	r1, #4
 800b000:	4620      	mov	r0, r4
 800b002:	f000 fab5 	bl	800b570 <_calloc_r>
 800b006:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b008:	60e8      	str	r0, [r5, #12]
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d1e4      	bne.n	800afda <_Balloc+0x20>
 800b010:	2000      	movs	r0, #0
 800b012:	bd70      	pop	{r4, r5, r6, pc}
 800b014:	6802      	ldr	r2, [r0, #0]
 800b016:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b01a:	2300      	movs	r3, #0
 800b01c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b020:	e7f7      	b.n	800b012 <_Balloc+0x58>

0800b022 <_Bfree>:
 800b022:	b570      	push	{r4, r5, r6, lr}
 800b024:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b026:	4606      	mov	r6, r0
 800b028:	460d      	mov	r5, r1
 800b02a:	b93c      	cbnz	r4, 800b03c <_Bfree+0x1a>
 800b02c:	2010      	movs	r0, #16
 800b02e:	f7fe f8c1 	bl	80091b4 <malloc>
 800b032:	6270      	str	r0, [r6, #36]	; 0x24
 800b034:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b038:	6004      	str	r4, [r0, #0]
 800b03a:	60c4      	str	r4, [r0, #12]
 800b03c:	b13d      	cbz	r5, 800b04e <_Bfree+0x2c>
 800b03e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b040:	686a      	ldr	r2, [r5, #4]
 800b042:	68db      	ldr	r3, [r3, #12]
 800b044:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b048:	6029      	str	r1, [r5, #0]
 800b04a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b04e:	bd70      	pop	{r4, r5, r6, pc}

0800b050 <__multadd>:
 800b050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b054:	690d      	ldr	r5, [r1, #16]
 800b056:	461f      	mov	r7, r3
 800b058:	4606      	mov	r6, r0
 800b05a:	460c      	mov	r4, r1
 800b05c:	f101 0c14 	add.w	ip, r1, #20
 800b060:	2300      	movs	r3, #0
 800b062:	f8dc 0000 	ldr.w	r0, [ip]
 800b066:	b281      	uxth	r1, r0
 800b068:	fb02 7101 	mla	r1, r2, r1, r7
 800b06c:	0c0f      	lsrs	r7, r1, #16
 800b06e:	0c00      	lsrs	r0, r0, #16
 800b070:	fb02 7000 	mla	r0, r2, r0, r7
 800b074:	b289      	uxth	r1, r1
 800b076:	3301      	adds	r3, #1
 800b078:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b07c:	429d      	cmp	r5, r3
 800b07e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b082:	f84c 1b04 	str.w	r1, [ip], #4
 800b086:	dcec      	bgt.n	800b062 <__multadd+0x12>
 800b088:	b1d7      	cbz	r7, 800b0c0 <__multadd+0x70>
 800b08a:	68a3      	ldr	r3, [r4, #8]
 800b08c:	42ab      	cmp	r3, r5
 800b08e:	dc12      	bgt.n	800b0b6 <__multadd+0x66>
 800b090:	6861      	ldr	r1, [r4, #4]
 800b092:	4630      	mov	r0, r6
 800b094:	3101      	adds	r1, #1
 800b096:	f7ff ff90 	bl	800afba <_Balloc>
 800b09a:	6922      	ldr	r2, [r4, #16]
 800b09c:	3202      	adds	r2, #2
 800b09e:	f104 010c 	add.w	r1, r4, #12
 800b0a2:	4680      	mov	r8, r0
 800b0a4:	0092      	lsls	r2, r2, #2
 800b0a6:	300c      	adds	r0, #12
 800b0a8:	f7ff ff7a 	bl	800afa0 <memcpy>
 800b0ac:	4621      	mov	r1, r4
 800b0ae:	4630      	mov	r0, r6
 800b0b0:	f7ff ffb7 	bl	800b022 <_Bfree>
 800b0b4:	4644      	mov	r4, r8
 800b0b6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b0ba:	3501      	adds	r5, #1
 800b0bc:	615f      	str	r7, [r3, #20]
 800b0be:	6125      	str	r5, [r4, #16]
 800b0c0:	4620      	mov	r0, r4
 800b0c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b0c6 <__hi0bits>:
 800b0c6:	0c02      	lsrs	r2, r0, #16
 800b0c8:	0412      	lsls	r2, r2, #16
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	b9b2      	cbnz	r2, 800b0fc <__hi0bits+0x36>
 800b0ce:	0403      	lsls	r3, r0, #16
 800b0d0:	2010      	movs	r0, #16
 800b0d2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b0d6:	bf04      	itt	eq
 800b0d8:	021b      	lsleq	r3, r3, #8
 800b0da:	3008      	addeq	r0, #8
 800b0dc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800b0e0:	bf04      	itt	eq
 800b0e2:	011b      	lsleq	r3, r3, #4
 800b0e4:	3004      	addeq	r0, #4
 800b0e6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800b0ea:	bf04      	itt	eq
 800b0ec:	009b      	lsleq	r3, r3, #2
 800b0ee:	3002      	addeq	r0, #2
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	db06      	blt.n	800b102 <__hi0bits+0x3c>
 800b0f4:	005b      	lsls	r3, r3, #1
 800b0f6:	d503      	bpl.n	800b100 <__hi0bits+0x3a>
 800b0f8:	3001      	adds	r0, #1
 800b0fa:	4770      	bx	lr
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	e7e8      	b.n	800b0d2 <__hi0bits+0xc>
 800b100:	2020      	movs	r0, #32
 800b102:	4770      	bx	lr

0800b104 <__lo0bits>:
 800b104:	6803      	ldr	r3, [r0, #0]
 800b106:	f013 0207 	ands.w	r2, r3, #7
 800b10a:	4601      	mov	r1, r0
 800b10c:	d00b      	beq.n	800b126 <__lo0bits+0x22>
 800b10e:	07da      	lsls	r2, r3, #31
 800b110:	d423      	bmi.n	800b15a <__lo0bits+0x56>
 800b112:	0798      	lsls	r0, r3, #30
 800b114:	bf49      	itett	mi
 800b116:	085b      	lsrmi	r3, r3, #1
 800b118:	089b      	lsrpl	r3, r3, #2
 800b11a:	2001      	movmi	r0, #1
 800b11c:	600b      	strmi	r3, [r1, #0]
 800b11e:	bf5c      	itt	pl
 800b120:	600b      	strpl	r3, [r1, #0]
 800b122:	2002      	movpl	r0, #2
 800b124:	4770      	bx	lr
 800b126:	b298      	uxth	r0, r3
 800b128:	b9a8      	cbnz	r0, 800b156 <__lo0bits+0x52>
 800b12a:	0c1b      	lsrs	r3, r3, #16
 800b12c:	2010      	movs	r0, #16
 800b12e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b132:	bf04      	itt	eq
 800b134:	0a1b      	lsreq	r3, r3, #8
 800b136:	3008      	addeq	r0, #8
 800b138:	071a      	lsls	r2, r3, #28
 800b13a:	bf04      	itt	eq
 800b13c:	091b      	lsreq	r3, r3, #4
 800b13e:	3004      	addeq	r0, #4
 800b140:	079a      	lsls	r2, r3, #30
 800b142:	bf04      	itt	eq
 800b144:	089b      	lsreq	r3, r3, #2
 800b146:	3002      	addeq	r0, #2
 800b148:	07da      	lsls	r2, r3, #31
 800b14a:	d402      	bmi.n	800b152 <__lo0bits+0x4e>
 800b14c:	085b      	lsrs	r3, r3, #1
 800b14e:	d006      	beq.n	800b15e <__lo0bits+0x5a>
 800b150:	3001      	adds	r0, #1
 800b152:	600b      	str	r3, [r1, #0]
 800b154:	4770      	bx	lr
 800b156:	4610      	mov	r0, r2
 800b158:	e7e9      	b.n	800b12e <__lo0bits+0x2a>
 800b15a:	2000      	movs	r0, #0
 800b15c:	4770      	bx	lr
 800b15e:	2020      	movs	r0, #32
 800b160:	4770      	bx	lr

0800b162 <__i2b>:
 800b162:	b510      	push	{r4, lr}
 800b164:	460c      	mov	r4, r1
 800b166:	2101      	movs	r1, #1
 800b168:	f7ff ff27 	bl	800afba <_Balloc>
 800b16c:	2201      	movs	r2, #1
 800b16e:	6144      	str	r4, [r0, #20]
 800b170:	6102      	str	r2, [r0, #16]
 800b172:	bd10      	pop	{r4, pc}

0800b174 <__multiply>:
 800b174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b178:	4614      	mov	r4, r2
 800b17a:	690a      	ldr	r2, [r1, #16]
 800b17c:	6923      	ldr	r3, [r4, #16]
 800b17e:	429a      	cmp	r2, r3
 800b180:	bfb8      	it	lt
 800b182:	460b      	movlt	r3, r1
 800b184:	4688      	mov	r8, r1
 800b186:	bfbc      	itt	lt
 800b188:	46a0      	movlt	r8, r4
 800b18a:	461c      	movlt	r4, r3
 800b18c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b190:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b194:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b198:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b19c:	eb07 0609 	add.w	r6, r7, r9
 800b1a0:	42b3      	cmp	r3, r6
 800b1a2:	bfb8      	it	lt
 800b1a4:	3101      	addlt	r1, #1
 800b1a6:	f7ff ff08 	bl	800afba <_Balloc>
 800b1aa:	f100 0514 	add.w	r5, r0, #20
 800b1ae:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b1b2:	462b      	mov	r3, r5
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	4573      	cmp	r3, lr
 800b1b8:	d316      	bcc.n	800b1e8 <__multiply+0x74>
 800b1ba:	f104 0214 	add.w	r2, r4, #20
 800b1be:	f108 0114 	add.w	r1, r8, #20
 800b1c2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b1c6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b1ca:	9300      	str	r3, [sp, #0]
 800b1cc:	9b00      	ldr	r3, [sp, #0]
 800b1ce:	9201      	str	r2, [sp, #4]
 800b1d0:	4293      	cmp	r3, r2
 800b1d2:	d80c      	bhi.n	800b1ee <__multiply+0x7a>
 800b1d4:	2e00      	cmp	r6, #0
 800b1d6:	dd03      	ble.n	800b1e0 <__multiply+0x6c>
 800b1d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d05d      	beq.n	800b29c <__multiply+0x128>
 800b1e0:	6106      	str	r6, [r0, #16]
 800b1e2:	b003      	add	sp, #12
 800b1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1e8:	f843 2b04 	str.w	r2, [r3], #4
 800b1ec:	e7e3      	b.n	800b1b6 <__multiply+0x42>
 800b1ee:	f8b2 b000 	ldrh.w	fp, [r2]
 800b1f2:	f1bb 0f00 	cmp.w	fp, #0
 800b1f6:	d023      	beq.n	800b240 <__multiply+0xcc>
 800b1f8:	4689      	mov	r9, r1
 800b1fa:	46ac      	mov	ip, r5
 800b1fc:	f04f 0800 	mov.w	r8, #0
 800b200:	f859 4b04 	ldr.w	r4, [r9], #4
 800b204:	f8dc a000 	ldr.w	sl, [ip]
 800b208:	b2a3      	uxth	r3, r4
 800b20a:	fa1f fa8a 	uxth.w	sl, sl
 800b20e:	fb0b a303 	mla	r3, fp, r3, sl
 800b212:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b216:	f8dc 4000 	ldr.w	r4, [ip]
 800b21a:	4443      	add	r3, r8
 800b21c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b220:	fb0b 840a 	mla	r4, fp, sl, r8
 800b224:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b228:	46e2      	mov	sl, ip
 800b22a:	b29b      	uxth	r3, r3
 800b22c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b230:	454f      	cmp	r7, r9
 800b232:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b236:	f84a 3b04 	str.w	r3, [sl], #4
 800b23a:	d82b      	bhi.n	800b294 <__multiply+0x120>
 800b23c:	f8cc 8004 	str.w	r8, [ip, #4]
 800b240:	9b01      	ldr	r3, [sp, #4]
 800b242:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b246:	3204      	adds	r2, #4
 800b248:	f1ba 0f00 	cmp.w	sl, #0
 800b24c:	d020      	beq.n	800b290 <__multiply+0x11c>
 800b24e:	682b      	ldr	r3, [r5, #0]
 800b250:	4689      	mov	r9, r1
 800b252:	46a8      	mov	r8, r5
 800b254:	f04f 0b00 	mov.w	fp, #0
 800b258:	f8b9 c000 	ldrh.w	ip, [r9]
 800b25c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b260:	fb0a 440c 	mla	r4, sl, ip, r4
 800b264:	445c      	add	r4, fp
 800b266:	46c4      	mov	ip, r8
 800b268:	b29b      	uxth	r3, r3
 800b26a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b26e:	f84c 3b04 	str.w	r3, [ip], #4
 800b272:	f859 3b04 	ldr.w	r3, [r9], #4
 800b276:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b27a:	0c1b      	lsrs	r3, r3, #16
 800b27c:	fb0a b303 	mla	r3, sl, r3, fp
 800b280:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b284:	454f      	cmp	r7, r9
 800b286:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b28a:	d805      	bhi.n	800b298 <__multiply+0x124>
 800b28c:	f8c8 3004 	str.w	r3, [r8, #4]
 800b290:	3504      	adds	r5, #4
 800b292:	e79b      	b.n	800b1cc <__multiply+0x58>
 800b294:	46d4      	mov	ip, sl
 800b296:	e7b3      	b.n	800b200 <__multiply+0x8c>
 800b298:	46e0      	mov	r8, ip
 800b29a:	e7dd      	b.n	800b258 <__multiply+0xe4>
 800b29c:	3e01      	subs	r6, #1
 800b29e:	e799      	b.n	800b1d4 <__multiply+0x60>

0800b2a0 <__pow5mult>:
 800b2a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2a4:	4615      	mov	r5, r2
 800b2a6:	f012 0203 	ands.w	r2, r2, #3
 800b2aa:	4606      	mov	r6, r0
 800b2ac:	460f      	mov	r7, r1
 800b2ae:	d007      	beq.n	800b2c0 <__pow5mult+0x20>
 800b2b0:	3a01      	subs	r2, #1
 800b2b2:	4c21      	ldr	r4, [pc, #132]	; (800b338 <__pow5mult+0x98>)
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2ba:	f7ff fec9 	bl	800b050 <__multadd>
 800b2be:	4607      	mov	r7, r0
 800b2c0:	10ad      	asrs	r5, r5, #2
 800b2c2:	d035      	beq.n	800b330 <__pow5mult+0x90>
 800b2c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2c6:	b93c      	cbnz	r4, 800b2d8 <__pow5mult+0x38>
 800b2c8:	2010      	movs	r0, #16
 800b2ca:	f7fd ff73 	bl	80091b4 <malloc>
 800b2ce:	6270      	str	r0, [r6, #36]	; 0x24
 800b2d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b2d4:	6004      	str	r4, [r0, #0]
 800b2d6:	60c4      	str	r4, [r0, #12]
 800b2d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b2dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b2e0:	b94c      	cbnz	r4, 800b2f6 <__pow5mult+0x56>
 800b2e2:	f240 2171 	movw	r1, #625	; 0x271
 800b2e6:	4630      	mov	r0, r6
 800b2e8:	f7ff ff3b 	bl	800b162 <__i2b>
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f8c8 0008 	str.w	r0, [r8, #8]
 800b2f2:	4604      	mov	r4, r0
 800b2f4:	6003      	str	r3, [r0, #0]
 800b2f6:	f04f 0800 	mov.w	r8, #0
 800b2fa:	07eb      	lsls	r3, r5, #31
 800b2fc:	d50a      	bpl.n	800b314 <__pow5mult+0x74>
 800b2fe:	4639      	mov	r1, r7
 800b300:	4622      	mov	r2, r4
 800b302:	4630      	mov	r0, r6
 800b304:	f7ff ff36 	bl	800b174 <__multiply>
 800b308:	4639      	mov	r1, r7
 800b30a:	4681      	mov	r9, r0
 800b30c:	4630      	mov	r0, r6
 800b30e:	f7ff fe88 	bl	800b022 <_Bfree>
 800b312:	464f      	mov	r7, r9
 800b314:	106d      	asrs	r5, r5, #1
 800b316:	d00b      	beq.n	800b330 <__pow5mult+0x90>
 800b318:	6820      	ldr	r0, [r4, #0]
 800b31a:	b938      	cbnz	r0, 800b32c <__pow5mult+0x8c>
 800b31c:	4622      	mov	r2, r4
 800b31e:	4621      	mov	r1, r4
 800b320:	4630      	mov	r0, r6
 800b322:	f7ff ff27 	bl	800b174 <__multiply>
 800b326:	6020      	str	r0, [r4, #0]
 800b328:	f8c0 8000 	str.w	r8, [r0]
 800b32c:	4604      	mov	r4, r0
 800b32e:	e7e4      	b.n	800b2fa <__pow5mult+0x5a>
 800b330:	4638      	mov	r0, r7
 800b332:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b336:	bf00      	nop
 800b338:	08013af0 	.word	0x08013af0

0800b33c <__lshift>:
 800b33c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b340:	460c      	mov	r4, r1
 800b342:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b346:	6923      	ldr	r3, [r4, #16]
 800b348:	6849      	ldr	r1, [r1, #4]
 800b34a:	eb0a 0903 	add.w	r9, sl, r3
 800b34e:	68a3      	ldr	r3, [r4, #8]
 800b350:	4607      	mov	r7, r0
 800b352:	4616      	mov	r6, r2
 800b354:	f109 0501 	add.w	r5, r9, #1
 800b358:	42ab      	cmp	r3, r5
 800b35a:	db32      	blt.n	800b3c2 <__lshift+0x86>
 800b35c:	4638      	mov	r0, r7
 800b35e:	f7ff fe2c 	bl	800afba <_Balloc>
 800b362:	2300      	movs	r3, #0
 800b364:	4680      	mov	r8, r0
 800b366:	f100 0114 	add.w	r1, r0, #20
 800b36a:	461a      	mov	r2, r3
 800b36c:	4553      	cmp	r3, sl
 800b36e:	db2b      	blt.n	800b3c8 <__lshift+0x8c>
 800b370:	6920      	ldr	r0, [r4, #16]
 800b372:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b376:	f104 0314 	add.w	r3, r4, #20
 800b37a:	f016 021f 	ands.w	r2, r6, #31
 800b37e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b382:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b386:	d025      	beq.n	800b3d4 <__lshift+0x98>
 800b388:	f1c2 0e20 	rsb	lr, r2, #32
 800b38c:	2000      	movs	r0, #0
 800b38e:	681e      	ldr	r6, [r3, #0]
 800b390:	468a      	mov	sl, r1
 800b392:	4096      	lsls	r6, r2
 800b394:	4330      	orrs	r0, r6
 800b396:	f84a 0b04 	str.w	r0, [sl], #4
 800b39a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b39e:	459c      	cmp	ip, r3
 800b3a0:	fa20 f00e 	lsr.w	r0, r0, lr
 800b3a4:	d814      	bhi.n	800b3d0 <__lshift+0x94>
 800b3a6:	6048      	str	r0, [r1, #4]
 800b3a8:	b108      	cbz	r0, 800b3ae <__lshift+0x72>
 800b3aa:	f109 0502 	add.w	r5, r9, #2
 800b3ae:	3d01      	subs	r5, #1
 800b3b0:	4638      	mov	r0, r7
 800b3b2:	f8c8 5010 	str.w	r5, [r8, #16]
 800b3b6:	4621      	mov	r1, r4
 800b3b8:	f7ff fe33 	bl	800b022 <_Bfree>
 800b3bc:	4640      	mov	r0, r8
 800b3be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3c2:	3101      	adds	r1, #1
 800b3c4:	005b      	lsls	r3, r3, #1
 800b3c6:	e7c7      	b.n	800b358 <__lshift+0x1c>
 800b3c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b3cc:	3301      	adds	r3, #1
 800b3ce:	e7cd      	b.n	800b36c <__lshift+0x30>
 800b3d0:	4651      	mov	r1, sl
 800b3d2:	e7dc      	b.n	800b38e <__lshift+0x52>
 800b3d4:	3904      	subs	r1, #4
 800b3d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3da:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3de:	459c      	cmp	ip, r3
 800b3e0:	d8f9      	bhi.n	800b3d6 <__lshift+0x9a>
 800b3e2:	e7e4      	b.n	800b3ae <__lshift+0x72>

0800b3e4 <__mcmp>:
 800b3e4:	6903      	ldr	r3, [r0, #16]
 800b3e6:	690a      	ldr	r2, [r1, #16]
 800b3e8:	1a9b      	subs	r3, r3, r2
 800b3ea:	b530      	push	{r4, r5, lr}
 800b3ec:	d10c      	bne.n	800b408 <__mcmp+0x24>
 800b3ee:	0092      	lsls	r2, r2, #2
 800b3f0:	3014      	adds	r0, #20
 800b3f2:	3114      	adds	r1, #20
 800b3f4:	1884      	adds	r4, r0, r2
 800b3f6:	4411      	add	r1, r2
 800b3f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b3fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b400:	4295      	cmp	r5, r2
 800b402:	d003      	beq.n	800b40c <__mcmp+0x28>
 800b404:	d305      	bcc.n	800b412 <__mcmp+0x2e>
 800b406:	2301      	movs	r3, #1
 800b408:	4618      	mov	r0, r3
 800b40a:	bd30      	pop	{r4, r5, pc}
 800b40c:	42a0      	cmp	r0, r4
 800b40e:	d3f3      	bcc.n	800b3f8 <__mcmp+0x14>
 800b410:	e7fa      	b.n	800b408 <__mcmp+0x24>
 800b412:	f04f 33ff 	mov.w	r3, #4294967295
 800b416:	e7f7      	b.n	800b408 <__mcmp+0x24>

0800b418 <__mdiff>:
 800b418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b41c:	460d      	mov	r5, r1
 800b41e:	4607      	mov	r7, r0
 800b420:	4611      	mov	r1, r2
 800b422:	4628      	mov	r0, r5
 800b424:	4614      	mov	r4, r2
 800b426:	f7ff ffdd 	bl	800b3e4 <__mcmp>
 800b42a:	1e06      	subs	r6, r0, #0
 800b42c:	d108      	bne.n	800b440 <__mdiff+0x28>
 800b42e:	4631      	mov	r1, r6
 800b430:	4638      	mov	r0, r7
 800b432:	f7ff fdc2 	bl	800afba <_Balloc>
 800b436:	2301      	movs	r3, #1
 800b438:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b440:	bfa4      	itt	ge
 800b442:	4623      	movge	r3, r4
 800b444:	462c      	movge	r4, r5
 800b446:	4638      	mov	r0, r7
 800b448:	6861      	ldr	r1, [r4, #4]
 800b44a:	bfa6      	itte	ge
 800b44c:	461d      	movge	r5, r3
 800b44e:	2600      	movge	r6, #0
 800b450:	2601      	movlt	r6, #1
 800b452:	f7ff fdb2 	bl	800afba <_Balloc>
 800b456:	692b      	ldr	r3, [r5, #16]
 800b458:	60c6      	str	r6, [r0, #12]
 800b45a:	6926      	ldr	r6, [r4, #16]
 800b45c:	f105 0914 	add.w	r9, r5, #20
 800b460:	f104 0214 	add.w	r2, r4, #20
 800b464:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b468:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b46c:	f100 0514 	add.w	r5, r0, #20
 800b470:	f04f 0e00 	mov.w	lr, #0
 800b474:	f852 ab04 	ldr.w	sl, [r2], #4
 800b478:	f859 4b04 	ldr.w	r4, [r9], #4
 800b47c:	fa1e f18a 	uxtah	r1, lr, sl
 800b480:	b2a3      	uxth	r3, r4
 800b482:	1ac9      	subs	r1, r1, r3
 800b484:	0c23      	lsrs	r3, r4, #16
 800b486:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b48a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b48e:	b289      	uxth	r1, r1
 800b490:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b494:	45c8      	cmp	r8, r9
 800b496:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b49a:	4694      	mov	ip, r2
 800b49c:	f845 3b04 	str.w	r3, [r5], #4
 800b4a0:	d8e8      	bhi.n	800b474 <__mdiff+0x5c>
 800b4a2:	45bc      	cmp	ip, r7
 800b4a4:	d304      	bcc.n	800b4b0 <__mdiff+0x98>
 800b4a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b4aa:	b183      	cbz	r3, 800b4ce <__mdiff+0xb6>
 800b4ac:	6106      	str	r6, [r0, #16]
 800b4ae:	e7c5      	b.n	800b43c <__mdiff+0x24>
 800b4b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b4b4:	fa1e f381 	uxtah	r3, lr, r1
 800b4b8:	141a      	asrs	r2, r3, #16
 800b4ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b4be:	b29b      	uxth	r3, r3
 800b4c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b4c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b4c8:	f845 3b04 	str.w	r3, [r5], #4
 800b4cc:	e7e9      	b.n	800b4a2 <__mdiff+0x8a>
 800b4ce:	3e01      	subs	r6, #1
 800b4d0:	e7e9      	b.n	800b4a6 <__mdiff+0x8e>

0800b4d2 <__d2b>:
 800b4d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b4d6:	460e      	mov	r6, r1
 800b4d8:	2101      	movs	r1, #1
 800b4da:	ec59 8b10 	vmov	r8, r9, d0
 800b4de:	4615      	mov	r5, r2
 800b4e0:	f7ff fd6b 	bl	800afba <_Balloc>
 800b4e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b4e8:	4607      	mov	r7, r0
 800b4ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4ee:	bb34      	cbnz	r4, 800b53e <__d2b+0x6c>
 800b4f0:	9301      	str	r3, [sp, #4]
 800b4f2:	f1b8 0300 	subs.w	r3, r8, #0
 800b4f6:	d027      	beq.n	800b548 <__d2b+0x76>
 800b4f8:	a802      	add	r0, sp, #8
 800b4fa:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b4fe:	f7ff fe01 	bl	800b104 <__lo0bits>
 800b502:	9900      	ldr	r1, [sp, #0]
 800b504:	b1f0      	cbz	r0, 800b544 <__d2b+0x72>
 800b506:	9a01      	ldr	r2, [sp, #4]
 800b508:	f1c0 0320 	rsb	r3, r0, #32
 800b50c:	fa02 f303 	lsl.w	r3, r2, r3
 800b510:	430b      	orrs	r3, r1
 800b512:	40c2      	lsrs	r2, r0
 800b514:	617b      	str	r3, [r7, #20]
 800b516:	9201      	str	r2, [sp, #4]
 800b518:	9b01      	ldr	r3, [sp, #4]
 800b51a:	61bb      	str	r3, [r7, #24]
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	bf14      	ite	ne
 800b520:	2102      	movne	r1, #2
 800b522:	2101      	moveq	r1, #1
 800b524:	6139      	str	r1, [r7, #16]
 800b526:	b1c4      	cbz	r4, 800b55a <__d2b+0x88>
 800b528:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b52c:	4404      	add	r4, r0
 800b52e:	6034      	str	r4, [r6, #0]
 800b530:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b534:	6028      	str	r0, [r5, #0]
 800b536:	4638      	mov	r0, r7
 800b538:	b003      	add	sp, #12
 800b53a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b53e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b542:	e7d5      	b.n	800b4f0 <__d2b+0x1e>
 800b544:	6179      	str	r1, [r7, #20]
 800b546:	e7e7      	b.n	800b518 <__d2b+0x46>
 800b548:	a801      	add	r0, sp, #4
 800b54a:	f7ff fddb 	bl	800b104 <__lo0bits>
 800b54e:	9b01      	ldr	r3, [sp, #4]
 800b550:	617b      	str	r3, [r7, #20]
 800b552:	2101      	movs	r1, #1
 800b554:	6139      	str	r1, [r7, #16]
 800b556:	3020      	adds	r0, #32
 800b558:	e7e5      	b.n	800b526 <__d2b+0x54>
 800b55a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b55e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b562:	6030      	str	r0, [r6, #0]
 800b564:	6918      	ldr	r0, [r3, #16]
 800b566:	f7ff fdae 	bl	800b0c6 <__hi0bits>
 800b56a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b56e:	e7e1      	b.n	800b534 <__d2b+0x62>

0800b570 <_calloc_r>:
 800b570:	b538      	push	{r3, r4, r5, lr}
 800b572:	fb02 f401 	mul.w	r4, r2, r1
 800b576:	4621      	mov	r1, r4
 800b578:	f7fd fe82 	bl	8009280 <_malloc_r>
 800b57c:	4605      	mov	r5, r0
 800b57e:	b118      	cbz	r0, 800b588 <_calloc_r+0x18>
 800b580:	4622      	mov	r2, r4
 800b582:	2100      	movs	r1, #0
 800b584:	f7fd fe26 	bl	80091d4 <memset>
 800b588:	4628      	mov	r0, r5
 800b58a:	bd38      	pop	{r3, r4, r5, pc}

0800b58c <__ssputs_r>:
 800b58c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b590:	688e      	ldr	r6, [r1, #8]
 800b592:	429e      	cmp	r6, r3
 800b594:	4682      	mov	sl, r0
 800b596:	460c      	mov	r4, r1
 800b598:	4690      	mov	r8, r2
 800b59a:	4699      	mov	r9, r3
 800b59c:	d837      	bhi.n	800b60e <__ssputs_r+0x82>
 800b59e:	898a      	ldrh	r2, [r1, #12]
 800b5a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b5a4:	d031      	beq.n	800b60a <__ssputs_r+0x7e>
 800b5a6:	6825      	ldr	r5, [r4, #0]
 800b5a8:	6909      	ldr	r1, [r1, #16]
 800b5aa:	1a6f      	subs	r7, r5, r1
 800b5ac:	6965      	ldr	r5, [r4, #20]
 800b5ae:	2302      	movs	r3, #2
 800b5b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b5b4:	fb95 f5f3 	sdiv	r5, r5, r3
 800b5b8:	f109 0301 	add.w	r3, r9, #1
 800b5bc:	443b      	add	r3, r7
 800b5be:	429d      	cmp	r5, r3
 800b5c0:	bf38      	it	cc
 800b5c2:	461d      	movcc	r5, r3
 800b5c4:	0553      	lsls	r3, r2, #21
 800b5c6:	d530      	bpl.n	800b62a <__ssputs_r+0x9e>
 800b5c8:	4629      	mov	r1, r5
 800b5ca:	f7fd fe59 	bl	8009280 <_malloc_r>
 800b5ce:	4606      	mov	r6, r0
 800b5d0:	b950      	cbnz	r0, 800b5e8 <__ssputs_r+0x5c>
 800b5d2:	230c      	movs	r3, #12
 800b5d4:	f8ca 3000 	str.w	r3, [sl]
 800b5d8:	89a3      	ldrh	r3, [r4, #12]
 800b5da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b5de:	81a3      	strh	r3, [r4, #12]
 800b5e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5e8:	463a      	mov	r2, r7
 800b5ea:	6921      	ldr	r1, [r4, #16]
 800b5ec:	f7ff fcd8 	bl	800afa0 <memcpy>
 800b5f0:	89a3      	ldrh	r3, [r4, #12]
 800b5f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b5f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5fa:	81a3      	strh	r3, [r4, #12]
 800b5fc:	6126      	str	r6, [r4, #16]
 800b5fe:	6165      	str	r5, [r4, #20]
 800b600:	443e      	add	r6, r7
 800b602:	1bed      	subs	r5, r5, r7
 800b604:	6026      	str	r6, [r4, #0]
 800b606:	60a5      	str	r5, [r4, #8]
 800b608:	464e      	mov	r6, r9
 800b60a:	454e      	cmp	r6, r9
 800b60c:	d900      	bls.n	800b610 <__ssputs_r+0x84>
 800b60e:	464e      	mov	r6, r9
 800b610:	4632      	mov	r2, r6
 800b612:	4641      	mov	r1, r8
 800b614:	6820      	ldr	r0, [r4, #0]
 800b616:	f000 faf7 	bl	800bc08 <memmove>
 800b61a:	68a3      	ldr	r3, [r4, #8]
 800b61c:	1b9b      	subs	r3, r3, r6
 800b61e:	60a3      	str	r3, [r4, #8]
 800b620:	6823      	ldr	r3, [r4, #0]
 800b622:	441e      	add	r6, r3
 800b624:	6026      	str	r6, [r4, #0]
 800b626:	2000      	movs	r0, #0
 800b628:	e7dc      	b.n	800b5e4 <__ssputs_r+0x58>
 800b62a:	462a      	mov	r2, r5
 800b62c:	f000 fb05 	bl	800bc3a <_realloc_r>
 800b630:	4606      	mov	r6, r0
 800b632:	2800      	cmp	r0, #0
 800b634:	d1e2      	bne.n	800b5fc <__ssputs_r+0x70>
 800b636:	6921      	ldr	r1, [r4, #16]
 800b638:	4650      	mov	r0, sl
 800b63a:	f7fd fdd3 	bl	80091e4 <_free_r>
 800b63e:	e7c8      	b.n	800b5d2 <__ssputs_r+0x46>

0800b640 <_svfiprintf_r>:
 800b640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b644:	461d      	mov	r5, r3
 800b646:	898b      	ldrh	r3, [r1, #12]
 800b648:	061f      	lsls	r7, r3, #24
 800b64a:	b09d      	sub	sp, #116	; 0x74
 800b64c:	4680      	mov	r8, r0
 800b64e:	460c      	mov	r4, r1
 800b650:	4616      	mov	r6, r2
 800b652:	d50f      	bpl.n	800b674 <_svfiprintf_r+0x34>
 800b654:	690b      	ldr	r3, [r1, #16]
 800b656:	b96b      	cbnz	r3, 800b674 <_svfiprintf_r+0x34>
 800b658:	2140      	movs	r1, #64	; 0x40
 800b65a:	f7fd fe11 	bl	8009280 <_malloc_r>
 800b65e:	6020      	str	r0, [r4, #0]
 800b660:	6120      	str	r0, [r4, #16]
 800b662:	b928      	cbnz	r0, 800b670 <_svfiprintf_r+0x30>
 800b664:	230c      	movs	r3, #12
 800b666:	f8c8 3000 	str.w	r3, [r8]
 800b66a:	f04f 30ff 	mov.w	r0, #4294967295
 800b66e:	e0c8      	b.n	800b802 <_svfiprintf_r+0x1c2>
 800b670:	2340      	movs	r3, #64	; 0x40
 800b672:	6163      	str	r3, [r4, #20]
 800b674:	2300      	movs	r3, #0
 800b676:	9309      	str	r3, [sp, #36]	; 0x24
 800b678:	2320      	movs	r3, #32
 800b67a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b67e:	2330      	movs	r3, #48	; 0x30
 800b680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b684:	9503      	str	r5, [sp, #12]
 800b686:	f04f 0b01 	mov.w	fp, #1
 800b68a:	4637      	mov	r7, r6
 800b68c:	463d      	mov	r5, r7
 800b68e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b692:	b10b      	cbz	r3, 800b698 <_svfiprintf_r+0x58>
 800b694:	2b25      	cmp	r3, #37	; 0x25
 800b696:	d13e      	bne.n	800b716 <_svfiprintf_r+0xd6>
 800b698:	ebb7 0a06 	subs.w	sl, r7, r6
 800b69c:	d00b      	beq.n	800b6b6 <_svfiprintf_r+0x76>
 800b69e:	4653      	mov	r3, sl
 800b6a0:	4632      	mov	r2, r6
 800b6a2:	4621      	mov	r1, r4
 800b6a4:	4640      	mov	r0, r8
 800b6a6:	f7ff ff71 	bl	800b58c <__ssputs_r>
 800b6aa:	3001      	adds	r0, #1
 800b6ac:	f000 80a4 	beq.w	800b7f8 <_svfiprintf_r+0x1b8>
 800b6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6b2:	4453      	add	r3, sl
 800b6b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b6b6:	783b      	ldrb	r3, [r7, #0]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	f000 809d 	beq.w	800b7f8 <_svfiprintf_r+0x1b8>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b6c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b6c8:	9304      	str	r3, [sp, #16]
 800b6ca:	9307      	str	r3, [sp, #28]
 800b6cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b6d0:	931a      	str	r3, [sp, #104]	; 0x68
 800b6d2:	462f      	mov	r7, r5
 800b6d4:	2205      	movs	r2, #5
 800b6d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b6da:	4850      	ldr	r0, [pc, #320]	; (800b81c <_svfiprintf_r+0x1dc>)
 800b6dc:	f7f4 fdb0 	bl	8000240 <memchr>
 800b6e0:	9b04      	ldr	r3, [sp, #16]
 800b6e2:	b9d0      	cbnz	r0, 800b71a <_svfiprintf_r+0xda>
 800b6e4:	06d9      	lsls	r1, r3, #27
 800b6e6:	bf44      	itt	mi
 800b6e8:	2220      	movmi	r2, #32
 800b6ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b6ee:	071a      	lsls	r2, r3, #28
 800b6f0:	bf44      	itt	mi
 800b6f2:	222b      	movmi	r2, #43	; 0x2b
 800b6f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b6f8:	782a      	ldrb	r2, [r5, #0]
 800b6fa:	2a2a      	cmp	r2, #42	; 0x2a
 800b6fc:	d015      	beq.n	800b72a <_svfiprintf_r+0xea>
 800b6fe:	9a07      	ldr	r2, [sp, #28]
 800b700:	462f      	mov	r7, r5
 800b702:	2000      	movs	r0, #0
 800b704:	250a      	movs	r5, #10
 800b706:	4639      	mov	r1, r7
 800b708:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b70c:	3b30      	subs	r3, #48	; 0x30
 800b70e:	2b09      	cmp	r3, #9
 800b710:	d94d      	bls.n	800b7ae <_svfiprintf_r+0x16e>
 800b712:	b1b8      	cbz	r0, 800b744 <_svfiprintf_r+0x104>
 800b714:	e00f      	b.n	800b736 <_svfiprintf_r+0xf6>
 800b716:	462f      	mov	r7, r5
 800b718:	e7b8      	b.n	800b68c <_svfiprintf_r+0x4c>
 800b71a:	4a40      	ldr	r2, [pc, #256]	; (800b81c <_svfiprintf_r+0x1dc>)
 800b71c:	1a80      	subs	r0, r0, r2
 800b71e:	fa0b f000 	lsl.w	r0, fp, r0
 800b722:	4318      	orrs	r0, r3
 800b724:	9004      	str	r0, [sp, #16]
 800b726:	463d      	mov	r5, r7
 800b728:	e7d3      	b.n	800b6d2 <_svfiprintf_r+0x92>
 800b72a:	9a03      	ldr	r2, [sp, #12]
 800b72c:	1d11      	adds	r1, r2, #4
 800b72e:	6812      	ldr	r2, [r2, #0]
 800b730:	9103      	str	r1, [sp, #12]
 800b732:	2a00      	cmp	r2, #0
 800b734:	db01      	blt.n	800b73a <_svfiprintf_r+0xfa>
 800b736:	9207      	str	r2, [sp, #28]
 800b738:	e004      	b.n	800b744 <_svfiprintf_r+0x104>
 800b73a:	4252      	negs	r2, r2
 800b73c:	f043 0302 	orr.w	r3, r3, #2
 800b740:	9207      	str	r2, [sp, #28]
 800b742:	9304      	str	r3, [sp, #16]
 800b744:	783b      	ldrb	r3, [r7, #0]
 800b746:	2b2e      	cmp	r3, #46	; 0x2e
 800b748:	d10c      	bne.n	800b764 <_svfiprintf_r+0x124>
 800b74a:	787b      	ldrb	r3, [r7, #1]
 800b74c:	2b2a      	cmp	r3, #42	; 0x2a
 800b74e:	d133      	bne.n	800b7b8 <_svfiprintf_r+0x178>
 800b750:	9b03      	ldr	r3, [sp, #12]
 800b752:	1d1a      	adds	r2, r3, #4
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	9203      	str	r2, [sp, #12]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	bfb8      	it	lt
 800b75c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b760:	3702      	adds	r7, #2
 800b762:	9305      	str	r3, [sp, #20]
 800b764:	4d2e      	ldr	r5, [pc, #184]	; (800b820 <_svfiprintf_r+0x1e0>)
 800b766:	7839      	ldrb	r1, [r7, #0]
 800b768:	2203      	movs	r2, #3
 800b76a:	4628      	mov	r0, r5
 800b76c:	f7f4 fd68 	bl	8000240 <memchr>
 800b770:	b138      	cbz	r0, 800b782 <_svfiprintf_r+0x142>
 800b772:	2340      	movs	r3, #64	; 0x40
 800b774:	1b40      	subs	r0, r0, r5
 800b776:	fa03 f000 	lsl.w	r0, r3, r0
 800b77a:	9b04      	ldr	r3, [sp, #16]
 800b77c:	4303      	orrs	r3, r0
 800b77e:	3701      	adds	r7, #1
 800b780:	9304      	str	r3, [sp, #16]
 800b782:	7839      	ldrb	r1, [r7, #0]
 800b784:	4827      	ldr	r0, [pc, #156]	; (800b824 <_svfiprintf_r+0x1e4>)
 800b786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b78a:	2206      	movs	r2, #6
 800b78c:	1c7e      	adds	r6, r7, #1
 800b78e:	f7f4 fd57 	bl	8000240 <memchr>
 800b792:	2800      	cmp	r0, #0
 800b794:	d038      	beq.n	800b808 <_svfiprintf_r+0x1c8>
 800b796:	4b24      	ldr	r3, [pc, #144]	; (800b828 <_svfiprintf_r+0x1e8>)
 800b798:	bb13      	cbnz	r3, 800b7e0 <_svfiprintf_r+0x1a0>
 800b79a:	9b03      	ldr	r3, [sp, #12]
 800b79c:	3307      	adds	r3, #7
 800b79e:	f023 0307 	bic.w	r3, r3, #7
 800b7a2:	3308      	adds	r3, #8
 800b7a4:	9303      	str	r3, [sp, #12]
 800b7a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7a8:	444b      	add	r3, r9
 800b7aa:	9309      	str	r3, [sp, #36]	; 0x24
 800b7ac:	e76d      	b.n	800b68a <_svfiprintf_r+0x4a>
 800b7ae:	fb05 3202 	mla	r2, r5, r2, r3
 800b7b2:	2001      	movs	r0, #1
 800b7b4:	460f      	mov	r7, r1
 800b7b6:	e7a6      	b.n	800b706 <_svfiprintf_r+0xc6>
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	3701      	adds	r7, #1
 800b7bc:	9305      	str	r3, [sp, #20]
 800b7be:	4619      	mov	r1, r3
 800b7c0:	250a      	movs	r5, #10
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b7c8:	3a30      	subs	r2, #48	; 0x30
 800b7ca:	2a09      	cmp	r2, #9
 800b7cc:	d903      	bls.n	800b7d6 <_svfiprintf_r+0x196>
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d0c8      	beq.n	800b764 <_svfiprintf_r+0x124>
 800b7d2:	9105      	str	r1, [sp, #20]
 800b7d4:	e7c6      	b.n	800b764 <_svfiprintf_r+0x124>
 800b7d6:	fb05 2101 	mla	r1, r5, r1, r2
 800b7da:	2301      	movs	r3, #1
 800b7dc:	4607      	mov	r7, r0
 800b7de:	e7f0      	b.n	800b7c2 <_svfiprintf_r+0x182>
 800b7e0:	ab03      	add	r3, sp, #12
 800b7e2:	9300      	str	r3, [sp, #0]
 800b7e4:	4622      	mov	r2, r4
 800b7e6:	4b11      	ldr	r3, [pc, #68]	; (800b82c <_svfiprintf_r+0x1ec>)
 800b7e8:	a904      	add	r1, sp, #16
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	f7fd fe36 	bl	800945c <_printf_float>
 800b7f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b7f4:	4681      	mov	r9, r0
 800b7f6:	d1d6      	bne.n	800b7a6 <_svfiprintf_r+0x166>
 800b7f8:	89a3      	ldrh	r3, [r4, #12]
 800b7fa:	065b      	lsls	r3, r3, #25
 800b7fc:	f53f af35 	bmi.w	800b66a <_svfiprintf_r+0x2a>
 800b800:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b802:	b01d      	add	sp, #116	; 0x74
 800b804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b808:	ab03      	add	r3, sp, #12
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	4622      	mov	r2, r4
 800b80e:	4b07      	ldr	r3, [pc, #28]	; (800b82c <_svfiprintf_r+0x1ec>)
 800b810:	a904      	add	r1, sp, #16
 800b812:	4640      	mov	r0, r8
 800b814:	f7fe f8d8 	bl	80099c8 <_printf_i>
 800b818:	e7ea      	b.n	800b7f0 <_svfiprintf_r+0x1b0>
 800b81a:	bf00      	nop
 800b81c:	08013afc 	.word	0x08013afc
 800b820:	08013b02 	.word	0x08013b02
 800b824:	08013b06 	.word	0x08013b06
 800b828:	0800945d 	.word	0x0800945d
 800b82c:	0800b58d 	.word	0x0800b58d

0800b830 <__sfputc_r>:
 800b830:	6893      	ldr	r3, [r2, #8]
 800b832:	3b01      	subs	r3, #1
 800b834:	2b00      	cmp	r3, #0
 800b836:	b410      	push	{r4}
 800b838:	6093      	str	r3, [r2, #8]
 800b83a:	da08      	bge.n	800b84e <__sfputc_r+0x1e>
 800b83c:	6994      	ldr	r4, [r2, #24]
 800b83e:	42a3      	cmp	r3, r4
 800b840:	db01      	blt.n	800b846 <__sfputc_r+0x16>
 800b842:	290a      	cmp	r1, #10
 800b844:	d103      	bne.n	800b84e <__sfputc_r+0x1e>
 800b846:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b84a:	f7fe bab7 	b.w	8009dbc <__swbuf_r>
 800b84e:	6813      	ldr	r3, [r2, #0]
 800b850:	1c58      	adds	r0, r3, #1
 800b852:	6010      	str	r0, [r2, #0]
 800b854:	7019      	strb	r1, [r3, #0]
 800b856:	4608      	mov	r0, r1
 800b858:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b85c:	4770      	bx	lr

0800b85e <__sfputs_r>:
 800b85e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b860:	4606      	mov	r6, r0
 800b862:	460f      	mov	r7, r1
 800b864:	4614      	mov	r4, r2
 800b866:	18d5      	adds	r5, r2, r3
 800b868:	42ac      	cmp	r4, r5
 800b86a:	d101      	bne.n	800b870 <__sfputs_r+0x12>
 800b86c:	2000      	movs	r0, #0
 800b86e:	e007      	b.n	800b880 <__sfputs_r+0x22>
 800b870:	463a      	mov	r2, r7
 800b872:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b876:	4630      	mov	r0, r6
 800b878:	f7ff ffda 	bl	800b830 <__sfputc_r>
 800b87c:	1c43      	adds	r3, r0, #1
 800b87e:	d1f3      	bne.n	800b868 <__sfputs_r+0xa>
 800b880:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b884 <_vfiprintf_r>:
 800b884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b888:	460c      	mov	r4, r1
 800b88a:	b09d      	sub	sp, #116	; 0x74
 800b88c:	4617      	mov	r7, r2
 800b88e:	461d      	mov	r5, r3
 800b890:	4606      	mov	r6, r0
 800b892:	b118      	cbz	r0, 800b89c <_vfiprintf_r+0x18>
 800b894:	6983      	ldr	r3, [r0, #24]
 800b896:	b90b      	cbnz	r3, 800b89c <_vfiprintf_r+0x18>
 800b898:	f7ff fa86 	bl	800ada8 <__sinit>
 800b89c:	4b7c      	ldr	r3, [pc, #496]	; (800ba90 <_vfiprintf_r+0x20c>)
 800b89e:	429c      	cmp	r4, r3
 800b8a0:	d158      	bne.n	800b954 <_vfiprintf_r+0xd0>
 800b8a2:	6874      	ldr	r4, [r6, #4]
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	0718      	lsls	r0, r3, #28
 800b8a8:	d55e      	bpl.n	800b968 <_vfiprintf_r+0xe4>
 800b8aa:	6923      	ldr	r3, [r4, #16]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d05b      	beq.n	800b968 <_vfiprintf_r+0xe4>
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	9309      	str	r3, [sp, #36]	; 0x24
 800b8b4:	2320      	movs	r3, #32
 800b8b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8ba:	2330      	movs	r3, #48	; 0x30
 800b8bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8c0:	9503      	str	r5, [sp, #12]
 800b8c2:	f04f 0b01 	mov.w	fp, #1
 800b8c6:	46b8      	mov	r8, r7
 800b8c8:	4645      	mov	r5, r8
 800b8ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b8ce:	b10b      	cbz	r3, 800b8d4 <_vfiprintf_r+0x50>
 800b8d0:	2b25      	cmp	r3, #37	; 0x25
 800b8d2:	d154      	bne.n	800b97e <_vfiprintf_r+0xfa>
 800b8d4:	ebb8 0a07 	subs.w	sl, r8, r7
 800b8d8:	d00b      	beq.n	800b8f2 <_vfiprintf_r+0x6e>
 800b8da:	4653      	mov	r3, sl
 800b8dc:	463a      	mov	r2, r7
 800b8de:	4621      	mov	r1, r4
 800b8e0:	4630      	mov	r0, r6
 800b8e2:	f7ff ffbc 	bl	800b85e <__sfputs_r>
 800b8e6:	3001      	adds	r0, #1
 800b8e8:	f000 80c2 	beq.w	800ba70 <_vfiprintf_r+0x1ec>
 800b8ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8ee:	4453      	add	r3, sl
 800b8f0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8f2:	f898 3000 	ldrb.w	r3, [r8]
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	f000 80ba 	beq.w	800ba70 <_vfiprintf_r+0x1ec>
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b902:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b906:	9304      	str	r3, [sp, #16]
 800b908:	9307      	str	r3, [sp, #28]
 800b90a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b90e:	931a      	str	r3, [sp, #104]	; 0x68
 800b910:	46a8      	mov	r8, r5
 800b912:	2205      	movs	r2, #5
 800b914:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b918:	485e      	ldr	r0, [pc, #376]	; (800ba94 <_vfiprintf_r+0x210>)
 800b91a:	f7f4 fc91 	bl	8000240 <memchr>
 800b91e:	9b04      	ldr	r3, [sp, #16]
 800b920:	bb78      	cbnz	r0, 800b982 <_vfiprintf_r+0xfe>
 800b922:	06d9      	lsls	r1, r3, #27
 800b924:	bf44      	itt	mi
 800b926:	2220      	movmi	r2, #32
 800b928:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b92c:	071a      	lsls	r2, r3, #28
 800b92e:	bf44      	itt	mi
 800b930:	222b      	movmi	r2, #43	; 0x2b
 800b932:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b936:	782a      	ldrb	r2, [r5, #0]
 800b938:	2a2a      	cmp	r2, #42	; 0x2a
 800b93a:	d02a      	beq.n	800b992 <_vfiprintf_r+0x10e>
 800b93c:	9a07      	ldr	r2, [sp, #28]
 800b93e:	46a8      	mov	r8, r5
 800b940:	2000      	movs	r0, #0
 800b942:	250a      	movs	r5, #10
 800b944:	4641      	mov	r1, r8
 800b946:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b94a:	3b30      	subs	r3, #48	; 0x30
 800b94c:	2b09      	cmp	r3, #9
 800b94e:	d969      	bls.n	800ba24 <_vfiprintf_r+0x1a0>
 800b950:	b360      	cbz	r0, 800b9ac <_vfiprintf_r+0x128>
 800b952:	e024      	b.n	800b99e <_vfiprintf_r+0x11a>
 800b954:	4b50      	ldr	r3, [pc, #320]	; (800ba98 <_vfiprintf_r+0x214>)
 800b956:	429c      	cmp	r4, r3
 800b958:	d101      	bne.n	800b95e <_vfiprintf_r+0xda>
 800b95a:	68b4      	ldr	r4, [r6, #8]
 800b95c:	e7a2      	b.n	800b8a4 <_vfiprintf_r+0x20>
 800b95e:	4b4f      	ldr	r3, [pc, #316]	; (800ba9c <_vfiprintf_r+0x218>)
 800b960:	429c      	cmp	r4, r3
 800b962:	bf08      	it	eq
 800b964:	68f4      	ldreq	r4, [r6, #12]
 800b966:	e79d      	b.n	800b8a4 <_vfiprintf_r+0x20>
 800b968:	4621      	mov	r1, r4
 800b96a:	4630      	mov	r0, r6
 800b96c:	f7fe fa78 	bl	8009e60 <__swsetup_r>
 800b970:	2800      	cmp	r0, #0
 800b972:	d09d      	beq.n	800b8b0 <_vfiprintf_r+0x2c>
 800b974:	f04f 30ff 	mov.w	r0, #4294967295
 800b978:	b01d      	add	sp, #116	; 0x74
 800b97a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b97e:	46a8      	mov	r8, r5
 800b980:	e7a2      	b.n	800b8c8 <_vfiprintf_r+0x44>
 800b982:	4a44      	ldr	r2, [pc, #272]	; (800ba94 <_vfiprintf_r+0x210>)
 800b984:	1a80      	subs	r0, r0, r2
 800b986:	fa0b f000 	lsl.w	r0, fp, r0
 800b98a:	4318      	orrs	r0, r3
 800b98c:	9004      	str	r0, [sp, #16]
 800b98e:	4645      	mov	r5, r8
 800b990:	e7be      	b.n	800b910 <_vfiprintf_r+0x8c>
 800b992:	9a03      	ldr	r2, [sp, #12]
 800b994:	1d11      	adds	r1, r2, #4
 800b996:	6812      	ldr	r2, [r2, #0]
 800b998:	9103      	str	r1, [sp, #12]
 800b99a:	2a00      	cmp	r2, #0
 800b99c:	db01      	blt.n	800b9a2 <_vfiprintf_r+0x11e>
 800b99e:	9207      	str	r2, [sp, #28]
 800b9a0:	e004      	b.n	800b9ac <_vfiprintf_r+0x128>
 800b9a2:	4252      	negs	r2, r2
 800b9a4:	f043 0302 	orr.w	r3, r3, #2
 800b9a8:	9207      	str	r2, [sp, #28]
 800b9aa:	9304      	str	r3, [sp, #16]
 800b9ac:	f898 3000 	ldrb.w	r3, [r8]
 800b9b0:	2b2e      	cmp	r3, #46	; 0x2e
 800b9b2:	d10e      	bne.n	800b9d2 <_vfiprintf_r+0x14e>
 800b9b4:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b9b8:	2b2a      	cmp	r3, #42	; 0x2a
 800b9ba:	d138      	bne.n	800ba2e <_vfiprintf_r+0x1aa>
 800b9bc:	9b03      	ldr	r3, [sp, #12]
 800b9be:	1d1a      	adds	r2, r3, #4
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	9203      	str	r2, [sp, #12]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	bfb8      	it	lt
 800b9c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b9cc:	f108 0802 	add.w	r8, r8, #2
 800b9d0:	9305      	str	r3, [sp, #20]
 800b9d2:	4d33      	ldr	r5, [pc, #204]	; (800baa0 <_vfiprintf_r+0x21c>)
 800b9d4:	f898 1000 	ldrb.w	r1, [r8]
 800b9d8:	2203      	movs	r2, #3
 800b9da:	4628      	mov	r0, r5
 800b9dc:	f7f4 fc30 	bl	8000240 <memchr>
 800b9e0:	b140      	cbz	r0, 800b9f4 <_vfiprintf_r+0x170>
 800b9e2:	2340      	movs	r3, #64	; 0x40
 800b9e4:	1b40      	subs	r0, r0, r5
 800b9e6:	fa03 f000 	lsl.w	r0, r3, r0
 800b9ea:	9b04      	ldr	r3, [sp, #16]
 800b9ec:	4303      	orrs	r3, r0
 800b9ee:	f108 0801 	add.w	r8, r8, #1
 800b9f2:	9304      	str	r3, [sp, #16]
 800b9f4:	f898 1000 	ldrb.w	r1, [r8]
 800b9f8:	482a      	ldr	r0, [pc, #168]	; (800baa4 <_vfiprintf_r+0x220>)
 800b9fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9fe:	2206      	movs	r2, #6
 800ba00:	f108 0701 	add.w	r7, r8, #1
 800ba04:	f7f4 fc1c 	bl	8000240 <memchr>
 800ba08:	2800      	cmp	r0, #0
 800ba0a:	d037      	beq.n	800ba7c <_vfiprintf_r+0x1f8>
 800ba0c:	4b26      	ldr	r3, [pc, #152]	; (800baa8 <_vfiprintf_r+0x224>)
 800ba0e:	bb1b      	cbnz	r3, 800ba58 <_vfiprintf_r+0x1d4>
 800ba10:	9b03      	ldr	r3, [sp, #12]
 800ba12:	3307      	adds	r3, #7
 800ba14:	f023 0307 	bic.w	r3, r3, #7
 800ba18:	3308      	adds	r3, #8
 800ba1a:	9303      	str	r3, [sp, #12]
 800ba1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba1e:	444b      	add	r3, r9
 800ba20:	9309      	str	r3, [sp, #36]	; 0x24
 800ba22:	e750      	b.n	800b8c6 <_vfiprintf_r+0x42>
 800ba24:	fb05 3202 	mla	r2, r5, r2, r3
 800ba28:	2001      	movs	r0, #1
 800ba2a:	4688      	mov	r8, r1
 800ba2c:	e78a      	b.n	800b944 <_vfiprintf_r+0xc0>
 800ba2e:	2300      	movs	r3, #0
 800ba30:	f108 0801 	add.w	r8, r8, #1
 800ba34:	9305      	str	r3, [sp, #20]
 800ba36:	4619      	mov	r1, r3
 800ba38:	250a      	movs	r5, #10
 800ba3a:	4640      	mov	r0, r8
 800ba3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba40:	3a30      	subs	r2, #48	; 0x30
 800ba42:	2a09      	cmp	r2, #9
 800ba44:	d903      	bls.n	800ba4e <_vfiprintf_r+0x1ca>
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d0c3      	beq.n	800b9d2 <_vfiprintf_r+0x14e>
 800ba4a:	9105      	str	r1, [sp, #20]
 800ba4c:	e7c1      	b.n	800b9d2 <_vfiprintf_r+0x14e>
 800ba4e:	fb05 2101 	mla	r1, r5, r1, r2
 800ba52:	2301      	movs	r3, #1
 800ba54:	4680      	mov	r8, r0
 800ba56:	e7f0      	b.n	800ba3a <_vfiprintf_r+0x1b6>
 800ba58:	ab03      	add	r3, sp, #12
 800ba5a:	9300      	str	r3, [sp, #0]
 800ba5c:	4622      	mov	r2, r4
 800ba5e:	4b13      	ldr	r3, [pc, #76]	; (800baac <_vfiprintf_r+0x228>)
 800ba60:	a904      	add	r1, sp, #16
 800ba62:	4630      	mov	r0, r6
 800ba64:	f7fd fcfa 	bl	800945c <_printf_float>
 800ba68:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ba6c:	4681      	mov	r9, r0
 800ba6e:	d1d5      	bne.n	800ba1c <_vfiprintf_r+0x198>
 800ba70:	89a3      	ldrh	r3, [r4, #12]
 800ba72:	065b      	lsls	r3, r3, #25
 800ba74:	f53f af7e 	bmi.w	800b974 <_vfiprintf_r+0xf0>
 800ba78:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba7a:	e77d      	b.n	800b978 <_vfiprintf_r+0xf4>
 800ba7c:	ab03      	add	r3, sp, #12
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	4622      	mov	r2, r4
 800ba82:	4b0a      	ldr	r3, [pc, #40]	; (800baac <_vfiprintf_r+0x228>)
 800ba84:	a904      	add	r1, sp, #16
 800ba86:	4630      	mov	r0, r6
 800ba88:	f7fd ff9e 	bl	80099c8 <_printf_i>
 800ba8c:	e7ec      	b.n	800ba68 <_vfiprintf_r+0x1e4>
 800ba8e:	bf00      	nop
 800ba90:	080139c0 	.word	0x080139c0
 800ba94:	08013afc 	.word	0x08013afc
 800ba98:	080139e0 	.word	0x080139e0
 800ba9c:	080139a0 	.word	0x080139a0
 800baa0:	08013b02 	.word	0x08013b02
 800baa4:	08013b06 	.word	0x08013b06
 800baa8:	0800945d 	.word	0x0800945d
 800baac:	0800b85f 	.word	0x0800b85f

0800bab0 <__sread>:
 800bab0:	b510      	push	{r4, lr}
 800bab2:	460c      	mov	r4, r1
 800bab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bab8:	f000 f8e6 	bl	800bc88 <_read_r>
 800babc:	2800      	cmp	r0, #0
 800babe:	bfab      	itete	ge
 800bac0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bac2:	89a3      	ldrhlt	r3, [r4, #12]
 800bac4:	181b      	addge	r3, r3, r0
 800bac6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800baca:	bfac      	ite	ge
 800bacc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bace:	81a3      	strhlt	r3, [r4, #12]
 800bad0:	bd10      	pop	{r4, pc}

0800bad2 <__swrite>:
 800bad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad6:	461f      	mov	r7, r3
 800bad8:	898b      	ldrh	r3, [r1, #12]
 800bada:	05db      	lsls	r3, r3, #23
 800badc:	4605      	mov	r5, r0
 800bade:	460c      	mov	r4, r1
 800bae0:	4616      	mov	r6, r2
 800bae2:	d505      	bpl.n	800baf0 <__swrite+0x1e>
 800bae4:	2302      	movs	r3, #2
 800bae6:	2200      	movs	r2, #0
 800bae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800baec:	f000 f868 	bl	800bbc0 <_lseek_r>
 800baf0:	89a3      	ldrh	r3, [r4, #12]
 800baf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800baf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bafa:	81a3      	strh	r3, [r4, #12]
 800bafc:	4632      	mov	r2, r6
 800bafe:	463b      	mov	r3, r7
 800bb00:	4628      	mov	r0, r5
 800bb02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb06:	f000 b817 	b.w	800bb38 <_write_r>

0800bb0a <__sseek>:
 800bb0a:	b510      	push	{r4, lr}
 800bb0c:	460c      	mov	r4, r1
 800bb0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb12:	f000 f855 	bl	800bbc0 <_lseek_r>
 800bb16:	1c43      	adds	r3, r0, #1
 800bb18:	89a3      	ldrh	r3, [r4, #12]
 800bb1a:	bf15      	itete	ne
 800bb1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bb1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bb22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bb26:	81a3      	strheq	r3, [r4, #12]
 800bb28:	bf18      	it	ne
 800bb2a:	81a3      	strhne	r3, [r4, #12]
 800bb2c:	bd10      	pop	{r4, pc}

0800bb2e <__sclose>:
 800bb2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb32:	f000 b813 	b.w	800bb5c <_close_r>
	...

0800bb38 <_write_r>:
 800bb38:	b538      	push	{r3, r4, r5, lr}
 800bb3a:	4c07      	ldr	r4, [pc, #28]	; (800bb58 <_write_r+0x20>)
 800bb3c:	4605      	mov	r5, r0
 800bb3e:	4608      	mov	r0, r1
 800bb40:	4611      	mov	r1, r2
 800bb42:	2200      	movs	r2, #0
 800bb44:	6022      	str	r2, [r4, #0]
 800bb46:	461a      	mov	r2, r3
 800bb48:	f7f5 fcc3 	bl	80014d2 <_write>
 800bb4c:	1c43      	adds	r3, r0, #1
 800bb4e:	d102      	bne.n	800bb56 <_write_r+0x1e>
 800bb50:	6823      	ldr	r3, [r4, #0]
 800bb52:	b103      	cbz	r3, 800bb56 <_write_r+0x1e>
 800bb54:	602b      	str	r3, [r5, #0]
 800bb56:	bd38      	pop	{r3, r4, r5, pc}
 800bb58:	20000ed0 	.word	0x20000ed0

0800bb5c <_close_r>:
 800bb5c:	b538      	push	{r3, r4, r5, lr}
 800bb5e:	4c06      	ldr	r4, [pc, #24]	; (800bb78 <_close_r+0x1c>)
 800bb60:	2300      	movs	r3, #0
 800bb62:	4605      	mov	r5, r0
 800bb64:	4608      	mov	r0, r1
 800bb66:	6023      	str	r3, [r4, #0]
 800bb68:	f7f6 fc45 	bl	80023f6 <_close>
 800bb6c:	1c43      	adds	r3, r0, #1
 800bb6e:	d102      	bne.n	800bb76 <_close_r+0x1a>
 800bb70:	6823      	ldr	r3, [r4, #0]
 800bb72:	b103      	cbz	r3, 800bb76 <_close_r+0x1a>
 800bb74:	602b      	str	r3, [r5, #0]
 800bb76:	bd38      	pop	{r3, r4, r5, pc}
 800bb78:	20000ed0 	.word	0x20000ed0

0800bb7c <_fstat_r>:
 800bb7c:	b538      	push	{r3, r4, r5, lr}
 800bb7e:	4c07      	ldr	r4, [pc, #28]	; (800bb9c <_fstat_r+0x20>)
 800bb80:	2300      	movs	r3, #0
 800bb82:	4605      	mov	r5, r0
 800bb84:	4608      	mov	r0, r1
 800bb86:	4611      	mov	r1, r2
 800bb88:	6023      	str	r3, [r4, #0]
 800bb8a:	f7f6 fc40 	bl	800240e <_fstat>
 800bb8e:	1c43      	adds	r3, r0, #1
 800bb90:	d102      	bne.n	800bb98 <_fstat_r+0x1c>
 800bb92:	6823      	ldr	r3, [r4, #0]
 800bb94:	b103      	cbz	r3, 800bb98 <_fstat_r+0x1c>
 800bb96:	602b      	str	r3, [r5, #0]
 800bb98:	bd38      	pop	{r3, r4, r5, pc}
 800bb9a:	bf00      	nop
 800bb9c:	20000ed0 	.word	0x20000ed0

0800bba0 <_isatty_r>:
 800bba0:	b538      	push	{r3, r4, r5, lr}
 800bba2:	4c06      	ldr	r4, [pc, #24]	; (800bbbc <_isatty_r+0x1c>)
 800bba4:	2300      	movs	r3, #0
 800bba6:	4605      	mov	r5, r0
 800bba8:	4608      	mov	r0, r1
 800bbaa:	6023      	str	r3, [r4, #0]
 800bbac:	f7f6 fc3f 	bl	800242e <_isatty>
 800bbb0:	1c43      	adds	r3, r0, #1
 800bbb2:	d102      	bne.n	800bbba <_isatty_r+0x1a>
 800bbb4:	6823      	ldr	r3, [r4, #0]
 800bbb6:	b103      	cbz	r3, 800bbba <_isatty_r+0x1a>
 800bbb8:	602b      	str	r3, [r5, #0]
 800bbba:	bd38      	pop	{r3, r4, r5, pc}
 800bbbc:	20000ed0 	.word	0x20000ed0

0800bbc0 <_lseek_r>:
 800bbc0:	b538      	push	{r3, r4, r5, lr}
 800bbc2:	4c07      	ldr	r4, [pc, #28]	; (800bbe0 <_lseek_r+0x20>)
 800bbc4:	4605      	mov	r5, r0
 800bbc6:	4608      	mov	r0, r1
 800bbc8:	4611      	mov	r1, r2
 800bbca:	2200      	movs	r2, #0
 800bbcc:	6022      	str	r2, [r4, #0]
 800bbce:	461a      	mov	r2, r3
 800bbd0:	f7f6 fc38 	bl	8002444 <_lseek>
 800bbd4:	1c43      	adds	r3, r0, #1
 800bbd6:	d102      	bne.n	800bbde <_lseek_r+0x1e>
 800bbd8:	6823      	ldr	r3, [r4, #0]
 800bbda:	b103      	cbz	r3, 800bbde <_lseek_r+0x1e>
 800bbdc:	602b      	str	r3, [r5, #0]
 800bbde:	bd38      	pop	{r3, r4, r5, pc}
 800bbe0:	20000ed0 	.word	0x20000ed0

0800bbe4 <__ascii_mbtowc>:
 800bbe4:	b082      	sub	sp, #8
 800bbe6:	b901      	cbnz	r1, 800bbea <__ascii_mbtowc+0x6>
 800bbe8:	a901      	add	r1, sp, #4
 800bbea:	b142      	cbz	r2, 800bbfe <__ascii_mbtowc+0x1a>
 800bbec:	b14b      	cbz	r3, 800bc02 <__ascii_mbtowc+0x1e>
 800bbee:	7813      	ldrb	r3, [r2, #0]
 800bbf0:	600b      	str	r3, [r1, #0]
 800bbf2:	7812      	ldrb	r2, [r2, #0]
 800bbf4:	1c10      	adds	r0, r2, #0
 800bbf6:	bf18      	it	ne
 800bbf8:	2001      	movne	r0, #1
 800bbfa:	b002      	add	sp, #8
 800bbfc:	4770      	bx	lr
 800bbfe:	4610      	mov	r0, r2
 800bc00:	e7fb      	b.n	800bbfa <__ascii_mbtowc+0x16>
 800bc02:	f06f 0001 	mvn.w	r0, #1
 800bc06:	e7f8      	b.n	800bbfa <__ascii_mbtowc+0x16>

0800bc08 <memmove>:
 800bc08:	4288      	cmp	r0, r1
 800bc0a:	b510      	push	{r4, lr}
 800bc0c:	eb01 0302 	add.w	r3, r1, r2
 800bc10:	d807      	bhi.n	800bc22 <memmove+0x1a>
 800bc12:	1e42      	subs	r2, r0, #1
 800bc14:	4299      	cmp	r1, r3
 800bc16:	d00a      	beq.n	800bc2e <memmove+0x26>
 800bc18:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bc1c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bc20:	e7f8      	b.n	800bc14 <memmove+0xc>
 800bc22:	4283      	cmp	r3, r0
 800bc24:	d9f5      	bls.n	800bc12 <memmove+0xa>
 800bc26:	1881      	adds	r1, r0, r2
 800bc28:	1ad2      	subs	r2, r2, r3
 800bc2a:	42d3      	cmn	r3, r2
 800bc2c:	d100      	bne.n	800bc30 <memmove+0x28>
 800bc2e:	bd10      	pop	{r4, pc}
 800bc30:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc34:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bc38:	e7f7      	b.n	800bc2a <memmove+0x22>

0800bc3a <_realloc_r>:
 800bc3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc3c:	4607      	mov	r7, r0
 800bc3e:	4614      	mov	r4, r2
 800bc40:	460e      	mov	r6, r1
 800bc42:	b921      	cbnz	r1, 800bc4e <_realloc_r+0x14>
 800bc44:	4611      	mov	r1, r2
 800bc46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc4a:	f7fd bb19 	b.w	8009280 <_malloc_r>
 800bc4e:	b922      	cbnz	r2, 800bc5a <_realloc_r+0x20>
 800bc50:	f7fd fac8 	bl	80091e4 <_free_r>
 800bc54:	4625      	mov	r5, r4
 800bc56:	4628      	mov	r0, r5
 800bc58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc5a:	f000 f834 	bl	800bcc6 <_malloc_usable_size_r>
 800bc5e:	42a0      	cmp	r0, r4
 800bc60:	d20f      	bcs.n	800bc82 <_realloc_r+0x48>
 800bc62:	4621      	mov	r1, r4
 800bc64:	4638      	mov	r0, r7
 800bc66:	f7fd fb0b 	bl	8009280 <_malloc_r>
 800bc6a:	4605      	mov	r5, r0
 800bc6c:	2800      	cmp	r0, #0
 800bc6e:	d0f2      	beq.n	800bc56 <_realloc_r+0x1c>
 800bc70:	4631      	mov	r1, r6
 800bc72:	4622      	mov	r2, r4
 800bc74:	f7ff f994 	bl	800afa0 <memcpy>
 800bc78:	4631      	mov	r1, r6
 800bc7a:	4638      	mov	r0, r7
 800bc7c:	f7fd fab2 	bl	80091e4 <_free_r>
 800bc80:	e7e9      	b.n	800bc56 <_realloc_r+0x1c>
 800bc82:	4635      	mov	r5, r6
 800bc84:	e7e7      	b.n	800bc56 <_realloc_r+0x1c>
	...

0800bc88 <_read_r>:
 800bc88:	b538      	push	{r3, r4, r5, lr}
 800bc8a:	4c07      	ldr	r4, [pc, #28]	; (800bca8 <_read_r+0x20>)
 800bc8c:	4605      	mov	r5, r0
 800bc8e:	4608      	mov	r0, r1
 800bc90:	4611      	mov	r1, r2
 800bc92:	2200      	movs	r2, #0
 800bc94:	6022      	str	r2, [r4, #0]
 800bc96:	461a      	mov	r2, r3
 800bc98:	f7f6 fb90 	bl	80023bc <_read>
 800bc9c:	1c43      	adds	r3, r0, #1
 800bc9e:	d102      	bne.n	800bca6 <_read_r+0x1e>
 800bca0:	6823      	ldr	r3, [r4, #0]
 800bca2:	b103      	cbz	r3, 800bca6 <_read_r+0x1e>
 800bca4:	602b      	str	r3, [r5, #0]
 800bca6:	bd38      	pop	{r3, r4, r5, pc}
 800bca8:	20000ed0 	.word	0x20000ed0

0800bcac <__ascii_wctomb>:
 800bcac:	b149      	cbz	r1, 800bcc2 <__ascii_wctomb+0x16>
 800bcae:	2aff      	cmp	r2, #255	; 0xff
 800bcb0:	bf85      	ittet	hi
 800bcb2:	238a      	movhi	r3, #138	; 0x8a
 800bcb4:	6003      	strhi	r3, [r0, #0]
 800bcb6:	700a      	strbls	r2, [r1, #0]
 800bcb8:	f04f 30ff 	movhi.w	r0, #4294967295
 800bcbc:	bf98      	it	ls
 800bcbe:	2001      	movls	r0, #1
 800bcc0:	4770      	bx	lr
 800bcc2:	4608      	mov	r0, r1
 800bcc4:	4770      	bx	lr

0800bcc6 <_malloc_usable_size_r>:
 800bcc6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bcca:	1f18      	subs	r0, r3, #4
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	bfbc      	itt	lt
 800bcd0:	580b      	ldrlt	r3, [r1, r0]
 800bcd2:	18c0      	addlt	r0, r0, r3
 800bcd4:	4770      	bx	lr
	...

0800bcd8 <_init>:
 800bcd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcda:	bf00      	nop
 800bcdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcde:	bc08      	pop	{r3}
 800bce0:	469e      	mov	lr, r3
 800bce2:	4770      	bx	lr

0800bce4 <_fini>:
 800bce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce6:	bf00      	nop
 800bce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcea:	bc08      	pop	{r3}
 800bcec:	469e      	mov	lr, r3
 800bcee:	4770      	bx	lr
