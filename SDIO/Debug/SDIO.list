
SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf0c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000080d4  0800c0e0  0800c0e0  0001c0e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141b4  080141b4  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  080141b4  080141b4  000241b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141bc  080141bc  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141bc  080141bc  000241bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080141c0  080141c0  000241c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080141c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d0c  200001e0  080143a4  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000eec  080143a4  00030eec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e93  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec3  00000000  00000000  000450a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00047f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00048c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002479c  00000000  00000000  000497b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f43  00000000  00000000  0006df4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce641  00000000  00000000  0007fe8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e4d0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ac  00000000  00000000  0014e524  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c0c4 	.word	0x0800c0c4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800c0c4 	.word	0x0800c0c4

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (src <= 0x80) {	/* ASCII */
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	2b80      	cmp	r3, #128	; 0x80
 8000f10:	d802      	bhi.n	8000f18 <ff_convert+0x18>
		c = src;
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	837b      	strh	r3, [r7, #26]
 8000f16:	e053      	b.n	8000fc0 <ff_convert+0xc0>
			else
				hi = i;
		}
		c = n ? p[i * 2 + 1] : 0;
#else
		if (dir) {		/* OEMCP to unicode (Incremental search)*/
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d015      	beq.n	8000f4a <ff_convert+0x4a>
			p = &uni2sjis[1];
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <ff_convert+0xd0>)
 8000f20:	61fb      	str	r3, [r7, #28]
			do {
				c = *p;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	837b      	strh	r3, [r7, #26]
				p += 2;
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	61fb      	str	r3, [r7, #28]
			} while (c && c != src);
 8000f2e:	8b7b      	ldrh	r3, [r7, #26]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <ff_convert+0x3c>
 8000f34:	8b7a      	ldrh	r2, [r7, #26]
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d1f2      	bne.n	8000f22 <ff_convert+0x22>
			p -= 3;
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	3b06      	subs	r3, #6
 8000f40:	61fb      	str	r3, [r7, #28]
			c = *p;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	837b      	strh	r3, [r7, #26]
 8000f48:	e03a      	b.n	8000fc0 <ff_convert+0xc0>
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 8000f52:	60bb      	str	r3, [r7, #8]
			for (n = 16; n; n--) {
 8000f54:	2310      	movs	r3, #16
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	e021      	b.n	8000f9e <ff_convert+0x9e>
				i = li + (hi - li) / 2;
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	0fda      	lsrs	r2, r3, #31
 8000f62:	4413      	add	r3, r2
 8000f64:	105b      	asrs	r3, r3, #1
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
				if (src == uni2sjis[i * 2]) break;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <ff_convert+0xd4>)
 8000f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d013      	beq.n	8000fa6 <ff_convert+0xa6>
				if (src > uni2sjis[i * 2])
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <ff_convert+0xd4>)
 8000f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f88:	88fa      	ldrh	r2, [r7, #6]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d902      	bls.n	8000f94 <ff_convert+0x94>
					li = i;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	e001      	b.n	8000f98 <ff_convert+0x98>
				else
					hi = i;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	60bb      	str	r3, [r7, #8]
			for (n = 16; n; n--) {
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1da      	bne.n	8000f5a <ff_convert+0x5a>
 8000fa4:	e000      	b.n	8000fa8 <ff_convert+0xa8>
				if (src == uni2sjis[i * 2]) break;
 8000fa6:	bf00      	nop
			}
			c = n ? uni2sjis[i * 2 + 1] : 0;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <ff_convert+0xbc>
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <ff_convert+0xd4>)
 8000fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fba:	e000      	b.n	8000fbe <ff_convert+0xbe>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	837b      	strh	r3, [r7, #26]
		}
#endif
	}

	return c;
 8000fc0:	8b7b      	ldrh	r3, [r7, #26]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	0800c9a6 	.word	0x0800c9a6
 8000fd4:	0800c9a4 	.word	0x0800c9a4

08000fd8 <ff_wtoupper>:

WCHAR ff_wtoupper(WCHAR chr)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
	if(chr >= 'a' && chr <= 'z')
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	2b60      	cmp	r3, #96	; 0x60
 8000fe6:	d906      	bls.n	8000ff6 <ff_wtoupper+0x1e>
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	2b7a      	cmp	r3, #122	; 0x7a
 8000fec:	d803      	bhi.n	8000ff6 <ff_wtoupper+0x1e>
		return (chr - 32);
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	3b20      	subs	r3, #32
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	e000      	b.n	8000ff8 <ff_wtoupper+0x20>
	else
		return chr;
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <Mount_SD>:
//Debugging
const short sdioPrints = 0;


FRESULT Mount_SD (const TCHAR* path)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	480e      	ldr	r0, [pc, #56]	; (800104c <Mount_SD+0x48>)
 8001012:	f007 f993 	bl	800833c <f_mount>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <Mount_SD+0x4c>)
 800101c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <Mount_SD+0x4c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d006      	beq.n	8001034 <Mount_SD+0x30>
		if(sdioPrints) printf("ERROR!!! in mounting SD CARD...\n");
 8001026:	2300      	movs	r3, #0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d009      	beq.n	8001040 <Mount_SD+0x3c>
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <Mount_SD+0x50>)
 800102e:	f008 fe8d 	bl	8009d4c <puts>
 8001032:	e005      	b.n	8001040 <Mount_SD+0x3c>
	}
	else if(sdioPrints) printf("SD CARD mounted successfully...\n");
 8001034:	2300      	movs	r3, #0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <Mount_SD+0x3c>
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <Mount_SD+0x54>)
 800103c:	f008 fe86 	bl	8009d4c <puts>

	return fresult;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <Mount_SD+0x4c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000430 	.word	0x20000430
 8001050:	20000674 	.word	0x20000674
 8001054:	0800c0e0 	.word	0x0800c0e0
 8001058:	0800c100 	.word	0x0800c100

0800105c <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001064:	2201      	movs	r2, #1
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	2000      	movs	r0, #0
 800106a:	f007 f967 	bl	800833c <f_mount>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <Unmount_SD+0x44>)
 8001074:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <Unmount_SD+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d106      	bne.n	800108c <Unmount_SD+0x30>
		if(sdioPrints) printf("SD CARD UNMOUNTED successfully...\n\n");
 800107e:	2300      	movs	r3, #0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d009      	beq.n	8001098 <Unmount_SD+0x3c>
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <Unmount_SD+0x48>)
 8001086:	f008 fe61 	bl	8009d4c <puts>
	}
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 800108a:	e005      	b.n	8001098 <Unmount_SD+0x3c>
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 800108c:	2300      	movs	r3, #0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <Unmount_SD+0x3c>
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <Unmount_SD+0x4c>)
 8001094:	f008 fe5a 	bl	8009d4c <puts>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000674 	.word	0x20000674
 80010a4:	0800c120 	.word	0x0800c120
 80010a8:	0800c144 	.word	0x0800c144

080010ac <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	; 0x38
 80010b0:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 80010b2:	2014      	movs	r0, #20
 80010b4:	f008 f898 	bl	80091e8 <malloc>
 80010b8:	4603      	mov	r3, r0
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 80010bc:	4a28      	ldr	r2, [pc, #160]	; (8001160 <Format_SD+0xb4>)
 80010be:	4929      	ldr	r1, [pc, #164]	; (8001164 <Format_SD+0xb8>)
 80010c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010c2:	f008 fe8f 	bl	8009de4 <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80010c6:	463b      	mov	r3, r7
 80010c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010ca:	4618      	mov	r0, r3
 80010cc:	f007 fde3 	bl	8008c96 <f_opendir>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <Format_SD+0xbc>)
 80010d6:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <Format_SD+0xbc>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d136      	bne.n	800114e <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80010e0:	463b      	mov	r3, r7
 80010e2:	4922      	ldr	r1, [pc, #136]	; (800116c <Format_SD+0xc0>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f007 fe9a 	bl	8008e1e <f_readdir>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <Format_SD+0xbc>)
 80010f0:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <Format_SD+0xbc>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d125      	bne.n	8001146 <Format_SD+0x9a>
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <Format_SD+0xc0>)
 80010fc:	7d9b      	ldrb	r3, [r3, #22]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d021      	beq.n	8001146 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <Format_SD+0xc0>)
 8001104:	7a1b      	ldrb	r3, [r3, #8]
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	d011      	beq.n	8001132 <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800110e:	4918      	ldr	r1, [pc, #96]	; (8001170 <Format_SD+0xc4>)
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <Format_SD+0xc8>)
 8001112:	f7ff f87d 	bl	8000210 <strcmp>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d012      	beq.n	8001142 <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 800111c:	4814      	ldr	r0, [pc, #80]	; (8001170 <Format_SD+0xc4>)
 800111e:	f007 ff1b 	bl	8008f58 <f_unlink>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <Format_SD+0xbc>)
 8001128:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <Format_SD+0xbc>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b07      	cmp	r3, #7
 8001130:	e7d6      	b.n	80010e0 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8001132:	480f      	ldr	r0, [pc, #60]	; (8001170 <Format_SD+0xc4>)
 8001134:	f007 ff10 	bl	8008f58 <f_unlink>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <Format_SD+0xbc>)
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e7ce      	b.n	80010e0 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001142:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001144:	e7cc      	b.n	80010e0 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8001146:	463b      	mov	r3, r7
 8001148:	4618      	mov	r0, r3
 800114a:	f007 fe42 	bl	8008dd2 <f_closedir>
    }
    free(path);
 800114e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001150:	f008 f852 	bl	80091f8 <free>
    return fresult;
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <Format_SD+0xbc>)
 8001156:	781b      	ldrb	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3738      	adds	r7, #56	; 0x38
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	0800c194 	.word	0x0800c194
 8001164:	0800c164 	.word	0x0800c164
 8001168:	20000674 	.word	0x20000674
 800116c:	20000318 	.word	0x20000318
 8001170:	2000032e 	.word	0x2000032e
 8001174:	0800c168 	.word	0x0800c168

08001178 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001180:	494a      	ldr	r1, [pc, #296]	; (80012ac <Create_File+0x134>)
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f007 fea3 	bl	8008ece <f_stat>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <Create_File+0x138>)
 800118e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001190:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <Create_File+0x138>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d115      	bne.n	80011c4 <Create_File+0x4c>
	{
		char *buf = malloc(100*sizeof(char));
 8001198:	2064      	movs	r0, #100	; 0x64
 800119a:	f008 f825 	bl	80091e8 <malloc>
 800119e:	4603      	mov	r3, r0
 80011a0:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",name);
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4943      	ldr	r1, [pc, #268]	; (80012b4 <Create_File+0x13c>)
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f008 fe1c 	bl	8009de4 <siprintf>
		if(sdioPrints) printf(buf);
 80011ac:	2300      	movs	r3, #0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <Create_File+0x40>
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f008 fd44 	bl	8009c40 <iprintf>
		free(buf);
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f008 f81d 	bl	80091f8 <free>
	    return fresult;
 80011be:	4b3c      	ldr	r3, [pc, #240]	; (80012b0 <Create_File+0x138>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	e06f      	b.n	80012a4 <Create_File+0x12c>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80011c4:	220b      	movs	r2, #11
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	483b      	ldr	r0, [pc, #236]	; (80012b8 <Create_File+0x140>)
 80011ca:	f007 f8fd 	bl	80083c8 <f_open>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b37      	ldr	r3, [pc, #220]	; (80012b0 <Create_File+0x138>)
 80011d4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011d6:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <Create_File+0x138>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d018      	beq.n	8001210 <Create_File+0x98>
		{
			char *buf = malloc(100*sizeof(char));
 80011de:	2064      	movs	r0, #100	; 0x64
 80011e0:	f008 f802 	bl	80091e8 <malloc>
 80011e4:	4603      	mov	r3, r0
 80011e6:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n", fresult, name);
 80011e8:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <Create_File+0x138>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4932      	ldr	r1, [pc, #200]	; (80012bc <Create_File+0x144>)
 80011f2:	6938      	ldr	r0, [r7, #16]
 80011f4:	f008 fdf6 	bl	8009de4 <siprintf>
			if(sdioPrints) printf(buf);
 80011f8:	2300      	movs	r3, #0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d002      	beq.n	8001204 <Create_File+0x8c>
 80011fe:	6938      	ldr	r0, [r7, #16]
 8001200:	f008 fd1e 	bl	8009c40 <iprintf>
			free(buf);
 8001204:	6938      	ldr	r0, [r7, #16]
 8001206:	f007 fff7 	bl	80091f8 <free>
		    return fresult;
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <Create_File+0x138>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	e049      	b.n	80012a4 <Create_File+0x12c>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f007 ffe9 	bl	80091e8 <malloc>
 8001216:	4603      	mov	r3, r0
 8001218:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4928      	ldr	r1, [pc, #160]	; (80012c0 <Create_File+0x148>)
 800121e:	69f8      	ldr	r0, [r7, #28]
 8001220:	f008 fde0 	bl	8009de4 <siprintf>
			if(sdioPrints) printf(buf);
 8001224:	2300      	movs	r3, #0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <Create_File+0xb8>
 800122a:	69f8      	ldr	r0, [r7, #28]
 800122c:	f008 fd08 	bl	8009c40 <iprintf>
			free(buf);
 8001230:	69f8      	ldr	r0, [r7, #28]
 8001232:	f007 ffe1 	bl	80091f8 <free>
		}

		fresult = f_close(&fil);
 8001236:	4820      	ldr	r0, [pc, #128]	; (80012b8 <Create_File+0x140>)
 8001238:	f007 fd03 	bl	8008c42 <f_close>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <Create_File+0x138>)
 8001242:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <Create_File+0x138>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d016      	beq.n	800127a <Create_File+0x102>
		{
			char *buf = malloc(100*sizeof(char));
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f007 ffcb 	bl	80091e8 <malloc>
 8001252:	4603      	mov	r3, r0
 8001254:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <Create_File+0x138>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4919      	ldr	r1, [pc, #100]	; (80012c4 <Create_File+0x14c>)
 8001260:	6978      	ldr	r0, [r7, #20]
 8001262:	f008 fdbf 	bl	8009de4 <siprintf>
			if(sdioPrints) printf(buf);
 8001266:	2300      	movs	r3, #0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <Create_File+0xfa>
 800126c:	6978      	ldr	r0, [r7, #20]
 800126e:	f008 fce7 	bl	8009c40 <iprintf>
			free(buf);
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f007 ffc0 	bl	80091f8 <free>
 8001278:	e012      	b.n	80012a0 <Create_File+0x128>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f007 ffb4 	bl	80091e8 <malloc>
 8001280:	4603      	mov	r3, r0
 8001282:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	4910      	ldr	r1, [pc, #64]	; (80012c8 <Create_File+0x150>)
 8001288:	69b8      	ldr	r0, [r7, #24]
 800128a:	f008 fdab 	bl	8009de4 <siprintf>
			if(sdioPrints) printf(buf);
 800128e:	2300      	movs	r3, #0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <Create_File+0x122>
 8001294:	69b8      	ldr	r0, [r7, #24]
 8001296:	f008 fcd3 	bl	8009c40 <iprintf>
			free(buf);
 800129a:	69b8      	ldr	r0, [r7, #24]
 800129c:	f007 ffac 	bl	80091f8 <free>
		}
	}
    return fresult;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <Create_File+0x138>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000318 	.word	0x20000318
 80012b0:	20000674 	.word	0x20000674
 80012b4:	0800c308 	.word	0x0800c308
 80012b8:	2000067c 	.word	0x2000067c
 80012bc:	0800c33c 	.word	0x0800c33c
 80012c0:	0800c364 	.word	0x0800c364
 80012c4:	0800c3a4 	.word	0x0800c3a4
 80012c8:	0800c2e8 	.word	0x0800c2e8

080012cc <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80012d6:	495f      	ldr	r1, [pc, #380]	; (8001454 <Update_File+0x188>)
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f007 fdf8 	bl	8008ece <f_stat>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <Update_File+0x18c>)
 80012e4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80012e6:	4b5c      	ldr	r3, [pc, #368]	; (8001458 <Update_File+0x18c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d015      	beq.n	800131a <Update_File+0x4e>
	{
		char *buf = malloc(100*sizeof(char));
 80012ee:	2064      	movs	r0, #100	; 0x64
 80012f0:	f007 ff7a 	bl	80091e8 <malloc>
 80012f4:	4603      	mov	r3, r0
 80012f6:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n", name);
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4958      	ldr	r1, [pc, #352]	; (800145c <Update_File+0x190>)
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f008 fd71 	bl	8009de4 <siprintf>
		if(sdioPrints) printf (buf);
 8001302:	2300      	movs	r3, #0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <Update_File+0x42>
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f008 fc99 	bl	8009c40 <iprintf>
		free(buf);
 800130e:	68b8      	ldr	r0, [r7, #8]
 8001310:	f007 ff72 	bl	80091f8 <free>
	    return fresult;
 8001314:	4b50      	ldr	r3, [pc, #320]	; (8001458 <Update_File+0x18c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	e097      	b.n	800144a <Update_File+0x17e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 800131a:	2232      	movs	r2, #50	; 0x32
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4850      	ldr	r0, [pc, #320]	; (8001460 <Update_File+0x194>)
 8001320:	f007 f852 	bl	80083c8 <f_open>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <Update_File+0x18c>)
 800132a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800132c:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <Update_File+0x18c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d018      	beq.n	8001366 <Update_File+0x9a>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001334:	2064      	movs	r0, #100	; 0x64
 8001336:	f007 ff57 	bl	80091e8 <malloc>
 800133a:	4603      	mov	r3, r0
 800133c:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n", fresult, name);
 800133e:	4b46      	ldr	r3, [pc, #280]	; (8001458 <Update_File+0x18c>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4947      	ldr	r1, [pc, #284]	; (8001464 <Update_File+0x198>)
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f008 fd4b 	bl	8009de4 <siprintf>
	    	if(sdioPrints) printf(buf);
 800134e:	2300      	movs	r3, #0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <Update_File+0x8e>
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f008 fc73 	bl	8009c40 <iprintf>
	        free(buf);
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f007 ff4c 	bl	80091f8 <free>
	        return fresult;
 8001360:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <Update_File+0x18c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	e071      	b.n	800144a <Update_File+0x17e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001366:	6838      	ldr	r0, [r7, #0]
 8001368:	f7fe ff5c 	bl	8000224 <strlen>
 800136c:	4602      	mov	r2, r0
 800136e:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <Update_File+0x19c>)
 8001370:	6839      	ldr	r1, [r7, #0]
 8001372:	483b      	ldr	r0, [pc, #236]	; (8001460 <Update_File+0x194>)
 8001374:	f007 fa72 	bl	800885c <f_write>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <Update_File+0x18c>)
 800137e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001380:	4b35      	ldr	r3, [pc, #212]	; (8001458 <Update_File+0x18c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d016      	beq.n	80013b6 <Update_File+0xea>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001388:	2064      	movs	r0, #100	; 0x64
 800138a:	f007 ff2d 	bl	80091e8 <malloc>
 800138e:	4603      	mov	r3, r0
 8001390:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n", fresult, name);
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <Update_File+0x18c>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4934      	ldr	r1, [pc, #208]	; (800146c <Update_File+0x1a0>)
 800139c:	69b8      	ldr	r0, [r7, #24]
 800139e:	f008 fd21 	bl	8009de4 <siprintf>
	    	if(sdioPrints) printf(buf);
 80013a2:	2300      	movs	r3, #0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <Update_File+0xe2>
 80013a8:	69b8      	ldr	r0, [r7, #24]
 80013aa:	f008 fc49 	bl	8009c40 <iprintf>
	    	free(buf);
 80013ae:	69b8      	ldr	r0, [r7, #24]
 80013b0:	f007 ff22 	bl	80091f8 <free>
 80013b4:	e012      	b.n	80013dc <Update_File+0x110>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f007 ff16 	bl	80091e8 <malloc>
 80013bc:	4603      	mov	r3, r0
 80013be:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	492b      	ldr	r1, [pc, #172]	; (8001470 <Update_File+0x1a4>)
 80013c4:	69f8      	ldr	r0, [r7, #28]
 80013c6:	f008 fd0d 	bl	8009de4 <siprintf>
	    	if(sdioPrints) printf(buf);
 80013ca:	2300      	movs	r3, #0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <Update_File+0x10a>
 80013d0:	69f8      	ldr	r0, [r7, #28]
 80013d2:	f008 fc35 	bl	8009c40 <iprintf>
	    	free(buf);
 80013d6:	69f8      	ldr	r0, [r7, #28]
 80013d8:	f007 ff0e 	bl	80091f8 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80013dc:	4820      	ldr	r0, [pc, #128]	; (8001460 <Update_File+0x194>)
 80013de:	f007 fc30 	bl	8008c42 <f_close>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <Update_File+0x18c>)
 80013e8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <Update_File+0x18c>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d016      	beq.n	8001420 <Update_File+0x154>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013f2:	2064      	movs	r0, #100	; 0x64
 80013f4:	f007 fef8 	bl	80091e8 <malloc>
 80013f8:	4603      	mov	r3, r0
 80013fa:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n", fresult, name);
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <Update_File+0x18c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	491b      	ldr	r1, [pc, #108]	; (8001474 <Update_File+0x1a8>)
 8001406:	6938      	ldr	r0, [r7, #16]
 8001408:	f008 fcec 	bl	8009de4 <siprintf>
	    	if(sdioPrints) printf(buf);
 800140c:	2300      	movs	r3, #0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <Update_File+0x14c>
 8001412:	6938      	ldr	r0, [r7, #16]
 8001414:	f008 fc14 	bl	8009c40 <iprintf>
	    	free(buf);
 8001418:	6938      	ldr	r0, [r7, #16]
 800141a:	f007 feed 	bl	80091f8 <free>
 800141e:	e012      	b.n	8001446 <Update_File+0x17a>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001420:	2064      	movs	r0, #100	; 0x64
 8001422:	f007 fee1 	bl	80091e8 <malloc>
 8001426:	4603      	mov	r3, r0
 8001428:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4912      	ldr	r1, [pc, #72]	; (8001478 <Update_File+0x1ac>)
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f008 fcd8 	bl	8009de4 <siprintf>
	    	if(sdioPrints) printf(buf);
 8001434:	2300      	movs	r3, #0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <Update_File+0x174>
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f008 fc00 	bl	8009c40 <iprintf>
	    	free(buf);
 8001440:	6978      	ldr	r0, [r7, #20]
 8001442:	f007 fed9 	bl	80091f8 <free>
	     }
	}
    return fresult;
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <Update_File+0x18c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000318 	.word	0x20000318
 8001458:	20000674 	.word	0x20000674
 800145c:	0800c198 	.word	0x0800c198
 8001460:	2000067c 	.word	0x2000067c
 8001464:	0800c1b8 	.word	0x0800c1b8
 8001468:	2000066c 	.word	0x2000066c
 800146c:	0800c3c8 	.word	0x0800c3c8
 8001470:	0800c3f0 	.word	0x0800c3f0
 8001474:	0800c2c0 	.word	0x0800c2c0
 8001478:	0800c2e8 	.word	0x0800c2e8

0800147c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001484:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001488:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001494:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001498:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800149c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00b      	beq.n	80014bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014a4:	e000      	b.n	80014a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f9      	beq.n	80014a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e009      	b.n	80014f0 <_write+0x26>
		ITM_SendChar((*ptr++));
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffc9 	bl	800147c <ITM_SendChar>
	for(int i=0; i<len; i++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf1      	blt.n	80014dc <_write+0x12>

	return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b099      	sub	sp, #100	; 0x64
 8001508:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150a:	f000 ff9f 	bl	800244c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150e:	f000 f96f 	bl	80017f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001512:	f000 fa19 	bl	8001948 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8001516:	f000 f9f7 	bl	8001908 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800151a:	f004 fa35 	bl	8005988 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	/* Initialize all configured peripherals */
    MX_GPIO_Init();
 800151e:	f000 fa13 	bl	8001948 <MX_GPIO_Init>
    MX_SDIO_SD_Init();
 8001522:	f000 f9f1 	bl	8001908 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8001526:	f004 fa2f 	bl	8005988 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */

    //Check if the card is already inserted or not
    if(Mount_SD("/")==FR_OK) {
 800152a:	489a      	ldr	r0, [pc, #616]	; (8001794 <main+0x290>)
 800152c:	f7ff fd6a 	bl	8001004 <Mount_SD>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10a      	bne.n	800154c <main+0x48>
		detect = 1;
 8001536:	4b98      	ldr	r3, [pc, #608]	; (8001798 <main+0x294>)
 8001538:	2201      	movs	r2, #1
 800153a:	801a      	strh	r2, [r3, #0]
		printf("%d) Card is already detected\n\n",detect);
 800153c:	4b96      	ldr	r3, [pc, #600]	; (8001798 <main+0x294>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	4619      	mov	r1, r3
 8001544:	4895      	ldr	r0, [pc, #596]	; (800179c <main+0x298>)
 8001546:	f008 fb7b 	bl	8009c40 <iprintf>
 800154a:	e009      	b.n	8001560 <main+0x5c>
	}
	else {
		detect = 0;
 800154c:	4b92      	ldr	r3, [pc, #584]	; (8001798 <main+0x294>)
 800154e:	2200      	movs	r2, #0
 8001550:	801a      	strh	r2, [r3, #0]
		printf("%d) No card detected\n\n",detect);
 8001552:	4b91      	ldr	r3, [pc, #580]	; (8001798 <main+0x294>)
 8001554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001558:	4619      	mov	r1, r3
 800155a:	4891      	ldr	r0, [pc, #580]	; (80017a0 <main+0x29c>)
 800155c:	f008 fb70 	bl	8009c40 <iprintf>
	}

	Unmount_SD("/");
 8001560:	488c      	ldr	r0, [pc, #560]	; (8001794 <main+0x290>)
 8001562:	f7ff fd7b 	bl	800105c <Unmount_SD>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8001566:	2140      	movs	r1, #64	; 0x40
 8001568:	488e      	ldr	r0, [pc, #568]	; (80017a4 <main+0x2a0>)
 800156a:	f001 fa7f 	bl	8002a6c <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	f000 80fd 	beq.w	8001770 <main+0x26c>
			fresult = Mount_SD("/");
 8001576:	4887      	ldr	r0, [pc, #540]	; (8001794 <main+0x290>)
 8001578:	f7ff fd44 	bl	8001004 <Mount_SD>
 800157c:	4603      	mov	r3, r0
 800157e:	461a      	mov	r2, r3
 8001580:	4b89      	ldr	r3, [pc, #548]	; (80017a8 <main+0x2a4>)
 8001582:	701a      	strb	r2, [r3, #0]
			if (fresult == FR_OK) {
 8001584:	4b88      	ldr	r3, [pc, #544]	; (80017a8 <main+0x2a4>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	f040 80e0 	bne.w	800174e <main+0x24a>

				detect = 1;
 800158e:	4b82      	ldr	r3, [pc, #520]	; (8001798 <main+0x294>)
 8001590:	2201      	movs	r2, #1
 8001592:	801a      	strh	r2, [r3, #0]
				if ((previousDetect == 0 && detect == 1)) {
 8001594:	4b85      	ldr	r3, [pc, #532]	; (80017ac <main+0x2a8>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	f040 80be 	bne.w	800171c <main+0x218>
 80015a0:	4b7d      	ldr	r3, [pc, #500]	; (8001798 <main+0x294>)
 80015a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	f040 80b8 	bne.w	800171c <main+0x218>
					printf("Creating a new file...\n");
 80015ac:	4880      	ldr	r0, [pc, #512]	; (80017b0 <main+0x2ac>)
 80015ae:	f008 fbcd 	bl	8009d4c <puts>

					//Create new file with a GPS naming convention
					second = 53;
 80015b2:	4b80      	ldr	r3, [pc, #512]	; (80017b4 <main+0x2b0>)
 80015b4:	2235      	movs	r2, #53	; 0x35
 80015b6:	601a      	str	r2, [r3, #0]
					minute = 33;
 80015b8:	4b7f      	ldr	r3, [pc, #508]	; (80017b8 <main+0x2b4>)
 80015ba:	2221      	movs	r2, #33	; 0x21
 80015bc:	601a      	str	r2, [r3, #0]
					hour = 14;
 80015be:	4b7f      	ldr	r3, [pc, #508]	; (80017bc <main+0x2b8>)
 80015c0:	220e      	movs	r2, #14
 80015c2:	601a      	str	r2, [r3, #0]
					day = 24;
 80015c4:	4b7e      	ldr	r3, [pc, #504]	; (80017c0 <main+0x2bc>)
 80015c6:	2218      	movs	r2, #24
 80015c8:	601a      	str	r2, [r3, #0]
					month = 3;
 80015ca:	4b7e      	ldr	r3, [pc, #504]	; (80017c4 <main+0x2c0>)
 80015cc:	2203      	movs	r2, #3
 80015ce:	601a      	str	r2, [r3, #0]
					year = 2021;
 80015d0:	4b7d      	ldr	r3, [pc, #500]	; (80017c8 <main+0x2c4>)
 80015d2:	f240 72e5 	movw	r2, #2021	; 0x7e5
 80015d6:	601a      	str	r2, [r3, #0]
					char dayS[12], monthS[12], yearS[12], hourS[12], minuteS[12], secondS[12];
					sprintf(dayS, "%d", indx);
 80015d8:	4b7c      	ldr	r3, [pc, #496]	; (80017cc <main+0x2c8>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015e0:	497b      	ldr	r1, [pc, #492]	; (80017d0 <main+0x2cc>)
 80015e2:	4618      	mov	r0, r3
 80015e4:	f008 fbfe 	bl	8009de4 <siprintf>
					sprintf(monthS, "%d", month);
 80015e8:	4b76      	ldr	r3, [pc, #472]	; (80017c4 <main+0x2c0>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015f0:	4977      	ldr	r1, [pc, #476]	; (80017d0 <main+0x2cc>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f008 fbf6 	bl	8009de4 <siprintf>
					sprintf(yearS, "%d", year);
 80015f8:	4b73      	ldr	r3, [pc, #460]	; (80017c8 <main+0x2c4>)
 80015fa:	681a      	ldr	r2, [r3, #0]
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4973      	ldr	r1, [pc, #460]	; (80017d0 <main+0x2cc>)
 8001602:	4618      	mov	r0, r3
 8001604:	f008 fbee 	bl	8009de4 <siprintf>
					sprintf(hourS, "%d", hour);
 8001608:	4b6c      	ldr	r3, [pc, #432]	; (80017bc <main+0x2b8>)
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	f107 0318 	add.w	r3, r7, #24
 8001610:	496f      	ldr	r1, [pc, #444]	; (80017d0 <main+0x2cc>)
 8001612:	4618      	mov	r0, r3
 8001614:	f008 fbe6 	bl	8009de4 <siprintf>
					sprintf(minuteS, "%d", minute);
 8001618:	4b67      	ldr	r3, [pc, #412]	; (80017b8 <main+0x2b4>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	496b      	ldr	r1, [pc, #428]	; (80017d0 <main+0x2cc>)
 8001622:	4618      	mov	r0, r3
 8001624:	f008 fbde 	bl	8009de4 <siprintf>
					sprintf(secondS, "%d", second);
 8001628:	4b62      	ldr	r3, [pc, #392]	; (80017b4 <main+0x2b0>)
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	463b      	mov	r3, r7
 800162e:	4968      	ldr	r1, [pc, #416]	; (80017d0 <main+0x2cc>)
 8001630:	4618      	mov	r0, r3
 8001632:	f008 fbd7 	bl	8009de4 <siprintf>
					lenF = strlen("DFR_")+strlen(dayS)+strlen("-")+strlen(monthS)+strlen("-")+strlen(yearS)+strlen("_")+strlen(secondS)+strlen("-")+strlen(minuteS)+strlen("-")+strlen(hourS)+strlen(".csv")+1;
 8001636:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800163a:	4618      	mov	r0, r3
 800163c:	f7fe fdf2 	bl	8000224 <strlen>
 8001640:	4604      	mov	r4, r0
 8001642:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001646:	4618      	mov	r0, r3
 8001648:	f7fe fdec 	bl	8000224 <strlen>
 800164c:	4603      	mov	r3, r0
 800164e:	441c      	add	r4, r3
 8001650:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe fde5 	bl	8000224 <strlen>
 800165a:	4603      	mov	r3, r0
 800165c:	441c      	add	r4, r3
 800165e:	463b      	mov	r3, r7
 8001660:	4618      	mov	r0, r3
 8001662:	f7fe fddf 	bl	8000224 <strlen>
 8001666:	4603      	mov	r3, r0
 8001668:	441c      	add	r4, r3
 800166a:	f107 030c 	add.w	r3, r7, #12
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fdd8 	bl	8000224 <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	441c      	add	r4, r3
 8001678:	f107 0318 	add.w	r3, r7, #24
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe fdd1 	bl	8000224 <strlen>
 8001682:	4603      	mov	r3, r0
 8001684:	4423      	add	r3, r4
 8001686:	330e      	adds	r3, #14
 8001688:	461a      	mov	r2, r3
 800168a:	4b52      	ldr	r3, [pc, #328]	; (80017d4 <main+0x2d0>)
 800168c:	601a      	str	r2, [r3, #0]
					FileName = (char*)malloc(lenF * sizeof(char));
 800168e:	4b51      	ldr	r3, [pc, #324]	; (80017d4 <main+0x2d0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4618      	mov	r0, r3
 8001694:	f007 fda8 	bl	80091e8 <malloc>
 8001698:	4603      	mov	r3, r0
 800169a:	461a      	mov	r2, r3
 800169c:	4b4e      	ldr	r3, [pc, #312]	; (80017d8 <main+0x2d4>)
 800169e:	601a      	str	r2, [r3, #0]
					snprintf(FileName,lenF,"DFR_%s-%s-%s_%s-%s-%s.CSV", dayS, monthS, yearS, secondS, minuteS, hourS);
 80016a0:	4b4d      	ldr	r3, [pc, #308]	; (80017d8 <main+0x2d4>)
 80016a2:	6818      	ldr	r0, [r3, #0]
 80016a4:	4b4b      	ldr	r3, [pc, #300]	; (80017d4 <main+0x2d0>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4619      	mov	r1, r3
 80016aa:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	9304      	str	r3, [sp, #16]
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	9303      	str	r3, [sp, #12]
 80016ba:	463b      	mov	r3, r7
 80016bc:	9302      	str	r3, [sp, #8]
 80016be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	4613      	mov	r3, r2
 80016cc:	4a43      	ldr	r2, [pc, #268]	; (80017dc <main+0x2d8>)
 80016ce:	f008 fb55 	bl	8009d7c <sniprintf>


					SD_Check(fresult);
 80016d2:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <main+0x2a4>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	4618      	mov	r0, r3
 80016d8:	f000 f9d2 	bl	8001a80 <SD_Check>
					Format_SD();
 80016dc:	f7ff fce6 	bl	80010ac <Format_SD>
					fresult = Create_File(FileName);
 80016e0:	4b3d      	ldr	r3, [pc, #244]	; (80017d8 <main+0x2d4>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fd47 	bl	8001178 <Create_File>
 80016ea:	4603      	mov	r3, r0
 80016ec:	461a      	mov	r2, r3
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <main+0x2a4>)
 80016f0:	701a      	strb	r2, [r3, #0]
					SD_Check(fresult);
 80016f2:	4b2d      	ldr	r3, [pc, #180]	; (80017a8 <main+0x2a4>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f9c2 	bl	8001a80 <SD_Check>
					Unmount_SD("/");
 80016fc:	4825      	ldr	r0, [pc, #148]	; (8001794 <main+0x290>)
 80016fe:	f7ff fcad 	bl	800105c <Unmount_SD>

					csvHeader(FileName, lenF);
 8001702:	4b35      	ldr	r3, [pc, #212]	; (80017d8 <main+0x2d4>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a33      	ldr	r2, [pc, #204]	; (80017d4 <main+0x2d0>)
 8001708:	6812      	ldr	r2, [r2, #0]
 800170a:	4611      	mov	r1, r2
 800170c:	4618      	mov	r0, r3
 800170e:	f000 f9e3 	bl	8001ad8 <csvHeader>

					previousDetect = detect;
 8001712:	4b21      	ldr	r3, [pc, #132]	; (8001798 <main+0x294>)
 8001714:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001718:	4b24      	ldr	r3, [pc, #144]	; (80017ac <main+0x2a8>)
 800171a:	801a      	strh	r2, [r3, #0]

				}



				HAL_GPIO_WritePin(GPIOA, LD2_Pin, 1);
 800171c:	2201      	movs	r2, #1
 800171e:	2120      	movs	r1, #32
 8001720:	482f      	ldr	r0, [pc, #188]	; (80017e0 <main+0x2dc>)
 8001722:	f001 f9bb 	bl	8002a9c <HAL_GPIO_WritePin>
				csvUpdate(FileName, lenF);
 8001726:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <main+0x2d4>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a2a      	ldr	r2, [pc, #168]	; (80017d4 <main+0x2d0>)
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	4611      	mov	r1, r2
 8001730:	4618      	mov	r0, r3
 8001732:	f000 fac9 	bl	8001cc8 <csvUpdate>
				indx++;
 8001736:	4b25      	ldr	r3, [pc, #148]	; (80017cc <main+0x2c8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	3301      	adds	r3, #1
 800173c:	4a23      	ldr	r2, [pc, #140]	; (80017cc <main+0x2c8>)
 800173e:	6013      	str	r3, [r2, #0]
				printf("\n Count: %d \n", indx);
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <main+0x2c8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4619      	mov	r1, r3
 8001746:	4827      	ldr	r0, [pc, #156]	; (80017e4 <main+0x2e0>)
 8001748:	f008 fa7a 	bl	8009c40 <iprintf>
 800174c:	e70b      	b.n	8001566 <main+0x62>

			}
			else {
				detect = 0;
 800174e:	4b12      	ldr	r3, [pc, #72]	; (8001798 <main+0x294>)
 8001750:	2200      	movs	r2, #0
 8001752:	801a      	strh	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOA, LD2_Pin, 0);
 8001754:	2200      	movs	r2, #0
 8001756:	2120      	movs	r1, #32
 8001758:	4821      	ldr	r0, [pc, #132]	; (80017e0 <main+0x2dc>)
 800175a:	f001 f99f 	bl	8002a9c <HAL_GPIO_WritePin>
				printf("ERROR - Not mounded...\n");
 800175e:	4822      	ldr	r0, [pc, #136]	; (80017e8 <main+0x2e4>)
 8001760:	f008 faf4 	bl	8009d4c <puts>

				previousDetect = detect;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <main+0x294>)
 8001766:	f9b3 2000 	ldrsh.w	r2, [r3]
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <main+0x2a8>)
 800176c:	801a      	strh	r2, [r3, #0]
 800176e:	e6fa      	b.n	8001566 <main+0x62>
			}
		}
		else {
			detect = 0;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <main+0x294>)
 8001772:	2200      	movs	r2, #0
 8001774:	801a      	strh	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOA, LD2_Pin, 0);
 8001776:	2200      	movs	r2, #0
 8001778:	2120      	movs	r1, #32
 800177a:	4819      	ldr	r0, [pc, #100]	; (80017e0 <main+0x2dc>)
 800177c:	f001 f98e 	bl	8002a9c <HAL_GPIO_WritePin>
			printf("ERROR - No card inserted...\n");
 8001780:	481a      	ldr	r0, [pc, #104]	; (80017ec <main+0x2e8>)
 8001782:	f008 fae3 	bl	8009d4c <puts>

			previousDetect = detect;
 8001786:	4b04      	ldr	r3, [pc, #16]	; (8001798 <main+0x294>)
 8001788:	f9b3 2000 	ldrsh.w	r2, [r3]
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <main+0x2a8>)
 800178e:	801a      	strh	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6)) {
 8001790:	e6e9      	b.n	8001566 <main+0x62>
 8001792:	bf00      	nop
 8001794:	0800c4dc 	.word	0x0800c4dc
 8001798:	200002c6 	.word	0x200002c6
 800179c:	0800c4e0 	.word	0x0800c4e0
 80017a0:	0800c500 	.word	0x0800c500
 80017a4:	40020400 	.word	0x40020400
 80017a8:	20000674 	.word	0x20000674
 80017ac:	200002c8 	.word	0x200002c8
 80017b0:	0800c518 	.word	0x0800c518
 80017b4:	200008dc 	.word	0x200008dc
 80017b8:	200008e4 	.word	0x200008e4
 80017bc:	20000974 	.word	0x20000974
 80017c0:	20000a28 	.word	0x20000a28
 80017c4:	200008d8 	.word	0x200008d8
 80017c8:	20000a1c 	.word	0x20000a1c
 80017cc:	200002d0 	.word	0x200002d0
 80017d0:	0800c530 	.word	0x0800c530
 80017d4:	200002cc 	.word	0x200002cc
 80017d8:	20000a58 	.word	0x20000a58
 80017dc:	0800c534 	.word	0x0800c534
 80017e0:	40020000 	.word	0x40020000
 80017e4:	0800c550 	.word	0x0800c550
 80017e8:	0800c560 	.word	0x0800c560
 80017ec:	0800c578 	.word	0x0800c578

080017f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b0ac      	sub	sp, #176	; 0xb0
 80017f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017f6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80017fa:	2234      	movs	r2, #52	; 0x34
 80017fc:	2100      	movs	r1, #0
 80017fe:	4618      	mov	r0, r3
 8001800:	f007 fd02 	bl	8009208 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001804:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	225c      	movs	r2, #92	; 0x5c
 800181a:	2100      	movs	r1, #0
 800181c:	4618      	mov	r0, r3
 800181e:	f007 fcf3 	bl	8009208 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	60bb      	str	r3, [r7, #8]
 8001826:	4b36      	ldr	r3, [pc, #216]	; (8001900 <SystemClock_Config+0x110>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a35      	ldr	r2, [pc, #212]	; (8001900 <SystemClock_Config+0x110>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b33      	ldr	r3, [pc, #204]	; (8001900 <SystemClock_Config+0x110>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	60bb      	str	r3, [r7, #8]
 800183c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800183e:	2300      	movs	r3, #0
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	4b30      	ldr	r3, [pc, #192]	; (8001904 <SystemClock_Config+0x114>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800184a:	4a2e      	ldr	r2, [pc, #184]	; (8001904 <SystemClock_Config+0x114>)
 800184c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001850:	6013      	str	r3, [r2, #0]
 8001852:	4b2c      	ldr	r3, [pc, #176]	; (8001904 <SystemClock_Config+0x114>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800185e:	2301      	movs	r3, #1
 8001860:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001862:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001866:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800186a:	2302      	movs	r3, #2
 800186c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001870:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001878:	2308      	movs	r3, #8
 800187a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 100;
 800187e:	2364      	movs	r3, #100	; 0x64
 8001880:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001884:	2302      	movs	r3, #2
 8001886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800188a:	2303      	movs	r3, #3
 800188c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001890:	2302      	movs	r3, #2
 8001892:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001896:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800189a:	4618      	mov	r0, r3
 800189c:	f001 feda 	bl	8003654 <HAL_RCC_OscConfig>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <SystemClock_Config+0xba>
  {
    Error_Handler();
 80018a6:	f000 fc21 	bl	80020ec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018aa:	230f      	movs	r3, #15
 80018ac:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ae:	2302      	movs	r3, #2
 80018b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b2:	2300      	movs	r3, #0
 80018b4:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ba:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80018c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018c4:	2101      	movs	r1, #1
 80018c6:	4618      	mov	r0, r3
 80018c8:	f001 f902 	bl	8002ad0 <HAL_RCC_ClockConfig>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80018d2:	f000 fc0b 	bl	80020ec <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80018d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80018da:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80018dc:	2300      	movs	r3, #0
 80018de:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80018e0:	2300      	movs	r3, #0
 80018e2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	4618      	mov	r0, r3
 80018ea:	f001 f9d7 	bl	8002c9c <HAL_RCCEx_PeriphCLKConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80018f4:	f000 fbfa 	bl	80020ec <Error_Handler>
  }
}
 80018f8:	bf00      	nop
 80018fa:	37b0      	adds	r7, #176	; 0xb0
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	40023800 	.word	0x40023800
 8001904:	40007000 	.word	0x40007000

08001908 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800190c:	4b0c      	ldr	r3, [pc, #48]	; (8001940 <MX_SDIO_SD_Init+0x38>)
 800190e:	4a0d      	ldr	r2, [pc, #52]	; (8001944 <MX_SDIO_SD_Init+0x3c>)
 8001910:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001912:	4b0b      	ldr	r3, [pc, #44]	; (8001940 <MX_SDIO_SD_Init+0x38>)
 8001914:	2200      	movs	r2, #0
 8001916:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001918:	4b09      	ldr	r3, [pc, #36]	; (8001940 <MX_SDIO_SD_Init+0x38>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800191e:	4b08      	ldr	r3, [pc, #32]	; (8001940 <MX_SDIO_SD_Init+0x38>)
 8001920:	2200      	movs	r2, #0
 8001922:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <MX_SDIO_SD_Init+0x38>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800192a:	4b05      	ldr	r3, [pc, #20]	; (8001940 <MX_SDIO_SD_Init+0x38>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 16;
 8001930:	4b03      	ldr	r3, [pc, #12]	; (8001940 <MX_SDIO_SD_Init+0x38>)
 8001932:	2210      	movs	r2, #16
 8001934:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001936:	bf00      	nop
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	20000988 	.word	0x20000988
 8001944:	40012c00 	.word	0x40012c00

08001948 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b08a      	sub	sp, #40	; 0x28
 800194c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	2200      	movs	r2, #0
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	605a      	str	r2, [r3, #4]
 8001958:	609a      	str	r2, [r3, #8]
 800195a:	60da      	str	r2, [r3, #12]
 800195c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	4b42      	ldr	r3, [pc, #264]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a41      	ldr	r2, [pc, #260]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001968:	f043 0304 	orr.w	r3, r3, #4
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a3a      	ldr	r2, [pc, #232]	; (8001a6c <MX_GPIO_Init+0x124>)
 8001984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <MX_GPIO_Init+0x124>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	4b34      	ldr	r3, [pc, #208]	; (8001a6c <MX_GPIO_Init+0x124>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a33      	ldr	r2, [pc, #204]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b31      	ldr	r3, [pc, #196]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ba:	4a2c      	ldr	r2, [pc, #176]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019bc:	f043 0308 	orr.w	r3, r3, #8
 80019c0:	6313      	str	r3, [r2, #48]	; 0x30
 80019c2:	4b2a      	ldr	r3, [pc, #168]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	4a25      	ldr	r2, [pc, #148]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	; 0x30
 80019de:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <MX_GPIO_Init+0x124>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2120      	movs	r1, #32
 80019ee:	4820      	ldr	r0, [pc, #128]	; (8001a70 <MX_GPIO_Init+0x128>)
 80019f0:	f001 f854 	bl	8002a9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80019f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80019fa:	4b1e      	ldr	r3, [pc, #120]	; (8001a74 <MX_GPIO_Init+0x12c>)
 80019fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 0314 	add.w	r3, r7, #20
 8001a06:	4619      	mov	r1, r3
 8001a08:	481b      	ldr	r0, [pc, #108]	; (8001a78 <MX_GPIO_Init+0x130>)
 8001a0a:	f000 fe9b 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 8001a0e:	2308      	movs	r3, #8
 8001a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a12:	2302      	movs	r3, #2
 8001a14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a1e:	2307      	movs	r3, #7
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 8001a22:	f107 0314 	add.w	r3, r7, #20
 8001a26:	4619      	mov	r1, r3
 8001a28:	4811      	ldr	r0, [pc, #68]	; (8001a70 <MX_GPIO_Init+0x128>)
 8001a2a:	f000 fe8b 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001a2e:	2320      	movs	r3, #32
 8001a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a32:	2301      	movs	r3, #1
 8001a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	480a      	ldr	r0, [pc, #40]	; (8001a70 <MX_GPIO_Init+0x128>)
 8001a46:	f000 fe7d 	bl	8002744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a4a:	2340      	movs	r3, #64	; 0x40
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4807      	ldr	r0, [pc, #28]	; (8001a7c <MX_GPIO_Init+0x134>)
 8001a5e:	f000 fe71 	bl	8002744 <HAL_GPIO_Init>

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000
 8001a74:	10210000 	.word	0x10210000
 8001a78:	40020800 	.word	0x40020800
 8001a7c:	40020400 	.word	0x40020400

08001a80 <SD_Check>:

/* USER CODE BEGIN 4 */


void SD_Check(FRESULT fresult) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	71fb      	strb	r3, [r7, #7]
	if(fresult != FR_OK) {
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d00b      	beq.n	8001aa8 <SD_Check+0x28>
		isSaving = 0;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <SD_Check+0x48>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	801a      	strh	r2, [r3, #0]
		if(enablePrintf)
 8001a96:	4b0d      	ldr	r3, [pc, #52]	; (8001acc <SD_Check+0x4c>)
 8001a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d00e      	beq.n	8001abe <SD_Check+0x3e>
			printf("ERROR - SD card is NOT saving!\n");
 8001aa0:	480b      	ldr	r0, [pc, #44]	; (8001ad0 <SD_Check+0x50>)
 8001aa2:	f008 f953 	bl	8009d4c <puts>
	else {
		isSaving = 1;
		if(enablePrintf)
			printf("Successfully saved to SD Card\n");
	}
}
 8001aa6:	e00a      	b.n	8001abe <SD_Check+0x3e>
		isSaving = 1;
 8001aa8:	4b07      	ldr	r3, [pc, #28]	; (8001ac8 <SD_Check+0x48>)
 8001aaa:	2201      	movs	r2, #1
 8001aac:	801a      	strh	r2, [r3, #0]
		if(enablePrintf)
 8001aae:	4b07      	ldr	r3, [pc, #28]	; (8001acc <SD_Check+0x4c>)
 8001ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d002      	beq.n	8001abe <SD_Check+0x3e>
			printf("Successfully saved to SD Card\n");
 8001ab8:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <SD_Check+0x54>)
 8001aba:	f008 f947 	bl	8009d4c <puts>
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200002c4 	.word	0x200002c4
 8001acc:	20000000 	.word	0x20000000
 8001ad0:	0800c594 	.word	0x0800c594
 8001ad4:	0800c5b4 	.word	0x0800c5b4

08001ad8 <csvHeader>:

int SD_Status() { return isSaving; }

void csvHeader(char* FileName, int lenF) {
 8001ad8:	b5b0      	push	{r4, r5, r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
 8001ae2:	466b      	mov	r3, sp
 8001ae4:	461d      	mov	r5, r3

	char name[lenF];
 8001ae6:	683c      	ldr	r4, [r7, #0]
 8001ae8:	1e63      	subs	r3, r4, #1
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	4623      	mov	r3, r4
 8001aee:	4618      	mov	r0, r3
 8001af0:	f04f 0100 	mov.w	r1, #0
 8001af4:	f04f 0200 	mov.w	r2, #0
 8001af8:	f04f 0300 	mov.w	r3, #0
 8001afc:	00cb      	lsls	r3, r1, #3
 8001afe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b02:	00c2      	lsls	r2, r0, #3
 8001b04:	4623      	mov	r3, r4
 8001b06:	4618      	mov	r0, r3
 8001b08:	f04f 0100 	mov.w	r1, #0
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	f04f 0300 	mov.w	r3, #0
 8001b14:	00cb      	lsls	r3, r1, #3
 8001b16:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001b1a:	00c2      	lsls	r2, r0, #3
 8001b1c:	4623      	mov	r3, r4
 8001b1e:	3307      	adds	r3, #7
 8001b20:	08db      	lsrs	r3, r3, #3
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	ebad 0d03 	sub.w	sp, sp, r3
 8001b28:	466b      	mov	r3, sp
 8001b2a:	3300      	adds	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
	strcpy(name, FileName);
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	6879      	ldr	r1, [r7, #4]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f008 f976 	bl	8009e24 <strcpy>

	fresult = Mount_SD("/");
 8001b38:	4851      	ldr	r0, [pc, #324]	; (8001c80 <csvHeader+0x1a8>)
 8001b3a:	f7ff fa63 	bl	8001004 <Mount_SD>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	461a      	mov	r2, r3
 8001b42:	4b50      	ldr	r3, [pc, #320]	; (8001c84 <csvHeader+0x1ac>)
 8001b44:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 8001b46:	4b4f      	ldr	r3, [pc, #316]	; (8001c84 <csvHeader+0x1ac>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff ff98 	bl	8001a80 <SD_Check>

	//CAN Bus
	sprintf(buffer, "Time, RPM, TPS (%%), Fuel Open Time (ms), Ignition Angle (Degrees),");
 8001b50:	494d      	ldr	r1, [pc, #308]	; (8001c88 <csvHeader+0x1b0>)
 8001b52:	484e      	ldr	r0, [pc, #312]	; (8001c8c <csvHeader+0x1b4>)
 8001b54:	f008 f946 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001b58:	68bb      	ldr	r3, [r7, #8]
 8001b5a:	494c      	ldr	r1, [pc, #304]	; (8001c8c <csvHeader+0x1b4>)
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7ff fbb5 	bl	80012cc <Update_File>
	sprintf(buffer, "Barometer (PSI), MAP (PSI), Pressure Type,");
 8001b62:	494b      	ldr	r1, [pc, #300]	; (8001c90 <csvHeader+0x1b8>)
 8001b64:	4849      	ldr	r0, [pc, #292]	; (8001c8c <csvHeader+0x1b4>)
 8001b66:	f008 f93d 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	4947      	ldr	r1, [pc, #284]	; (8001c8c <csvHeader+0x1b4>)
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff fbac 	bl	80012cc <Update_File>
	sprintf(buffer, "Pre Radiator Air Temp (C), Post Radiator Air Temp (C),");
 8001b74:	4947      	ldr	r1, [pc, #284]	; (8001c94 <csvHeader+0x1bc>)
 8001b76:	4845      	ldr	r0, [pc, #276]	; (8001c8c <csvHeader+0x1b4>)
 8001b78:	f008 f934 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	4943      	ldr	r1, [pc, #268]	; (8001c8c <csvHeader+0x1b4>)
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fba3 	bl	80012cc <Update_File>
	sprintf(buffer, "Labmda #1 (A/F R), Lambda #2 (A/F R),");
 8001b86:	4944      	ldr	r1, [pc, #272]	; (8001c98 <csvHeader+0x1c0>)
 8001b88:	4840      	ldr	r0, [pc, #256]	; (8001c8c <csvHeader+0x1b4>)
 8001b8a:	f008 f92b 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	493e      	ldr	r1, [pc, #248]	; (8001c8c <csvHeader+0x1b4>)
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff fb9a 	bl	80012cc <Update_File>
	sprintf(buffer, "Pre Radiator Coolant Temp (C), Post Radiator Coolant Temp (C),");
 8001b98:	4940      	ldr	r1, [pc, #256]	; (8001c9c <csvHeader+0x1c4>)
 8001b9a:	483c      	ldr	r0, [pc, #240]	; (8001c8c <csvHeader+0x1b4>)
 8001b9c:	f008 f922 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	493a      	ldr	r1, [pc, #232]	; (8001c8c <csvHeader+0x1b4>)
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff fb91 	bl	80012cc <Update_File>
	sprintf(buffer, "Oil Pressure (PSI), Mass Air Flow Sensor (kg/s),");
 8001baa:	493d      	ldr	r1, [pc, #244]	; (8001ca0 <csvHeader+0x1c8>)
 8001bac:	4837      	ldr	r0, [pc, #220]	; (8001c8c <csvHeader+0x1b4>)
 8001bae:	f008 f919 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	4935      	ldr	r1, [pc, #212]	; (8001c8c <csvHeader+0x1b4>)
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fb88 	bl	80012cc <Update_File>
	sprintf(buffer, "FR Wheel Speed (mph), FL Wheel Speed (mph),");
 8001bbc:	4939      	ldr	r1, [pc, #228]	; (8001ca4 <csvHeader+0x1cc>)
 8001bbe:	4833      	ldr	r0, [pc, #204]	; (8001c8c <csvHeader+0x1b4>)
 8001bc0:	f008 f910 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	4931      	ldr	r1, [pc, #196]	; (8001c8c <csvHeader+0x1b4>)
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff fb7f 	bl	80012cc <Update_File>
	sprintf(buffer, "RR Wheel Speed (mph), RL Wheel Speed (mph),");
 8001bce:	4936      	ldr	r1, [pc, #216]	; (8001ca8 <csvHeader+0x1d0>)
 8001bd0:	482e      	ldr	r0, [pc, #184]	; (8001c8c <csvHeader+0x1b4>)
 8001bd2:	f008 f907 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001bd6:	68bb      	ldr	r3, [r7, #8]
 8001bd8:	492c      	ldr	r1, [pc, #176]	; (8001c8c <csvHeader+0x1b4>)
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f7ff fb76 	bl	80012cc <Update_File>
	sprintf(buffer, "Battery Voltage (V), Air Temp (C), Coolant Temp (C),");
 8001be0:	4932      	ldr	r1, [pc, #200]	; (8001cac <csvHeader+0x1d4>)
 8001be2:	482a      	ldr	r0, [pc, #168]	; (8001c8c <csvHeader+0x1b4>)
 8001be4:	f008 f8fe 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	4928      	ldr	r1, [pc, #160]	; (8001c8c <csvHeader+0x1b4>)
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff fb6d 	bl	80012cc <Update_File>

	//GPS
	sprintf(buffer, "Day, Month, Year, Hour, Minute, Second, gSpeed,");
 8001bf2:	492f      	ldr	r1, [pc, #188]	; (8001cb0 <csvHeader+0x1d8>)
 8001bf4:	4825      	ldr	r0, [pc, #148]	; (8001c8c <csvHeader+0x1b4>)
 8001bf6:	f008 f8f5 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001bfa:	68bb      	ldr	r3, [r7, #8]
 8001bfc:	4923      	ldr	r1, [pc, #140]	; (8001c8c <csvHeader+0x1b4>)
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff fb64 	bl	80012cc <Update_File>
	sprintf(buffer, "Latitude, Longitude, Height Ellipsoid, Height Sea Level,");
 8001c04:	492b      	ldr	r1, [pc, #172]	; (8001cb4 <csvHeader+0x1dc>)
 8001c06:	4821      	ldr	r0, [pc, #132]	; (8001c8c <csvHeader+0x1b4>)
 8001c08:	f008 f8ec 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	491f      	ldr	r1, [pc, #124]	; (8001c8c <csvHeader+0x1b4>)
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff fb5b 	bl	80012cc <Update_File>

	//ADC1
	sprintf(buffer, "FL Damper Sensor, FR Damper Sensor,");
 8001c16:	4928      	ldr	r1, [pc, #160]	; (8001cb8 <csvHeader+0x1e0>)
 8001c18:	481c      	ldr	r0, [pc, #112]	; (8001c8c <csvHeader+0x1b4>)
 8001c1a:	f008 f8e3 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001c1e:	68bb      	ldr	r3, [r7, #8]
 8001c20:	491a      	ldr	r1, [pc, #104]	; (8001c8c <csvHeader+0x1b4>)
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fb52 	bl	80012cc <Update_File>
	sprintf(buffer, "RL Damper Sensor, RR Damper Sensor,");
 8001c28:	4924      	ldr	r1, [pc, #144]	; (8001cbc <csvHeader+0x1e4>)
 8001c2a:	4818      	ldr	r0, [pc, #96]	; (8001c8c <csvHeader+0x1b4>)
 8001c2c:	f008 f8da 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	4916      	ldr	r1, [pc, #88]	; (8001c8c <csvHeader+0x1b4>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7ff fb49 	bl	80012cc <Update_File>

	//ADC2
	sprintf(buffer, "Steering Sensor, Brake Sensor #1, Brake Sensor #2,");
 8001c3a:	4921      	ldr	r1, [pc, #132]	; (8001cc0 <csvHeader+0x1e8>)
 8001c3c:	4813      	ldr	r0, [pc, #76]	; (8001c8c <csvHeader+0x1b4>)
 8001c3e:	f008 f8d1 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	4911      	ldr	r1, [pc, #68]	; (8001c8c <csvHeader+0x1b4>)
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fb40 	bl	80012cc <Update_File>

	//Ask about Unused #1 and #2

	//Accelerometer & Gyroscope
	sprintf(buffer, "X, Y, Z, Roll, Pitch, Yaw\n\n");
 8001c4c:	491d      	ldr	r1, [pc, #116]	; (8001cc4 <csvHeader+0x1ec>)
 8001c4e:	480f      	ldr	r0, [pc, #60]	; (8001c8c <csvHeader+0x1b4>)
 8001c50:	f008 f8c8 	bl	8009de4 <siprintf>
	fresult = Update_File(name, buffer);
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	490d      	ldr	r1, [pc, #52]	; (8001c8c <csvHeader+0x1b4>)
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fb37 	bl	80012cc <Update_File>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	461a      	mov	r2, r3
 8001c62:	4b08      	ldr	r3, [pc, #32]	; (8001c84 <csvHeader+0x1ac>)
 8001c64:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 8001c66:	4b07      	ldr	r3, [pc, #28]	; (8001c84 <csvHeader+0x1ac>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff ff08 	bl	8001a80 <SD_Check>


	Unmount_SD("/");
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <csvHeader+0x1a8>)
 8001c72:	f7ff f9f3 	bl	800105c <Unmount_SD>
 8001c76:	46ad      	mov	sp, r5
}
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c80:	0800c4dc 	.word	0x0800c4dc
 8001c84:	20000674 	.word	0x20000674
 8001c88:	0800c5d4 	.word	0x0800c5d4
 8001c8c:	200008e8 	.word	0x200008e8
 8001c90:	0800c618 	.word	0x0800c618
 8001c94:	0800c644 	.word	0x0800c644
 8001c98:	0800c67c 	.word	0x0800c67c
 8001c9c:	0800c6a4 	.word	0x0800c6a4
 8001ca0:	0800c6e4 	.word	0x0800c6e4
 8001ca4:	0800c718 	.word	0x0800c718
 8001ca8:	0800c744 	.word	0x0800c744
 8001cac:	0800c770 	.word	0x0800c770
 8001cb0:	0800c7a8 	.word	0x0800c7a8
 8001cb4:	0800c7d8 	.word	0x0800c7d8
 8001cb8:	0800c814 	.word	0x0800c814
 8001cbc:	0800c838 	.word	0x0800c838
 8001cc0:	0800c85c 	.word	0x0800c85c
 8001cc4:	0800c890 	.word	0x0800c890

08001cc8 <csvUpdate>:

void csvUpdate(char* FileName, int lenF) {
 8001cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ccc:	b097      	sub	sp, #92	; 0x5c
 8001cce:	af0e      	add	r7, sp, #56	; 0x38
 8001cd0:	6178      	str	r0, [r7, #20]
 8001cd2:	6139      	str	r1, [r7, #16]
 8001cd4:	466b      	mov	r3, sp
 8001cd6:	60fb      	str	r3, [r7, #12]

	char name[lenF];
 8001cd8:	693c      	ldr	r4, [r7, #16]
 8001cda:	1e63      	subs	r3, r4, #1
 8001cdc:	61fb      	str	r3, [r7, #28]
 8001cde:	4623      	mov	r3, r4
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f04f 0100 	mov.w	r1, #0
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	00cb      	lsls	r3, r1, #3
 8001cf0:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001cf4:	00c2      	lsls	r2, r0, #3
 8001cf6:	4623      	mov	r3, r4
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f04f 0100 	mov.w	r1, #0
 8001cfe:	f04f 0200 	mov.w	r2, #0
 8001d02:	f04f 0300 	mov.w	r3, #0
 8001d06:	00cb      	lsls	r3, r1, #3
 8001d08:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001d0c:	00c2      	lsls	r2, r0, #3
 8001d0e:	4623      	mov	r3, r4
 8001d10:	3307      	adds	r3, #7
 8001d12:	08db      	lsrs	r3, r3, #3
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	ebad 0d03 	sub.w	sp, sp, r3
 8001d1a:	ab0e      	add	r3, sp, #56	; 0x38
 8001d1c:	3300      	adds	r3, #0
 8001d1e:	61bb      	str	r3, [r7, #24]
	strcpy(name, FileName);
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	6979      	ldr	r1, [r7, #20]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f008 f87d 	bl	8009e24 <strcpy>

	fresult = Mount_SD("/");
 8001d2a:	4897      	ldr	r0, [pc, #604]	; (8001f88 <csvUpdate+0x2c0>)
 8001d2c:	f7ff f96a 	bl	8001004 <Mount_SD>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461a      	mov	r2, r3
 8001d34:	4b95      	ldr	r3, [pc, #596]	; (8001f8c <csvUpdate+0x2c4>)
 8001d36:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 8001d38:	4b94      	ldr	r3, [pc, #592]	; (8001f8c <csvUpdate+0x2c4>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fe9f 	bl	8001a80 <SD_Check>


	sprintf(buffer, "%d,%hu,%f,%f,%f,", indx, RPM, TPS, fuelOpenTime, ignitionAngle);
 8001d42:	4b93      	ldr	r3, [pc, #588]	; (8001f90 <csvUpdate+0x2c8>)
 8001d44:	681e      	ldr	r6, [r3, #0]
 8001d46:	4b93      	ldr	r3, [pc, #588]	; (8001f94 <csvUpdate+0x2cc>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	603a      	str	r2, [r7, #0]
 8001d4c:	4b92      	ldr	r3, [pc, #584]	; (8001f98 <csvUpdate+0x2d0>)
 8001d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d52:	4992      	ldr	r1, [pc, #584]	; (8001f9c <csvUpdate+0x2d4>)
 8001d54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d58:	4c91      	ldr	r4, [pc, #580]	; (8001fa0 <csvUpdate+0x2d8>)
 8001d5a:	e9d4 4500 	ldrd	r4, r5, [r4]
 8001d5e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001d62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001d66:	e9cd 2300 	strd	r2, r3, [sp]
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	4632      	mov	r2, r6
 8001d6e:	498d      	ldr	r1, [pc, #564]	; (8001fa4 <csvUpdate+0x2dc>)
 8001d70:	488d      	ldr	r0, [pc, #564]	; (8001fa8 <csvUpdate+0x2e0>)
 8001d72:	f008 f837 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	498b      	ldr	r1, [pc, #556]	; (8001fa8 <csvUpdate+0x2e0>)
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff faa6 	bl	80012cc <Update_File>
	sprintf(buffer, "%f,%f,%i,", barometer, MAP, pressureType);
 8001d80:	4b8a      	ldr	r3, [pc, #552]	; (8001fac <csvUpdate+0x2e4>)
 8001d82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d86:	4b8a      	ldr	r3, [pc, #552]	; (8001fb0 <csvUpdate+0x2e8>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	4c89      	ldr	r4, [pc, #548]	; (8001fb4 <csvUpdate+0x2ec>)
 8001d8e:	6824      	ldr	r4, [r4, #0]
 8001d90:	9402      	str	r4, [sp, #8]
 8001d92:	e9cd 2300 	strd	r2, r3, [sp]
 8001d96:	4602      	mov	r2, r0
 8001d98:	460b      	mov	r3, r1
 8001d9a:	4987      	ldr	r1, [pc, #540]	; (8001fb8 <csvUpdate+0x2f0>)
 8001d9c:	4882      	ldr	r0, [pc, #520]	; (8001fa8 <csvUpdate+0x2e0>)
 8001d9e:	f008 f821 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001da2:	69bb      	ldr	r3, [r7, #24]
 8001da4:	4980      	ldr	r1, [pc, #512]	; (8001fa8 <csvUpdate+0x2e0>)
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fa90 	bl	80012cc <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,", AnIn1, AnIn2, AnIn3, AnIn4, AnIn5, AnIn6, AnIn7, AnIn8);
 8001dac:	4b83      	ldr	r3, [pc, #524]	; (8001fbc <csvUpdate+0x2f4>)
 8001dae:	ed93 7b00 	vldr	d7, [r3]
 8001db2:	ed87 7b00 	vstr	d7, [r7]
 8001db6:	4b82      	ldr	r3, [pc, #520]	; (8001fc0 <csvUpdate+0x2f8>)
 8001db8:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001dbc:	4b81      	ldr	r3, [pc, #516]	; (8001fc4 <csvUpdate+0x2fc>)
 8001dbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001dc2:	4b81      	ldr	r3, [pc, #516]	; (8001fc8 <csvUpdate+0x300>)
 8001dc4:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001dc8:	4b80      	ldr	r3, [pc, #512]	; (8001fcc <csvUpdate+0x304>)
 8001dca:	ed93 7b00 	vldr	d7, [r3]
 8001dce:	4b80      	ldr	r3, [pc, #512]	; (8001fd0 <csvUpdate+0x308>)
 8001dd0:	ed93 6b00 	vldr	d6, [r3]
 8001dd4:	4b7f      	ldr	r3, [pc, #508]	; (8001fd4 <csvUpdate+0x30c>)
 8001dd6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dda:	4b7f      	ldr	r3, [pc, #508]	; (8001fd8 <csvUpdate+0x310>)
 8001ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001de0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001de4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001de8:	ed8d 6b08 	vstr	d6, [sp, #32]
 8001dec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001df0:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001df4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001df8:	e9cd 4500 	strd	r4, r5, [sp]
 8001dfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e00:	4976      	ldr	r1, [pc, #472]	; (8001fdc <csvUpdate+0x314>)
 8001e02:	4869      	ldr	r0, [pc, #420]	; (8001fa8 <csvUpdate+0x2e0>)
 8001e04:	f007 ffee 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	4967      	ldr	r1, [pc, #412]	; (8001fa8 <csvUpdate+0x2e0>)
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fa5d 	bl	80012cc <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,%f,", freq1, freq2, freq3, freq4, batteryVoltage);
 8001e12:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <csvUpdate+0x318>)
 8001e14:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001e18:	4b72      	ldr	r3, [pc, #456]	; (8001fe4 <csvUpdate+0x31c>)
 8001e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e1e:	4972      	ldr	r1, [pc, #456]	; (8001fe8 <csvUpdate+0x320>)
 8001e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e24:	4c71      	ldr	r4, [pc, #452]	; (8001fec <csvUpdate+0x324>)
 8001e26:	e9d4 4500 	ldrd	r4, r5, [r4]
 8001e2a:	4e71      	ldr	r6, [pc, #452]	; (8001ff0 <csvUpdate+0x328>)
 8001e2c:	e9d6 8900 	ldrd	r8, r9, [r6]
 8001e30:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001e34:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001e38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001e3c:	e9cd 2300 	strd	r2, r3, [sp]
 8001e40:	4652      	mov	r2, sl
 8001e42:	465b      	mov	r3, fp
 8001e44:	496b      	ldr	r1, [pc, #428]	; (8001ff4 <csvUpdate+0x32c>)
 8001e46:	4858      	ldr	r0, [pc, #352]	; (8001fa8 <csvUpdate+0x2e0>)
 8001e48:	f007 ffcc 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	4956      	ldr	r1, [pc, #344]	; (8001fa8 <csvUpdate+0x2e0>)
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff fa3b 	bl	80012cc <Update_File>
	sprintf(buffer, "%f,%f,", airTemp, coolantTemp);
 8001e56:	4b68      	ldr	r3, [pc, #416]	; (8001ff8 <csvUpdate+0x330>)
 8001e58:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e5c:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <csvUpdate+0x334>)
 8001e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e62:	e9cd 2300 	strd	r2, r3, [sp]
 8001e66:	4602      	mov	r2, r0
 8001e68:	460b      	mov	r3, r1
 8001e6a:	4965      	ldr	r1, [pc, #404]	; (8002000 <csvUpdate+0x338>)
 8001e6c:	484e      	ldr	r0, [pc, #312]	; (8001fa8 <csvUpdate+0x2e0>)
 8001e6e:	f007 ffb9 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	494c      	ldr	r1, [pc, #304]	; (8001fa8 <csvUpdate+0x2e0>)
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fa28 	bl	80012cc <Update_File>

	sprintf(buffer, "%d,%d,%d,%d,%d,%d,%d,", day, month, year, hour, minute, second, gSpeed);
 8001e7c:	4b61      	ldr	r3, [pc, #388]	; (8002004 <csvUpdate+0x33c>)
 8001e7e:	681d      	ldr	r5, [r3, #0]
 8001e80:	4b61      	ldr	r3, [pc, #388]	; (8002008 <csvUpdate+0x340>)
 8001e82:	681e      	ldr	r6, [r3, #0]
 8001e84:	4b61      	ldr	r3, [pc, #388]	; (800200c <csvUpdate+0x344>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a61      	ldr	r2, [pc, #388]	; (8002010 <csvUpdate+0x348>)
 8001e8a:	6812      	ldr	r2, [r2, #0]
 8001e8c:	4961      	ldr	r1, [pc, #388]	; (8002014 <csvUpdate+0x34c>)
 8001e8e:	6809      	ldr	r1, [r1, #0]
 8001e90:	4861      	ldr	r0, [pc, #388]	; (8002018 <csvUpdate+0x350>)
 8001e92:	6800      	ldr	r0, [r0, #0]
 8001e94:	4c61      	ldr	r4, [pc, #388]	; (800201c <csvUpdate+0x354>)
 8001e96:	6824      	ldr	r4, [r4, #0]
 8001e98:	9404      	str	r4, [sp, #16]
 8001e9a:	9003      	str	r0, [sp, #12]
 8001e9c:	9102      	str	r1, [sp, #8]
 8001e9e:	9201      	str	r2, [sp, #4]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	4633      	mov	r3, r6
 8001ea4:	462a      	mov	r2, r5
 8001ea6:	495e      	ldr	r1, [pc, #376]	; (8002020 <csvUpdate+0x358>)
 8001ea8:	483f      	ldr	r0, [pc, #252]	; (8001fa8 <csvUpdate+0x2e0>)
 8001eaa:	f007 ff9b 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001eae:	69bb      	ldr	r3, [r7, #24]
 8001eb0:	493d      	ldr	r1, [pc, #244]	; (8001fa8 <csvUpdate+0x2e0>)
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff fa0a 	bl	80012cc <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,", latitude, longitude, height_Ellipsoid, height_SeaLvl);
 8001eb8:	4b5a      	ldr	r3, [pc, #360]	; (8002024 <csvUpdate+0x35c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7fe fb73 	bl	80005a8 <__aeabi_f2d>
 8001ec2:	4682      	mov	sl, r0
 8001ec4:	468b      	mov	fp, r1
 8001ec6:	4b58      	ldr	r3, [pc, #352]	; (8002028 <csvUpdate+0x360>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7fe fb6c 	bl	80005a8 <__aeabi_f2d>
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	460d      	mov	r5, r1
 8001ed4:	4b55      	ldr	r3, [pc, #340]	; (800202c <csvUpdate+0x364>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb65 	bl	80005a8 <__aeabi_f2d>
 8001ede:	4680      	mov	r8, r0
 8001ee0:	4689      	mov	r9, r1
 8001ee2:	4b53      	ldr	r3, [pc, #332]	; (8002030 <csvUpdate+0x368>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fb5e 	bl	80005a8 <__aeabi_f2d>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ef4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ef8:	e9cd 4500 	strd	r4, r5, [sp]
 8001efc:	4652      	mov	r2, sl
 8001efe:	465b      	mov	r3, fp
 8001f00:	494c      	ldr	r1, [pc, #304]	; (8002034 <csvUpdate+0x36c>)
 8001f02:	4829      	ldr	r0, [pc, #164]	; (8001fa8 <csvUpdate+0x2e0>)
 8001f04:	f007 ff6e 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	4927      	ldr	r1, [pc, #156]	; (8001fa8 <csvUpdate+0x2e0>)
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff f9dd 	bl	80012cc <Update_File>

	sprintf(buffer, "%d,%d,%d,%d,", damperT_Sense_FL, damperT_Sense_FR, damperT_Sense_RL, damperT_Sense_RR);
 8001f12:	4b49      	ldr	r3, [pc, #292]	; (8002038 <csvUpdate+0x370>)
 8001f14:	6819      	ldr	r1, [r3, #0]
 8001f16:	4b49      	ldr	r3, [pc, #292]	; (800203c <csvUpdate+0x374>)
 8001f18:	6818      	ldr	r0, [r3, #0]
 8001f1a:	4b49      	ldr	r3, [pc, #292]	; (8002040 <csvUpdate+0x378>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a49      	ldr	r2, [pc, #292]	; (8002044 <csvUpdate+0x37c>)
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	9201      	str	r2, [sp, #4]
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	4603      	mov	r3, r0
 8001f28:	460a      	mov	r2, r1
 8001f2a:	4947      	ldr	r1, [pc, #284]	; (8002048 <csvUpdate+0x380>)
 8001f2c:	481e      	ldr	r0, [pc, #120]	; (8001fa8 <csvUpdate+0x2e0>)
 8001f2e:	f007 ff59 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	491c      	ldr	r1, [pc, #112]	; (8001fa8 <csvUpdate+0x2e0>)
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7ff f9c8 	bl	80012cc <Update_File>

	sprintf(buffer, "%d,%d,%d,", steeringA_Sense, brakeP_Sense1, brakeP_Sense2);
 8001f3c:	4b43      	ldr	r3, [pc, #268]	; (800204c <csvUpdate+0x384>)
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	4b43      	ldr	r3, [pc, #268]	; (8002050 <csvUpdate+0x388>)
 8001f42:	6819      	ldr	r1, [r3, #0]
 8001f44:	4b43      	ldr	r3, [pc, #268]	; (8002054 <csvUpdate+0x38c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	460b      	mov	r3, r1
 8001f4c:	4942      	ldr	r1, [pc, #264]	; (8002058 <csvUpdate+0x390>)
 8001f4e:	4816      	ldr	r0, [pc, #88]	; (8001fa8 <csvUpdate+0x2e0>)
 8001f50:	f007 ff48 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	4914      	ldr	r1, [pc, #80]	; (8001fa8 <csvUpdate+0x2e0>)
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff f9b7 	bl	80012cc <Update_File>

	sprintf(buffer, "%f,%f,%f,%f,%f,%f", x_LS, y_LS, z_LS, roll_LS, pitch_LS, yaw_LS);
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	; (800205c <csvUpdate+0x394>)
 8001f60:	ed93 7b00 	vldr	d7, [r3]
 8001f64:	ed87 7b00 	vstr	d7, [r7]
 8001f68:	4b3d      	ldr	r3, [pc, #244]	; (8002060 <csvUpdate+0x398>)
 8001f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6e:	493d      	ldr	r1, [pc, #244]	; (8002064 <csvUpdate+0x39c>)
 8001f70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001f74:	4c3c      	ldr	r4, [pc, #240]	; (8002068 <csvUpdate+0x3a0>)
 8001f76:	e9d4 4500 	ldrd	r4, r5, [r4]
 8001f7a:	4e3c      	ldr	r6, [pc, #240]	; (800206c <csvUpdate+0x3a4>)
 8001f7c:	e9d6 8900 	ldrd	r8, r9, [r6]
 8001f80:	4e3b      	ldr	r6, [pc, #236]	; (8002070 <csvUpdate+0x3a8>)
 8001f82:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8001f86:	e075      	b.n	8002074 <csvUpdate+0x3ac>
 8001f88:	0800c4dc 	.word	0x0800c4dc
 8001f8c:	20000674 	.word	0x20000674
 8001f90:	200002d0 	.word	0x200002d0
 8001f94:	200001fc 	.word	0x200001fc
 8001f98:	20000200 	.word	0x20000200
 8001f9c:	20000208 	.word	0x20000208
 8001fa0:	20000210 	.word	0x20000210
 8001fa4:	0800c8ac 	.word	0x0800c8ac
 8001fa8:	200008e8 	.word	0x200008e8
 8001fac:	20000218 	.word	0x20000218
 8001fb0:	20000220 	.word	0x20000220
 8001fb4:	20000228 	.word	0x20000228
 8001fb8:	0800c8c0 	.word	0x0800c8c0
 8001fbc:	20000230 	.word	0x20000230
 8001fc0:	20000238 	.word	0x20000238
 8001fc4:	20000240 	.word	0x20000240
 8001fc8:	20000248 	.word	0x20000248
 8001fcc:	20000250 	.word	0x20000250
 8001fd0:	20000258 	.word	0x20000258
 8001fd4:	20000260 	.word	0x20000260
 8001fd8:	20000268 	.word	0x20000268
 8001fdc:	0800c8cc 	.word	0x0800c8cc
 8001fe0:	20000270 	.word	0x20000270
 8001fe4:	20000278 	.word	0x20000278
 8001fe8:	20000280 	.word	0x20000280
 8001fec:	20000288 	.word	0x20000288
 8001ff0:	20000290 	.word	0x20000290
 8001ff4:	0800c8e8 	.word	0x0800c8e8
 8001ff8:	20000298 	.word	0x20000298
 8001ffc:	200002a0 	.word	0x200002a0
 8002000:	0800c8f8 	.word	0x0800c8f8
 8002004:	20000a28 	.word	0x20000a28
 8002008:	200008d8 	.word	0x200008d8
 800200c:	20000a1c 	.word	0x20000a1c
 8002010:	20000974 	.word	0x20000974
 8002014:	200008e4 	.word	0x200008e4
 8002018:	200008dc 	.word	0x200008dc
 800201c:	200008e0 	.word	0x200008e0
 8002020:	0800c900 	.word	0x0800c900
 8002024:	20000a24 	.word	0x20000a24
 8002028:	20000978 	.word	0x20000978
 800202c:	200008bc 	.word	0x200008bc
 8002030:	2000094c 	.word	0x2000094c
 8002034:	0800c918 	.word	0x0800c918
 8002038:	200002a8 	.word	0x200002a8
 800203c:	200002ac 	.word	0x200002ac
 8002040:	200002b0 	.word	0x200002b0
 8002044:	200002b4 	.word	0x200002b4
 8002048:	0800c928 	.word	0x0800c928
 800204c:	200002b8 	.word	0x200002b8
 8002050:	200002bc 	.word	0x200002bc
 8002054:	200002c0 	.word	0x200002c0
 8002058:	0800c938 	.word	0x0800c938
 800205c:	20000980 	.word	0x20000980
 8002060:	20000a10 	.word	0x20000a10
 8002064:	200008b0 	.word	0x200008b0
 8002068:	20000a30 	.word	0x20000a30
 800206c:	20000950 	.word	0x20000950
 8002070:	20000968 	.word	0x20000968
 8002074:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8002078:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800207c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8002080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002084:	e9cd 2300 	strd	r2, r3, [sp]
 8002088:	e9d7 2300 	ldrd	r2, r3, [r7]
 800208c:	4912      	ldr	r1, [pc, #72]	; (80020d8 <csvUpdate+0x410>)
 800208e:	4813      	ldr	r0, [pc, #76]	; (80020dc <csvUpdate+0x414>)
 8002090:	f007 fea8 	bl	8009de4 <siprintf>
	Update_File(name, buffer);
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	4911      	ldr	r1, [pc, #68]	; (80020dc <csvUpdate+0x414>)
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff f917 	bl	80012cc <Update_File>

	sprintf(buffer, "\n\n");
 800209e:	4910      	ldr	r1, [pc, #64]	; (80020e0 <csvUpdate+0x418>)
 80020a0:	480e      	ldr	r0, [pc, #56]	; (80020dc <csvUpdate+0x414>)
 80020a2:	f007 fe9f 	bl	8009de4 <siprintf>
	fresult = Update_File(name, buffer);
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	490c      	ldr	r1, [pc, #48]	; (80020dc <csvUpdate+0x414>)
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7ff f90e 	bl	80012cc <Update_File>
 80020b0:	4603      	mov	r3, r0
 80020b2:	461a      	mov	r2, r3
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <csvUpdate+0x41c>)
 80020b6:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 80020b8:	4b0a      	ldr	r3, [pc, #40]	; (80020e4 <csvUpdate+0x41c>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	4618      	mov	r0, r3
 80020be:	f7ff fcdf 	bl	8001a80 <SD_Check>


	Unmount_SD("/");
 80020c2:	4809      	ldr	r0, [pc, #36]	; (80020e8 <csvUpdate+0x420>)
 80020c4:	f7fe ffca 	bl	800105c <Unmount_SD>
 80020c8:	f8d7 d00c 	ldr.w	sp, [r7, #12]
}
 80020cc:	bf00      	nop
 80020ce:	3724      	adds	r7, #36	; 0x24
 80020d0:	46bd      	mov	sp, r7
 80020d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020d6:	bf00      	nop
 80020d8:	0800c944 	.word	0x0800c944
 80020dc:	200008e8 	.word	0x200008e8
 80020e0:	0800c958 	.word	0x0800c958
 80020e4:	20000674 	.word	0x20000674
 80020e8:	0800c4dc 	.word	0x0800c4dc

080020ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
	...

080020fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <HAL_MspInit+0x4c>)
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	4a0f      	ldr	r2, [pc, #60]	; (8002148 <HAL_MspInit+0x4c>)
 800210c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002110:	6453      	str	r3, [r2, #68]	; 0x44
 8002112:	4b0d      	ldr	r3, [pc, #52]	; (8002148 <HAL_MspInit+0x4c>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211a:	607b      	str	r3, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	603b      	str	r3, [r7, #0]
 8002122:	4b09      	ldr	r3, [pc, #36]	; (8002148 <HAL_MspInit+0x4c>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	4a08      	ldr	r2, [pc, #32]	; (8002148 <HAL_MspInit+0x4c>)
 8002128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800212c:	6413      	str	r3, [r2, #64]	; 0x40
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_MspInit+0x4c>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002136:	603b      	str	r3, [r7, #0]
 8002138:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800213a:	2007      	movs	r0, #7
 800213c:	f000 face 	bl	80026dc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40023800 	.word	0x40023800

0800214c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b08a      	sub	sp, #40	; 0x28
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002154:	f107 0314 	add.w	r3, r7, #20
 8002158:	2200      	movs	r2, #0
 800215a:	601a      	str	r2, [r3, #0]
 800215c:	605a      	str	r2, [r3, #4]
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	60da      	str	r2, [r3, #12]
 8002162:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a28      	ldr	r2, [pc, #160]	; (800220c <HAL_SD_MspInit+0xc0>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d14a      	bne.n	8002204 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	613b      	str	r3, [r7, #16]
 8002172:	4b27      	ldr	r3, [pc, #156]	; (8002210 <HAL_SD_MspInit+0xc4>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002176:	4a26      	ldr	r2, [pc, #152]	; (8002210 <HAL_SD_MspInit+0xc4>)
 8002178:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800217c:	6453      	str	r3, [r2, #68]	; 0x44
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <HAL_SD_MspInit+0xc4>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002186:	613b      	str	r3, [r7, #16]
 8002188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b20      	ldr	r3, [pc, #128]	; (8002210 <HAL_SD_MspInit+0xc4>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002192:	4a1f      	ldr	r2, [pc, #124]	; (8002210 <HAL_SD_MspInit+0xc4>)
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	6313      	str	r3, [r2, #48]	; 0x30
 800219a:	4b1d      	ldr	r3, [pc, #116]	; (8002210 <HAL_SD_MspInit+0xc4>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021a6:	2300      	movs	r3, #0
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <HAL_SD_MspInit+0xc4>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	4a18      	ldr	r2, [pc, #96]	; (8002210 <HAL_SD_MspInit+0xc4>)
 80021b0:	f043 0308 	orr.w	r3, r3, #8
 80021b4:	6313      	str	r3, [r2, #48]	; 0x30
 80021b6:	4b16      	ldr	r3, [pc, #88]	; (8002210 <HAL_SD_MspInit+0xc4>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	f003 0308 	and.w	r3, r3, #8
 80021be:	60bb      	str	r3, [r7, #8]
 80021c0:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80021c2:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80021c6:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c8:	2302      	movs	r3, #2
 80021ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d0:	2303      	movs	r3, #3
 80021d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80021d4:	230c      	movs	r3, #12
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d8:	f107 0314 	add.w	r3, r7, #20
 80021dc:	4619      	mov	r1, r3
 80021de:	480d      	ldr	r0, [pc, #52]	; (8002214 <HAL_SD_MspInit+0xc8>)
 80021e0:	f000 fab0 	bl	8002744 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021e4:	2304      	movs	r3, #4
 80021e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e8:	2302      	movs	r3, #2
 80021ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ec:	2300      	movs	r3, #0
 80021ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f0:	2303      	movs	r3, #3
 80021f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80021f4:	230c      	movs	r3, #12
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4619      	mov	r1, r3
 80021fe:	4806      	ldr	r0, [pc, #24]	; (8002218 <HAL_SD_MspInit+0xcc>)
 8002200:	f000 faa0 	bl	8002744 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002204:	bf00      	nop
 8002206:	3728      	adds	r7, #40	; 0x28
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	40012c00 	.word	0x40012c00
 8002210:	40023800 	.word	0x40023800
 8002214:	40020800 	.word	0x40020800
 8002218:	40020c00 	.word	0x40020c00

0800221c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800222e:	e7fe      	b.n	800222e <HardFault_Handler+0x4>

08002230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002234:	e7fe      	b.n	8002234 <MemManage_Handler+0x4>

08002236 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002236:	b480      	push	{r7}
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223a:	e7fe      	b.n	800223a <BusFault_Handler+0x4>

0800223c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002240:	e7fe      	b.n	8002240 <UsageFault_Handler+0x4>

08002242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002242:	b480      	push	{r7}
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002246:	bf00      	nop
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr

08002250 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002254:	bf00      	nop
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr

0800225e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002270:	f000 f93e 	bl	80024f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	bd80      	pop	{r7, pc}

08002278 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002278:	b480      	push	{r7}
 800227a:	af00      	add	r7, sp, #0
	return 1;
 800227c:	2301      	movs	r3, #1
}
 800227e:	4618      	mov	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <_kill>:

int _kill(int pid, int sig)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002292:	f006 ff7f 	bl	8009194 <__errno>
 8002296:	4603      	mov	r3, r0
 8002298:	2216      	movs	r2, #22
 800229a:	601a      	str	r2, [r3, #0]
	return -1;
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3708      	adds	r7, #8
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <_exit>:

void _exit (int status)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b082      	sub	sp, #8
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80022b0:	f04f 31ff 	mov.w	r1, #4294967295
 80022b4:	6878      	ldr	r0, [r7, #4]
 80022b6:	f7ff ffe7 	bl	8002288 <_kill>
	while (1) {}		/* Make sure we hang here */
 80022ba:	e7fe      	b.n	80022ba <_exit+0x12>

080022bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	e00a      	b.n	80022e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80022ce:	f3af 8000 	nop.w
 80022d2:	4601      	mov	r1, r0
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	60ba      	str	r2, [r7, #8]
 80022da:	b2ca      	uxtb	r2, r1
 80022dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3301      	adds	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	dbf0      	blt.n	80022ce <_read+0x12>
	}

return len;
 80022ec:	687b      	ldr	r3, [r7, #4]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
	return -1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800231e:	605a      	str	r2, [r3, #4]
	return 0;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_isatty>:

int _isatty(int file)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
	return 1;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
	return 0;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002368:	4a14      	ldr	r2, [pc, #80]	; (80023bc <_sbrk+0x5c>)
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <_sbrk+0x60>)
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002374:	4b13      	ldr	r3, [pc, #76]	; (80023c4 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800237c:	4b11      	ldr	r3, [pc, #68]	; (80023c4 <_sbrk+0x64>)
 800237e:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <_sbrk+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	429a      	cmp	r2, r3
 800238e:	d207      	bcs.n	80023a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002390:	f006 ff00 	bl	8009194 <__errno>
 8002394:	4603      	mov	r3, r0
 8002396:	220c      	movs	r2, #12
 8002398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	e009      	b.n	80023b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a0:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a6:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	4a05      	ldr	r2, [pc, #20]	; (80023c4 <_sbrk+0x64>)
 80023b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20020000 	.word	0x20020000
 80023c0:	00000400 	.word	0x00000400
 80023c4:	200002d4 	.word	0x200002d4
 80023c8:	20000ef0 	.word	0x20000ef0

080023cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <SystemInit+0x28>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <SystemInit+0x28>)
 80023d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <SystemInit+0x28>)
 80023e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023e6:	609a      	str	r2, [r3, #8]
#endif
}
 80023e8:	bf00      	nop
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	e000ed00 	.word	0xe000ed00

080023f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002430 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023fe:	e003      	b.n	8002408 <LoopCopyDataInit>

08002400 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002400:	4b0c      	ldr	r3, [pc, #48]	; (8002434 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002402:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002404:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002406:	3104      	adds	r1, #4

08002408 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002408:	480b      	ldr	r0, [pc, #44]	; (8002438 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800240a:	4b0c      	ldr	r3, [pc, #48]	; (800243c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800240c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800240e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002410:	d3f6      	bcc.n	8002400 <CopyDataInit>
  ldr  r2, =_sbss
 8002412:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002414:	e002      	b.n	800241c <LoopFillZerobss>

08002416 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002416:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002418:	f842 3b04 	str.w	r3, [r2], #4

0800241c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800241e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002420:	d3f9      	bcc.n	8002416 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002422:	f7ff ffd3 	bl	80023cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002426:	f006 febb 	bl	80091a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800242a:	f7ff f86b 	bl	8001504 <main>
  bx  lr    
 800242e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002430:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002434:	080141c4 	.word	0x080141c4
  ldr  r0, =_sdata
 8002438:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800243c:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8002440:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002444:	20000eec 	.word	0x20000eec

08002448 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002448:	e7fe      	b.n	8002448 <ADC_IRQHandler>
	...

0800244c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002450:	4b0e      	ldr	r3, [pc, #56]	; (800248c <HAL_Init+0x40>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0d      	ldr	r2, [pc, #52]	; (800248c <HAL_Init+0x40>)
 8002456:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800245a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800245c:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_Init+0x40>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0a      	ldr	r2, [pc, #40]	; (800248c <HAL_Init+0x40>)
 8002462:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002466:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002468:	4b08      	ldr	r3, [pc, #32]	; (800248c <HAL_Init+0x40>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a07      	ldr	r2, [pc, #28]	; (800248c <HAL_Init+0x40>)
 800246e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002472:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002474:	2003      	movs	r0, #3
 8002476:	f000 f931 	bl	80026dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800247a:	2000      	movs	r0, #0
 800247c:	f000 f808 	bl	8002490 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002480:	f7ff fe3c 	bl	80020fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002484:	2300      	movs	r3, #0
}
 8002486:	4618      	mov	r0, r3
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	40023c00 	.word	0x40023c00

08002490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002498:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <HAL_InitTick+0x54>)
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	4b12      	ldr	r3, [pc, #72]	; (80024e8 <HAL_InitTick+0x58>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4619      	mov	r1, r3
 80024a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ae:	4618      	mov	r0, r3
 80024b0:	f000 f93b 	bl	800272a <HAL_SYSTICK_Config>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00e      	b.n	80024dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2b0f      	cmp	r3, #15
 80024c2:	d80a      	bhi.n	80024da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024c4:	2200      	movs	r2, #0
 80024c6:	6879      	ldr	r1, [r7, #4]
 80024c8:	f04f 30ff 	mov.w	r0, #4294967295
 80024cc:	f000 f911 	bl	80026f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024d0:	4a06      	ldr	r2, [pc, #24]	; (80024ec <HAL_InitTick+0x5c>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e000      	b.n	80024dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	20000004 	.word	0x20000004
 80024e8:	2000000c 	.word	0x2000000c
 80024ec:	20000008 	.word	0x20000008

080024f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024f4:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_IncTick+0x20>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	461a      	mov	r2, r3
 80024fa:	4b06      	ldr	r3, [pc, #24]	; (8002514 <HAL_IncTick+0x24>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4413      	add	r3, r2
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <HAL_IncTick+0x24>)
 8002502:	6013      	str	r3, [r2, #0]
}
 8002504:	bf00      	nop
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	2000000c 	.word	0x2000000c
 8002514:	20000a6c 	.word	0x20000a6c

08002518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
  return uwTick;
 800251c:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_GetTick+0x14>)
 800251e:	681b      	ldr	r3, [r3, #0]
}
 8002520:	4618      	mov	r0, r3
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000a6c 	.word	0x20000a6c

08002530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002538:	f7ff ffee 	bl	8002518 <HAL_GetTick>
 800253c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002548:	d005      	beq.n	8002556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_Delay+0x44>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	461a      	mov	r2, r3
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4413      	add	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002556:	bf00      	nop
 8002558:	f7ff ffde 	bl	8002518 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	68fa      	ldr	r2, [r7, #12]
 8002564:	429a      	cmp	r2, r3
 8002566:	d8f7      	bhi.n	8002558 <HAL_Delay+0x28>
  {
  }
}
 8002568:	bf00      	nop
 800256a:	bf00      	nop
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	2000000c 	.word	0x2000000c

08002578 <__NVIC_SetPriorityGrouping>:
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002588:	4b0c      	ldr	r3, [pc, #48]	; (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002594:	4013      	ands	r3, r2
 8002596:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025aa:	4a04      	ldr	r2, [pc, #16]	; (80025bc <__NVIC_SetPriorityGrouping+0x44>)
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60d3      	str	r3, [r2, #12]
}
 80025b0:	bf00      	nop
 80025b2:	3714      	adds	r7, #20
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	e000ed00 	.word	0xe000ed00

080025c0 <__NVIC_GetPriorityGrouping>:
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025c4:	4b04      	ldr	r3, [pc, #16]	; (80025d8 <__NVIC_GetPriorityGrouping+0x18>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	0a1b      	lsrs	r3, r3, #8
 80025ca:	f003 0307 	and.w	r3, r3, #7
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr
 80025d8:	e000ed00 	.word	0xe000ed00

080025dc <__NVIC_SetPriority>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	db0a      	blt.n	8002606 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	490c      	ldr	r1, [pc, #48]	; (8002628 <__NVIC_SetPriority+0x4c>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	440b      	add	r3, r1
 8002600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002604:	e00a      	b.n	800261c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4908      	ldr	r1, [pc, #32]	; (800262c <__NVIC_SetPriority+0x50>)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	3b04      	subs	r3, #4
 8002614:	0112      	lsls	r2, r2, #4
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	440b      	add	r3, r1
 800261a:	761a      	strb	r2, [r3, #24]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr
 8002628:	e000e100 	.word	0xe000e100
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <NVIC_EncodePriority>:
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	; 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f1c3 0307 	rsb	r3, r3, #7
 800264a:	2b04      	cmp	r3, #4
 800264c:	bf28      	it	cs
 800264e:	2304      	movcs	r3, #4
 8002650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3304      	adds	r3, #4
 8002656:	2b06      	cmp	r3, #6
 8002658:	d902      	bls.n	8002660 <NVIC_EncodePriority+0x30>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3b03      	subs	r3, #3
 800265e:	e000      	b.n	8002662 <NVIC_EncodePriority+0x32>
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002678:	f04f 31ff 	mov.w	r1, #4294967295
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	43d9      	mvns	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	4313      	orrs	r3, r2
}
 800268a:	4618      	mov	r0, r3
 800268c:	3724      	adds	r7, #36	; 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <SysTick_Config>:
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a8:	d301      	bcc.n	80026ae <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00f      	b.n	80026ce <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ae:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <SysTick_Config+0x40>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b6:	210f      	movs	r1, #15
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	f7ff ff8e 	bl	80025dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <SysTick_Config+0x40>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c6:	4b04      	ldr	r3, [pc, #16]	; (80026d8 <SysTick_Config+0x40>)
 80026c8:	2207      	movs	r2, #7
 80026ca:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	e000e010 	.word	0xe000e010

080026dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f7ff ff47 	bl	8002578 <__NVIC_SetPriorityGrouping>
}
 80026ea:	bf00      	nop
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}

080026f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026f2:	b580      	push	{r7, lr}
 80026f4:	b086      	sub	sp, #24
 80026f6:	af00      	add	r7, sp, #0
 80026f8:	4603      	mov	r3, r0
 80026fa:	60b9      	str	r1, [r7, #8]
 80026fc:	607a      	str	r2, [r7, #4]
 80026fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002700:	2300      	movs	r3, #0
 8002702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002704:	f7ff ff5c 	bl	80025c0 <__NVIC_GetPriorityGrouping>
 8002708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800270a:	687a      	ldr	r2, [r7, #4]
 800270c:	68b9      	ldr	r1, [r7, #8]
 800270e:	6978      	ldr	r0, [r7, #20]
 8002710:	f7ff ff8e 	bl	8002630 <NVIC_EncodePriority>
 8002714:	4602      	mov	r2, r0
 8002716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800271a:	4611      	mov	r1, r2
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff5d 	bl	80025dc <__NVIC_SetPriority>
}
 8002722:	bf00      	nop
 8002724:	3718      	adds	r7, #24
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ffb0 	bl	8002698 <SysTick_Config>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002744:	b480      	push	{r7}
 8002746:	b089      	sub	sp, #36	; 0x24
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800274e:	2300      	movs	r3, #0
 8002750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002752:	2300      	movs	r3, #0
 8002754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002756:	2300      	movs	r3, #0
 8002758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	e165      	b.n	8002a2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002760:	2201      	movs	r2, #1
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	697a      	ldr	r2, [r7, #20]
 8002770:	4013      	ands	r3, r2
 8002772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	697b      	ldr	r3, [r7, #20]
 8002778:	429a      	cmp	r2, r3
 800277a:	f040 8154 	bne.w	8002a26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 0303 	and.w	r3, r3, #3
 8002786:	2b01      	cmp	r3, #1
 8002788:	d005      	beq.n	8002796 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002792:	2b02      	cmp	r3, #2
 8002794:	d130      	bne.n	80027f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	2203      	movs	r2, #3
 80027a2:	fa02 f303 	lsl.w	r3, r2, r3
 80027a6:	43db      	mvns	r3, r3
 80027a8:	69ba      	ldr	r2, [r7, #24]
 80027aa:	4013      	ands	r3, r2
 80027ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68da      	ldr	r2, [r3, #12]
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	69ba      	ldr	r2, [r7, #24]
 80027bc:	4313      	orrs	r3, r2
 80027be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027cc:	2201      	movs	r2, #1
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	fa02 f303 	lsl.w	r3, r2, r3
 80027d4:	43db      	mvns	r3, r3
 80027d6:	69ba      	ldr	r2, [r7, #24]
 80027d8:	4013      	ands	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 0201 	and.w	r2, r3, #1
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	f003 0303 	and.w	r3, r3, #3
 8002800:	2b03      	cmp	r3, #3
 8002802:	d017      	beq.n	8002834 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	2203      	movs	r2, #3
 8002810:	fa02 f303 	lsl.w	r3, r2, r3
 8002814:	43db      	mvns	r3, r3
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4013      	ands	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	005b      	lsls	r3, r3, #1
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4313      	orrs	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	2b02      	cmp	r3, #2
 800283e:	d123      	bne.n	8002888 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	08da      	lsrs	r2, r3, #3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	3208      	adds	r2, #8
 8002848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800284c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	220f      	movs	r2, #15
 8002858:	fa02 f303 	lsl.w	r3, r2, r3
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691a      	ldr	r2, [r3, #16]
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	08da      	lsrs	r2, r3, #3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	3208      	adds	r2, #8
 8002882:	69b9      	ldr	r1, [r7, #24]
 8002884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	2203      	movs	r2, #3
 8002894:	fa02 f303 	lsl.w	r3, r2, r3
 8002898:	43db      	mvns	r3, r3
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	4013      	ands	r3, r2
 800289e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0203 	and.w	r2, r3, #3
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69ba      	ldr	r2, [r7, #24]
 80028ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	f000 80ae 	beq.w	8002a26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ca:	2300      	movs	r3, #0
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	4b5d      	ldr	r3, [pc, #372]	; (8002a44 <HAL_GPIO_Init+0x300>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	4a5c      	ldr	r2, [pc, #368]	; (8002a44 <HAL_GPIO_Init+0x300>)
 80028d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028d8:	6453      	str	r3, [r2, #68]	; 0x44
 80028da:	4b5a      	ldr	r3, [pc, #360]	; (8002a44 <HAL_GPIO_Init+0x300>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028e2:	60fb      	str	r3, [r7, #12]
 80028e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028e6:	4a58      	ldr	r2, [pc, #352]	; (8002a48 <HAL_GPIO_Init+0x304>)
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	089b      	lsrs	r3, r3, #2
 80028ec:	3302      	adds	r3, #2
 80028ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	220f      	movs	r2, #15
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	43db      	mvns	r3, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4013      	ands	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a4f      	ldr	r2, [pc, #316]	; (8002a4c <HAL_GPIO_Init+0x308>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d025      	beq.n	800295e <HAL_GPIO_Init+0x21a>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4e      	ldr	r2, [pc, #312]	; (8002a50 <HAL_GPIO_Init+0x30c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01f      	beq.n	800295a <HAL_GPIO_Init+0x216>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4d      	ldr	r2, [pc, #308]	; (8002a54 <HAL_GPIO_Init+0x310>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d019      	beq.n	8002956 <HAL_GPIO_Init+0x212>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4c      	ldr	r2, [pc, #304]	; (8002a58 <HAL_GPIO_Init+0x314>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d013      	beq.n	8002952 <HAL_GPIO_Init+0x20e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4b      	ldr	r2, [pc, #300]	; (8002a5c <HAL_GPIO_Init+0x318>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00d      	beq.n	800294e <HAL_GPIO_Init+0x20a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4a      	ldr	r2, [pc, #296]	; (8002a60 <HAL_GPIO_Init+0x31c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d007      	beq.n	800294a <HAL_GPIO_Init+0x206>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a49      	ldr	r2, [pc, #292]	; (8002a64 <HAL_GPIO_Init+0x320>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d101      	bne.n	8002946 <HAL_GPIO_Init+0x202>
 8002942:	2306      	movs	r3, #6
 8002944:	e00c      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 8002946:	2307      	movs	r3, #7
 8002948:	e00a      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 800294a:	2305      	movs	r3, #5
 800294c:	e008      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 800294e:	2304      	movs	r3, #4
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 8002952:	2303      	movs	r3, #3
 8002954:	e004      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 8002956:	2302      	movs	r3, #2
 8002958:	e002      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_GPIO_Init+0x21c>
 800295e:	2300      	movs	r3, #0
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	f002 0203 	and.w	r2, r2, #3
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	4093      	lsls	r3, r2
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002970:	4935      	ldr	r1, [pc, #212]	; (8002a48 <HAL_GPIO_Init+0x304>)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800297e:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <HAL_GPIO_Init+0x324>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029a2:	4a31      	ldr	r2, [pc, #196]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029a8:	4b2f      	ldr	r3, [pc, #188]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029cc:	4a26      	ldr	r2, [pc, #152]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029d2:	4b25      	ldr	r3, [pc, #148]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029f6:	4a1c      	ldr	r2, [pc, #112]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_GPIO_Init+0x324>)
 80029fe:	68db      	ldr	r3, [r3, #12]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a20:	4a11      	ldr	r2, [pc, #68]	; (8002a68 <HAL_GPIO_Init+0x324>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	f67f ae96 	bls.w	8002760 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3724      	adds	r7, #36	; 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40020000 	.word	0x40020000
 8002a50:	40020400 	.word	0x40020400
 8002a54:	40020800 	.word	0x40020800
 8002a58:	40020c00 	.word	0x40020c00
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40021400 	.word	0x40021400
 8002a64:	40021800 	.word	0x40021800
 8002a68:	40013c00 	.word	0x40013c00

08002a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	887b      	ldrh	r3, [r7, #2]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d002      	beq.n	8002a8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a84:	2301      	movs	r3, #1
 8002a86:	73fb      	strb	r3, [r7, #15]
 8002a88:	e001      	b.n	8002a8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3714      	adds	r7, #20
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	807b      	strh	r3, [r7, #2]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002aac:	787b      	ldrb	r3, [r7, #1]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ab2:	887a      	ldrh	r2, [r7, #2]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ab8:	e003      	b.n	8002ac2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aba:	887b      	ldrh	r3, [r7, #2]
 8002abc:	041a      	lsls	r2, r3, #16
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	619a      	str	r2, [r3, #24]
}
 8002ac2:	bf00      	nop
 8002ac4:	370c      	adds	r7, #12
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
	...

08002ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0cc      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b68      	ldr	r3, [pc, #416]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d90c      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b65      	ldr	r3, [pc, #404]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002af4:	683a      	ldr	r2, [r7, #0]
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b63      	ldr	r3, [pc, #396]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0b8      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b24:	4b59      	ldr	r3, [pc, #356]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	4a58      	ldr	r2, [pc, #352]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b3c:	4b53      	ldr	r3, [pc, #332]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	4a52      	ldr	r2, [pc, #328]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b48:	4b50      	ldr	r3, [pc, #320]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	494d      	ldr	r1, [pc, #308]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d044      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b47      	ldr	r3, [pc, #284]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d119      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e07f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d003      	beq.n	8002b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8a:	2b03      	cmp	r3, #3
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	4b3f      	ldr	r3, [pc, #252]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e06f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	4b3b      	ldr	r3, [pc, #236]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e067      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bae:	4b37      	ldr	r3, [pc, #220]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4934      	ldr	r1, [pc, #208]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc0:	f7ff fcaa 	bl	8002518 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7ff fca6 	bl	8002518 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e04f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	4b2b      	ldr	r3, [pc, #172]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f003 020c 	and.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1eb      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b25      	ldr	r3, [pc, #148]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 030f 	and.w	r3, r3, #15
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d20c      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b22      	ldr	r3, [pc, #136]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002c00:	683a      	ldr	r2, [r7, #0]
 8002c02:	b2d2      	uxtb	r2, r2
 8002c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b20      	ldr	r3, [pc, #128]	; (8002c88 <HAL_RCC_ClockConfig+0x1b8>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e032      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c24:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4916      	ldr	r1, [pc, #88]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	490e      	ldr	r1, [pc, #56]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c56:	f000 fb4b 	bl	80032f0 <HAL_RCC_GetSysClockFreq>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	; (8002c8c <HAL_RCC_ClockConfig+0x1bc>)
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	490a      	ldr	r1, [pc, #40]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c68:	5ccb      	ldrb	r3, [r1, r3]
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	4a09      	ldr	r2, [pc, #36]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c72:	4b09      	ldr	r3, [pc, #36]	; (8002c98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7ff fc0a 	bl	8002490 <HAL_InitTick>

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40023c00 	.word	0x40023c00
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	08013d1c 	.word	0x08013d1c
 8002c94:	20000004 	.word	0x20000004
 8002c98:	20000008 	.word	0x20000008

08002c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b08c      	sub	sp, #48	; 0x30
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d010      	beq.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002cd4:	4b6f      	ldr	r3, [pc, #444]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cda:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	496c      	ldr	r1, [pc, #432]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f003 0302 	and.w	r3, r3, #2
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d010      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002d02:	4b64      	ldr	r3, [pc, #400]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d08:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	4960      	ldr	r1, [pc, #384]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002d20:	2301      	movs	r3, #1
 8002d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d017      	beq.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d30:	4b58      	ldr	r3, [pc, #352]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d36:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	4955      	ldr	r1, [pc, #340]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d4e:	d101      	bne.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002d50:	2301      	movs	r3, #1
 8002d52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d101      	bne.n	8002d60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d017      	beq.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d6c:	4b49      	ldr	r3, [pc, #292]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d7a:	4946      	ldr	r1, [pc, #280]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d101      	bne.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 808a 	beq.w	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	4b39      	ldr	r3, [pc, #228]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	4a38      	ldr	r2, [pc, #224]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dba:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc2:	60bb      	str	r3, [r7, #8]
 8002dc4:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002dc6:	4b34      	ldr	r3, [pc, #208]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a33      	ldr	r2, [pc, #204]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dd0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002dd2:	f7ff fba1 	bl	8002518 <HAL_GetTick>
 8002dd6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002dd8:	e008      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002dda:	f7ff fb9d 	bl	8002518 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	d901      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002de8:	2303      	movs	r3, #3
 8002dea:	e278      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002dec:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d0f0      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002df8:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e00:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d02f      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e10:	6a3a      	ldr	r2, [r7, #32]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d028      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e16:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e1e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e20:	4b1e      	ldr	r3, [pc, #120]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002e2c:	4a19      	ldr	r2, [pc, #100]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e32:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d114      	bne.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002e3e:	f7ff fb6b 	bl	8002518 <HAL_GetTick>
 8002e42:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e44:	e00a      	b.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7ff fb67 	bl	8002518 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d901      	bls.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	e240      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	f003 0302 	and.w	r3, r3, #2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0ee      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e74:	d114      	bne.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002e76:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e78:	689b      	ldr	r3, [r3, #8]
 8002e7a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e8a:	4902      	ldr	r1, [pc, #8]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	608b      	str	r3, [r1, #8]
 8002e90:	e00c      	b.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002e92:	bf00      	nop
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40007000 	.word	0x40007000
 8002e9c:	42470e40 	.word	0x42470e40
 8002ea0:	4b4a      	ldr	r3, [pc, #296]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a49      	ldr	r2, [pc, #292]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ea6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002eaa:	6093      	str	r3, [r2, #8]
 8002eac:	4b47      	ldr	r3, [pc, #284]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb8:	4944      	ldr	r1, [pc, #272]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d004      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002ed0:	4b3f      	ldr	r3, [pc, #252]	; (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002ed2:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00a      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002ee0:	4b3a      	ldr	r3, [pc, #232]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ee2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eee:	4937      	ldr	r1, [pc, #220]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d00a      	beq.n	8002f18 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f02:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f08:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f10:	492e      	ldr	r1, [pc, #184]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d011      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f24:	4b29      	ldr	r3, [pc, #164]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f2a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f32:	4926      	ldr	r1, [pc, #152]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f42:	d101      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002f44:	2301      	movs	r3, #1
 8002f46:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00a      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002f54:	4b1d      	ldr	r3, [pc, #116]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	491a      	ldr	r1, [pc, #104]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d011      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002f76:	4b15      	ldr	r3, [pc, #84]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f7c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f84:	4911      	ldr	r1, [pc, #68]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f90:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f94:	d101      	bne.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002f96:	2301      	movs	r3, #1
 8002f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d005      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fa8:	f040 80ff 	bne.w	80031aa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002fb2:	f7ff fab1 	bl	8002518 <HAL_GetTick>
 8002fb6:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb8:	e00e      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002fba:	f7ff faad 	bl	8002518 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d907      	bls.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e188      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002fcc:	40023800 	.word	0x40023800
 8002fd0:	424711e0 	.word	0x424711e0
 8002fd4:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fd8:	4b7e      	ldr	r3, [pc, #504]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1ea      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d009      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003000:	2b00      	cmp	r3, #0
 8003002:	d028      	beq.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d124      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800300c:	4b71      	ldr	r3, [pc, #452]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800300e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003012:	0c1b      	lsrs	r3, r3, #16
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	3301      	adds	r3, #1
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800301e:	4b6d      	ldr	r3, [pc, #436]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003024:	0e1b      	lsrs	r3, r3, #24
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	431a      	orrs	r2, r3
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	085b      	lsrs	r3, r3, #1
 800303c:	3b01      	subs	r3, #1
 800303e:	041b      	lsls	r3, r3, #16
 8003040:	431a      	orrs	r2, r3
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	431a      	orrs	r2, r3
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	071b      	lsls	r3, r3, #28
 800304e:	4961      	ldr	r1, [pc, #388]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003050:	4313      	orrs	r3, r2
 8003052:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0304 	and.w	r3, r3, #4
 800305e:	2b00      	cmp	r3, #0
 8003060:	d004      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003066:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800306a:	d00a      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003074:	2b00      	cmp	r3, #0
 8003076:	d035      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800307c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003080:	d130      	bne.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003082:	4b54      	ldr	r3, [pc, #336]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	3301      	adds	r3, #1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003094:	4b4f      	ldr	r3, [pc, #316]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309a:	0f1b      	lsrs	r3, r3, #28
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	019b      	lsls	r3, r3, #6
 80030ac:	431a      	orrs	r2, r3
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	3b01      	subs	r3, #1
 80030b4:	041b      	lsls	r3, r3, #16
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	431a      	orrs	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	071b      	lsls	r3, r3, #28
 80030c4:	4943      	ldr	r1, [pc, #268]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80030cc:	4b41      	ldr	r3, [pc, #260]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030d2:	f023 021f 	bic.w	r2, r3, #31
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030da:	3b01      	subs	r3, #1
 80030dc:	493d      	ldr	r1, [pc, #244]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d029      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80030f8:	d124      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80030fa:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	3301      	adds	r3, #1
 8003108:	005b      	lsls	r3, r3, #1
 800310a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800310c:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800310e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003112:	0f1b      	lsrs	r3, r3, #28
 8003114:	f003 0307 	and.w	r3, r3, #7
 8003118:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	019b      	lsls	r3, r3, #6
 8003124:	431a      	orrs	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	085b      	lsrs	r3, r3, #1
 800312c:	3b01      	subs	r3, #1
 800312e:	041b      	lsls	r3, r3, #16
 8003130:	431a      	orrs	r2, r3
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	431a      	orrs	r2, r3
 8003138:	697b      	ldr	r3, [r7, #20]
 800313a:	071b      	lsls	r3, r3, #28
 800313c:	4925      	ldr	r1, [pc, #148]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800314c:	2b00      	cmp	r3, #0
 800314e:	d016      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685a      	ldr	r2, [r3, #4]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	019b      	lsls	r3, r3, #6
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	085b      	lsrs	r3, r3, #1
 8003162:	3b01      	subs	r3, #1
 8003164:	041b      	lsls	r3, r3, #16
 8003166:	431a      	orrs	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	061b      	lsls	r3, r3, #24
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	695b      	ldr	r3, [r3, #20]
 8003174:	071b      	lsls	r3, r3, #28
 8003176:	4917      	ldr	r1, [pc, #92]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800317e:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003184:	f7ff f9c8 	bl	8002518 <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800318c:	f7ff f9c4 	bl	8002518 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e09f      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800319e:	4b0d      	ldr	r3, [pc, #52]	; (80031d4 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80031aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	f040 8095 	bne.w	80032dc <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80031b2:	4b0a      	ldr	r3, [pc, #40]	; (80031dc <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031b8:	f7ff f9ae 	bl	8002518 <HAL_GetTick>
 80031bc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031be:	e00f      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80031c0:	f7ff f9aa 	bl	8002518 <HAL_GetTick>
 80031c4:	4602      	mov	r2, r0
 80031c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	2b02      	cmp	r3, #2
 80031cc:	d908      	bls.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e085      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x642>
 80031d2:	bf00      	nop
 80031d4:	40023800 	.word	0x40023800
 80031d8:	42470068 	.word	0x42470068
 80031dc:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80031e0:	4b41      	ldr	r3, [pc, #260]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031ec:	d0e8      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d003      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d009      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800320a:	2b00      	cmp	r3, #0
 800320c:	d02b      	beq.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003212:	2b00      	cmp	r3, #0
 8003214:	d127      	bne.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003216:	4b34      	ldr	r3, [pc, #208]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321c:	0c1b      	lsrs	r3, r3, #16
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	3301      	adds	r3, #1
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	699a      	ldr	r2, [r3, #24]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	69db      	ldr	r3, [r3, #28]
 8003230:	019b      	lsls	r3, r3, #6
 8003232:	431a      	orrs	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	085b      	lsrs	r3, r3, #1
 8003238:	3b01      	subs	r3, #1
 800323a:	041b      	lsls	r3, r3, #16
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	061b      	lsls	r3, r3, #24
 8003244:	4928      	ldr	r1, [pc, #160]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003246:	4313      	orrs	r3, r2
 8003248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800324c:	4b26      	ldr	r3, [pc, #152]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800324e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003252:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800325a:	3b01      	subs	r3, #1
 800325c:	021b      	lsls	r3, r3, #8
 800325e:	4922      	ldr	r1, [pc, #136]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003260:	4313      	orrs	r3, r2
 8003262:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01d      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x612>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003276:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800327a:	d118      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800327c:	4b1a      	ldr	r3, [pc, #104]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	0e1b      	lsrs	r3, r3, #24
 8003284:	f003 030f 	and.w	r3, r3, #15
 8003288:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699a      	ldr	r2, [r3, #24]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	019b      	lsls	r3, r3, #6
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	085b      	lsrs	r3, r3, #1
 800329c:	3b01      	subs	r3, #1
 800329e:	041b      	lsls	r3, r3, #16
 80032a0:	431a      	orrs	r2, r3
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	061b      	lsls	r3, r3, #24
 80032a6:	4910      	ldr	r1, [pc, #64]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032ae:	4b0f      	ldr	r3, [pc, #60]	; (80032ec <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80032b0:	2201      	movs	r2, #1
 80032b2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032b4:	f7ff f930 	bl	8002518 <HAL_GetTick>
 80032b8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80032bc:	f7ff f92c 	bl	8002518 <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d901      	bls.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e007      	b.n	80032de <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ce:	4b06      	ldr	r3, [pc, #24]	; (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032da:	d1ef      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3730      	adds	r7, #48	; 0x30
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	42470070 	.word	0x42470070

080032f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f4:	b088      	sub	sp, #32
 80032f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80032fc:	2300      	movs	r3, #0
 80032fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003300:	2300      	movs	r3, #0
 8003302:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8003304:	2300      	movs	r3, #0
 8003306:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003308:	2300      	movs	r3, #0
 800330a:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800330c:	4bce      	ldr	r3, [pc, #824]	; (8003648 <HAL_RCC_GetSysClockFreq+0x358>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	f003 030c 	and.w	r3, r3, #12
 8003314:	2b0c      	cmp	r3, #12
 8003316:	f200 818d 	bhi.w	8003634 <HAL_RCC_GetSysClockFreq+0x344>
 800331a:	a201      	add	r2, pc, #4	; (adr r2, 8003320 <HAL_RCC_GetSysClockFreq+0x30>)
 800331c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003320:	08003355 	.word	0x08003355
 8003324:	08003635 	.word	0x08003635
 8003328:	08003635 	.word	0x08003635
 800332c:	08003635 	.word	0x08003635
 8003330:	0800335b 	.word	0x0800335b
 8003334:	08003635 	.word	0x08003635
 8003338:	08003635 	.word	0x08003635
 800333c:	08003635 	.word	0x08003635
 8003340:	08003361 	.word	0x08003361
 8003344:	08003635 	.word	0x08003635
 8003348:	08003635 	.word	0x08003635
 800334c:	08003635 	.word	0x08003635
 8003350:	080034d5 	.word	0x080034d5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003354:	4bbd      	ldr	r3, [pc, #756]	; (800364c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003356:	61bb      	str	r3, [r7, #24]
       break;
 8003358:	e16f      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800335a:	4bbd      	ldr	r3, [pc, #756]	; (8003650 <HAL_RCC_GetSysClockFreq+0x360>)
 800335c:	61bb      	str	r3, [r7, #24]
      break;
 800335e:	e16c      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003360:	4bb9      	ldr	r3, [pc, #740]	; (8003648 <HAL_RCC_GetSysClockFreq+0x358>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003368:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800336a:	4bb7      	ldr	r3, [pc, #732]	; (8003648 <HAL_RCC_GetSysClockFreq+0x358>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d053      	beq.n	800341e <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003376:	4bb4      	ldr	r3, [pc, #720]	; (8003648 <HAL_RCC_GetSysClockFreq+0x358>)
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	099b      	lsrs	r3, r3, #6
 800337c:	461a      	mov	r2, r3
 800337e:	f04f 0300 	mov.w	r3, #0
 8003382:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003386:	f04f 0100 	mov.w	r1, #0
 800338a:	ea02 0400 	and.w	r4, r2, r0
 800338e:	603c      	str	r4, [r7, #0]
 8003390:	400b      	ands	r3, r1
 8003392:	607b      	str	r3, [r7, #4]
 8003394:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003398:	4620      	mov	r0, r4
 800339a:	4629      	mov	r1, r5
 800339c:	f04f 0200 	mov.w	r2, #0
 80033a0:	f04f 0300 	mov.w	r3, #0
 80033a4:	014b      	lsls	r3, r1, #5
 80033a6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80033aa:	0142      	lsls	r2, r0, #5
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	4623      	mov	r3, r4
 80033b2:	1ac0      	subs	r0, r0, r3
 80033b4:	462b      	mov	r3, r5
 80033b6:	eb61 0103 	sbc.w	r1, r1, r3
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	018b      	lsls	r3, r1, #6
 80033c4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033c8:	0182      	lsls	r2, r0, #6
 80033ca:	1a12      	subs	r2, r2, r0
 80033cc:	eb63 0301 	sbc.w	r3, r3, r1
 80033d0:	f04f 0000 	mov.w	r0, #0
 80033d4:	f04f 0100 	mov.w	r1, #0
 80033d8:	00d9      	lsls	r1, r3, #3
 80033da:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033de:	00d0      	lsls	r0, r2, #3
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4621      	mov	r1, r4
 80033e6:	1852      	adds	r2, r2, r1
 80033e8:	4629      	mov	r1, r5
 80033ea:	eb43 0101 	adc.w	r1, r3, r1
 80033ee:	460b      	mov	r3, r1
 80033f0:	f04f 0000 	mov.w	r0, #0
 80033f4:	f04f 0100 	mov.w	r1, #0
 80033f8:	0259      	lsls	r1, r3, #9
 80033fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80033fe:	0250      	lsls	r0, r2, #9
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4610      	mov	r0, r2
 8003406:	4619      	mov	r1, r3
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	461a      	mov	r2, r3
 800340c:	f04f 0300 	mov.w	r3, #0
 8003410:	f7fd fbfa 	bl	8000c08 <__aeabi_uldivmod>
 8003414:	4602      	mov	r2, r0
 8003416:	460b      	mov	r3, r1
 8003418:	4613      	mov	r3, r2
 800341a:	61fb      	str	r3, [r7, #28]
 800341c:	e04c      	b.n	80034b8 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800341e:	4b8a      	ldr	r3, [pc, #552]	; (8003648 <HAL_RCC_GetSysClockFreq+0x358>)
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	099b      	lsrs	r3, r3, #6
 8003424:	461a      	mov	r2, r3
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800342e:	f04f 0100 	mov.w	r1, #0
 8003432:	ea02 0a00 	and.w	sl, r2, r0
 8003436:	ea03 0b01 	and.w	fp, r3, r1
 800343a:	4650      	mov	r0, sl
 800343c:	4659      	mov	r1, fp
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	014b      	lsls	r3, r1, #5
 8003448:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800344c:	0142      	lsls	r2, r0, #5
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	ebb0 000a 	subs.w	r0, r0, sl
 8003456:	eb61 010b 	sbc.w	r1, r1, fp
 800345a:	f04f 0200 	mov.w	r2, #0
 800345e:	f04f 0300 	mov.w	r3, #0
 8003462:	018b      	lsls	r3, r1, #6
 8003464:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003468:	0182      	lsls	r2, r0, #6
 800346a:	1a12      	subs	r2, r2, r0
 800346c:	eb63 0301 	sbc.w	r3, r3, r1
 8003470:	f04f 0000 	mov.w	r0, #0
 8003474:	f04f 0100 	mov.w	r1, #0
 8003478:	00d9      	lsls	r1, r3, #3
 800347a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800347e:	00d0      	lsls	r0, r2, #3
 8003480:	4602      	mov	r2, r0
 8003482:	460b      	mov	r3, r1
 8003484:	eb12 020a 	adds.w	r2, r2, sl
 8003488:	eb43 030b 	adc.w	r3, r3, fp
 800348c:	f04f 0000 	mov.w	r0, #0
 8003490:	f04f 0100 	mov.w	r1, #0
 8003494:	0299      	lsls	r1, r3, #10
 8003496:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800349a:	0290      	lsls	r0, r2, #10
 800349c:	4602      	mov	r2, r0
 800349e:	460b      	mov	r3, r1
 80034a0:	4610      	mov	r0, r2
 80034a2:	4619      	mov	r1, r3
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	461a      	mov	r2, r3
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	f7fd fbac 	bl	8000c08 <__aeabi_uldivmod>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4613      	mov	r3, r2
 80034b6:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034b8:	4b63      	ldr	r3, [pc, #396]	; (8003648 <HAL_RCC_GetSysClockFreq+0x358>)
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	0c1b      	lsrs	r3, r3, #16
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	3301      	adds	r3, #1
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80034c8:	69fa      	ldr	r2, [r7, #28]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d0:	61bb      	str	r3, [r7, #24]
      break;
 80034d2:	e0b2      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034d4:	4b5c      	ldr	r3, [pc, #368]	; (8003648 <HAL_RCC_GetSysClockFreq+0x358>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034dc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034de:	4b5a      	ldr	r3, [pc, #360]	; (8003648 <HAL_RCC_GetSysClockFreq+0x358>)
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d04d      	beq.n	8003586 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ea:	4b57      	ldr	r3, [pc, #348]	; (8003648 <HAL_RCC_GetSysClockFreq+0x358>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	099b      	lsrs	r3, r3, #6
 80034f0:	461a      	mov	r2, r3
 80034f2:	f04f 0300 	mov.w	r3, #0
 80034f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034fa:	f04f 0100 	mov.w	r1, #0
 80034fe:	ea02 0800 	and.w	r8, r2, r0
 8003502:	ea03 0901 	and.w	r9, r3, r1
 8003506:	4640      	mov	r0, r8
 8003508:	4649      	mov	r1, r9
 800350a:	f04f 0200 	mov.w	r2, #0
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	014b      	lsls	r3, r1, #5
 8003514:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003518:	0142      	lsls	r2, r0, #5
 800351a:	4610      	mov	r0, r2
 800351c:	4619      	mov	r1, r3
 800351e:	ebb0 0008 	subs.w	r0, r0, r8
 8003522:	eb61 0109 	sbc.w	r1, r1, r9
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	f04f 0300 	mov.w	r3, #0
 800352e:	018b      	lsls	r3, r1, #6
 8003530:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003534:	0182      	lsls	r2, r0, #6
 8003536:	1a12      	subs	r2, r2, r0
 8003538:	eb63 0301 	sbc.w	r3, r3, r1
 800353c:	f04f 0000 	mov.w	r0, #0
 8003540:	f04f 0100 	mov.w	r1, #0
 8003544:	00d9      	lsls	r1, r3, #3
 8003546:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800354a:	00d0      	lsls	r0, r2, #3
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	eb12 0208 	adds.w	r2, r2, r8
 8003554:	eb43 0309 	adc.w	r3, r3, r9
 8003558:	f04f 0000 	mov.w	r0, #0
 800355c:	f04f 0100 	mov.w	r1, #0
 8003560:	0259      	lsls	r1, r3, #9
 8003562:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003566:	0250      	lsls	r0, r2, #9
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	461a      	mov	r2, r3
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	f7fd fb46 	bl	8000c08 <__aeabi_uldivmod>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4613      	mov	r3, r2
 8003582:	61fb      	str	r3, [r7, #28]
 8003584:	e04a      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003586:	4b30      	ldr	r3, [pc, #192]	; (8003648 <HAL_RCC_GetSysClockFreq+0x358>)
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	099b      	lsrs	r3, r3, #6
 800358c:	461a      	mov	r2, r3
 800358e:	f04f 0300 	mov.w	r3, #0
 8003592:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003596:	f04f 0100 	mov.w	r1, #0
 800359a:	ea02 0400 	and.w	r4, r2, r0
 800359e:	ea03 0501 	and.w	r5, r3, r1
 80035a2:	4620      	mov	r0, r4
 80035a4:	4629      	mov	r1, r5
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	014b      	lsls	r3, r1, #5
 80035b0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80035b4:	0142      	lsls	r2, r0, #5
 80035b6:	4610      	mov	r0, r2
 80035b8:	4619      	mov	r1, r3
 80035ba:	1b00      	subs	r0, r0, r4
 80035bc:	eb61 0105 	sbc.w	r1, r1, r5
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	018b      	lsls	r3, r1, #6
 80035ca:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80035ce:	0182      	lsls	r2, r0, #6
 80035d0:	1a12      	subs	r2, r2, r0
 80035d2:	eb63 0301 	sbc.w	r3, r3, r1
 80035d6:	f04f 0000 	mov.w	r0, #0
 80035da:	f04f 0100 	mov.w	r1, #0
 80035de:	00d9      	lsls	r1, r3, #3
 80035e0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035e4:	00d0      	lsls	r0, r2, #3
 80035e6:	4602      	mov	r2, r0
 80035e8:	460b      	mov	r3, r1
 80035ea:	1912      	adds	r2, r2, r4
 80035ec:	eb45 0303 	adc.w	r3, r5, r3
 80035f0:	f04f 0000 	mov.w	r0, #0
 80035f4:	f04f 0100 	mov.w	r1, #0
 80035f8:	0299      	lsls	r1, r3, #10
 80035fa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80035fe:	0290      	lsls	r0, r2, #10
 8003600:	4602      	mov	r2, r0
 8003602:	460b      	mov	r3, r1
 8003604:	4610      	mov	r0, r2
 8003606:	4619      	mov	r1, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	461a      	mov	r2, r3
 800360c:	f04f 0300 	mov.w	r3, #0
 8003610:	f7fd fafa 	bl	8000c08 <__aeabi_uldivmod>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4613      	mov	r3, r2
 800361a:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800361c:	4b0a      	ldr	r3, [pc, #40]	; (8003648 <HAL_RCC_GetSysClockFreq+0x358>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	0f1b      	lsrs	r3, r3, #28
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003630:	61bb      	str	r3, [r7, #24]
      break;
 8003632:	e002      	b.n	800363a <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003634:	4b05      	ldr	r3, [pc, #20]	; (800364c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003636:	61bb      	str	r3, [r7, #24]
      break;
 8003638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800363a:	69bb      	ldr	r3, [r7, #24]
}
 800363c:	4618      	mov	r0, r3
 800363e:	3720      	adds	r7, #32
 8003640:	46bd      	mov	sp, r7
 8003642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003646:	bf00      	nop
 8003648:	40023800 	.word	0x40023800
 800364c:	00f42400 	.word	0x00f42400
 8003650:	007a1200 	.word	0x007a1200

08003654 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b086      	sub	sp, #24
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d101      	bne.n	8003666 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e28d      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	f000 8083 	beq.w	800377a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003674:	4b94      	ldr	r3, [pc, #592]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 030c 	and.w	r3, r3, #12
 800367c:	2b04      	cmp	r3, #4
 800367e:	d019      	beq.n	80036b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003680:	4b91      	ldr	r3, [pc, #580]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003688:	2b08      	cmp	r3, #8
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800368c:	4b8e      	ldr	r3, [pc, #568]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003698:	d00c      	beq.n	80036b4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369a:	4b8b      	ldr	r3, [pc, #556]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036a2:	2b0c      	cmp	r3, #12
 80036a4:	d112      	bne.n	80036cc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a6:	4b88      	ldr	r3, [pc, #544]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b2:	d10b      	bne.n	80036cc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b4:	4b84      	ldr	r3, [pc, #528]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d05b      	beq.n	8003778 <HAL_RCC_OscConfig+0x124>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d157      	bne.n	8003778 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e25a      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d4:	d106      	bne.n	80036e4 <HAL_RCC_OscConfig+0x90>
 80036d6:	4b7c      	ldr	r3, [pc, #496]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a7b      	ldr	r2, [pc, #492]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80036dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e01d      	b.n	8003720 <HAL_RCC_OscConfig+0xcc>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036ec:	d10c      	bne.n	8003708 <HAL_RCC_OscConfig+0xb4>
 80036ee:	4b76      	ldr	r3, [pc, #472]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a75      	ldr	r2, [pc, #468]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80036f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036f8:	6013      	str	r3, [r2, #0]
 80036fa:	4b73      	ldr	r3, [pc, #460]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	4a72      	ldr	r2, [pc, #456]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 8003700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003704:	6013      	str	r3, [r2, #0]
 8003706:	e00b      	b.n	8003720 <HAL_RCC_OscConfig+0xcc>
 8003708:	4b6f      	ldr	r3, [pc, #444]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a6e      	ldr	r2, [pc, #440]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 800370e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	4b6c      	ldr	r3, [pc, #432]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a6b      	ldr	r2, [pc, #428]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 800371a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800371e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d013      	beq.n	8003750 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003728:	f7fe fef6 	bl	8002518 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800372e:	e008      	b.n	8003742 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe fef2 	bl	8002518 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b64      	cmp	r3, #100	; 0x64
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e21f      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b61      	ldr	r3, [pc, #388]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d0f0      	beq.n	8003730 <HAL_RCC_OscConfig+0xdc>
 800374e:	e014      	b.n	800377a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003750:	f7fe fee2 	bl	8002518 <HAL_GetTick>
 8003754:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003756:	e008      	b.n	800376a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003758:	f7fe fede 	bl	8002518 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	2b64      	cmp	r3, #100	; 0x64
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e20b      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376a:	4b57      	ldr	r3, [pc, #348]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1f0      	bne.n	8003758 <HAL_RCC_OscConfig+0x104>
 8003776:	e000      	b.n	800377a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003778:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d06f      	beq.n	8003866 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003786:	4b50      	ldr	r3, [pc, #320]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b00      	cmp	r3, #0
 8003790:	d017      	beq.n	80037c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003792:	4b4d      	ldr	r3, [pc, #308]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800379a:	2b08      	cmp	r3, #8
 800379c:	d105      	bne.n	80037aa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800379e:	4b4a      	ldr	r3, [pc, #296]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d00b      	beq.n	80037c2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037aa:	4b47      	ldr	r3, [pc, #284]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037b2:	2b0c      	cmp	r3, #12
 80037b4:	d11c      	bne.n	80037f0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b6:	4b44      	ldr	r3, [pc, #272]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d116      	bne.n	80037f0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c2:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d005      	beq.n	80037da <HAL_RCC_OscConfig+0x186>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d001      	beq.n	80037da <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e1d3      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037da:	4b3b      	ldr	r3, [pc, #236]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	00db      	lsls	r3, r3, #3
 80037e8:	4937      	ldr	r1, [pc, #220]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ee:	e03a      	b.n	8003866 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68db      	ldr	r3, [r3, #12]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d020      	beq.n	800383a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f8:	4b34      	ldr	r3, [pc, #208]	; (80038cc <HAL_RCC_OscConfig+0x278>)
 80037fa:	2201      	movs	r2, #1
 80037fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037fe:	f7fe fe8b 	bl	8002518 <HAL_GetTick>
 8003802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003806:	f7fe fe87 	bl	8002518 <HAL_GetTick>
 800380a:	4602      	mov	r2, r0
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e1b4      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003818:	4b2b      	ldr	r3, [pc, #172]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d0f0      	beq.n	8003806 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003824:	4b28      	ldr	r3, [pc, #160]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4925      	ldr	r1, [pc, #148]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 8003834:	4313      	orrs	r3, r2
 8003836:	600b      	str	r3, [r1, #0]
 8003838:	e015      	b.n	8003866 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800383a:	4b24      	ldr	r3, [pc, #144]	; (80038cc <HAL_RCC_OscConfig+0x278>)
 800383c:	2200      	movs	r2, #0
 800383e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003840:	f7fe fe6a 	bl	8002518 <HAL_GetTick>
 8003844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003846:	e008      	b.n	800385a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003848:	f7fe fe66 	bl	8002518 <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d901      	bls.n	800385a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e193      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385a:	4b1b      	ldr	r3, [pc, #108]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0302 	and.w	r3, r3, #2
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1f0      	bne.n	8003848 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0308 	and.w	r3, r3, #8
 800386e:	2b00      	cmp	r3, #0
 8003870:	d036      	beq.n	80038e0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	695b      	ldr	r3, [r3, #20]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d016      	beq.n	80038a8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387a:	4b15      	ldr	r3, [pc, #84]	; (80038d0 <HAL_RCC_OscConfig+0x27c>)
 800387c:	2201      	movs	r2, #1
 800387e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fe fe4a 	bl	8002518 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003888:	f7fe fe46 	bl	8002518 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e173      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389a:	4b0b      	ldr	r3, [pc, #44]	; (80038c8 <HAL_RCC_OscConfig+0x274>)
 800389c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0x234>
 80038a6:	e01b      	b.n	80038e0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a8:	4b09      	ldr	r3, [pc, #36]	; (80038d0 <HAL_RCC_OscConfig+0x27c>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ae:	f7fe fe33 	bl	8002518 <HAL_GetTick>
 80038b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b4:	e00e      	b.n	80038d4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038b6:	f7fe fe2f 	bl	8002518 <HAL_GetTick>
 80038ba:	4602      	mov	r2, r0
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	1ad3      	subs	r3, r2, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d907      	bls.n	80038d4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e15c      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
 80038c8:	40023800 	.word	0x40023800
 80038cc:	42470000 	.word	0x42470000
 80038d0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d4:	4b8a      	ldr	r3, [pc, #552]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 80038d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ea      	bne.n	80038b6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0304 	and.w	r3, r3, #4
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8097 	beq.w	8003a1c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f2:	4b83      	ldr	r3, [pc, #524]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 80038f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10f      	bne.n	800391e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038fe:	2300      	movs	r3, #0
 8003900:	60bb      	str	r3, [r7, #8]
 8003902:	4b7f      	ldr	r3, [pc, #508]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	4a7e      	ldr	r2, [pc, #504]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003908:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800390c:	6413      	str	r3, [r2, #64]	; 0x40
 800390e:	4b7c      	ldr	r3, [pc, #496]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003916:	60bb      	str	r3, [r7, #8]
 8003918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391a:	2301      	movs	r3, #1
 800391c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800391e:	4b79      	ldr	r3, [pc, #484]	; (8003b04 <HAL_RCC_OscConfig+0x4b0>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003926:	2b00      	cmp	r3, #0
 8003928:	d118      	bne.n	800395c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800392a:	4b76      	ldr	r3, [pc, #472]	; (8003b04 <HAL_RCC_OscConfig+0x4b0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a75      	ldr	r2, [pc, #468]	; (8003b04 <HAL_RCC_OscConfig+0x4b0>)
 8003930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003936:	f7fe fdef 	bl	8002518 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800393e:	f7fe fdeb 	bl	8002518 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e118      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003950:	4b6c      	ldr	r3, [pc, #432]	; (8003b04 <HAL_RCC_OscConfig+0x4b0>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d106      	bne.n	8003972 <HAL_RCC_OscConfig+0x31e>
 8003964:	4b66      	ldr	r3, [pc, #408]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a65      	ldr	r2, [pc, #404]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 800396a:	f043 0301 	orr.w	r3, r3, #1
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
 8003970:	e01c      	b.n	80039ac <HAL_RCC_OscConfig+0x358>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	2b05      	cmp	r3, #5
 8003978:	d10c      	bne.n	8003994 <HAL_RCC_OscConfig+0x340>
 800397a:	4b61      	ldr	r3, [pc, #388]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 800397c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800397e:	4a60      	ldr	r2, [pc, #384]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003980:	f043 0304 	orr.w	r3, r3, #4
 8003984:	6713      	str	r3, [r2, #112]	; 0x70
 8003986:	4b5e      	ldr	r3, [pc, #376]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398a:	4a5d      	ldr	r2, [pc, #372]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6713      	str	r3, [r2, #112]	; 0x70
 8003992:	e00b      	b.n	80039ac <HAL_RCC_OscConfig+0x358>
 8003994:	4b5a      	ldr	r3, [pc, #360]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003998:	4a59      	ldr	r2, [pc, #356]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 800399a:	f023 0301 	bic.w	r3, r3, #1
 800399e:	6713      	str	r3, [r2, #112]	; 0x70
 80039a0:	4b57      	ldr	r3, [pc, #348]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	4a56      	ldr	r2, [pc, #344]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 80039a6:	f023 0304 	bic.w	r3, r3, #4
 80039aa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d015      	beq.n	80039e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b4:	f7fe fdb0 	bl	8002518 <HAL_GetTick>
 80039b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039ba:	e00a      	b.n	80039d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039bc:	f7fe fdac 	bl	8002518 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e0d7      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d2:	4b4b      	ldr	r3, [pc, #300]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 80039d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0ee      	beq.n	80039bc <HAL_RCC_OscConfig+0x368>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e0:	f7fe fd9a 	bl	8002518 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039e6:	e00a      	b.n	80039fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039e8:	f7fe fd96 	bl	8002518 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e0c1      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039fe:	4b40      	ldr	r3, [pc, #256]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1ee      	bne.n	80039e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a0a:	7dfb      	ldrb	r3, [r7, #23]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d105      	bne.n	8003a1c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a10:	4b3b      	ldr	r3, [pc, #236]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	4a3a      	ldr	r2, [pc, #232]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003a16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	f000 80ad 	beq.w	8003b80 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a26:	4b36      	ldr	r3, [pc, #216]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b08      	cmp	r3, #8
 8003a30:	d060      	beq.n	8003af4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	699b      	ldr	r3, [r3, #24]
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d145      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3a:	4b33      	ldr	r3, [pc, #204]	; (8003b08 <HAL_RCC_OscConfig+0x4b4>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a40:	f7fe fd6a 	bl	8002518 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a48:	f7fe fd66 	bl	8002518 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e093      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5a:	4b29      	ldr	r3, [pc, #164]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d1f0      	bne.n	8003a48 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69da      	ldr	r2, [r3, #28]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a74:	019b      	lsls	r3, r3, #6
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a7c:	085b      	lsrs	r3, r3, #1
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	041b      	lsls	r3, r3, #16
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a88:	061b      	lsls	r3, r3, #24
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a90:	071b      	lsls	r3, r3, #28
 8003a92:	491b      	ldr	r1, [pc, #108]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x4b4>)
 8003a9a:	2201      	movs	r2, #1
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a9e:	f7fe fd3b 	bl	8002518 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fe fd37 	bl	8002518 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e064      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ab8:	4b11      	ldr	r3, [pc, #68]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d0f0      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x452>
 8003ac4:	e05c      	b.n	8003b80 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ac6:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <HAL_RCC_OscConfig+0x4b4>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003acc:	f7fe fd24 	bl	8002518 <HAL_GetTick>
 8003ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad2:	e008      	b.n	8003ae6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fe fd20 	bl	8002518 <HAL_GetTick>
 8003ad8:	4602      	mov	r2, r0
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e04d      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ae6:	4b06      	ldr	r3, [pc, #24]	; (8003b00 <HAL_RCC_OscConfig+0x4ac>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d1f0      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x480>
 8003af2:	e045      	b.n	8003b80 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d107      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e040      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
 8003b00:	40023800 	.word	0x40023800
 8003b04:	40007000 	.word	0x40007000
 8003b08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b0c:	4b1f      	ldr	r3, [pc, #124]	; (8003b8c <HAL_RCC_OscConfig+0x538>)
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	d030      	beq.n	8003b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d129      	bne.n	8003b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d122      	bne.n	8003b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d119      	bne.n	8003b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	3b01      	subs	r3, #1
 8003b56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d10f      	bne.n	8003b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d107      	bne.n	8003b7c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b76:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d001      	beq.n	8003b80 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3718      	adds	r7, #24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023800 	.word	0x40023800

08003b90 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e022      	b.n	8003be8 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d105      	bne.n	8003bba <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7fe fac9 	bl	800214c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2203      	movs	r2, #3
 8003bbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f814 	bl	8003bf0 <HAL_SD_InitCard>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d001      	beq.n	8003bd2 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e00a      	b.n	8003be8 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3708      	adds	r7, #8
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003bf0:	b5b0      	push	{r4, r5, r7, lr}
 8003bf2:	b08e      	sub	sp, #56	; 0x38
 8003bf4:	af04      	add	r7, sp, #16
 8003bf6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003c00:	2300      	movs	r3, #0
 8003c02:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003c04:	2300      	movs	r3, #0
 8003c06:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003c0c:	2376      	movs	r3, #118	; 0x76
 8003c0e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681d      	ldr	r5, [r3, #0]
 8003c14:	466c      	mov	r4, sp
 8003c16:	f107 0314 	add.w	r3, r7, #20
 8003c1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003c1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c22:	f107 0308 	add.w	r3, r7, #8
 8003c26:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c28:	4628      	mov	r0, r5
 8003c2a:	f001 f938 	bl	8004e9e <SDIO_Init>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e04c      	b.n	8003cda <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003c40:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_SD_InitCard+0xf4>)
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f001 f970 	bl	8004f30 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003c50:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <HAL_SD_InitCard+0xf4>)
 8003c52:	2201      	movs	r2, #1
 8003c54:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 ff02 	bl	8004a60 <SD_PowerON>
 8003c5c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c5e:	6a3b      	ldr	r3, [r7, #32]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00b      	beq.n	8003c7c <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e02e      	b.n	8003cda <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 fe23 	bl	80048c8 <SD_InitCard>
 8003c82:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c84:	6a3b      	ldr	r3, [r7, #32]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00b      	beq.n	8003ca2 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c96:	6a3b      	ldr	r3, [r7, #32]
 8003c98:	431a      	orrs	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e01b      	b.n	8003cda <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 f9d3 	bl	8005056 <SDMMC_CmdBlockLength>
 8003cb0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cb2:	6a3b      	ldr	r3, [r7, #32]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00f      	beq.n	8003cd8 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a0a      	ldr	r2, [pc, #40]	; (8003ce8 <HAL_SD_InitCard+0xf8>)
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cc4:	6a3b      	ldr	r3, [r7, #32]
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2201      	movs	r2, #1
 8003cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e000      	b.n	8003cda <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3728      	adds	r7, #40	; 0x28
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	422580a0 	.word	0x422580a0
 8003ce8:	004005ff 	.word	0x004005ff

08003cec <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b092      	sub	sp, #72	; 0x48
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
 8003cf8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003cfa:	f7fe fc0d 	bl	8002518 <HAL_GetTick>
 8003cfe:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d107      	bne.n	8003d1e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e1bd      	b.n	800409a <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003d24:	b2db      	uxtb	r3, r3
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	f040 81b0 	bne.w	800408c <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003d32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	441a      	add	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d907      	bls.n	8003d50 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d44:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e1a4      	b.n	800409a <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2203      	movs	r2, #3
 8003d54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d002      	beq.n	8003d6e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	025b      	lsls	r3, r3, #9
 8003d6c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d72:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	025b      	lsls	r3, r3, #9
 8003d78:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003d7a:	2390      	movs	r3, #144	; 0x90
 8003d7c:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003d7e:	2302      	movs	r3, #2
 8003d80:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003d86:	2301      	movs	r3, #1
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f107 0214 	add.w	r2, r7, #20
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f001 f932 	bl	8004ffe <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d90a      	bls.n	8003db6 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2202      	movs	r2, #2
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dac:	4618      	mov	r0, r3
 8003dae:	f001 f996 	bl	80050de <SDMMC_CmdReadMultiBlock>
 8003db2:	6478      	str	r0, [r7, #68]	; 0x44
 8003db4:	e009      	b.n	8003dca <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f001 f969 	bl	800509a <SDMMC_CmdReadSingleBlock>
 8003dc8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003dca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d012      	beq.n	8003df6 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	4a7a      	ldr	r2, [pc, #488]	; (8003fc0 <HAL_SD_ReadBlocks+0x2d4>)
 8003dd6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dde:	431a      	orrs	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e151      	b.n	800409a <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003dfa:	e061      	b.n	8003ec0 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d03c      	beq.n	8003e84 <HAL_SD_ReadBlocks+0x198>
 8003e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d039      	beq.n	8003e84 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003e10:	2300      	movs	r3, #0
 8003e12:	643b      	str	r3, [r7, #64]	; 0x40
 8003e14:	e033      	b.n	8003e7e <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f001 f86a 	bl	8004ef4 <SDIO_ReadFIFO>
 8003e20:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e28:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e2c:	3301      	adds	r3, #1
 8003e2e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e32:	3b01      	subs	r3, #1
 8003e34:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e38:	0a1b      	lsrs	r3, r3, #8
 8003e3a:	b2da      	uxtb	r2, r3
 8003e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e3e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e42:	3301      	adds	r3, #1
 8003e44:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	0c1b      	lsrs	r3, r3, #16
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e54:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e58:	3301      	adds	r3, #1
 8003e5a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e5e:	3b01      	subs	r3, #1
 8003e60:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e64:	0e1b      	lsrs	r3, r3, #24
 8003e66:	b2da      	uxtb	r2, r3
 8003e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e6e:	3301      	adds	r3, #1
 8003e70:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003e72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e74:	3b01      	subs	r3, #1
 8003e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003e78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e7a:	3301      	adds	r3, #1
 8003e7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e80:	2b07      	cmp	r3, #7
 8003e82:	d9c8      	bls.n	8003e16 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003e84:	f7fe fb48 	bl	8002518 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d902      	bls.n	8003e9a <HAL_SD_ReadBlocks+0x1ae>
 8003e94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d112      	bne.n	8003ec0 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a48      	ldr	r2, [pc, #288]	; (8003fc0 <HAL_SD_ReadBlocks+0x2d4>)
 8003ea0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e0ec      	b.n	800409a <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec6:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d096      	beq.n	8003dfc <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d022      	beq.n	8003f22 <HAL_SD_ReadBlocks+0x236>
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d91f      	bls.n	8003f22 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d01b      	beq.n	8003f22 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f001 f95c 	bl	80051ac <SDMMC_CmdStopTransfer>
 8003ef4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d012      	beq.n	8003f22 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a2f      	ldr	r2, [pc, #188]	; (8003fc0 <HAL_SD_ReadBlocks+0x2d4>)
 8003f02:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e0bb      	b.n	800409a <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d012      	beq.n	8003f56 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a22      	ldr	r2, [pc, #136]	; (8003fc0 <HAL_SD_ReadBlocks+0x2d4>)
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	f043 0208 	orr.w	r2, r3, #8
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0a1      	b.n	800409a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d012      	beq.n	8003f8a <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <HAL_SD_ReadBlocks+0x2d4>)
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	f043 0202 	orr.w	r2, r3, #2
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e087      	b.n	800409a <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f90:	f003 0320 	and.w	r3, r3, #32
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d064      	beq.n	8004062 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <HAL_SD_ReadBlocks+0x2d4>)
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	f043 0220 	orr.w	r2, r3, #32
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e06d      	b.n	800409a <HAL_SD_ReadBlocks+0x3ae>
 8003fbe:	bf00      	nop
 8003fc0:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 ff93 	bl	8004ef4 <SDIO_ReadFIFO>
 8003fce:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fda:	3301      	adds	r3, #1
 8003fdc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fec:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	0c1b      	lsrs	r3, r3, #16
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004002:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8004004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004006:	3301      	adds	r3, #1
 8004008:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800400a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800400c:	3b01      	subs	r3, #1
 800400e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8004010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004012:	0e1b      	lsrs	r3, r3, #24
 8004014:	b2da      	uxtb	r2, r3
 8004016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004018:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800401a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401c:	3301      	adds	r3, #1
 800401e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8004020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004022:	3b01      	subs	r3, #1
 8004024:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004026:	f7fe fa77 	bl	8002518 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004032:	429a      	cmp	r2, r3
 8004034:	d902      	bls.n	800403c <HAL_SD_ReadBlocks+0x350>
 8004036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004038:	2b00      	cmp	r3, #0
 800403a:	d112      	bne.n	8004062 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_SD_ReadBlocks+0x3b8>)
 8004042:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2201      	movs	r2, #1
 8004054:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e01b      	b.n	800409a <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d002      	beq.n	8004076 <HAL_SD_ReadBlocks+0x38a>
 8004070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1a6      	bne.n	8003fc4 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f240 523a 	movw	r2, #1338	; 0x53a
 800407e:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2201      	movs	r2, #1
 8004084:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004088:	2300      	movs	r3, #0
 800408a:	e006      	b.n	800409a <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004090:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
  }
}
 800409a:	4618      	mov	r0, r3
 800409c:	3748      	adds	r7, #72	; 0x48
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	004005ff 	.word	0x004005ff

080040a8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b092      	sub	sp, #72	; 0x48
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80040b6:	f7fe fa2f 	bl	8002518 <HAL_GetTick>
 80040ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d107      	bne.n	80040da <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e165      	b.n	80043a6 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	f040 8158 	bne.w	8004398 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80040ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	441a      	add	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d907      	bls.n	800410c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004100:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e14c      	b.n	80043a6 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2203      	movs	r2, #3
 8004110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2200      	movs	r2, #0
 800411a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004120:	2b01      	cmp	r3, #1
 8004122:	d002      	beq.n	800412a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8004124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004126:	025b      	lsls	r3, r3, #9
 8004128:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800412a:	f04f 33ff 	mov.w	r3, #4294967295
 800412e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	025b      	lsls	r3, r3, #9
 8004134:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004136:	2390      	movs	r3, #144	; 0x90
 8004138:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800413a:	2300      	movs	r3, #0
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800413e:	2300      	movs	r3, #0
 8004140:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8004142:	2301      	movs	r3, #1
 8004144:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f107 0218 	add.w	r2, r7, #24
 800414e:	4611      	mov	r1, r2
 8004150:	4618      	mov	r0, r3
 8004152:	f000 ff54 	bl	8004ffe <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d90a      	bls.n	8004172 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004168:	4618      	mov	r0, r3
 800416a:	f000 fffc 	bl	8005166 <SDMMC_CmdWriteMultiBlock>
 800416e:	6478      	str	r0, [r7, #68]	; 0x44
 8004170:	e009      	b.n	8004186 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2210      	movs	r2, #16
 8004176:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800417e:	4618      	mov	r0, r3
 8004180:	f000 ffcf 	bl	8005122 <SDMMC_CmdWriteSingleBlock>
 8004184:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004188:	2b00      	cmp	r3, #0
 800418a:	d012      	beq.n	80041b2 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a87      	ldr	r2, [pc, #540]	; (80043b0 <HAL_SD_WriteBlocks+0x308>)
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004198:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800419a:	431a      	orrs	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e0f9      	b.n	80043a6 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80041b6:	e065      	b.n	8004284 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d040      	beq.n	8004248 <HAL_SD_WriteBlocks+0x1a0>
 80041c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d03d      	beq.n	8004248 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80041cc:	2300      	movs	r3, #0
 80041ce:	643b      	str	r3, [r7, #64]	; 0x40
 80041d0:	e037      	b.n	8004242 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80041d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80041d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041da:	3301      	adds	r3, #1
 80041dc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80041de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041e0:	3b01      	subs	r3, #1
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80041e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	021a      	lsls	r2, r3, #8
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80041f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f2:	3301      	adds	r3, #1
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80041f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041f8:	3b01      	subs	r3, #1
 80041fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80041fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	041a      	lsls	r2, r3, #16
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	4313      	orrs	r3, r2
 8004206:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420a:	3301      	adds	r3, #1
 800420c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800420e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004210:	3b01      	subs	r3, #1
 8004212:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8004214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	061a      	lsls	r2, r3, #24
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004222:	3301      	adds	r3, #1
 8004224:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004228:	3b01      	subs	r3, #1
 800422a:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f107 0214 	add.w	r2, r7, #20
 8004234:	4611      	mov	r1, r2
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fe69 	bl	8004f0e <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800423c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800423e:	3301      	adds	r3, #1
 8004240:	643b      	str	r3, [r7, #64]	; 0x40
 8004242:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004244:	2b07      	cmp	r3, #7
 8004246:	d9c4      	bls.n	80041d2 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004248:	f7fe f966 	bl	8002518 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004254:	429a      	cmp	r2, r3
 8004256:	d902      	bls.n	800425e <HAL_SD_WriteBlocks+0x1b6>
 8004258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800425a:	2b00      	cmp	r3, #0
 800425c:	d112      	bne.n	8004284 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a53      	ldr	r2, [pc, #332]	; (80043b0 <HAL_SD_WriteBlocks+0x308>)
 8004264:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800426c:	431a      	orrs	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2201      	movs	r2, #1
 8004276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e090      	b.n	80043a6 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428a:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800428e:	2b00      	cmp	r3, #0
 8004290:	d092      	beq.n	80041b8 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429c:	2b00      	cmp	r3, #0
 800429e:	d022      	beq.n	80042e6 <HAL_SD_WriteBlocks+0x23e>
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b01      	cmp	r3, #1
 80042a4:	d91f      	bls.n	80042e6 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d01b      	beq.n	80042e6 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 ff7a 	bl	80051ac <SDMMC_CmdStopTransfer>
 80042b8:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80042ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d012      	beq.n	80042e6 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a3a      	ldr	r2, [pc, #232]	; (80043b0 <HAL_SD_WriteBlocks+0x308>)
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80042cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ce:	431a      	orrs	r2, r3
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e05f      	b.n	80043a6 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ec:	f003 0308 	and.w	r3, r3, #8
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d012      	beq.n	800431a <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a2d      	ldr	r2, [pc, #180]	; (80043b0 <HAL_SD_WriteBlocks+0x308>)
 80042fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	f043 0208 	orr.w	r2, r3, #8
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2200      	movs	r2, #0
 8004314:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e045      	b.n	80043a6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d012      	beq.n	800434e <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a20      	ldr	r2, [pc, #128]	; (80043b0 <HAL_SD_WriteBlocks+0x308>)
 800432e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	f043 0202 	orr.w	r2, r3, #2
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	2200      	movs	r2, #0
 8004348:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800434a:	2301      	movs	r3, #1
 800434c:	e02b      	b.n	80043a6 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004354:	f003 0310 	and.w	r3, r3, #16
 8004358:	2b00      	cmp	r3, #0
 800435a:	d012      	beq.n	8004382 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a13      	ldr	r2, [pc, #76]	; (80043b0 <HAL_SD_WriteBlocks+0x308>)
 8004362:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004368:	f043 0210 	orr.w	r2, r3, #16
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2201      	movs	r2, #1
 8004374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2200      	movs	r2, #0
 800437c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e011      	b.n	80043a6 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f240 523a 	movw	r2, #1338	; 0x53a
 800438a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8004394:	2300      	movs	r3, #0
 8004396:	e006      	b.n	80043a6 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800439c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
  }
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3748      	adds	r7, #72	; 0x48
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
 80043ae:	bf00      	nop
 80043b0:	004005ff 	.word	0x004005ff

080043b4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043c2:	0f9b      	lsrs	r3, r3, #30
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043ce:	0e9b      	lsrs	r3, r3, #26
 80043d0:	b2db      	uxtb	r3, r3
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043e0:	0e1b      	lsrs	r3, r3, #24
 80043e2:	b2db      	uxtb	r3, r3
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	b2da      	uxtb	r2, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043f2:	0c1b      	lsrs	r3, r3, #16
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043fe:	0a1b      	lsrs	r3, r3, #8
 8004400:	b2da      	uxtb	r2, r3
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800440a:	b2da      	uxtb	r2, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004414:	0d1b      	lsrs	r3, r3, #20
 8004416:	b29a      	uxth	r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	b2da      	uxtb	r2, r3
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004432:	0bdb      	lsrs	r3, r3, #15
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	b2da      	uxtb	r2, r3
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004444:	0b9b      	lsrs	r3, r3, #14
 8004446:	b2db      	uxtb	r3, r3
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	b2da      	uxtb	r2, r3
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004456:	0b5b      	lsrs	r3, r3, #13
 8004458:	b2db      	uxtb	r3, r3
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	b2da      	uxtb	r2, r3
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004468:	0b1b      	lsrs	r3, r3, #12
 800446a:	b2db      	uxtb	r3, r3
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	b2da      	uxtb	r2, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2200      	movs	r2, #0
 800447a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004480:	2b00      	cmp	r3, #0
 8004482:	d163      	bne.n	800454c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004488:	009a      	lsls	r2, r3, #2
 800448a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800448e:	4013      	ands	r3, r2
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004494:	0f92      	lsrs	r2, r2, #30
 8004496:	431a      	orrs	r2, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044a0:	0edb      	lsrs	r3, r3, #27
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b2:	0e1b      	lsrs	r3, r3, #24
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	b2da      	uxtb	r2, r3
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044c4:	0d5b      	lsrs	r3, r3, #21
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	b2da      	uxtb	r2, r3
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044d6:	0c9b      	lsrs	r3, r3, #18
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	f003 0307 	and.w	r3, r3, #7
 80044de:	b2da      	uxtb	r2, r3
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e8:	0bdb      	lsrs	r3, r3, #15
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	f003 0307 	and.w	r3, r3, #7
 80044f0:	b2da      	uxtb	r2, r3
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	1c5a      	adds	r2, r3, #1
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	7e1b      	ldrb	r3, [r3, #24]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 0307 	and.w	r3, r3, #7
 800450a:	3302      	adds	r3, #2
 800450c:	2201      	movs	r2, #1
 800450e:	fa02 f303 	lsl.w	r3, r2, r3
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004516:	fb02 f203 	mul.w	r2, r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	7a1b      	ldrb	r3, [r3, #8]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	2201      	movs	r2, #1
 800452a:	409a      	lsls	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004538:	0a52      	lsrs	r2, r2, #9
 800453a:	fb02 f203 	mul.w	r2, r2, r3
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004548:	661a      	str	r2, [r3, #96]	; 0x60
 800454a:	e031      	b.n	80045b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004550:	2b01      	cmp	r3, #1
 8004552:	d11d      	bne.n	8004590 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004558:	041b      	lsls	r3, r3, #16
 800455a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004562:	0c1b      	lsrs	r3, r3, #16
 8004564:	431a      	orrs	r2, r3
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	3301      	adds	r3, #1
 8004570:	029a      	lsls	r2, r3, #10
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004584:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	661a      	str	r2, [r3, #96]	; 0x60
 800458e:	e00f      	b.n	80045b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a58      	ldr	r2, [pc, #352]	; (80046f8 <HAL_SD_GetCardCSD+0x344>)
 8004596:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e09d      	b.n	80046ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b4:	0b9b      	lsrs	r3, r3, #14
 80045b6:	b2db      	uxtb	r3, r3
 80045b8:	f003 0301 	and.w	r3, r3, #1
 80045bc:	b2da      	uxtb	r2, r3
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c6:	09db      	lsrs	r3, r3, #7
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045de:	b2da      	uxtb	r2, r3
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e8:	0fdb      	lsrs	r3, r3, #31
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f4:	0f5b      	lsrs	r3, r3, #29
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	f003 0303 	and.w	r3, r3, #3
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004606:	0e9b      	lsrs	r3, r3, #26
 8004608:	b2db      	uxtb	r3, r3
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	b2da      	uxtb	r2, r3
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004618:	0d9b      	lsrs	r3, r3, #22
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f003 030f 	and.w	r3, r3, #15
 8004620:	b2da      	uxtb	r2, r3
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800462a:	0d5b      	lsrs	r3, r3, #21
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	b2da      	uxtb	r2, r3
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2200      	movs	r2, #0
 800463e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	b2db      	uxtb	r3, r3
 800464a:	f003 0301 	and.w	r3, r3, #1
 800464e:	b2da      	uxtb	r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800465a:	0bdb      	lsrs	r3, r3, #15
 800465c:	b2db      	uxtb	r3, r3
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	b2da      	uxtb	r2, r3
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466e:	0b9b      	lsrs	r3, r3, #14
 8004670:	b2db      	uxtb	r3, r3
 8004672:	f003 0301 	and.w	r3, r3, #1
 8004676:	b2da      	uxtb	r2, r3
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004682:	0b5b      	lsrs	r3, r3, #13
 8004684:	b2db      	uxtb	r3, r3
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	b2da      	uxtb	r2, r3
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	0b1b      	lsrs	r3, r3, #12
 8004698:	b2db      	uxtb	r3, r3
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	b2da      	uxtb	r2, r3
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	0a9b      	lsrs	r3, r3, #10
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f003 0303 	and.w	r3, r3, #3
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	0a1b      	lsrs	r3, r3, #8
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	f003 0303 	and.w	r3, r3, #3
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046d2:	085b      	lsrs	r3, r3, #1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	004005ff 	.word	0x004005ff

080046fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8004754:	b5b0      	push	{r4, r5, r7, lr}
 8004756:	b08e      	sub	sp, #56	; 0x38
 8004758:	af04      	add	r7, sp, #16
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800475e:	2300      	movs	r3, #0
 8004760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2203      	movs	r2, #3
 8004768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004770:	2b03      	cmp	r3, #3
 8004772:	d02e      	beq.n	80047d2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800477a:	d106      	bne.n	800478a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004780:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	639a      	str	r2, [r3, #56]	; 0x38
 8004788:	e029      	b.n	80047de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004790:	d10a      	bne.n	80047a8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 fa1a 	bl	8004bcc <SD_WideBus_Enable>
 8004798:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	639a      	str	r2, [r3, #56]	; 0x38
 80047a6:	e01a      	b.n	80047de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 fa57 	bl	8004c62 <SD_WideBus_Disable>
 80047b4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ba:	6a3b      	ldr	r3, [r7, #32]
 80047bc:	431a      	orrs	r2, r3
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	639a      	str	r2, [r3, #56]	; 0x38
 80047c2:	e00c      	b.n	80047de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	639a      	str	r2, [r3, #56]	; 0x38
 80047d0:	e005      	b.n	80047de <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00b      	beq.n	80047fe <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a26      	ldr	r2, [pc, #152]	; (8004884 <HAL_SD_ConfigWideBusOperation+0x130>)
 80047ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2201      	movs	r2, #1
 80047f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80047fc:	e01f      	b.n	800483e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	695b      	ldr	r3, [r3, #20]
 8004818:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681d      	ldr	r5, [r3, #0]
 8004824:	466c      	mov	r4, sp
 8004826:	f107 0314 	add.w	r3, r7, #20
 800482a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800482e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004832:	f107 0308 	add.w	r3, r7, #8
 8004836:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004838:	4628      	mov	r0, r5
 800483a:	f000 fb30 	bl	8004e9e <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fc05 	bl	8005056 <SDMMC_CmdBlockLength>
 800484c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00c      	beq.n	800486e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <HAL_SD_ConfigWideBusOperation+0x130>)
 800485a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004860:	6a3b      	ldr	r3, [r7, #32]
 8004862:	431a      	orrs	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2201      	movs	r2, #1
 8004872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8004876:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800487a:	4618      	mov	r0, r3
 800487c:	3728      	adds	r7, #40	; 0x28
 800487e:	46bd      	mov	sp, r7
 8004880:	bdb0      	pop	{r4, r5, r7, pc}
 8004882:	bf00      	nop
 8004884:	004005ff 	.word	0x004005ff

08004888 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b086      	sub	sp, #24
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004894:	f107 030c 	add.w	r3, r7, #12
 8004898:	4619      	mov	r1, r3
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f96e 	bl	8004b7c <SD_SendStatus>
 80048a0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	0a5b      	lsrs	r3, r3, #9
 80048b8:	f003 030f 	and.w	r3, r3, #15
 80048bc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80048be:	693b      	ldr	r3, [r7, #16]
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	3718      	adds	r7, #24
 80048c4:	46bd      	mov	sp, r7
 80048c6:	bd80      	pop	{r7, pc}

080048c8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80048c8:	b5b0      	push	{r4, r5, r7, lr}
 80048ca:	b094      	sub	sp, #80	; 0x50
 80048cc:	af04      	add	r7, sp, #16
 80048ce:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80048d0:	2301      	movs	r3, #1
 80048d2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f000 fb38 	bl	8004f4e <SDIO_GetPowerState>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d102      	bne.n	80048ea <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80048e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80048e8:	e0b6      	b.n	8004a58 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	2b03      	cmp	r3, #3
 80048f0:	d02f      	beq.n	8004952 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f000 fd62 	bl	80053c0 <SDMMC_CmdSendCID>
 80048fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <SD_InitCard+0x40>
    {
      return errorstate;
 8004904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004906:	e0a7      	b.n	8004a58 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2100      	movs	r1, #0
 800490e:	4618      	mov	r0, r3
 8004910:	f000 fb62 	bl	8004fd8 <SDIO_GetResponse>
 8004914:	4602      	mov	r2, r0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2104      	movs	r1, #4
 8004920:	4618      	mov	r0, r3
 8004922:	f000 fb59 	bl	8004fd8 <SDIO_GetResponse>
 8004926:	4602      	mov	r2, r0
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	2108      	movs	r1, #8
 8004932:	4618      	mov	r0, r3
 8004934:	f000 fb50 	bl	8004fd8 <SDIO_GetResponse>
 8004938:	4602      	mov	r2, r0
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	210c      	movs	r1, #12
 8004944:	4618      	mov	r0, r3
 8004946:	f000 fb47 	bl	8004fd8 <SDIO_GetResponse>
 800494a:	4602      	mov	r2, r0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004956:	2b03      	cmp	r3, #3
 8004958:	d00d      	beq.n	8004976 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f107 020e 	add.w	r2, r7, #14
 8004962:	4611      	mov	r1, r2
 8004964:	4618      	mov	r0, r3
 8004966:	f000 fd68 	bl	800543a <SDMMC_CmdSetRelAdd>
 800496a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800496c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496e:	2b00      	cmp	r3, #0
 8004970:	d001      	beq.n	8004976 <SD_InitCard+0xae>
    {
      return errorstate;
 8004972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004974:	e070      	b.n	8004a58 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497a:	2b03      	cmp	r3, #3
 800497c:	d036      	beq.n	80049ec <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800497e:	89fb      	ldrh	r3, [r7, #14]
 8004980:	461a      	mov	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498e:	041b      	lsls	r3, r3, #16
 8004990:	4619      	mov	r1, r3
 8004992:	4610      	mov	r0, r2
 8004994:	f000 fd32 	bl	80053fc <SDMMC_CmdSendCSD>
 8004998:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800499a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80049a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049a2:	e059      	b.n	8004a58 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2100      	movs	r1, #0
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 fb14 	bl	8004fd8 <SDIO_GetResponse>
 80049b0:	4602      	mov	r2, r0
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2104      	movs	r1, #4
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fb0b 	bl	8004fd8 <SDIO_GetResponse>
 80049c2:	4602      	mov	r2, r0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2108      	movs	r1, #8
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fb02 	bl	8004fd8 <SDIO_GetResponse>
 80049d4:	4602      	mov	r2, r0
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	210c      	movs	r1, #12
 80049e0:	4618      	mov	r0, r3
 80049e2:	f000 faf9 	bl	8004fd8 <SDIO_GetResponse>
 80049e6:	4602      	mov	r2, r0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	2104      	movs	r1, #4
 80049f2:	4618      	mov	r0, r3
 80049f4:	f000 faf0 	bl	8004fd8 <SDIO_GetResponse>
 80049f8:	4603      	mov	r3, r0
 80049fa:	0d1a      	lsrs	r2, r3, #20
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004a00:	f107 0310 	add.w	r3, r7, #16
 8004a04:	4619      	mov	r1, r3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7ff fcd4 	bl	80043b4 <HAL_SD_GetCardCSD>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d002      	beq.n	8004a18 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a16:	e01f      	b.n	8004a58 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6819      	ldr	r1, [r3, #0]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a20:	041b      	lsls	r3, r3, #16
 8004a22:	461a      	mov	r2, r3
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	4608      	mov	r0, r1
 8004a2a:	f000 fbe1 	bl	80051f0 <SDMMC_CmdSelDesel>
 8004a2e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <SD_InitCard+0x172>
  {
    return errorstate;
 8004a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a38:	e00e      	b.n	8004a58 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681d      	ldr	r5, [r3, #0]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	466c      	mov	r4, sp
 8004a42:	f103 0210 	add.w	r2, r3, #16
 8004a46:	ca07      	ldmia	r2, {r0, r1, r2}
 8004a48:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004a4c:	3304      	adds	r3, #4
 8004a4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 fa24 	bl	8004e9e <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004a56:	2300      	movs	r3, #0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	3740      	adds	r7, #64	; 0x40
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	bdb0      	pop	{r4, r5, r7, pc}

08004a60 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a68:	2300      	movs	r3, #0
 8004a6a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	2300      	movs	r3, #0
 8004a72:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f000 fbdc 	bl	8005236 <SDMMC_CmdGoIdleState>
 8004a7e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	e072      	b.n	8004b70 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f000 fbef 	bl	8005272 <SDMMC_CmdOperCond>
 8004a94:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00d      	beq.n	8004ab8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fbc5 	bl	8005236 <SDMMC_CmdGoIdleState>
 8004aac:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d004      	beq.n	8004abe <SD_PowerON+0x5e>
    {
      return errorstate;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	e05b      	b.n	8004b70 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d137      	bne.n	8004b36 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2100      	movs	r1, #0
 8004acc:	4618      	mov	r0, r3
 8004ace:	f000 fbef 	bl	80052b0 <SDMMC_CmdAppCommand>
 8004ad2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d02d      	beq.n	8004b36 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004ada:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004ade:	e047      	b.n	8004b70 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f000 fbe2 	bl	80052b0 <SDMMC_CmdAppCommand>
 8004aec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d001      	beq.n	8004af8 <SD_PowerON+0x98>
    {
      return errorstate;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	e03b      	b.n	8004b70 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	491e      	ldr	r1, [pc, #120]	; (8004b78 <SD_PowerON+0x118>)
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 fbf8 	bl	80052f4 <SDMMC_CmdAppOperCommand>
 8004b04:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d002      	beq.n	8004b12 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004b0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b10:	e02e      	b.n	8004b70 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2100      	movs	r1, #0
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fa5d 	bl	8004fd8 <SDIO_GetResponse>
 8004b1e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	0fdb      	lsrs	r3, r3, #31
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d101      	bne.n	8004b2c <SD_PowerON+0xcc>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <SD_PowerON+0xce>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	613b      	str	r3, [r7, #16]

    count++;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	3301      	adds	r3, #1
 8004b34:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d802      	bhi.n	8004b46 <SD_PowerON+0xe6>
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0cc      	beq.n	8004ae0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d902      	bls.n	8004b56 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b54:	e00c      	b.n	8004b70 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	645a      	str	r2, [r3, #68]	; 0x44
 8004b66:	e002      	b.n	8004b6e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004b6e:	2300      	movs	r3, #0
}
 8004b70:	4618      	mov	r0, r3
 8004b72:	3718      	adds	r7, #24
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	c1100000 	.word	0xc1100000

08004b7c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004b8c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b90:	e018      	b.n	8004bc4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9a:	041b      	lsls	r3, r3, #16
 8004b9c:	4619      	mov	r1, r3
 8004b9e:	4610      	mov	r0, r2
 8004ba0:	f000 fc6c 	bl	800547c <SDMMC_CmdSendStatus>
 8004ba4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d001      	beq.n	8004bb0 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	e009      	b.n	8004bc4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2100      	movs	r1, #0
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fa0e 	bl	8004fd8 <SDIO_GetResponse>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3710      	adds	r7, #16
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}

08004bcc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004bcc:	b580      	push	{r7, lr}
 8004bce:	b086      	sub	sp, #24
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	60fb      	str	r3, [r7, #12]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2100      	movs	r1, #0
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 f9f8 	bl	8004fd8 <SDIO_GetResponse>
 8004be8:	4603      	mov	r3, r0
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bf2:	d102      	bne.n	8004bfa <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004bf4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bf8:	e02f      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004bfa:	f107 030c 	add.w	r3, r7, #12
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f879 	bl	8004cf8 <SD_FindSCR>
 8004c06:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	e023      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d01c      	beq.n	8004c56 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f000 fb41 	bl	80052b0 <SDMMC_CmdAppCommand>
 8004c2e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	e00f      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2102      	movs	r1, #2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 fb7a 	bl	800533a <SDMMC_CmdBusWidth>
 8004c46:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d001      	beq.n	8004c52 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	e003      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c52:	2300      	movs	r3, #0
 8004c54:	e001      	b.n	8004c5a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c56:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3718      	adds	r7, #24
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b086      	sub	sp, #24
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	2100      	movs	r1, #0
 8004c78:	4618      	mov	r0, r3
 8004c7a:	f000 f9ad 	bl	8004fd8 <SDIO_GetResponse>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004c88:	d102      	bne.n	8004c90 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004c8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c8e:	e02f      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004c90:	f107 030c 	add.w	r3, r7, #12
 8004c94:	4619      	mov	r1, r3
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f82e 	bl	8004cf8 <SD_FindSCR>
 8004c9c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	e023      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d01c      	beq.n	8004cec <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f000 faf6 	bl	80052b0 <SDMMC_CmdAppCommand>
 8004cc4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d001      	beq.n	8004cd0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	e00f      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2100      	movs	r1, #0
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fb2f 	bl	800533a <SDMMC_CmdBusWidth>
 8004cdc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d001      	beq.n	8004ce8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	e003      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004ce8:	2300      	movs	r3, #0
 8004cea:	e001      	b.n	8004cf0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004cec:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3718      	adds	r7, #24
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}

08004cf8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004cf8:	b590      	push	{r4, r7, lr}
 8004cfa:	b08f      	sub	sp, #60	; 0x3c
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004d02:	f7fd fc09 	bl	8002518 <HAL_GetTick>
 8004d06:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2108      	movs	r1, #8
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f000 f999 	bl	8005056 <SDMMC_CmdBlockLength>
 8004d24:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d001      	beq.n	8004d30 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d2e:	e0b2      	b.n	8004e96 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d38:	041b      	lsls	r3, r3, #16
 8004d3a:	4619      	mov	r1, r3
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	f000 fab7 	bl	80052b0 <SDMMC_CmdAppCommand>
 8004d42:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <SD_FindSCR+0x56>
  {
    return errorstate;
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	e0a3      	b.n	8004e96 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004d52:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004d54:	2308      	movs	r3, #8
 8004d56:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004d58:	2330      	movs	r3, #48	; 0x30
 8004d5a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004d5c:	2302      	movs	r3, #2
 8004d5e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004d60:	2300      	movs	r3, #0
 8004d62:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004d64:	2301      	movs	r3, #1
 8004d66:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f107 0210 	add.w	r2, r7, #16
 8004d70:	4611      	mov	r1, r2
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f943 	bl	8004ffe <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	f000 fafe 	bl	800537e <SDMMC_CmdSendSCR>
 8004d82:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d02a      	beq.n	8004de0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d8c:	e083      	b.n	8004e96 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d00f      	beq.n	8004dbc <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6819      	ldr	r1, [r3, #0]
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	f107 0208 	add.w	r2, r7, #8
 8004da8:	18d4      	adds	r4, r2, r3
 8004daa:	4608      	mov	r0, r1
 8004dac:	f000 f8a2 	bl	8004ef4 <SDIO_ReadFIFO>
 8004db0:	4603      	mov	r3, r0
 8004db2:	6023      	str	r3, [r4, #0]
      index++;
 8004db4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db6:	3301      	adds	r3, #1
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dba:	e006      	b.n	8004dca <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d012      	beq.n	8004df0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004dca:	f7fd fba5 	bl	8002518 <HAL_GetTick>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd2:	1ad3      	subs	r3, r2, r3
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd8:	d102      	bne.n	8004de0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004dda:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004dde:	e05a      	b.n	8004e96 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0cf      	beq.n	8004d8e <SD_FindSCR+0x96>
 8004dee:	e000      	b.n	8004df2 <SD_FindSCR+0xfa>
      break;
 8004df0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df8:	f003 0308 	and.w	r3, r3, #8
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2208      	movs	r2, #8
 8004e06:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004e08:	2308      	movs	r3, #8
 8004e0a:	e044      	b.n	8004e96 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e12:	f003 0302 	and.w	r3, r3, #2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d005      	beq.n	8004e26 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004e22:	2302      	movs	r3, #2
 8004e24:	e037      	b.n	8004e96 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d005      	beq.n	8004e40 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2220      	movs	r2, #32
 8004e3a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004e3c:	2320      	movs	r3, #32
 8004e3e:	e02a      	b.n	8004e96 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f240 523a 	movw	r2, #1338	; 0x53a
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	061a      	lsls	r2, r3, #24
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	021b      	lsls	r3, r3, #8
 8004e52:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e56:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	0a1b      	lsrs	r3, r3, #8
 8004e5c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e60:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	0e1b      	lsrs	r3, r3, #24
 8004e66:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6a:	601a      	str	r2, [r3, #0]
    scr++;
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	3304      	adds	r3, #4
 8004e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	061a      	lsls	r2, r3, #24
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004e7e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e80:	68bb      	ldr	r3, [r7, #8]
 8004e82:	0a1b      	lsrs	r3, r3, #8
 8004e84:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e88:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	0e1b      	lsrs	r3, r3, #24
 8004e8e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e92:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	373c      	adds	r7, #60	; 0x3c
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd90      	pop	{r4, r7, pc}

08004e9e <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	f107 001c 	add.w	r0, r7, #28
 8004eac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004eb4:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004eb8:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004ebc:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004ec0:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004ec4:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004ec8:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004ed8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004edc:	68fa      	ldr	r2, [r7, #12]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004ee4:	2300      	movs	r3, #0
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3714      	adds	r7, #20
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	b004      	add	sp, #16
 8004ef2:	4770      	bx	lr

08004ef4 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	370c      	adds	r7, #12
 8004f06:	46bd      	mov	sp, r7
 8004f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0c:	4770      	bx	lr

08004f0e <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004f0e:	b480      	push	{r7}
 8004f10:	b083      	sub	sp, #12
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
 8004f16:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b082      	sub	sp, #8
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2203      	movs	r2, #3
 8004f3c:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004f3e:	2002      	movs	r0, #2
 8004f40:	f7fd faf6 	bl	8002530 <HAL_Delay>
  
  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0303 	and.w	r3, r3, #3
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b085      	sub	sp, #20
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
 8004f72:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f74:	2300      	movs	r3, #0
 8004f76:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f88:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004f8e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004f94:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004fa4:	f023 030f 	bic.w	r3, r3, #15
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3714      	adds	r7, #20
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr

08004fbe <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004fbe:	b480      	push	{r7}
 8004fc0:	b083      	sub	sp, #12
 8004fc2:	af00      	add	r7, sp, #0
 8004fc4:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	b2db      	uxtb	r3, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	370c      	adds	r7, #12
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr

08004fd8 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b085      	sub	sp, #20
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	3314      	adds	r3, #20
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	4413      	add	r3, r2
 8004fec:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
}  
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b085      	sub	sp, #20
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005024:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800502a:	431a      	orrs	r2, r3
                       Data->DPSM);
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8005030:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4313      	orrs	r3, r2
 8005036:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800503c:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	431a      	orrs	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8005048:	2300      	movs	r3, #0

}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b088      	sub	sp, #32
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
 800505e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8005064:	2310      	movs	r3, #16
 8005066:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005068:	2340      	movs	r3, #64	; 0x40
 800506a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005074:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005076:	f107 0308 	add.w	r3, r7, #8
 800507a:	4619      	mov	r1, r3
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f7ff ff74 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8005082:	f241 3288 	movw	r2, #5000	; 0x1388
 8005086:	2110      	movs	r1, #16
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 fa45 	bl	8005518 <SDMMC_GetCmdResp1>
 800508e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005090:	69fb      	ldr	r3, [r7, #28]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b088      	sub	sp, #32
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80050a8:	2311      	movs	r3, #17
 80050aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050ac:	2340      	movs	r3, #64	; 0x40
 80050ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050b0:	2300      	movs	r3, #0
 80050b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050ba:	f107 0308 	add.w	r3, r7, #8
 80050be:	4619      	mov	r1, r3
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f7ff ff52 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80050c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ca:	2111      	movs	r1, #17
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fa23 	bl	8005518 <SDMMC_GetCmdResp1>
 80050d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050d4:	69fb      	ldr	r3, [r7, #28]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b088      	sub	sp, #32
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80050ec:	2312      	movs	r3, #18
 80050ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050f0:	2340      	movs	r3, #64	; 0x40
 80050f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050f4:	2300      	movs	r3, #0
 80050f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050fe:	f107 0308 	add.w	r3, r7, #8
 8005102:	4619      	mov	r1, r3
 8005104:	6878      	ldr	r0, [r7, #4]
 8005106:	f7ff ff30 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800510a:	f241 3288 	movw	r2, #5000	; 0x1388
 800510e:	2112      	movs	r1, #18
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 fa01 	bl	8005518 <SDMMC_GetCmdResp1>
 8005116:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005118:	69fb      	ldr	r3, [r7, #28]
}
 800511a:	4618      	mov	r0, r3
 800511c:	3720      	adds	r7, #32
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}

08005122 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005122:	b580      	push	{r7, lr}
 8005124:	b088      	sub	sp, #32
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005130:	2318      	movs	r3, #24
 8005132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005134:	2340      	movs	r3, #64	; 0x40
 8005136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005138:	2300      	movs	r3, #0
 800513a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800513c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005140:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005142:	f107 0308 	add.w	r3, r7, #8
 8005146:	4619      	mov	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff ff0e 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800514e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005152:	2118      	movs	r1, #24
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 f9df 	bl	8005518 <SDMMC_GetCmdResp1>
 800515a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800515c:	69fb      	ldr	r3, [r7, #28]
}
 800515e:	4618      	mov	r0, r3
 8005160:	3720      	adds	r7, #32
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b088      	sub	sp, #32
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005174:	2319      	movs	r3, #25
 8005176:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005178:	2340      	movs	r3, #64	; 0x40
 800517a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800517c:	2300      	movs	r3, #0
 800517e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005180:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005184:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005186:	f107 0308 	add.w	r3, r7, #8
 800518a:	4619      	mov	r1, r3
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f7ff feec 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005192:	f241 3288 	movw	r2, #5000	; 0x1388
 8005196:	2119      	movs	r1, #25
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f9bd 	bl	8005518 <SDMMC_GetCmdResp1>
 800519e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051a0:	69fb      	ldr	r3, [r7, #28]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3720      	adds	r7, #32
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
	...

080051ac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b088      	sub	sp, #32
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80051b4:	2300      	movs	r3, #0
 80051b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80051b8:	230c      	movs	r3, #12
 80051ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051bc:	2340      	movs	r3, #64	; 0x40
 80051be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051ca:	f107 0308 	add.w	r3, r7, #8
 80051ce:	4619      	mov	r1, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff feca 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80051d6:	4a05      	ldr	r2, [pc, #20]	; (80051ec <SDMMC_CmdStopTransfer+0x40>)
 80051d8:	210c      	movs	r1, #12
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 f99c 	bl	8005518 <SDMMC_GetCmdResp1>
 80051e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051e2:	69fb      	ldr	r3, [r7, #28]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3720      	adds	r7, #32
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	05f5e100 	.word	0x05f5e100

080051f0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08a      	sub	sp, #40	; 0x28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005200:	2307      	movs	r3, #7
 8005202:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005204:	2340      	movs	r3, #64	; 0x40
 8005206:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005208:	2300      	movs	r3, #0
 800520a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800520c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005210:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005212:	f107 0310 	add.w	r3, r7, #16
 8005216:	4619      	mov	r1, r3
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff fea6 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800521e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005222:	2107      	movs	r1, #7
 8005224:	68f8      	ldr	r0, [r7, #12]
 8005226:	f000 f977 	bl	8005518 <SDMMC_GetCmdResp1>
 800522a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800522c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800522e:	4618      	mov	r0, r3
 8005230:	3728      	adds	r7, #40	; 0x28
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}

08005236 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	b088      	sub	sp, #32
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800523e:	2300      	movs	r3, #0
 8005240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8005242:	2300      	movs	r3, #0
 8005244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005246:	2300      	movs	r3, #0
 8005248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800524e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005252:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005254:	f107 0308 	add.w	r3, r7, #8
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fe85 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 f92d 	bl	80054c0 <SDMMC_GetCmdError>
 8005266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005268:	69fb      	ldr	r3, [r7, #28]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b088      	sub	sp, #32
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800527a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800527e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005280:	2308      	movs	r3, #8
 8005282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005284:	2340      	movs	r3, #64	; 0x40
 8005286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800528c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005290:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005292:	f107 0308 	add.w	r3, r7, #8
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff fe66 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fb24 	bl	80058ec <SDMMC_GetCmdResp7>
 80052a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052a6:	69fb      	ldr	r3, [r7, #28]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3720      	adds	r7, #32
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}

080052b0 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b088      	sub	sp, #32
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80052be:	2337      	movs	r3, #55	; 0x37
 80052c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052c2:	2340      	movs	r3, #64	; 0x40
 80052c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052c6:	2300      	movs	r3, #0
 80052c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052d0:	f107 0308 	add.w	r3, r7, #8
 80052d4:	4619      	mov	r1, r3
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7ff fe47 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80052dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e0:	2137      	movs	r1, #55	; 0x37
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f918 	bl	8005518 <SDMMC_GetCmdResp1>
 80052e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ea:	69fb      	ldr	r3, [r7, #28]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b088      	sub	sp, #32
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005304:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005308:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800530a:	2329      	movs	r3, #41	; 0x29
 800530c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800530e:	2340      	movs	r3, #64	; 0x40
 8005310:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005316:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800531a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800531c:	f107 0308 	add.w	r3, r7, #8
 8005320:	4619      	mov	r1, r3
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f7ff fe21 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fa2b 	bl	8005784 <SDMMC_GetCmdResp3>
 800532e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005330:	69fb      	ldr	r3, [r7, #28]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3720      	adds	r7, #32
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}

0800533a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800533a:	b580      	push	{r7, lr}
 800533c:	b088      	sub	sp, #32
 800533e:	af00      	add	r7, sp, #0
 8005340:	6078      	str	r0, [r7, #4]
 8005342:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005348:	2306      	movs	r3, #6
 800534a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800534c:	2340      	movs	r3, #64	; 0x40
 800534e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005350:	2300      	movs	r3, #0
 8005352:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005354:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005358:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800535a:	f107 0308 	add.w	r3, r7, #8
 800535e:	4619      	mov	r1, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7ff fe02 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005366:	f241 3288 	movw	r2, #5000	; 0x1388
 800536a:	2106      	movs	r1, #6
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f8d3 	bl	8005518 <SDMMC_GetCmdResp1>
 8005372:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005374:	69fb      	ldr	r3, [r7, #28]
}
 8005376:	4618      	mov	r0, r3
 8005378:	3720      	adds	r7, #32
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800537e:	b580      	push	{r7, lr}
 8005380:	b088      	sub	sp, #32
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005386:	2300      	movs	r3, #0
 8005388:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800538a:	2333      	movs	r3, #51	; 0x33
 800538c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800538e:	2340      	movs	r3, #64	; 0x40
 8005390:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800539a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800539c:	f107 0308 	add.w	r3, r7, #8
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f7ff fde1 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80053a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ac:	2133      	movs	r1, #51	; 0x33
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f8b2 	bl	8005518 <SDMMC_GetCmdResp1>
 80053b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053b6:	69fb      	ldr	r3, [r7, #28]
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3720      	adds	r7, #32
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b088      	sub	sp, #32
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80053cc:	2302      	movs	r3, #2
 80053ce:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80053d0:	23c0      	movs	r3, #192	; 0xc0
 80053d2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053dc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053de:	f107 0308 	add.w	r3, r7, #8
 80053e2:	4619      	mov	r1, r3
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff fdc0 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 f982 	bl	80056f4 <SDMMC_GetCmdResp2>
 80053f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053f2:	69fb      	ldr	r3, [r7, #28]
}
 80053f4:	4618      	mov	r0, r3
 80053f6:	3720      	adds	r7, #32
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b088      	sub	sp, #32
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800540a:	2309      	movs	r3, #9
 800540c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800540e:	23c0      	movs	r3, #192	; 0xc0
 8005410:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005412:	2300      	movs	r3, #0
 8005414:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800541a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800541c:	f107 0308 	add.w	r3, r7, #8
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fda1 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f963 	bl	80056f4 <SDMMC_GetCmdResp2>
 800542e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005430:	69fb      	ldr	r3, [r7, #28]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}

0800543a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800543a:	b580      	push	{r7, lr}
 800543c:	b088      	sub	sp, #32
 800543e:	af00      	add	r7, sp, #0
 8005440:	6078      	str	r0, [r7, #4]
 8005442:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005448:	2303      	movs	r3, #3
 800544a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800544c:	2340      	movs	r3, #64	; 0x40
 800544e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005454:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005458:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800545a:	f107 0308 	add.w	r3, r7, #8
 800545e:	4619      	mov	r1, r3
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff fd82 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	2103      	movs	r1, #3
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f000 f9c8 	bl	8005800 <SDMMC_GetCmdResp6>
 8005470:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005472:	69fb      	ldr	r3, [r7, #28]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3720      	adds	r7, #32
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}

0800547c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800548a:	230d      	movs	r3, #13
 800548c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800548e:	2340      	movs	r3, #64	; 0x40
 8005490:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005492:	2300      	movs	r3, #0
 8005494:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005496:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800549a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800549c:	f107 0308 	add.w	r3, r7, #8
 80054a0:	4619      	mov	r1, r3
 80054a2:	6878      	ldr	r0, [r7, #4]
 80054a4:	f7ff fd61 	bl	8004f6a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80054a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ac:	210d      	movs	r1, #13
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 f832 	bl	8005518 <SDMMC_GetCmdResp1>
 80054b4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054b6:	69fb      	ldr	r3, [r7, #28]
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3720      	adds	r7, #32
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}

080054c0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80054c8:	4b11      	ldr	r3, [pc, #68]	; (8005510 <SDMMC_GetCmdError+0x50>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a11      	ldr	r2, [pc, #68]	; (8005514 <SDMMC_GetCmdError+0x54>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	0a5b      	lsrs	r3, r3, #9
 80054d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80054d8:	fb02 f303 	mul.w	r3, r2, r3
 80054dc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	1e5a      	subs	r2, r3, #1
 80054e2:	60fa      	str	r2, [r7, #12]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d102      	bne.n	80054ee <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80054e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80054ec:	e009      	b.n	8005502 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d0f1      	beq.n	80054de <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	22c5      	movs	r2, #197	; 0xc5
 80054fe:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	20000004 	.word	0x20000004
 8005514:	10624dd3 	.word	0x10624dd3

08005518 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b088      	sub	sp, #32
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	460b      	mov	r3, r1
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8005526:	4b70      	ldr	r3, [pc, #448]	; (80056e8 <SDMMC_GetCmdResp1+0x1d0>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a70      	ldr	r2, [pc, #448]	; (80056ec <SDMMC_GetCmdResp1+0x1d4>)
 800552c:	fba2 2303 	umull	r2, r3, r2, r3
 8005530:	0a5a      	lsrs	r2, r3, #9
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	fb02 f303 	mul.w	r3, r2, r3
 8005538:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	1e5a      	subs	r2, r3, #1
 800553e:	61fa      	str	r2, [r7, #28]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d102      	bne.n	800554a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005544:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005548:	e0c9      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800554e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005550:	69bb      	ldr	r3, [r7, #24]
 8005552:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0ef      	beq.n	800553a <SDMMC_GetCmdResp1+0x22>
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1ea      	bne.n	800553a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005568:	f003 0304 	and.w	r3, r3, #4
 800556c:	2b00      	cmp	r3, #0
 800556e:	d004      	beq.n	800557a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2204      	movs	r2, #4
 8005574:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005576:	2304      	movs	r3, #4
 8005578:	e0b1      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	2b00      	cmp	r3, #0
 8005584:	d004      	beq.n	8005590 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2201      	movs	r2, #1
 800558a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800558c:	2301      	movs	r3, #1
 800558e:	e0a6      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	22c5      	movs	r2, #197	; 0xc5
 8005594:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005596:	68f8      	ldr	r0, [r7, #12]
 8005598:	f7ff fd11 	bl	8004fbe <SDIO_GetCommandResponse>
 800559c:	4603      	mov	r3, r0
 800559e:	461a      	mov	r2, r3
 80055a0:	7afb      	ldrb	r3, [r7, #11]
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d001      	beq.n	80055aa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e099      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80055aa:	2100      	movs	r1, #0
 80055ac:	68f8      	ldr	r0, [r7, #12]
 80055ae:	f7ff fd13 	bl	8004fd8 <SDIO_GetResponse>
 80055b2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4b4e      	ldr	r3, [pc, #312]	; (80056f0 <SDMMC_GetCmdResp1+0x1d8>)
 80055b8:	4013      	ands	r3, r2
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d101      	bne.n	80055c2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80055be:	2300      	movs	r3, #0
 80055c0:	e08d      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	da02      	bge.n	80055ce <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80055c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80055cc:	e087      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d001      	beq.n	80055dc <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80055d8:	2340      	movs	r3, #64	; 0x40
 80055da:	e080      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d001      	beq.n	80055ea <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80055e6:	2380      	movs	r3, #128	; 0x80
 80055e8:	e079      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80055f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80055f8:	e071      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005600:	2b00      	cmp	r3, #0
 8005602:	d002      	beq.n	800560a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8005604:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005608:	e069      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d002      	beq.n	800561a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8005614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005618:	e061      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005620:	2b00      	cmp	r3, #0
 8005622:	d002      	beq.n	800562a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8005624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005628:	e059      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005638:	e051      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d002      	beq.n	800564a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005644:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005648:	e049      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005650:	2b00      	cmp	r3, #0
 8005652:	d002      	beq.n	800565a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005654:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005658:	e041      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d002      	beq.n	800566a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8005664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005668:	e039      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800566a:	697b      	ldr	r3, [r7, #20]
 800566c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d002      	beq.n	800567a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005678:	e031      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005680:	2b00      	cmp	r3, #0
 8005682:	d002      	beq.n	800568a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005684:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005688:	e029      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005690:	2b00      	cmp	r3, #0
 8005692:	d002      	beq.n	800569a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005694:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005698:	e021      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d002      	beq.n	80056aa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80056a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80056a8:	e019      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d002      	beq.n	80056ba <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80056b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80056b8:	e011      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d002      	beq.n	80056ca <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80056c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80056c8:	e009      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f003 0308 	and.w	r3, r3, #8
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80056d4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80056d8:	e001      	b.n	80056de <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80056da:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3720      	adds	r7, #32
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	20000004 	.word	0x20000004
 80056ec:	10624dd3 	.word	0x10624dd3
 80056f0:	fdffe008 	.word	0xfdffe008

080056f4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056fc:	4b1f      	ldr	r3, [pc, #124]	; (800577c <SDMMC_GetCmdResp2+0x88>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a1f      	ldr	r2, [pc, #124]	; (8005780 <SDMMC_GetCmdResp2+0x8c>)
 8005702:	fba2 2303 	umull	r2, r3, r2, r3
 8005706:	0a5b      	lsrs	r3, r3, #9
 8005708:	f241 3288 	movw	r2, #5000	; 0x1388
 800570c:	fb02 f303 	mul.w	r3, r2, r3
 8005710:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	1e5a      	subs	r2, r3, #1
 8005716:	60fa      	str	r2, [r7, #12]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d102      	bne.n	8005722 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800571c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005720:	e026      	b.n	8005770 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005726:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0ef      	beq.n	8005712 <SDMMC_GetCmdResp2+0x1e>
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1ea      	bne.n	8005712 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005740:	f003 0304 	and.w	r3, r3, #4
 8005744:	2b00      	cmp	r3, #0
 8005746:	d004      	beq.n	8005752 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2204      	movs	r2, #4
 800574c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800574e:	2304      	movs	r3, #4
 8005750:	e00e      	b.n	8005770 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d004      	beq.n	8005768 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2201      	movs	r2, #1
 8005762:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005764:	2301      	movs	r3, #1
 8005766:	e003      	b.n	8005770 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	22c5      	movs	r2, #197	; 0xc5
 800576c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	20000004 	.word	0x20000004
 8005780:	10624dd3 	.word	0x10624dd3

08005784 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005784:	b480      	push	{r7}
 8005786:	b085      	sub	sp, #20
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800578c:	4b1a      	ldr	r3, [pc, #104]	; (80057f8 <SDMMC_GetCmdResp3+0x74>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	4a1a      	ldr	r2, [pc, #104]	; (80057fc <SDMMC_GetCmdResp3+0x78>)
 8005792:	fba2 2303 	umull	r2, r3, r2, r3
 8005796:	0a5b      	lsrs	r3, r3, #9
 8005798:	f241 3288 	movw	r2, #5000	; 0x1388
 800579c:	fb02 f303 	mul.w	r3, r2, r3
 80057a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1e5a      	subs	r2, r3, #1
 80057a6:	60fa      	str	r2, [r7, #12]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d102      	bne.n	80057b2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057b0:	e01b      	b.n	80057ea <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d0ef      	beq.n	80057a2 <SDMMC_GetCmdResp3+0x1e>
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d1ea      	bne.n	80057a2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d0:	f003 0304 	and.w	r3, r3, #4
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2204      	movs	r2, #4
 80057dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057de:	2304      	movs	r3, #4
 80057e0:	e003      	b.n	80057ea <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	22c5      	movs	r2, #197	; 0xc5
 80057e6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3714      	adds	r7, #20
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	20000004 	.word	0x20000004
 80057fc:	10624dd3 	.word	0x10624dd3

08005800 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	460b      	mov	r3, r1
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800580e:	4b35      	ldr	r3, [pc, #212]	; (80058e4 <SDMMC_GetCmdResp6+0xe4>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a35      	ldr	r2, [pc, #212]	; (80058e8 <SDMMC_GetCmdResp6+0xe8>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	0a5b      	lsrs	r3, r3, #9
 800581a:	f241 3288 	movw	r2, #5000	; 0x1388
 800581e:	fb02 f303 	mul.w	r3, r2, r3
 8005822:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	1e5a      	subs	r2, r3, #1
 8005828:	61fa      	str	r2, [r7, #28]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d102      	bne.n	8005834 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800582e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005832:	e052      	b.n	80058da <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005838:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005840:	2b00      	cmp	r3, #0
 8005842:	d0ef      	beq.n	8005824 <SDMMC_GetCmdResp6+0x24>
 8005844:	69bb      	ldr	r3, [r7, #24]
 8005846:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1ea      	bne.n	8005824 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005852:	f003 0304 	and.w	r3, r3, #4
 8005856:	2b00      	cmp	r3, #0
 8005858:	d004      	beq.n	8005864 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	2204      	movs	r2, #4
 800585e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005860:	2304      	movs	r3, #4
 8005862:	e03a      	b.n	80058da <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005868:	f003 0301 	and.w	r3, r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	d004      	beq.n	800587a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2201      	movs	r2, #1
 8005874:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005876:	2301      	movs	r3, #1
 8005878:	e02f      	b.n	80058da <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800587a:	68f8      	ldr	r0, [r7, #12]
 800587c:	f7ff fb9f 	bl	8004fbe <SDIO_GetCommandResponse>
 8005880:	4603      	mov	r3, r0
 8005882:	461a      	mov	r2, r3
 8005884:	7afb      	ldrb	r3, [r7, #11]
 8005886:	4293      	cmp	r3, r2
 8005888:	d001      	beq.n	800588e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800588a:	2301      	movs	r3, #1
 800588c:	e025      	b.n	80058da <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	22c5      	movs	r2, #197	; 0xc5
 8005892:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005894:	2100      	movs	r1, #0
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f7ff fb9e 	bl	8004fd8 <SDIO_GetResponse>
 800589c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d106      	bne.n	80058b6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	0c1b      	lsrs	r3, r3, #16
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80058b2:	2300      	movs	r3, #0
 80058b4:	e011      	b.n	80058da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d002      	beq.n	80058c6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80058c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80058c4:	e009      	b.n	80058da <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d002      	beq.n	80058d6 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80058d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80058d4:	e001      	b.n	80058da <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80058d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80058da:	4618      	mov	r0, r3
 80058dc:	3720      	adds	r7, #32
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}
 80058e2:	bf00      	nop
 80058e4:	20000004 	.word	0x20000004
 80058e8:	10624dd3 	.word	0x10624dd3

080058ec <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b085      	sub	sp, #20
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80058f4:	4b22      	ldr	r3, [pc, #136]	; (8005980 <SDMMC_GetCmdResp7+0x94>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a22      	ldr	r2, [pc, #136]	; (8005984 <SDMMC_GetCmdResp7+0x98>)
 80058fa:	fba2 2303 	umull	r2, r3, r2, r3
 80058fe:	0a5b      	lsrs	r3, r3, #9
 8005900:	f241 3288 	movw	r2, #5000	; 0x1388
 8005904:	fb02 f303 	mul.w	r3, r2, r3
 8005908:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	1e5a      	subs	r2, r3, #1
 800590e:	60fa      	str	r2, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d102      	bne.n	800591a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005914:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005918:	e02c      	b.n	8005974 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005926:	2b00      	cmp	r3, #0
 8005928:	d0ef      	beq.n	800590a <SDMMC_GetCmdResp7+0x1e>
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1ea      	bne.n	800590a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d004      	beq.n	800594a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2204      	movs	r2, #4
 8005944:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005946:	2304      	movs	r3, #4
 8005948:	e014      	b.n	8005974 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594e:	f003 0301 	and.w	r3, r3, #1
 8005952:	2b00      	cmp	r3, #0
 8005954:	d004      	beq.n	8005960 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800595c:	2301      	movs	r3, #1
 800595e:	e009      	b.n	8005974 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2240      	movs	r2, #64	; 0x40
 8005970:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005972:	2300      	movs	r3, #0
  
}
 8005974:	4618      	mov	r0, r3
 8005976:	3714      	adds	r7, #20
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	20000004 	.word	0x20000004
 8005984:	10624dd3 	.word	0x10624dd3

08005988 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800598c:	4904      	ldr	r1, [pc, #16]	; (80059a0 <MX_FATFS_Init+0x18>)
 800598e:	4805      	ldr	r0, [pc, #20]	; (80059a4 <MX_FATFS_Init+0x1c>)
 8005990:	f003 fbf0 	bl	8009174 <FATFS_LinkDriver>
 8005994:	4603      	mov	r3, r0
 8005996:	461a      	mov	r2, r3
 8005998:	4b03      	ldr	r3, [pc, #12]	; (80059a8 <MX_FATFS_Init+0x20>)
 800599a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800599c:	bf00      	nop
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	20000a74 	.word	0x20000a74
 80059a4:	08013d2c 	.word	0x08013d2c
 80059a8:	20000a70 	.word	0x20000a70

080059ac <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80059b0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80059c6:	f000 f879 	bl	8005abc <BSP_SD_IsDetected>
 80059ca:	4603      	mov	r3, r0
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d001      	beq.n	80059d4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	e012      	b.n	80059fa <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80059d4:	480b      	ldr	r0, [pc, #44]	; (8005a04 <BSP_SD_Init+0x48>)
 80059d6:	f7fe f8db 	bl	8003b90 <HAL_SD_Init>
 80059da:	4603      	mov	r3, r0
 80059dc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d109      	bne.n	80059f8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 80059e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80059e8:	4806      	ldr	r0, [pc, #24]	; (8005a04 <BSP_SD_Init+0x48>)
 80059ea:	f7fe feb3 	bl	8004754 <HAL_SD_ConfigWideBusOperation>
 80059ee:	4603      	mov	r3, r0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d001      	beq.n	80059f8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80059f8:	79fb      	ldrb	r3, [r7, #7]
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	3708      	adds	r7, #8
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}
 8005a02:	bf00      	nop
 8005a04:	20000988 	.word	0x20000988

08005a08 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b088      	sub	sp, #32
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	607a      	str	r2, [r7, #4]
 8005a14:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005a16:	2300      	movs	r3, #0
 8005a18:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	9300      	str	r3, [sp, #0]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	68ba      	ldr	r2, [r7, #8]
 8005a22:	68f9      	ldr	r1, [r7, #12]
 8005a24:	4806      	ldr	r0, [pc, #24]	; (8005a40 <BSP_SD_ReadBlocks+0x38>)
 8005a26:	f7fe f961 	bl	8003cec <HAL_SD_ReadBlocks>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d001      	beq.n	8005a34 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005a34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
 8005a3e:	bf00      	nop
 8005a40:	20000988 	.word	0x20000988

08005a44 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b088      	sub	sp, #32
 8005a48:	af02      	add	r7, sp, #8
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
 8005a50:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	9300      	str	r3, [sp, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	68f9      	ldr	r1, [r7, #12]
 8005a60:	4806      	ldr	r0, [pc, #24]	; (8005a7c <BSP_SD_WriteBlocks+0x38>)
 8005a62:	f7fe fb21 	bl	80040a8 <HAL_SD_WriteBlocks>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d001      	beq.n	8005a70 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005a70:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3718      	adds	r7, #24
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000988 	.word	0x20000988

08005a80 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005a84:	4805      	ldr	r0, [pc, #20]	; (8005a9c <BSP_SD_GetCardState+0x1c>)
 8005a86:	f7fe feff 	bl	8004888 <HAL_SD_GetCardState>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	2b04      	cmp	r3, #4
 8005a8e:	bf14      	ite	ne
 8005a90:	2301      	movne	r3, #1
 8005a92:	2300      	moveq	r3, #0
 8005a94:	b2db      	uxtb	r3, r3
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	bd80      	pop	{r7, pc}
 8005a9a:	bf00      	nop
 8005a9c:	20000988 	.word	0x20000988

08005aa0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005aa8:	6879      	ldr	r1, [r7, #4]
 8005aaa:	4803      	ldr	r0, [pc, #12]	; (8005ab8 <BSP_SD_GetCardInfo+0x18>)
 8005aac:	f7fe fe26 	bl	80046fc <HAL_SD_GetCardInfo>
}
 8005ab0:	bf00      	nop
 8005ab2:	3708      	adds	r7, #8
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20000988 	.word	0x20000988

08005abc <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005ac6:	79fb      	ldrb	r3, [r7, #7]
 8005ac8:	b2db      	uxtb	r3, r3
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
	...

08005ad8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	4603      	mov	r3, r0
 8005ae0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005ae2:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <SD_CheckStatus+0x38>)
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005ae8:	f7ff ffca 	bl	8005a80 <BSP_SD_GetCardState>
 8005aec:	4603      	mov	r3, r0
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d107      	bne.n	8005b02 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005af2:	4b07      	ldr	r3, [pc, #28]	; (8005b10 <SD_CheckStatus+0x38>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	f023 0301 	bic.w	r3, r3, #1
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	4b04      	ldr	r3, [pc, #16]	; (8005b10 <SD_CheckStatus+0x38>)
 8005b00:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005b02:	4b03      	ldr	r3, [pc, #12]	; (8005b10 <SD_CheckStatus+0x38>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	b2db      	uxtb	r3, r3
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	2000000d 	.word	0x2000000d

08005b14 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005b1e:	4b0b      	ldr	r3, [pc, #44]	; (8005b4c <SD_initialize+0x38>)
 8005b20:	2201      	movs	r2, #1
 8005b22:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005b24:	f7ff ff4a 	bl	80059bc <BSP_SD_Init>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d107      	bne.n	8005b3e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005b2e:	79fb      	ldrb	r3, [r7, #7]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7ff ffd1 	bl	8005ad8 <SD_CheckStatus>
 8005b36:	4603      	mov	r3, r0
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <SD_initialize+0x38>)
 8005b3c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005b3e:	4b03      	ldr	r3, [pc, #12]	; (8005b4c <SD_initialize+0x38>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	b2db      	uxtb	r3, r3
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	2000000d 	.word	0x2000000d

08005b50 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	4603      	mov	r3, r0
 8005b58:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f7ff ffbb 	bl	8005ad8 <SD_CheckStatus>
 8005b62:	4603      	mov	r3, r0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3708      	adds	r7, #8
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60b9      	str	r1, [r7, #8]
 8005b74:	607a      	str	r2, [r7, #4]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	4603      	mov	r3, r0
 8005b7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005b80:	f04f 33ff 	mov.w	r3, #4294967295
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	68b8      	ldr	r0, [r7, #8]
 8005b8a:	f7ff ff3d 	bl	8005a08 <BSP_SD_ReadBlocks>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d107      	bne.n	8005ba4 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005b94:	bf00      	nop
 8005b96:	f7ff ff73 	bl	8005a80 <BSP_SD_GetCardState>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d1fa      	bne.n	8005b96 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005ba4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	3718      	adds	r7, #24
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b086      	sub	sp, #24
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
 8005bb8:	603b      	str	r3, [r7, #0]
 8005bba:	4603      	mov	r3, r0
 8005bbc:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005bc6:	683a      	ldr	r2, [r7, #0]
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	68b8      	ldr	r0, [r7, #8]
 8005bcc:	f7ff ff3a 	bl	8005a44 <BSP_SD_WriteBlocks>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d107      	bne.n	8005be6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005bd6:	bf00      	nop
 8005bd8:	f7ff ff52 	bl	8005a80 <BSP_SD_GetCardState>
 8005bdc:	4603      	mov	r3, r0
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1fa      	bne.n	8005bd8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005be2:	2300      	movs	r3, #0
 8005be4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08c      	sub	sp, #48	; 0x30
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	603a      	str	r2, [r7, #0]
 8005bfa:	71fb      	strb	r3, [r7, #7]
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005c00:	2301      	movs	r3, #1
 8005c02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005c06:	4b25      	ldr	r3, [pc, #148]	; (8005c9c <SD_ioctl+0xac>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	f003 0301 	and.w	r3, r3, #1
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d001      	beq.n	8005c18 <SD_ioctl+0x28>
 8005c14:	2303      	movs	r3, #3
 8005c16:	e03c      	b.n	8005c92 <SD_ioctl+0xa2>

  switch (cmd)
 8005c18:	79bb      	ldrb	r3, [r7, #6]
 8005c1a:	2b03      	cmp	r3, #3
 8005c1c:	d834      	bhi.n	8005c88 <SD_ioctl+0x98>
 8005c1e:	a201      	add	r2, pc, #4	; (adr r2, 8005c24 <SD_ioctl+0x34>)
 8005c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c24:	08005c35 	.word	0x08005c35
 8005c28:	08005c3d 	.word	0x08005c3d
 8005c2c:	08005c55 	.word	0x08005c55
 8005c30:	08005c6f 	.word	0x08005c6f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c3a:	e028      	b.n	8005c8e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c3c:	f107 030c 	add.w	r3, r7, #12
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff ff2d 	bl	8005aa0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005c46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c52:	e01c      	b.n	8005c8e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c54:	f107 030c 	add.w	r3, r7, #12
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff ff21 	bl	8005aa0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c6c:	e00f      	b.n	8005c8e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005c6e:	f107 030c 	add.w	r3, r7, #12
 8005c72:	4618      	mov	r0, r3
 8005c74:	f7ff ff14 	bl	8005aa0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7a:	0a5a      	lsrs	r2, r3, #9
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005c86:	e002      	b.n	8005c8e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005c88:	2304      	movs	r3, #4
 8005c8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005c8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3730      	adds	r7, #48	; 0x30
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	2000000d 	.word	0x2000000d

08005ca0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b084      	sub	sp, #16
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	4a08      	ldr	r2, [pc, #32]	; (8005cd0 <disk_status+0x30>)
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	79fa      	ldrb	r2, [r7, #7]
 8005cb8:	4905      	ldr	r1, [pc, #20]	; (8005cd0 <disk_status+0x30>)
 8005cba:	440a      	add	r2, r1
 8005cbc:	7a12      	ldrb	r2, [r2, #8]
 8005cbe:	4610      	mov	r0, r2
 8005cc0:	4798      	blx	r3
 8005cc2:	4603      	mov	r3, r0
 8005cc4:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005cc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3710      	adds	r7, #16
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000300 	.word	0x20000300

08005cd4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	4603      	mov	r3, r0
 8005cdc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005ce2:	79fb      	ldrb	r3, [r7, #7]
 8005ce4:	4a0d      	ldr	r2, [pc, #52]	; (8005d1c <disk_initialize+0x48>)
 8005ce6:	5cd3      	ldrb	r3, [r2, r3]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d111      	bne.n	8005d10 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	4a0b      	ldr	r2, [pc, #44]	; (8005d1c <disk_initialize+0x48>)
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005cf4:	79fb      	ldrb	r3, [r7, #7]
 8005cf6:	4a09      	ldr	r2, [pc, #36]	; (8005d1c <disk_initialize+0x48>)
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	79fa      	ldrb	r2, [r7, #7]
 8005d02:	4906      	ldr	r1, [pc, #24]	; (8005d1c <disk_initialize+0x48>)
 8005d04:	440a      	add	r2, r1
 8005d06:	7a12      	ldrb	r2, [r2, #8]
 8005d08:	4610      	mov	r0, r2
 8005d0a:	4798      	blx	r3
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	20000300 	.word	0x20000300

08005d20 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005d20:	b590      	push	{r4, r7, lr}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60b9      	str	r1, [r7, #8]
 8005d28:	607a      	str	r2, [r7, #4]
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	4a0a      	ldr	r2, [pc, #40]	; (8005d5c <disk_read+0x3c>)
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4413      	add	r3, r2
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	689c      	ldr	r4, [r3, #8]
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	4a07      	ldr	r2, [pc, #28]	; (8005d5c <disk_read+0x3c>)
 8005d40:	4413      	add	r3, r2
 8005d42:	7a18      	ldrb	r0, [r3, #8]
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	68b9      	ldr	r1, [r7, #8]
 8005d4a:	47a0      	blx	r4
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d50:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd90      	pop	{r4, r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000300 	.word	0x20000300

08005d60 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005d60:	b590      	push	{r4, r7, lr}
 8005d62:	b087      	sub	sp, #28
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60b9      	str	r1, [r7, #8]
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	603b      	str	r3, [r7, #0]
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005d70:	7bfb      	ldrb	r3, [r7, #15]
 8005d72:	4a0a      	ldr	r2, [pc, #40]	; (8005d9c <disk_write+0x3c>)
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4413      	add	r3, r2
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	68dc      	ldr	r4, [r3, #12]
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
 8005d7e:	4a07      	ldr	r2, [pc, #28]	; (8005d9c <disk_write+0x3c>)
 8005d80:	4413      	add	r3, r2
 8005d82:	7a18      	ldrb	r0, [r3, #8]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	68b9      	ldr	r1, [r7, #8]
 8005d8a:	47a0      	blx	r4
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	371c      	adds	r7, #28
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd90      	pop	{r4, r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20000300 	.word	0x20000300

08005da0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	4603      	mov	r3, r0
 8005da8:	603a      	str	r2, [r7, #0]
 8005daa:	71fb      	strb	r3, [r7, #7]
 8005dac:	460b      	mov	r3, r1
 8005dae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005db0:	79fb      	ldrb	r3, [r7, #7]
 8005db2:	4a09      	ldr	r2, [pc, #36]	; (8005dd8 <disk_ioctl+0x38>)
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4413      	add	r3, r2
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	79fa      	ldrb	r2, [r7, #7]
 8005dbe:	4906      	ldr	r1, [pc, #24]	; (8005dd8 <disk_ioctl+0x38>)
 8005dc0:	440a      	add	r2, r1
 8005dc2:	7a10      	ldrb	r0, [r2, #8]
 8005dc4:	79b9      	ldrb	r1, [r7, #6]
 8005dc6:	683a      	ldr	r2, [r7, #0]
 8005dc8:	4798      	blx	r3
 8005dca:	4603      	mov	r3, r0
 8005dcc:	73fb      	strb	r3, [r7, #15]
  return res;
 8005dce:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3710      	adds	r7, #16
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	20000300 	.word	0x20000300

08005ddc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b085      	sub	sp, #20
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	3301      	adds	r3, #1
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005dec:	89fb      	ldrh	r3, [r7, #14]
 8005dee:	021b      	lsls	r3, r3, #8
 8005df0:	b21a      	sxth	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	b21b      	sxth	r3, r3
 8005df8:	4313      	orrs	r3, r2
 8005dfa:	b21b      	sxth	r3, r3
 8005dfc:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005dfe:	89fb      	ldrh	r3, [r7, #14]
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3714      	adds	r7, #20
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b085      	sub	sp, #20
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	3303      	adds	r3, #3
 8005e18:	781b      	ldrb	r3, [r3, #0]
 8005e1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	3202      	adds	r2, #2
 8005e24:	7812      	ldrb	r2, [r2, #0]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	3201      	adds	r2, #1
 8005e32:	7812      	ldrb	r2, [r2, #0]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	021b      	lsls	r3, r3, #8
 8005e3c:	687a      	ldr	r2, [r7, #4]
 8005e3e:	7812      	ldrb	r2, [r2, #0]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
	return rv;
 8005e44:	68fb      	ldr	r3, [r7, #12]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3714      	adds	r7, #20
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr

08005e52 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	1c5a      	adds	r2, r3, #1
 8005e62:	607a      	str	r2, [r7, #4]
 8005e64:	887a      	ldrh	r2, [r7, #2]
 8005e66:	b2d2      	uxtb	r2, r2
 8005e68:	701a      	strb	r2, [r3, #0]
 8005e6a:	887b      	ldrh	r3, [r7, #2]
 8005e6c:	0a1b      	lsrs	r3, r3, #8
 8005e6e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	1c5a      	adds	r2, r3, #1
 8005e74:	607a      	str	r2, [r7, #4]
 8005e76:	887a      	ldrh	r2, [r7, #2]
 8005e78:	b2d2      	uxtb	r2, r2
 8005e7a:	701a      	strb	r2, [r3, #0]
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b083      	sub	sp, #12
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	607a      	str	r2, [r7, #4]
 8005e98:	683a      	ldr	r2, [r7, #0]
 8005e9a:	b2d2      	uxtb	r2, r2
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	0a1b      	lsrs	r3, r3, #8
 8005ea2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	1c5a      	adds	r2, r3, #1
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	1c5a      	adds	r2, r3, #1
 8005eba:	607a      	str	r2, [r7, #4]
 8005ebc:	683a      	ldr	r2, [r7, #0]
 8005ebe:	b2d2      	uxtb	r2, r2
 8005ec0:	701a      	strb	r2, [r3, #0]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	0a1b      	lsrs	r3, r3, #8
 8005ec6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	1c5a      	adds	r2, r3, #1
 8005ecc:	607a      	str	r2, [r7, #4]
 8005ece:	683a      	ldr	r2, [r7, #0]
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005ee0:	b480      	push	{r7}
 8005ee2:	b087      	sub	sp, #28
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d00d      	beq.n	8005f16 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005efa:	693a      	ldr	r2, [r7, #16]
 8005efc:	1c53      	adds	r3, r2, #1
 8005efe:	613b      	str	r3, [r7, #16]
 8005f00:	697b      	ldr	r3, [r7, #20]
 8005f02:	1c59      	adds	r1, r3, #1
 8005f04:	6179      	str	r1, [r7, #20]
 8005f06:	7812      	ldrb	r2, [r2, #0]
 8005f08:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	607b      	str	r3, [r7, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f1      	bne.n	8005efa <mem_cpy+0x1a>
	}
}
 8005f16:	bf00      	nop
 8005f18:	371c      	adds	r7, #28
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005f22:	b480      	push	{r7}
 8005f24:	b087      	sub	sp, #28
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	60f8      	str	r0, [r7, #12]
 8005f2a:	60b9      	str	r1, [r7, #8]
 8005f2c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	1c5a      	adds	r2, r3, #1
 8005f36:	617a      	str	r2, [r7, #20]
 8005f38:	68ba      	ldr	r2, [r7, #8]
 8005f3a:	b2d2      	uxtb	r2, r2
 8005f3c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	607b      	str	r3, [r7, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1f3      	bne.n	8005f32 <mem_set+0x10>
}
 8005f4a:	bf00      	nop
 8005f4c:	bf00      	nop
 8005f4e:	371c      	adds	r7, #28
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005f58:	b480      	push	{r7}
 8005f5a:	b089      	sub	sp, #36	; 0x24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	60f8      	str	r0, [r7, #12]
 8005f60:	60b9      	str	r1, [r7, #8]
 8005f62:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	61fb      	str	r3, [r7, #28]
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	61fa      	str	r2, [r7, #28]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	4619      	mov	r1, r3
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	1c5a      	adds	r2, r3, #1
 8005f7e:	61ba      	str	r2, [r7, #24]
 8005f80:	781b      	ldrb	r3, [r3, #0]
 8005f82:	1acb      	subs	r3, r1, r3
 8005f84:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	3b01      	subs	r3, #1
 8005f8a:	607b      	str	r3, [r7, #4]
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d002      	beq.n	8005f98 <mem_cmp+0x40>
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d0eb      	beq.n	8005f70 <mem_cmp+0x18>

	return r;
 8005f98:	697b      	ldr	r3, [r7, #20]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3724      	adds	r7, #36	; 0x24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa4:	4770      	bx	lr

08005fa6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
 8005fae:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005fb0:	e002      	b.n	8005fb8 <chk_chr+0x12>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	607b      	str	r3, [r7, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	781b      	ldrb	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d005      	beq.n	8005fcc <chk_chr+0x26>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d1f2      	bne.n	8005fb2 <chk_chr+0xc>
	return *str;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	781b      	ldrb	r3, [r3, #0]
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	370c      	adds	r7, #12
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b085      	sub	sp, #20
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
 8005fe4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60bb      	str	r3, [r7, #8]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	60fb      	str	r3, [r7, #12]
 8005fee:	e029      	b.n	8006044 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005ff0:	4a27      	ldr	r2, [pc, #156]	; (8006090 <chk_lock+0xb4>)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	4413      	add	r3, r2
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d01d      	beq.n	800603a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ffe:	4a24      	ldr	r2, [pc, #144]	; (8006090 <chk_lock+0xb4>)
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	4413      	add	r3, r2
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	429a      	cmp	r2, r3
 800600e:	d116      	bne.n	800603e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8006010:	4a1f      	ldr	r2, [pc, #124]	; (8006090 <chk_lock+0xb4>)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	4413      	add	r3, r2
 8006018:	3304      	adds	r3, #4
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8006020:	429a      	cmp	r2, r3
 8006022:	d10c      	bne.n	800603e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006024:	4a1a      	ldr	r2, [pc, #104]	; (8006090 <chk_lock+0xb4>)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	011b      	lsls	r3, r3, #4
 800602a:	4413      	add	r3, r2
 800602c:	3308      	adds	r3, #8
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006034:	429a      	cmp	r2, r3
 8006036:	d102      	bne.n	800603e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8006038:	e007      	b.n	800604a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800603a:	2301      	movs	r3, #1
 800603c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d9d2      	bls.n	8005ff0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b02      	cmp	r3, #2
 800604e:	d109      	bne.n	8006064 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d102      	bne.n	800605c <chk_lock+0x80>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	2b02      	cmp	r3, #2
 800605a:	d101      	bne.n	8006060 <chk_lock+0x84>
 800605c:	2300      	movs	r3, #0
 800605e:	e010      	b.n	8006082 <chk_lock+0xa6>
 8006060:	2312      	movs	r3, #18
 8006062:	e00e      	b.n	8006082 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d108      	bne.n	800607c <chk_lock+0xa0>
 800606a:	4a09      	ldr	r2, [pc, #36]	; (8006090 <chk_lock+0xb4>)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	011b      	lsls	r3, r3, #4
 8006070:	4413      	add	r3, r2
 8006072:	330c      	adds	r3, #12
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800607a:	d101      	bne.n	8006080 <chk_lock+0xa4>
 800607c:	2310      	movs	r3, #16
 800607e:	e000      	b.n	8006082 <chk_lock+0xa6>
 8006080:	2300      	movs	r3, #0
}
 8006082:	4618      	mov	r0, r3
 8006084:	3714      	adds	r7, #20
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr
 800608e:	bf00      	nop
 8006090:	200002e0 	.word	0x200002e0

08006094 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006094:	b480      	push	{r7}
 8006096:	b083      	sub	sp, #12
 8006098:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800609a:	2300      	movs	r3, #0
 800609c:	607b      	str	r3, [r7, #4]
 800609e:	e002      	b.n	80060a6 <enq_lock+0x12>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	3301      	adds	r3, #1
 80060a4:	607b      	str	r3, [r7, #4]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	d806      	bhi.n	80060ba <enq_lock+0x26>
 80060ac:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <enq_lock+0x40>)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	4413      	add	r3, r2
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1f2      	bne.n	80060a0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b02      	cmp	r3, #2
 80060be:	bf14      	ite	ne
 80060c0:	2301      	movne	r3, #1
 80060c2:	2300      	moveq	r3, #0
 80060c4:	b2db      	uxtb	r3, r3
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	200002e0 	.word	0x200002e0

080060d8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80060d8:	b480      	push	{r7}
 80060da:	b085      	sub	sp, #20
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	e01f      	b.n	8006128 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80060e8:	4a41      	ldr	r2, [pc, #260]	; (80061f0 <inc_lock+0x118>)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	4413      	add	r3, r2
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d113      	bne.n	8006122 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80060fa:	4a3d      	ldr	r2, [pc, #244]	; (80061f0 <inc_lock+0x118>)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	011b      	lsls	r3, r3, #4
 8006100:	4413      	add	r3, r2
 8006102:	3304      	adds	r3, #4
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800610a:	429a      	cmp	r2, r3
 800610c:	d109      	bne.n	8006122 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800610e:	4a38      	ldr	r2, [pc, #224]	; (80061f0 <inc_lock+0x118>)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	011b      	lsls	r3, r3, #4
 8006114:	4413      	add	r3, r2
 8006116:	3308      	adds	r3, #8
 8006118:	681a      	ldr	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800611e:	429a      	cmp	r2, r3
 8006120:	d006      	beq.n	8006130 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3301      	adds	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d9dc      	bls.n	80060e8 <inc_lock+0x10>
 800612e:	e000      	b.n	8006132 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006130:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2b02      	cmp	r3, #2
 8006136:	d132      	bne.n	800619e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	e002      	b.n	8006144 <inc_lock+0x6c>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3301      	adds	r3, #1
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d806      	bhi.n	8006158 <inc_lock+0x80>
 800614a:	4a29      	ldr	r2, [pc, #164]	; (80061f0 <inc_lock+0x118>)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	4413      	add	r3, r2
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1f2      	bne.n	800613e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	2b02      	cmp	r3, #2
 800615c:	d101      	bne.n	8006162 <inc_lock+0x8a>
 800615e:	2300      	movs	r3, #0
 8006160:	e040      	b.n	80061e4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	4922      	ldr	r1, [pc, #136]	; (80061f0 <inc_lock+0x118>)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	440b      	add	r3, r1
 800616e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	491e      	ldr	r1, [pc, #120]	; (80061f0 <inc_lock+0x118>)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	440b      	add	r3, r1
 800617c:	3304      	adds	r3, #4
 800617e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	695a      	ldr	r2, [r3, #20]
 8006184:	491a      	ldr	r1, [pc, #104]	; (80061f0 <inc_lock+0x118>)
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	440b      	add	r3, r1
 800618c:	3308      	adds	r3, #8
 800618e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006190:	4a17      	ldr	r2, [pc, #92]	; (80061f0 <inc_lock+0x118>)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	4413      	add	r3, r2
 8006198:	330c      	adds	r3, #12
 800619a:	2200      	movs	r2, #0
 800619c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d009      	beq.n	80061b8 <inc_lock+0xe0>
 80061a4:	4a12      	ldr	r2, [pc, #72]	; (80061f0 <inc_lock+0x118>)
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	011b      	lsls	r3, r3, #4
 80061aa:	4413      	add	r3, r2
 80061ac:	330c      	adds	r3, #12
 80061ae:	881b      	ldrh	r3, [r3, #0]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d001      	beq.n	80061b8 <inc_lock+0xe0>
 80061b4:	2300      	movs	r3, #0
 80061b6:	e015      	b.n	80061e4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d108      	bne.n	80061d0 <inc_lock+0xf8>
 80061be:	4a0c      	ldr	r2, [pc, #48]	; (80061f0 <inc_lock+0x118>)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	4413      	add	r3, r2
 80061c6:	330c      	adds	r3, #12
 80061c8:	881b      	ldrh	r3, [r3, #0]
 80061ca:	3301      	adds	r3, #1
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	e001      	b.n	80061d4 <inc_lock+0xfc>
 80061d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061d4:	4906      	ldr	r1, [pc, #24]	; (80061f0 <inc_lock+0x118>)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	011b      	lsls	r3, r3, #4
 80061da:	440b      	add	r3, r1
 80061dc:	330c      	adds	r3, #12
 80061de:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3714      	adds	r7, #20
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr
 80061f0:	200002e0 	.word	0x200002e0

080061f4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	3b01      	subs	r3, #1
 8006200:	607b      	str	r3, [r7, #4]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2b01      	cmp	r3, #1
 8006206:	d825      	bhi.n	8006254 <dec_lock+0x60>
		n = Files[i].ctr;
 8006208:	4a17      	ldr	r2, [pc, #92]	; (8006268 <dec_lock+0x74>)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	4413      	add	r3, r2
 8006210:	330c      	adds	r3, #12
 8006212:	881b      	ldrh	r3, [r3, #0]
 8006214:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8006216:	89fb      	ldrh	r3, [r7, #14]
 8006218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800621c:	d101      	bne.n	8006222 <dec_lock+0x2e>
 800621e:	2300      	movs	r3, #0
 8006220:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8006222:	89fb      	ldrh	r3, [r7, #14]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d002      	beq.n	800622e <dec_lock+0x3a>
 8006228:	89fb      	ldrh	r3, [r7, #14]
 800622a:	3b01      	subs	r3, #1
 800622c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800622e:	4a0e      	ldr	r2, [pc, #56]	; (8006268 <dec_lock+0x74>)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	011b      	lsls	r3, r3, #4
 8006234:	4413      	add	r3, r2
 8006236:	330c      	adds	r3, #12
 8006238:	89fa      	ldrh	r2, [r7, #14]
 800623a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800623c:	89fb      	ldrh	r3, [r7, #14]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d105      	bne.n	800624e <dec_lock+0x5a>
 8006242:	4a09      	ldr	r2, [pc, #36]	; (8006268 <dec_lock+0x74>)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	4413      	add	r3, r2
 800624a:	2200      	movs	r2, #0
 800624c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800624e:	2300      	movs	r3, #0
 8006250:	737b      	strb	r3, [r7, #13]
 8006252:	e001      	b.n	8006258 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8006254:	2302      	movs	r3, #2
 8006256:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006258:	7b7b      	ldrb	r3, [r7, #13]
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	200002e0 	.word	0x200002e0

0800626c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006274:	2300      	movs	r3, #0
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	e010      	b.n	800629c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800627a:	4a0d      	ldr	r2, [pc, #52]	; (80062b0 <clear_lock+0x44>)
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	011b      	lsls	r3, r3, #4
 8006280:	4413      	add	r3, r2
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	429a      	cmp	r2, r3
 8006288:	d105      	bne.n	8006296 <clear_lock+0x2a>
 800628a:	4a09      	ldr	r2, [pc, #36]	; (80062b0 <clear_lock+0x44>)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	4413      	add	r3, r2
 8006292:	2200      	movs	r2, #0
 8006294:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	3301      	adds	r3, #1
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b01      	cmp	r3, #1
 80062a0:	d9eb      	bls.n	800627a <clear_lock+0xe>
	}
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	200002e0 	.word	0x200002e0

080062b4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b086      	sub	sp, #24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	78db      	ldrb	r3, [r3, #3]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d034      	beq.n	8006332 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062cc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	7858      	ldrb	r0, [r3, #1]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80062d8:	2301      	movs	r3, #1
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	f7ff fd40 	bl	8005d60 <disk_write>
 80062e0:	4603      	mov	r3, r0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <sync_window+0x38>
			res = FR_DISK_ERR;
 80062e6:	2301      	movs	r3, #1
 80062e8:	73fb      	strb	r3, [r7, #15]
 80062ea:	e022      	b.n	8006332 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	1ad2      	subs	r2, r2, r3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	69db      	ldr	r3, [r3, #28]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d217      	bcs.n	8006332 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	789b      	ldrb	r3, [r3, #2]
 8006306:	613b      	str	r3, [r7, #16]
 8006308:	e010      	b.n	800632c <sync_window+0x78>
					wsect += fs->fsize;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	69db      	ldr	r3, [r3, #28]
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	4413      	add	r3, r2
 8006312:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	7858      	ldrb	r0, [r3, #1]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800631e:	2301      	movs	r3, #1
 8006320:	697a      	ldr	r2, [r7, #20]
 8006322:	f7ff fd1d 	bl	8005d60 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3b01      	subs	r3, #1
 800632a:	613b      	str	r3, [r7, #16]
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d8eb      	bhi.n	800630a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006332:	7bfb      	ldrb	r3, [r7, #15]
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}

0800633c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
 8006344:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800634e:	683a      	ldr	r2, [r7, #0]
 8006350:	429a      	cmp	r2, r3
 8006352:	d01b      	beq.n	800638c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff ffad 	bl	80062b4 <sync_window>
 800635a:	4603      	mov	r3, r0
 800635c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d113      	bne.n	800638c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	7858      	ldrb	r0, [r3, #1]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800636e:	2301      	movs	r3, #1
 8006370:	683a      	ldr	r2, [r7, #0]
 8006372:	f7ff fcd5 	bl	8005d20 <disk_read>
 8006376:	4603      	mov	r3, r0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d004      	beq.n	8006386 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800637c:	f04f 33ff 	mov.w	r3, #4294967295
 8006380:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006382:	2301      	movs	r3, #1
 8006384:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800638c:	7bfb      	ldrb	r3, [r7, #15]
}
 800638e:	4618      	mov	r0, r3
 8006390:	3710      	adds	r7, #16
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
	...

08006398 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff ff87 	bl	80062b4 <sync_window>
 80063a6:	4603      	mov	r3, r0
 80063a8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80063aa:	7bfb      	ldrb	r3, [r7, #15]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d158      	bne.n	8006462 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	2b03      	cmp	r3, #3
 80063b6:	d148      	bne.n	800644a <sync_fs+0xb2>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	791b      	ldrb	r3, [r3, #4]
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d144      	bne.n	800644a <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	3334      	adds	r3, #52	; 0x34
 80063c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80063c8:	2100      	movs	r1, #0
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7ff fda9 	bl	8005f22 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	3334      	adds	r3, #52	; 0x34
 80063d4:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80063d8:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80063dc:	4618      	mov	r0, r3
 80063de:	f7ff fd38 	bl	8005e52 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	3334      	adds	r3, #52	; 0x34
 80063e6:	4921      	ldr	r1, [pc, #132]	; (800646c <sync_fs+0xd4>)
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff fd4d 	bl	8005e88 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3334      	adds	r3, #52	; 0x34
 80063f2:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80063f6:	491e      	ldr	r1, [pc, #120]	; (8006470 <sync_fs+0xd8>)
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7ff fd45 	bl	8005e88 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	3334      	adds	r3, #52	; 0x34
 8006402:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	695b      	ldr	r3, [r3, #20]
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f7ff fd3b 	bl	8005e88 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	3334      	adds	r3, #52	; 0x34
 8006416:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	4619      	mov	r1, r3
 8006420:	4610      	mov	r0, r2
 8006422:	f7ff fd31 	bl	8005e88 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	1c5a      	adds	r2, r3, #1
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	7858      	ldrb	r0, [r3, #1]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800643e:	2301      	movs	r3, #1
 8006440:	f7ff fc8e 	bl	8005d60 <disk_write>
			fs->fsi_flag = 0;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	785b      	ldrb	r3, [r3, #1]
 800644e:	2200      	movs	r2, #0
 8006450:	2100      	movs	r1, #0
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff fca4 	bl	8005da0 <disk_ioctl>
 8006458:	4603      	mov	r3, r0
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <sync_fs+0xca>
 800645e:	2301      	movs	r3, #1
 8006460:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8006462:	7bfb      	ldrb	r3, [r7, #15]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	41615252 	.word	0x41615252
 8006470:	61417272 	.word	0x61417272

08006474 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	3b02      	subs	r3, #2
 8006482:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	699b      	ldr	r3, [r3, #24]
 8006488:	3b02      	subs	r3, #2
 800648a:	683a      	ldr	r2, [r7, #0]
 800648c:	429a      	cmp	r2, r3
 800648e:	d301      	bcc.n	8006494 <clust2sect+0x20>
 8006490:	2300      	movs	r3, #0
 8006492:	e008      	b.n	80064a6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	895b      	ldrh	r3, [r3, #10]
 8006498:	461a      	mov	r2, r3
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	fb03 f202 	mul.w	r2, r3, r2
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064a4:	4413      	add	r3, r2
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	370c      	adds	r7, #12
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr

080064b2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b086      	sub	sp, #24
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
 80064ba:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d904      	bls.n	80064d2 <get_fat+0x20>
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d302      	bcc.n	80064d8 <get_fat+0x26>
		val = 1;	/* Internal error */
 80064d2:	2301      	movs	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e08f      	b.n	80065f8 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80064d8:	f04f 33ff 	mov.w	r3, #4294967295
 80064dc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80064de:	693b      	ldr	r3, [r7, #16]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d062      	beq.n	80065ac <get_fat+0xfa>
 80064e6:	2b03      	cmp	r3, #3
 80064e8:	dc7c      	bgt.n	80065e4 <get_fat+0x132>
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d002      	beq.n	80064f4 <get_fat+0x42>
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d042      	beq.n	8006578 <get_fat+0xc6>
 80064f2:	e077      	b.n	80065e4 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	085b      	lsrs	r3, r3, #1
 80064fc:	68fa      	ldr	r2, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	0a5b      	lsrs	r3, r3, #9
 800650a:	4413      	add	r3, r2
 800650c:	4619      	mov	r1, r3
 800650e:	6938      	ldr	r0, [r7, #16]
 8006510:	f7ff ff14 	bl	800633c <move_window>
 8006514:	4603      	mov	r3, r0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d167      	bne.n	80065ea <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	1c5a      	adds	r2, r3, #1
 800651e:	60fa      	str	r2, [r7, #12]
 8006520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4413      	add	r3, r2
 8006528:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800652c:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	0a5b      	lsrs	r3, r3, #9
 8006536:	4413      	add	r3, r2
 8006538:	4619      	mov	r1, r3
 800653a:	6938      	ldr	r0, [r7, #16]
 800653c:	f7ff fefe 	bl	800633c <move_window>
 8006540:	4603      	mov	r3, r0
 8006542:	2b00      	cmp	r3, #0
 8006544:	d153      	bne.n	80065ee <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4413      	add	r3, r2
 8006550:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006554:	021b      	lsls	r3, r3, #8
 8006556:	461a      	mov	r2, r3
 8006558:	68bb      	ldr	r3, [r7, #8]
 800655a:	4313      	orrs	r3, r2
 800655c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	f003 0301 	and.w	r3, r3, #1
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <get_fat+0xbc>
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	091b      	lsrs	r3, r3, #4
 800656c:	e002      	b.n	8006574 <get_fat+0xc2>
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006574:	617b      	str	r3, [r7, #20]
			break;
 8006576:	e03f      	b.n	80065f8 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	0a1b      	lsrs	r3, r3, #8
 8006580:	4413      	add	r3, r2
 8006582:	4619      	mov	r1, r3
 8006584:	6938      	ldr	r0, [r7, #16]
 8006586:	f7ff fed9 	bl	800633c <move_window>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	d130      	bne.n	80065f2 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	005b      	lsls	r3, r3, #1
 800659a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800659e:	4413      	add	r3, r2
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff fc1b 	bl	8005ddc <ld_word>
 80065a6:	4603      	mov	r3, r0
 80065a8:	617b      	str	r3, [r7, #20]
			break;
 80065aa:	e025      	b.n	80065f8 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	09db      	lsrs	r3, r3, #7
 80065b4:	4413      	add	r3, r2
 80065b6:	4619      	mov	r1, r3
 80065b8:	6938      	ldr	r0, [r7, #16]
 80065ba:	f7ff febf 	bl	800633c <move_window>
 80065be:	4603      	mov	r3, r0
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d118      	bne.n	80065f6 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80065d2:	4413      	add	r3, r2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7ff fc19 	bl	8005e0c <ld_dword>
 80065da:	4603      	mov	r3, r0
 80065dc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80065e0:	617b      	str	r3, [r7, #20]
			break;
 80065e2:	e009      	b.n	80065f8 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80065e4:	2301      	movs	r3, #1
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	e006      	b.n	80065f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065ea:	bf00      	nop
 80065ec:	e004      	b.n	80065f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065ee:	bf00      	nop
 80065f0:	e002      	b.n	80065f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80065f2:	bf00      	nop
 80065f4:	e000      	b.n	80065f8 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065f6:	bf00      	nop
		}
	}

	return val;
 80065f8:	697b      	ldr	r3, [r7, #20]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3718      	adds	r7, #24
 80065fe:	46bd      	mov	sp, r7
 8006600:	bd80      	pop	{r7, pc}

08006602 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006602:	b590      	push	{r4, r7, lr}
 8006604:	b089      	sub	sp, #36	; 0x24
 8006606:	af00      	add	r7, sp, #0
 8006608:	60f8      	str	r0, [r7, #12]
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800660e:	2302      	movs	r3, #2
 8006610:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	2b01      	cmp	r3, #1
 8006616:	f240 80d2 	bls.w	80067be <put_fat+0x1bc>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	699b      	ldr	r3, [r3, #24]
 800661e:	68ba      	ldr	r2, [r7, #8]
 8006620:	429a      	cmp	r2, r3
 8006622:	f080 80cc 	bcs.w	80067be <put_fat+0x1bc>
		switch (fs->fs_type) {
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	781b      	ldrb	r3, [r3, #0]
 800662a:	2b03      	cmp	r3, #3
 800662c:	f000 8096 	beq.w	800675c <put_fat+0x15a>
 8006630:	2b03      	cmp	r3, #3
 8006632:	f300 80cd 	bgt.w	80067d0 <put_fat+0x1ce>
 8006636:	2b01      	cmp	r3, #1
 8006638:	d002      	beq.n	8006640 <put_fat+0x3e>
 800663a:	2b02      	cmp	r3, #2
 800663c:	d06e      	beq.n	800671c <put_fat+0x11a>
 800663e:	e0c7      	b.n	80067d0 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006640:	68bb      	ldr	r3, [r7, #8]
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	085b      	lsrs	r3, r3, #1
 8006648:	69ba      	ldr	r2, [r7, #24]
 800664a:	4413      	add	r3, r2
 800664c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	0a5b      	lsrs	r3, r3, #9
 8006656:	4413      	add	r3, r2
 8006658:	4619      	mov	r1, r3
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f7ff fe6e 	bl	800633c <move_window>
 8006660:	4603      	mov	r3, r0
 8006662:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006664:	7ffb      	ldrb	r3, [r7, #31]
 8006666:	2b00      	cmp	r3, #0
 8006668:	f040 80ab 	bne.w	80067c2 <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006672:	69bb      	ldr	r3, [r7, #24]
 8006674:	1c59      	adds	r1, r3, #1
 8006676:	61b9      	str	r1, [r7, #24]
 8006678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800667c:	4413      	add	r3, r2
 800667e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00d      	beq.n	80066a6 <put_fat+0xa4>
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	b25b      	sxtb	r3, r3
 8006690:	f003 030f 	and.w	r3, r3, #15
 8006694:	b25a      	sxtb	r2, r3
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	b2db      	uxtb	r3, r3
 800669a:	011b      	lsls	r3, r3, #4
 800669c:	b25b      	sxtb	r3, r3
 800669e:	4313      	orrs	r3, r2
 80066a0:	b25b      	sxtb	r3, r3
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	e001      	b.n	80066aa <put_fat+0xa8>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	697a      	ldr	r2, [r7, #20]
 80066ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2201      	movs	r2, #1
 80066b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	0a5b      	lsrs	r3, r3, #9
 80066bc:	4413      	add	r3, r2
 80066be:	4619      	mov	r1, r3
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff fe3b 	bl	800633c <move_window>
 80066c6:	4603      	mov	r3, r0
 80066c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066ca:	7ffb      	ldrb	r3, [r7, #31]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d17a      	bne.n	80067c6 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066dc:	4413      	add	r3, r2
 80066de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <put_fat+0xf0>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	091b      	lsrs	r3, r3, #4
 80066ee:	b2db      	uxtb	r3, r3
 80066f0:	e00e      	b.n	8006710 <put_fat+0x10e>
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	781b      	ldrb	r3, [r3, #0]
 80066f6:	b25b      	sxtb	r3, r3
 80066f8:	f023 030f 	bic.w	r3, r3, #15
 80066fc:	b25a      	sxtb	r2, r3
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	0a1b      	lsrs	r3, r3, #8
 8006702:	b25b      	sxtb	r3, r3
 8006704:	f003 030f 	and.w	r3, r3, #15
 8006708:	b25b      	sxtb	r3, r3
 800670a:	4313      	orrs	r3, r2
 800670c:	b25b      	sxtb	r3, r3
 800670e:	b2db      	uxtb	r3, r3
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2201      	movs	r2, #1
 8006718:	70da      	strb	r2, [r3, #3]
			break;
 800671a:	e059      	b.n	80067d0 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	0a1b      	lsrs	r3, r3, #8
 8006724:	4413      	add	r3, r2
 8006726:	4619      	mov	r1, r3
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f7ff fe07 	bl	800633c <move_window>
 800672e:	4603      	mov	r3, r0
 8006730:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006732:	7ffb      	ldrb	r3, [r7, #31]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d148      	bne.n	80067ca <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	005b      	lsls	r3, r3, #1
 8006742:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006746:	4413      	add	r3, r2
 8006748:	687a      	ldr	r2, [r7, #4]
 800674a:	b292      	uxth	r2, r2
 800674c:	4611      	mov	r1, r2
 800674e:	4618      	mov	r0, r3
 8006750:	f7ff fb7f 	bl	8005e52 <st_word>
			fs->wflag = 1;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	70da      	strb	r2, [r3, #3]
			break;
 800675a:	e039      	b.n	80067d0 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	09db      	lsrs	r3, r3, #7
 8006764:	4413      	add	r3, r2
 8006766:	4619      	mov	r1, r3
 8006768:	68f8      	ldr	r0, [r7, #12]
 800676a:	f7ff fde7 	bl	800633c <move_window>
 800676e:	4603      	mov	r3, r0
 8006770:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006772:	7ffb      	ldrb	r3, [r7, #31]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d12a      	bne.n	80067ce <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	009b      	lsls	r3, r3, #2
 8006788:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800678c:	4413      	add	r3, r2
 800678e:	4618      	mov	r0, r3
 8006790:	f7ff fb3c 	bl	8005e0c <ld_dword>
 8006794:	4603      	mov	r3, r0
 8006796:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800679a:	4323      	orrs	r3, r4
 800679c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80067ac:	4413      	add	r3, r2
 80067ae:	6879      	ldr	r1, [r7, #4]
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff fb69 	bl	8005e88 <st_dword>
			fs->wflag = 1;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2201      	movs	r2, #1
 80067ba:	70da      	strb	r2, [r3, #3]
			break;
 80067bc:	e008      	b.n	80067d0 <put_fat+0x1ce>
		}
	}
 80067be:	bf00      	nop
 80067c0:	e006      	b.n	80067d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80067c2:	bf00      	nop
 80067c4:	e004      	b.n	80067d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80067c6:	bf00      	nop
 80067c8:	e002      	b.n	80067d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80067ca:	bf00      	nop
 80067cc:	e000      	b.n	80067d0 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80067ce:	bf00      	nop
	return res;
 80067d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3724      	adds	r7, #36	; 0x24
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd90      	pop	{r4, r7, pc}

080067da <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80067da:	b580      	push	{r7, lr}
 80067dc:	b088      	sub	sp, #32
 80067de:	af00      	add	r7, sp, #0
 80067e0:	60f8      	str	r0, [r7, #12]
 80067e2:	60b9      	str	r1, [r7, #8]
 80067e4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80067e6:	2300      	movs	r3, #0
 80067e8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d904      	bls.n	8006800 <remove_chain+0x26>
 80067f6:	69bb      	ldr	r3, [r7, #24]
 80067f8:	699b      	ldr	r3, [r3, #24]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d301      	bcc.n	8006804 <remove_chain+0x2a>
 8006800:	2302      	movs	r3, #2
 8006802:	e04b      	b.n	800689c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00c      	beq.n	8006824 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800680a:	f04f 32ff 	mov.w	r2, #4294967295
 800680e:	6879      	ldr	r1, [r7, #4]
 8006810:	69b8      	ldr	r0, [r7, #24]
 8006812:	f7ff fef6 	bl	8006602 <put_fat>
 8006816:	4603      	mov	r3, r0
 8006818:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800681a:	7ffb      	ldrb	r3, [r7, #31]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <remove_chain+0x4a>
 8006820:	7ffb      	ldrb	r3, [r7, #31]
 8006822:	e03b      	b.n	800689c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006824:	68b9      	ldr	r1, [r7, #8]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7ff fe43 	bl	80064b2 <get_fat>
 800682c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d031      	beq.n	8006898 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <remove_chain+0x64>
 800683a:	2302      	movs	r3, #2
 800683c:	e02e      	b.n	800689c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800683e:	697b      	ldr	r3, [r7, #20]
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006844:	d101      	bne.n	800684a <remove_chain+0x70>
 8006846:	2301      	movs	r3, #1
 8006848:	e028      	b.n	800689c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800684a:	2200      	movs	r2, #0
 800684c:	68b9      	ldr	r1, [r7, #8]
 800684e:	69b8      	ldr	r0, [r7, #24]
 8006850:	f7ff fed7 	bl	8006602 <put_fat>
 8006854:	4603      	mov	r3, r0
 8006856:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006858:	7ffb      	ldrb	r3, [r7, #31]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d001      	beq.n	8006862 <remove_chain+0x88>
 800685e:	7ffb      	ldrb	r3, [r7, #31]
 8006860:	e01c      	b.n	800689c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	695a      	ldr	r2, [r3, #20]
 8006866:	69bb      	ldr	r3, [r7, #24]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	3b02      	subs	r3, #2
 800686c:	429a      	cmp	r2, r3
 800686e:	d20b      	bcs.n	8006888 <remove_chain+0xae>
			fs->free_clst++;
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	1c5a      	adds	r2, r3, #1
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	791b      	ldrb	r3, [r3, #4]
 800687e:	f043 0301 	orr.w	r3, r3, #1
 8006882:	b2da      	uxtb	r2, r3
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	68ba      	ldr	r2, [r7, #8]
 8006892:	429a      	cmp	r2, r3
 8006894:	d3c6      	bcc.n	8006824 <remove_chain+0x4a>
 8006896:	e000      	b.n	800689a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006898:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3720      	adds	r7, #32
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b088      	sub	sp, #32
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
 80068ac:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d10d      	bne.n	80068d6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	691b      	ldr	r3, [r3, #16]
 80068be:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d004      	beq.n	80068d0 <create_chain+0x2c>
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	69ba      	ldr	r2, [r7, #24]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d31b      	bcc.n	8006908 <create_chain+0x64>
 80068d0:	2301      	movs	r3, #1
 80068d2:	61bb      	str	r3, [r7, #24]
 80068d4:	e018      	b.n	8006908 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80068d6:	6839      	ldr	r1, [r7, #0]
 80068d8:	6878      	ldr	r0, [r7, #4]
 80068da:	f7ff fdea 	bl	80064b2 <get_fat>
 80068de:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d801      	bhi.n	80068ea <create_chain+0x46>
 80068e6:	2301      	movs	r3, #1
 80068e8:	e070      	b.n	80069cc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f0:	d101      	bne.n	80068f6 <create_chain+0x52>
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	e06a      	b.n	80069cc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80068f6:	693b      	ldr	r3, [r7, #16]
 80068f8:	699b      	ldr	r3, [r3, #24]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d201      	bcs.n	8006904 <create_chain+0x60>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	e063      	b.n	80069cc <create_chain+0x128>
		scl = clst;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	3301      	adds	r3, #1
 8006910:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	69fa      	ldr	r2, [r7, #28]
 8006918:	429a      	cmp	r2, r3
 800691a:	d307      	bcc.n	800692c <create_chain+0x88>
				ncl = 2;
 800691c:	2302      	movs	r3, #2
 800691e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006920:	69fa      	ldr	r2, [r7, #28]
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	429a      	cmp	r2, r3
 8006926:	d901      	bls.n	800692c <create_chain+0x88>
 8006928:	2300      	movs	r3, #0
 800692a:	e04f      	b.n	80069cc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800692c:	69f9      	ldr	r1, [r7, #28]
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f7ff fdbf 	bl	80064b2 <get_fat>
 8006934:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00e      	beq.n	800695a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b01      	cmp	r3, #1
 8006940:	d003      	beq.n	800694a <create_chain+0xa6>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006948:	d101      	bne.n	800694e <create_chain+0xaa>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	e03e      	b.n	80069cc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800694e:	69fa      	ldr	r2, [r7, #28]
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	429a      	cmp	r2, r3
 8006954:	d1da      	bne.n	800690c <create_chain+0x68>
 8006956:	2300      	movs	r3, #0
 8006958:	e038      	b.n	80069cc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800695a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800695c:	f04f 32ff 	mov.w	r2, #4294967295
 8006960:	69f9      	ldr	r1, [r7, #28]
 8006962:	6938      	ldr	r0, [r7, #16]
 8006964:	f7ff fe4d 	bl	8006602 <put_fat>
 8006968:	4603      	mov	r3, r0
 800696a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800696c:	7dfb      	ldrb	r3, [r7, #23]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d109      	bne.n	8006986 <create_chain+0xe2>
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d006      	beq.n	8006986 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006978:	69fa      	ldr	r2, [r7, #28]
 800697a:	6839      	ldr	r1, [r7, #0]
 800697c:	6938      	ldr	r0, [r7, #16]
 800697e:	f7ff fe40 	bl	8006602 <put_fat>
 8006982:	4603      	mov	r3, r0
 8006984:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006986:	7dfb      	ldrb	r3, [r7, #23]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d116      	bne.n	80069ba <create_chain+0x116>
		fs->last_clst = ncl;
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	695a      	ldr	r2, [r3, #20]
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	699b      	ldr	r3, [r3, #24]
 800699a:	3b02      	subs	r3, #2
 800699c:	429a      	cmp	r2, r3
 800699e:	d804      	bhi.n	80069aa <create_chain+0x106>
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	695b      	ldr	r3, [r3, #20]
 80069a4:	1e5a      	subs	r2, r3, #1
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	791b      	ldrb	r3, [r3, #4]
 80069ae:	f043 0301 	orr.w	r3, r3, #1
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	711a      	strb	r2, [r3, #4]
 80069b8:	e007      	b.n	80069ca <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80069ba:	7dfb      	ldrb	r3, [r7, #23]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d102      	bne.n	80069c6 <create_chain+0x122>
 80069c0:	f04f 33ff 	mov.w	r3, #4294967295
 80069c4:	e000      	b.n	80069c8 <create_chain+0x124>
 80069c6:	2301      	movs	r3, #1
 80069c8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80069ca:	69fb      	ldr	r3, [r7, #28]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3720      	adds	r7, #32
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	3304      	adds	r3, #4
 80069ea:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	0a5b      	lsrs	r3, r3, #9
 80069f0:	68fa      	ldr	r2, [r7, #12]
 80069f2:	8952      	ldrh	r2, [r2, #10]
 80069f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80069f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1d1a      	adds	r2, r3, #4
 80069fe:	613a      	str	r2, [r7, #16]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d101      	bne.n	8006a0e <clmt_clust+0x3a>
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	e010      	b.n	8006a30 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	68bb      	ldr	r3, [r7, #8]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d307      	bcc.n	8006a26 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	617b      	str	r3, [r7, #20]
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	3304      	adds	r3, #4
 8006a22:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a24:	e7e9      	b.n	80069fa <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8006a26:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	4413      	add	r3, r2
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	371c      	adds	r7, #28
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b086      	sub	sp, #24
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a52:	d204      	bcs.n	8006a5e <dir_sdi+0x22>
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	f003 031f 	and.w	r3, r3, #31
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d001      	beq.n	8006a62 <dir_sdi+0x26>
		return FR_INT_ERR;
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e063      	b.n	8006b2a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	683a      	ldr	r2, [r7, #0]
 8006a66:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d106      	bne.n	8006a82 <dir_sdi+0x46>
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d902      	bls.n	8006a82 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a80:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10c      	bne.n	8006aa2 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	095b      	lsrs	r3, r3, #5
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	8912      	ldrh	r2, [r2, #8]
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d301      	bcc.n	8006a98 <dir_sdi+0x5c>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e048      	b.n	8006b2a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	61da      	str	r2, [r3, #28]
 8006aa0:	e029      	b.n	8006af6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	895b      	ldrh	r3, [r3, #10]
 8006aa6:	025b      	lsls	r3, r3, #9
 8006aa8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006aaa:	e019      	b.n	8006ae0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6979      	ldr	r1, [r7, #20]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7ff fcfe 	bl	80064b2 <get_fat>
 8006ab6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	d101      	bne.n	8006ac4 <dir_sdi+0x88>
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e032      	b.n	8006b2a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d904      	bls.n	8006ad4 <dir_sdi+0x98>
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d301      	bcc.n	8006ad8 <dir_sdi+0x9c>
 8006ad4:	2302      	movs	r3, #2
 8006ad6:	e028      	b.n	8006b2a <dir_sdi+0xee>
			ofs -= csz;
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006ae0:	683a      	ldr	r2, [r7, #0]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	d2e1      	bcs.n	8006aac <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006ae8:	6979      	ldr	r1, [r7, #20]
 8006aea:	6938      	ldr	r0, [r7, #16]
 8006aec:	f7ff fcc2 	bl	8006474 <clust2sect>
 8006af0:	4602      	mov	r2, r0
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69db      	ldr	r3, [r3, #28]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d101      	bne.n	8006b08 <dir_sdi+0xcc>
 8006b04:	2302      	movs	r3, #2
 8006b06:	e010      	b.n	8006b2a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	69da      	ldr	r2, [r3, #28]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	0a5b      	lsrs	r3, r3, #9
 8006b10:	441a      	add	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b22:	441a      	add	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3718      	adds	r7, #24
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}

08006b32 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006b32:	b580      	push	{r7, lr}
 8006b34:	b086      	sub	sp, #24
 8006b36:	af00      	add	r7, sp, #0
 8006b38:	6078      	str	r0, [r7, #4]
 8006b3a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	695b      	ldr	r3, [r3, #20]
 8006b46:	3320      	adds	r3, #32
 8006b48:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	69db      	ldr	r3, [r3, #28]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <dir_next+0x28>
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b58:	d301      	bcc.n	8006b5e <dir_next+0x2c>
 8006b5a:	2304      	movs	r3, #4
 8006b5c:	e0aa      	b.n	8006cb4 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f040 8098 	bne.w	8006c9a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	699b      	ldr	r3, [r3, #24]
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d10b      	bne.n	8006b94 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	095b      	lsrs	r3, r3, #5
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	8912      	ldrh	r2, [r2, #8]
 8006b84:	4293      	cmp	r3, r2
 8006b86:	f0c0 8088 	bcc.w	8006c9a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	61da      	str	r2, [r3, #28]
 8006b90:	2304      	movs	r3, #4
 8006b92:	e08f      	b.n	8006cb4 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	0a5b      	lsrs	r3, r3, #9
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	8952      	ldrh	r2, [r2, #10]
 8006b9c:	3a01      	subs	r2, #1
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d17a      	bne.n	8006c9a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006ba4:	687a      	ldr	r2, [r7, #4]
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	4619      	mov	r1, r3
 8006bac:	4610      	mov	r0, r2
 8006bae:	f7ff fc80 	bl	80064b2 <get_fat>
 8006bb2:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d801      	bhi.n	8006bbe <dir_next+0x8c>
 8006bba:	2302      	movs	r3, #2
 8006bbc:	e07a      	b.n	8006cb4 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bc4:	d101      	bne.n	8006bca <dir_next+0x98>
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e074      	b.n	8006cb4 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	697a      	ldr	r2, [r7, #20]
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d358      	bcc.n	8006c86 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d104      	bne.n	8006be4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	61da      	str	r2, [r3, #28]
 8006be0:	2304      	movs	r3, #4
 8006be2:	e067      	b.n	8006cb4 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	4619      	mov	r1, r3
 8006bec:	4610      	mov	r0, r2
 8006bee:	f7ff fe59 	bl	80068a4 <create_chain>
 8006bf2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d101      	bne.n	8006bfe <dir_next+0xcc>
 8006bfa:	2307      	movs	r3, #7
 8006bfc:	e05a      	b.n	8006cb4 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <dir_next+0xd6>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e055      	b.n	8006cb4 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0e:	d101      	bne.n	8006c14 <dir_next+0xe2>
 8006c10:	2301      	movs	r3, #1
 8006c12:	e04f      	b.n	8006cb4 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f7ff fb4d 	bl	80062b4 <sync_window>
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d001      	beq.n	8006c24 <dir_next+0xf2>
 8006c20:	2301      	movs	r3, #1
 8006c22:	e047      	b.n	8006cb4 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3334      	adds	r3, #52	; 0x34
 8006c28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c2c:	2100      	movs	r1, #0
 8006c2e:	4618      	mov	r0, r3
 8006c30:	f7ff f977 	bl	8005f22 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c34:	2300      	movs	r3, #0
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	6979      	ldr	r1, [r7, #20]
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f7ff fc1a 	bl	8006474 <clust2sect>
 8006c40:	4602      	mov	r2, r0
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	631a      	str	r2, [r3, #48]	; 0x30
 8006c46:	e012      	b.n	8006c6e <dir_next+0x13c>
						fs->wflag = 1;
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006c4e:	68f8      	ldr	r0, [r7, #12]
 8006c50:	f7ff fb30 	bl	80062b4 <sync_window>
 8006c54:	4603      	mov	r3, r0
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <dir_next+0x12c>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	e02a      	b.n	8006cb4 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	3301      	adds	r3, #1
 8006c62:	613b      	str	r3, [r7, #16]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c68:	1c5a      	adds	r2, r3, #1
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	631a      	str	r2, [r3, #48]	; 0x30
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	895b      	ldrh	r3, [r3, #10]
 8006c72:	461a      	mov	r2, r3
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d3e6      	bcc.n	8006c48 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	1ad2      	subs	r2, r2, r3
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	697a      	ldr	r2, [r7, #20]
 8006c8a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006c8c:	6979      	ldr	r1, [r7, #20]
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f7ff fbf0 	bl	8006474 <clust2sect>
 8006c94:	4602      	mov	r2, r0
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cac:	441a      	add	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b086      	sub	sp, #24
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006ccc:	2100      	movs	r1, #0
 8006cce:	6878      	ldr	r0, [r7, #4]
 8006cd0:	f7ff feb4 	bl	8006a3c <dir_sdi>
 8006cd4:	4603      	mov	r3, r0
 8006cd6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006cd8:	7dfb      	ldrb	r3, [r7, #23]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d12b      	bne.n	8006d36 <dir_alloc+0x7a>
		n = 0;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f7ff fb27 	bl	800633c <move_window>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006cf2:	7dfb      	ldrb	r3, [r7, #23]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d11d      	bne.n	8006d34 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	2be5      	cmp	r3, #229	; 0xe5
 8006d00:	d004      	beq.n	8006d0c <dir_alloc+0x50>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d107      	bne.n	8006d1c <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	613b      	str	r3, [r7, #16]
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d102      	bne.n	8006d20 <dir_alloc+0x64>
 8006d1a:	e00c      	b.n	8006d36 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006d20:	2101      	movs	r1, #1
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f7ff ff05 	bl	8006b32 <dir_next>
 8006d28:	4603      	mov	r3, r0
 8006d2a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0d7      	beq.n	8006ce2 <dir_alloc+0x26>
 8006d32:	e000      	b.n	8006d36 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006d34:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006d36:	7dfb      	ldrb	r3, [r7, #23]
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d101      	bne.n	8006d40 <dir_alloc+0x84>
 8006d3c:	2307      	movs	r3, #7
 8006d3e:	75fb      	strb	r3, [r7, #23]
	return res;
 8006d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b084      	sub	sp, #16
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	331a      	adds	r3, #26
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f7ff f83f 	bl	8005ddc <ld_word>
 8006d5e:	4603      	mov	r3, r0
 8006d60:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b03      	cmp	r3, #3
 8006d68:	d109      	bne.n	8006d7e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	3314      	adds	r3, #20
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7ff f834 	bl	8005ddc <ld_word>
 8006d74:	4603      	mov	r3, r0
 8006d76:	041b      	lsls	r3, r3, #16
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3710      	adds	r7, #16
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	331a      	adds	r3, #26
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	b292      	uxth	r2, r2
 8006d9c:	4611      	mov	r1, r2
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f7ff f857 	bl	8005e52 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b03      	cmp	r3, #3
 8006daa:	d109      	bne.n	8006dc0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	f103 0214 	add.w	r2, r3, #20
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	0c1b      	lsrs	r3, r3, #16
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	4619      	mov	r1, r3
 8006dba:	4610      	mov	r0, r2
 8006dbc:	f7ff f849 	bl	8005e52 <st_word>
	}
}
 8006dc0:	bf00      	nop
 8006dc2:	3710      	adds	r7, #16
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006dc8:	b590      	push	{r4, r7, lr}
 8006dca:	b087      	sub	sp, #28
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
 8006dd0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	331a      	adds	r3, #26
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	f7ff f800 	bl	8005ddc <ld_word>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <cmp_lfn+0x1e>
 8006de2:	2300      	movs	r3, #0
 8006de4:	e059      	b.n	8006e9a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	781b      	ldrb	r3, [r3, #0]
 8006dea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dee:	1e5a      	subs	r2, r3, #1
 8006df0:	4613      	mov	r3, r2
 8006df2:	005b      	lsls	r3, r3, #1
 8006df4:	4413      	add	r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	4413      	add	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	81fb      	strh	r3, [r7, #14]
 8006e00:	2300      	movs	r3, #0
 8006e02:	613b      	str	r3, [r7, #16]
 8006e04:	e033      	b.n	8006e6e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006e06:	4a27      	ldr	r2, [pc, #156]	; (8006ea4 <cmp_lfn+0xdc>)
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	4413      	add	r3, r2
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fe ffe1 	bl	8005ddc <ld_word>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006e1e:	89fb      	ldrh	r3, [r7, #14]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d01a      	beq.n	8006e5a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2bfe      	cmp	r3, #254	; 0xfe
 8006e28:	d812      	bhi.n	8006e50 <cmp_lfn+0x88>
 8006e2a:	89bb      	ldrh	r3, [r7, #12]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fa f8d3 	bl	8000fd8 <ff_wtoupper>
 8006e32:	4603      	mov	r3, r0
 8006e34:	461c      	mov	r4, r3
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	1c5a      	adds	r2, r3, #1
 8006e3a:	617a      	str	r2, [r7, #20]
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	687a      	ldr	r2, [r7, #4]
 8006e40:	4413      	add	r3, r2
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7fa f8c7 	bl	8000fd8 <ff_wtoupper>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	429c      	cmp	r4, r3
 8006e4e:	d001      	beq.n	8006e54 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006e50:	2300      	movs	r3, #0
 8006e52:	e022      	b.n	8006e9a <cmp_lfn+0xd2>
			}
			wc = uc;
 8006e54:	89bb      	ldrh	r3, [r7, #12]
 8006e56:	81fb      	strh	r3, [r7, #14]
 8006e58:	e006      	b.n	8006e68 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006e5a:	89bb      	ldrh	r3, [r7, #12]
 8006e5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d001      	beq.n	8006e68 <cmp_lfn+0xa0>
 8006e64:	2300      	movs	r3, #0
 8006e66:	e018      	b.n	8006e9a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	613b      	str	r3, [r7, #16]
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	2b0c      	cmp	r3, #12
 8006e72:	d9c8      	bls.n	8006e06 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <cmp_lfn+0xd0>
 8006e80:	89fb      	ldrh	r3, [r7, #14]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d008      	beq.n	8006e98 <cmp_lfn+0xd0>
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	005b      	lsls	r3, r3, #1
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	4413      	add	r3, r2
 8006e8e:	881b      	ldrh	r3, [r3, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d001      	beq.n	8006e98 <cmp_lfn+0xd0>
 8006e94:	2300      	movs	r3, #0
 8006e96:	e000      	b.n	8006e9a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006e98:	2301      	movs	r3, #1
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd90      	pop	{r4, r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	08013dc0 	.word	0x08013dc0

08006ea8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b086      	sub	sp, #24
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	331a      	adds	r3, #26
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe ff90 	bl	8005ddc <ld_word>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <pick_lfn+0x1e>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e04d      	b.n	8006f62 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ece:	1e5a      	subs	r2, r3, #1
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	4413      	add	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006edc:	2301      	movs	r3, #1
 8006ede:	81fb      	strh	r3, [r7, #14]
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	613b      	str	r3, [r7, #16]
 8006ee4:	e028      	b.n	8006f38 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006ee6:	4a21      	ldr	r2, [pc, #132]	; (8006f6c <pick_lfn+0xc4>)
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	4413      	add	r3, r2
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f7fe ff71 	bl	8005ddc <ld_word>
 8006efa:	4603      	mov	r3, r0
 8006efc:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006efe:	89fb      	ldrh	r3, [r7, #14]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d00f      	beq.n	8006f24 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2bfe      	cmp	r3, #254	; 0xfe
 8006f08:	d901      	bls.n	8006f0e <pick_lfn+0x66>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	e029      	b.n	8006f62 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006f0e:	89bb      	ldrh	r3, [r7, #12]
 8006f10:	81fb      	strh	r3, [r7, #14]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	1c5a      	adds	r2, r3, #1
 8006f16:	617a      	str	r2, [r7, #20]
 8006f18:	005b      	lsls	r3, r3, #1
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	89fa      	ldrh	r2, [r7, #14]
 8006f20:	801a      	strh	r2, [r3, #0]
 8006f22:	e006      	b.n	8006f32 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006f24:	89bb      	ldrh	r3, [r7, #12]
 8006f26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d001      	beq.n	8006f32 <pick_lfn+0x8a>
 8006f2e:	2300      	movs	r3, #0
 8006f30:	e017      	b.n	8006f62 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	3301      	adds	r3, #1
 8006f36:	613b      	str	r3, [r7, #16]
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	2b0c      	cmp	r3, #12
 8006f3c:	d9d3      	bls.n	8006ee6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d00a      	beq.n	8006f60 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	2bfe      	cmp	r3, #254	; 0xfe
 8006f4e:	d901      	bls.n	8006f54 <pick_lfn+0xac>
 8006f50:	2300      	movs	r3, #0
 8006f52:	e006      	b.n	8006f62 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	687a      	ldr	r2, [r7, #4]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006f60:	2301      	movs	r3, #1
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	08013dc0 	.word	0x08013dc0

08006f70 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b088      	sub	sp, #32
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	4611      	mov	r1, r2
 8006f7c:	461a      	mov	r2, r3
 8006f7e:	460b      	mov	r3, r1
 8006f80:	71fb      	strb	r3, [r7, #7]
 8006f82:	4613      	mov	r3, r2
 8006f84:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006f86:	68bb      	ldr	r3, [r7, #8]
 8006f88:	330d      	adds	r3, #13
 8006f8a:	79ba      	ldrb	r2, [r7, #6]
 8006f8c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	330b      	adds	r3, #11
 8006f92:	220f      	movs	r2, #15
 8006f94:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	330c      	adds	r3, #12
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	331a      	adds	r3, #26
 8006fa2:	2100      	movs	r1, #0
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	f7fe ff54 	bl	8005e52 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006faa:	79fb      	ldrb	r3, [r7, #7]
 8006fac:	1e5a      	subs	r2, r3, #1
 8006fae:	4613      	mov	r3, r2
 8006fb0:	005b      	lsls	r3, r3, #1
 8006fb2:	4413      	add	r3, r2
 8006fb4:	009b      	lsls	r3, r3, #2
 8006fb6:	4413      	add	r3, r2
 8006fb8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	82fb      	strh	r3, [r7, #22]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006fc2:	8afb      	ldrh	r3, [r7, #22]
 8006fc4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d007      	beq.n	8006fdc <put_lfn+0x6c>
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	1c5a      	adds	r2, r3, #1
 8006fd0:	61fa      	str	r2, [r7, #28]
 8006fd2:	005b      	lsls	r3, r3, #1
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	881b      	ldrh	r3, [r3, #0]
 8006fda:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006fdc:	4a17      	ldr	r2, [pc, #92]	; (800703c <put_lfn+0xcc>)
 8006fde:	69bb      	ldr	r3, [r7, #24]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	4413      	add	r3, r2
 8006fea:	8afa      	ldrh	r2, [r7, #22]
 8006fec:	4611      	mov	r1, r2
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f7fe ff2f 	bl	8005e52 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006ff4:	8afb      	ldrh	r3, [r7, #22]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d102      	bne.n	8007000 <put_lfn+0x90>
 8006ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ffe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8007000:	69bb      	ldr	r3, [r7, #24]
 8007002:	3301      	adds	r3, #1
 8007004:	61bb      	str	r3, [r7, #24]
 8007006:	69bb      	ldr	r3, [r7, #24]
 8007008:	2b0c      	cmp	r3, #12
 800700a:	d9da      	bls.n	8006fc2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800700c:	8afb      	ldrh	r3, [r7, #22]
 800700e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007012:	4293      	cmp	r3, r2
 8007014:	d006      	beq.n	8007024 <put_lfn+0xb4>
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	4413      	add	r3, r2
 800701e:	881b      	ldrh	r3, [r3, #0]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d103      	bne.n	800702c <put_lfn+0xbc>
 8007024:	79fb      	ldrb	r3, [r7, #7]
 8007026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800702a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	79fa      	ldrb	r2, [r7, #7]
 8007030:	701a      	strb	r2, [r3, #0]
}
 8007032:	bf00      	nop
 8007034:	3720      	adds	r7, #32
 8007036:	46bd      	mov	sp, r7
 8007038:	bd80      	pop	{r7, pc}
 800703a:	bf00      	nop
 800703c:	08013dc0 	.word	0x08013dc0

08007040 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b08c      	sub	sp, #48	; 0x30
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	60b9      	str	r1, [r7, #8]
 800704a:	607a      	str	r2, [r7, #4]
 800704c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800704e:	220b      	movs	r2, #11
 8007050:	68b9      	ldr	r1, [r7, #8]
 8007052:	68f8      	ldr	r0, [r7, #12]
 8007054:	f7fe ff44 	bl	8005ee0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2b05      	cmp	r3, #5
 800705c:	d92b      	bls.n	80070b6 <gen_numname+0x76>
		sr = seq;
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007062:	e022      	b.n	80070aa <gen_numname+0x6a>
			wc = *lfn++;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	1c9a      	adds	r2, r3, #2
 8007068:	607a      	str	r2, [r7, #4]
 800706a:	881b      	ldrh	r3, [r3, #0]
 800706c:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800706e:	2300      	movs	r3, #0
 8007070:	62bb      	str	r3, [r7, #40]	; 0x28
 8007072:	e017      	b.n	80070a4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	005a      	lsls	r2, r3, #1
 8007078:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800707a:	f003 0301 	and.w	r3, r3, #1
 800707e:	4413      	add	r3, r2
 8007080:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007082:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8007084:	085b      	lsrs	r3, r3, #1
 8007086:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007088:	69fb      	ldr	r3, [r7, #28]
 800708a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800708e:	2b00      	cmp	r3, #0
 8007090:	d005      	beq.n	800709e <gen_numname+0x5e>
 8007092:	69fb      	ldr	r3, [r7, #28]
 8007094:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8007098:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800709c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800709e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a0:	3301      	adds	r3, #1
 80070a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	2b0f      	cmp	r3, #15
 80070a8:	d9e4      	bls.n	8007074 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	881b      	ldrh	r3, [r3, #0]
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d1d8      	bne.n	8007064 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80070b6:	2307      	movs	r3, #7
 80070b8:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	f003 030f 	and.w	r3, r3, #15
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	3330      	adds	r3, #48	; 0x30
 80070c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80070ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070ce:	2b39      	cmp	r3, #57	; 0x39
 80070d0:	d904      	bls.n	80070dc <gen_numname+0x9c>
 80070d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80070d6:	3307      	adds	r3, #7
 80070d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80070dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070de:	1e5a      	subs	r2, r3, #1
 80070e0:	62ba      	str	r2, [r7, #40]	; 0x28
 80070e2:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80070e6:	4413      	add	r3, r2
 80070e8:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80070ec:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	091b      	lsrs	r3, r3, #4
 80070f4:	603b      	str	r3, [r7, #0]
	} while (seq);
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1de      	bne.n	80070ba <gen_numname+0x7a>
	ns[i] = '~';
 80070fc:	f107 0214 	add.w	r2, r7, #20
 8007100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007102:	4413      	add	r3, r2
 8007104:	227e      	movs	r2, #126	; 0x7e
 8007106:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007108:	2300      	movs	r3, #0
 800710a:	627b      	str	r3, [r7, #36]	; 0x24
 800710c:	e002      	b.n	8007114 <gen_numname+0xd4>
 800710e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007110:	3301      	adds	r3, #1
 8007112:	627b      	str	r3, [r7, #36]	; 0x24
 8007114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	429a      	cmp	r2, r3
 800711a:	d205      	bcs.n	8007128 <gen_numname+0xe8>
 800711c:	68fa      	ldr	r2, [r7, #12]
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	4413      	add	r3, r2
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b20      	cmp	r3, #32
 8007126:	d1f2      	bne.n	800710e <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	2b07      	cmp	r3, #7
 800712c:	d808      	bhi.n	8007140 <gen_numname+0x100>
 800712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	62ba      	str	r2, [r7, #40]	; 0x28
 8007134:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007138:	4413      	add	r3, r2
 800713a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800713e:	e000      	b.n	8007142 <gen_numname+0x102>
 8007140:	2120      	movs	r1, #32
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	627a      	str	r2, [r7, #36]	; 0x24
 8007148:	68fa      	ldr	r2, [r7, #12]
 800714a:	4413      	add	r3, r2
 800714c:	460a      	mov	r2, r1
 800714e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007152:	2b07      	cmp	r3, #7
 8007154:	d9e8      	bls.n	8007128 <gen_numname+0xe8>
}
 8007156:	bf00      	nop
 8007158:	bf00      	nop
 800715a:	3730      	adds	r7, #48	; 0x30
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007160:	b480      	push	{r7}
 8007162:	b085      	sub	sp, #20
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007168:	2300      	movs	r3, #0
 800716a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800716c:	230b      	movs	r3, #11
 800716e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8007170:	7bfb      	ldrb	r3, [r7, #15]
 8007172:	b2da      	uxtb	r2, r3
 8007174:	0852      	lsrs	r2, r2, #1
 8007176:	01db      	lsls	r3, r3, #7
 8007178:	4313      	orrs	r3, r2
 800717a:	b2da      	uxtb	r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	1c59      	adds	r1, r3, #1
 8007180:	6079      	str	r1, [r7, #4]
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	4413      	add	r3, r2
 8007186:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	3b01      	subs	r3, #1
 800718c:	60bb      	str	r3, [r7, #8]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1ed      	bne.n	8007170 <sum_sfn+0x10>
	return sum;
 8007194:	7bfb      	ldrb	r3, [r7, #15]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3714      	adds	r7, #20
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b086      	sub	sp, #24
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80071ac:	2304      	movs	r3, #4
 80071ae:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80071b6:	23ff      	movs	r3, #255	; 0xff
 80071b8:	757b      	strb	r3, [r7, #21]
 80071ba:	23ff      	movs	r3, #255	; 0xff
 80071bc:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80071be:	e081      	b.n	80072c4 <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	4619      	mov	r1, r3
 80071c6:	6938      	ldr	r0, [r7, #16]
 80071c8:	f7ff f8b8 	bl	800633c <move_window>
 80071cc:	4603      	mov	r3, r0
 80071ce:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80071d0:	7dfb      	ldrb	r3, [r7, #23]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d17c      	bne.n	80072d0 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 80071de:	7dbb      	ldrb	r3, [r7, #22]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80071e4:	2304      	movs	r3, #4
 80071e6:	75fb      	strb	r3, [r7, #23]
 80071e8:	e077      	b.n	80072da <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	330b      	adds	r3, #11
 80071f0:	781b      	ldrb	r3, [r3, #0]
 80071f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071f6:	73fb      	strb	r3, [r7, #15]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	7bfa      	ldrb	r2, [r7, #15]
 80071fc:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 80071fe:	7dbb      	ldrb	r3, [r7, #22]
 8007200:	2be5      	cmp	r3, #229	; 0xe5
 8007202:	d00e      	beq.n	8007222 <dir_read+0x80>
 8007204:	7dbb      	ldrb	r3, [r7, #22]
 8007206:	2b2e      	cmp	r3, #46	; 0x2e
 8007208:	d00b      	beq.n	8007222 <dir_read+0x80>
 800720a:	7bfb      	ldrb	r3, [r7, #15]
 800720c:	f023 0320 	bic.w	r3, r3, #32
 8007210:	2b08      	cmp	r3, #8
 8007212:	bf0c      	ite	eq
 8007214:	2301      	moveq	r3, #1
 8007216:	2300      	movne	r3, #0
 8007218:	b2db      	uxtb	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	4293      	cmp	r3, r2
 8007220:	d002      	beq.n	8007228 <dir_read+0x86>
				ord = 0xFF;
 8007222:	23ff      	movs	r3, #255	; 0xff
 8007224:	757b      	strb	r3, [r7, #21]
 8007226:	e044      	b.n	80072b2 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007228:	7bfb      	ldrb	r3, [r7, #15]
 800722a:	2b0f      	cmp	r3, #15
 800722c:	d12f      	bne.n	800728e <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800722e:	7dbb      	ldrb	r3, [r7, #22]
 8007230:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007234:	2b00      	cmp	r3, #0
 8007236:	d00d      	beq.n	8007254 <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	7b5b      	ldrb	r3, [r3, #13]
 800723e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007240:	7dbb      	ldrb	r3, [r7, #22]
 8007242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007246:	75bb      	strb	r3, [r7, #22]
 8007248:	7dbb      	ldrb	r3, [r7, #22]
 800724a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	695a      	ldr	r2, [r3, #20]
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007254:	7dba      	ldrb	r2, [r7, #22]
 8007256:	7d7b      	ldrb	r3, [r7, #21]
 8007258:	429a      	cmp	r2, r3
 800725a:	d115      	bne.n	8007288 <dir_read+0xe6>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6a1b      	ldr	r3, [r3, #32]
 8007260:	330d      	adds	r3, #13
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	7d3a      	ldrb	r2, [r7, #20]
 8007266:	429a      	cmp	r2, r3
 8007268:	d10e      	bne.n	8007288 <dir_read+0xe6>
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	68da      	ldr	r2, [r3, #12]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a1b      	ldr	r3, [r3, #32]
 8007272:	4619      	mov	r1, r3
 8007274:	4610      	mov	r0, r2
 8007276:	f7ff fe17 	bl	8006ea8 <pick_lfn>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d003      	beq.n	8007288 <dir_read+0xe6>
 8007280:	7d7b      	ldrb	r3, [r7, #21]
 8007282:	3b01      	subs	r3, #1
 8007284:	b2db      	uxtb	r3, r3
 8007286:	e000      	b.n	800728a <dir_read+0xe8>
 8007288:	23ff      	movs	r3, #255	; 0xff
 800728a:	757b      	strb	r3, [r7, #21]
 800728c:	e011      	b.n	80072b2 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800728e:	7d7b      	ldrb	r3, [r7, #21]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d109      	bne.n	80072a8 <dir_read+0x106>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	6a1b      	ldr	r3, [r3, #32]
 8007298:	4618      	mov	r0, r3
 800729a:	f7ff ff61 	bl	8007160 <sum_sfn>
 800729e:	4603      	mov	r3, r0
 80072a0:	461a      	mov	r2, r3
 80072a2:	7d3b      	ldrb	r3, [r7, #20]
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d015      	beq.n	80072d4 <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f04f 32ff 	mov.w	r2, #4294967295
 80072ae:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80072b0:	e010      	b.n	80072d4 <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80072b2:	2100      	movs	r1, #0
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff fc3c 	bl	8006b32 <dir_next>
 80072ba:	4603      	mov	r3, r0
 80072bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80072be:	7dfb      	ldrb	r3, [r7, #23]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <dir_read+0x136>
	while (dp->sect) {
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	69db      	ldr	r3, [r3, #28]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f47f af79 	bne.w	80071c0 <dir_read+0x1e>
 80072ce:	e004      	b.n	80072da <dir_read+0x138>
		if (res != FR_OK) break;
 80072d0:	bf00      	nop
 80072d2:	e002      	b.n	80072da <dir_read+0x138>
					break;
 80072d4:	bf00      	nop
 80072d6:	e000      	b.n	80072da <dir_read+0x138>
		if (res != FR_OK) break;
 80072d8:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 80072da:	7dfb      	ldrb	r3, [r7, #23]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d002      	beq.n	80072e6 <dir_read+0x144>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	61da      	str	r2, [r3, #28]
	return res;
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}

080072f0 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b086      	sub	sp, #24
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80072fe:	2100      	movs	r1, #0
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7ff fb9b 	bl	8006a3c <dir_sdi>
 8007306:	4603      	mov	r3, r0
 8007308:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800730a:	7dfb      	ldrb	r3, [r7, #23]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <dir_find+0x24>
 8007310:	7dfb      	ldrb	r3, [r7, #23]
 8007312:	e0a9      	b.n	8007468 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007314:	23ff      	movs	r3, #255	; 0xff
 8007316:	753b      	strb	r3, [r7, #20]
 8007318:	7d3b      	ldrb	r3, [r7, #20]
 800731a:	757b      	strb	r3, [r7, #21]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f04f 32ff 	mov.w	r2, #4294967295
 8007322:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	69db      	ldr	r3, [r3, #28]
 8007328:	4619      	mov	r1, r3
 800732a:	6938      	ldr	r0, [r7, #16]
 800732c:	f7ff f806 	bl	800633c <move_window>
 8007330:	4603      	mov	r3, r0
 8007332:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007334:	7dfb      	ldrb	r3, [r7, #23]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f040 8090 	bne.w	800745c <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6a1b      	ldr	r3, [r3, #32]
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007344:	7dbb      	ldrb	r3, [r7, #22]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d102      	bne.n	8007350 <dir_find+0x60>
 800734a:	2304      	movs	r3, #4
 800734c:	75fb      	strb	r3, [r7, #23]
 800734e:	e08a      	b.n	8007466 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	330b      	adds	r3, #11
 8007356:	781b      	ldrb	r3, [r3, #0]
 8007358:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800735c:	73fb      	strb	r3, [r7, #15]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	7bfa      	ldrb	r2, [r7, #15]
 8007362:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8007364:	7dbb      	ldrb	r3, [r7, #22]
 8007366:	2be5      	cmp	r3, #229	; 0xe5
 8007368:	d007      	beq.n	800737a <dir_find+0x8a>
 800736a:	7bfb      	ldrb	r3, [r7, #15]
 800736c:	f003 0308 	and.w	r3, r3, #8
 8007370:	2b00      	cmp	r3, #0
 8007372:	d009      	beq.n	8007388 <dir_find+0x98>
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	2b0f      	cmp	r3, #15
 8007378:	d006      	beq.n	8007388 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800737a:	23ff      	movs	r3, #255	; 0xff
 800737c:	757b      	strb	r3, [r7, #21]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	f04f 32ff 	mov.w	r2, #4294967295
 8007384:	631a      	str	r2, [r3, #48]	; 0x30
 8007386:	e05e      	b.n	8007446 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	2b0f      	cmp	r3, #15
 800738c:	d136      	bne.n	80073fc <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007398:	2b00      	cmp	r3, #0
 800739a:	d154      	bne.n	8007446 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800739c:	7dbb      	ldrb	r3, [r7, #22]
 800739e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00d      	beq.n	80073c2 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	7b5b      	ldrb	r3, [r3, #13]
 80073ac:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80073ae:	7dbb      	ldrb	r3, [r7, #22]
 80073b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b4:	75bb      	strb	r3, [r7, #22]
 80073b6:	7dbb      	ldrb	r3, [r7, #22]
 80073b8:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	695a      	ldr	r2, [r3, #20]
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80073c2:	7dba      	ldrb	r2, [r7, #22]
 80073c4:	7d7b      	ldrb	r3, [r7, #21]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d115      	bne.n	80073f6 <dir_find+0x106>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	330d      	adds	r3, #13
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	7d3a      	ldrb	r2, [r7, #20]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d10e      	bne.n	80073f6 <dir_find+0x106>
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	68da      	ldr	r2, [r3, #12]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6a1b      	ldr	r3, [r3, #32]
 80073e0:	4619      	mov	r1, r3
 80073e2:	4610      	mov	r0, r2
 80073e4:	f7ff fcf0 	bl	8006dc8 <cmp_lfn>
 80073e8:	4603      	mov	r3, r0
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d003      	beq.n	80073f6 <dir_find+0x106>
 80073ee:	7d7b      	ldrb	r3, [r7, #21]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	b2db      	uxtb	r3, r3
 80073f4:	e000      	b.n	80073f8 <dir_find+0x108>
 80073f6:	23ff      	movs	r3, #255	; 0xff
 80073f8:	757b      	strb	r3, [r7, #21]
 80073fa:	e024      	b.n	8007446 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80073fc:	7d7b      	ldrb	r3, [r7, #21]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d109      	bne.n	8007416 <dir_find+0x126>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a1b      	ldr	r3, [r3, #32]
 8007406:	4618      	mov	r0, r3
 8007408:	f7ff feaa 	bl	8007160 <sum_sfn>
 800740c:	4603      	mov	r3, r0
 800740e:	461a      	mov	r2, r3
 8007410:	7d3b      	ldrb	r3, [r7, #20]
 8007412:	4293      	cmp	r3, r2
 8007414:	d024      	beq.n	8007460 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800741c:	f003 0301 	and.w	r3, r3, #1
 8007420:	2b00      	cmp	r3, #0
 8007422:	d10a      	bne.n	800743a <dir_find+0x14a>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	6a18      	ldr	r0, [r3, #32]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	3324      	adds	r3, #36	; 0x24
 800742c:	220b      	movs	r2, #11
 800742e:	4619      	mov	r1, r3
 8007430:	f7fe fd92 	bl	8005f58 <mem_cmp>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d014      	beq.n	8007464 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800743a:	23ff      	movs	r3, #255	; 0xff
 800743c:	757b      	strb	r3, [r7, #21]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f04f 32ff 	mov.w	r2, #4294967295
 8007444:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007446:	2100      	movs	r1, #0
 8007448:	6878      	ldr	r0, [r7, #4]
 800744a:	f7ff fb72 	bl	8006b32 <dir_next>
 800744e:	4603      	mov	r3, r0
 8007450:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	2b00      	cmp	r3, #0
 8007456:	f43f af65 	beq.w	8007324 <dir_find+0x34>
 800745a:	e004      	b.n	8007466 <dir_find+0x176>
		if (res != FR_OK) break;
 800745c:	bf00      	nop
 800745e:	e002      	b.n	8007466 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007460:	bf00      	nop
 8007462:	e000      	b.n	8007466 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007464:	bf00      	nop

	return res;
 8007466:	7dfb      	ldrb	r3, [r7, #23]
}
 8007468:	4618      	mov	r0, r3
 800746a:	3718      	adds	r7, #24
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}

08007470 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b08c      	sub	sp, #48	; 0x30
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007484:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d001      	beq.n	8007490 <dir_register+0x20>
 800748c:	2306      	movs	r3, #6
 800748e:	e0e0      	b.n	8007652 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007490:	2300      	movs	r3, #0
 8007492:	627b      	str	r3, [r7, #36]	; 0x24
 8007494:	e002      	b.n	800749c <dir_register+0x2c>
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	3301      	adds	r3, #1
 800749a:	627b      	str	r3, [r7, #36]	; 0x24
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	005b      	lsls	r3, r3, #1
 80074a4:	4413      	add	r3, r2
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1f4      	bne.n	8007496 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80074b2:	f107 030c 	add.w	r3, r7, #12
 80074b6:	220c      	movs	r2, #12
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7fe fd11 	bl	8005ee0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80074be:	7dfb      	ldrb	r3, [r7, #23]
 80074c0:	f003 0301 	and.w	r3, r3, #1
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d032      	beq.n	800752e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2240      	movs	r2, #64	; 0x40
 80074cc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 80074d0:	2301      	movs	r3, #1
 80074d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80074d4:	e016      	b.n	8007504 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f103 0024 	add.w	r0, r3, #36	; 0x24
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	68da      	ldr	r2, [r3, #12]
 80074e0:	f107 010c 	add.w	r1, r7, #12
 80074e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074e6:	f7ff fdab 	bl	8007040 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f7ff ff00 	bl	80072f0 <dir_find>
 80074f0:	4603      	mov	r3, r0
 80074f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 80074f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d106      	bne.n	800750c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 80074fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007500:	3301      	adds	r3, #1
 8007502:	62bb      	str	r3, [r7, #40]	; 0x28
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	2b63      	cmp	r3, #99	; 0x63
 8007508:	d9e5      	bls.n	80074d6 <dir_register+0x66>
 800750a:	e000      	b.n	800750e <dir_register+0x9e>
			if (res != FR_OK) break;
 800750c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007510:	2b64      	cmp	r3, #100	; 0x64
 8007512:	d101      	bne.n	8007518 <dir_register+0xa8>
 8007514:	2307      	movs	r3, #7
 8007516:	e09c      	b.n	8007652 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007518:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800751c:	2b04      	cmp	r3, #4
 800751e:	d002      	beq.n	8007526 <dir_register+0xb6>
 8007520:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007524:	e095      	b.n	8007652 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007526:	7dfa      	ldrb	r2, [r7, #23]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800752e:	7dfb      	ldrb	r3, [r7, #23]
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d007      	beq.n	8007548 <dir_register+0xd8>
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	330c      	adds	r3, #12
 800753c:	4a47      	ldr	r2, [pc, #284]	; (800765c <dir_register+0x1ec>)
 800753e:	fba2 2303 	umull	r2, r3, r2, r3
 8007542:	089b      	lsrs	r3, r3, #2
 8007544:	3301      	adds	r3, #1
 8007546:	e000      	b.n	800754a <dir_register+0xda>
 8007548:	2301      	movs	r3, #1
 800754a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800754c:	6a39      	ldr	r1, [r7, #32]
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7ff fbb4 	bl	8006cbc <dir_alloc>
 8007554:	4603      	mov	r3, r0
 8007556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800755a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800755e:	2b00      	cmp	r3, #0
 8007560:	d148      	bne.n	80075f4 <dir_register+0x184>
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	3b01      	subs	r3, #1
 8007566:	623b      	str	r3, [r7, #32]
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d042      	beq.n	80075f4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	695a      	ldr	r2, [r3, #20]
 8007572:	6a3b      	ldr	r3, [r7, #32]
 8007574:	015b      	lsls	r3, r3, #5
 8007576:	1ad3      	subs	r3, r2, r3
 8007578:	4619      	mov	r1, r3
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff fa5e 	bl	8006a3c <dir_sdi>
 8007580:	4603      	mov	r3, r0
 8007582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007586:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800758a:	2b00      	cmp	r3, #0
 800758c:	d132      	bne.n	80075f4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	3324      	adds	r3, #36	; 0x24
 8007592:	4618      	mov	r0, r3
 8007594:	f7ff fde4 	bl	8007160 <sum_sfn>
 8007598:	4603      	mov	r3, r0
 800759a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	69db      	ldr	r3, [r3, #28]
 80075a0:	4619      	mov	r1, r3
 80075a2:	69f8      	ldr	r0, [r7, #28]
 80075a4:	f7fe feca 	bl	800633c <move_window>
 80075a8:	4603      	mov	r3, r0
 80075aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80075ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d11d      	bne.n	80075f2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80075b6:	69fb      	ldr	r3, [r7, #28]
 80075b8:	68d8      	ldr	r0, [r3, #12]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6a19      	ldr	r1, [r3, #32]
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	b2da      	uxtb	r2, r3
 80075c2:	7efb      	ldrb	r3, [r7, #27]
 80075c4:	f7ff fcd4 	bl	8006f70 <put_lfn>
				fs->wflag = 1;
 80075c8:	69fb      	ldr	r3, [r7, #28]
 80075ca:	2201      	movs	r2, #1
 80075cc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 80075ce:	2100      	movs	r1, #0
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f7ff faae 	bl	8006b32 <dir_next>
 80075d6:	4603      	mov	r3, r0
 80075d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80075dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d107      	bne.n	80075f4 <dir_register+0x184>
 80075e4:	6a3b      	ldr	r3, [r7, #32]
 80075e6:	3b01      	subs	r3, #1
 80075e8:	623b      	str	r3, [r7, #32]
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d1d5      	bne.n	800759c <dir_register+0x12c>
 80075f0:	e000      	b.n	80075f4 <dir_register+0x184>
				if (res != FR_OK) break;
 80075f2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80075f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d128      	bne.n	800764e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	69db      	ldr	r3, [r3, #28]
 8007600:	4619      	mov	r1, r3
 8007602:	69f8      	ldr	r0, [r7, #28]
 8007604:	f7fe fe9a 	bl	800633c <move_window>
 8007608:	4603      	mov	r3, r0
 800760a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800760e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007612:	2b00      	cmp	r3, #0
 8007614:	d11b      	bne.n	800764e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a1b      	ldr	r3, [r3, #32]
 800761a:	2220      	movs	r2, #32
 800761c:	2100      	movs	r1, #0
 800761e:	4618      	mov	r0, r3
 8007620:	f7fe fc7f 	bl	8005f22 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a18      	ldr	r0, [r3, #32]
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	3324      	adds	r3, #36	; 0x24
 800762c:	220b      	movs	r2, #11
 800762e:	4619      	mov	r1, r3
 8007630:	f7fe fc56 	bl	8005ee0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	330c      	adds	r3, #12
 8007640:	f002 0218 	and.w	r2, r2, #24
 8007644:	b2d2      	uxtb	r2, r2
 8007646:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	2201      	movs	r2, #1
 800764c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800764e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007652:	4618      	mov	r0, r3
 8007654:	3730      	adds	r7, #48	; 0x30
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	4ec4ec4f 	.word	0x4ec4ec4f

08007660 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800767c:	d007      	beq.n	800768e <dir_remove+0x2e>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007682:	4619      	mov	r1, r3
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f7ff f9d9 	bl	8006a3c <dir_sdi>
 800768a:	4603      	mov	r3, r0
 800768c:	e000      	b.n	8007690 <dir_remove+0x30>
 800768e:	2300      	movs	r3, #0
 8007690:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007692:	7dfb      	ldrb	r3, [r7, #23]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d128      	bne.n	80076ea <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	4619      	mov	r1, r3
 800769e:	6938      	ldr	r0, [r7, #16]
 80076a0:	f7fe fe4c 	bl	800633c <move_window>
 80076a4:	4603      	mov	r3, r0
 80076a6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d115      	bne.n	80076da <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	22e5      	movs	r2, #229	; 0xe5
 80076b4:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80076b6:	693b      	ldr	r3, [r7, #16]
 80076b8:	2201      	movs	r2, #1
 80076ba:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d90b      	bls.n	80076de <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 80076c6:	2100      	movs	r1, #0
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f7ff fa32 	bl	8006b32 <dir_next>
 80076ce:	4603      	mov	r3, r0
 80076d0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d0df      	beq.n	8007698 <dir_remove+0x38>
 80076d8:	e002      	b.n	80076e0 <dir_remove+0x80>
			if (res != FR_OK) break;
 80076da:	bf00      	nop
 80076dc:	e000      	b.n	80076e0 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80076de:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 80076e0:	7dfb      	ldrb	r3, [r7, #23]
 80076e2:	2b04      	cmp	r3, #4
 80076e4:	d101      	bne.n	80076ea <dir_remove+0x8a>
 80076e6:	2302      	movs	r3, #2
 80076e8:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3718      	adds	r7, #24
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	2200      	movs	r2, #0
 8007708:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	2b00      	cmp	r3, #0
 8007710:	f000 80c9 	beq.w	80078a6 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007718:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771c:	d032      	beq.n	8007784 <get_fileinfo+0x90>
			i = j = 0;
 800771e:	2300      	movs	r3, #0
 8007720:	61bb      	str	r3, [r7, #24]
 8007722:	69bb      	ldr	r3, [r7, #24]
 8007724:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007726:	e01b      	b.n	8007760 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007728:	89fb      	ldrh	r3, [r7, #14]
 800772a:	2100      	movs	r1, #0
 800772c:	4618      	mov	r0, r3
 800772e:	f7f9 fbe7 	bl	8000f00 <ff_convert>
 8007732:	4603      	mov	r3, r0
 8007734:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8007736:	89fb      	ldrh	r3, [r7, #14]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d102      	bne.n	8007742 <get_fileinfo+0x4e>
 800773c:	2300      	movs	r3, #0
 800773e:	61fb      	str	r3, [r7, #28]
 8007740:	e01a      	b.n	8007778 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	2bfe      	cmp	r3, #254	; 0xfe
 8007746:	d902      	bls.n	800774e <get_fileinfo+0x5a>
 8007748:	2300      	movs	r3, #0
 800774a:	61fb      	str	r3, [r7, #28]
 800774c:	e014      	b.n	8007778 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	1c5a      	adds	r2, r3, #1
 8007752:	61fa      	str	r2, [r7, #28]
 8007754:	89fa      	ldrh	r2, [r7, #14]
 8007756:	b2d1      	uxtb	r1, r2
 8007758:	683a      	ldr	r2, [r7, #0]
 800775a:	4413      	add	r3, r2
 800775c:	460a      	mov	r2, r1
 800775e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	68da      	ldr	r2, [r3, #12]
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	1c59      	adds	r1, r3, #1
 8007768:	61b9      	str	r1, [r7, #24]
 800776a:	005b      	lsls	r3, r3, #1
 800776c:	4413      	add	r3, r2
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	81fb      	strh	r3, [r7, #14]
 8007772:	89fb      	ldrh	r3, [r7, #14]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1d7      	bne.n	8007728 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	4413      	add	r3, r2
 800777e:	3316      	adds	r3, #22
 8007780:	2200      	movs	r2, #0
 8007782:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8007784:	2300      	movs	r3, #0
 8007786:	61bb      	str	r3, [r7, #24]
 8007788:	69bb      	ldr	r3, [r7, #24]
 800778a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	3316      	adds	r3, #22
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8007798:	e04c      	b.n	8007834 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	6a1a      	ldr	r2, [r3, #32]
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	1c59      	adds	r1, r3, #1
 80077a2:	61f9      	str	r1, [r7, #28]
 80077a4:	4413      	add	r3, r2
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80077aa:	7dfb      	ldrb	r3, [r7, #23]
 80077ac:	2b20      	cmp	r3, #32
 80077ae:	d100      	bne.n	80077b2 <get_fileinfo+0xbe>
 80077b0:	e040      	b.n	8007834 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80077b2:	7dfb      	ldrb	r3, [r7, #23]
 80077b4:	2b05      	cmp	r3, #5
 80077b6:	d101      	bne.n	80077bc <get_fileinfo+0xc8>
 80077b8:	23e5      	movs	r3, #229	; 0xe5
 80077ba:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	2b09      	cmp	r3, #9
 80077c0:	d10f      	bne.n	80077e2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80077c2:	89bb      	ldrh	r3, [r7, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d105      	bne.n	80077d4 <get_fileinfo+0xe0>
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	4413      	add	r3, r2
 80077ce:	3316      	adds	r3, #22
 80077d0:	222e      	movs	r2, #46	; 0x2e
 80077d2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80077d4:	69bb      	ldr	r3, [r7, #24]
 80077d6:	1c5a      	adds	r2, r3, #1
 80077d8:	61ba      	str	r2, [r7, #24]
 80077da:	683a      	ldr	r2, [r7, #0]
 80077dc:	4413      	add	r3, r2
 80077de:	222e      	movs	r2, #46	; 0x2e
 80077e0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80077e2:	683a      	ldr	r2, [r7, #0]
 80077e4:	69bb      	ldr	r3, [r7, #24]
 80077e6:	4413      	add	r3, r2
 80077e8:	3309      	adds	r3, #9
 80077ea:	7dfa      	ldrb	r2, [r7, #23]
 80077ec:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80077ee:	89bb      	ldrh	r3, [r7, #12]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d11c      	bne.n	800782e <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80077f4:	7dfb      	ldrb	r3, [r7, #23]
 80077f6:	2b40      	cmp	r3, #64	; 0x40
 80077f8:	d913      	bls.n	8007822 <get_fileinfo+0x12e>
 80077fa:	7dfb      	ldrb	r3, [r7, #23]
 80077fc:	2b5a      	cmp	r3, #90	; 0x5a
 80077fe:	d810      	bhi.n	8007822 <get_fileinfo+0x12e>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6a1b      	ldr	r3, [r3, #32]
 8007804:	330c      	adds	r3, #12
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	461a      	mov	r2, r3
 800780a:	69fb      	ldr	r3, [r7, #28]
 800780c:	2b08      	cmp	r3, #8
 800780e:	d901      	bls.n	8007814 <get_fileinfo+0x120>
 8007810:	2310      	movs	r3, #16
 8007812:	e000      	b.n	8007816 <get_fileinfo+0x122>
 8007814:	2308      	movs	r3, #8
 8007816:	4013      	ands	r3, r2
 8007818:	2b00      	cmp	r3, #0
 800781a:	d002      	beq.n	8007822 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800781c:	7dfb      	ldrb	r3, [r7, #23]
 800781e:	3320      	adds	r3, #32
 8007820:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 8007822:	683a      	ldr	r2, [r7, #0]
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	4413      	add	r3, r2
 8007828:	3316      	adds	r3, #22
 800782a:	7dfa      	ldrb	r2, [r7, #23]
 800782c:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800782e:	69bb      	ldr	r3, [r7, #24]
 8007830:	3301      	adds	r3, #1
 8007832:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	2b0a      	cmp	r3, #10
 8007838:	d9af      	bls.n	800779a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800783a:	89bb      	ldrh	r3, [r7, #12]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d10d      	bne.n	800785c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8007840:	683a      	ldr	r2, [r7, #0]
 8007842:	69bb      	ldr	r3, [r7, #24]
 8007844:	4413      	add	r3, r2
 8007846:	3316      	adds	r3, #22
 8007848:	2200      	movs	r2, #0
 800784a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	6a1b      	ldr	r3, [r3, #32]
 8007850:	330c      	adds	r3, #12
 8007852:	781b      	ldrb	r3, [r3, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d101      	bne.n	800785c <get_fileinfo+0x168>
 8007858:	2300      	movs	r3, #0
 800785a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	4413      	add	r3, r2
 8007862:	3309      	adds	r3, #9
 8007864:	2200      	movs	r2, #0
 8007866:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a1b      	ldr	r3, [r3, #32]
 800786c:	7ada      	ldrb	r2, [r3, #11]
 800786e:	683b      	ldr	r3, [r7, #0]
 8007870:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a1b      	ldr	r3, [r3, #32]
 8007876:	331c      	adds	r3, #28
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe fac7 	bl	8005e0c <ld_dword>
 800787e:	4602      	mov	r2, r0
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	3316      	adds	r3, #22
 800788a:	4618      	mov	r0, r3
 800788c:	f7fe fabe 	bl	8005e0c <ld_dword>
 8007890:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	b29a      	uxth	r2, r3
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	80da      	strh	r2, [r3, #6]
 800789a:	68bb      	ldr	r3, [r7, #8]
 800789c:	0c1b      	lsrs	r3, r3, #16
 800789e:	b29a      	uxth	r2, r3
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	809a      	strh	r2, [r3, #4]
 80078a4:	e000      	b.n	80078a8 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80078a6:	bf00      	nop
}
 80078a8:	3720      	adds	r7, #32
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
	...

080078b0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b08a      	sub	sp, #40	; 0x28
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
 80078b8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	613b      	str	r3, [r7, #16]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68db      	ldr	r3, [r3, #12]
 80078c6:	60fb      	str	r3, [r7, #12]
 80078c8:	2300      	movs	r3, #0
 80078ca:	617b      	str	r3, [r7, #20]
 80078cc:	697b      	ldr	r3, [r7, #20]
 80078ce:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	61ba      	str	r2, [r7, #24]
 80078d6:	693a      	ldr	r2, [r7, #16]
 80078d8:	4413      	add	r3, r2
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80078de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078e0:	2b1f      	cmp	r3, #31
 80078e2:	d940      	bls.n	8007966 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80078e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078e6:	2b2f      	cmp	r3, #47	; 0x2f
 80078e8:	d006      	beq.n	80078f8 <create_name+0x48>
 80078ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078ec:	2b5c      	cmp	r3, #92	; 0x5c
 80078ee:	d110      	bne.n	8007912 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80078f0:	e002      	b.n	80078f8 <create_name+0x48>
 80078f2:	69bb      	ldr	r3, [r7, #24]
 80078f4:	3301      	adds	r3, #1
 80078f6:	61bb      	str	r3, [r7, #24]
 80078f8:	693a      	ldr	r2, [r7, #16]
 80078fa:	69bb      	ldr	r3, [r7, #24]
 80078fc:	4413      	add	r3, r2
 80078fe:	781b      	ldrb	r3, [r3, #0]
 8007900:	2b2f      	cmp	r3, #47	; 0x2f
 8007902:	d0f6      	beq.n	80078f2 <create_name+0x42>
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	69bb      	ldr	r3, [r7, #24]
 8007908:	4413      	add	r3, r2
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	2b5c      	cmp	r3, #92	; 0x5c
 800790e:	d0f0      	beq.n	80078f2 <create_name+0x42>
			break;
 8007910:	e02a      	b.n	8007968 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2bfe      	cmp	r3, #254	; 0xfe
 8007916:	d901      	bls.n	800791c <create_name+0x6c>
 8007918:	2306      	movs	r3, #6
 800791a:	e177      	b.n	8007c0c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800791c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800791e:	b2db      	uxtb	r3, r3
 8007920:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007922:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007924:	2101      	movs	r1, #1
 8007926:	4618      	mov	r0, r3
 8007928:	f7f9 faea 	bl	8000f00 <ff_convert>
 800792c:	4603      	mov	r3, r0
 800792e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007930:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <create_name+0x8a>
 8007936:	2306      	movs	r3, #6
 8007938:	e168      	b.n	8007c0c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800793a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800793c:	2b7f      	cmp	r3, #127	; 0x7f
 800793e:	d809      	bhi.n	8007954 <create_name+0xa4>
 8007940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007942:	4619      	mov	r1, r3
 8007944:	48b3      	ldr	r0, [pc, #716]	; (8007c14 <create_name+0x364>)
 8007946:	f7fe fb2e 	bl	8005fa6 <chk_chr>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <create_name+0xa4>
 8007950:	2306      	movs	r3, #6
 8007952:	e15b      	b.n	8007c0c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	1c5a      	adds	r2, r3, #1
 8007958:	617a      	str	r2, [r7, #20]
 800795a:	005b      	lsls	r3, r3, #1
 800795c:	68fa      	ldr	r2, [r7, #12]
 800795e:	4413      	add	r3, r2
 8007960:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007962:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007964:	e7b4      	b.n	80078d0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007966:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007968:	693a      	ldr	r2, [r7, #16]
 800796a:	69bb      	ldr	r3, [r7, #24]
 800796c:	441a      	add	r2, r3
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007974:	2b1f      	cmp	r3, #31
 8007976:	d801      	bhi.n	800797c <create_name+0xcc>
 8007978:	2304      	movs	r3, #4
 800797a:	e000      	b.n	800797e <create_name+0xce>
 800797c:	2300      	movs	r3, #0
 800797e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007982:	e011      	b.n	80079a8 <create_name+0xf8>
		w = lfn[di - 1];
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800798a:	3b01      	subs	r3, #1
 800798c:	005b      	lsls	r3, r3, #1
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4413      	add	r3, r2
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007998:	2b20      	cmp	r3, #32
 800799a:	d002      	beq.n	80079a2 <create_name+0xf2>
 800799c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800799e:	2b2e      	cmp	r3, #46	; 0x2e
 80079a0:	d106      	bne.n	80079b0 <create_name+0x100>
		di--;
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	3b01      	subs	r3, #1
 80079a6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80079a8:	697b      	ldr	r3, [r7, #20]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1ea      	bne.n	8007984 <create_name+0xd4>
 80079ae:	e000      	b.n	80079b2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80079b0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	005b      	lsls	r3, r3, #1
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	4413      	add	r3, r2
 80079ba:	2200      	movs	r2, #0
 80079bc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d101      	bne.n	80079c8 <create_name+0x118>
 80079c4:	2306      	movs	r3, #6
 80079c6:	e121      	b.n	8007c0c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	3324      	adds	r3, #36	; 0x24
 80079cc:	220b      	movs	r2, #11
 80079ce:	2120      	movs	r1, #32
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7fe faa6 	bl	8005f22 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80079d6:	2300      	movs	r3, #0
 80079d8:	61bb      	str	r3, [r7, #24]
 80079da:	e002      	b.n	80079e2 <create_name+0x132>
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	3301      	adds	r3, #1
 80079e0:	61bb      	str	r3, [r7, #24]
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	005b      	lsls	r3, r3, #1
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	4413      	add	r3, r2
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	2b20      	cmp	r3, #32
 80079ee:	d0f5      	beq.n	80079dc <create_name+0x12c>
 80079f0:	69bb      	ldr	r3, [r7, #24]
 80079f2:	005b      	lsls	r3, r3, #1
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4413      	add	r3, r2
 80079f8:	881b      	ldrh	r3, [r3, #0]
 80079fa:	2b2e      	cmp	r3, #46	; 0x2e
 80079fc:	d0ee      	beq.n	80079dc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d009      	beq.n	8007a18 <create_name+0x168>
 8007a04:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a08:	f043 0303 	orr.w	r3, r3, #3
 8007a0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007a10:	e002      	b.n	8007a18 <create_name+0x168>
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	3b01      	subs	r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d009      	beq.n	8007a32 <create_name+0x182>
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007a24:	3b01      	subs	r3, #1
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	68fa      	ldr	r2, [r7, #12]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	881b      	ldrh	r3, [r3, #0]
 8007a2e:	2b2e      	cmp	r3, #46	; 0x2e
 8007a30:	d1ef      	bne.n	8007a12 <create_name+0x162>

	i = b = 0; ni = 8;
 8007a32:	2300      	movs	r3, #0
 8007a34:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007a38:	2300      	movs	r3, #0
 8007a3a:	623b      	str	r3, [r7, #32]
 8007a3c:	2308      	movs	r3, #8
 8007a3e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007a40:	69bb      	ldr	r3, [r7, #24]
 8007a42:	1c5a      	adds	r2, r3, #1
 8007a44:	61ba      	str	r2, [r7, #24]
 8007a46:	005b      	lsls	r3, r3, #1
 8007a48:	68fa      	ldr	r2, [r7, #12]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	881b      	ldrh	r3, [r3, #0]
 8007a4e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007a50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 8090 	beq.w	8007b78 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007a58:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a5a:	2b20      	cmp	r3, #32
 8007a5c:	d006      	beq.n	8007a6c <create_name+0x1bc>
 8007a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a60:	2b2e      	cmp	r3, #46	; 0x2e
 8007a62:	d10a      	bne.n	8007a7a <create_name+0x1ca>
 8007a64:	69ba      	ldr	r2, [r7, #24]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d006      	beq.n	8007a7a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a70:	f043 0303 	orr.w	r3, r3, #3
 8007a74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a78:	e07d      	b.n	8007b76 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007a7a:	6a3a      	ldr	r2, [r7, #32]
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	d203      	bcs.n	8007a8a <create_name+0x1da>
 8007a82:	69ba      	ldr	r2, [r7, #24]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d123      	bne.n	8007ad2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2b0b      	cmp	r3, #11
 8007a8e:	d106      	bne.n	8007a9e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007a90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a94:	f043 0303 	orr.w	r3, r3, #3
 8007a98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a9c:	e06f      	b.n	8007b7e <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d005      	beq.n	8007ab2 <create_name+0x202>
 8007aa6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007aaa:	f043 0303 	orr.w	r3, r3, #3
 8007aae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8007ab2:	69ba      	ldr	r2, [r7, #24]
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d860      	bhi.n	8007b7c <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	61bb      	str	r3, [r7, #24]
 8007abe:	2308      	movs	r3, #8
 8007ac0:	623b      	str	r3, [r7, #32]
 8007ac2:	230b      	movs	r3, #11
 8007ac4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007ac6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007ad0:	e051      	b.n	8007b76 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007ad2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ad4:	2b7f      	cmp	r3, #127	; 0x7f
 8007ad6:	d914      	bls.n	8007b02 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007ad8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ada:	2100      	movs	r1, #0
 8007adc:	4618      	mov	r0, r3
 8007ade:	f7f9 fa0f 	bl	8000f00 <ff_convert>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007ae6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d004      	beq.n	8007af6 <create_name+0x246>
 8007aec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007aee:	3b80      	subs	r3, #128	; 0x80
 8007af0:	4a49      	ldr	r2, [pc, #292]	; (8007c18 <create_name+0x368>)
 8007af2:	5cd3      	ldrb	r3, [r2, r3]
 8007af4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007af6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007afa:	f043 0302 	orr.w	r3, r3, #2
 8007afe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007b02:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d007      	beq.n	8007b18 <create_name+0x268>
 8007b08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b0a:	4619      	mov	r1, r3
 8007b0c:	4843      	ldr	r0, [pc, #268]	; (8007c1c <create_name+0x36c>)
 8007b0e:	f7fe fa4a 	bl	8005fa6 <chk_chr>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d008      	beq.n	8007b2a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007b18:	235f      	movs	r3, #95	; 0x5f
 8007b1a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007b1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b20:	f043 0303 	orr.w	r3, r3, #3
 8007b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b28:	e01b      	b.n	8007b62 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007b2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b2c:	2b40      	cmp	r3, #64	; 0x40
 8007b2e:	d909      	bls.n	8007b44 <create_name+0x294>
 8007b30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b32:	2b5a      	cmp	r3, #90	; 0x5a
 8007b34:	d806      	bhi.n	8007b44 <create_name+0x294>
					b |= 2;
 8007b36:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b3a:	f043 0302 	orr.w	r3, r3, #2
 8007b3e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b42:	e00e      	b.n	8007b62 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007b44:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b46:	2b60      	cmp	r3, #96	; 0x60
 8007b48:	d90b      	bls.n	8007b62 <create_name+0x2b2>
 8007b4a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b4c:	2b7a      	cmp	r3, #122	; 0x7a
 8007b4e:	d808      	bhi.n	8007b62 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007b50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b54:	f043 0301 	orr.w	r3, r3, #1
 8007b58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007b5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007b5e:	3b20      	subs	r3, #32
 8007b60:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007b62:	6a3b      	ldr	r3, [r7, #32]
 8007b64:	1c5a      	adds	r2, r3, #1
 8007b66:	623a      	str	r2, [r7, #32]
 8007b68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007b6a:	b2d1      	uxtb	r1, r2
 8007b6c:	687a      	ldr	r2, [r7, #4]
 8007b6e:	4413      	add	r3, r2
 8007b70:	460a      	mov	r2, r1
 8007b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007b76:	e763      	b.n	8007a40 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007b78:	bf00      	nop
 8007b7a:	e000      	b.n	8007b7e <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007b7c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007b84:	2be5      	cmp	r3, #229	; 0xe5
 8007b86:	d103      	bne.n	8007b90 <create_name+0x2e0>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	2205      	movs	r2, #5
 8007b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	2b08      	cmp	r3, #8
 8007b94:	d104      	bne.n	8007ba0 <create_name+0x2f0>
 8007b96:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007ba0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ba4:	f003 030c 	and.w	r3, r3, #12
 8007ba8:	2b0c      	cmp	r3, #12
 8007baa:	d005      	beq.n	8007bb8 <create_name+0x308>
 8007bac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bb0:	f003 0303 	and.w	r3, r3, #3
 8007bb4:	2b03      	cmp	r3, #3
 8007bb6:	d105      	bne.n	8007bc4 <create_name+0x314>
 8007bb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bbc:	f043 0302 	orr.w	r3, r3, #2
 8007bc0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bc8:	f003 0302 	and.w	r3, r3, #2
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d117      	bne.n	8007c00 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007bd0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bd4:	f003 0303 	and.w	r3, r3, #3
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d105      	bne.n	8007be8 <create_name+0x338>
 8007bdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007be0:	f043 0310 	orr.w	r3, r3, #16
 8007be4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007be8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007bec:	f003 030c 	and.w	r3, r3, #12
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d105      	bne.n	8007c00 <create_name+0x350>
 8007bf4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007bf8:	f043 0308 	orr.w	r3, r3, #8
 8007bfc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007c06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007c0a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3728      	adds	r7, #40	; 0x28
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	0800c95c 	.word	0x0800c95c
 8007c18:	08013d40 	.word	0x08013d40
 8007c1c:	0800c968 	.word	0x0800c968

08007c20 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b086      	sub	sp, #24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007c34:	e002      	b.n	8007c3c <follow_path+0x1c>
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	603b      	str	r3, [r7, #0]
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	2b2f      	cmp	r3, #47	; 0x2f
 8007c42:	d0f8      	beq.n	8007c36 <follow_path+0x16>
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	2b5c      	cmp	r3, #92	; 0x5c
 8007c4a:	d0f4      	beq.n	8007c36 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b1f      	cmp	r3, #31
 8007c58:	d80a      	bhi.n	8007c70 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2280      	movs	r2, #128	; 0x80
 8007c5e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007c62:	2100      	movs	r1, #0
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f7fe fee9 	bl	8006a3c <dir_sdi>
 8007c6a:	4603      	mov	r3, r0
 8007c6c:	75fb      	strb	r3, [r7, #23]
 8007c6e:	e043      	b.n	8007cf8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007c70:	463b      	mov	r3, r7
 8007c72:	4619      	mov	r1, r3
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f7ff fe1b 	bl	80078b0 <create_name>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007c7e:	7dfb      	ldrb	r3, [r7, #23]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d134      	bne.n	8007cee <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff fb33 	bl	80072f0 <dir_find>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007c94:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007c96:	7dfb      	ldrb	r3, [r7, #23]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d00a      	beq.n	8007cb2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007c9c:	7dfb      	ldrb	r3, [r7, #23]
 8007c9e:	2b04      	cmp	r3, #4
 8007ca0:	d127      	bne.n	8007cf2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007ca2:	7afb      	ldrb	r3, [r7, #11]
 8007ca4:	f003 0304 	and.w	r3, r3, #4
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d122      	bne.n	8007cf2 <follow_path+0xd2>
 8007cac:	2305      	movs	r3, #5
 8007cae:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007cb0:	e01f      	b.n	8007cf2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007cb2:	7afb      	ldrb	r3, [r7, #11]
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d11c      	bne.n	8007cf6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	799b      	ldrb	r3, [r3, #6]
 8007cc0:	f003 0310 	and.w	r3, r3, #16
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d102      	bne.n	8007cce <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007cc8:	2305      	movs	r3, #5
 8007cca:	75fb      	strb	r3, [r7, #23]
 8007ccc:	e014      	b.n	8007cf8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	695b      	ldr	r3, [r3, #20]
 8007cd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cdc:	4413      	add	r3, r2
 8007cde:	4619      	mov	r1, r3
 8007ce0:	68f8      	ldr	r0, [r7, #12]
 8007ce2:	f7ff f832 	bl	8006d4a <ld_clust>
 8007ce6:	4602      	mov	r2, r0
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007cec:	e7c0      	b.n	8007c70 <follow_path+0x50>
			if (res != FR_OK) break;
 8007cee:	bf00      	nop
 8007cf0:	e002      	b.n	8007cf8 <follow_path+0xd8>
				break;
 8007cf2:	bf00      	nop
 8007cf4:	e000      	b.n	8007cf8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007cf6:	bf00      	nop
			}
		}
	}

	return res;
 8007cf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3718      	adds	r7, #24
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}

08007d02 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007d02:	b480      	push	{r7}
 8007d04:	b087      	sub	sp, #28
 8007d06:	af00      	add	r7, sp, #0
 8007d08:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d0e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d031      	beq.n	8007d7c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	617b      	str	r3, [r7, #20]
 8007d1e:	e002      	b.n	8007d26 <get_ldnumber+0x24>
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	3301      	adds	r3, #1
 8007d24:	617b      	str	r3, [r7, #20]
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	781b      	ldrb	r3, [r3, #0]
 8007d2a:	2b1f      	cmp	r3, #31
 8007d2c:	d903      	bls.n	8007d36 <get_ldnumber+0x34>
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	2b3a      	cmp	r3, #58	; 0x3a
 8007d34:	d1f4      	bne.n	8007d20 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007d36:	697b      	ldr	r3, [r7, #20]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	2b3a      	cmp	r3, #58	; 0x3a
 8007d3c:	d11c      	bne.n	8007d78 <get_ldnumber+0x76>
			tp = *path;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	60fa      	str	r2, [r7, #12]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	3b30      	subs	r3, #48	; 0x30
 8007d4e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	2b09      	cmp	r3, #9
 8007d54:	d80e      	bhi.n	8007d74 <get_ldnumber+0x72>
 8007d56:	68fa      	ldr	r2, [r7, #12]
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	429a      	cmp	r2, r3
 8007d5c:	d10a      	bne.n	8007d74 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d107      	bne.n	8007d74 <get_ldnumber+0x72>
					vol = (int)i;
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	617b      	str	r3, [r7, #20]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	e002      	b.n	8007d7e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007d78:	2300      	movs	r3, #0
 8007d7a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007d7c:	693b      	ldr	r3, [r7, #16]
}
 8007d7e:	4618      	mov	r0, r3
 8007d80:	371c      	adds	r7, #28
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
	...

08007d8c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	70da      	strb	r2, [r3, #3]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007da4:	6839      	ldr	r1, [r7, #0]
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fe fac8 	bl	800633c <move_window>
 8007dac:	4603      	mov	r3, r0
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d001      	beq.n	8007db6 <check_fs+0x2a>
 8007db2:	2304      	movs	r3, #4
 8007db4:	e038      	b.n	8007e28 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	3334      	adds	r3, #52	; 0x34
 8007dba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f7fe f80c 	bl	8005ddc <ld_word>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007dcc:	429a      	cmp	r2, r3
 8007dce:	d001      	beq.n	8007dd4 <check_fs+0x48>
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e029      	b.n	8007e28 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007dda:	2be9      	cmp	r3, #233	; 0xe9
 8007ddc:	d009      	beq.n	8007df2 <check_fs+0x66>
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007de4:	2beb      	cmp	r3, #235	; 0xeb
 8007de6:	d11e      	bne.n	8007e26 <check_fs+0x9a>
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007dee:	2b90      	cmp	r3, #144	; 0x90
 8007df0:	d119      	bne.n	8007e26 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3334      	adds	r3, #52	; 0x34
 8007df6:	3336      	adds	r3, #54	; 0x36
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7fe f807 	bl	8005e0c <ld_dword>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e04:	4a0a      	ldr	r2, [pc, #40]	; (8007e30 <check_fs+0xa4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d101      	bne.n	8007e0e <check_fs+0x82>
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	e00c      	b.n	8007e28 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	3334      	adds	r3, #52	; 0x34
 8007e12:	3352      	adds	r3, #82	; 0x52
 8007e14:	4618      	mov	r0, r3
 8007e16:	f7fd fff9 	bl	8005e0c <ld_dword>
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	4a05      	ldr	r2, [pc, #20]	; (8007e34 <check_fs+0xa8>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d101      	bne.n	8007e26 <check_fs+0x9a>
 8007e22:	2300      	movs	r3, #0
 8007e24:	e000      	b.n	8007e28 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007e26:	2302      	movs	r3, #2
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3708      	adds	r7, #8
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	00544146 	.word	0x00544146
 8007e34:	33544146 	.word	0x33544146

08007e38 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b096      	sub	sp, #88	; 0x58
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	4613      	mov	r3, r2
 8007e44:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007e4c:	68f8      	ldr	r0, [r7, #12]
 8007e4e:	f7ff ff58 	bl	8007d02 <get_ldnumber>
 8007e52:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007e54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	da01      	bge.n	8007e5e <find_volume+0x26>
 8007e5a:	230b      	movs	r3, #11
 8007e5c:	e22e      	b.n	80082bc <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007e5e:	4aa8      	ldr	r2, [pc, #672]	; (8008100 <find_volume+0x2c8>)
 8007e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e66:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007e68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d101      	bne.n	8007e72 <find_volume+0x3a>
 8007e6e:	230c      	movs	r3, #12
 8007e70:	e224      	b.n	80082bc <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007e76:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007e78:	79fb      	ldrb	r3, [r7, #7]
 8007e7a:	f023 0301 	bic.w	r3, r3, #1
 8007e7e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d01a      	beq.n	8007ebe <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8a:	785b      	ldrb	r3, [r3, #1]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fd ff07 	bl	8005ca0 <disk_status>
 8007e92:	4603      	mov	r3, r0
 8007e94:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007e98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e9c:	f003 0301 	and.w	r3, r3, #1
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10c      	bne.n	8007ebe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007ea4:	79fb      	ldrb	r3, [r7, #7]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d007      	beq.n	8007eba <find_volume+0x82>
 8007eaa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007eae:	f003 0304 	and.w	r3, r3, #4
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007eb6:	230a      	movs	r3, #10
 8007eb8:	e200      	b.n	80082bc <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007eba:	2300      	movs	r3, #0
 8007ebc:	e1fe      	b.n	80082bc <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007ec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eca:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ece:	785b      	ldrb	r3, [r3, #1]
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	f7fd feff 	bl	8005cd4 <disk_initialize>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007edc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d001      	beq.n	8007eec <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007ee8:	2303      	movs	r3, #3
 8007eea:	e1e7      	b.n	80082bc <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007eec:	79fb      	ldrb	r3, [r7, #7]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d007      	beq.n	8007f02 <find_volume+0xca>
 8007ef2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007ef6:	f003 0304 	and.w	r3, r3, #4
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d001      	beq.n	8007f02 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007efe:	230a      	movs	r3, #10
 8007f00:	e1dc      	b.n	80082bc <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007f06:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f0a:	f7ff ff3f 	bl	8007d8c <check_fs>
 8007f0e:	4603      	mov	r3, r0
 8007f10:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007f14:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007f18:	2b02      	cmp	r3, #2
 8007f1a:	d14b      	bne.n	8007fb4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	643b      	str	r3, [r7, #64]	; 0x40
 8007f20:	e01f      	b.n	8007f62 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f24:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007f28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f2a:	011b      	lsls	r3, r3, #4
 8007f2c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007f30:	4413      	add	r3, r2
 8007f32:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f36:	3304      	adds	r3, #4
 8007f38:	781b      	ldrb	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d006      	beq.n	8007f4c <find_volume+0x114>
 8007f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f40:	3308      	adds	r3, #8
 8007f42:	4618      	mov	r0, r3
 8007f44:	f7fd ff62 	bl	8005e0c <ld_dword>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	e000      	b.n	8007f4e <find_volume+0x116>
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f50:	009b      	lsls	r3, r3, #2
 8007f52:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007f56:	440b      	add	r3, r1
 8007f58:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007f5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f5e:	3301      	adds	r3, #1
 8007f60:	643b      	str	r3, [r7, #64]	; 0x40
 8007f62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f64:	2b03      	cmp	r3, #3
 8007f66:	d9dc      	bls.n	8007f22 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007f68:	2300      	movs	r3, #0
 8007f6a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d002      	beq.n	8007f78 <find_volume+0x140>
 8007f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f74:	3b01      	subs	r3, #1
 8007f76:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007f78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007f80:	4413      	add	r3, r2
 8007f82:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007f86:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d005      	beq.n	8007f9a <find_volume+0x162>
 8007f8e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007f90:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007f92:	f7ff fefb 	bl	8007d8c <check_fs>
 8007f96:	4603      	mov	r3, r0
 8007f98:	e000      	b.n	8007f9c <find_volume+0x164>
 8007f9a:	2303      	movs	r3, #3
 8007f9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007fa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d905      	bls.n	8007fb4 <find_volume+0x17c>
 8007fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007faa:	3301      	adds	r3, #1
 8007fac:	643b      	str	r3, [r7, #64]	; 0x40
 8007fae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fb0:	2b03      	cmp	r3, #3
 8007fb2:	d9e1      	bls.n	8007f78 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007fb4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d101      	bne.n	8007fc0 <find_volume+0x188>
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e17d      	b.n	80082bc <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007fc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d901      	bls.n	8007fcc <find_volume+0x194>
 8007fc8:	230d      	movs	r3, #13
 8007fca:	e177      	b.n	80082bc <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	3334      	adds	r3, #52	; 0x34
 8007fd0:	330b      	adds	r3, #11
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f7fd ff02 	bl	8005ddc <ld_word>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fde:	d001      	beq.n	8007fe4 <find_volume+0x1ac>
 8007fe0:	230d      	movs	r3, #13
 8007fe2:	e16b      	b.n	80082bc <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe6:	3334      	adds	r3, #52	; 0x34
 8007fe8:	3316      	adds	r3, #22
 8007fea:	4618      	mov	r0, r3
 8007fec:	f7fd fef6 	bl	8005ddc <ld_word>
 8007ff0:	4603      	mov	r3, r0
 8007ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <find_volume+0x1d0>
 8007ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ffc:	3334      	adds	r3, #52	; 0x34
 8007ffe:	3324      	adds	r3, #36	; 0x24
 8008000:	4618      	mov	r0, r3
 8008002:	f7fd ff03 	bl	8005e0c <ld_dword>
 8008006:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800800a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800800c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800800e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008010:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8008014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008016:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800801a:	789b      	ldrb	r3, [r3, #2]
 800801c:	2b01      	cmp	r3, #1
 800801e:	d005      	beq.n	800802c <find_volume+0x1f4>
 8008020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008022:	789b      	ldrb	r3, [r3, #2]
 8008024:	2b02      	cmp	r3, #2
 8008026:	d001      	beq.n	800802c <find_volume+0x1f4>
 8008028:	230d      	movs	r3, #13
 800802a:	e147      	b.n	80082bc <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800802c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802e:	789b      	ldrb	r3, [r3, #2]
 8008030:	461a      	mov	r2, r3
 8008032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008034:	fb02 f303 	mul.w	r3, r2, r3
 8008038:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800803a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008040:	b29a      	uxth	r2, r3
 8008042:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008044:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008048:	895b      	ldrh	r3, [r3, #10]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d008      	beq.n	8008060 <find_volume+0x228>
 800804e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008050:	895b      	ldrh	r3, [r3, #10]
 8008052:	461a      	mov	r2, r3
 8008054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008056:	895b      	ldrh	r3, [r3, #10]
 8008058:	3b01      	subs	r3, #1
 800805a:	4013      	ands	r3, r2
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <find_volume+0x22c>
 8008060:	230d      	movs	r3, #13
 8008062:	e12b      	b.n	80082bc <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8008064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008066:	3334      	adds	r3, #52	; 0x34
 8008068:	3311      	adds	r3, #17
 800806a:	4618      	mov	r0, r3
 800806c:	f7fd feb6 	bl	8005ddc <ld_word>
 8008070:	4603      	mov	r3, r0
 8008072:	461a      	mov	r2, r3
 8008074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008076:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8008078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807a:	891b      	ldrh	r3, [r3, #8]
 800807c:	f003 030f 	and.w	r3, r3, #15
 8008080:	b29b      	uxth	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d001      	beq.n	800808a <find_volume+0x252>
 8008086:	230d      	movs	r3, #13
 8008088:	e118      	b.n	80082bc <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800808a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808c:	3334      	adds	r3, #52	; 0x34
 800808e:	3313      	adds	r3, #19
 8008090:	4618      	mov	r0, r3
 8008092:	f7fd fea3 	bl	8005ddc <ld_word>
 8008096:	4603      	mov	r3, r0
 8008098:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800809a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800809c:	2b00      	cmp	r3, #0
 800809e:	d106      	bne.n	80080ae <find_volume+0x276>
 80080a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a2:	3334      	adds	r3, #52	; 0x34
 80080a4:	3320      	adds	r3, #32
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fd feb0 	bl	8005e0c <ld_dword>
 80080ac:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	3334      	adds	r3, #52	; 0x34
 80080b2:	330e      	adds	r3, #14
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fd fe91 	bl	8005ddc <ld_word>
 80080ba:	4603      	mov	r3, r0
 80080bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80080be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d101      	bne.n	80080c8 <find_volume+0x290>
 80080c4:	230d      	movs	r3, #13
 80080c6:	e0f9      	b.n	80082bc <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80080c8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80080ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080cc:	4413      	add	r3, r2
 80080ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080d0:	8912      	ldrh	r2, [r2, #8]
 80080d2:	0912      	lsrs	r2, r2, #4
 80080d4:	b292      	uxth	r2, r2
 80080d6:	4413      	add	r3, r2
 80080d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80080da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080de:	429a      	cmp	r2, r3
 80080e0:	d201      	bcs.n	80080e6 <find_volume+0x2ae>
 80080e2:	230d      	movs	r3, #13
 80080e4:	e0ea      	b.n	80082bc <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80080e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80080ee:	8952      	ldrh	r2, [r2, #10]
 80080f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80080f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d103      	bne.n	8008104 <find_volume+0x2cc>
 80080fc:	230d      	movs	r3, #13
 80080fe:	e0dd      	b.n	80082bc <find_volume+0x484>
 8008100:	200002d8 	.word	0x200002d8
		fmt = FS_FAT32;
 8008104:	2303      	movs	r3, #3
 8008106:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800810a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800810c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008110:	4293      	cmp	r3, r2
 8008112:	d802      	bhi.n	800811a <find_volume+0x2e2>
 8008114:	2302      	movs	r3, #2
 8008116:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800811a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008120:	4293      	cmp	r3, r2
 8008122:	d802      	bhi.n	800812a <find_volume+0x2f2>
 8008124:	2301      	movs	r3, #1
 8008126:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	1c9a      	adds	r2, r3, #2
 800812e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008130:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8008132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008134:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008136:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008138:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800813a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800813c:	441a      	add	r2, r3
 800813e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008140:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8008142:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008146:	441a      	add	r2, r3
 8008148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800814c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008150:	2b03      	cmp	r3, #3
 8008152:	d11e      	bne.n	8008192 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8008154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008156:	3334      	adds	r3, #52	; 0x34
 8008158:	332a      	adds	r3, #42	; 0x2a
 800815a:	4618      	mov	r0, r3
 800815c:	f7fd fe3e 	bl	8005ddc <ld_word>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d001      	beq.n	800816a <find_volume+0x332>
 8008166:	230d      	movs	r3, #13
 8008168:	e0a8      	b.n	80082bc <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	891b      	ldrh	r3, [r3, #8]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d001      	beq.n	8008176 <find_volume+0x33e>
 8008172:	230d      	movs	r3, #13
 8008174:	e0a2      	b.n	80082bc <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008178:	3334      	adds	r3, #52	; 0x34
 800817a:	332c      	adds	r3, #44	; 0x2c
 800817c:	4618      	mov	r0, r3
 800817e:	f7fd fe45 	bl	8005e0c <ld_dword>
 8008182:	4602      	mov	r2, r0
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818a:	699b      	ldr	r3, [r3, #24]
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	647b      	str	r3, [r7, #68]	; 0x44
 8008190:	e01f      	b.n	80081d2 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	891b      	ldrh	r3, [r3, #8]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d101      	bne.n	800819e <find_volume+0x366>
 800819a:	230d      	movs	r3, #13
 800819c:	e08e      	b.n	80082bc <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800819e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80081a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081a4:	441a      	add	r2, r3
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80081aa:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80081ae:	2b02      	cmp	r3, #2
 80081b0:	d103      	bne.n	80081ba <find_volume+0x382>
 80081b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b4:	699b      	ldr	r3, [r3, #24]
 80081b6:	005b      	lsls	r3, r3, #1
 80081b8:	e00a      	b.n	80081d0 <find_volume+0x398>
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	699a      	ldr	r2, [r3, #24]
 80081be:	4613      	mov	r3, r2
 80081c0:	005b      	lsls	r3, r3, #1
 80081c2:	4413      	add	r3, r2
 80081c4:	085a      	lsrs	r2, r3, #1
 80081c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c8:	699b      	ldr	r3, [r3, #24]
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80081d0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80081d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d4:	69da      	ldr	r2, [r3, #28]
 80081d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081d8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80081dc:	0a5b      	lsrs	r3, r3, #9
 80081de:	429a      	cmp	r2, r3
 80081e0:	d201      	bcs.n	80081e6 <find_volume+0x3ae>
 80081e2:	230d      	movs	r3, #13
 80081e4:	e06a      	b.n	80082bc <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80081e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081e8:	f04f 32ff 	mov.w	r2, #4294967295
 80081ec:	615a      	str	r2, [r3, #20]
 80081ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f0:	695a      	ldr	r2, [r3, #20]
 80081f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80081f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081f8:	2280      	movs	r2, #128	; 0x80
 80081fa:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80081fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008200:	2b03      	cmp	r3, #3
 8008202:	d149      	bne.n	8008298 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008206:	3334      	adds	r3, #52	; 0x34
 8008208:	3330      	adds	r3, #48	; 0x30
 800820a:	4618      	mov	r0, r3
 800820c:	f7fd fde6 	bl	8005ddc <ld_word>
 8008210:	4603      	mov	r3, r0
 8008212:	2b01      	cmp	r3, #1
 8008214:	d140      	bne.n	8008298 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008218:	3301      	adds	r3, #1
 800821a:	4619      	mov	r1, r3
 800821c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800821e:	f7fe f88d 	bl	800633c <move_window>
 8008222:	4603      	mov	r3, r0
 8008224:	2b00      	cmp	r3, #0
 8008226:	d137      	bne.n	8008298 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800822a:	2200      	movs	r2, #0
 800822c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800822e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008230:	3334      	adds	r3, #52	; 0x34
 8008232:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008236:	4618      	mov	r0, r3
 8008238:	f7fd fdd0 	bl	8005ddc <ld_word>
 800823c:	4603      	mov	r3, r0
 800823e:	461a      	mov	r2, r3
 8008240:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008244:	429a      	cmp	r2, r3
 8008246:	d127      	bne.n	8008298 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	3334      	adds	r3, #52	; 0x34
 800824c:	4618      	mov	r0, r3
 800824e:	f7fd fddd 	bl	8005e0c <ld_dword>
 8008252:	4603      	mov	r3, r0
 8008254:	4a1b      	ldr	r2, [pc, #108]	; (80082c4 <find_volume+0x48c>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d11e      	bne.n	8008298 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800825a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825c:	3334      	adds	r3, #52	; 0x34
 800825e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8008262:	4618      	mov	r0, r3
 8008264:	f7fd fdd2 	bl	8005e0c <ld_dword>
 8008268:	4603      	mov	r3, r0
 800826a:	4a17      	ldr	r2, [pc, #92]	; (80082c8 <find_volume+0x490>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d113      	bne.n	8008298 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	3334      	adds	r3, #52	; 0x34
 8008274:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008278:	4618      	mov	r0, r3
 800827a:	f7fd fdc7 	bl	8005e0c <ld_dword>
 800827e:	4602      	mov	r2, r0
 8008280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008282:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008286:	3334      	adds	r3, #52	; 0x34
 8008288:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800828c:	4618      	mov	r0, r3
 800828e:	f7fd fdbd 	bl	8005e0c <ld_dword>
 8008292:	4602      	mov	r2, r0
 8008294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008296:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800829a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800829e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80082a0:	4b0a      	ldr	r3, [pc, #40]	; (80082cc <find_volume+0x494>)
 80082a2:	881b      	ldrh	r3, [r3, #0]
 80082a4:	3301      	adds	r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	4b08      	ldr	r3, [pc, #32]	; (80082cc <find_volume+0x494>)
 80082aa:	801a      	strh	r2, [r3, #0]
 80082ac:	4b07      	ldr	r3, [pc, #28]	; (80082cc <find_volume+0x494>)
 80082ae:	881a      	ldrh	r2, [r3, #0]
 80082b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082b2:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80082b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80082b6:	f7fd ffd9 	bl	800626c <clear_lock>
#endif
	return FR_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3758      	adds	r7, #88	; 0x58
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	41615252 	.word	0x41615252
 80082c8:	61417272 	.word	0x61417272
 80082cc:	200002dc 	.word	0x200002dc

080082d0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b084      	sub	sp, #16
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80082da:	2309      	movs	r3, #9
 80082dc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d01c      	beq.n	800831e <validate+0x4e>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d018      	beq.n	800831e <validate+0x4e>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	781b      	ldrb	r3, [r3, #0]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d013      	beq.n	800831e <validate+0x4e>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	889a      	ldrh	r2, [r3, #4]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	88db      	ldrh	r3, [r3, #6]
 8008300:	429a      	cmp	r2, r3
 8008302:	d10c      	bne.n	800831e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	785b      	ldrb	r3, [r3, #1]
 800830a:	4618      	mov	r0, r3
 800830c:	f7fd fcc8 	bl	8005ca0 <disk_status>
 8008310:	4603      	mov	r3, r0
 8008312:	f003 0301 	and.w	r3, r3, #1
 8008316:	2b00      	cmp	r3, #0
 8008318:	d101      	bne.n	800831e <validate+0x4e>
			res = FR_OK;
 800831a:	2300      	movs	r3, #0
 800831c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d102      	bne.n	800832a <validate+0x5a>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	e000      	b.n	800832c <validate+0x5c>
 800832a:	2300      	movs	r3, #0
 800832c:	683a      	ldr	r2, [r7, #0]
 800832e:	6013      	str	r3, [r2, #0]
	return res;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}
	...

0800833c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b088      	sub	sp, #32
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	4613      	mov	r3, r2
 8008348:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800834e:	f107 0310 	add.w	r3, r7, #16
 8008352:	4618      	mov	r0, r3
 8008354:	f7ff fcd5 	bl	8007d02 <get_ldnumber>
 8008358:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	2b00      	cmp	r3, #0
 800835e:	da01      	bge.n	8008364 <f_mount+0x28>
 8008360:	230b      	movs	r3, #11
 8008362:	e02b      	b.n	80083bc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008364:	4a17      	ldr	r2, [pc, #92]	; (80083c4 <f_mount+0x88>)
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800836c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800836e:	69bb      	ldr	r3, [r7, #24]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d005      	beq.n	8008380 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008374:	69b8      	ldr	r0, [r7, #24]
 8008376:	f7fd ff79 	bl	800626c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800837a:	69bb      	ldr	r3, [r7, #24]
 800837c:	2200      	movs	r2, #0
 800837e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	2200      	movs	r2, #0
 800838a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	490d      	ldr	r1, [pc, #52]	; (80083c4 <f_mount+0x88>)
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d002      	beq.n	80083a2 <f_mount+0x66>
 800839c:	79fb      	ldrb	r3, [r7, #7]
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d001      	beq.n	80083a6 <f_mount+0x6a>
 80083a2:	2300      	movs	r3, #0
 80083a4:	e00a      	b.n	80083bc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80083a6:	f107 010c 	add.w	r1, r7, #12
 80083aa:	f107 0308 	add.w	r3, r7, #8
 80083ae:	2200      	movs	r2, #0
 80083b0:	4618      	mov	r0, r3
 80083b2:	f7ff fd41 	bl	8007e38 <find_volume>
 80083b6:	4603      	mov	r3, r0
 80083b8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80083ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80083bc:	4618      	mov	r0, r3
 80083be:	3720      	adds	r7, #32
 80083c0:	46bd      	mov	sp, r7
 80083c2:	bd80      	pop	{r7, pc}
 80083c4:	200002d8 	.word	0x200002d8

080083c8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80083ce:	af00      	add	r7, sp, #0
 80083d0:	f107 030c 	add.w	r3, r7, #12
 80083d4:	6018      	str	r0, [r3, #0]
 80083d6:	f107 0308 	add.w	r3, r7, #8
 80083da:	6019      	str	r1, [r3, #0]
 80083dc:	1dfb      	adds	r3, r7, #7
 80083de:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80083e0:	f107 030c 	add.w	r3, r7, #12
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d101      	bne.n	80083ee <f_open+0x26>
 80083ea:	2309      	movs	r3, #9
 80083ec:	e231      	b.n	8008852 <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80083ee:	1dfb      	adds	r3, r7, #7
 80083f0:	1dfa      	adds	r2, r7, #7
 80083f2:	7812      	ldrb	r2, [r2, #0]
 80083f4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80083f8:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80083fa:	1dfb      	adds	r3, r7, #7
 80083fc:	781a      	ldrb	r2, [r3, #0]
 80083fe:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8008402:	f107 0308 	add.w	r3, r7, #8
 8008406:	4618      	mov	r0, r3
 8008408:	f7ff fd16 	bl	8007e38 <find_volume>
 800840c:	4603      	mov	r3, r0
 800840e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8008412:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008416:	2b00      	cmp	r3, #0
 8008418:	f040 8210 	bne.w	800883c <f_open+0x474>
		dj.obj.fs = fs;
 800841c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008420:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8008424:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008428:	f107 0214 	add.w	r2, r7, #20
 800842c:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 800842e:	f107 0308 	add.w	r3, r7, #8
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008438:	4611      	mov	r1, r2
 800843a:	4618      	mov	r0, r3
 800843c:	f7ff fbf0 	bl	8007c20 <follow_path>
 8008440:	4603      	mov	r3, r0
 8008442:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008446:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800844a:	2b00      	cmp	r3, #0
 800844c:	d11b      	bne.n	8008486 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800844e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8008452:	b25b      	sxtb	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	da03      	bge.n	8008460 <f_open+0x98>
				res = FR_INVALID_NAME;
 8008458:	2306      	movs	r3, #6
 800845a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800845e:	e012      	b.n	8008486 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008460:	1dfb      	adds	r3, r7, #7
 8008462:	781b      	ldrb	r3, [r3, #0]
 8008464:	f023 0301 	bic.w	r3, r3, #1
 8008468:	2b00      	cmp	r3, #0
 800846a:	bf14      	ite	ne
 800846c:	2301      	movne	r3, #1
 800846e:	2300      	moveq	r3, #0
 8008470:	b2db      	uxtb	r3, r3
 8008472:	461a      	mov	r2, r3
 8008474:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008478:	4611      	mov	r1, r2
 800847a:	4618      	mov	r0, r3
 800847c:	f7fd fdae 	bl	8005fdc <chk_lock>
 8008480:	4603      	mov	r3, r0
 8008482:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008486:	1dfb      	adds	r3, r7, #7
 8008488:	781b      	ldrb	r3, [r3, #0]
 800848a:	f003 031c 	and.w	r3, r3, #28
 800848e:	2b00      	cmp	r3, #0
 8008490:	f000 809b 	beq.w	80085ca <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8008494:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008498:	2b00      	cmp	r3, #0
 800849a:	d019      	beq.n	80084d0 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800849c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d10e      	bne.n	80084c2 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80084a4:	f7fd fdf6 	bl	8006094 <enq_lock>
 80084a8:	4603      	mov	r3, r0
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d006      	beq.n	80084bc <f_open+0xf4>
 80084ae:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80084b2:	4618      	mov	r0, r3
 80084b4:	f7fe ffdc 	bl	8007470 <dir_register>
 80084b8:	4603      	mov	r3, r0
 80084ba:	e000      	b.n	80084be <f_open+0xf6>
 80084bc:	2312      	movs	r3, #18
 80084be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80084c2:	1dfb      	adds	r3, r7, #7
 80084c4:	1dfa      	adds	r2, r7, #7
 80084c6:	7812      	ldrb	r2, [r2, #0]
 80084c8:	f042 0208 	orr.w	r2, r2, #8
 80084cc:	701a      	strb	r2, [r3, #0]
 80084ce:	e012      	b.n	80084f6 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80084d0:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80084d4:	f003 0311 	and.w	r3, r3, #17
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d003      	beq.n	80084e4 <f_open+0x11c>
					res = FR_DENIED;
 80084dc:	2307      	movs	r3, #7
 80084de:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80084e2:	e008      	b.n	80084f6 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80084e4:	1dfb      	adds	r3, r7, #7
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	f003 0304 	and.w	r3, r3, #4
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d002      	beq.n	80084f6 <f_open+0x12e>
 80084f0:	2308      	movs	r3, #8
 80084f2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80084f6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	f040 8082 	bne.w	8008604 <f_open+0x23c>
 8008500:	1dfb      	adds	r3, r7, #7
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	f003 0308 	and.w	r3, r3, #8
 8008508:	2b00      	cmp	r3, #0
 800850a:	d07b      	beq.n	8008604 <f_open+0x23c>
				dw = GET_FATTIME();
 800850c:	f7fd fa4e 	bl	80059ac <get_fattime>
 8008510:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008514:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008518:	330e      	adds	r3, #14
 800851a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800851e:	4618      	mov	r0, r3
 8008520:	f7fd fcb2 	bl	8005e88 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008524:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008528:	3316      	adds	r3, #22
 800852a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800852e:	4618      	mov	r0, r3
 8008530:	f7fd fcaa 	bl	8005e88 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008534:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008538:	330b      	adds	r3, #11
 800853a:	2220      	movs	r2, #32
 800853c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800853e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008542:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008546:	4611      	mov	r1, r2
 8008548:	4618      	mov	r0, r3
 800854a:	f7fe fbfe 	bl	8006d4a <ld_clust>
 800854e:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008552:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008556:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800855a:	2200      	movs	r2, #0
 800855c:	4618      	mov	r0, r3
 800855e:	f7fe fc13 	bl	8006d88 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008562:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008566:	331c      	adds	r3, #28
 8008568:	2100      	movs	r1, #0
 800856a:	4618      	mov	r0, r3
 800856c:	f7fd fc8c 	bl	8005e88 <st_dword>
					fs->wflag = 1;
 8008570:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008574:	2201      	movs	r2, #1
 8008576:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008578:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800857c:	2b00      	cmp	r3, #0
 800857e:	d041      	beq.n	8008604 <f_open+0x23c>
						dw = fs->winsect;
 8008580:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008586:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800858a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800858e:	2200      	movs	r2, #0
 8008590:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8008594:	4618      	mov	r0, r3
 8008596:	f7fe f920 	bl	80067da <remove_chain>
 800859a:	4603      	mov	r3, r0
 800859c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 80085a0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d12d      	bne.n	8008604 <f_open+0x23c>
							res = move_window(fs, dw);
 80085a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80085ac:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80085b0:	4618      	mov	r0, r3
 80085b2:	f7fd fec3 	bl	800633c <move_window>
 80085b6:	4603      	mov	r3, r0
 80085b8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80085bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80085c0:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80085c4:	3a01      	subs	r2, #1
 80085c6:	611a      	str	r2, [r3, #16]
 80085c8:	e01c      	b.n	8008604 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80085ca:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d118      	bne.n	8008604 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80085d2:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80085d6:	f003 0310 	and.w	r3, r3, #16
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <f_open+0x21e>
					res = FR_NO_FILE;
 80085de:	2304      	movs	r3, #4
 80085e0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80085e4:	e00e      	b.n	8008604 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80085e6:	1dfb      	adds	r3, r7, #7
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	f003 0302 	and.w	r3, r3, #2
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d008      	beq.n	8008604 <f_open+0x23c>
 80085f2:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80085f6:	f003 0301 	and.w	r3, r3, #1
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d002      	beq.n	8008604 <f_open+0x23c>
						res = FR_DENIED;
 80085fe:	2307      	movs	r3, #7
 8008600:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8008604:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008608:	2b00      	cmp	r3, #0
 800860a:	d136      	bne.n	800867a <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800860c:	1dfb      	adds	r3, r7, #7
 800860e:	781b      	ldrb	r3, [r3, #0]
 8008610:	f003 0308 	and.w	r3, r3, #8
 8008614:	2b00      	cmp	r3, #0
 8008616:	d005      	beq.n	8008624 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8008618:	1dfb      	adds	r3, r7, #7
 800861a:	1dfa      	adds	r2, r7, #7
 800861c:	7812      	ldrb	r2, [r2, #0]
 800861e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008622:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008624:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008628:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800862a:	f107 030c 	add.w	r3, r7, #12
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008632:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008636:	f107 030c 	add.w	r3, r7, #12
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800863e:	1dfb      	adds	r3, r7, #7
 8008640:	781b      	ldrb	r3, [r3, #0]
 8008642:	f023 0301 	bic.w	r3, r3, #1
 8008646:	2b00      	cmp	r3, #0
 8008648:	bf14      	ite	ne
 800864a:	2301      	movne	r3, #1
 800864c:	2300      	moveq	r3, #0
 800864e:	b2db      	uxtb	r3, r3
 8008650:	461a      	mov	r2, r3
 8008652:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008656:	4611      	mov	r1, r2
 8008658:	4618      	mov	r0, r3
 800865a:	f7fd fd3d 	bl	80060d8 <inc_lock>
 800865e:	4602      	mov	r2, r0
 8008660:	f107 030c 	add.w	r3, r7, #12
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008668:	f107 030c 	add.w	r3, r7, #12
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d102      	bne.n	800867a <f_open+0x2b2>
 8008674:	2302      	movs	r3, #2
 8008676:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800867a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800867e:	2b00      	cmp	r3, #0
 8008680:	f040 80dc 	bne.w	800883c <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008684:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008688:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800868c:	4611      	mov	r1, r2
 800868e:	4618      	mov	r0, r3
 8008690:	f7fe fb5b 	bl	8006d4a <ld_clust>
 8008694:	4602      	mov	r2, r0
 8008696:	f107 030c 	add.w	r3, r7, #12
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800869e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80086a2:	331c      	adds	r3, #28
 80086a4:	4618      	mov	r0, r3
 80086a6:	f7fd fbb1 	bl	8005e0c <ld_dword>
 80086aa:	4602      	mov	r2, r0
 80086ac:	f107 030c 	add.w	r3, r7, #12
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80086b4:	f107 030c 	add.w	r3, r7, #12
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2200      	movs	r2, #0
 80086bc:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80086be:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80086c2:	f107 030c 	add.w	r3, r7, #12
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80086ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80086ce:	88da      	ldrh	r2, [r3, #6]
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80086d8:	f107 030c 	add.w	r3, r7, #12
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	1dfa      	adds	r2, r7, #7
 80086e0:	7812      	ldrb	r2, [r2, #0]
 80086e2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80086e4:	f107 030c 	add.w	r3, r7, #12
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	2200      	movs	r2, #0
 80086ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80086ee:	f107 030c 	add.w	r3, r7, #12
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2200      	movs	r2, #0
 80086f6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80086f8:	f107 030c 	add.w	r3, r7, #12
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	2200      	movs	r2, #0
 8008700:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008702:	f107 030c 	add.w	r3, r7, #12
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3330      	adds	r3, #48	; 0x30
 800870a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800870e:	2100      	movs	r1, #0
 8008710:	4618      	mov	r0, r3
 8008712:	f7fd fc06 	bl	8005f22 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008716:	1dfb      	adds	r3, r7, #7
 8008718:	781b      	ldrb	r3, [r3, #0]
 800871a:	f003 0320 	and.w	r3, r3, #32
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 808c 	beq.w	800883c <f_open+0x474>
 8008724:	f107 030c 	add.w	r3, r7, #12
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	2b00      	cmp	r3, #0
 800872e:	f000 8085 	beq.w	800883c <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008732:	f107 030c 	add.w	r3, r7, #12
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	f107 030c 	add.w	r3, r7, #12
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008742:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008746:	895b      	ldrh	r3, [r3, #10]
 8008748:	025b      	lsls	r3, r3, #9
 800874a:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800874e:	f107 030c 	add.w	r3, r7, #12
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	689b      	ldr	r3, [r3, #8]
 8008756:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800875a:	f107 030c 	add.w	r3, r7, #12
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68db      	ldr	r3, [r3, #12]
 8008762:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8008766:	e01f      	b.n	80087a8 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 8008768:	f107 030c 	add.w	r3, r7, #12
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008772:	4618      	mov	r0, r3
 8008774:	f7fd fe9d 	bl	80064b2 <get_fat>
 8008778:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800877c:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8008780:	2b01      	cmp	r3, #1
 8008782:	d802      	bhi.n	800878a <f_open+0x3c2>
 8008784:	2302      	movs	r3, #2
 8008786:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800878a:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800878e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008792:	d102      	bne.n	800879a <f_open+0x3d2>
 8008794:	2301      	movs	r3, #1
 8008796:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800879a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800879e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80087a2:	1ad3      	subs	r3, r2, r3
 80087a4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80087a8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d105      	bne.n	80087bc <f_open+0x3f4>
 80087b0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80087b4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d8d5      	bhi.n	8008768 <f_open+0x3a0>
				}
				fp->clust = clst;
 80087bc:	f107 030c 	add.w	r3, r7, #12
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80087c6:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80087c8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d135      	bne.n	800883c <f_open+0x474>
 80087d0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80087d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d02f      	beq.n	800883c <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80087dc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80087e0:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80087e4:	4618      	mov	r0, r3
 80087e6:	f7fd fe45 	bl	8006474 <clust2sect>
 80087ea:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 80087ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d103      	bne.n	80087fe <f_open+0x436>
						res = FR_INT_ERR;
 80087f6:	2302      	movs	r3, #2
 80087f8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80087fc:	e01e      	b.n	800883c <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80087fe:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008802:	0a5a      	lsrs	r2, r3, #9
 8008804:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008808:	441a      	add	r2, r3
 800880a:	f107 030c 	add.w	r3, r7, #12
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008812:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008816:	7858      	ldrb	r0, [r3, #1]
 8008818:	f107 030c 	add.w	r3, r7, #12
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008822:	f107 030c 	add.w	r3, r7, #12
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6a1a      	ldr	r2, [r3, #32]
 800882a:	2301      	movs	r3, #1
 800882c:	f7fd fa78 	bl	8005d20 <disk_read>
 8008830:	4603      	mov	r3, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	d002      	beq.n	800883c <f_open+0x474>
 8008836:	2301      	movs	r3, #1
 8008838:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800883c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008840:	2b00      	cmp	r3, #0
 8008842:	d004      	beq.n	800884e <f_open+0x486>
 8008844:	f107 030c 	add.w	r3, r7, #12
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800884e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8008852:	4618      	mov	r0, r3
 8008854:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b08c      	sub	sp, #48	; 0x30
 8008860:	af00      	add	r7, sp, #0
 8008862:	60f8      	str	r0, [r7, #12]
 8008864:	60b9      	str	r1, [r7, #8]
 8008866:	607a      	str	r2, [r7, #4]
 8008868:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	2200      	movs	r2, #0
 8008872:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f107 0210 	add.w	r2, r7, #16
 800887a:	4611      	mov	r1, r2
 800887c:	4618      	mov	r0, r3
 800887e:	f7ff fd27 	bl	80082d0 <validate>
 8008882:	4603      	mov	r3, r0
 8008884:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008888:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800888c:	2b00      	cmp	r3, #0
 800888e:	d107      	bne.n	80088a0 <f_write+0x44>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	7d5b      	ldrb	r3, [r3, #21]
 8008894:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008898:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800889c:	2b00      	cmp	r3, #0
 800889e:	d002      	beq.n	80088a6 <f_write+0x4a>
 80088a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80088a4:	e14b      	b.n	8008b3e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	7d1b      	ldrb	r3, [r3, #20]
 80088aa:	f003 0302 	and.w	r3, r3, #2
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <f_write+0x5a>
 80088b2:	2307      	movs	r3, #7
 80088b4:	e143      	b.n	8008b3e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	699a      	ldr	r2, [r3, #24]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	441a      	add	r2, r3
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	699b      	ldr	r3, [r3, #24]
 80088c2:	429a      	cmp	r2, r3
 80088c4:	f080 812d 	bcs.w	8008b22 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	699b      	ldr	r3, [r3, #24]
 80088cc:	43db      	mvns	r3, r3
 80088ce:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80088d0:	e127      	b.n	8008b22 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	699b      	ldr	r3, [r3, #24]
 80088d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f040 80e3 	bne.w	8008aa6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	699b      	ldr	r3, [r3, #24]
 80088e4:	0a5b      	lsrs	r3, r3, #9
 80088e6:	693a      	ldr	r2, [r7, #16]
 80088e8:	8952      	ldrh	r2, [r2, #10]
 80088ea:	3a01      	subs	r2, #1
 80088ec:	4013      	ands	r3, r2
 80088ee:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80088f0:	69bb      	ldr	r3, [r7, #24]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d143      	bne.n	800897e <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d10c      	bne.n	8008918 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008906:	2b00      	cmp	r3, #0
 8008908:	d11a      	bne.n	8008940 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2100      	movs	r1, #0
 800890e:	4618      	mov	r0, r3
 8008910:	f7fd ffc8 	bl	80068a4 <create_chain>
 8008914:	62b8      	str	r0, [r7, #40]	; 0x28
 8008916:	e013      	b.n	8008940 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800891c:	2b00      	cmp	r3, #0
 800891e:	d007      	beq.n	8008930 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	4619      	mov	r1, r3
 8008926:	68f8      	ldr	r0, [r7, #12]
 8008928:	f7fe f854 	bl	80069d4 <clmt_clust>
 800892c:	62b8      	str	r0, [r7, #40]	; 0x28
 800892e:	e007      	b.n	8008940 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	69db      	ldr	r3, [r3, #28]
 8008936:	4619      	mov	r1, r3
 8008938:	4610      	mov	r0, r2
 800893a:	f7fd ffb3 	bl	80068a4 <create_chain>
 800893e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008942:	2b00      	cmp	r3, #0
 8008944:	f000 80f2 	beq.w	8008b2c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800894a:	2b01      	cmp	r3, #1
 800894c:	d104      	bne.n	8008958 <f_write+0xfc>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2202      	movs	r2, #2
 8008952:	755a      	strb	r2, [r3, #21]
 8008954:	2302      	movs	r3, #2
 8008956:	e0f2      	b.n	8008b3e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800895a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800895e:	d104      	bne.n	800896a <f_write+0x10e>
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	755a      	strb	r2, [r3, #21]
 8008966:	2301      	movs	r3, #1
 8008968:	e0e9      	b.n	8008b3e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800896e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	689b      	ldr	r3, [r3, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d102      	bne.n	800897e <f_write+0x122>
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800897c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	7d1b      	ldrb	r3, [r3, #20]
 8008982:	b25b      	sxtb	r3, r3
 8008984:	2b00      	cmp	r3, #0
 8008986:	da18      	bge.n	80089ba <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	7858      	ldrb	r0, [r3, #1]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6a1a      	ldr	r2, [r3, #32]
 8008996:	2301      	movs	r3, #1
 8008998:	f7fd f9e2 	bl	8005d60 <disk_write>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d004      	beq.n	80089ac <f_write+0x150>
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	2201      	movs	r2, #1
 80089a6:	755a      	strb	r2, [r3, #21]
 80089a8:	2301      	movs	r3, #1
 80089aa:	e0c8      	b.n	8008b3e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	7d1b      	ldrb	r3, [r3, #20]
 80089b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	69db      	ldr	r3, [r3, #28]
 80089c0:	4619      	mov	r1, r3
 80089c2:	4610      	mov	r0, r2
 80089c4:	f7fd fd56 	bl	8006474 <clust2sect>
 80089c8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d104      	bne.n	80089da <f_write+0x17e>
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2202      	movs	r2, #2
 80089d4:	755a      	strb	r2, [r3, #21]
 80089d6:	2302      	movs	r3, #2
 80089d8:	e0b1      	b.n	8008b3e <f_write+0x2e2>
			sect += csect;
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	69bb      	ldr	r3, [r7, #24]
 80089de:	4413      	add	r3, r2
 80089e0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	0a5b      	lsrs	r3, r3, #9
 80089e6:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80089e8:	6a3b      	ldr	r3, [r7, #32]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d03c      	beq.n	8008a68 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	6a3b      	ldr	r3, [r7, #32]
 80089f2:	4413      	add	r3, r2
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	8952      	ldrh	r2, [r2, #10]
 80089f8:	4293      	cmp	r3, r2
 80089fa:	d905      	bls.n	8008a08 <f_write+0x1ac>
					cc = fs->csize - csect;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	895b      	ldrh	r3, [r3, #10]
 8008a00:	461a      	mov	r2, r3
 8008a02:	69bb      	ldr	r3, [r7, #24]
 8008a04:	1ad3      	subs	r3, r2, r3
 8008a06:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008a08:	693b      	ldr	r3, [r7, #16]
 8008a0a:	7858      	ldrb	r0, [r3, #1]
 8008a0c:	6a3b      	ldr	r3, [r7, #32]
 8008a0e:	697a      	ldr	r2, [r7, #20]
 8008a10:	69f9      	ldr	r1, [r7, #28]
 8008a12:	f7fd f9a5 	bl	8005d60 <disk_write>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d004      	beq.n	8008a26 <f_write+0x1ca>
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	2201      	movs	r2, #1
 8008a20:	755a      	strb	r2, [r3, #21]
 8008a22:	2301      	movs	r3, #1
 8008a24:	e08b      	b.n	8008b3e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	6a1a      	ldr	r2, [r3, #32]
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	1ad3      	subs	r3, r2, r3
 8008a2e:	6a3a      	ldr	r2, [r7, #32]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d915      	bls.n	8008a60 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	6a1a      	ldr	r2, [r3, #32]
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	1ad3      	subs	r3, r2, r3
 8008a42:	025b      	lsls	r3, r3, #9
 8008a44:	69fa      	ldr	r2, [r7, #28]
 8008a46:	4413      	add	r3, r2
 8008a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a4c:	4619      	mov	r1, r3
 8008a4e:	f7fd fa47 	bl	8005ee0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	7d1b      	ldrb	r3, [r3, #20]
 8008a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a5a:	b2da      	uxtb	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008a60:	6a3b      	ldr	r3, [r7, #32]
 8008a62:	025b      	lsls	r3, r3, #9
 8008a64:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008a66:	e03f      	b.n	8008ae8 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	6a1b      	ldr	r3, [r3, #32]
 8008a6c:	697a      	ldr	r2, [r7, #20]
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d016      	beq.n	8008aa0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	699a      	ldr	r2, [r3, #24]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d210      	bcs.n	8008aa0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	7858      	ldrb	r0, [r3, #1]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a88:	2301      	movs	r3, #1
 8008a8a:	697a      	ldr	r2, [r7, #20]
 8008a8c:	f7fd f948 	bl	8005d20 <disk_read>
 8008a90:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d004      	beq.n	8008aa0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	2201      	movs	r2, #1
 8008a9a:	755a      	strb	r2, [r3, #21]
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	e04e      	b.n	8008b3e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	697a      	ldr	r2, [r7, #20]
 8008aa4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008aae:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008ab2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d901      	bls.n	8008ac0 <f_write+0x264>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	699b      	ldr	r3, [r3, #24]
 8008aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ace:	4413      	add	r3, r2
 8008ad0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad2:	69f9      	ldr	r1, [r7, #28]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7fd fa03 	bl	8005ee0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	7d1b      	ldrb	r3, [r3, #20]
 8008ade:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008ae2:	b2da      	uxtb	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008ae8:	69fa      	ldr	r2, [r7, #28]
 8008aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aec:	4413      	add	r3, r2
 8008aee:	61fb      	str	r3, [r7, #28]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	699a      	ldr	r2, [r3, #24]
 8008af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af6:	441a      	add	r2, r3
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	619a      	str	r2, [r3, #24]
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	68da      	ldr	r2, [r3, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	699b      	ldr	r3, [r3, #24]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	bf38      	it	cc
 8008b08:	461a      	movcc	r2, r3
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	60da      	str	r2, [r3, #12]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	441a      	add	r2, r3
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	601a      	str	r2, [r3, #0]
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	f47f aed4 	bne.w	80088d2 <f_write+0x76>
 8008b2a:	e000      	b.n	8008b2e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008b2c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	7d1b      	ldrb	r3, [r3, #20]
 8008b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008b3c:	2300      	movs	r3, #0
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3730      	adds	r7, #48	; 0x30
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b086      	sub	sp, #24
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f107 0208 	add.w	r2, r7, #8
 8008b54:	4611      	mov	r1, r2
 8008b56:	4618      	mov	r0, r3
 8008b58:	f7ff fbba 	bl	80082d0 <validate>
 8008b5c:	4603      	mov	r3, r0
 8008b5e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008b60:	7dfb      	ldrb	r3, [r7, #23]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d168      	bne.n	8008c38 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	7d1b      	ldrb	r3, [r3, #20]
 8008b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d062      	beq.n	8008c38 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	7d1b      	ldrb	r3, [r3, #20]
 8008b76:	b25b      	sxtb	r3, r3
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	da15      	bge.n	8008ba8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	7858      	ldrb	r0, [r3, #1]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6a1a      	ldr	r2, [r3, #32]
 8008b8a:	2301      	movs	r3, #1
 8008b8c:	f7fd f8e8 	bl	8005d60 <disk_write>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <f_sync+0x54>
 8008b96:	2301      	movs	r3, #1
 8008b98:	e04f      	b.n	8008c3a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	7d1b      	ldrb	r3, [r3, #20]
 8008b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ba2:	b2da      	uxtb	r2, r3
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008ba8:	f7fc ff00 	bl	80059ac <get_fattime>
 8008bac:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008bae:	68ba      	ldr	r2, [r7, #8]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4610      	mov	r0, r2
 8008bb8:	f7fd fbc0 	bl	800633c <move_window>
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d138      	bne.n	8008c38 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bca:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	330b      	adds	r3, #11
 8008bd0:	781a      	ldrb	r2, [r3, #0]
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	330b      	adds	r3, #11
 8008bd6:	f042 0220 	orr.w	r2, r2, #32
 8008bda:	b2d2      	uxtb	r2, r2
 8008bdc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6818      	ldr	r0, [r3, #0]
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	461a      	mov	r2, r3
 8008be8:	68f9      	ldr	r1, [r7, #12]
 8008bea:	f7fe f8cd 	bl	8006d88 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	f103 021c 	add.w	r2, r3, #28
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	68db      	ldr	r3, [r3, #12]
 8008bf8:	4619      	mov	r1, r3
 8008bfa:	4610      	mov	r0, r2
 8008bfc:	f7fd f944 	bl	8005e88 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	3316      	adds	r3, #22
 8008c04:	6939      	ldr	r1, [r7, #16]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fd f93e 	bl	8005e88 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	3312      	adds	r3, #18
 8008c10:	2100      	movs	r1, #0
 8008c12:	4618      	mov	r0, r3
 8008c14:	f7fd f91d 	bl	8005e52 <st_word>
					fs->wflag = 1;
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fd fbb9 	bl	8006398 <sync_fs>
 8008c26:	4603      	mov	r3, r0
 8008c28:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	7d1b      	ldrb	r3, [r3, #20]
 8008c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c32:	b2da      	uxtb	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008c38:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}

08008c42 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008c42:	b580      	push	{r7, lr}
 8008c44:	b084      	sub	sp, #16
 8008c46:	af00      	add	r7, sp, #0
 8008c48:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f7ff ff7b 	bl	8008b46 <f_sync>
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008c54:	7bfb      	ldrb	r3, [r7, #15]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d118      	bne.n	8008c8c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f107 0208 	add.w	r2, r7, #8
 8008c60:	4611      	mov	r1, r2
 8008c62:	4618      	mov	r0, r3
 8008c64:	f7ff fb34 	bl	80082d0 <validate>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008c6c:	7bfb      	ldrb	r3, [r7, #15]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d10c      	bne.n	8008c8c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	691b      	ldr	r3, [r3, #16]
 8008c76:	4618      	mov	r0, r3
 8008c78:	f7fd fabc 	bl	80061f4 <dec_lock>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008c80:	7bfb      	ldrb	r3, [r7, #15]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d102      	bne.n	8008c8c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3710      	adds	r7, #16
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}

08008c96 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	1d3b      	adds	r3, r7, #4
 8008ca0:	6018      	str	r0, [r3, #0]
 8008ca2:	463b      	mov	r3, r7
 8008ca4:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008ca6:	1d3b      	adds	r3, r7, #4
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d101      	bne.n	8008cb2 <f_opendir+0x1c>
 8008cae:	2309      	movs	r3, #9
 8008cb0:	e08a      	b.n	8008dc8 <f_opendir+0x132>

	/* Get logical drive */
	obj = &dp->obj;
 8008cb2:	1d3b      	adds	r3, r7, #4
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 8008cba:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8008cbe:	463b      	mov	r3, r7
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f7ff f8b8 	bl	8007e38 <find_volume>
 8008cc8:	4603      	mov	r3, r0
 8008cca:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 8008cce:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d16e      	bne.n	8008db4 <f_opendir+0x11e>
		obj->fs = fs;
 8008cd6:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8008cda:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008cde:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8008ce0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008ce4:	f107 020c 	add.w	r2, r7, #12
 8008ce8:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008cea:	463b      	mov	r3, r7
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	1d3b      	adds	r3, r7, #4
 8008cf0:	4611      	mov	r1, r2
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	f7fe ff94 	bl	8007c20 <follow_path>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 8008cfe:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d14f      	bne.n	8008da6 <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008d06:	1d3b      	adds	r3, r7, #4
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008d0e:	b25b      	sxtb	r3, r3
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	db17      	blt.n	8008d44 <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008d14:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d18:	799b      	ldrb	r3, [r3, #6]
 8008d1a:	f003 0310 	and.w	r3, r3, #16
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00d      	beq.n	8008d3e <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008d22:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8008d26:	1d3b      	adds	r3, r7, #4
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	6a1b      	ldr	r3, [r3, #32]
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	f7fe f80b 	bl	8006d4a <ld_clust>
 8008d34:	4602      	mov	r2, r0
 8008d36:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d3a:	609a      	str	r2, [r3, #8]
 8008d3c:	e002      	b.n	8008d44 <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008d3e:	2305      	movs	r3, #5
 8008d40:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 8008d44:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d12c      	bne.n	8008da6 <f_opendir+0x110>
				obj->id = fs->id;
 8008d4c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008d50:	88da      	ldrh	r2, [r3, #6]
 8008d52:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d56:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008d58:	1d3b      	adds	r3, r7, #4
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	6818      	ldr	r0, [r3, #0]
 8008d5e:	f7fd fe6d 	bl	8006a3c <dir_sdi>
 8008d62:	4603      	mov	r3, r0
 8008d64:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008d68:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d11a      	bne.n	8008da6 <f_opendir+0x110>
					if (obj->sclust) {
 8008d70:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d74:	689b      	ldr	r3, [r3, #8]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d011      	beq.n	8008d9e <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008d7a:	1d3b      	adds	r3, r7, #4
 8008d7c:	2100      	movs	r1, #0
 8008d7e:	6818      	ldr	r0, [r3, #0]
 8008d80:	f7fd f9aa 	bl	80060d8 <inc_lock>
 8008d84:	4602      	mov	r2, r0
 8008d86:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d8a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008d8c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d107      	bne.n	8008da6 <f_opendir+0x110>
 8008d96:	2312      	movs	r3, #18
 8008d98:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 8008d9c:	e003      	b.n	8008da6 <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008d9e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008da2:	2200      	movs	r2, #0
 8008da4:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008da6:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008daa:	2b04      	cmp	r3, #4
 8008dac:	d102      	bne.n	8008db4 <f_opendir+0x11e>
 8008dae:	2305      	movs	r3, #5
 8008db0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008db4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d003      	beq.n	8008dc4 <f_opendir+0x12e>
 8008dbc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008dc4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b084      	sub	sp, #16
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f107 0208 	add.w	r2, r7, #8
 8008de0:	4611      	mov	r1, r2
 8008de2:	4618      	mov	r0, r3
 8008de4:	f7ff fa74 	bl	80082d0 <validate>
 8008de8:	4603      	mov	r3, r0
 8008dea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008dec:	7bfb      	ldrb	r3, [r7, #15]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d110      	bne.n	8008e14 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	691b      	ldr	r3, [r3, #16]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d006      	beq.n	8008e08 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	691b      	ldr	r3, [r3, #16]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fd f9f8 	bl	80061f4 <dec_lock>
 8008e04:	4603      	mov	r3, r0
 8008e06:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8008e08:	7bfb      	ldrb	r3, [r7, #15]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d102      	bne.n	8008e14 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}

08008e1e <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008e1e:	b580      	push	{r7, lr}
 8008e20:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	1d3b      	adds	r3, r7, #4
 8008e28:	6018      	str	r0, [r3, #0]
 8008e2a:	463b      	mov	r3, r7
 8008e2c:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008e2e:	1d3b      	adds	r3, r7, #4
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008e36:	4611      	mov	r1, r2
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff fa49 	bl	80082d0 <validate>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 8008e44:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d139      	bne.n	8008ec0 <f_readdir+0xa2>
		if (!fno) {
 8008e4c:	463b      	mov	r3, r7
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d108      	bne.n	8008e66 <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008e54:	1d3b      	adds	r3, r7, #4
 8008e56:	2100      	movs	r1, #0
 8008e58:	6818      	ldr	r0, [r3, #0]
 8008e5a:	f7fd fdef 	bl	8006a3c <dir_sdi>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008e64:	e02c      	b.n	8008ec0 <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 8008e66:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008e6a:	f107 0208 	add.w	r2, r7, #8
 8008e6e:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8008e70:	1d3b      	adds	r3, r7, #4
 8008e72:	2100      	movs	r1, #0
 8008e74:	6818      	ldr	r0, [r3, #0]
 8008e76:	f7fe f994 	bl	80071a2 <dir_read>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008e80:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008e84:	2b04      	cmp	r3, #4
 8008e86:	d102      	bne.n	8008e8e <f_readdir+0x70>
 8008e88:	2300      	movs	r3, #0
 8008e8a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8008e8e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d114      	bne.n	8008ec0 <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008e96:	463a      	mov	r2, r7
 8008e98:	1d3b      	adds	r3, r7, #4
 8008e9a:	6811      	ldr	r1, [r2, #0]
 8008e9c:	6818      	ldr	r0, [r3, #0]
 8008e9e:	f7fe fc29 	bl	80076f4 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008ea2:	1d3b      	adds	r3, r7, #4
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	6818      	ldr	r0, [r3, #0]
 8008ea8:	f7fd fe43 	bl	8006b32 <dir_next>
 8008eac:	4603      	mov	r3, r0
 8008eae:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008eb2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008eb6:	2b04      	cmp	r3, #4
 8008eb8:	d102      	bne.n	8008ec0 <f_readdir+0xa2>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008ec0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}

08008ece <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008ece:	b580      	push	{r7, lr}
 8008ed0:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	1d3b      	adds	r3, r7, #4
 8008ed8:	6018      	str	r0, [r3, #0]
 8008eda:	463b      	mov	r3, r7
 8008edc:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008ede:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8008ee2:	1d3b      	adds	r3, r7, #4
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	f7fe ffa6 	bl	8007e38 <find_volume>
 8008eec:	4603      	mov	r3, r0
 8008eee:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 8008ef2:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d127      	bne.n	8008f4a <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 8008efa:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008efe:	f107 0208 	add.w	r2, r7, #8
 8008f02:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008f04:	1d3b      	adds	r3, r7, #4
 8008f06:	681a      	ldr	r2, [r3, #0]
 8008f08:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008f0c:	4611      	mov	r1, r2
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe fe86 	bl	8007c20 <follow_path>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8008f1a:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d113      	bne.n	8008f4a <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008f22:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8008f26:	b25b      	sxtb	r3, r3
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	da03      	bge.n	8008f34 <f_stat+0x66>
				res = FR_INVALID_NAME;
 8008f2c:	2306      	movs	r3, #6
 8008f2e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8008f32:	e00a      	b.n	8008f4a <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008f34:	463b      	mov	r3, r7
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d006      	beq.n	8008f4a <f_stat+0x7c>
 8008f3c:	463b      	mov	r3, r7
 8008f3e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008f42:	6819      	ldr	r1, [r3, #0]
 8008f44:	4610      	mov	r0, r2
 8008f46:	f7fe fbd5 	bl	80076f4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008f4a:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	1d3b      	adds	r3, r7, #4
 8008f62:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008f64:	2300      	movs	r3, #0
 8008f66:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008f6a:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8008f6e:	1d3b      	adds	r3, r7, #4
 8008f70:	2202      	movs	r2, #2
 8008f72:	4618      	mov	r0, r3
 8008f74:	f7fe ff60 	bl	8007e38 <find_volume>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	dj.obj.fs = fs;
 8008f7e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008f82:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	if (res == FR_OK) {
 8008f86:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	f040 809e 	bne.w	80090cc <f_unlink+0x174>
		INIT_NAMBUF(fs);
 8008f90:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008f94:	f107 020c 	add.w	r2, r7, #12
 8008f98:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8008f9a:	1d3b      	adds	r3, r7, #4
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8008fa2:	4611      	mov	r1, r2
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f7fe fe3b 	bl	8007c20 <follow_path>
 8008faa:	4603      	mov	r3, r0
 8008fac:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008fb0:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d108      	bne.n	8008fca <f_unlink+0x72>
 8008fb8:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8008fbc:	2102      	movs	r1, #2
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f7fd f80c 	bl	8005fdc <chk_lock>
 8008fc4:	4603      	mov	r3, r0
 8008fc6:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008fca:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d17c      	bne.n	80090cc <f_unlink+0x174>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008fd2:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 8008fd6:	b25b      	sxtb	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	da03      	bge.n	8008fe4 <f_unlink+0x8c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8008fdc:	2306      	movs	r3, #6
 8008fde:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 8008fe2:	e008      	b.n	8008ff6 <f_unlink+0x9e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008fe4:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8008fe8:	f003 0301 	and.w	r3, r3, #1
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d002      	beq.n	8008ff6 <f_unlink+0x9e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008ff0:	2307      	movs	r3, #7
 8008ff2:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				}
			}
			if (res == FR_OK) {
 8008ff6:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d13b      	bne.n	8009076 <f_unlink+0x11e>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8008ffe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009002:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8009006:	4611      	mov	r1, r2
 8009008:	4618      	mov	r0, r3
 800900a:	f7fd fe9e 	bl	8006d4a <ld_clust>
 800900e:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8009012:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8009016:	f003 0310 	and.w	r3, r3, #16
 800901a:	2b00      	cmp	r3, #0
 800901c:	d02b      	beq.n	8009076 <f_unlink+0x11e>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 800901e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8009022:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
						sdj.obj.sclust = dclst;
 8009026:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800902a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 800902e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8009032:	2100      	movs	r1, #0
 8009034:	4618      	mov	r0, r3
 8009036:	f7fd fd01 	bl	8006a3c <dir_sdi>
 800903a:	4603      	mov	r3, r0
 800903c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						if (res == FR_OK) {
 8009040:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8009044:	2b00      	cmp	r3, #0
 8009046:	d116      	bne.n	8009076 <f_unlink+0x11e>
							res = dir_read(&sdj, 0);			/* Read an item */
 8009048:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800904c:	2100      	movs	r1, #0
 800904e:	4618      	mov	r0, r3
 8009050:	f7fe f8a7 	bl	80071a2 <dir_read>
 8009054:	4603      	mov	r3, r0
 8009056:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 800905a:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800905e:	2b00      	cmp	r3, #0
 8009060:	d102      	bne.n	8009068 <f_unlink+0x110>
 8009062:	2307      	movs	r3, #7
 8009064:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8009068:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800906c:	2b04      	cmp	r3, #4
 800906e:	d102      	bne.n	8009076 <f_unlink+0x11e>
 8009070:	2300      	movs	r3, #0
 8009072:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						}
					}
				}
			}
			if (res == FR_OK) {
 8009076:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 800907a:	2b00      	cmp	r3, #0
 800907c:	d126      	bne.n	80090cc <f_unlink+0x174>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800907e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8009082:	4618      	mov	r0, r3
 8009084:	f7fe faec 	bl	8007660 <dir_remove>
 8009088:	4603      	mov	r3, r0
 800908a:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800908e:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10e      	bne.n	80090b4 <f_unlink+0x15c>
 8009096:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 800909a:	2b00      	cmp	r3, #0
 800909c:	d00a      	beq.n	80090b4 <f_unlink+0x15c>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800909e:	f507 7311 	add.w	r3, r7, #580	; 0x244
 80090a2:	2200      	movs	r2, #0
 80090a4:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 80090a8:	4618      	mov	r0, r3
 80090aa:	f7fd fb96 	bl	80067da <remove_chain>
 80090ae:	4603      	mov	r3, r0
 80090b0:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 80090b4:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d107      	bne.n	80090cc <f_unlink+0x174>
 80090bc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80090c0:	4618      	mov	r0, r3
 80090c2:	f7fd f969 	bl	8006398 <sync_fs>
 80090c6:	4603      	mov	r3, r0
 80090c8:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80090cc:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	f507 7720 	add.w	r7, r7, #640	; 0x280
 80090d6:	46bd      	mov	sp, r7
 80090d8:	bd80      	pop	{r7, pc}
	...

080090dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	60f8      	str	r0, [r7, #12]
 80090e4:	60b9      	str	r1, [r7, #8]
 80090e6:	4613      	mov	r3, r2
 80090e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80090ea:	2301      	movs	r3, #1
 80090ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80090ee:	2300      	movs	r3, #0
 80090f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80090f2:	4b1f      	ldr	r3, [pc, #124]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 80090f4:	7a5b      	ldrb	r3, [r3, #9]
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d131      	bne.n	8009160 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80090fc:	4b1c      	ldr	r3, [pc, #112]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 80090fe:	7a5b      	ldrb	r3, [r3, #9]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	461a      	mov	r2, r3
 8009104:	4b1a      	ldr	r3, [pc, #104]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 8009106:	2100      	movs	r1, #0
 8009108:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800910a:	4b19      	ldr	r3, [pc, #100]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 800910c:	7a5b      	ldrb	r3, [r3, #9]
 800910e:	b2db      	uxtb	r3, r3
 8009110:	4a17      	ldr	r2, [pc, #92]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	4413      	add	r3, r2
 8009116:	68fa      	ldr	r2, [r7, #12]
 8009118:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800911a:	4b15      	ldr	r3, [pc, #84]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 800911c:	7a5b      	ldrb	r3, [r3, #9]
 800911e:	b2db      	uxtb	r3, r3
 8009120:	461a      	mov	r2, r3
 8009122:	4b13      	ldr	r3, [pc, #76]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 8009124:	4413      	add	r3, r2
 8009126:	79fa      	ldrb	r2, [r7, #7]
 8009128:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800912a:	4b11      	ldr	r3, [pc, #68]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 800912c:	7a5b      	ldrb	r3, [r3, #9]
 800912e:	b2db      	uxtb	r3, r3
 8009130:	1c5a      	adds	r2, r3, #1
 8009132:	b2d1      	uxtb	r1, r2
 8009134:	4a0e      	ldr	r2, [pc, #56]	; (8009170 <FATFS_LinkDriverEx+0x94>)
 8009136:	7251      	strb	r1, [r2, #9]
 8009138:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800913a:	7dbb      	ldrb	r3, [r7, #22]
 800913c:	3330      	adds	r3, #48	; 0x30
 800913e:	b2da      	uxtb	r2, r3
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	3301      	adds	r3, #1
 8009148:	223a      	movs	r2, #58	; 0x3a
 800914a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	3302      	adds	r3, #2
 8009150:	222f      	movs	r2, #47	; 0x2f
 8009152:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009154:	68bb      	ldr	r3, [r7, #8]
 8009156:	3303      	adds	r3, #3
 8009158:	2200      	movs	r2, #0
 800915a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800915c:	2300      	movs	r3, #0
 800915e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009160:	7dfb      	ldrb	r3, [r7, #23]
}
 8009162:	4618      	mov	r0, r3
 8009164:	371c      	adds	r7, #28
 8009166:	46bd      	mov	sp, r7
 8009168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916c:	4770      	bx	lr
 800916e:	bf00      	nop
 8009170:	20000300 	.word	0x20000300

08009174 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009174:	b580      	push	{r7, lr}
 8009176:	b082      	sub	sp, #8
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800917e:	2200      	movs	r2, #0
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f7ff ffaa 	bl	80090dc <FATFS_LinkDriverEx>
 8009188:	4603      	mov	r3, r0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3708      	adds	r7, #8
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}
	...

08009194 <__errno>:
 8009194:	4b01      	ldr	r3, [pc, #4]	; (800919c <__errno+0x8>)
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	20000010 	.word	0x20000010

080091a0 <__libc_init_array>:
 80091a0:	b570      	push	{r4, r5, r6, lr}
 80091a2:	4d0d      	ldr	r5, [pc, #52]	; (80091d8 <__libc_init_array+0x38>)
 80091a4:	4c0d      	ldr	r4, [pc, #52]	; (80091dc <__libc_init_array+0x3c>)
 80091a6:	1b64      	subs	r4, r4, r5
 80091a8:	10a4      	asrs	r4, r4, #2
 80091aa:	2600      	movs	r6, #0
 80091ac:	42a6      	cmp	r6, r4
 80091ae:	d109      	bne.n	80091c4 <__libc_init_array+0x24>
 80091b0:	4d0b      	ldr	r5, [pc, #44]	; (80091e0 <__libc_init_array+0x40>)
 80091b2:	4c0c      	ldr	r4, [pc, #48]	; (80091e4 <__libc_init_array+0x44>)
 80091b4:	f002 ff86 	bl	800c0c4 <_init>
 80091b8:	1b64      	subs	r4, r4, r5
 80091ba:	10a4      	asrs	r4, r4, #2
 80091bc:	2600      	movs	r6, #0
 80091be:	42a6      	cmp	r6, r4
 80091c0:	d105      	bne.n	80091ce <__libc_init_array+0x2e>
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c8:	4798      	blx	r3
 80091ca:	3601      	adds	r6, #1
 80091cc:	e7ee      	b.n	80091ac <__libc_init_array+0xc>
 80091ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d2:	4798      	blx	r3
 80091d4:	3601      	adds	r6, #1
 80091d6:	e7f2      	b.n	80091be <__libc_init_array+0x1e>
 80091d8:	080141bc 	.word	0x080141bc
 80091dc:	080141bc 	.word	0x080141bc
 80091e0:	080141bc 	.word	0x080141bc
 80091e4:	080141c0 	.word	0x080141c0

080091e8 <malloc>:
 80091e8:	4b02      	ldr	r3, [pc, #8]	; (80091f4 <malloc+0xc>)
 80091ea:	4601      	mov	r1, r0
 80091ec:	6818      	ldr	r0, [r3, #0]
 80091ee:	f000 b863 	b.w	80092b8 <_malloc_r>
 80091f2:	bf00      	nop
 80091f4:	20000010 	.word	0x20000010

080091f8 <free>:
 80091f8:	4b02      	ldr	r3, [pc, #8]	; (8009204 <free+0xc>)
 80091fa:	4601      	mov	r1, r0
 80091fc:	6818      	ldr	r0, [r3, #0]
 80091fe:	f000 b80b 	b.w	8009218 <_free_r>
 8009202:	bf00      	nop
 8009204:	20000010 	.word	0x20000010

08009208 <memset>:
 8009208:	4402      	add	r2, r0
 800920a:	4603      	mov	r3, r0
 800920c:	4293      	cmp	r3, r2
 800920e:	d100      	bne.n	8009212 <memset+0xa>
 8009210:	4770      	bx	lr
 8009212:	f803 1b01 	strb.w	r1, [r3], #1
 8009216:	e7f9      	b.n	800920c <memset+0x4>

08009218 <_free_r>:
 8009218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800921a:	2900      	cmp	r1, #0
 800921c:	d048      	beq.n	80092b0 <_free_r+0x98>
 800921e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009222:	9001      	str	r0, [sp, #4]
 8009224:	2b00      	cmp	r3, #0
 8009226:	f1a1 0404 	sub.w	r4, r1, #4
 800922a:	bfb8      	it	lt
 800922c:	18e4      	addlt	r4, r4, r3
 800922e:	f001 ff6d 	bl	800b10c <__malloc_lock>
 8009232:	4a20      	ldr	r2, [pc, #128]	; (80092b4 <_free_r+0x9c>)
 8009234:	9801      	ldr	r0, [sp, #4]
 8009236:	6813      	ldr	r3, [r2, #0]
 8009238:	4615      	mov	r5, r2
 800923a:	b933      	cbnz	r3, 800924a <_free_r+0x32>
 800923c:	6063      	str	r3, [r4, #4]
 800923e:	6014      	str	r4, [r2, #0]
 8009240:	b003      	add	sp, #12
 8009242:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009246:	f001 bf67 	b.w	800b118 <__malloc_unlock>
 800924a:	42a3      	cmp	r3, r4
 800924c:	d90b      	bls.n	8009266 <_free_r+0x4e>
 800924e:	6821      	ldr	r1, [r4, #0]
 8009250:	1862      	adds	r2, r4, r1
 8009252:	4293      	cmp	r3, r2
 8009254:	bf04      	itt	eq
 8009256:	681a      	ldreq	r2, [r3, #0]
 8009258:	685b      	ldreq	r3, [r3, #4]
 800925a:	6063      	str	r3, [r4, #4]
 800925c:	bf04      	itt	eq
 800925e:	1852      	addeq	r2, r2, r1
 8009260:	6022      	streq	r2, [r4, #0]
 8009262:	602c      	str	r4, [r5, #0]
 8009264:	e7ec      	b.n	8009240 <_free_r+0x28>
 8009266:	461a      	mov	r2, r3
 8009268:	685b      	ldr	r3, [r3, #4]
 800926a:	b10b      	cbz	r3, 8009270 <_free_r+0x58>
 800926c:	42a3      	cmp	r3, r4
 800926e:	d9fa      	bls.n	8009266 <_free_r+0x4e>
 8009270:	6811      	ldr	r1, [r2, #0]
 8009272:	1855      	adds	r5, r2, r1
 8009274:	42a5      	cmp	r5, r4
 8009276:	d10b      	bne.n	8009290 <_free_r+0x78>
 8009278:	6824      	ldr	r4, [r4, #0]
 800927a:	4421      	add	r1, r4
 800927c:	1854      	adds	r4, r2, r1
 800927e:	42a3      	cmp	r3, r4
 8009280:	6011      	str	r1, [r2, #0]
 8009282:	d1dd      	bne.n	8009240 <_free_r+0x28>
 8009284:	681c      	ldr	r4, [r3, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	6053      	str	r3, [r2, #4]
 800928a:	4421      	add	r1, r4
 800928c:	6011      	str	r1, [r2, #0]
 800928e:	e7d7      	b.n	8009240 <_free_r+0x28>
 8009290:	d902      	bls.n	8009298 <_free_r+0x80>
 8009292:	230c      	movs	r3, #12
 8009294:	6003      	str	r3, [r0, #0]
 8009296:	e7d3      	b.n	8009240 <_free_r+0x28>
 8009298:	6825      	ldr	r5, [r4, #0]
 800929a:	1961      	adds	r1, r4, r5
 800929c:	428b      	cmp	r3, r1
 800929e:	bf04      	itt	eq
 80092a0:	6819      	ldreq	r1, [r3, #0]
 80092a2:	685b      	ldreq	r3, [r3, #4]
 80092a4:	6063      	str	r3, [r4, #4]
 80092a6:	bf04      	itt	eq
 80092a8:	1949      	addeq	r1, r1, r5
 80092aa:	6021      	streq	r1, [r4, #0]
 80092ac:	6054      	str	r4, [r2, #4]
 80092ae:	e7c7      	b.n	8009240 <_free_r+0x28>
 80092b0:	b003      	add	sp, #12
 80092b2:	bd30      	pop	{r4, r5, pc}
 80092b4:	2000030c 	.word	0x2000030c

080092b8 <_malloc_r>:
 80092b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ba:	1ccd      	adds	r5, r1, #3
 80092bc:	f025 0503 	bic.w	r5, r5, #3
 80092c0:	3508      	adds	r5, #8
 80092c2:	2d0c      	cmp	r5, #12
 80092c4:	bf38      	it	cc
 80092c6:	250c      	movcc	r5, #12
 80092c8:	2d00      	cmp	r5, #0
 80092ca:	4606      	mov	r6, r0
 80092cc:	db01      	blt.n	80092d2 <_malloc_r+0x1a>
 80092ce:	42a9      	cmp	r1, r5
 80092d0:	d903      	bls.n	80092da <_malloc_r+0x22>
 80092d2:	230c      	movs	r3, #12
 80092d4:	6033      	str	r3, [r6, #0]
 80092d6:	2000      	movs	r0, #0
 80092d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80092da:	f001 ff17 	bl	800b10c <__malloc_lock>
 80092de:	4921      	ldr	r1, [pc, #132]	; (8009364 <_malloc_r+0xac>)
 80092e0:	680a      	ldr	r2, [r1, #0]
 80092e2:	4614      	mov	r4, r2
 80092e4:	b99c      	cbnz	r4, 800930e <_malloc_r+0x56>
 80092e6:	4f20      	ldr	r7, [pc, #128]	; (8009368 <_malloc_r+0xb0>)
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	b923      	cbnz	r3, 80092f6 <_malloc_r+0x3e>
 80092ec:	4621      	mov	r1, r4
 80092ee:	4630      	mov	r0, r6
 80092f0:	f000 fd34 	bl	8009d5c <_sbrk_r>
 80092f4:	6038      	str	r0, [r7, #0]
 80092f6:	4629      	mov	r1, r5
 80092f8:	4630      	mov	r0, r6
 80092fa:	f000 fd2f 	bl	8009d5c <_sbrk_r>
 80092fe:	1c43      	adds	r3, r0, #1
 8009300:	d123      	bne.n	800934a <_malloc_r+0x92>
 8009302:	230c      	movs	r3, #12
 8009304:	6033      	str	r3, [r6, #0]
 8009306:	4630      	mov	r0, r6
 8009308:	f001 ff06 	bl	800b118 <__malloc_unlock>
 800930c:	e7e3      	b.n	80092d6 <_malloc_r+0x1e>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	1b5b      	subs	r3, r3, r5
 8009312:	d417      	bmi.n	8009344 <_malloc_r+0x8c>
 8009314:	2b0b      	cmp	r3, #11
 8009316:	d903      	bls.n	8009320 <_malloc_r+0x68>
 8009318:	6023      	str	r3, [r4, #0]
 800931a:	441c      	add	r4, r3
 800931c:	6025      	str	r5, [r4, #0]
 800931e:	e004      	b.n	800932a <_malloc_r+0x72>
 8009320:	6863      	ldr	r3, [r4, #4]
 8009322:	42a2      	cmp	r2, r4
 8009324:	bf0c      	ite	eq
 8009326:	600b      	streq	r3, [r1, #0]
 8009328:	6053      	strne	r3, [r2, #4]
 800932a:	4630      	mov	r0, r6
 800932c:	f001 fef4 	bl	800b118 <__malloc_unlock>
 8009330:	f104 000b 	add.w	r0, r4, #11
 8009334:	1d23      	adds	r3, r4, #4
 8009336:	f020 0007 	bic.w	r0, r0, #7
 800933a:	1ac2      	subs	r2, r0, r3
 800933c:	d0cc      	beq.n	80092d8 <_malloc_r+0x20>
 800933e:	1a1b      	subs	r3, r3, r0
 8009340:	50a3      	str	r3, [r4, r2]
 8009342:	e7c9      	b.n	80092d8 <_malloc_r+0x20>
 8009344:	4622      	mov	r2, r4
 8009346:	6864      	ldr	r4, [r4, #4]
 8009348:	e7cc      	b.n	80092e4 <_malloc_r+0x2c>
 800934a:	1cc4      	adds	r4, r0, #3
 800934c:	f024 0403 	bic.w	r4, r4, #3
 8009350:	42a0      	cmp	r0, r4
 8009352:	d0e3      	beq.n	800931c <_malloc_r+0x64>
 8009354:	1a21      	subs	r1, r4, r0
 8009356:	4630      	mov	r0, r6
 8009358:	f000 fd00 	bl	8009d5c <_sbrk_r>
 800935c:	3001      	adds	r0, #1
 800935e:	d1dd      	bne.n	800931c <_malloc_r+0x64>
 8009360:	e7cf      	b.n	8009302 <_malloc_r+0x4a>
 8009362:	bf00      	nop
 8009364:	2000030c 	.word	0x2000030c
 8009368:	20000310 	.word	0x20000310

0800936c <__cvt>:
 800936c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009370:	ec55 4b10 	vmov	r4, r5, d0
 8009374:	2d00      	cmp	r5, #0
 8009376:	460e      	mov	r6, r1
 8009378:	4619      	mov	r1, r3
 800937a:	462b      	mov	r3, r5
 800937c:	bfbb      	ittet	lt
 800937e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009382:	461d      	movlt	r5, r3
 8009384:	2300      	movge	r3, #0
 8009386:	232d      	movlt	r3, #45	; 0x2d
 8009388:	700b      	strb	r3, [r1, #0]
 800938a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800938c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009390:	4691      	mov	r9, r2
 8009392:	f023 0820 	bic.w	r8, r3, #32
 8009396:	bfbc      	itt	lt
 8009398:	4622      	movlt	r2, r4
 800939a:	4614      	movlt	r4, r2
 800939c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093a0:	d005      	beq.n	80093ae <__cvt+0x42>
 80093a2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80093a6:	d100      	bne.n	80093aa <__cvt+0x3e>
 80093a8:	3601      	adds	r6, #1
 80093aa:	2102      	movs	r1, #2
 80093ac:	e000      	b.n	80093b0 <__cvt+0x44>
 80093ae:	2103      	movs	r1, #3
 80093b0:	ab03      	add	r3, sp, #12
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	ab02      	add	r3, sp, #8
 80093b6:	9300      	str	r3, [sp, #0]
 80093b8:	ec45 4b10 	vmov	d0, r4, r5
 80093bc:	4653      	mov	r3, sl
 80093be:	4632      	mov	r2, r6
 80093c0:	f000 fe86 	bl	800a0d0 <_dtoa_r>
 80093c4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80093c8:	4607      	mov	r7, r0
 80093ca:	d102      	bne.n	80093d2 <__cvt+0x66>
 80093cc:	f019 0f01 	tst.w	r9, #1
 80093d0:	d022      	beq.n	8009418 <__cvt+0xac>
 80093d2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093d6:	eb07 0906 	add.w	r9, r7, r6
 80093da:	d110      	bne.n	80093fe <__cvt+0x92>
 80093dc:	783b      	ldrb	r3, [r7, #0]
 80093de:	2b30      	cmp	r3, #48	; 0x30
 80093e0:	d10a      	bne.n	80093f8 <__cvt+0x8c>
 80093e2:	2200      	movs	r2, #0
 80093e4:	2300      	movs	r3, #0
 80093e6:	4620      	mov	r0, r4
 80093e8:	4629      	mov	r1, r5
 80093ea:	f7f7 fb9d 	bl	8000b28 <__aeabi_dcmpeq>
 80093ee:	b918      	cbnz	r0, 80093f8 <__cvt+0x8c>
 80093f0:	f1c6 0601 	rsb	r6, r6, #1
 80093f4:	f8ca 6000 	str.w	r6, [sl]
 80093f8:	f8da 3000 	ldr.w	r3, [sl]
 80093fc:	4499      	add	r9, r3
 80093fe:	2200      	movs	r2, #0
 8009400:	2300      	movs	r3, #0
 8009402:	4620      	mov	r0, r4
 8009404:	4629      	mov	r1, r5
 8009406:	f7f7 fb8f 	bl	8000b28 <__aeabi_dcmpeq>
 800940a:	b108      	cbz	r0, 8009410 <__cvt+0xa4>
 800940c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009410:	2230      	movs	r2, #48	; 0x30
 8009412:	9b03      	ldr	r3, [sp, #12]
 8009414:	454b      	cmp	r3, r9
 8009416:	d307      	bcc.n	8009428 <__cvt+0xbc>
 8009418:	9b03      	ldr	r3, [sp, #12]
 800941a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800941c:	1bdb      	subs	r3, r3, r7
 800941e:	4638      	mov	r0, r7
 8009420:	6013      	str	r3, [r2, #0]
 8009422:	b004      	add	sp, #16
 8009424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009428:	1c59      	adds	r1, r3, #1
 800942a:	9103      	str	r1, [sp, #12]
 800942c:	701a      	strb	r2, [r3, #0]
 800942e:	e7f0      	b.n	8009412 <__cvt+0xa6>

08009430 <__exponent>:
 8009430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009432:	4603      	mov	r3, r0
 8009434:	2900      	cmp	r1, #0
 8009436:	bfb8      	it	lt
 8009438:	4249      	neglt	r1, r1
 800943a:	f803 2b02 	strb.w	r2, [r3], #2
 800943e:	bfb4      	ite	lt
 8009440:	222d      	movlt	r2, #45	; 0x2d
 8009442:	222b      	movge	r2, #43	; 0x2b
 8009444:	2909      	cmp	r1, #9
 8009446:	7042      	strb	r2, [r0, #1]
 8009448:	dd2a      	ble.n	80094a0 <__exponent+0x70>
 800944a:	f10d 0407 	add.w	r4, sp, #7
 800944e:	46a4      	mov	ip, r4
 8009450:	270a      	movs	r7, #10
 8009452:	46a6      	mov	lr, r4
 8009454:	460a      	mov	r2, r1
 8009456:	fb91 f6f7 	sdiv	r6, r1, r7
 800945a:	fb07 1516 	mls	r5, r7, r6, r1
 800945e:	3530      	adds	r5, #48	; 0x30
 8009460:	2a63      	cmp	r2, #99	; 0x63
 8009462:	f104 34ff 	add.w	r4, r4, #4294967295
 8009466:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800946a:	4631      	mov	r1, r6
 800946c:	dcf1      	bgt.n	8009452 <__exponent+0x22>
 800946e:	3130      	adds	r1, #48	; 0x30
 8009470:	f1ae 0502 	sub.w	r5, lr, #2
 8009474:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009478:	1c44      	adds	r4, r0, #1
 800947a:	4629      	mov	r1, r5
 800947c:	4561      	cmp	r1, ip
 800947e:	d30a      	bcc.n	8009496 <__exponent+0x66>
 8009480:	f10d 0209 	add.w	r2, sp, #9
 8009484:	eba2 020e 	sub.w	r2, r2, lr
 8009488:	4565      	cmp	r5, ip
 800948a:	bf88      	it	hi
 800948c:	2200      	movhi	r2, #0
 800948e:	4413      	add	r3, r2
 8009490:	1a18      	subs	r0, r3, r0
 8009492:	b003      	add	sp, #12
 8009494:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009496:	f811 2b01 	ldrb.w	r2, [r1], #1
 800949a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800949e:	e7ed      	b.n	800947c <__exponent+0x4c>
 80094a0:	2330      	movs	r3, #48	; 0x30
 80094a2:	3130      	adds	r1, #48	; 0x30
 80094a4:	7083      	strb	r3, [r0, #2]
 80094a6:	70c1      	strb	r1, [r0, #3]
 80094a8:	1d03      	adds	r3, r0, #4
 80094aa:	e7f1      	b.n	8009490 <__exponent+0x60>

080094ac <_printf_float>:
 80094ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094b0:	ed2d 8b02 	vpush	{d8}
 80094b4:	b08d      	sub	sp, #52	; 0x34
 80094b6:	460c      	mov	r4, r1
 80094b8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80094bc:	4616      	mov	r6, r2
 80094be:	461f      	mov	r7, r3
 80094c0:	4605      	mov	r5, r0
 80094c2:	f001 fda9 	bl	800b018 <_localeconv_r>
 80094c6:	f8d0 a000 	ldr.w	sl, [r0]
 80094ca:	4650      	mov	r0, sl
 80094cc:	f7f6 feaa 	bl	8000224 <strlen>
 80094d0:	2300      	movs	r3, #0
 80094d2:	930a      	str	r3, [sp, #40]	; 0x28
 80094d4:	6823      	ldr	r3, [r4, #0]
 80094d6:	9305      	str	r3, [sp, #20]
 80094d8:	f8d8 3000 	ldr.w	r3, [r8]
 80094dc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80094e0:	3307      	adds	r3, #7
 80094e2:	f023 0307 	bic.w	r3, r3, #7
 80094e6:	f103 0208 	add.w	r2, r3, #8
 80094ea:	f8c8 2000 	str.w	r2, [r8]
 80094ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094f2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80094f6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80094fa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80094fe:	9307      	str	r3, [sp, #28]
 8009500:	f8cd 8018 	str.w	r8, [sp, #24]
 8009504:	ee08 0a10 	vmov	s16, r0
 8009508:	4b9f      	ldr	r3, [pc, #636]	; (8009788 <_printf_float+0x2dc>)
 800950a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800950e:	f04f 32ff 	mov.w	r2, #4294967295
 8009512:	f7f7 fb3b 	bl	8000b8c <__aeabi_dcmpun>
 8009516:	bb88      	cbnz	r0, 800957c <_printf_float+0xd0>
 8009518:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800951c:	4b9a      	ldr	r3, [pc, #616]	; (8009788 <_printf_float+0x2dc>)
 800951e:	f04f 32ff 	mov.w	r2, #4294967295
 8009522:	f7f7 fb15 	bl	8000b50 <__aeabi_dcmple>
 8009526:	bb48      	cbnz	r0, 800957c <_printf_float+0xd0>
 8009528:	2200      	movs	r2, #0
 800952a:	2300      	movs	r3, #0
 800952c:	4640      	mov	r0, r8
 800952e:	4649      	mov	r1, r9
 8009530:	f7f7 fb04 	bl	8000b3c <__aeabi_dcmplt>
 8009534:	b110      	cbz	r0, 800953c <_printf_float+0x90>
 8009536:	232d      	movs	r3, #45	; 0x2d
 8009538:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800953c:	4b93      	ldr	r3, [pc, #588]	; (800978c <_printf_float+0x2e0>)
 800953e:	4894      	ldr	r0, [pc, #592]	; (8009790 <_printf_float+0x2e4>)
 8009540:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009544:	bf94      	ite	ls
 8009546:	4698      	movls	r8, r3
 8009548:	4680      	movhi	r8, r0
 800954a:	2303      	movs	r3, #3
 800954c:	6123      	str	r3, [r4, #16]
 800954e:	9b05      	ldr	r3, [sp, #20]
 8009550:	f023 0204 	bic.w	r2, r3, #4
 8009554:	6022      	str	r2, [r4, #0]
 8009556:	f04f 0900 	mov.w	r9, #0
 800955a:	9700      	str	r7, [sp, #0]
 800955c:	4633      	mov	r3, r6
 800955e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009560:	4621      	mov	r1, r4
 8009562:	4628      	mov	r0, r5
 8009564:	f000 f9d8 	bl	8009918 <_printf_common>
 8009568:	3001      	adds	r0, #1
 800956a:	f040 8090 	bne.w	800968e <_printf_float+0x1e2>
 800956e:	f04f 30ff 	mov.w	r0, #4294967295
 8009572:	b00d      	add	sp, #52	; 0x34
 8009574:	ecbd 8b02 	vpop	{d8}
 8009578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800957c:	4642      	mov	r2, r8
 800957e:	464b      	mov	r3, r9
 8009580:	4640      	mov	r0, r8
 8009582:	4649      	mov	r1, r9
 8009584:	f7f7 fb02 	bl	8000b8c <__aeabi_dcmpun>
 8009588:	b140      	cbz	r0, 800959c <_printf_float+0xf0>
 800958a:	464b      	mov	r3, r9
 800958c:	2b00      	cmp	r3, #0
 800958e:	bfbc      	itt	lt
 8009590:	232d      	movlt	r3, #45	; 0x2d
 8009592:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009596:	487f      	ldr	r0, [pc, #508]	; (8009794 <_printf_float+0x2e8>)
 8009598:	4b7f      	ldr	r3, [pc, #508]	; (8009798 <_printf_float+0x2ec>)
 800959a:	e7d1      	b.n	8009540 <_printf_float+0x94>
 800959c:	6863      	ldr	r3, [r4, #4]
 800959e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80095a2:	9206      	str	r2, [sp, #24]
 80095a4:	1c5a      	adds	r2, r3, #1
 80095a6:	d13f      	bne.n	8009628 <_printf_float+0x17c>
 80095a8:	2306      	movs	r3, #6
 80095aa:	6063      	str	r3, [r4, #4]
 80095ac:	9b05      	ldr	r3, [sp, #20]
 80095ae:	6861      	ldr	r1, [r4, #4]
 80095b0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80095b4:	2300      	movs	r3, #0
 80095b6:	9303      	str	r3, [sp, #12]
 80095b8:	ab0a      	add	r3, sp, #40	; 0x28
 80095ba:	e9cd b301 	strd	fp, r3, [sp, #4]
 80095be:	ab09      	add	r3, sp, #36	; 0x24
 80095c0:	ec49 8b10 	vmov	d0, r8, r9
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	6022      	str	r2, [r4, #0]
 80095c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80095cc:	4628      	mov	r0, r5
 80095ce:	f7ff fecd 	bl	800936c <__cvt>
 80095d2:	9b06      	ldr	r3, [sp, #24]
 80095d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80095d6:	2b47      	cmp	r3, #71	; 0x47
 80095d8:	4680      	mov	r8, r0
 80095da:	d108      	bne.n	80095ee <_printf_float+0x142>
 80095dc:	1cc8      	adds	r0, r1, #3
 80095de:	db02      	blt.n	80095e6 <_printf_float+0x13a>
 80095e0:	6863      	ldr	r3, [r4, #4]
 80095e2:	4299      	cmp	r1, r3
 80095e4:	dd41      	ble.n	800966a <_printf_float+0x1be>
 80095e6:	f1ab 0b02 	sub.w	fp, fp, #2
 80095ea:	fa5f fb8b 	uxtb.w	fp, fp
 80095ee:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095f2:	d820      	bhi.n	8009636 <_printf_float+0x18a>
 80095f4:	3901      	subs	r1, #1
 80095f6:	465a      	mov	r2, fp
 80095f8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80095fc:	9109      	str	r1, [sp, #36]	; 0x24
 80095fe:	f7ff ff17 	bl	8009430 <__exponent>
 8009602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009604:	1813      	adds	r3, r2, r0
 8009606:	2a01      	cmp	r2, #1
 8009608:	4681      	mov	r9, r0
 800960a:	6123      	str	r3, [r4, #16]
 800960c:	dc02      	bgt.n	8009614 <_printf_float+0x168>
 800960e:	6822      	ldr	r2, [r4, #0]
 8009610:	07d2      	lsls	r2, r2, #31
 8009612:	d501      	bpl.n	8009618 <_printf_float+0x16c>
 8009614:	3301      	adds	r3, #1
 8009616:	6123      	str	r3, [r4, #16]
 8009618:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800961c:	2b00      	cmp	r3, #0
 800961e:	d09c      	beq.n	800955a <_printf_float+0xae>
 8009620:	232d      	movs	r3, #45	; 0x2d
 8009622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009626:	e798      	b.n	800955a <_printf_float+0xae>
 8009628:	9a06      	ldr	r2, [sp, #24]
 800962a:	2a47      	cmp	r2, #71	; 0x47
 800962c:	d1be      	bne.n	80095ac <_printf_float+0x100>
 800962e:	2b00      	cmp	r3, #0
 8009630:	d1bc      	bne.n	80095ac <_printf_float+0x100>
 8009632:	2301      	movs	r3, #1
 8009634:	e7b9      	b.n	80095aa <_printf_float+0xfe>
 8009636:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800963a:	d118      	bne.n	800966e <_printf_float+0x1c2>
 800963c:	2900      	cmp	r1, #0
 800963e:	6863      	ldr	r3, [r4, #4]
 8009640:	dd0b      	ble.n	800965a <_printf_float+0x1ae>
 8009642:	6121      	str	r1, [r4, #16]
 8009644:	b913      	cbnz	r3, 800964c <_printf_float+0x1a0>
 8009646:	6822      	ldr	r2, [r4, #0]
 8009648:	07d0      	lsls	r0, r2, #31
 800964a:	d502      	bpl.n	8009652 <_printf_float+0x1a6>
 800964c:	3301      	adds	r3, #1
 800964e:	440b      	add	r3, r1
 8009650:	6123      	str	r3, [r4, #16]
 8009652:	65a1      	str	r1, [r4, #88]	; 0x58
 8009654:	f04f 0900 	mov.w	r9, #0
 8009658:	e7de      	b.n	8009618 <_printf_float+0x16c>
 800965a:	b913      	cbnz	r3, 8009662 <_printf_float+0x1b6>
 800965c:	6822      	ldr	r2, [r4, #0]
 800965e:	07d2      	lsls	r2, r2, #31
 8009660:	d501      	bpl.n	8009666 <_printf_float+0x1ba>
 8009662:	3302      	adds	r3, #2
 8009664:	e7f4      	b.n	8009650 <_printf_float+0x1a4>
 8009666:	2301      	movs	r3, #1
 8009668:	e7f2      	b.n	8009650 <_printf_float+0x1a4>
 800966a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800966e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009670:	4299      	cmp	r1, r3
 8009672:	db05      	blt.n	8009680 <_printf_float+0x1d4>
 8009674:	6823      	ldr	r3, [r4, #0]
 8009676:	6121      	str	r1, [r4, #16]
 8009678:	07d8      	lsls	r0, r3, #31
 800967a:	d5ea      	bpl.n	8009652 <_printf_float+0x1a6>
 800967c:	1c4b      	adds	r3, r1, #1
 800967e:	e7e7      	b.n	8009650 <_printf_float+0x1a4>
 8009680:	2900      	cmp	r1, #0
 8009682:	bfd4      	ite	le
 8009684:	f1c1 0202 	rsble	r2, r1, #2
 8009688:	2201      	movgt	r2, #1
 800968a:	4413      	add	r3, r2
 800968c:	e7e0      	b.n	8009650 <_printf_float+0x1a4>
 800968e:	6823      	ldr	r3, [r4, #0]
 8009690:	055a      	lsls	r2, r3, #21
 8009692:	d407      	bmi.n	80096a4 <_printf_float+0x1f8>
 8009694:	6923      	ldr	r3, [r4, #16]
 8009696:	4642      	mov	r2, r8
 8009698:	4631      	mov	r1, r6
 800969a:	4628      	mov	r0, r5
 800969c:	47b8      	blx	r7
 800969e:	3001      	adds	r0, #1
 80096a0:	d12c      	bne.n	80096fc <_printf_float+0x250>
 80096a2:	e764      	b.n	800956e <_printf_float+0xc2>
 80096a4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80096a8:	f240 80e0 	bls.w	800986c <_printf_float+0x3c0>
 80096ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80096b0:	2200      	movs	r2, #0
 80096b2:	2300      	movs	r3, #0
 80096b4:	f7f7 fa38 	bl	8000b28 <__aeabi_dcmpeq>
 80096b8:	2800      	cmp	r0, #0
 80096ba:	d034      	beq.n	8009726 <_printf_float+0x27a>
 80096bc:	4a37      	ldr	r2, [pc, #220]	; (800979c <_printf_float+0x2f0>)
 80096be:	2301      	movs	r3, #1
 80096c0:	4631      	mov	r1, r6
 80096c2:	4628      	mov	r0, r5
 80096c4:	47b8      	blx	r7
 80096c6:	3001      	adds	r0, #1
 80096c8:	f43f af51 	beq.w	800956e <_printf_float+0xc2>
 80096cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096d0:	429a      	cmp	r2, r3
 80096d2:	db02      	blt.n	80096da <_printf_float+0x22e>
 80096d4:	6823      	ldr	r3, [r4, #0]
 80096d6:	07d8      	lsls	r0, r3, #31
 80096d8:	d510      	bpl.n	80096fc <_printf_float+0x250>
 80096da:	ee18 3a10 	vmov	r3, s16
 80096de:	4652      	mov	r2, sl
 80096e0:	4631      	mov	r1, r6
 80096e2:	4628      	mov	r0, r5
 80096e4:	47b8      	blx	r7
 80096e6:	3001      	adds	r0, #1
 80096e8:	f43f af41 	beq.w	800956e <_printf_float+0xc2>
 80096ec:	f04f 0800 	mov.w	r8, #0
 80096f0:	f104 091a 	add.w	r9, r4, #26
 80096f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f6:	3b01      	subs	r3, #1
 80096f8:	4543      	cmp	r3, r8
 80096fa:	dc09      	bgt.n	8009710 <_printf_float+0x264>
 80096fc:	6823      	ldr	r3, [r4, #0]
 80096fe:	079b      	lsls	r3, r3, #30
 8009700:	f100 8105 	bmi.w	800990e <_printf_float+0x462>
 8009704:	68e0      	ldr	r0, [r4, #12]
 8009706:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009708:	4298      	cmp	r0, r3
 800970a:	bfb8      	it	lt
 800970c:	4618      	movlt	r0, r3
 800970e:	e730      	b.n	8009572 <_printf_float+0xc6>
 8009710:	2301      	movs	r3, #1
 8009712:	464a      	mov	r2, r9
 8009714:	4631      	mov	r1, r6
 8009716:	4628      	mov	r0, r5
 8009718:	47b8      	blx	r7
 800971a:	3001      	adds	r0, #1
 800971c:	f43f af27 	beq.w	800956e <_printf_float+0xc2>
 8009720:	f108 0801 	add.w	r8, r8, #1
 8009724:	e7e6      	b.n	80096f4 <_printf_float+0x248>
 8009726:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009728:	2b00      	cmp	r3, #0
 800972a:	dc39      	bgt.n	80097a0 <_printf_float+0x2f4>
 800972c:	4a1b      	ldr	r2, [pc, #108]	; (800979c <_printf_float+0x2f0>)
 800972e:	2301      	movs	r3, #1
 8009730:	4631      	mov	r1, r6
 8009732:	4628      	mov	r0, r5
 8009734:	47b8      	blx	r7
 8009736:	3001      	adds	r0, #1
 8009738:	f43f af19 	beq.w	800956e <_printf_float+0xc2>
 800973c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009740:	4313      	orrs	r3, r2
 8009742:	d102      	bne.n	800974a <_printf_float+0x29e>
 8009744:	6823      	ldr	r3, [r4, #0]
 8009746:	07d9      	lsls	r1, r3, #31
 8009748:	d5d8      	bpl.n	80096fc <_printf_float+0x250>
 800974a:	ee18 3a10 	vmov	r3, s16
 800974e:	4652      	mov	r2, sl
 8009750:	4631      	mov	r1, r6
 8009752:	4628      	mov	r0, r5
 8009754:	47b8      	blx	r7
 8009756:	3001      	adds	r0, #1
 8009758:	f43f af09 	beq.w	800956e <_printf_float+0xc2>
 800975c:	f04f 0900 	mov.w	r9, #0
 8009760:	f104 0a1a 	add.w	sl, r4, #26
 8009764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009766:	425b      	negs	r3, r3
 8009768:	454b      	cmp	r3, r9
 800976a:	dc01      	bgt.n	8009770 <_printf_float+0x2c4>
 800976c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800976e:	e792      	b.n	8009696 <_printf_float+0x1ea>
 8009770:	2301      	movs	r3, #1
 8009772:	4652      	mov	r2, sl
 8009774:	4631      	mov	r1, r6
 8009776:	4628      	mov	r0, r5
 8009778:	47b8      	blx	r7
 800977a:	3001      	adds	r0, #1
 800977c:	f43f aef7 	beq.w	800956e <_printf_float+0xc2>
 8009780:	f109 0901 	add.w	r9, r9, #1
 8009784:	e7ee      	b.n	8009764 <_printf_float+0x2b8>
 8009786:	bf00      	nop
 8009788:	7fefffff 	.word	0x7fefffff
 800978c:	08013dd4 	.word	0x08013dd4
 8009790:	08013dd8 	.word	0x08013dd8
 8009794:	08013de0 	.word	0x08013de0
 8009798:	08013ddc 	.word	0x08013ddc
 800979c:	08013de4 	.word	0x08013de4
 80097a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097a4:	429a      	cmp	r2, r3
 80097a6:	bfa8      	it	ge
 80097a8:	461a      	movge	r2, r3
 80097aa:	2a00      	cmp	r2, #0
 80097ac:	4691      	mov	r9, r2
 80097ae:	dc37      	bgt.n	8009820 <_printf_float+0x374>
 80097b0:	f04f 0b00 	mov.w	fp, #0
 80097b4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097b8:	f104 021a 	add.w	r2, r4, #26
 80097bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80097be:	9305      	str	r3, [sp, #20]
 80097c0:	eba3 0309 	sub.w	r3, r3, r9
 80097c4:	455b      	cmp	r3, fp
 80097c6:	dc33      	bgt.n	8009830 <_printf_float+0x384>
 80097c8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097cc:	429a      	cmp	r2, r3
 80097ce:	db3b      	blt.n	8009848 <_printf_float+0x39c>
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	07da      	lsls	r2, r3, #31
 80097d4:	d438      	bmi.n	8009848 <_printf_float+0x39c>
 80097d6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097d8:	9b05      	ldr	r3, [sp, #20]
 80097da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80097dc:	1ad3      	subs	r3, r2, r3
 80097de:	eba2 0901 	sub.w	r9, r2, r1
 80097e2:	4599      	cmp	r9, r3
 80097e4:	bfa8      	it	ge
 80097e6:	4699      	movge	r9, r3
 80097e8:	f1b9 0f00 	cmp.w	r9, #0
 80097ec:	dc35      	bgt.n	800985a <_printf_float+0x3ae>
 80097ee:	f04f 0800 	mov.w	r8, #0
 80097f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097f6:	f104 0a1a 	add.w	sl, r4, #26
 80097fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80097fe:	1a9b      	subs	r3, r3, r2
 8009800:	eba3 0309 	sub.w	r3, r3, r9
 8009804:	4543      	cmp	r3, r8
 8009806:	f77f af79 	ble.w	80096fc <_printf_float+0x250>
 800980a:	2301      	movs	r3, #1
 800980c:	4652      	mov	r2, sl
 800980e:	4631      	mov	r1, r6
 8009810:	4628      	mov	r0, r5
 8009812:	47b8      	blx	r7
 8009814:	3001      	adds	r0, #1
 8009816:	f43f aeaa 	beq.w	800956e <_printf_float+0xc2>
 800981a:	f108 0801 	add.w	r8, r8, #1
 800981e:	e7ec      	b.n	80097fa <_printf_float+0x34e>
 8009820:	4613      	mov	r3, r2
 8009822:	4631      	mov	r1, r6
 8009824:	4642      	mov	r2, r8
 8009826:	4628      	mov	r0, r5
 8009828:	47b8      	blx	r7
 800982a:	3001      	adds	r0, #1
 800982c:	d1c0      	bne.n	80097b0 <_printf_float+0x304>
 800982e:	e69e      	b.n	800956e <_printf_float+0xc2>
 8009830:	2301      	movs	r3, #1
 8009832:	4631      	mov	r1, r6
 8009834:	4628      	mov	r0, r5
 8009836:	9205      	str	r2, [sp, #20]
 8009838:	47b8      	blx	r7
 800983a:	3001      	adds	r0, #1
 800983c:	f43f ae97 	beq.w	800956e <_printf_float+0xc2>
 8009840:	9a05      	ldr	r2, [sp, #20]
 8009842:	f10b 0b01 	add.w	fp, fp, #1
 8009846:	e7b9      	b.n	80097bc <_printf_float+0x310>
 8009848:	ee18 3a10 	vmov	r3, s16
 800984c:	4652      	mov	r2, sl
 800984e:	4631      	mov	r1, r6
 8009850:	4628      	mov	r0, r5
 8009852:	47b8      	blx	r7
 8009854:	3001      	adds	r0, #1
 8009856:	d1be      	bne.n	80097d6 <_printf_float+0x32a>
 8009858:	e689      	b.n	800956e <_printf_float+0xc2>
 800985a:	9a05      	ldr	r2, [sp, #20]
 800985c:	464b      	mov	r3, r9
 800985e:	4442      	add	r2, r8
 8009860:	4631      	mov	r1, r6
 8009862:	4628      	mov	r0, r5
 8009864:	47b8      	blx	r7
 8009866:	3001      	adds	r0, #1
 8009868:	d1c1      	bne.n	80097ee <_printf_float+0x342>
 800986a:	e680      	b.n	800956e <_printf_float+0xc2>
 800986c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800986e:	2a01      	cmp	r2, #1
 8009870:	dc01      	bgt.n	8009876 <_printf_float+0x3ca>
 8009872:	07db      	lsls	r3, r3, #31
 8009874:	d538      	bpl.n	80098e8 <_printf_float+0x43c>
 8009876:	2301      	movs	r3, #1
 8009878:	4642      	mov	r2, r8
 800987a:	4631      	mov	r1, r6
 800987c:	4628      	mov	r0, r5
 800987e:	47b8      	blx	r7
 8009880:	3001      	adds	r0, #1
 8009882:	f43f ae74 	beq.w	800956e <_printf_float+0xc2>
 8009886:	ee18 3a10 	vmov	r3, s16
 800988a:	4652      	mov	r2, sl
 800988c:	4631      	mov	r1, r6
 800988e:	4628      	mov	r0, r5
 8009890:	47b8      	blx	r7
 8009892:	3001      	adds	r0, #1
 8009894:	f43f ae6b 	beq.w	800956e <_printf_float+0xc2>
 8009898:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800989c:	2200      	movs	r2, #0
 800989e:	2300      	movs	r3, #0
 80098a0:	f7f7 f942 	bl	8000b28 <__aeabi_dcmpeq>
 80098a4:	b9d8      	cbnz	r0, 80098de <_printf_float+0x432>
 80098a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098a8:	f108 0201 	add.w	r2, r8, #1
 80098ac:	3b01      	subs	r3, #1
 80098ae:	4631      	mov	r1, r6
 80098b0:	4628      	mov	r0, r5
 80098b2:	47b8      	blx	r7
 80098b4:	3001      	adds	r0, #1
 80098b6:	d10e      	bne.n	80098d6 <_printf_float+0x42a>
 80098b8:	e659      	b.n	800956e <_printf_float+0xc2>
 80098ba:	2301      	movs	r3, #1
 80098bc:	4652      	mov	r2, sl
 80098be:	4631      	mov	r1, r6
 80098c0:	4628      	mov	r0, r5
 80098c2:	47b8      	blx	r7
 80098c4:	3001      	adds	r0, #1
 80098c6:	f43f ae52 	beq.w	800956e <_printf_float+0xc2>
 80098ca:	f108 0801 	add.w	r8, r8, #1
 80098ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098d0:	3b01      	subs	r3, #1
 80098d2:	4543      	cmp	r3, r8
 80098d4:	dcf1      	bgt.n	80098ba <_printf_float+0x40e>
 80098d6:	464b      	mov	r3, r9
 80098d8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80098dc:	e6dc      	b.n	8009698 <_printf_float+0x1ec>
 80098de:	f04f 0800 	mov.w	r8, #0
 80098e2:	f104 0a1a 	add.w	sl, r4, #26
 80098e6:	e7f2      	b.n	80098ce <_printf_float+0x422>
 80098e8:	2301      	movs	r3, #1
 80098ea:	4642      	mov	r2, r8
 80098ec:	e7df      	b.n	80098ae <_printf_float+0x402>
 80098ee:	2301      	movs	r3, #1
 80098f0:	464a      	mov	r2, r9
 80098f2:	4631      	mov	r1, r6
 80098f4:	4628      	mov	r0, r5
 80098f6:	47b8      	blx	r7
 80098f8:	3001      	adds	r0, #1
 80098fa:	f43f ae38 	beq.w	800956e <_printf_float+0xc2>
 80098fe:	f108 0801 	add.w	r8, r8, #1
 8009902:	68e3      	ldr	r3, [r4, #12]
 8009904:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009906:	1a5b      	subs	r3, r3, r1
 8009908:	4543      	cmp	r3, r8
 800990a:	dcf0      	bgt.n	80098ee <_printf_float+0x442>
 800990c:	e6fa      	b.n	8009704 <_printf_float+0x258>
 800990e:	f04f 0800 	mov.w	r8, #0
 8009912:	f104 0919 	add.w	r9, r4, #25
 8009916:	e7f4      	b.n	8009902 <_printf_float+0x456>

08009918 <_printf_common>:
 8009918:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800991c:	4616      	mov	r6, r2
 800991e:	4699      	mov	r9, r3
 8009920:	688a      	ldr	r2, [r1, #8]
 8009922:	690b      	ldr	r3, [r1, #16]
 8009924:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009928:	4293      	cmp	r3, r2
 800992a:	bfb8      	it	lt
 800992c:	4613      	movlt	r3, r2
 800992e:	6033      	str	r3, [r6, #0]
 8009930:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009934:	4607      	mov	r7, r0
 8009936:	460c      	mov	r4, r1
 8009938:	b10a      	cbz	r2, 800993e <_printf_common+0x26>
 800993a:	3301      	adds	r3, #1
 800993c:	6033      	str	r3, [r6, #0]
 800993e:	6823      	ldr	r3, [r4, #0]
 8009940:	0699      	lsls	r1, r3, #26
 8009942:	bf42      	ittt	mi
 8009944:	6833      	ldrmi	r3, [r6, #0]
 8009946:	3302      	addmi	r3, #2
 8009948:	6033      	strmi	r3, [r6, #0]
 800994a:	6825      	ldr	r5, [r4, #0]
 800994c:	f015 0506 	ands.w	r5, r5, #6
 8009950:	d106      	bne.n	8009960 <_printf_common+0x48>
 8009952:	f104 0a19 	add.w	sl, r4, #25
 8009956:	68e3      	ldr	r3, [r4, #12]
 8009958:	6832      	ldr	r2, [r6, #0]
 800995a:	1a9b      	subs	r3, r3, r2
 800995c:	42ab      	cmp	r3, r5
 800995e:	dc26      	bgt.n	80099ae <_printf_common+0x96>
 8009960:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009964:	1e13      	subs	r3, r2, #0
 8009966:	6822      	ldr	r2, [r4, #0]
 8009968:	bf18      	it	ne
 800996a:	2301      	movne	r3, #1
 800996c:	0692      	lsls	r2, r2, #26
 800996e:	d42b      	bmi.n	80099c8 <_printf_common+0xb0>
 8009970:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009974:	4649      	mov	r1, r9
 8009976:	4638      	mov	r0, r7
 8009978:	47c0      	blx	r8
 800997a:	3001      	adds	r0, #1
 800997c:	d01e      	beq.n	80099bc <_printf_common+0xa4>
 800997e:	6823      	ldr	r3, [r4, #0]
 8009980:	68e5      	ldr	r5, [r4, #12]
 8009982:	6832      	ldr	r2, [r6, #0]
 8009984:	f003 0306 	and.w	r3, r3, #6
 8009988:	2b04      	cmp	r3, #4
 800998a:	bf08      	it	eq
 800998c:	1aad      	subeq	r5, r5, r2
 800998e:	68a3      	ldr	r3, [r4, #8]
 8009990:	6922      	ldr	r2, [r4, #16]
 8009992:	bf0c      	ite	eq
 8009994:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009998:	2500      	movne	r5, #0
 800999a:	4293      	cmp	r3, r2
 800999c:	bfc4      	itt	gt
 800999e:	1a9b      	subgt	r3, r3, r2
 80099a0:	18ed      	addgt	r5, r5, r3
 80099a2:	2600      	movs	r6, #0
 80099a4:	341a      	adds	r4, #26
 80099a6:	42b5      	cmp	r5, r6
 80099a8:	d11a      	bne.n	80099e0 <_printf_common+0xc8>
 80099aa:	2000      	movs	r0, #0
 80099ac:	e008      	b.n	80099c0 <_printf_common+0xa8>
 80099ae:	2301      	movs	r3, #1
 80099b0:	4652      	mov	r2, sl
 80099b2:	4649      	mov	r1, r9
 80099b4:	4638      	mov	r0, r7
 80099b6:	47c0      	blx	r8
 80099b8:	3001      	adds	r0, #1
 80099ba:	d103      	bne.n	80099c4 <_printf_common+0xac>
 80099bc:	f04f 30ff 	mov.w	r0, #4294967295
 80099c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099c4:	3501      	adds	r5, #1
 80099c6:	e7c6      	b.n	8009956 <_printf_common+0x3e>
 80099c8:	18e1      	adds	r1, r4, r3
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	2030      	movs	r0, #48	; 0x30
 80099ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099d2:	4422      	add	r2, r4
 80099d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099dc:	3302      	adds	r3, #2
 80099de:	e7c7      	b.n	8009970 <_printf_common+0x58>
 80099e0:	2301      	movs	r3, #1
 80099e2:	4622      	mov	r2, r4
 80099e4:	4649      	mov	r1, r9
 80099e6:	4638      	mov	r0, r7
 80099e8:	47c0      	blx	r8
 80099ea:	3001      	adds	r0, #1
 80099ec:	d0e6      	beq.n	80099bc <_printf_common+0xa4>
 80099ee:	3601      	adds	r6, #1
 80099f0:	e7d9      	b.n	80099a6 <_printf_common+0x8e>
	...

080099f4 <_printf_i>:
 80099f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f8:	460c      	mov	r4, r1
 80099fa:	4691      	mov	r9, r2
 80099fc:	7e27      	ldrb	r7, [r4, #24]
 80099fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a00:	2f78      	cmp	r7, #120	; 0x78
 8009a02:	4680      	mov	r8, r0
 8009a04:	469a      	mov	sl, r3
 8009a06:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a0a:	d807      	bhi.n	8009a1c <_printf_i+0x28>
 8009a0c:	2f62      	cmp	r7, #98	; 0x62
 8009a0e:	d80a      	bhi.n	8009a26 <_printf_i+0x32>
 8009a10:	2f00      	cmp	r7, #0
 8009a12:	f000 80d8 	beq.w	8009bc6 <_printf_i+0x1d2>
 8009a16:	2f58      	cmp	r7, #88	; 0x58
 8009a18:	f000 80a3 	beq.w	8009b62 <_printf_i+0x16e>
 8009a1c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a24:	e03a      	b.n	8009a9c <_printf_i+0xa8>
 8009a26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a2a:	2b15      	cmp	r3, #21
 8009a2c:	d8f6      	bhi.n	8009a1c <_printf_i+0x28>
 8009a2e:	a001      	add	r0, pc, #4	; (adr r0, 8009a34 <_printf_i+0x40>)
 8009a30:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a34:	08009a8d 	.word	0x08009a8d
 8009a38:	08009aa1 	.word	0x08009aa1
 8009a3c:	08009a1d 	.word	0x08009a1d
 8009a40:	08009a1d 	.word	0x08009a1d
 8009a44:	08009a1d 	.word	0x08009a1d
 8009a48:	08009a1d 	.word	0x08009a1d
 8009a4c:	08009aa1 	.word	0x08009aa1
 8009a50:	08009a1d 	.word	0x08009a1d
 8009a54:	08009a1d 	.word	0x08009a1d
 8009a58:	08009a1d 	.word	0x08009a1d
 8009a5c:	08009a1d 	.word	0x08009a1d
 8009a60:	08009bad 	.word	0x08009bad
 8009a64:	08009ad1 	.word	0x08009ad1
 8009a68:	08009b8f 	.word	0x08009b8f
 8009a6c:	08009a1d 	.word	0x08009a1d
 8009a70:	08009a1d 	.word	0x08009a1d
 8009a74:	08009bcf 	.word	0x08009bcf
 8009a78:	08009a1d 	.word	0x08009a1d
 8009a7c:	08009ad1 	.word	0x08009ad1
 8009a80:	08009a1d 	.word	0x08009a1d
 8009a84:	08009a1d 	.word	0x08009a1d
 8009a88:	08009b97 	.word	0x08009b97
 8009a8c:	680b      	ldr	r3, [r1, #0]
 8009a8e:	1d1a      	adds	r2, r3, #4
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	600a      	str	r2, [r1, #0]
 8009a94:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e0a3      	b.n	8009be8 <_printf_i+0x1f4>
 8009aa0:	6825      	ldr	r5, [r4, #0]
 8009aa2:	6808      	ldr	r0, [r1, #0]
 8009aa4:	062e      	lsls	r6, r5, #24
 8009aa6:	f100 0304 	add.w	r3, r0, #4
 8009aaa:	d50a      	bpl.n	8009ac2 <_printf_i+0xce>
 8009aac:	6805      	ldr	r5, [r0, #0]
 8009aae:	600b      	str	r3, [r1, #0]
 8009ab0:	2d00      	cmp	r5, #0
 8009ab2:	da03      	bge.n	8009abc <_printf_i+0xc8>
 8009ab4:	232d      	movs	r3, #45	; 0x2d
 8009ab6:	426d      	negs	r5, r5
 8009ab8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009abc:	485e      	ldr	r0, [pc, #376]	; (8009c38 <_printf_i+0x244>)
 8009abe:	230a      	movs	r3, #10
 8009ac0:	e019      	b.n	8009af6 <_printf_i+0x102>
 8009ac2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009ac6:	6805      	ldr	r5, [r0, #0]
 8009ac8:	600b      	str	r3, [r1, #0]
 8009aca:	bf18      	it	ne
 8009acc:	b22d      	sxthne	r5, r5
 8009ace:	e7ef      	b.n	8009ab0 <_printf_i+0xbc>
 8009ad0:	680b      	ldr	r3, [r1, #0]
 8009ad2:	6825      	ldr	r5, [r4, #0]
 8009ad4:	1d18      	adds	r0, r3, #4
 8009ad6:	6008      	str	r0, [r1, #0]
 8009ad8:	0628      	lsls	r0, r5, #24
 8009ada:	d501      	bpl.n	8009ae0 <_printf_i+0xec>
 8009adc:	681d      	ldr	r5, [r3, #0]
 8009ade:	e002      	b.n	8009ae6 <_printf_i+0xf2>
 8009ae0:	0669      	lsls	r1, r5, #25
 8009ae2:	d5fb      	bpl.n	8009adc <_printf_i+0xe8>
 8009ae4:	881d      	ldrh	r5, [r3, #0]
 8009ae6:	4854      	ldr	r0, [pc, #336]	; (8009c38 <_printf_i+0x244>)
 8009ae8:	2f6f      	cmp	r7, #111	; 0x6f
 8009aea:	bf0c      	ite	eq
 8009aec:	2308      	moveq	r3, #8
 8009aee:	230a      	movne	r3, #10
 8009af0:	2100      	movs	r1, #0
 8009af2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009af6:	6866      	ldr	r6, [r4, #4]
 8009af8:	60a6      	str	r6, [r4, #8]
 8009afa:	2e00      	cmp	r6, #0
 8009afc:	bfa2      	ittt	ge
 8009afe:	6821      	ldrge	r1, [r4, #0]
 8009b00:	f021 0104 	bicge.w	r1, r1, #4
 8009b04:	6021      	strge	r1, [r4, #0]
 8009b06:	b90d      	cbnz	r5, 8009b0c <_printf_i+0x118>
 8009b08:	2e00      	cmp	r6, #0
 8009b0a:	d04d      	beq.n	8009ba8 <_printf_i+0x1b4>
 8009b0c:	4616      	mov	r6, r2
 8009b0e:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b12:	fb03 5711 	mls	r7, r3, r1, r5
 8009b16:	5dc7      	ldrb	r7, [r0, r7]
 8009b18:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b1c:	462f      	mov	r7, r5
 8009b1e:	42bb      	cmp	r3, r7
 8009b20:	460d      	mov	r5, r1
 8009b22:	d9f4      	bls.n	8009b0e <_printf_i+0x11a>
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	d10b      	bne.n	8009b40 <_printf_i+0x14c>
 8009b28:	6823      	ldr	r3, [r4, #0]
 8009b2a:	07df      	lsls	r7, r3, #31
 8009b2c:	d508      	bpl.n	8009b40 <_printf_i+0x14c>
 8009b2e:	6923      	ldr	r3, [r4, #16]
 8009b30:	6861      	ldr	r1, [r4, #4]
 8009b32:	4299      	cmp	r1, r3
 8009b34:	bfde      	ittt	le
 8009b36:	2330      	movle	r3, #48	; 0x30
 8009b38:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b3c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b40:	1b92      	subs	r2, r2, r6
 8009b42:	6122      	str	r2, [r4, #16]
 8009b44:	f8cd a000 	str.w	sl, [sp]
 8009b48:	464b      	mov	r3, r9
 8009b4a:	aa03      	add	r2, sp, #12
 8009b4c:	4621      	mov	r1, r4
 8009b4e:	4640      	mov	r0, r8
 8009b50:	f7ff fee2 	bl	8009918 <_printf_common>
 8009b54:	3001      	adds	r0, #1
 8009b56:	d14c      	bne.n	8009bf2 <_printf_i+0x1fe>
 8009b58:	f04f 30ff 	mov.w	r0, #4294967295
 8009b5c:	b004      	add	sp, #16
 8009b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b62:	4835      	ldr	r0, [pc, #212]	; (8009c38 <_printf_i+0x244>)
 8009b64:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	680e      	ldr	r6, [r1, #0]
 8009b6c:	061f      	lsls	r7, r3, #24
 8009b6e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009b72:	600e      	str	r6, [r1, #0]
 8009b74:	d514      	bpl.n	8009ba0 <_printf_i+0x1ac>
 8009b76:	07d9      	lsls	r1, r3, #31
 8009b78:	bf44      	itt	mi
 8009b7a:	f043 0320 	orrmi.w	r3, r3, #32
 8009b7e:	6023      	strmi	r3, [r4, #0]
 8009b80:	b91d      	cbnz	r5, 8009b8a <_printf_i+0x196>
 8009b82:	6823      	ldr	r3, [r4, #0]
 8009b84:	f023 0320 	bic.w	r3, r3, #32
 8009b88:	6023      	str	r3, [r4, #0]
 8009b8a:	2310      	movs	r3, #16
 8009b8c:	e7b0      	b.n	8009af0 <_printf_i+0xfc>
 8009b8e:	6823      	ldr	r3, [r4, #0]
 8009b90:	f043 0320 	orr.w	r3, r3, #32
 8009b94:	6023      	str	r3, [r4, #0]
 8009b96:	2378      	movs	r3, #120	; 0x78
 8009b98:	4828      	ldr	r0, [pc, #160]	; (8009c3c <_printf_i+0x248>)
 8009b9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b9e:	e7e3      	b.n	8009b68 <_printf_i+0x174>
 8009ba0:	065e      	lsls	r6, r3, #25
 8009ba2:	bf48      	it	mi
 8009ba4:	b2ad      	uxthmi	r5, r5
 8009ba6:	e7e6      	b.n	8009b76 <_printf_i+0x182>
 8009ba8:	4616      	mov	r6, r2
 8009baa:	e7bb      	b.n	8009b24 <_printf_i+0x130>
 8009bac:	680b      	ldr	r3, [r1, #0]
 8009bae:	6826      	ldr	r6, [r4, #0]
 8009bb0:	6960      	ldr	r0, [r4, #20]
 8009bb2:	1d1d      	adds	r5, r3, #4
 8009bb4:	600d      	str	r5, [r1, #0]
 8009bb6:	0635      	lsls	r5, r6, #24
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	d501      	bpl.n	8009bc0 <_printf_i+0x1cc>
 8009bbc:	6018      	str	r0, [r3, #0]
 8009bbe:	e002      	b.n	8009bc6 <_printf_i+0x1d2>
 8009bc0:	0671      	lsls	r1, r6, #25
 8009bc2:	d5fb      	bpl.n	8009bbc <_printf_i+0x1c8>
 8009bc4:	8018      	strh	r0, [r3, #0]
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	6123      	str	r3, [r4, #16]
 8009bca:	4616      	mov	r6, r2
 8009bcc:	e7ba      	b.n	8009b44 <_printf_i+0x150>
 8009bce:	680b      	ldr	r3, [r1, #0]
 8009bd0:	1d1a      	adds	r2, r3, #4
 8009bd2:	600a      	str	r2, [r1, #0]
 8009bd4:	681e      	ldr	r6, [r3, #0]
 8009bd6:	6862      	ldr	r2, [r4, #4]
 8009bd8:	2100      	movs	r1, #0
 8009bda:	4630      	mov	r0, r6
 8009bdc:	f7f6 fb30 	bl	8000240 <memchr>
 8009be0:	b108      	cbz	r0, 8009be6 <_printf_i+0x1f2>
 8009be2:	1b80      	subs	r0, r0, r6
 8009be4:	6060      	str	r0, [r4, #4]
 8009be6:	6863      	ldr	r3, [r4, #4]
 8009be8:	6123      	str	r3, [r4, #16]
 8009bea:	2300      	movs	r3, #0
 8009bec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bf0:	e7a8      	b.n	8009b44 <_printf_i+0x150>
 8009bf2:	6923      	ldr	r3, [r4, #16]
 8009bf4:	4632      	mov	r2, r6
 8009bf6:	4649      	mov	r1, r9
 8009bf8:	4640      	mov	r0, r8
 8009bfa:	47d0      	blx	sl
 8009bfc:	3001      	adds	r0, #1
 8009bfe:	d0ab      	beq.n	8009b58 <_printf_i+0x164>
 8009c00:	6823      	ldr	r3, [r4, #0]
 8009c02:	079b      	lsls	r3, r3, #30
 8009c04:	d413      	bmi.n	8009c2e <_printf_i+0x23a>
 8009c06:	68e0      	ldr	r0, [r4, #12]
 8009c08:	9b03      	ldr	r3, [sp, #12]
 8009c0a:	4298      	cmp	r0, r3
 8009c0c:	bfb8      	it	lt
 8009c0e:	4618      	movlt	r0, r3
 8009c10:	e7a4      	b.n	8009b5c <_printf_i+0x168>
 8009c12:	2301      	movs	r3, #1
 8009c14:	4632      	mov	r2, r6
 8009c16:	4649      	mov	r1, r9
 8009c18:	4640      	mov	r0, r8
 8009c1a:	47d0      	blx	sl
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d09b      	beq.n	8009b58 <_printf_i+0x164>
 8009c20:	3501      	adds	r5, #1
 8009c22:	68e3      	ldr	r3, [r4, #12]
 8009c24:	9903      	ldr	r1, [sp, #12]
 8009c26:	1a5b      	subs	r3, r3, r1
 8009c28:	42ab      	cmp	r3, r5
 8009c2a:	dcf2      	bgt.n	8009c12 <_printf_i+0x21e>
 8009c2c:	e7eb      	b.n	8009c06 <_printf_i+0x212>
 8009c2e:	2500      	movs	r5, #0
 8009c30:	f104 0619 	add.w	r6, r4, #25
 8009c34:	e7f5      	b.n	8009c22 <_printf_i+0x22e>
 8009c36:	bf00      	nop
 8009c38:	08013de6 	.word	0x08013de6
 8009c3c:	08013df7 	.word	0x08013df7

08009c40 <iprintf>:
 8009c40:	b40f      	push	{r0, r1, r2, r3}
 8009c42:	4b0a      	ldr	r3, [pc, #40]	; (8009c6c <iprintf+0x2c>)
 8009c44:	b513      	push	{r0, r1, r4, lr}
 8009c46:	681c      	ldr	r4, [r3, #0]
 8009c48:	b124      	cbz	r4, 8009c54 <iprintf+0x14>
 8009c4a:	69a3      	ldr	r3, [r4, #24]
 8009c4c:	b913      	cbnz	r3, 8009c54 <iprintf+0x14>
 8009c4e:	4620      	mov	r0, r4
 8009c50:	f001 f944 	bl	800aedc <__sinit>
 8009c54:	ab05      	add	r3, sp, #20
 8009c56:	9a04      	ldr	r2, [sp, #16]
 8009c58:	68a1      	ldr	r1, [r4, #8]
 8009c5a:	9301      	str	r3, [sp, #4]
 8009c5c:	4620      	mov	r0, r4
 8009c5e:	f001 ff73 	bl	800bb48 <_vfiprintf_r>
 8009c62:	b002      	add	sp, #8
 8009c64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c68:	b004      	add	sp, #16
 8009c6a:	4770      	bx	lr
 8009c6c:	20000010 	.word	0x20000010

08009c70 <_puts_r>:
 8009c70:	b570      	push	{r4, r5, r6, lr}
 8009c72:	460e      	mov	r6, r1
 8009c74:	4605      	mov	r5, r0
 8009c76:	b118      	cbz	r0, 8009c80 <_puts_r+0x10>
 8009c78:	6983      	ldr	r3, [r0, #24]
 8009c7a:	b90b      	cbnz	r3, 8009c80 <_puts_r+0x10>
 8009c7c:	f001 f92e 	bl	800aedc <__sinit>
 8009c80:	69ab      	ldr	r3, [r5, #24]
 8009c82:	68ac      	ldr	r4, [r5, #8]
 8009c84:	b913      	cbnz	r3, 8009c8c <_puts_r+0x1c>
 8009c86:	4628      	mov	r0, r5
 8009c88:	f001 f928 	bl	800aedc <__sinit>
 8009c8c:	4b2c      	ldr	r3, [pc, #176]	; (8009d40 <_puts_r+0xd0>)
 8009c8e:	429c      	cmp	r4, r3
 8009c90:	d120      	bne.n	8009cd4 <_puts_r+0x64>
 8009c92:	686c      	ldr	r4, [r5, #4]
 8009c94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c96:	07db      	lsls	r3, r3, #31
 8009c98:	d405      	bmi.n	8009ca6 <_puts_r+0x36>
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	0598      	lsls	r0, r3, #22
 8009c9e:	d402      	bmi.n	8009ca6 <_puts_r+0x36>
 8009ca0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ca2:	f001 f9be 	bl	800b022 <__retarget_lock_acquire_recursive>
 8009ca6:	89a3      	ldrh	r3, [r4, #12]
 8009ca8:	0719      	lsls	r1, r3, #28
 8009caa:	d51d      	bpl.n	8009ce8 <_puts_r+0x78>
 8009cac:	6923      	ldr	r3, [r4, #16]
 8009cae:	b1db      	cbz	r3, 8009ce8 <_puts_r+0x78>
 8009cb0:	3e01      	subs	r6, #1
 8009cb2:	68a3      	ldr	r3, [r4, #8]
 8009cb4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009cb8:	3b01      	subs	r3, #1
 8009cba:	60a3      	str	r3, [r4, #8]
 8009cbc:	bb39      	cbnz	r1, 8009d0e <_puts_r+0x9e>
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	da38      	bge.n	8009d34 <_puts_r+0xc4>
 8009cc2:	4622      	mov	r2, r4
 8009cc4:	210a      	movs	r1, #10
 8009cc6:	4628      	mov	r0, r5
 8009cc8:	f000 f8b4 	bl	8009e34 <__swbuf_r>
 8009ccc:	3001      	adds	r0, #1
 8009cce:	d011      	beq.n	8009cf4 <_puts_r+0x84>
 8009cd0:	250a      	movs	r5, #10
 8009cd2:	e011      	b.n	8009cf8 <_puts_r+0x88>
 8009cd4:	4b1b      	ldr	r3, [pc, #108]	; (8009d44 <_puts_r+0xd4>)
 8009cd6:	429c      	cmp	r4, r3
 8009cd8:	d101      	bne.n	8009cde <_puts_r+0x6e>
 8009cda:	68ac      	ldr	r4, [r5, #8]
 8009cdc:	e7da      	b.n	8009c94 <_puts_r+0x24>
 8009cde:	4b1a      	ldr	r3, [pc, #104]	; (8009d48 <_puts_r+0xd8>)
 8009ce0:	429c      	cmp	r4, r3
 8009ce2:	bf08      	it	eq
 8009ce4:	68ec      	ldreq	r4, [r5, #12]
 8009ce6:	e7d5      	b.n	8009c94 <_puts_r+0x24>
 8009ce8:	4621      	mov	r1, r4
 8009cea:	4628      	mov	r0, r5
 8009cec:	f000 f8f4 	bl	8009ed8 <__swsetup_r>
 8009cf0:	2800      	cmp	r0, #0
 8009cf2:	d0dd      	beq.n	8009cb0 <_puts_r+0x40>
 8009cf4:	f04f 35ff 	mov.w	r5, #4294967295
 8009cf8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cfa:	07da      	lsls	r2, r3, #31
 8009cfc:	d405      	bmi.n	8009d0a <_puts_r+0x9a>
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	059b      	lsls	r3, r3, #22
 8009d02:	d402      	bmi.n	8009d0a <_puts_r+0x9a>
 8009d04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009d06:	f001 f98d 	bl	800b024 <__retarget_lock_release_recursive>
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	bd70      	pop	{r4, r5, r6, pc}
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	da04      	bge.n	8009d1c <_puts_r+0xac>
 8009d12:	69a2      	ldr	r2, [r4, #24]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	dc06      	bgt.n	8009d26 <_puts_r+0xb6>
 8009d18:	290a      	cmp	r1, #10
 8009d1a:	d004      	beq.n	8009d26 <_puts_r+0xb6>
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	6022      	str	r2, [r4, #0]
 8009d22:	7019      	strb	r1, [r3, #0]
 8009d24:	e7c5      	b.n	8009cb2 <_puts_r+0x42>
 8009d26:	4622      	mov	r2, r4
 8009d28:	4628      	mov	r0, r5
 8009d2a:	f000 f883 	bl	8009e34 <__swbuf_r>
 8009d2e:	3001      	adds	r0, #1
 8009d30:	d1bf      	bne.n	8009cb2 <_puts_r+0x42>
 8009d32:	e7df      	b.n	8009cf4 <_puts_r+0x84>
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	250a      	movs	r5, #10
 8009d38:	1c5a      	adds	r2, r3, #1
 8009d3a:	6022      	str	r2, [r4, #0]
 8009d3c:	701d      	strb	r5, [r3, #0]
 8009d3e:	e7db      	b.n	8009cf8 <_puts_r+0x88>
 8009d40:	08013ebc 	.word	0x08013ebc
 8009d44:	08013edc 	.word	0x08013edc
 8009d48:	08013e9c 	.word	0x08013e9c

08009d4c <puts>:
 8009d4c:	4b02      	ldr	r3, [pc, #8]	; (8009d58 <puts+0xc>)
 8009d4e:	4601      	mov	r1, r0
 8009d50:	6818      	ldr	r0, [r3, #0]
 8009d52:	f7ff bf8d 	b.w	8009c70 <_puts_r>
 8009d56:	bf00      	nop
 8009d58:	20000010 	.word	0x20000010

08009d5c <_sbrk_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4d06      	ldr	r5, [pc, #24]	; (8009d78 <_sbrk_r+0x1c>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	4604      	mov	r4, r0
 8009d64:	4608      	mov	r0, r1
 8009d66:	602b      	str	r3, [r5, #0]
 8009d68:	f7f8 fafa 	bl	8002360 <_sbrk>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	d102      	bne.n	8009d76 <_sbrk_r+0x1a>
 8009d70:	682b      	ldr	r3, [r5, #0]
 8009d72:	b103      	cbz	r3, 8009d76 <_sbrk_r+0x1a>
 8009d74:	6023      	str	r3, [r4, #0]
 8009d76:	bd38      	pop	{r3, r4, r5, pc}
 8009d78:	20000ee8 	.word	0x20000ee8

08009d7c <sniprintf>:
 8009d7c:	b40c      	push	{r2, r3}
 8009d7e:	b530      	push	{r4, r5, lr}
 8009d80:	4b17      	ldr	r3, [pc, #92]	; (8009de0 <sniprintf+0x64>)
 8009d82:	1e0c      	subs	r4, r1, #0
 8009d84:	681d      	ldr	r5, [r3, #0]
 8009d86:	b09d      	sub	sp, #116	; 0x74
 8009d88:	da08      	bge.n	8009d9c <sniprintf+0x20>
 8009d8a:	238b      	movs	r3, #139	; 0x8b
 8009d8c:	602b      	str	r3, [r5, #0]
 8009d8e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d92:	b01d      	add	sp, #116	; 0x74
 8009d94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d98:	b002      	add	sp, #8
 8009d9a:	4770      	bx	lr
 8009d9c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009da0:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009da4:	bf14      	ite	ne
 8009da6:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009daa:	4623      	moveq	r3, r4
 8009dac:	9304      	str	r3, [sp, #16]
 8009dae:	9307      	str	r3, [sp, #28]
 8009db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009db4:	9002      	str	r0, [sp, #8]
 8009db6:	9006      	str	r0, [sp, #24]
 8009db8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009dbc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009dbe:	ab21      	add	r3, sp, #132	; 0x84
 8009dc0:	a902      	add	r1, sp, #8
 8009dc2:	4628      	mov	r0, r5
 8009dc4:	9301      	str	r3, [sp, #4]
 8009dc6:	f001 fd95 	bl	800b8f4 <_svfiprintf_r>
 8009dca:	1c43      	adds	r3, r0, #1
 8009dcc:	bfbc      	itt	lt
 8009dce:	238b      	movlt	r3, #139	; 0x8b
 8009dd0:	602b      	strlt	r3, [r5, #0]
 8009dd2:	2c00      	cmp	r4, #0
 8009dd4:	d0dd      	beq.n	8009d92 <sniprintf+0x16>
 8009dd6:	9b02      	ldr	r3, [sp, #8]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	e7d9      	b.n	8009d92 <sniprintf+0x16>
 8009dde:	bf00      	nop
 8009de0:	20000010 	.word	0x20000010

08009de4 <siprintf>:
 8009de4:	b40e      	push	{r1, r2, r3}
 8009de6:	b500      	push	{lr}
 8009de8:	b09c      	sub	sp, #112	; 0x70
 8009dea:	ab1d      	add	r3, sp, #116	; 0x74
 8009dec:	9002      	str	r0, [sp, #8]
 8009dee:	9006      	str	r0, [sp, #24]
 8009df0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009df4:	4809      	ldr	r0, [pc, #36]	; (8009e1c <siprintf+0x38>)
 8009df6:	9107      	str	r1, [sp, #28]
 8009df8:	9104      	str	r1, [sp, #16]
 8009dfa:	4909      	ldr	r1, [pc, #36]	; (8009e20 <siprintf+0x3c>)
 8009dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e00:	9105      	str	r1, [sp, #20]
 8009e02:	6800      	ldr	r0, [r0, #0]
 8009e04:	9301      	str	r3, [sp, #4]
 8009e06:	a902      	add	r1, sp, #8
 8009e08:	f001 fd74 	bl	800b8f4 <_svfiprintf_r>
 8009e0c:	9b02      	ldr	r3, [sp, #8]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	701a      	strb	r2, [r3, #0]
 8009e12:	b01c      	add	sp, #112	; 0x70
 8009e14:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e18:	b003      	add	sp, #12
 8009e1a:	4770      	bx	lr
 8009e1c:	20000010 	.word	0x20000010
 8009e20:	ffff0208 	.word	0xffff0208

08009e24 <strcpy>:
 8009e24:	4603      	mov	r3, r0
 8009e26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009e2a:	f803 2b01 	strb.w	r2, [r3], #1
 8009e2e:	2a00      	cmp	r2, #0
 8009e30:	d1f9      	bne.n	8009e26 <strcpy+0x2>
 8009e32:	4770      	bx	lr

08009e34 <__swbuf_r>:
 8009e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e36:	460e      	mov	r6, r1
 8009e38:	4614      	mov	r4, r2
 8009e3a:	4605      	mov	r5, r0
 8009e3c:	b118      	cbz	r0, 8009e46 <__swbuf_r+0x12>
 8009e3e:	6983      	ldr	r3, [r0, #24]
 8009e40:	b90b      	cbnz	r3, 8009e46 <__swbuf_r+0x12>
 8009e42:	f001 f84b 	bl	800aedc <__sinit>
 8009e46:	4b21      	ldr	r3, [pc, #132]	; (8009ecc <__swbuf_r+0x98>)
 8009e48:	429c      	cmp	r4, r3
 8009e4a:	d12b      	bne.n	8009ea4 <__swbuf_r+0x70>
 8009e4c:	686c      	ldr	r4, [r5, #4]
 8009e4e:	69a3      	ldr	r3, [r4, #24]
 8009e50:	60a3      	str	r3, [r4, #8]
 8009e52:	89a3      	ldrh	r3, [r4, #12]
 8009e54:	071a      	lsls	r2, r3, #28
 8009e56:	d52f      	bpl.n	8009eb8 <__swbuf_r+0x84>
 8009e58:	6923      	ldr	r3, [r4, #16]
 8009e5a:	b36b      	cbz	r3, 8009eb8 <__swbuf_r+0x84>
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	6820      	ldr	r0, [r4, #0]
 8009e60:	1ac0      	subs	r0, r0, r3
 8009e62:	6963      	ldr	r3, [r4, #20]
 8009e64:	b2f6      	uxtb	r6, r6
 8009e66:	4283      	cmp	r3, r0
 8009e68:	4637      	mov	r7, r6
 8009e6a:	dc04      	bgt.n	8009e76 <__swbuf_r+0x42>
 8009e6c:	4621      	mov	r1, r4
 8009e6e:	4628      	mov	r0, r5
 8009e70:	f000 ffa0 	bl	800adb4 <_fflush_r>
 8009e74:	bb30      	cbnz	r0, 8009ec4 <__swbuf_r+0x90>
 8009e76:	68a3      	ldr	r3, [r4, #8]
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	60a3      	str	r3, [r4, #8]
 8009e7c:	6823      	ldr	r3, [r4, #0]
 8009e7e:	1c5a      	adds	r2, r3, #1
 8009e80:	6022      	str	r2, [r4, #0]
 8009e82:	701e      	strb	r6, [r3, #0]
 8009e84:	6963      	ldr	r3, [r4, #20]
 8009e86:	3001      	adds	r0, #1
 8009e88:	4283      	cmp	r3, r0
 8009e8a:	d004      	beq.n	8009e96 <__swbuf_r+0x62>
 8009e8c:	89a3      	ldrh	r3, [r4, #12]
 8009e8e:	07db      	lsls	r3, r3, #31
 8009e90:	d506      	bpl.n	8009ea0 <__swbuf_r+0x6c>
 8009e92:	2e0a      	cmp	r6, #10
 8009e94:	d104      	bne.n	8009ea0 <__swbuf_r+0x6c>
 8009e96:	4621      	mov	r1, r4
 8009e98:	4628      	mov	r0, r5
 8009e9a:	f000 ff8b 	bl	800adb4 <_fflush_r>
 8009e9e:	b988      	cbnz	r0, 8009ec4 <__swbuf_r+0x90>
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea4:	4b0a      	ldr	r3, [pc, #40]	; (8009ed0 <__swbuf_r+0x9c>)
 8009ea6:	429c      	cmp	r4, r3
 8009ea8:	d101      	bne.n	8009eae <__swbuf_r+0x7a>
 8009eaa:	68ac      	ldr	r4, [r5, #8]
 8009eac:	e7cf      	b.n	8009e4e <__swbuf_r+0x1a>
 8009eae:	4b09      	ldr	r3, [pc, #36]	; (8009ed4 <__swbuf_r+0xa0>)
 8009eb0:	429c      	cmp	r4, r3
 8009eb2:	bf08      	it	eq
 8009eb4:	68ec      	ldreq	r4, [r5, #12]
 8009eb6:	e7ca      	b.n	8009e4e <__swbuf_r+0x1a>
 8009eb8:	4621      	mov	r1, r4
 8009eba:	4628      	mov	r0, r5
 8009ebc:	f000 f80c 	bl	8009ed8 <__swsetup_r>
 8009ec0:	2800      	cmp	r0, #0
 8009ec2:	d0cb      	beq.n	8009e5c <__swbuf_r+0x28>
 8009ec4:	f04f 37ff 	mov.w	r7, #4294967295
 8009ec8:	e7ea      	b.n	8009ea0 <__swbuf_r+0x6c>
 8009eca:	bf00      	nop
 8009ecc:	08013ebc 	.word	0x08013ebc
 8009ed0:	08013edc 	.word	0x08013edc
 8009ed4:	08013e9c 	.word	0x08013e9c

08009ed8 <__swsetup_r>:
 8009ed8:	4b32      	ldr	r3, [pc, #200]	; (8009fa4 <__swsetup_r+0xcc>)
 8009eda:	b570      	push	{r4, r5, r6, lr}
 8009edc:	681d      	ldr	r5, [r3, #0]
 8009ede:	4606      	mov	r6, r0
 8009ee0:	460c      	mov	r4, r1
 8009ee2:	b125      	cbz	r5, 8009eee <__swsetup_r+0x16>
 8009ee4:	69ab      	ldr	r3, [r5, #24]
 8009ee6:	b913      	cbnz	r3, 8009eee <__swsetup_r+0x16>
 8009ee8:	4628      	mov	r0, r5
 8009eea:	f000 fff7 	bl	800aedc <__sinit>
 8009eee:	4b2e      	ldr	r3, [pc, #184]	; (8009fa8 <__swsetup_r+0xd0>)
 8009ef0:	429c      	cmp	r4, r3
 8009ef2:	d10f      	bne.n	8009f14 <__swsetup_r+0x3c>
 8009ef4:	686c      	ldr	r4, [r5, #4]
 8009ef6:	89a3      	ldrh	r3, [r4, #12]
 8009ef8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009efc:	0719      	lsls	r1, r3, #28
 8009efe:	d42c      	bmi.n	8009f5a <__swsetup_r+0x82>
 8009f00:	06dd      	lsls	r5, r3, #27
 8009f02:	d411      	bmi.n	8009f28 <__swsetup_r+0x50>
 8009f04:	2309      	movs	r3, #9
 8009f06:	6033      	str	r3, [r6, #0]
 8009f08:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009f0c:	81a3      	strh	r3, [r4, #12]
 8009f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f12:	e03e      	b.n	8009f92 <__swsetup_r+0xba>
 8009f14:	4b25      	ldr	r3, [pc, #148]	; (8009fac <__swsetup_r+0xd4>)
 8009f16:	429c      	cmp	r4, r3
 8009f18:	d101      	bne.n	8009f1e <__swsetup_r+0x46>
 8009f1a:	68ac      	ldr	r4, [r5, #8]
 8009f1c:	e7eb      	b.n	8009ef6 <__swsetup_r+0x1e>
 8009f1e:	4b24      	ldr	r3, [pc, #144]	; (8009fb0 <__swsetup_r+0xd8>)
 8009f20:	429c      	cmp	r4, r3
 8009f22:	bf08      	it	eq
 8009f24:	68ec      	ldreq	r4, [r5, #12]
 8009f26:	e7e6      	b.n	8009ef6 <__swsetup_r+0x1e>
 8009f28:	0758      	lsls	r0, r3, #29
 8009f2a:	d512      	bpl.n	8009f52 <__swsetup_r+0x7a>
 8009f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f2e:	b141      	cbz	r1, 8009f42 <__swsetup_r+0x6a>
 8009f30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f34:	4299      	cmp	r1, r3
 8009f36:	d002      	beq.n	8009f3e <__swsetup_r+0x66>
 8009f38:	4630      	mov	r0, r6
 8009f3a:	f7ff f96d 	bl	8009218 <_free_r>
 8009f3e:	2300      	movs	r3, #0
 8009f40:	6363      	str	r3, [r4, #52]	; 0x34
 8009f42:	89a3      	ldrh	r3, [r4, #12]
 8009f44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009f48:	81a3      	strh	r3, [r4, #12]
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	6063      	str	r3, [r4, #4]
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	6023      	str	r3, [r4, #0]
 8009f52:	89a3      	ldrh	r3, [r4, #12]
 8009f54:	f043 0308 	orr.w	r3, r3, #8
 8009f58:	81a3      	strh	r3, [r4, #12]
 8009f5a:	6923      	ldr	r3, [r4, #16]
 8009f5c:	b94b      	cbnz	r3, 8009f72 <__swsetup_r+0x9a>
 8009f5e:	89a3      	ldrh	r3, [r4, #12]
 8009f60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009f68:	d003      	beq.n	8009f72 <__swsetup_r+0x9a>
 8009f6a:	4621      	mov	r1, r4
 8009f6c:	4630      	mov	r0, r6
 8009f6e:	f001 f87f 	bl	800b070 <__smakebuf_r>
 8009f72:	89a0      	ldrh	r0, [r4, #12]
 8009f74:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009f78:	f010 0301 	ands.w	r3, r0, #1
 8009f7c:	d00a      	beq.n	8009f94 <__swsetup_r+0xbc>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	60a3      	str	r3, [r4, #8]
 8009f82:	6963      	ldr	r3, [r4, #20]
 8009f84:	425b      	negs	r3, r3
 8009f86:	61a3      	str	r3, [r4, #24]
 8009f88:	6923      	ldr	r3, [r4, #16]
 8009f8a:	b943      	cbnz	r3, 8009f9e <__swsetup_r+0xc6>
 8009f8c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009f90:	d1ba      	bne.n	8009f08 <__swsetup_r+0x30>
 8009f92:	bd70      	pop	{r4, r5, r6, pc}
 8009f94:	0781      	lsls	r1, r0, #30
 8009f96:	bf58      	it	pl
 8009f98:	6963      	ldrpl	r3, [r4, #20]
 8009f9a:	60a3      	str	r3, [r4, #8]
 8009f9c:	e7f4      	b.n	8009f88 <__swsetup_r+0xb0>
 8009f9e:	2000      	movs	r0, #0
 8009fa0:	e7f7      	b.n	8009f92 <__swsetup_r+0xba>
 8009fa2:	bf00      	nop
 8009fa4:	20000010 	.word	0x20000010
 8009fa8:	08013ebc 	.word	0x08013ebc
 8009fac:	08013edc 	.word	0x08013edc
 8009fb0:	08013e9c 	.word	0x08013e9c

08009fb4 <quorem>:
 8009fb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	6903      	ldr	r3, [r0, #16]
 8009fba:	690c      	ldr	r4, [r1, #16]
 8009fbc:	42a3      	cmp	r3, r4
 8009fbe:	4607      	mov	r7, r0
 8009fc0:	f2c0 8081 	blt.w	800a0c6 <quorem+0x112>
 8009fc4:	3c01      	subs	r4, #1
 8009fc6:	f101 0814 	add.w	r8, r1, #20
 8009fca:	f100 0514 	add.w	r5, r0, #20
 8009fce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fd2:	9301      	str	r3, [sp, #4]
 8009fd4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009fd8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fdc:	3301      	adds	r3, #1
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009fe4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009fe8:	fbb2 f6f3 	udiv	r6, r2, r3
 8009fec:	d331      	bcc.n	800a052 <quorem+0x9e>
 8009fee:	f04f 0e00 	mov.w	lr, #0
 8009ff2:	4640      	mov	r0, r8
 8009ff4:	46ac      	mov	ip, r5
 8009ff6:	46f2      	mov	sl, lr
 8009ff8:	f850 2b04 	ldr.w	r2, [r0], #4
 8009ffc:	b293      	uxth	r3, r2
 8009ffe:	fb06 e303 	mla	r3, r6, r3, lr
 800a002:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a006:	b29b      	uxth	r3, r3
 800a008:	ebaa 0303 	sub.w	r3, sl, r3
 800a00c:	0c12      	lsrs	r2, r2, #16
 800a00e:	f8dc a000 	ldr.w	sl, [ip]
 800a012:	fb06 e202 	mla	r2, r6, r2, lr
 800a016:	fa13 f38a 	uxtah	r3, r3, sl
 800a01a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a01e:	fa1f fa82 	uxth.w	sl, r2
 800a022:	f8dc 2000 	ldr.w	r2, [ip]
 800a026:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800a02a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a02e:	b29b      	uxth	r3, r3
 800a030:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a034:	4581      	cmp	r9, r0
 800a036:	f84c 3b04 	str.w	r3, [ip], #4
 800a03a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a03e:	d2db      	bcs.n	8009ff8 <quorem+0x44>
 800a040:	f855 300b 	ldr.w	r3, [r5, fp]
 800a044:	b92b      	cbnz	r3, 800a052 <quorem+0x9e>
 800a046:	9b01      	ldr	r3, [sp, #4]
 800a048:	3b04      	subs	r3, #4
 800a04a:	429d      	cmp	r5, r3
 800a04c:	461a      	mov	r2, r3
 800a04e:	d32e      	bcc.n	800a0ae <quorem+0xfa>
 800a050:	613c      	str	r4, [r7, #16]
 800a052:	4638      	mov	r0, r7
 800a054:	f001 fae4 	bl	800b620 <__mcmp>
 800a058:	2800      	cmp	r0, #0
 800a05a:	db24      	blt.n	800a0a6 <quorem+0xf2>
 800a05c:	3601      	adds	r6, #1
 800a05e:	4628      	mov	r0, r5
 800a060:	f04f 0c00 	mov.w	ip, #0
 800a064:	f858 2b04 	ldr.w	r2, [r8], #4
 800a068:	f8d0 e000 	ldr.w	lr, [r0]
 800a06c:	b293      	uxth	r3, r2
 800a06e:	ebac 0303 	sub.w	r3, ip, r3
 800a072:	0c12      	lsrs	r2, r2, #16
 800a074:	fa13 f38e 	uxtah	r3, r3, lr
 800a078:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a07c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a080:	b29b      	uxth	r3, r3
 800a082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a086:	45c1      	cmp	r9, r8
 800a088:	f840 3b04 	str.w	r3, [r0], #4
 800a08c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a090:	d2e8      	bcs.n	800a064 <quorem+0xb0>
 800a092:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a096:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a09a:	b922      	cbnz	r2, 800a0a6 <quorem+0xf2>
 800a09c:	3b04      	subs	r3, #4
 800a09e:	429d      	cmp	r5, r3
 800a0a0:	461a      	mov	r2, r3
 800a0a2:	d30a      	bcc.n	800a0ba <quorem+0x106>
 800a0a4:	613c      	str	r4, [r7, #16]
 800a0a6:	4630      	mov	r0, r6
 800a0a8:	b003      	add	sp, #12
 800a0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ae:	6812      	ldr	r2, [r2, #0]
 800a0b0:	3b04      	subs	r3, #4
 800a0b2:	2a00      	cmp	r2, #0
 800a0b4:	d1cc      	bne.n	800a050 <quorem+0x9c>
 800a0b6:	3c01      	subs	r4, #1
 800a0b8:	e7c7      	b.n	800a04a <quorem+0x96>
 800a0ba:	6812      	ldr	r2, [r2, #0]
 800a0bc:	3b04      	subs	r3, #4
 800a0be:	2a00      	cmp	r2, #0
 800a0c0:	d1f0      	bne.n	800a0a4 <quorem+0xf0>
 800a0c2:	3c01      	subs	r4, #1
 800a0c4:	e7eb      	b.n	800a09e <quorem+0xea>
 800a0c6:	2000      	movs	r0, #0
 800a0c8:	e7ee      	b.n	800a0a8 <quorem+0xf4>
 800a0ca:	0000      	movs	r0, r0
 800a0cc:	0000      	movs	r0, r0
	...

0800a0d0 <_dtoa_r>:
 800a0d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0d4:	ed2d 8b02 	vpush	{d8}
 800a0d8:	ec57 6b10 	vmov	r6, r7, d0
 800a0dc:	b095      	sub	sp, #84	; 0x54
 800a0de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a0e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a0e4:	9105      	str	r1, [sp, #20]
 800a0e6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a0ea:	4604      	mov	r4, r0
 800a0ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a0ee:	930f      	str	r3, [sp, #60]	; 0x3c
 800a0f0:	b975      	cbnz	r5, 800a110 <_dtoa_r+0x40>
 800a0f2:	2010      	movs	r0, #16
 800a0f4:	f7ff f878 	bl	80091e8 <malloc>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	6260      	str	r0, [r4, #36]	; 0x24
 800a0fc:	b920      	cbnz	r0, 800a108 <_dtoa_r+0x38>
 800a0fe:	4bb2      	ldr	r3, [pc, #712]	; (800a3c8 <_dtoa_r+0x2f8>)
 800a100:	21ea      	movs	r1, #234	; 0xea
 800a102:	48b2      	ldr	r0, [pc, #712]	; (800a3cc <_dtoa_r+0x2fc>)
 800a104:	f001 fea6 	bl	800be54 <__assert_func>
 800a108:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a10c:	6005      	str	r5, [r0, #0]
 800a10e:	60c5      	str	r5, [r0, #12]
 800a110:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a112:	6819      	ldr	r1, [r3, #0]
 800a114:	b151      	cbz	r1, 800a12c <_dtoa_r+0x5c>
 800a116:	685a      	ldr	r2, [r3, #4]
 800a118:	604a      	str	r2, [r1, #4]
 800a11a:	2301      	movs	r3, #1
 800a11c:	4093      	lsls	r3, r2
 800a11e:	608b      	str	r3, [r1, #8]
 800a120:	4620      	mov	r0, r4
 800a122:	f001 f83f 	bl	800b1a4 <_Bfree>
 800a126:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a128:	2200      	movs	r2, #0
 800a12a:	601a      	str	r2, [r3, #0]
 800a12c:	1e3b      	subs	r3, r7, #0
 800a12e:	bfb9      	ittee	lt
 800a130:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a134:	9303      	strlt	r3, [sp, #12]
 800a136:	2300      	movge	r3, #0
 800a138:	f8c8 3000 	strge.w	r3, [r8]
 800a13c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a140:	4ba3      	ldr	r3, [pc, #652]	; (800a3d0 <_dtoa_r+0x300>)
 800a142:	bfbc      	itt	lt
 800a144:	2201      	movlt	r2, #1
 800a146:	f8c8 2000 	strlt.w	r2, [r8]
 800a14a:	ea33 0309 	bics.w	r3, r3, r9
 800a14e:	d11b      	bne.n	800a188 <_dtoa_r+0xb8>
 800a150:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a152:	f242 730f 	movw	r3, #9999	; 0x270f
 800a156:	6013      	str	r3, [r2, #0]
 800a158:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a15c:	4333      	orrs	r3, r6
 800a15e:	f000 857a 	beq.w	800ac56 <_dtoa_r+0xb86>
 800a162:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a164:	b963      	cbnz	r3, 800a180 <_dtoa_r+0xb0>
 800a166:	4b9b      	ldr	r3, [pc, #620]	; (800a3d4 <_dtoa_r+0x304>)
 800a168:	e024      	b.n	800a1b4 <_dtoa_r+0xe4>
 800a16a:	4b9b      	ldr	r3, [pc, #620]	; (800a3d8 <_dtoa_r+0x308>)
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	3308      	adds	r3, #8
 800a170:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a172:	6013      	str	r3, [r2, #0]
 800a174:	9800      	ldr	r0, [sp, #0]
 800a176:	b015      	add	sp, #84	; 0x54
 800a178:	ecbd 8b02 	vpop	{d8}
 800a17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a180:	4b94      	ldr	r3, [pc, #592]	; (800a3d4 <_dtoa_r+0x304>)
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	3303      	adds	r3, #3
 800a186:	e7f3      	b.n	800a170 <_dtoa_r+0xa0>
 800a188:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a18c:	2200      	movs	r2, #0
 800a18e:	ec51 0b17 	vmov	r0, r1, d7
 800a192:	2300      	movs	r3, #0
 800a194:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a198:	f7f6 fcc6 	bl	8000b28 <__aeabi_dcmpeq>
 800a19c:	4680      	mov	r8, r0
 800a19e:	b158      	cbz	r0, 800a1b8 <_dtoa_r+0xe8>
 800a1a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	6013      	str	r3, [r2, #0]
 800a1a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	f000 8551 	beq.w	800ac50 <_dtoa_r+0xb80>
 800a1ae:	488b      	ldr	r0, [pc, #556]	; (800a3dc <_dtoa_r+0x30c>)
 800a1b0:	6018      	str	r0, [r3, #0]
 800a1b2:	1e43      	subs	r3, r0, #1
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	e7dd      	b.n	800a174 <_dtoa_r+0xa4>
 800a1b8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a1bc:	aa12      	add	r2, sp, #72	; 0x48
 800a1be:	a913      	add	r1, sp, #76	; 0x4c
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f001 fad1 	bl	800b768 <__d2b>
 800a1c6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1ca:	4683      	mov	fp, r0
 800a1cc:	2d00      	cmp	r5, #0
 800a1ce:	d07c      	beq.n	800a2ca <_dtoa_r+0x1fa>
 800a1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1d2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a1d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1da:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a1de:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a1e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a1e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a1ea:	4b7d      	ldr	r3, [pc, #500]	; (800a3e0 <_dtoa_r+0x310>)
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	f7f6 f879 	bl	80002e8 <__aeabi_dsub>
 800a1f6:	a36e      	add	r3, pc, #440	; (adr r3, 800a3b0 <_dtoa_r+0x2e0>)
 800a1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1fc:	f7f6 fa2c 	bl	8000658 <__aeabi_dmul>
 800a200:	a36d      	add	r3, pc, #436	; (adr r3, 800a3b8 <_dtoa_r+0x2e8>)
 800a202:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a206:	f7f6 f871 	bl	80002ec <__adddf3>
 800a20a:	4606      	mov	r6, r0
 800a20c:	4628      	mov	r0, r5
 800a20e:	460f      	mov	r7, r1
 800a210:	f7f6 f9b8 	bl	8000584 <__aeabi_i2d>
 800a214:	a36a      	add	r3, pc, #424	; (adr r3, 800a3c0 <_dtoa_r+0x2f0>)
 800a216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21a:	f7f6 fa1d 	bl	8000658 <__aeabi_dmul>
 800a21e:	4602      	mov	r2, r0
 800a220:	460b      	mov	r3, r1
 800a222:	4630      	mov	r0, r6
 800a224:	4639      	mov	r1, r7
 800a226:	f7f6 f861 	bl	80002ec <__adddf3>
 800a22a:	4606      	mov	r6, r0
 800a22c:	460f      	mov	r7, r1
 800a22e:	f7f6 fcc3 	bl	8000bb8 <__aeabi_d2iz>
 800a232:	2200      	movs	r2, #0
 800a234:	4682      	mov	sl, r0
 800a236:	2300      	movs	r3, #0
 800a238:	4630      	mov	r0, r6
 800a23a:	4639      	mov	r1, r7
 800a23c:	f7f6 fc7e 	bl	8000b3c <__aeabi_dcmplt>
 800a240:	b148      	cbz	r0, 800a256 <_dtoa_r+0x186>
 800a242:	4650      	mov	r0, sl
 800a244:	f7f6 f99e 	bl	8000584 <__aeabi_i2d>
 800a248:	4632      	mov	r2, r6
 800a24a:	463b      	mov	r3, r7
 800a24c:	f7f6 fc6c 	bl	8000b28 <__aeabi_dcmpeq>
 800a250:	b908      	cbnz	r0, 800a256 <_dtoa_r+0x186>
 800a252:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a256:	f1ba 0f16 	cmp.w	sl, #22
 800a25a:	d854      	bhi.n	800a306 <_dtoa_r+0x236>
 800a25c:	4b61      	ldr	r3, [pc, #388]	; (800a3e4 <_dtoa_r+0x314>)
 800a25e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a262:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a266:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a26a:	f7f6 fc67 	bl	8000b3c <__aeabi_dcmplt>
 800a26e:	2800      	cmp	r0, #0
 800a270:	d04b      	beq.n	800a30a <_dtoa_r+0x23a>
 800a272:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a276:	2300      	movs	r3, #0
 800a278:	930e      	str	r3, [sp, #56]	; 0x38
 800a27a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a27c:	1b5d      	subs	r5, r3, r5
 800a27e:	1e6b      	subs	r3, r5, #1
 800a280:	9304      	str	r3, [sp, #16]
 800a282:	bf43      	ittte	mi
 800a284:	2300      	movmi	r3, #0
 800a286:	f1c5 0801 	rsbmi	r8, r5, #1
 800a28a:	9304      	strmi	r3, [sp, #16]
 800a28c:	f04f 0800 	movpl.w	r8, #0
 800a290:	f1ba 0f00 	cmp.w	sl, #0
 800a294:	db3b      	blt.n	800a30e <_dtoa_r+0x23e>
 800a296:	9b04      	ldr	r3, [sp, #16]
 800a298:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a29c:	4453      	add	r3, sl
 800a29e:	9304      	str	r3, [sp, #16]
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	9306      	str	r3, [sp, #24]
 800a2a4:	9b05      	ldr	r3, [sp, #20]
 800a2a6:	2b09      	cmp	r3, #9
 800a2a8:	d869      	bhi.n	800a37e <_dtoa_r+0x2ae>
 800a2aa:	2b05      	cmp	r3, #5
 800a2ac:	bfc4      	itt	gt
 800a2ae:	3b04      	subgt	r3, #4
 800a2b0:	9305      	strgt	r3, [sp, #20]
 800a2b2:	9b05      	ldr	r3, [sp, #20]
 800a2b4:	f1a3 0302 	sub.w	r3, r3, #2
 800a2b8:	bfcc      	ite	gt
 800a2ba:	2500      	movgt	r5, #0
 800a2bc:	2501      	movle	r5, #1
 800a2be:	2b03      	cmp	r3, #3
 800a2c0:	d869      	bhi.n	800a396 <_dtoa_r+0x2c6>
 800a2c2:	e8df f003 	tbb	[pc, r3]
 800a2c6:	4e2c      	.short	0x4e2c
 800a2c8:	5a4c      	.short	0x5a4c
 800a2ca:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a2ce:	441d      	add	r5, r3
 800a2d0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a2d4:	2b20      	cmp	r3, #32
 800a2d6:	bfc1      	itttt	gt
 800a2d8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a2dc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a2e0:	fa09 f303 	lslgt.w	r3, r9, r3
 800a2e4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a2e8:	bfda      	itte	le
 800a2ea:	f1c3 0320 	rsble	r3, r3, #32
 800a2ee:	fa06 f003 	lslle.w	r0, r6, r3
 800a2f2:	4318      	orrgt	r0, r3
 800a2f4:	f7f6 f936 	bl	8000564 <__aeabi_ui2d>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	4606      	mov	r6, r0
 800a2fc:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a300:	3d01      	subs	r5, #1
 800a302:	9310      	str	r3, [sp, #64]	; 0x40
 800a304:	e771      	b.n	800a1ea <_dtoa_r+0x11a>
 800a306:	2301      	movs	r3, #1
 800a308:	e7b6      	b.n	800a278 <_dtoa_r+0x1a8>
 800a30a:	900e      	str	r0, [sp, #56]	; 0x38
 800a30c:	e7b5      	b.n	800a27a <_dtoa_r+0x1aa>
 800a30e:	f1ca 0300 	rsb	r3, sl, #0
 800a312:	9306      	str	r3, [sp, #24]
 800a314:	2300      	movs	r3, #0
 800a316:	eba8 080a 	sub.w	r8, r8, sl
 800a31a:	930d      	str	r3, [sp, #52]	; 0x34
 800a31c:	e7c2      	b.n	800a2a4 <_dtoa_r+0x1d4>
 800a31e:	2300      	movs	r3, #0
 800a320:	9308      	str	r3, [sp, #32]
 800a322:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a324:	2b00      	cmp	r3, #0
 800a326:	dc39      	bgt.n	800a39c <_dtoa_r+0x2cc>
 800a328:	f04f 0901 	mov.w	r9, #1
 800a32c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a330:	464b      	mov	r3, r9
 800a332:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a336:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a338:	2200      	movs	r2, #0
 800a33a:	6042      	str	r2, [r0, #4]
 800a33c:	2204      	movs	r2, #4
 800a33e:	f102 0614 	add.w	r6, r2, #20
 800a342:	429e      	cmp	r6, r3
 800a344:	6841      	ldr	r1, [r0, #4]
 800a346:	d92f      	bls.n	800a3a8 <_dtoa_r+0x2d8>
 800a348:	4620      	mov	r0, r4
 800a34a:	f000 feeb 	bl	800b124 <_Balloc>
 800a34e:	9000      	str	r0, [sp, #0]
 800a350:	2800      	cmp	r0, #0
 800a352:	d14b      	bne.n	800a3ec <_dtoa_r+0x31c>
 800a354:	4b24      	ldr	r3, [pc, #144]	; (800a3e8 <_dtoa_r+0x318>)
 800a356:	4602      	mov	r2, r0
 800a358:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a35c:	e6d1      	b.n	800a102 <_dtoa_r+0x32>
 800a35e:	2301      	movs	r3, #1
 800a360:	e7de      	b.n	800a320 <_dtoa_r+0x250>
 800a362:	2300      	movs	r3, #0
 800a364:	9308      	str	r3, [sp, #32]
 800a366:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a368:	eb0a 0903 	add.w	r9, sl, r3
 800a36c:	f109 0301 	add.w	r3, r9, #1
 800a370:	2b01      	cmp	r3, #1
 800a372:	9301      	str	r3, [sp, #4]
 800a374:	bfb8      	it	lt
 800a376:	2301      	movlt	r3, #1
 800a378:	e7dd      	b.n	800a336 <_dtoa_r+0x266>
 800a37a:	2301      	movs	r3, #1
 800a37c:	e7f2      	b.n	800a364 <_dtoa_r+0x294>
 800a37e:	2501      	movs	r5, #1
 800a380:	2300      	movs	r3, #0
 800a382:	9305      	str	r3, [sp, #20]
 800a384:	9508      	str	r5, [sp, #32]
 800a386:	f04f 39ff 	mov.w	r9, #4294967295
 800a38a:	2200      	movs	r2, #0
 800a38c:	f8cd 9004 	str.w	r9, [sp, #4]
 800a390:	2312      	movs	r3, #18
 800a392:	9209      	str	r2, [sp, #36]	; 0x24
 800a394:	e7cf      	b.n	800a336 <_dtoa_r+0x266>
 800a396:	2301      	movs	r3, #1
 800a398:	9308      	str	r3, [sp, #32]
 800a39a:	e7f4      	b.n	800a386 <_dtoa_r+0x2b6>
 800a39c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a3a0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a3a4:	464b      	mov	r3, r9
 800a3a6:	e7c6      	b.n	800a336 <_dtoa_r+0x266>
 800a3a8:	3101      	adds	r1, #1
 800a3aa:	6041      	str	r1, [r0, #4]
 800a3ac:	0052      	lsls	r2, r2, #1
 800a3ae:	e7c6      	b.n	800a33e <_dtoa_r+0x26e>
 800a3b0:	636f4361 	.word	0x636f4361
 800a3b4:	3fd287a7 	.word	0x3fd287a7
 800a3b8:	8b60c8b3 	.word	0x8b60c8b3
 800a3bc:	3fc68a28 	.word	0x3fc68a28
 800a3c0:	509f79fb 	.word	0x509f79fb
 800a3c4:	3fd34413 	.word	0x3fd34413
 800a3c8:	08013e15 	.word	0x08013e15
 800a3cc:	08013e2c 	.word	0x08013e2c
 800a3d0:	7ff00000 	.word	0x7ff00000
 800a3d4:	08013e11 	.word	0x08013e11
 800a3d8:	08013e08 	.word	0x08013e08
 800a3dc:	08013de5 	.word	0x08013de5
 800a3e0:	3ff80000 	.word	0x3ff80000
 800a3e4:	08013f88 	.word	0x08013f88
 800a3e8:	08013e8b 	.word	0x08013e8b
 800a3ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3ee:	9a00      	ldr	r2, [sp, #0]
 800a3f0:	601a      	str	r2, [r3, #0]
 800a3f2:	9b01      	ldr	r3, [sp, #4]
 800a3f4:	2b0e      	cmp	r3, #14
 800a3f6:	f200 80ad 	bhi.w	800a554 <_dtoa_r+0x484>
 800a3fa:	2d00      	cmp	r5, #0
 800a3fc:	f000 80aa 	beq.w	800a554 <_dtoa_r+0x484>
 800a400:	f1ba 0f00 	cmp.w	sl, #0
 800a404:	dd36      	ble.n	800a474 <_dtoa_r+0x3a4>
 800a406:	4ac3      	ldr	r2, [pc, #780]	; (800a714 <_dtoa_r+0x644>)
 800a408:	f00a 030f 	and.w	r3, sl, #15
 800a40c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a410:	ed93 7b00 	vldr	d7, [r3]
 800a414:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a418:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a41c:	eeb0 8a47 	vmov.f32	s16, s14
 800a420:	eef0 8a67 	vmov.f32	s17, s15
 800a424:	d016      	beq.n	800a454 <_dtoa_r+0x384>
 800a426:	4bbc      	ldr	r3, [pc, #752]	; (800a718 <_dtoa_r+0x648>)
 800a428:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a42c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a430:	f7f6 fa3c 	bl	80008ac <__aeabi_ddiv>
 800a434:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a438:	f007 070f 	and.w	r7, r7, #15
 800a43c:	2503      	movs	r5, #3
 800a43e:	4eb6      	ldr	r6, [pc, #728]	; (800a718 <_dtoa_r+0x648>)
 800a440:	b957      	cbnz	r7, 800a458 <_dtoa_r+0x388>
 800a442:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a446:	ec53 2b18 	vmov	r2, r3, d8
 800a44a:	f7f6 fa2f 	bl	80008ac <__aeabi_ddiv>
 800a44e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a452:	e029      	b.n	800a4a8 <_dtoa_r+0x3d8>
 800a454:	2502      	movs	r5, #2
 800a456:	e7f2      	b.n	800a43e <_dtoa_r+0x36e>
 800a458:	07f9      	lsls	r1, r7, #31
 800a45a:	d508      	bpl.n	800a46e <_dtoa_r+0x39e>
 800a45c:	ec51 0b18 	vmov	r0, r1, d8
 800a460:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a464:	f7f6 f8f8 	bl	8000658 <__aeabi_dmul>
 800a468:	ec41 0b18 	vmov	d8, r0, r1
 800a46c:	3501      	adds	r5, #1
 800a46e:	107f      	asrs	r7, r7, #1
 800a470:	3608      	adds	r6, #8
 800a472:	e7e5      	b.n	800a440 <_dtoa_r+0x370>
 800a474:	f000 80a6 	beq.w	800a5c4 <_dtoa_r+0x4f4>
 800a478:	f1ca 0600 	rsb	r6, sl, #0
 800a47c:	4ba5      	ldr	r3, [pc, #660]	; (800a714 <_dtoa_r+0x644>)
 800a47e:	4fa6      	ldr	r7, [pc, #664]	; (800a718 <_dtoa_r+0x648>)
 800a480:	f006 020f 	and.w	r2, r6, #15
 800a484:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a48c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a490:	f7f6 f8e2 	bl	8000658 <__aeabi_dmul>
 800a494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a498:	1136      	asrs	r6, r6, #4
 800a49a:	2300      	movs	r3, #0
 800a49c:	2502      	movs	r5, #2
 800a49e:	2e00      	cmp	r6, #0
 800a4a0:	f040 8085 	bne.w	800a5ae <_dtoa_r+0x4de>
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d1d2      	bne.n	800a44e <_dtoa_r+0x37e>
 800a4a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	f000 808c 	beq.w	800a5c8 <_dtoa_r+0x4f8>
 800a4b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4b4:	4b99      	ldr	r3, [pc, #612]	; (800a71c <_dtoa_r+0x64c>)
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	4630      	mov	r0, r6
 800a4ba:	4639      	mov	r1, r7
 800a4bc:	f7f6 fb3e 	bl	8000b3c <__aeabi_dcmplt>
 800a4c0:	2800      	cmp	r0, #0
 800a4c2:	f000 8081 	beq.w	800a5c8 <_dtoa_r+0x4f8>
 800a4c6:	9b01      	ldr	r3, [sp, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d07d      	beq.n	800a5c8 <_dtoa_r+0x4f8>
 800a4cc:	f1b9 0f00 	cmp.w	r9, #0
 800a4d0:	dd3c      	ble.n	800a54c <_dtoa_r+0x47c>
 800a4d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a4d6:	9307      	str	r3, [sp, #28]
 800a4d8:	2200      	movs	r2, #0
 800a4da:	4b91      	ldr	r3, [pc, #580]	; (800a720 <_dtoa_r+0x650>)
 800a4dc:	4630      	mov	r0, r6
 800a4de:	4639      	mov	r1, r7
 800a4e0:	f7f6 f8ba 	bl	8000658 <__aeabi_dmul>
 800a4e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4e8:	3501      	adds	r5, #1
 800a4ea:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a4ee:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a4f2:	4628      	mov	r0, r5
 800a4f4:	f7f6 f846 	bl	8000584 <__aeabi_i2d>
 800a4f8:	4632      	mov	r2, r6
 800a4fa:	463b      	mov	r3, r7
 800a4fc:	f7f6 f8ac 	bl	8000658 <__aeabi_dmul>
 800a500:	4b88      	ldr	r3, [pc, #544]	; (800a724 <_dtoa_r+0x654>)
 800a502:	2200      	movs	r2, #0
 800a504:	f7f5 fef2 	bl	80002ec <__adddf3>
 800a508:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a50c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a510:	9303      	str	r3, [sp, #12]
 800a512:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a514:	2b00      	cmp	r3, #0
 800a516:	d15c      	bne.n	800a5d2 <_dtoa_r+0x502>
 800a518:	4b83      	ldr	r3, [pc, #524]	; (800a728 <_dtoa_r+0x658>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	4630      	mov	r0, r6
 800a51e:	4639      	mov	r1, r7
 800a520:	f7f5 fee2 	bl	80002e8 <__aeabi_dsub>
 800a524:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a528:	4606      	mov	r6, r0
 800a52a:	460f      	mov	r7, r1
 800a52c:	f7f6 fb24 	bl	8000b78 <__aeabi_dcmpgt>
 800a530:	2800      	cmp	r0, #0
 800a532:	f040 8296 	bne.w	800aa62 <_dtoa_r+0x992>
 800a536:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a53a:	4630      	mov	r0, r6
 800a53c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a540:	4639      	mov	r1, r7
 800a542:	f7f6 fafb 	bl	8000b3c <__aeabi_dcmplt>
 800a546:	2800      	cmp	r0, #0
 800a548:	f040 8288 	bne.w	800aa5c <_dtoa_r+0x98c>
 800a54c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a550:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a554:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a556:	2b00      	cmp	r3, #0
 800a558:	f2c0 8158 	blt.w	800a80c <_dtoa_r+0x73c>
 800a55c:	f1ba 0f0e 	cmp.w	sl, #14
 800a560:	f300 8154 	bgt.w	800a80c <_dtoa_r+0x73c>
 800a564:	4b6b      	ldr	r3, [pc, #428]	; (800a714 <_dtoa_r+0x644>)
 800a566:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a56a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a570:	2b00      	cmp	r3, #0
 800a572:	f280 80e3 	bge.w	800a73c <_dtoa_r+0x66c>
 800a576:	9b01      	ldr	r3, [sp, #4]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	f300 80df 	bgt.w	800a73c <_dtoa_r+0x66c>
 800a57e:	f040 826d 	bne.w	800aa5c <_dtoa_r+0x98c>
 800a582:	4b69      	ldr	r3, [pc, #420]	; (800a728 <_dtoa_r+0x658>)
 800a584:	2200      	movs	r2, #0
 800a586:	4640      	mov	r0, r8
 800a588:	4649      	mov	r1, r9
 800a58a:	f7f6 f865 	bl	8000658 <__aeabi_dmul>
 800a58e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a592:	f7f6 fae7 	bl	8000b64 <__aeabi_dcmpge>
 800a596:	9e01      	ldr	r6, [sp, #4]
 800a598:	4637      	mov	r7, r6
 800a59a:	2800      	cmp	r0, #0
 800a59c:	f040 8243 	bne.w	800aa26 <_dtoa_r+0x956>
 800a5a0:	9d00      	ldr	r5, [sp, #0]
 800a5a2:	2331      	movs	r3, #49	; 0x31
 800a5a4:	f805 3b01 	strb.w	r3, [r5], #1
 800a5a8:	f10a 0a01 	add.w	sl, sl, #1
 800a5ac:	e23f      	b.n	800aa2e <_dtoa_r+0x95e>
 800a5ae:	07f2      	lsls	r2, r6, #31
 800a5b0:	d505      	bpl.n	800a5be <_dtoa_r+0x4ee>
 800a5b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5b6:	f7f6 f84f 	bl	8000658 <__aeabi_dmul>
 800a5ba:	3501      	adds	r5, #1
 800a5bc:	2301      	movs	r3, #1
 800a5be:	1076      	asrs	r6, r6, #1
 800a5c0:	3708      	adds	r7, #8
 800a5c2:	e76c      	b.n	800a49e <_dtoa_r+0x3ce>
 800a5c4:	2502      	movs	r5, #2
 800a5c6:	e76f      	b.n	800a4a8 <_dtoa_r+0x3d8>
 800a5c8:	9b01      	ldr	r3, [sp, #4]
 800a5ca:	f8cd a01c 	str.w	sl, [sp, #28]
 800a5ce:	930c      	str	r3, [sp, #48]	; 0x30
 800a5d0:	e78d      	b.n	800a4ee <_dtoa_r+0x41e>
 800a5d2:	9900      	ldr	r1, [sp, #0]
 800a5d4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a5d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a5d8:	4b4e      	ldr	r3, [pc, #312]	; (800a714 <_dtoa_r+0x644>)
 800a5da:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5de:	4401      	add	r1, r0
 800a5e0:	9102      	str	r1, [sp, #8]
 800a5e2:	9908      	ldr	r1, [sp, #32]
 800a5e4:	eeb0 8a47 	vmov.f32	s16, s14
 800a5e8:	eef0 8a67 	vmov.f32	s17, s15
 800a5ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a5f0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5f4:	2900      	cmp	r1, #0
 800a5f6:	d045      	beq.n	800a684 <_dtoa_r+0x5b4>
 800a5f8:	494c      	ldr	r1, [pc, #304]	; (800a72c <_dtoa_r+0x65c>)
 800a5fa:	2000      	movs	r0, #0
 800a5fc:	f7f6 f956 	bl	80008ac <__aeabi_ddiv>
 800a600:	ec53 2b18 	vmov	r2, r3, d8
 800a604:	f7f5 fe70 	bl	80002e8 <__aeabi_dsub>
 800a608:	9d00      	ldr	r5, [sp, #0]
 800a60a:	ec41 0b18 	vmov	d8, r0, r1
 800a60e:	4639      	mov	r1, r7
 800a610:	4630      	mov	r0, r6
 800a612:	f7f6 fad1 	bl	8000bb8 <__aeabi_d2iz>
 800a616:	900c      	str	r0, [sp, #48]	; 0x30
 800a618:	f7f5 ffb4 	bl	8000584 <__aeabi_i2d>
 800a61c:	4602      	mov	r2, r0
 800a61e:	460b      	mov	r3, r1
 800a620:	4630      	mov	r0, r6
 800a622:	4639      	mov	r1, r7
 800a624:	f7f5 fe60 	bl	80002e8 <__aeabi_dsub>
 800a628:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a62a:	3330      	adds	r3, #48	; 0x30
 800a62c:	f805 3b01 	strb.w	r3, [r5], #1
 800a630:	ec53 2b18 	vmov	r2, r3, d8
 800a634:	4606      	mov	r6, r0
 800a636:	460f      	mov	r7, r1
 800a638:	f7f6 fa80 	bl	8000b3c <__aeabi_dcmplt>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d165      	bne.n	800a70c <_dtoa_r+0x63c>
 800a640:	4632      	mov	r2, r6
 800a642:	463b      	mov	r3, r7
 800a644:	4935      	ldr	r1, [pc, #212]	; (800a71c <_dtoa_r+0x64c>)
 800a646:	2000      	movs	r0, #0
 800a648:	f7f5 fe4e 	bl	80002e8 <__aeabi_dsub>
 800a64c:	ec53 2b18 	vmov	r2, r3, d8
 800a650:	f7f6 fa74 	bl	8000b3c <__aeabi_dcmplt>
 800a654:	2800      	cmp	r0, #0
 800a656:	f040 80b9 	bne.w	800a7cc <_dtoa_r+0x6fc>
 800a65a:	9b02      	ldr	r3, [sp, #8]
 800a65c:	429d      	cmp	r5, r3
 800a65e:	f43f af75 	beq.w	800a54c <_dtoa_r+0x47c>
 800a662:	4b2f      	ldr	r3, [pc, #188]	; (800a720 <_dtoa_r+0x650>)
 800a664:	ec51 0b18 	vmov	r0, r1, d8
 800a668:	2200      	movs	r2, #0
 800a66a:	f7f5 fff5 	bl	8000658 <__aeabi_dmul>
 800a66e:	4b2c      	ldr	r3, [pc, #176]	; (800a720 <_dtoa_r+0x650>)
 800a670:	ec41 0b18 	vmov	d8, r0, r1
 800a674:	2200      	movs	r2, #0
 800a676:	4630      	mov	r0, r6
 800a678:	4639      	mov	r1, r7
 800a67a:	f7f5 ffed 	bl	8000658 <__aeabi_dmul>
 800a67e:	4606      	mov	r6, r0
 800a680:	460f      	mov	r7, r1
 800a682:	e7c4      	b.n	800a60e <_dtoa_r+0x53e>
 800a684:	ec51 0b17 	vmov	r0, r1, d7
 800a688:	f7f5 ffe6 	bl	8000658 <__aeabi_dmul>
 800a68c:	9b02      	ldr	r3, [sp, #8]
 800a68e:	9d00      	ldr	r5, [sp, #0]
 800a690:	930c      	str	r3, [sp, #48]	; 0x30
 800a692:	ec41 0b18 	vmov	d8, r0, r1
 800a696:	4639      	mov	r1, r7
 800a698:	4630      	mov	r0, r6
 800a69a:	f7f6 fa8d 	bl	8000bb8 <__aeabi_d2iz>
 800a69e:	9011      	str	r0, [sp, #68]	; 0x44
 800a6a0:	f7f5 ff70 	bl	8000584 <__aeabi_i2d>
 800a6a4:	4602      	mov	r2, r0
 800a6a6:	460b      	mov	r3, r1
 800a6a8:	4630      	mov	r0, r6
 800a6aa:	4639      	mov	r1, r7
 800a6ac:	f7f5 fe1c 	bl	80002e8 <__aeabi_dsub>
 800a6b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6b2:	3330      	adds	r3, #48	; 0x30
 800a6b4:	f805 3b01 	strb.w	r3, [r5], #1
 800a6b8:	9b02      	ldr	r3, [sp, #8]
 800a6ba:	429d      	cmp	r5, r3
 800a6bc:	4606      	mov	r6, r0
 800a6be:	460f      	mov	r7, r1
 800a6c0:	f04f 0200 	mov.w	r2, #0
 800a6c4:	d134      	bne.n	800a730 <_dtoa_r+0x660>
 800a6c6:	4b19      	ldr	r3, [pc, #100]	; (800a72c <_dtoa_r+0x65c>)
 800a6c8:	ec51 0b18 	vmov	r0, r1, d8
 800a6cc:	f7f5 fe0e 	bl	80002ec <__adddf3>
 800a6d0:	4602      	mov	r2, r0
 800a6d2:	460b      	mov	r3, r1
 800a6d4:	4630      	mov	r0, r6
 800a6d6:	4639      	mov	r1, r7
 800a6d8:	f7f6 fa4e 	bl	8000b78 <__aeabi_dcmpgt>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d175      	bne.n	800a7cc <_dtoa_r+0x6fc>
 800a6e0:	ec53 2b18 	vmov	r2, r3, d8
 800a6e4:	4911      	ldr	r1, [pc, #68]	; (800a72c <_dtoa_r+0x65c>)
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	f7f5 fdfe 	bl	80002e8 <__aeabi_dsub>
 800a6ec:	4602      	mov	r2, r0
 800a6ee:	460b      	mov	r3, r1
 800a6f0:	4630      	mov	r0, r6
 800a6f2:	4639      	mov	r1, r7
 800a6f4:	f7f6 fa22 	bl	8000b3c <__aeabi_dcmplt>
 800a6f8:	2800      	cmp	r0, #0
 800a6fa:	f43f af27 	beq.w	800a54c <_dtoa_r+0x47c>
 800a6fe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a700:	1e6b      	subs	r3, r5, #1
 800a702:	930c      	str	r3, [sp, #48]	; 0x30
 800a704:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a708:	2b30      	cmp	r3, #48	; 0x30
 800a70a:	d0f8      	beq.n	800a6fe <_dtoa_r+0x62e>
 800a70c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a710:	e04a      	b.n	800a7a8 <_dtoa_r+0x6d8>
 800a712:	bf00      	nop
 800a714:	08013f88 	.word	0x08013f88
 800a718:	08013f60 	.word	0x08013f60
 800a71c:	3ff00000 	.word	0x3ff00000
 800a720:	40240000 	.word	0x40240000
 800a724:	401c0000 	.word	0x401c0000
 800a728:	40140000 	.word	0x40140000
 800a72c:	3fe00000 	.word	0x3fe00000
 800a730:	4baf      	ldr	r3, [pc, #700]	; (800a9f0 <_dtoa_r+0x920>)
 800a732:	f7f5 ff91 	bl	8000658 <__aeabi_dmul>
 800a736:	4606      	mov	r6, r0
 800a738:	460f      	mov	r7, r1
 800a73a:	e7ac      	b.n	800a696 <_dtoa_r+0x5c6>
 800a73c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a740:	9d00      	ldr	r5, [sp, #0]
 800a742:	4642      	mov	r2, r8
 800a744:	464b      	mov	r3, r9
 800a746:	4630      	mov	r0, r6
 800a748:	4639      	mov	r1, r7
 800a74a:	f7f6 f8af 	bl	80008ac <__aeabi_ddiv>
 800a74e:	f7f6 fa33 	bl	8000bb8 <__aeabi_d2iz>
 800a752:	9002      	str	r0, [sp, #8]
 800a754:	f7f5 ff16 	bl	8000584 <__aeabi_i2d>
 800a758:	4642      	mov	r2, r8
 800a75a:	464b      	mov	r3, r9
 800a75c:	f7f5 ff7c 	bl	8000658 <__aeabi_dmul>
 800a760:	4602      	mov	r2, r0
 800a762:	460b      	mov	r3, r1
 800a764:	4630      	mov	r0, r6
 800a766:	4639      	mov	r1, r7
 800a768:	f7f5 fdbe 	bl	80002e8 <__aeabi_dsub>
 800a76c:	9e02      	ldr	r6, [sp, #8]
 800a76e:	9f01      	ldr	r7, [sp, #4]
 800a770:	3630      	adds	r6, #48	; 0x30
 800a772:	f805 6b01 	strb.w	r6, [r5], #1
 800a776:	9e00      	ldr	r6, [sp, #0]
 800a778:	1bae      	subs	r6, r5, r6
 800a77a:	42b7      	cmp	r7, r6
 800a77c:	4602      	mov	r2, r0
 800a77e:	460b      	mov	r3, r1
 800a780:	d137      	bne.n	800a7f2 <_dtoa_r+0x722>
 800a782:	f7f5 fdb3 	bl	80002ec <__adddf3>
 800a786:	4642      	mov	r2, r8
 800a788:	464b      	mov	r3, r9
 800a78a:	4606      	mov	r6, r0
 800a78c:	460f      	mov	r7, r1
 800a78e:	f7f6 f9f3 	bl	8000b78 <__aeabi_dcmpgt>
 800a792:	b9c8      	cbnz	r0, 800a7c8 <_dtoa_r+0x6f8>
 800a794:	4642      	mov	r2, r8
 800a796:	464b      	mov	r3, r9
 800a798:	4630      	mov	r0, r6
 800a79a:	4639      	mov	r1, r7
 800a79c:	f7f6 f9c4 	bl	8000b28 <__aeabi_dcmpeq>
 800a7a0:	b110      	cbz	r0, 800a7a8 <_dtoa_r+0x6d8>
 800a7a2:	9b02      	ldr	r3, [sp, #8]
 800a7a4:	07d9      	lsls	r1, r3, #31
 800a7a6:	d40f      	bmi.n	800a7c8 <_dtoa_r+0x6f8>
 800a7a8:	4620      	mov	r0, r4
 800a7aa:	4659      	mov	r1, fp
 800a7ac:	f000 fcfa 	bl	800b1a4 <_Bfree>
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	702b      	strb	r3, [r5, #0]
 800a7b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7b6:	f10a 0001 	add.w	r0, sl, #1
 800a7ba:	6018      	str	r0, [r3, #0]
 800a7bc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	f43f acd8 	beq.w	800a174 <_dtoa_r+0xa4>
 800a7c4:	601d      	str	r5, [r3, #0]
 800a7c6:	e4d5      	b.n	800a174 <_dtoa_r+0xa4>
 800a7c8:	f8cd a01c 	str.w	sl, [sp, #28]
 800a7cc:	462b      	mov	r3, r5
 800a7ce:	461d      	mov	r5, r3
 800a7d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7d4:	2a39      	cmp	r2, #57	; 0x39
 800a7d6:	d108      	bne.n	800a7ea <_dtoa_r+0x71a>
 800a7d8:	9a00      	ldr	r2, [sp, #0]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d1f7      	bne.n	800a7ce <_dtoa_r+0x6fe>
 800a7de:	9a07      	ldr	r2, [sp, #28]
 800a7e0:	9900      	ldr	r1, [sp, #0]
 800a7e2:	3201      	adds	r2, #1
 800a7e4:	9207      	str	r2, [sp, #28]
 800a7e6:	2230      	movs	r2, #48	; 0x30
 800a7e8:	700a      	strb	r2, [r1, #0]
 800a7ea:	781a      	ldrb	r2, [r3, #0]
 800a7ec:	3201      	adds	r2, #1
 800a7ee:	701a      	strb	r2, [r3, #0]
 800a7f0:	e78c      	b.n	800a70c <_dtoa_r+0x63c>
 800a7f2:	4b7f      	ldr	r3, [pc, #508]	; (800a9f0 <_dtoa_r+0x920>)
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	f7f5 ff2f 	bl	8000658 <__aeabi_dmul>
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	4606      	mov	r6, r0
 800a800:	460f      	mov	r7, r1
 800a802:	f7f6 f991 	bl	8000b28 <__aeabi_dcmpeq>
 800a806:	2800      	cmp	r0, #0
 800a808:	d09b      	beq.n	800a742 <_dtoa_r+0x672>
 800a80a:	e7cd      	b.n	800a7a8 <_dtoa_r+0x6d8>
 800a80c:	9a08      	ldr	r2, [sp, #32]
 800a80e:	2a00      	cmp	r2, #0
 800a810:	f000 80c4 	beq.w	800a99c <_dtoa_r+0x8cc>
 800a814:	9a05      	ldr	r2, [sp, #20]
 800a816:	2a01      	cmp	r2, #1
 800a818:	f300 80a8 	bgt.w	800a96c <_dtoa_r+0x89c>
 800a81c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a81e:	2a00      	cmp	r2, #0
 800a820:	f000 80a0 	beq.w	800a964 <_dtoa_r+0x894>
 800a824:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a828:	9e06      	ldr	r6, [sp, #24]
 800a82a:	4645      	mov	r5, r8
 800a82c:	9a04      	ldr	r2, [sp, #16]
 800a82e:	2101      	movs	r1, #1
 800a830:	441a      	add	r2, r3
 800a832:	4620      	mov	r0, r4
 800a834:	4498      	add	r8, r3
 800a836:	9204      	str	r2, [sp, #16]
 800a838:	f000 fd70 	bl	800b31c <__i2b>
 800a83c:	4607      	mov	r7, r0
 800a83e:	2d00      	cmp	r5, #0
 800a840:	dd0b      	ble.n	800a85a <_dtoa_r+0x78a>
 800a842:	9b04      	ldr	r3, [sp, #16]
 800a844:	2b00      	cmp	r3, #0
 800a846:	dd08      	ble.n	800a85a <_dtoa_r+0x78a>
 800a848:	42ab      	cmp	r3, r5
 800a84a:	9a04      	ldr	r2, [sp, #16]
 800a84c:	bfa8      	it	ge
 800a84e:	462b      	movge	r3, r5
 800a850:	eba8 0803 	sub.w	r8, r8, r3
 800a854:	1aed      	subs	r5, r5, r3
 800a856:	1ad3      	subs	r3, r2, r3
 800a858:	9304      	str	r3, [sp, #16]
 800a85a:	9b06      	ldr	r3, [sp, #24]
 800a85c:	b1fb      	cbz	r3, 800a89e <_dtoa_r+0x7ce>
 800a85e:	9b08      	ldr	r3, [sp, #32]
 800a860:	2b00      	cmp	r3, #0
 800a862:	f000 809f 	beq.w	800a9a4 <_dtoa_r+0x8d4>
 800a866:	2e00      	cmp	r6, #0
 800a868:	dd11      	ble.n	800a88e <_dtoa_r+0x7be>
 800a86a:	4639      	mov	r1, r7
 800a86c:	4632      	mov	r2, r6
 800a86e:	4620      	mov	r0, r4
 800a870:	f000 fe10 	bl	800b494 <__pow5mult>
 800a874:	465a      	mov	r2, fp
 800a876:	4601      	mov	r1, r0
 800a878:	4607      	mov	r7, r0
 800a87a:	4620      	mov	r0, r4
 800a87c:	f000 fd64 	bl	800b348 <__multiply>
 800a880:	4659      	mov	r1, fp
 800a882:	9007      	str	r0, [sp, #28]
 800a884:	4620      	mov	r0, r4
 800a886:	f000 fc8d 	bl	800b1a4 <_Bfree>
 800a88a:	9b07      	ldr	r3, [sp, #28]
 800a88c:	469b      	mov	fp, r3
 800a88e:	9b06      	ldr	r3, [sp, #24]
 800a890:	1b9a      	subs	r2, r3, r6
 800a892:	d004      	beq.n	800a89e <_dtoa_r+0x7ce>
 800a894:	4659      	mov	r1, fp
 800a896:	4620      	mov	r0, r4
 800a898:	f000 fdfc 	bl	800b494 <__pow5mult>
 800a89c:	4683      	mov	fp, r0
 800a89e:	2101      	movs	r1, #1
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f000 fd3b 	bl	800b31c <__i2b>
 800a8a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	dd7c      	ble.n	800a9a8 <_dtoa_r+0x8d8>
 800a8ae:	461a      	mov	r2, r3
 800a8b0:	4601      	mov	r1, r0
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 fdee 	bl	800b494 <__pow5mult>
 800a8b8:	9b05      	ldr	r3, [sp, #20]
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	4606      	mov	r6, r0
 800a8be:	dd76      	ble.n	800a9ae <_dtoa_r+0x8de>
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	9306      	str	r3, [sp, #24]
 800a8c4:	6933      	ldr	r3, [r6, #16]
 800a8c6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a8ca:	6918      	ldr	r0, [r3, #16]
 800a8cc:	f000 fcd6 	bl	800b27c <__hi0bits>
 800a8d0:	f1c0 0020 	rsb	r0, r0, #32
 800a8d4:	9b04      	ldr	r3, [sp, #16]
 800a8d6:	4418      	add	r0, r3
 800a8d8:	f010 001f 	ands.w	r0, r0, #31
 800a8dc:	f000 8086 	beq.w	800a9ec <_dtoa_r+0x91c>
 800a8e0:	f1c0 0320 	rsb	r3, r0, #32
 800a8e4:	2b04      	cmp	r3, #4
 800a8e6:	dd7f      	ble.n	800a9e8 <_dtoa_r+0x918>
 800a8e8:	f1c0 001c 	rsb	r0, r0, #28
 800a8ec:	9b04      	ldr	r3, [sp, #16]
 800a8ee:	4403      	add	r3, r0
 800a8f0:	4480      	add	r8, r0
 800a8f2:	4405      	add	r5, r0
 800a8f4:	9304      	str	r3, [sp, #16]
 800a8f6:	f1b8 0f00 	cmp.w	r8, #0
 800a8fa:	dd05      	ble.n	800a908 <_dtoa_r+0x838>
 800a8fc:	4659      	mov	r1, fp
 800a8fe:	4642      	mov	r2, r8
 800a900:	4620      	mov	r0, r4
 800a902:	f000 fe21 	bl	800b548 <__lshift>
 800a906:	4683      	mov	fp, r0
 800a908:	9b04      	ldr	r3, [sp, #16]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	dd05      	ble.n	800a91a <_dtoa_r+0x84a>
 800a90e:	4631      	mov	r1, r6
 800a910:	461a      	mov	r2, r3
 800a912:	4620      	mov	r0, r4
 800a914:	f000 fe18 	bl	800b548 <__lshift>
 800a918:	4606      	mov	r6, r0
 800a91a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d069      	beq.n	800a9f4 <_dtoa_r+0x924>
 800a920:	4631      	mov	r1, r6
 800a922:	4658      	mov	r0, fp
 800a924:	f000 fe7c 	bl	800b620 <__mcmp>
 800a928:	2800      	cmp	r0, #0
 800a92a:	da63      	bge.n	800a9f4 <_dtoa_r+0x924>
 800a92c:	2300      	movs	r3, #0
 800a92e:	4659      	mov	r1, fp
 800a930:	220a      	movs	r2, #10
 800a932:	4620      	mov	r0, r4
 800a934:	f000 fc58 	bl	800b1e8 <__multadd>
 800a938:	9b08      	ldr	r3, [sp, #32]
 800a93a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a93e:	4683      	mov	fp, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	f000 818f 	beq.w	800ac64 <_dtoa_r+0xb94>
 800a946:	4639      	mov	r1, r7
 800a948:	2300      	movs	r3, #0
 800a94a:	220a      	movs	r2, #10
 800a94c:	4620      	mov	r0, r4
 800a94e:	f000 fc4b 	bl	800b1e8 <__multadd>
 800a952:	f1b9 0f00 	cmp.w	r9, #0
 800a956:	4607      	mov	r7, r0
 800a958:	f300 808e 	bgt.w	800aa78 <_dtoa_r+0x9a8>
 800a95c:	9b05      	ldr	r3, [sp, #20]
 800a95e:	2b02      	cmp	r3, #2
 800a960:	dc50      	bgt.n	800aa04 <_dtoa_r+0x934>
 800a962:	e089      	b.n	800aa78 <_dtoa_r+0x9a8>
 800a964:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a966:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a96a:	e75d      	b.n	800a828 <_dtoa_r+0x758>
 800a96c:	9b01      	ldr	r3, [sp, #4]
 800a96e:	1e5e      	subs	r6, r3, #1
 800a970:	9b06      	ldr	r3, [sp, #24]
 800a972:	42b3      	cmp	r3, r6
 800a974:	bfbf      	itttt	lt
 800a976:	9b06      	ldrlt	r3, [sp, #24]
 800a978:	9606      	strlt	r6, [sp, #24]
 800a97a:	1af2      	sublt	r2, r6, r3
 800a97c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a97e:	bfb6      	itet	lt
 800a980:	189b      	addlt	r3, r3, r2
 800a982:	1b9e      	subge	r6, r3, r6
 800a984:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a986:	9b01      	ldr	r3, [sp, #4]
 800a988:	bfb8      	it	lt
 800a98a:	2600      	movlt	r6, #0
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	bfb5      	itete	lt
 800a990:	eba8 0503 	sublt.w	r5, r8, r3
 800a994:	9b01      	ldrge	r3, [sp, #4]
 800a996:	2300      	movlt	r3, #0
 800a998:	4645      	movge	r5, r8
 800a99a:	e747      	b.n	800a82c <_dtoa_r+0x75c>
 800a99c:	9e06      	ldr	r6, [sp, #24]
 800a99e:	9f08      	ldr	r7, [sp, #32]
 800a9a0:	4645      	mov	r5, r8
 800a9a2:	e74c      	b.n	800a83e <_dtoa_r+0x76e>
 800a9a4:	9a06      	ldr	r2, [sp, #24]
 800a9a6:	e775      	b.n	800a894 <_dtoa_r+0x7c4>
 800a9a8:	9b05      	ldr	r3, [sp, #20]
 800a9aa:	2b01      	cmp	r3, #1
 800a9ac:	dc18      	bgt.n	800a9e0 <_dtoa_r+0x910>
 800a9ae:	9b02      	ldr	r3, [sp, #8]
 800a9b0:	b9b3      	cbnz	r3, 800a9e0 <_dtoa_r+0x910>
 800a9b2:	9b03      	ldr	r3, [sp, #12]
 800a9b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9b8:	b9a3      	cbnz	r3, 800a9e4 <_dtoa_r+0x914>
 800a9ba:	9b03      	ldr	r3, [sp, #12]
 800a9bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9c0:	0d1b      	lsrs	r3, r3, #20
 800a9c2:	051b      	lsls	r3, r3, #20
 800a9c4:	b12b      	cbz	r3, 800a9d2 <_dtoa_r+0x902>
 800a9c6:	9b04      	ldr	r3, [sp, #16]
 800a9c8:	3301      	adds	r3, #1
 800a9ca:	9304      	str	r3, [sp, #16]
 800a9cc:	f108 0801 	add.w	r8, r8, #1
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	9306      	str	r3, [sp, #24]
 800a9d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	f47f af74 	bne.w	800a8c4 <_dtoa_r+0x7f4>
 800a9dc:	2001      	movs	r0, #1
 800a9de:	e779      	b.n	800a8d4 <_dtoa_r+0x804>
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	e7f6      	b.n	800a9d2 <_dtoa_r+0x902>
 800a9e4:	9b02      	ldr	r3, [sp, #8]
 800a9e6:	e7f4      	b.n	800a9d2 <_dtoa_r+0x902>
 800a9e8:	d085      	beq.n	800a8f6 <_dtoa_r+0x826>
 800a9ea:	4618      	mov	r0, r3
 800a9ec:	301c      	adds	r0, #28
 800a9ee:	e77d      	b.n	800a8ec <_dtoa_r+0x81c>
 800a9f0:	40240000 	.word	0x40240000
 800a9f4:	9b01      	ldr	r3, [sp, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	dc38      	bgt.n	800aa6c <_dtoa_r+0x99c>
 800a9fa:	9b05      	ldr	r3, [sp, #20]
 800a9fc:	2b02      	cmp	r3, #2
 800a9fe:	dd35      	ble.n	800aa6c <_dtoa_r+0x99c>
 800aa00:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aa04:	f1b9 0f00 	cmp.w	r9, #0
 800aa08:	d10d      	bne.n	800aa26 <_dtoa_r+0x956>
 800aa0a:	4631      	mov	r1, r6
 800aa0c:	464b      	mov	r3, r9
 800aa0e:	2205      	movs	r2, #5
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 fbe9 	bl	800b1e8 <__multadd>
 800aa16:	4601      	mov	r1, r0
 800aa18:	4606      	mov	r6, r0
 800aa1a:	4658      	mov	r0, fp
 800aa1c:	f000 fe00 	bl	800b620 <__mcmp>
 800aa20:	2800      	cmp	r0, #0
 800aa22:	f73f adbd 	bgt.w	800a5a0 <_dtoa_r+0x4d0>
 800aa26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa28:	9d00      	ldr	r5, [sp, #0]
 800aa2a:	ea6f 0a03 	mvn.w	sl, r3
 800aa2e:	f04f 0800 	mov.w	r8, #0
 800aa32:	4631      	mov	r1, r6
 800aa34:	4620      	mov	r0, r4
 800aa36:	f000 fbb5 	bl	800b1a4 <_Bfree>
 800aa3a:	2f00      	cmp	r7, #0
 800aa3c:	f43f aeb4 	beq.w	800a7a8 <_dtoa_r+0x6d8>
 800aa40:	f1b8 0f00 	cmp.w	r8, #0
 800aa44:	d005      	beq.n	800aa52 <_dtoa_r+0x982>
 800aa46:	45b8      	cmp	r8, r7
 800aa48:	d003      	beq.n	800aa52 <_dtoa_r+0x982>
 800aa4a:	4641      	mov	r1, r8
 800aa4c:	4620      	mov	r0, r4
 800aa4e:	f000 fba9 	bl	800b1a4 <_Bfree>
 800aa52:	4639      	mov	r1, r7
 800aa54:	4620      	mov	r0, r4
 800aa56:	f000 fba5 	bl	800b1a4 <_Bfree>
 800aa5a:	e6a5      	b.n	800a7a8 <_dtoa_r+0x6d8>
 800aa5c:	2600      	movs	r6, #0
 800aa5e:	4637      	mov	r7, r6
 800aa60:	e7e1      	b.n	800aa26 <_dtoa_r+0x956>
 800aa62:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800aa64:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800aa68:	4637      	mov	r7, r6
 800aa6a:	e599      	b.n	800a5a0 <_dtoa_r+0x4d0>
 800aa6c:	9b08      	ldr	r3, [sp, #32]
 800aa6e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f000 80fd 	beq.w	800ac72 <_dtoa_r+0xba2>
 800aa78:	2d00      	cmp	r5, #0
 800aa7a:	dd05      	ble.n	800aa88 <_dtoa_r+0x9b8>
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	462a      	mov	r2, r5
 800aa80:	4620      	mov	r0, r4
 800aa82:	f000 fd61 	bl	800b548 <__lshift>
 800aa86:	4607      	mov	r7, r0
 800aa88:	9b06      	ldr	r3, [sp, #24]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d05c      	beq.n	800ab48 <_dtoa_r+0xa78>
 800aa8e:	6879      	ldr	r1, [r7, #4]
 800aa90:	4620      	mov	r0, r4
 800aa92:	f000 fb47 	bl	800b124 <_Balloc>
 800aa96:	4605      	mov	r5, r0
 800aa98:	b928      	cbnz	r0, 800aaa6 <_dtoa_r+0x9d6>
 800aa9a:	4b80      	ldr	r3, [pc, #512]	; (800ac9c <_dtoa_r+0xbcc>)
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800aaa2:	f7ff bb2e 	b.w	800a102 <_dtoa_r+0x32>
 800aaa6:	693a      	ldr	r2, [r7, #16]
 800aaa8:	3202      	adds	r2, #2
 800aaaa:	0092      	lsls	r2, r2, #2
 800aaac:	f107 010c 	add.w	r1, r7, #12
 800aab0:	300c      	adds	r0, #12
 800aab2:	f000 fb1d 	bl	800b0f0 <memcpy>
 800aab6:	2201      	movs	r2, #1
 800aab8:	4629      	mov	r1, r5
 800aaba:	4620      	mov	r0, r4
 800aabc:	f000 fd44 	bl	800b548 <__lshift>
 800aac0:	9b00      	ldr	r3, [sp, #0]
 800aac2:	3301      	adds	r3, #1
 800aac4:	9301      	str	r3, [sp, #4]
 800aac6:	9b00      	ldr	r3, [sp, #0]
 800aac8:	444b      	add	r3, r9
 800aaca:	9307      	str	r3, [sp, #28]
 800aacc:	9b02      	ldr	r3, [sp, #8]
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	46b8      	mov	r8, r7
 800aad4:	9306      	str	r3, [sp, #24]
 800aad6:	4607      	mov	r7, r0
 800aad8:	9b01      	ldr	r3, [sp, #4]
 800aada:	4631      	mov	r1, r6
 800aadc:	3b01      	subs	r3, #1
 800aade:	4658      	mov	r0, fp
 800aae0:	9302      	str	r3, [sp, #8]
 800aae2:	f7ff fa67 	bl	8009fb4 <quorem>
 800aae6:	4603      	mov	r3, r0
 800aae8:	3330      	adds	r3, #48	; 0x30
 800aaea:	9004      	str	r0, [sp, #16]
 800aaec:	4641      	mov	r1, r8
 800aaee:	4658      	mov	r0, fp
 800aaf0:	9308      	str	r3, [sp, #32]
 800aaf2:	f000 fd95 	bl	800b620 <__mcmp>
 800aaf6:	463a      	mov	r2, r7
 800aaf8:	4681      	mov	r9, r0
 800aafa:	4631      	mov	r1, r6
 800aafc:	4620      	mov	r0, r4
 800aafe:	f000 fdab 	bl	800b658 <__mdiff>
 800ab02:	68c2      	ldr	r2, [r0, #12]
 800ab04:	9b08      	ldr	r3, [sp, #32]
 800ab06:	4605      	mov	r5, r0
 800ab08:	bb02      	cbnz	r2, 800ab4c <_dtoa_r+0xa7c>
 800ab0a:	4601      	mov	r1, r0
 800ab0c:	4658      	mov	r0, fp
 800ab0e:	f000 fd87 	bl	800b620 <__mcmp>
 800ab12:	9b08      	ldr	r3, [sp, #32]
 800ab14:	4602      	mov	r2, r0
 800ab16:	4629      	mov	r1, r5
 800ab18:	4620      	mov	r0, r4
 800ab1a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800ab1e:	f000 fb41 	bl	800b1a4 <_Bfree>
 800ab22:	9b05      	ldr	r3, [sp, #20]
 800ab24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab26:	9d01      	ldr	r5, [sp, #4]
 800ab28:	ea43 0102 	orr.w	r1, r3, r2
 800ab2c:	9b06      	ldr	r3, [sp, #24]
 800ab2e:	430b      	orrs	r3, r1
 800ab30:	9b08      	ldr	r3, [sp, #32]
 800ab32:	d10d      	bne.n	800ab50 <_dtoa_r+0xa80>
 800ab34:	2b39      	cmp	r3, #57	; 0x39
 800ab36:	d029      	beq.n	800ab8c <_dtoa_r+0xabc>
 800ab38:	f1b9 0f00 	cmp.w	r9, #0
 800ab3c:	dd01      	ble.n	800ab42 <_dtoa_r+0xa72>
 800ab3e:	9b04      	ldr	r3, [sp, #16]
 800ab40:	3331      	adds	r3, #49	; 0x31
 800ab42:	9a02      	ldr	r2, [sp, #8]
 800ab44:	7013      	strb	r3, [r2, #0]
 800ab46:	e774      	b.n	800aa32 <_dtoa_r+0x962>
 800ab48:	4638      	mov	r0, r7
 800ab4a:	e7b9      	b.n	800aac0 <_dtoa_r+0x9f0>
 800ab4c:	2201      	movs	r2, #1
 800ab4e:	e7e2      	b.n	800ab16 <_dtoa_r+0xa46>
 800ab50:	f1b9 0f00 	cmp.w	r9, #0
 800ab54:	db06      	blt.n	800ab64 <_dtoa_r+0xa94>
 800ab56:	9905      	ldr	r1, [sp, #20]
 800ab58:	ea41 0909 	orr.w	r9, r1, r9
 800ab5c:	9906      	ldr	r1, [sp, #24]
 800ab5e:	ea59 0101 	orrs.w	r1, r9, r1
 800ab62:	d120      	bne.n	800aba6 <_dtoa_r+0xad6>
 800ab64:	2a00      	cmp	r2, #0
 800ab66:	ddec      	ble.n	800ab42 <_dtoa_r+0xa72>
 800ab68:	4659      	mov	r1, fp
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	4620      	mov	r0, r4
 800ab6e:	9301      	str	r3, [sp, #4]
 800ab70:	f000 fcea 	bl	800b548 <__lshift>
 800ab74:	4631      	mov	r1, r6
 800ab76:	4683      	mov	fp, r0
 800ab78:	f000 fd52 	bl	800b620 <__mcmp>
 800ab7c:	2800      	cmp	r0, #0
 800ab7e:	9b01      	ldr	r3, [sp, #4]
 800ab80:	dc02      	bgt.n	800ab88 <_dtoa_r+0xab8>
 800ab82:	d1de      	bne.n	800ab42 <_dtoa_r+0xa72>
 800ab84:	07da      	lsls	r2, r3, #31
 800ab86:	d5dc      	bpl.n	800ab42 <_dtoa_r+0xa72>
 800ab88:	2b39      	cmp	r3, #57	; 0x39
 800ab8a:	d1d8      	bne.n	800ab3e <_dtoa_r+0xa6e>
 800ab8c:	9a02      	ldr	r2, [sp, #8]
 800ab8e:	2339      	movs	r3, #57	; 0x39
 800ab90:	7013      	strb	r3, [r2, #0]
 800ab92:	462b      	mov	r3, r5
 800ab94:	461d      	mov	r5, r3
 800ab96:	3b01      	subs	r3, #1
 800ab98:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab9c:	2a39      	cmp	r2, #57	; 0x39
 800ab9e:	d050      	beq.n	800ac42 <_dtoa_r+0xb72>
 800aba0:	3201      	adds	r2, #1
 800aba2:	701a      	strb	r2, [r3, #0]
 800aba4:	e745      	b.n	800aa32 <_dtoa_r+0x962>
 800aba6:	2a00      	cmp	r2, #0
 800aba8:	dd03      	ble.n	800abb2 <_dtoa_r+0xae2>
 800abaa:	2b39      	cmp	r3, #57	; 0x39
 800abac:	d0ee      	beq.n	800ab8c <_dtoa_r+0xabc>
 800abae:	3301      	adds	r3, #1
 800abb0:	e7c7      	b.n	800ab42 <_dtoa_r+0xa72>
 800abb2:	9a01      	ldr	r2, [sp, #4]
 800abb4:	9907      	ldr	r1, [sp, #28]
 800abb6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800abba:	428a      	cmp	r2, r1
 800abbc:	d02a      	beq.n	800ac14 <_dtoa_r+0xb44>
 800abbe:	4659      	mov	r1, fp
 800abc0:	2300      	movs	r3, #0
 800abc2:	220a      	movs	r2, #10
 800abc4:	4620      	mov	r0, r4
 800abc6:	f000 fb0f 	bl	800b1e8 <__multadd>
 800abca:	45b8      	cmp	r8, r7
 800abcc:	4683      	mov	fp, r0
 800abce:	f04f 0300 	mov.w	r3, #0
 800abd2:	f04f 020a 	mov.w	r2, #10
 800abd6:	4641      	mov	r1, r8
 800abd8:	4620      	mov	r0, r4
 800abda:	d107      	bne.n	800abec <_dtoa_r+0xb1c>
 800abdc:	f000 fb04 	bl	800b1e8 <__multadd>
 800abe0:	4680      	mov	r8, r0
 800abe2:	4607      	mov	r7, r0
 800abe4:	9b01      	ldr	r3, [sp, #4]
 800abe6:	3301      	adds	r3, #1
 800abe8:	9301      	str	r3, [sp, #4]
 800abea:	e775      	b.n	800aad8 <_dtoa_r+0xa08>
 800abec:	f000 fafc 	bl	800b1e8 <__multadd>
 800abf0:	4639      	mov	r1, r7
 800abf2:	4680      	mov	r8, r0
 800abf4:	2300      	movs	r3, #0
 800abf6:	220a      	movs	r2, #10
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 faf5 	bl	800b1e8 <__multadd>
 800abfe:	4607      	mov	r7, r0
 800ac00:	e7f0      	b.n	800abe4 <_dtoa_r+0xb14>
 800ac02:	f1b9 0f00 	cmp.w	r9, #0
 800ac06:	9a00      	ldr	r2, [sp, #0]
 800ac08:	bfcc      	ite	gt
 800ac0a:	464d      	movgt	r5, r9
 800ac0c:	2501      	movle	r5, #1
 800ac0e:	4415      	add	r5, r2
 800ac10:	f04f 0800 	mov.w	r8, #0
 800ac14:	4659      	mov	r1, fp
 800ac16:	2201      	movs	r2, #1
 800ac18:	4620      	mov	r0, r4
 800ac1a:	9301      	str	r3, [sp, #4]
 800ac1c:	f000 fc94 	bl	800b548 <__lshift>
 800ac20:	4631      	mov	r1, r6
 800ac22:	4683      	mov	fp, r0
 800ac24:	f000 fcfc 	bl	800b620 <__mcmp>
 800ac28:	2800      	cmp	r0, #0
 800ac2a:	dcb2      	bgt.n	800ab92 <_dtoa_r+0xac2>
 800ac2c:	d102      	bne.n	800ac34 <_dtoa_r+0xb64>
 800ac2e:	9b01      	ldr	r3, [sp, #4]
 800ac30:	07db      	lsls	r3, r3, #31
 800ac32:	d4ae      	bmi.n	800ab92 <_dtoa_r+0xac2>
 800ac34:	462b      	mov	r3, r5
 800ac36:	461d      	mov	r5, r3
 800ac38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac3c:	2a30      	cmp	r2, #48	; 0x30
 800ac3e:	d0fa      	beq.n	800ac36 <_dtoa_r+0xb66>
 800ac40:	e6f7      	b.n	800aa32 <_dtoa_r+0x962>
 800ac42:	9a00      	ldr	r2, [sp, #0]
 800ac44:	429a      	cmp	r2, r3
 800ac46:	d1a5      	bne.n	800ab94 <_dtoa_r+0xac4>
 800ac48:	f10a 0a01 	add.w	sl, sl, #1
 800ac4c:	2331      	movs	r3, #49	; 0x31
 800ac4e:	e779      	b.n	800ab44 <_dtoa_r+0xa74>
 800ac50:	4b13      	ldr	r3, [pc, #76]	; (800aca0 <_dtoa_r+0xbd0>)
 800ac52:	f7ff baaf 	b.w	800a1b4 <_dtoa_r+0xe4>
 800ac56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	f47f aa86 	bne.w	800a16a <_dtoa_r+0x9a>
 800ac5e:	4b11      	ldr	r3, [pc, #68]	; (800aca4 <_dtoa_r+0xbd4>)
 800ac60:	f7ff baa8 	b.w	800a1b4 <_dtoa_r+0xe4>
 800ac64:	f1b9 0f00 	cmp.w	r9, #0
 800ac68:	dc03      	bgt.n	800ac72 <_dtoa_r+0xba2>
 800ac6a:	9b05      	ldr	r3, [sp, #20]
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	f73f aec9 	bgt.w	800aa04 <_dtoa_r+0x934>
 800ac72:	9d00      	ldr	r5, [sp, #0]
 800ac74:	4631      	mov	r1, r6
 800ac76:	4658      	mov	r0, fp
 800ac78:	f7ff f99c 	bl	8009fb4 <quorem>
 800ac7c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800ac80:	f805 3b01 	strb.w	r3, [r5], #1
 800ac84:	9a00      	ldr	r2, [sp, #0]
 800ac86:	1aaa      	subs	r2, r5, r2
 800ac88:	4591      	cmp	r9, r2
 800ac8a:	ddba      	ble.n	800ac02 <_dtoa_r+0xb32>
 800ac8c:	4659      	mov	r1, fp
 800ac8e:	2300      	movs	r3, #0
 800ac90:	220a      	movs	r2, #10
 800ac92:	4620      	mov	r0, r4
 800ac94:	f000 faa8 	bl	800b1e8 <__multadd>
 800ac98:	4683      	mov	fp, r0
 800ac9a:	e7eb      	b.n	800ac74 <_dtoa_r+0xba4>
 800ac9c:	08013e8b 	.word	0x08013e8b
 800aca0:	08013de4 	.word	0x08013de4
 800aca4:	08013e08 	.word	0x08013e08

0800aca8 <__sflush_r>:
 800aca8:	898a      	ldrh	r2, [r1, #12]
 800acaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acae:	4605      	mov	r5, r0
 800acb0:	0710      	lsls	r0, r2, #28
 800acb2:	460c      	mov	r4, r1
 800acb4:	d458      	bmi.n	800ad68 <__sflush_r+0xc0>
 800acb6:	684b      	ldr	r3, [r1, #4]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	dc05      	bgt.n	800acc8 <__sflush_r+0x20>
 800acbc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	dc02      	bgt.n	800acc8 <__sflush_r+0x20>
 800acc2:	2000      	movs	r0, #0
 800acc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acca:	2e00      	cmp	r6, #0
 800accc:	d0f9      	beq.n	800acc2 <__sflush_r+0x1a>
 800acce:	2300      	movs	r3, #0
 800acd0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800acd4:	682f      	ldr	r7, [r5, #0]
 800acd6:	602b      	str	r3, [r5, #0]
 800acd8:	d032      	beq.n	800ad40 <__sflush_r+0x98>
 800acda:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acdc:	89a3      	ldrh	r3, [r4, #12]
 800acde:	075a      	lsls	r2, r3, #29
 800ace0:	d505      	bpl.n	800acee <__sflush_r+0x46>
 800ace2:	6863      	ldr	r3, [r4, #4]
 800ace4:	1ac0      	subs	r0, r0, r3
 800ace6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ace8:	b10b      	cbz	r3, 800acee <__sflush_r+0x46>
 800acea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800acec:	1ac0      	subs	r0, r0, r3
 800acee:	2300      	movs	r3, #0
 800acf0:	4602      	mov	r2, r0
 800acf2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800acf4:	6a21      	ldr	r1, [r4, #32]
 800acf6:	4628      	mov	r0, r5
 800acf8:	47b0      	blx	r6
 800acfa:	1c43      	adds	r3, r0, #1
 800acfc:	89a3      	ldrh	r3, [r4, #12]
 800acfe:	d106      	bne.n	800ad0e <__sflush_r+0x66>
 800ad00:	6829      	ldr	r1, [r5, #0]
 800ad02:	291d      	cmp	r1, #29
 800ad04:	d82c      	bhi.n	800ad60 <__sflush_r+0xb8>
 800ad06:	4a2a      	ldr	r2, [pc, #168]	; (800adb0 <__sflush_r+0x108>)
 800ad08:	40ca      	lsrs	r2, r1
 800ad0a:	07d6      	lsls	r6, r2, #31
 800ad0c:	d528      	bpl.n	800ad60 <__sflush_r+0xb8>
 800ad0e:	2200      	movs	r2, #0
 800ad10:	6062      	str	r2, [r4, #4]
 800ad12:	04d9      	lsls	r1, r3, #19
 800ad14:	6922      	ldr	r2, [r4, #16]
 800ad16:	6022      	str	r2, [r4, #0]
 800ad18:	d504      	bpl.n	800ad24 <__sflush_r+0x7c>
 800ad1a:	1c42      	adds	r2, r0, #1
 800ad1c:	d101      	bne.n	800ad22 <__sflush_r+0x7a>
 800ad1e:	682b      	ldr	r3, [r5, #0]
 800ad20:	b903      	cbnz	r3, 800ad24 <__sflush_r+0x7c>
 800ad22:	6560      	str	r0, [r4, #84]	; 0x54
 800ad24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad26:	602f      	str	r7, [r5, #0]
 800ad28:	2900      	cmp	r1, #0
 800ad2a:	d0ca      	beq.n	800acc2 <__sflush_r+0x1a>
 800ad2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ad30:	4299      	cmp	r1, r3
 800ad32:	d002      	beq.n	800ad3a <__sflush_r+0x92>
 800ad34:	4628      	mov	r0, r5
 800ad36:	f7fe fa6f 	bl	8009218 <_free_r>
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad3e:	e7c1      	b.n	800acc4 <__sflush_r+0x1c>
 800ad40:	6a21      	ldr	r1, [r4, #32]
 800ad42:	2301      	movs	r3, #1
 800ad44:	4628      	mov	r0, r5
 800ad46:	47b0      	blx	r6
 800ad48:	1c41      	adds	r1, r0, #1
 800ad4a:	d1c7      	bne.n	800acdc <__sflush_r+0x34>
 800ad4c:	682b      	ldr	r3, [r5, #0]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d0c4      	beq.n	800acdc <__sflush_r+0x34>
 800ad52:	2b1d      	cmp	r3, #29
 800ad54:	d001      	beq.n	800ad5a <__sflush_r+0xb2>
 800ad56:	2b16      	cmp	r3, #22
 800ad58:	d101      	bne.n	800ad5e <__sflush_r+0xb6>
 800ad5a:	602f      	str	r7, [r5, #0]
 800ad5c:	e7b1      	b.n	800acc2 <__sflush_r+0x1a>
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad64:	81a3      	strh	r3, [r4, #12]
 800ad66:	e7ad      	b.n	800acc4 <__sflush_r+0x1c>
 800ad68:	690f      	ldr	r7, [r1, #16]
 800ad6a:	2f00      	cmp	r7, #0
 800ad6c:	d0a9      	beq.n	800acc2 <__sflush_r+0x1a>
 800ad6e:	0793      	lsls	r3, r2, #30
 800ad70:	680e      	ldr	r6, [r1, #0]
 800ad72:	bf08      	it	eq
 800ad74:	694b      	ldreq	r3, [r1, #20]
 800ad76:	600f      	str	r7, [r1, #0]
 800ad78:	bf18      	it	ne
 800ad7a:	2300      	movne	r3, #0
 800ad7c:	eba6 0807 	sub.w	r8, r6, r7
 800ad80:	608b      	str	r3, [r1, #8]
 800ad82:	f1b8 0f00 	cmp.w	r8, #0
 800ad86:	dd9c      	ble.n	800acc2 <__sflush_r+0x1a>
 800ad88:	6a21      	ldr	r1, [r4, #32]
 800ad8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ad8c:	4643      	mov	r3, r8
 800ad8e:	463a      	mov	r2, r7
 800ad90:	4628      	mov	r0, r5
 800ad92:	47b0      	blx	r6
 800ad94:	2800      	cmp	r0, #0
 800ad96:	dc06      	bgt.n	800ada6 <__sflush_r+0xfe>
 800ad98:	89a3      	ldrh	r3, [r4, #12]
 800ad9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad9e:	81a3      	strh	r3, [r4, #12]
 800ada0:	f04f 30ff 	mov.w	r0, #4294967295
 800ada4:	e78e      	b.n	800acc4 <__sflush_r+0x1c>
 800ada6:	4407      	add	r7, r0
 800ada8:	eba8 0800 	sub.w	r8, r8, r0
 800adac:	e7e9      	b.n	800ad82 <__sflush_r+0xda>
 800adae:	bf00      	nop
 800adb0:	20400001 	.word	0x20400001

0800adb4 <_fflush_r>:
 800adb4:	b538      	push	{r3, r4, r5, lr}
 800adb6:	690b      	ldr	r3, [r1, #16]
 800adb8:	4605      	mov	r5, r0
 800adba:	460c      	mov	r4, r1
 800adbc:	b913      	cbnz	r3, 800adc4 <_fflush_r+0x10>
 800adbe:	2500      	movs	r5, #0
 800adc0:	4628      	mov	r0, r5
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
 800adc4:	b118      	cbz	r0, 800adce <_fflush_r+0x1a>
 800adc6:	6983      	ldr	r3, [r0, #24]
 800adc8:	b90b      	cbnz	r3, 800adce <_fflush_r+0x1a>
 800adca:	f000 f887 	bl	800aedc <__sinit>
 800adce:	4b14      	ldr	r3, [pc, #80]	; (800ae20 <_fflush_r+0x6c>)
 800add0:	429c      	cmp	r4, r3
 800add2:	d11b      	bne.n	800ae0c <_fflush_r+0x58>
 800add4:	686c      	ldr	r4, [r5, #4]
 800add6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d0ef      	beq.n	800adbe <_fflush_r+0xa>
 800adde:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ade0:	07d0      	lsls	r0, r2, #31
 800ade2:	d404      	bmi.n	800adee <_fflush_r+0x3a>
 800ade4:	0599      	lsls	r1, r3, #22
 800ade6:	d402      	bmi.n	800adee <_fflush_r+0x3a>
 800ade8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800adea:	f000 f91a 	bl	800b022 <__retarget_lock_acquire_recursive>
 800adee:	4628      	mov	r0, r5
 800adf0:	4621      	mov	r1, r4
 800adf2:	f7ff ff59 	bl	800aca8 <__sflush_r>
 800adf6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800adf8:	07da      	lsls	r2, r3, #31
 800adfa:	4605      	mov	r5, r0
 800adfc:	d4e0      	bmi.n	800adc0 <_fflush_r+0xc>
 800adfe:	89a3      	ldrh	r3, [r4, #12]
 800ae00:	059b      	lsls	r3, r3, #22
 800ae02:	d4dd      	bmi.n	800adc0 <_fflush_r+0xc>
 800ae04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae06:	f000 f90d 	bl	800b024 <__retarget_lock_release_recursive>
 800ae0a:	e7d9      	b.n	800adc0 <_fflush_r+0xc>
 800ae0c:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <_fflush_r+0x70>)
 800ae0e:	429c      	cmp	r4, r3
 800ae10:	d101      	bne.n	800ae16 <_fflush_r+0x62>
 800ae12:	68ac      	ldr	r4, [r5, #8]
 800ae14:	e7df      	b.n	800add6 <_fflush_r+0x22>
 800ae16:	4b04      	ldr	r3, [pc, #16]	; (800ae28 <_fflush_r+0x74>)
 800ae18:	429c      	cmp	r4, r3
 800ae1a:	bf08      	it	eq
 800ae1c:	68ec      	ldreq	r4, [r5, #12]
 800ae1e:	e7da      	b.n	800add6 <_fflush_r+0x22>
 800ae20:	08013ebc 	.word	0x08013ebc
 800ae24:	08013edc 	.word	0x08013edc
 800ae28:	08013e9c 	.word	0x08013e9c

0800ae2c <std>:
 800ae2c:	2300      	movs	r3, #0
 800ae2e:	b510      	push	{r4, lr}
 800ae30:	4604      	mov	r4, r0
 800ae32:	e9c0 3300 	strd	r3, r3, [r0]
 800ae36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ae3a:	6083      	str	r3, [r0, #8]
 800ae3c:	8181      	strh	r1, [r0, #12]
 800ae3e:	6643      	str	r3, [r0, #100]	; 0x64
 800ae40:	81c2      	strh	r2, [r0, #14]
 800ae42:	6183      	str	r3, [r0, #24]
 800ae44:	4619      	mov	r1, r3
 800ae46:	2208      	movs	r2, #8
 800ae48:	305c      	adds	r0, #92	; 0x5c
 800ae4a:	f7fe f9dd 	bl	8009208 <memset>
 800ae4e:	4b05      	ldr	r3, [pc, #20]	; (800ae64 <std+0x38>)
 800ae50:	6263      	str	r3, [r4, #36]	; 0x24
 800ae52:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <std+0x3c>)
 800ae54:	62a3      	str	r3, [r4, #40]	; 0x28
 800ae56:	4b05      	ldr	r3, [pc, #20]	; (800ae6c <std+0x40>)
 800ae58:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ae5a:	4b05      	ldr	r3, [pc, #20]	; (800ae70 <std+0x44>)
 800ae5c:	6224      	str	r4, [r4, #32]
 800ae5e:	6323      	str	r3, [r4, #48]	; 0x30
 800ae60:	bd10      	pop	{r4, pc}
 800ae62:	bf00      	nop
 800ae64:	0800bda9 	.word	0x0800bda9
 800ae68:	0800bdcb 	.word	0x0800bdcb
 800ae6c:	0800be03 	.word	0x0800be03
 800ae70:	0800be27 	.word	0x0800be27

0800ae74 <_cleanup_r>:
 800ae74:	4901      	ldr	r1, [pc, #4]	; (800ae7c <_cleanup_r+0x8>)
 800ae76:	f000 b8af 	b.w	800afd8 <_fwalk_reent>
 800ae7a:	bf00      	nop
 800ae7c:	0800adb5 	.word	0x0800adb5

0800ae80 <__sfmoreglue>:
 800ae80:	b570      	push	{r4, r5, r6, lr}
 800ae82:	1e4a      	subs	r2, r1, #1
 800ae84:	2568      	movs	r5, #104	; 0x68
 800ae86:	4355      	muls	r5, r2
 800ae88:	460e      	mov	r6, r1
 800ae8a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ae8e:	f7fe fa13 	bl	80092b8 <_malloc_r>
 800ae92:	4604      	mov	r4, r0
 800ae94:	b140      	cbz	r0, 800aea8 <__sfmoreglue+0x28>
 800ae96:	2100      	movs	r1, #0
 800ae98:	e9c0 1600 	strd	r1, r6, [r0]
 800ae9c:	300c      	adds	r0, #12
 800ae9e:	60a0      	str	r0, [r4, #8]
 800aea0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800aea4:	f7fe f9b0 	bl	8009208 <memset>
 800aea8:	4620      	mov	r0, r4
 800aeaa:	bd70      	pop	{r4, r5, r6, pc}

0800aeac <__sfp_lock_acquire>:
 800aeac:	4801      	ldr	r0, [pc, #4]	; (800aeb4 <__sfp_lock_acquire+0x8>)
 800aeae:	f000 b8b8 	b.w	800b022 <__retarget_lock_acquire_recursive>
 800aeb2:	bf00      	nop
 800aeb4:	20000ee4 	.word	0x20000ee4

0800aeb8 <__sfp_lock_release>:
 800aeb8:	4801      	ldr	r0, [pc, #4]	; (800aec0 <__sfp_lock_release+0x8>)
 800aeba:	f000 b8b3 	b.w	800b024 <__retarget_lock_release_recursive>
 800aebe:	bf00      	nop
 800aec0:	20000ee4 	.word	0x20000ee4

0800aec4 <__sinit_lock_acquire>:
 800aec4:	4801      	ldr	r0, [pc, #4]	; (800aecc <__sinit_lock_acquire+0x8>)
 800aec6:	f000 b8ac 	b.w	800b022 <__retarget_lock_acquire_recursive>
 800aeca:	bf00      	nop
 800aecc:	20000edf 	.word	0x20000edf

0800aed0 <__sinit_lock_release>:
 800aed0:	4801      	ldr	r0, [pc, #4]	; (800aed8 <__sinit_lock_release+0x8>)
 800aed2:	f000 b8a7 	b.w	800b024 <__retarget_lock_release_recursive>
 800aed6:	bf00      	nop
 800aed8:	20000edf 	.word	0x20000edf

0800aedc <__sinit>:
 800aedc:	b510      	push	{r4, lr}
 800aede:	4604      	mov	r4, r0
 800aee0:	f7ff fff0 	bl	800aec4 <__sinit_lock_acquire>
 800aee4:	69a3      	ldr	r3, [r4, #24]
 800aee6:	b11b      	cbz	r3, 800aef0 <__sinit+0x14>
 800aee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aeec:	f7ff bff0 	b.w	800aed0 <__sinit_lock_release>
 800aef0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aef4:	6523      	str	r3, [r4, #80]	; 0x50
 800aef6:	4b13      	ldr	r3, [pc, #76]	; (800af44 <__sinit+0x68>)
 800aef8:	4a13      	ldr	r2, [pc, #76]	; (800af48 <__sinit+0x6c>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	62a2      	str	r2, [r4, #40]	; 0x28
 800aefe:	42a3      	cmp	r3, r4
 800af00:	bf04      	itt	eq
 800af02:	2301      	moveq	r3, #1
 800af04:	61a3      	streq	r3, [r4, #24]
 800af06:	4620      	mov	r0, r4
 800af08:	f000 f820 	bl	800af4c <__sfp>
 800af0c:	6060      	str	r0, [r4, #4]
 800af0e:	4620      	mov	r0, r4
 800af10:	f000 f81c 	bl	800af4c <__sfp>
 800af14:	60a0      	str	r0, [r4, #8]
 800af16:	4620      	mov	r0, r4
 800af18:	f000 f818 	bl	800af4c <__sfp>
 800af1c:	2200      	movs	r2, #0
 800af1e:	60e0      	str	r0, [r4, #12]
 800af20:	2104      	movs	r1, #4
 800af22:	6860      	ldr	r0, [r4, #4]
 800af24:	f7ff ff82 	bl	800ae2c <std>
 800af28:	68a0      	ldr	r0, [r4, #8]
 800af2a:	2201      	movs	r2, #1
 800af2c:	2109      	movs	r1, #9
 800af2e:	f7ff ff7d 	bl	800ae2c <std>
 800af32:	68e0      	ldr	r0, [r4, #12]
 800af34:	2202      	movs	r2, #2
 800af36:	2112      	movs	r1, #18
 800af38:	f7ff ff78 	bl	800ae2c <std>
 800af3c:	2301      	movs	r3, #1
 800af3e:	61a3      	str	r3, [r4, #24]
 800af40:	e7d2      	b.n	800aee8 <__sinit+0xc>
 800af42:	bf00      	nop
 800af44:	08013dd0 	.word	0x08013dd0
 800af48:	0800ae75 	.word	0x0800ae75

0800af4c <__sfp>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	4607      	mov	r7, r0
 800af50:	f7ff ffac 	bl	800aeac <__sfp_lock_acquire>
 800af54:	4b1e      	ldr	r3, [pc, #120]	; (800afd0 <__sfp+0x84>)
 800af56:	681e      	ldr	r6, [r3, #0]
 800af58:	69b3      	ldr	r3, [r6, #24]
 800af5a:	b913      	cbnz	r3, 800af62 <__sfp+0x16>
 800af5c:	4630      	mov	r0, r6
 800af5e:	f7ff ffbd 	bl	800aedc <__sinit>
 800af62:	3648      	adds	r6, #72	; 0x48
 800af64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800af68:	3b01      	subs	r3, #1
 800af6a:	d503      	bpl.n	800af74 <__sfp+0x28>
 800af6c:	6833      	ldr	r3, [r6, #0]
 800af6e:	b30b      	cbz	r3, 800afb4 <__sfp+0x68>
 800af70:	6836      	ldr	r6, [r6, #0]
 800af72:	e7f7      	b.n	800af64 <__sfp+0x18>
 800af74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800af78:	b9d5      	cbnz	r5, 800afb0 <__sfp+0x64>
 800af7a:	4b16      	ldr	r3, [pc, #88]	; (800afd4 <__sfp+0x88>)
 800af7c:	60e3      	str	r3, [r4, #12]
 800af7e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800af82:	6665      	str	r5, [r4, #100]	; 0x64
 800af84:	f000 f84c 	bl	800b020 <__retarget_lock_init_recursive>
 800af88:	f7ff ff96 	bl	800aeb8 <__sfp_lock_release>
 800af8c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800af90:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800af94:	6025      	str	r5, [r4, #0]
 800af96:	61a5      	str	r5, [r4, #24]
 800af98:	2208      	movs	r2, #8
 800af9a:	4629      	mov	r1, r5
 800af9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800afa0:	f7fe f932 	bl	8009208 <memset>
 800afa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800afa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800afac:	4620      	mov	r0, r4
 800afae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afb0:	3468      	adds	r4, #104	; 0x68
 800afb2:	e7d9      	b.n	800af68 <__sfp+0x1c>
 800afb4:	2104      	movs	r1, #4
 800afb6:	4638      	mov	r0, r7
 800afb8:	f7ff ff62 	bl	800ae80 <__sfmoreglue>
 800afbc:	4604      	mov	r4, r0
 800afbe:	6030      	str	r0, [r6, #0]
 800afc0:	2800      	cmp	r0, #0
 800afc2:	d1d5      	bne.n	800af70 <__sfp+0x24>
 800afc4:	f7ff ff78 	bl	800aeb8 <__sfp_lock_release>
 800afc8:	230c      	movs	r3, #12
 800afca:	603b      	str	r3, [r7, #0]
 800afcc:	e7ee      	b.n	800afac <__sfp+0x60>
 800afce:	bf00      	nop
 800afd0:	08013dd0 	.word	0x08013dd0
 800afd4:	ffff0001 	.word	0xffff0001

0800afd8 <_fwalk_reent>:
 800afd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800afdc:	4606      	mov	r6, r0
 800afde:	4688      	mov	r8, r1
 800afe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800afe4:	2700      	movs	r7, #0
 800afe6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800afea:	f1b9 0901 	subs.w	r9, r9, #1
 800afee:	d505      	bpl.n	800affc <_fwalk_reent+0x24>
 800aff0:	6824      	ldr	r4, [r4, #0]
 800aff2:	2c00      	cmp	r4, #0
 800aff4:	d1f7      	bne.n	800afe6 <_fwalk_reent+0xe>
 800aff6:	4638      	mov	r0, r7
 800aff8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800affc:	89ab      	ldrh	r3, [r5, #12]
 800affe:	2b01      	cmp	r3, #1
 800b000:	d907      	bls.n	800b012 <_fwalk_reent+0x3a>
 800b002:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b006:	3301      	adds	r3, #1
 800b008:	d003      	beq.n	800b012 <_fwalk_reent+0x3a>
 800b00a:	4629      	mov	r1, r5
 800b00c:	4630      	mov	r0, r6
 800b00e:	47c0      	blx	r8
 800b010:	4307      	orrs	r7, r0
 800b012:	3568      	adds	r5, #104	; 0x68
 800b014:	e7e9      	b.n	800afea <_fwalk_reent+0x12>
	...

0800b018 <_localeconv_r>:
 800b018:	4800      	ldr	r0, [pc, #0]	; (800b01c <_localeconv_r+0x4>)
 800b01a:	4770      	bx	lr
 800b01c:	20000164 	.word	0x20000164

0800b020 <__retarget_lock_init_recursive>:
 800b020:	4770      	bx	lr

0800b022 <__retarget_lock_acquire_recursive>:
 800b022:	4770      	bx	lr

0800b024 <__retarget_lock_release_recursive>:
 800b024:	4770      	bx	lr

0800b026 <__swhatbuf_r>:
 800b026:	b570      	push	{r4, r5, r6, lr}
 800b028:	460e      	mov	r6, r1
 800b02a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b02e:	2900      	cmp	r1, #0
 800b030:	b096      	sub	sp, #88	; 0x58
 800b032:	4614      	mov	r4, r2
 800b034:	461d      	mov	r5, r3
 800b036:	da07      	bge.n	800b048 <__swhatbuf_r+0x22>
 800b038:	2300      	movs	r3, #0
 800b03a:	602b      	str	r3, [r5, #0]
 800b03c:	89b3      	ldrh	r3, [r6, #12]
 800b03e:	061a      	lsls	r2, r3, #24
 800b040:	d410      	bmi.n	800b064 <__swhatbuf_r+0x3e>
 800b042:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b046:	e00e      	b.n	800b066 <__swhatbuf_r+0x40>
 800b048:	466a      	mov	r2, sp
 800b04a:	f000 ff43 	bl	800bed4 <_fstat_r>
 800b04e:	2800      	cmp	r0, #0
 800b050:	dbf2      	blt.n	800b038 <__swhatbuf_r+0x12>
 800b052:	9a01      	ldr	r2, [sp, #4]
 800b054:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b058:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b05c:	425a      	negs	r2, r3
 800b05e:	415a      	adcs	r2, r3
 800b060:	602a      	str	r2, [r5, #0]
 800b062:	e7ee      	b.n	800b042 <__swhatbuf_r+0x1c>
 800b064:	2340      	movs	r3, #64	; 0x40
 800b066:	2000      	movs	r0, #0
 800b068:	6023      	str	r3, [r4, #0]
 800b06a:	b016      	add	sp, #88	; 0x58
 800b06c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b070 <__smakebuf_r>:
 800b070:	898b      	ldrh	r3, [r1, #12]
 800b072:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b074:	079d      	lsls	r5, r3, #30
 800b076:	4606      	mov	r6, r0
 800b078:	460c      	mov	r4, r1
 800b07a:	d507      	bpl.n	800b08c <__smakebuf_r+0x1c>
 800b07c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b080:	6023      	str	r3, [r4, #0]
 800b082:	6123      	str	r3, [r4, #16]
 800b084:	2301      	movs	r3, #1
 800b086:	6163      	str	r3, [r4, #20]
 800b088:	b002      	add	sp, #8
 800b08a:	bd70      	pop	{r4, r5, r6, pc}
 800b08c:	ab01      	add	r3, sp, #4
 800b08e:	466a      	mov	r2, sp
 800b090:	f7ff ffc9 	bl	800b026 <__swhatbuf_r>
 800b094:	9900      	ldr	r1, [sp, #0]
 800b096:	4605      	mov	r5, r0
 800b098:	4630      	mov	r0, r6
 800b09a:	f7fe f90d 	bl	80092b8 <_malloc_r>
 800b09e:	b948      	cbnz	r0, 800b0b4 <__smakebuf_r+0x44>
 800b0a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b0a4:	059a      	lsls	r2, r3, #22
 800b0a6:	d4ef      	bmi.n	800b088 <__smakebuf_r+0x18>
 800b0a8:	f023 0303 	bic.w	r3, r3, #3
 800b0ac:	f043 0302 	orr.w	r3, r3, #2
 800b0b0:	81a3      	strh	r3, [r4, #12]
 800b0b2:	e7e3      	b.n	800b07c <__smakebuf_r+0xc>
 800b0b4:	4b0d      	ldr	r3, [pc, #52]	; (800b0ec <__smakebuf_r+0x7c>)
 800b0b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800b0b8:	89a3      	ldrh	r3, [r4, #12]
 800b0ba:	6020      	str	r0, [r4, #0]
 800b0bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b0c0:	81a3      	strh	r3, [r4, #12]
 800b0c2:	9b00      	ldr	r3, [sp, #0]
 800b0c4:	6163      	str	r3, [r4, #20]
 800b0c6:	9b01      	ldr	r3, [sp, #4]
 800b0c8:	6120      	str	r0, [r4, #16]
 800b0ca:	b15b      	cbz	r3, 800b0e4 <__smakebuf_r+0x74>
 800b0cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0d0:	4630      	mov	r0, r6
 800b0d2:	f000 ff11 	bl	800bef8 <_isatty_r>
 800b0d6:	b128      	cbz	r0, 800b0e4 <__smakebuf_r+0x74>
 800b0d8:	89a3      	ldrh	r3, [r4, #12]
 800b0da:	f023 0303 	bic.w	r3, r3, #3
 800b0de:	f043 0301 	orr.w	r3, r3, #1
 800b0e2:	81a3      	strh	r3, [r4, #12]
 800b0e4:	89a0      	ldrh	r0, [r4, #12]
 800b0e6:	4305      	orrs	r5, r0
 800b0e8:	81a5      	strh	r5, [r4, #12]
 800b0ea:	e7cd      	b.n	800b088 <__smakebuf_r+0x18>
 800b0ec:	0800ae75 	.word	0x0800ae75

0800b0f0 <memcpy>:
 800b0f0:	440a      	add	r2, r1
 800b0f2:	4291      	cmp	r1, r2
 800b0f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b0f8:	d100      	bne.n	800b0fc <memcpy+0xc>
 800b0fa:	4770      	bx	lr
 800b0fc:	b510      	push	{r4, lr}
 800b0fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b102:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b106:	4291      	cmp	r1, r2
 800b108:	d1f9      	bne.n	800b0fe <memcpy+0xe>
 800b10a:	bd10      	pop	{r4, pc}

0800b10c <__malloc_lock>:
 800b10c:	4801      	ldr	r0, [pc, #4]	; (800b114 <__malloc_lock+0x8>)
 800b10e:	f7ff bf88 	b.w	800b022 <__retarget_lock_acquire_recursive>
 800b112:	bf00      	nop
 800b114:	20000ee0 	.word	0x20000ee0

0800b118 <__malloc_unlock>:
 800b118:	4801      	ldr	r0, [pc, #4]	; (800b120 <__malloc_unlock+0x8>)
 800b11a:	f7ff bf83 	b.w	800b024 <__retarget_lock_release_recursive>
 800b11e:	bf00      	nop
 800b120:	20000ee0 	.word	0x20000ee0

0800b124 <_Balloc>:
 800b124:	b570      	push	{r4, r5, r6, lr}
 800b126:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b128:	4604      	mov	r4, r0
 800b12a:	460d      	mov	r5, r1
 800b12c:	b976      	cbnz	r6, 800b14c <_Balloc+0x28>
 800b12e:	2010      	movs	r0, #16
 800b130:	f7fe f85a 	bl	80091e8 <malloc>
 800b134:	4602      	mov	r2, r0
 800b136:	6260      	str	r0, [r4, #36]	; 0x24
 800b138:	b920      	cbnz	r0, 800b144 <_Balloc+0x20>
 800b13a:	4b18      	ldr	r3, [pc, #96]	; (800b19c <_Balloc+0x78>)
 800b13c:	4818      	ldr	r0, [pc, #96]	; (800b1a0 <_Balloc+0x7c>)
 800b13e:	2166      	movs	r1, #102	; 0x66
 800b140:	f000 fe88 	bl	800be54 <__assert_func>
 800b144:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b148:	6006      	str	r6, [r0, #0]
 800b14a:	60c6      	str	r6, [r0, #12]
 800b14c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b14e:	68f3      	ldr	r3, [r6, #12]
 800b150:	b183      	cbz	r3, 800b174 <_Balloc+0x50>
 800b152:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b154:	68db      	ldr	r3, [r3, #12]
 800b156:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b15a:	b9b8      	cbnz	r0, 800b18c <_Balloc+0x68>
 800b15c:	2101      	movs	r1, #1
 800b15e:	fa01 f605 	lsl.w	r6, r1, r5
 800b162:	1d72      	adds	r2, r6, #5
 800b164:	0092      	lsls	r2, r2, #2
 800b166:	4620      	mov	r0, r4
 800b168:	f000 fb5a 	bl	800b820 <_calloc_r>
 800b16c:	b160      	cbz	r0, 800b188 <_Balloc+0x64>
 800b16e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b172:	e00e      	b.n	800b192 <_Balloc+0x6e>
 800b174:	2221      	movs	r2, #33	; 0x21
 800b176:	2104      	movs	r1, #4
 800b178:	4620      	mov	r0, r4
 800b17a:	f000 fb51 	bl	800b820 <_calloc_r>
 800b17e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b180:	60f0      	str	r0, [r6, #12]
 800b182:	68db      	ldr	r3, [r3, #12]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1e4      	bne.n	800b152 <_Balloc+0x2e>
 800b188:	2000      	movs	r0, #0
 800b18a:	bd70      	pop	{r4, r5, r6, pc}
 800b18c:	6802      	ldr	r2, [r0, #0]
 800b18e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b192:	2300      	movs	r3, #0
 800b194:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b198:	e7f7      	b.n	800b18a <_Balloc+0x66>
 800b19a:	bf00      	nop
 800b19c:	08013e15 	.word	0x08013e15
 800b1a0:	08013efc 	.word	0x08013efc

0800b1a4 <_Bfree>:
 800b1a4:	b570      	push	{r4, r5, r6, lr}
 800b1a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b1a8:	4605      	mov	r5, r0
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	b976      	cbnz	r6, 800b1cc <_Bfree+0x28>
 800b1ae:	2010      	movs	r0, #16
 800b1b0:	f7fe f81a 	bl	80091e8 <malloc>
 800b1b4:	4602      	mov	r2, r0
 800b1b6:	6268      	str	r0, [r5, #36]	; 0x24
 800b1b8:	b920      	cbnz	r0, 800b1c4 <_Bfree+0x20>
 800b1ba:	4b09      	ldr	r3, [pc, #36]	; (800b1e0 <_Bfree+0x3c>)
 800b1bc:	4809      	ldr	r0, [pc, #36]	; (800b1e4 <_Bfree+0x40>)
 800b1be:	218a      	movs	r1, #138	; 0x8a
 800b1c0:	f000 fe48 	bl	800be54 <__assert_func>
 800b1c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b1c8:	6006      	str	r6, [r0, #0]
 800b1ca:	60c6      	str	r6, [r0, #12]
 800b1cc:	b13c      	cbz	r4, 800b1de <_Bfree+0x3a>
 800b1ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b1d0:	6862      	ldr	r2, [r4, #4]
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b1d8:	6021      	str	r1, [r4, #0]
 800b1da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b1de:	bd70      	pop	{r4, r5, r6, pc}
 800b1e0:	08013e15 	.word	0x08013e15
 800b1e4:	08013efc 	.word	0x08013efc

0800b1e8 <__multadd>:
 800b1e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1ec:	690e      	ldr	r6, [r1, #16]
 800b1ee:	4607      	mov	r7, r0
 800b1f0:	4698      	mov	r8, r3
 800b1f2:	460c      	mov	r4, r1
 800b1f4:	f101 0014 	add.w	r0, r1, #20
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	6805      	ldr	r5, [r0, #0]
 800b1fc:	b2a9      	uxth	r1, r5
 800b1fe:	fb02 8101 	mla	r1, r2, r1, r8
 800b202:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b206:	0c2d      	lsrs	r5, r5, #16
 800b208:	fb02 c505 	mla	r5, r2, r5, ip
 800b20c:	b289      	uxth	r1, r1
 800b20e:	3301      	adds	r3, #1
 800b210:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b214:	429e      	cmp	r6, r3
 800b216:	f840 1b04 	str.w	r1, [r0], #4
 800b21a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b21e:	dcec      	bgt.n	800b1fa <__multadd+0x12>
 800b220:	f1b8 0f00 	cmp.w	r8, #0
 800b224:	d022      	beq.n	800b26c <__multadd+0x84>
 800b226:	68a3      	ldr	r3, [r4, #8]
 800b228:	42b3      	cmp	r3, r6
 800b22a:	dc19      	bgt.n	800b260 <__multadd+0x78>
 800b22c:	6861      	ldr	r1, [r4, #4]
 800b22e:	4638      	mov	r0, r7
 800b230:	3101      	adds	r1, #1
 800b232:	f7ff ff77 	bl	800b124 <_Balloc>
 800b236:	4605      	mov	r5, r0
 800b238:	b928      	cbnz	r0, 800b246 <__multadd+0x5e>
 800b23a:	4602      	mov	r2, r0
 800b23c:	4b0d      	ldr	r3, [pc, #52]	; (800b274 <__multadd+0x8c>)
 800b23e:	480e      	ldr	r0, [pc, #56]	; (800b278 <__multadd+0x90>)
 800b240:	21b5      	movs	r1, #181	; 0xb5
 800b242:	f000 fe07 	bl	800be54 <__assert_func>
 800b246:	6922      	ldr	r2, [r4, #16]
 800b248:	3202      	adds	r2, #2
 800b24a:	f104 010c 	add.w	r1, r4, #12
 800b24e:	0092      	lsls	r2, r2, #2
 800b250:	300c      	adds	r0, #12
 800b252:	f7ff ff4d 	bl	800b0f0 <memcpy>
 800b256:	4621      	mov	r1, r4
 800b258:	4638      	mov	r0, r7
 800b25a:	f7ff ffa3 	bl	800b1a4 <_Bfree>
 800b25e:	462c      	mov	r4, r5
 800b260:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b264:	3601      	adds	r6, #1
 800b266:	f8c3 8014 	str.w	r8, [r3, #20]
 800b26a:	6126      	str	r6, [r4, #16]
 800b26c:	4620      	mov	r0, r4
 800b26e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b272:	bf00      	nop
 800b274:	08013e8b 	.word	0x08013e8b
 800b278:	08013efc 	.word	0x08013efc

0800b27c <__hi0bits>:
 800b27c:	0c03      	lsrs	r3, r0, #16
 800b27e:	041b      	lsls	r3, r3, #16
 800b280:	b9d3      	cbnz	r3, 800b2b8 <__hi0bits+0x3c>
 800b282:	0400      	lsls	r0, r0, #16
 800b284:	2310      	movs	r3, #16
 800b286:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b28a:	bf04      	itt	eq
 800b28c:	0200      	lsleq	r0, r0, #8
 800b28e:	3308      	addeq	r3, #8
 800b290:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b294:	bf04      	itt	eq
 800b296:	0100      	lsleq	r0, r0, #4
 800b298:	3304      	addeq	r3, #4
 800b29a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b29e:	bf04      	itt	eq
 800b2a0:	0080      	lsleq	r0, r0, #2
 800b2a2:	3302      	addeq	r3, #2
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	db05      	blt.n	800b2b4 <__hi0bits+0x38>
 800b2a8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b2ac:	f103 0301 	add.w	r3, r3, #1
 800b2b0:	bf08      	it	eq
 800b2b2:	2320      	moveq	r3, #32
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	4770      	bx	lr
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	e7e4      	b.n	800b286 <__hi0bits+0xa>

0800b2bc <__lo0bits>:
 800b2bc:	6803      	ldr	r3, [r0, #0]
 800b2be:	f013 0207 	ands.w	r2, r3, #7
 800b2c2:	4601      	mov	r1, r0
 800b2c4:	d00b      	beq.n	800b2de <__lo0bits+0x22>
 800b2c6:	07da      	lsls	r2, r3, #31
 800b2c8:	d424      	bmi.n	800b314 <__lo0bits+0x58>
 800b2ca:	0798      	lsls	r0, r3, #30
 800b2cc:	bf49      	itett	mi
 800b2ce:	085b      	lsrmi	r3, r3, #1
 800b2d0:	089b      	lsrpl	r3, r3, #2
 800b2d2:	2001      	movmi	r0, #1
 800b2d4:	600b      	strmi	r3, [r1, #0]
 800b2d6:	bf5c      	itt	pl
 800b2d8:	600b      	strpl	r3, [r1, #0]
 800b2da:	2002      	movpl	r0, #2
 800b2dc:	4770      	bx	lr
 800b2de:	b298      	uxth	r0, r3
 800b2e0:	b9b0      	cbnz	r0, 800b310 <__lo0bits+0x54>
 800b2e2:	0c1b      	lsrs	r3, r3, #16
 800b2e4:	2010      	movs	r0, #16
 800b2e6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b2ea:	bf04      	itt	eq
 800b2ec:	0a1b      	lsreq	r3, r3, #8
 800b2ee:	3008      	addeq	r0, #8
 800b2f0:	071a      	lsls	r2, r3, #28
 800b2f2:	bf04      	itt	eq
 800b2f4:	091b      	lsreq	r3, r3, #4
 800b2f6:	3004      	addeq	r0, #4
 800b2f8:	079a      	lsls	r2, r3, #30
 800b2fa:	bf04      	itt	eq
 800b2fc:	089b      	lsreq	r3, r3, #2
 800b2fe:	3002      	addeq	r0, #2
 800b300:	07da      	lsls	r2, r3, #31
 800b302:	d403      	bmi.n	800b30c <__lo0bits+0x50>
 800b304:	085b      	lsrs	r3, r3, #1
 800b306:	f100 0001 	add.w	r0, r0, #1
 800b30a:	d005      	beq.n	800b318 <__lo0bits+0x5c>
 800b30c:	600b      	str	r3, [r1, #0]
 800b30e:	4770      	bx	lr
 800b310:	4610      	mov	r0, r2
 800b312:	e7e8      	b.n	800b2e6 <__lo0bits+0x2a>
 800b314:	2000      	movs	r0, #0
 800b316:	4770      	bx	lr
 800b318:	2020      	movs	r0, #32
 800b31a:	4770      	bx	lr

0800b31c <__i2b>:
 800b31c:	b510      	push	{r4, lr}
 800b31e:	460c      	mov	r4, r1
 800b320:	2101      	movs	r1, #1
 800b322:	f7ff feff 	bl	800b124 <_Balloc>
 800b326:	4602      	mov	r2, r0
 800b328:	b928      	cbnz	r0, 800b336 <__i2b+0x1a>
 800b32a:	4b05      	ldr	r3, [pc, #20]	; (800b340 <__i2b+0x24>)
 800b32c:	4805      	ldr	r0, [pc, #20]	; (800b344 <__i2b+0x28>)
 800b32e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b332:	f000 fd8f 	bl	800be54 <__assert_func>
 800b336:	2301      	movs	r3, #1
 800b338:	6144      	str	r4, [r0, #20]
 800b33a:	6103      	str	r3, [r0, #16]
 800b33c:	bd10      	pop	{r4, pc}
 800b33e:	bf00      	nop
 800b340:	08013e8b 	.word	0x08013e8b
 800b344:	08013efc 	.word	0x08013efc

0800b348 <__multiply>:
 800b348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b34c:	4614      	mov	r4, r2
 800b34e:	690a      	ldr	r2, [r1, #16]
 800b350:	6923      	ldr	r3, [r4, #16]
 800b352:	429a      	cmp	r2, r3
 800b354:	bfb8      	it	lt
 800b356:	460b      	movlt	r3, r1
 800b358:	460d      	mov	r5, r1
 800b35a:	bfbc      	itt	lt
 800b35c:	4625      	movlt	r5, r4
 800b35e:	461c      	movlt	r4, r3
 800b360:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b364:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b368:	68ab      	ldr	r3, [r5, #8]
 800b36a:	6869      	ldr	r1, [r5, #4]
 800b36c:	eb0a 0709 	add.w	r7, sl, r9
 800b370:	42bb      	cmp	r3, r7
 800b372:	b085      	sub	sp, #20
 800b374:	bfb8      	it	lt
 800b376:	3101      	addlt	r1, #1
 800b378:	f7ff fed4 	bl	800b124 <_Balloc>
 800b37c:	b930      	cbnz	r0, 800b38c <__multiply+0x44>
 800b37e:	4602      	mov	r2, r0
 800b380:	4b42      	ldr	r3, [pc, #264]	; (800b48c <__multiply+0x144>)
 800b382:	4843      	ldr	r0, [pc, #268]	; (800b490 <__multiply+0x148>)
 800b384:	f240 115d 	movw	r1, #349	; 0x15d
 800b388:	f000 fd64 	bl	800be54 <__assert_func>
 800b38c:	f100 0614 	add.w	r6, r0, #20
 800b390:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b394:	4633      	mov	r3, r6
 800b396:	2200      	movs	r2, #0
 800b398:	4543      	cmp	r3, r8
 800b39a:	d31e      	bcc.n	800b3da <__multiply+0x92>
 800b39c:	f105 0c14 	add.w	ip, r5, #20
 800b3a0:	f104 0314 	add.w	r3, r4, #20
 800b3a4:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b3a8:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b3ac:	9202      	str	r2, [sp, #8]
 800b3ae:	ebac 0205 	sub.w	r2, ip, r5
 800b3b2:	3a15      	subs	r2, #21
 800b3b4:	f022 0203 	bic.w	r2, r2, #3
 800b3b8:	3204      	adds	r2, #4
 800b3ba:	f105 0115 	add.w	r1, r5, #21
 800b3be:	458c      	cmp	ip, r1
 800b3c0:	bf38      	it	cc
 800b3c2:	2204      	movcc	r2, #4
 800b3c4:	9201      	str	r2, [sp, #4]
 800b3c6:	9a02      	ldr	r2, [sp, #8]
 800b3c8:	9303      	str	r3, [sp, #12]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d808      	bhi.n	800b3e0 <__multiply+0x98>
 800b3ce:	2f00      	cmp	r7, #0
 800b3d0:	dc55      	bgt.n	800b47e <__multiply+0x136>
 800b3d2:	6107      	str	r7, [r0, #16]
 800b3d4:	b005      	add	sp, #20
 800b3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3da:	f843 2b04 	str.w	r2, [r3], #4
 800b3de:	e7db      	b.n	800b398 <__multiply+0x50>
 800b3e0:	f8b3 a000 	ldrh.w	sl, [r3]
 800b3e4:	f1ba 0f00 	cmp.w	sl, #0
 800b3e8:	d020      	beq.n	800b42c <__multiply+0xe4>
 800b3ea:	f105 0e14 	add.w	lr, r5, #20
 800b3ee:	46b1      	mov	r9, r6
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b3f6:	f8d9 b000 	ldr.w	fp, [r9]
 800b3fa:	b2a1      	uxth	r1, r4
 800b3fc:	fa1f fb8b 	uxth.w	fp, fp
 800b400:	fb0a b101 	mla	r1, sl, r1, fp
 800b404:	4411      	add	r1, r2
 800b406:	f8d9 2000 	ldr.w	r2, [r9]
 800b40a:	0c24      	lsrs	r4, r4, #16
 800b40c:	0c12      	lsrs	r2, r2, #16
 800b40e:	fb0a 2404 	mla	r4, sl, r4, r2
 800b412:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b416:	b289      	uxth	r1, r1
 800b418:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b41c:	45f4      	cmp	ip, lr
 800b41e:	f849 1b04 	str.w	r1, [r9], #4
 800b422:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b426:	d8e4      	bhi.n	800b3f2 <__multiply+0xaa>
 800b428:	9901      	ldr	r1, [sp, #4]
 800b42a:	5072      	str	r2, [r6, r1]
 800b42c:	9a03      	ldr	r2, [sp, #12]
 800b42e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b432:	3304      	adds	r3, #4
 800b434:	f1b9 0f00 	cmp.w	r9, #0
 800b438:	d01f      	beq.n	800b47a <__multiply+0x132>
 800b43a:	6834      	ldr	r4, [r6, #0]
 800b43c:	f105 0114 	add.w	r1, r5, #20
 800b440:	46b6      	mov	lr, r6
 800b442:	f04f 0a00 	mov.w	sl, #0
 800b446:	880a      	ldrh	r2, [r1, #0]
 800b448:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b44c:	fb09 b202 	mla	r2, r9, r2, fp
 800b450:	4492      	add	sl, r2
 800b452:	b2a4      	uxth	r4, r4
 800b454:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b458:	f84e 4b04 	str.w	r4, [lr], #4
 800b45c:	f851 4b04 	ldr.w	r4, [r1], #4
 800b460:	f8be 2000 	ldrh.w	r2, [lr]
 800b464:	0c24      	lsrs	r4, r4, #16
 800b466:	fb09 2404 	mla	r4, r9, r4, r2
 800b46a:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b46e:	458c      	cmp	ip, r1
 800b470:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b474:	d8e7      	bhi.n	800b446 <__multiply+0xfe>
 800b476:	9a01      	ldr	r2, [sp, #4]
 800b478:	50b4      	str	r4, [r6, r2]
 800b47a:	3604      	adds	r6, #4
 800b47c:	e7a3      	b.n	800b3c6 <__multiply+0x7e>
 800b47e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1a5      	bne.n	800b3d2 <__multiply+0x8a>
 800b486:	3f01      	subs	r7, #1
 800b488:	e7a1      	b.n	800b3ce <__multiply+0x86>
 800b48a:	bf00      	nop
 800b48c:	08013e8b 	.word	0x08013e8b
 800b490:	08013efc 	.word	0x08013efc

0800b494 <__pow5mult>:
 800b494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b498:	4615      	mov	r5, r2
 800b49a:	f012 0203 	ands.w	r2, r2, #3
 800b49e:	4606      	mov	r6, r0
 800b4a0:	460f      	mov	r7, r1
 800b4a2:	d007      	beq.n	800b4b4 <__pow5mult+0x20>
 800b4a4:	4c25      	ldr	r4, [pc, #148]	; (800b53c <__pow5mult+0xa8>)
 800b4a6:	3a01      	subs	r2, #1
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b4ae:	f7ff fe9b 	bl	800b1e8 <__multadd>
 800b4b2:	4607      	mov	r7, r0
 800b4b4:	10ad      	asrs	r5, r5, #2
 800b4b6:	d03d      	beq.n	800b534 <__pow5mult+0xa0>
 800b4b8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b4ba:	b97c      	cbnz	r4, 800b4dc <__pow5mult+0x48>
 800b4bc:	2010      	movs	r0, #16
 800b4be:	f7fd fe93 	bl	80091e8 <malloc>
 800b4c2:	4602      	mov	r2, r0
 800b4c4:	6270      	str	r0, [r6, #36]	; 0x24
 800b4c6:	b928      	cbnz	r0, 800b4d4 <__pow5mult+0x40>
 800b4c8:	4b1d      	ldr	r3, [pc, #116]	; (800b540 <__pow5mult+0xac>)
 800b4ca:	481e      	ldr	r0, [pc, #120]	; (800b544 <__pow5mult+0xb0>)
 800b4cc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b4d0:	f000 fcc0 	bl	800be54 <__assert_func>
 800b4d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b4d8:	6004      	str	r4, [r0, #0]
 800b4da:	60c4      	str	r4, [r0, #12]
 800b4dc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b4e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b4e4:	b94c      	cbnz	r4, 800b4fa <__pow5mult+0x66>
 800b4e6:	f240 2171 	movw	r1, #625	; 0x271
 800b4ea:	4630      	mov	r0, r6
 800b4ec:	f7ff ff16 	bl	800b31c <__i2b>
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	f8c8 0008 	str.w	r0, [r8, #8]
 800b4f6:	4604      	mov	r4, r0
 800b4f8:	6003      	str	r3, [r0, #0]
 800b4fa:	f04f 0900 	mov.w	r9, #0
 800b4fe:	07eb      	lsls	r3, r5, #31
 800b500:	d50a      	bpl.n	800b518 <__pow5mult+0x84>
 800b502:	4639      	mov	r1, r7
 800b504:	4622      	mov	r2, r4
 800b506:	4630      	mov	r0, r6
 800b508:	f7ff ff1e 	bl	800b348 <__multiply>
 800b50c:	4639      	mov	r1, r7
 800b50e:	4680      	mov	r8, r0
 800b510:	4630      	mov	r0, r6
 800b512:	f7ff fe47 	bl	800b1a4 <_Bfree>
 800b516:	4647      	mov	r7, r8
 800b518:	106d      	asrs	r5, r5, #1
 800b51a:	d00b      	beq.n	800b534 <__pow5mult+0xa0>
 800b51c:	6820      	ldr	r0, [r4, #0]
 800b51e:	b938      	cbnz	r0, 800b530 <__pow5mult+0x9c>
 800b520:	4622      	mov	r2, r4
 800b522:	4621      	mov	r1, r4
 800b524:	4630      	mov	r0, r6
 800b526:	f7ff ff0f 	bl	800b348 <__multiply>
 800b52a:	6020      	str	r0, [r4, #0]
 800b52c:	f8c0 9000 	str.w	r9, [r0]
 800b530:	4604      	mov	r4, r0
 800b532:	e7e4      	b.n	800b4fe <__pow5mult+0x6a>
 800b534:	4638      	mov	r0, r7
 800b536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b53a:	bf00      	nop
 800b53c:	08014050 	.word	0x08014050
 800b540:	08013e15 	.word	0x08013e15
 800b544:	08013efc 	.word	0x08013efc

0800b548 <__lshift>:
 800b548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b54c:	460c      	mov	r4, r1
 800b54e:	6849      	ldr	r1, [r1, #4]
 800b550:	6923      	ldr	r3, [r4, #16]
 800b552:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b556:	68a3      	ldr	r3, [r4, #8]
 800b558:	4607      	mov	r7, r0
 800b55a:	4691      	mov	r9, r2
 800b55c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b560:	f108 0601 	add.w	r6, r8, #1
 800b564:	42b3      	cmp	r3, r6
 800b566:	db0b      	blt.n	800b580 <__lshift+0x38>
 800b568:	4638      	mov	r0, r7
 800b56a:	f7ff fddb 	bl	800b124 <_Balloc>
 800b56e:	4605      	mov	r5, r0
 800b570:	b948      	cbnz	r0, 800b586 <__lshift+0x3e>
 800b572:	4602      	mov	r2, r0
 800b574:	4b28      	ldr	r3, [pc, #160]	; (800b618 <__lshift+0xd0>)
 800b576:	4829      	ldr	r0, [pc, #164]	; (800b61c <__lshift+0xd4>)
 800b578:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b57c:	f000 fc6a 	bl	800be54 <__assert_func>
 800b580:	3101      	adds	r1, #1
 800b582:	005b      	lsls	r3, r3, #1
 800b584:	e7ee      	b.n	800b564 <__lshift+0x1c>
 800b586:	2300      	movs	r3, #0
 800b588:	f100 0114 	add.w	r1, r0, #20
 800b58c:	f100 0210 	add.w	r2, r0, #16
 800b590:	4618      	mov	r0, r3
 800b592:	4553      	cmp	r3, sl
 800b594:	db33      	blt.n	800b5fe <__lshift+0xb6>
 800b596:	6920      	ldr	r0, [r4, #16]
 800b598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b59c:	f104 0314 	add.w	r3, r4, #20
 800b5a0:	f019 091f 	ands.w	r9, r9, #31
 800b5a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b5a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b5ac:	d02b      	beq.n	800b606 <__lshift+0xbe>
 800b5ae:	f1c9 0e20 	rsb	lr, r9, #32
 800b5b2:	468a      	mov	sl, r1
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	6818      	ldr	r0, [r3, #0]
 800b5b8:	fa00 f009 	lsl.w	r0, r0, r9
 800b5bc:	4302      	orrs	r2, r0
 800b5be:	f84a 2b04 	str.w	r2, [sl], #4
 800b5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b5c6:	459c      	cmp	ip, r3
 800b5c8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b5cc:	d8f3      	bhi.n	800b5b6 <__lshift+0x6e>
 800b5ce:	ebac 0304 	sub.w	r3, ip, r4
 800b5d2:	3b15      	subs	r3, #21
 800b5d4:	f023 0303 	bic.w	r3, r3, #3
 800b5d8:	3304      	adds	r3, #4
 800b5da:	f104 0015 	add.w	r0, r4, #21
 800b5de:	4584      	cmp	ip, r0
 800b5e0:	bf38      	it	cc
 800b5e2:	2304      	movcc	r3, #4
 800b5e4:	50ca      	str	r2, [r1, r3]
 800b5e6:	b10a      	cbz	r2, 800b5ec <__lshift+0xa4>
 800b5e8:	f108 0602 	add.w	r6, r8, #2
 800b5ec:	3e01      	subs	r6, #1
 800b5ee:	4638      	mov	r0, r7
 800b5f0:	612e      	str	r6, [r5, #16]
 800b5f2:	4621      	mov	r1, r4
 800b5f4:	f7ff fdd6 	bl	800b1a4 <_Bfree>
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5fe:	f842 0f04 	str.w	r0, [r2, #4]!
 800b602:	3301      	adds	r3, #1
 800b604:	e7c5      	b.n	800b592 <__lshift+0x4a>
 800b606:	3904      	subs	r1, #4
 800b608:	f853 2b04 	ldr.w	r2, [r3], #4
 800b60c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b610:	459c      	cmp	ip, r3
 800b612:	d8f9      	bhi.n	800b608 <__lshift+0xc0>
 800b614:	e7ea      	b.n	800b5ec <__lshift+0xa4>
 800b616:	bf00      	nop
 800b618:	08013e8b 	.word	0x08013e8b
 800b61c:	08013efc 	.word	0x08013efc

0800b620 <__mcmp>:
 800b620:	b530      	push	{r4, r5, lr}
 800b622:	6902      	ldr	r2, [r0, #16]
 800b624:	690c      	ldr	r4, [r1, #16]
 800b626:	1b12      	subs	r2, r2, r4
 800b628:	d10e      	bne.n	800b648 <__mcmp+0x28>
 800b62a:	f100 0314 	add.w	r3, r0, #20
 800b62e:	3114      	adds	r1, #20
 800b630:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b634:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b638:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b63c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b640:	42a5      	cmp	r5, r4
 800b642:	d003      	beq.n	800b64c <__mcmp+0x2c>
 800b644:	d305      	bcc.n	800b652 <__mcmp+0x32>
 800b646:	2201      	movs	r2, #1
 800b648:	4610      	mov	r0, r2
 800b64a:	bd30      	pop	{r4, r5, pc}
 800b64c:	4283      	cmp	r3, r0
 800b64e:	d3f3      	bcc.n	800b638 <__mcmp+0x18>
 800b650:	e7fa      	b.n	800b648 <__mcmp+0x28>
 800b652:	f04f 32ff 	mov.w	r2, #4294967295
 800b656:	e7f7      	b.n	800b648 <__mcmp+0x28>

0800b658 <__mdiff>:
 800b658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b65c:	460c      	mov	r4, r1
 800b65e:	4606      	mov	r6, r0
 800b660:	4611      	mov	r1, r2
 800b662:	4620      	mov	r0, r4
 800b664:	4617      	mov	r7, r2
 800b666:	f7ff ffdb 	bl	800b620 <__mcmp>
 800b66a:	1e05      	subs	r5, r0, #0
 800b66c:	d110      	bne.n	800b690 <__mdiff+0x38>
 800b66e:	4629      	mov	r1, r5
 800b670:	4630      	mov	r0, r6
 800b672:	f7ff fd57 	bl	800b124 <_Balloc>
 800b676:	b930      	cbnz	r0, 800b686 <__mdiff+0x2e>
 800b678:	4b39      	ldr	r3, [pc, #228]	; (800b760 <__mdiff+0x108>)
 800b67a:	4602      	mov	r2, r0
 800b67c:	f240 2132 	movw	r1, #562	; 0x232
 800b680:	4838      	ldr	r0, [pc, #224]	; (800b764 <__mdiff+0x10c>)
 800b682:	f000 fbe7 	bl	800be54 <__assert_func>
 800b686:	2301      	movs	r3, #1
 800b688:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b68c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b690:	bfa4      	itt	ge
 800b692:	463b      	movge	r3, r7
 800b694:	4627      	movge	r7, r4
 800b696:	4630      	mov	r0, r6
 800b698:	6879      	ldr	r1, [r7, #4]
 800b69a:	bfa6      	itte	ge
 800b69c:	461c      	movge	r4, r3
 800b69e:	2500      	movge	r5, #0
 800b6a0:	2501      	movlt	r5, #1
 800b6a2:	f7ff fd3f 	bl	800b124 <_Balloc>
 800b6a6:	b920      	cbnz	r0, 800b6b2 <__mdiff+0x5a>
 800b6a8:	4b2d      	ldr	r3, [pc, #180]	; (800b760 <__mdiff+0x108>)
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b6b0:	e7e6      	b.n	800b680 <__mdiff+0x28>
 800b6b2:	693e      	ldr	r6, [r7, #16]
 800b6b4:	60c5      	str	r5, [r0, #12]
 800b6b6:	6925      	ldr	r5, [r4, #16]
 800b6b8:	f107 0114 	add.w	r1, r7, #20
 800b6bc:	f104 0914 	add.w	r9, r4, #20
 800b6c0:	f100 0e14 	add.w	lr, r0, #20
 800b6c4:	f107 0210 	add.w	r2, r7, #16
 800b6c8:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b6cc:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b6d0:	46f2      	mov	sl, lr
 800b6d2:	2700      	movs	r7, #0
 800b6d4:	f859 3b04 	ldr.w	r3, [r9], #4
 800b6d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b6dc:	fa1f f883 	uxth.w	r8, r3
 800b6e0:	fa17 f78b 	uxtah	r7, r7, fp
 800b6e4:	0c1b      	lsrs	r3, r3, #16
 800b6e6:	eba7 0808 	sub.w	r8, r7, r8
 800b6ea:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b6ee:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b6f2:	fa1f f888 	uxth.w	r8, r8
 800b6f6:	141f      	asrs	r7, r3, #16
 800b6f8:	454d      	cmp	r5, r9
 800b6fa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b6fe:	f84a 3b04 	str.w	r3, [sl], #4
 800b702:	d8e7      	bhi.n	800b6d4 <__mdiff+0x7c>
 800b704:	1b2b      	subs	r3, r5, r4
 800b706:	3b15      	subs	r3, #21
 800b708:	f023 0303 	bic.w	r3, r3, #3
 800b70c:	3304      	adds	r3, #4
 800b70e:	3415      	adds	r4, #21
 800b710:	42a5      	cmp	r5, r4
 800b712:	bf38      	it	cc
 800b714:	2304      	movcc	r3, #4
 800b716:	4419      	add	r1, r3
 800b718:	4473      	add	r3, lr
 800b71a:	469e      	mov	lr, r3
 800b71c:	460d      	mov	r5, r1
 800b71e:	4565      	cmp	r5, ip
 800b720:	d30e      	bcc.n	800b740 <__mdiff+0xe8>
 800b722:	f10c 0203 	add.w	r2, ip, #3
 800b726:	1a52      	subs	r2, r2, r1
 800b728:	f022 0203 	bic.w	r2, r2, #3
 800b72c:	3903      	subs	r1, #3
 800b72e:	458c      	cmp	ip, r1
 800b730:	bf38      	it	cc
 800b732:	2200      	movcc	r2, #0
 800b734:	441a      	add	r2, r3
 800b736:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b73a:	b17b      	cbz	r3, 800b75c <__mdiff+0x104>
 800b73c:	6106      	str	r6, [r0, #16]
 800b73e:	e7a5      	b.n	800b68c <__mdiff+0x34>
 800b740:	f855 8b04 	ldr.w	r8, [r5], #4
 800b744:	fa17 f488 	uxtah	r4, r7, r8
 800b748:	1422      	asrs	r2, r4, #16
 800b74a:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b74e:	b2a4      	uxth	r4, r4
 800b750:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b754:	f84e 4b04 	str.w	r4, [lr], #4
 800b758:	1417      	asrs	r7, r2, #16
 800b75a:	e7e0      	b.n	800b71e <__mdiff+0xc6>
 800b75c:	3e01      	subs	r6, #1
 800b75e:	e7ea      	b.n	800b736 <__mdiff+0xde>
 800b760:	08013e8b 	.word	0x08013e8b
 800b764:	08013efc 	.word	0x08013efc

0800b768 <__d2b>:
 800b768:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b76c:	4689      	mov	r9, r1
 800b76e:	2101      	movs	r1, #1
 800b770:	ec57 6b10 	vmov	r6, r7, d0
 800b774:	4690      	mov	r8, r2
 800b776:	f7ff fcd5 	bl	800b124 <_Balloc>
 800b77a:	4604      	mov	r4, r0
 800b77c:	b930      	cbnz	r0, 800b78c <__d2b+0x24>
 800b77e:	4602      	mov	r2, r0
 800b780:	4b25      	ldr	r3, [pc, #148]	; (800b818 <__d2b+0xb0>)
 800b782:	4826      	ldr	r0, [pc, #152]	; (800b81c <__d2b+0xb4>)
 800b784:	f240 310a 	movw	r1, #778	; 0x30a
 800b788:	f000 fb64 	bl	800be54 <__assert_func>
 800b78c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b790:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b794:	bb35      	cbnz	r5, 800b7e4 <__d2b+0x7c>
 800b796:	2e00      	cmp	r6, #0
 800b798:	9301      	str	r3, [sp, #4]
 800b79a:	d028      	beq.n	800b7ee <__d2b+0x86>
 800b79c:	4668      	mov	r0, sp
 800b79e:	9600      	str	r6, [sp, #0]
 800b7a0:	f7ff fd8c 	bl	800b2bc <__lo0bits>
 800b7a4:	9900      	ldr	r1, [sp, #0]
 800b7a6:	b300      	cbz	r0, 800b7ea <__d2b+0x82>
 800b7a8:	9a01      	ldr	r2, [sp, #4]
 800b7aa:	f1c0 0320 	rsb	r3, r0, #32
 800b7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b7b2:	430b      	orrs	r3, r1
 800b7b4:	40c2      	lsrs	r2, r0
 800b7b6:	6163      	str	r3, [r4, #20]
 800b7b8:	9201      	str	r2, [sp, #4]
 800b7ba:	9b01      	ldr	r3, [sp, #4]
 800b7bc:	61a3      	str	r3, [r4, #24]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	bf14      	ite	ne
 800b7c2:	2202      	movne	r2, #2
 800b7c4:	2201      	moveq	r2, #1
 800b7c6:	6122      	str	r2, [r4, #16]
 800b7c8:	b1d5      	cbz	r5, 800b800 <__d2b+0x98>
 800b7ca:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b7ce:	4405      	add	r5, r0
 800b7d0:	f8c9 5000 	str.w	r5, [r9]
 800b7d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b7d8:	f8c8 0000 	str.w	r0, [r8]
 800b7dc:	4620      	mov	r0, r4
 800b7de:	b003      	add	sp, #12
 800b7e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b7e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b7e8:	e7d5      	b.n	800b796 <__d2b+0x2e>
 800b7ea:	6161      	str	r1, [r4, #20]
 800b7ec:	e7e5      	b.n	800b7ba <__d2b+0x52>
 800b7ee:	a801      	add	r0, sp, #4
 800b7f0:	f7ff fd64 	bl	800b2bc <__lo0bits>
 800b7f4:	9b01      	ldr	r3, [sp, #4]
 800b7f6:	6163      	str	r3, [r4, #20]
 800b7f8:	2201      	movs	r2, #1
 800b7fa:	6122      	str	r2, [r4, #16]
 800b7fc:	3020      	adds	r0, #32
 800b7fe:	e7e3      	b.n	800b7c8 <__d2b+0x60>
 800b800:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b804:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b808:	f8c9 0000 	str.w	r0, [r9]
 800b80c:	6918      	ldr	r0, [r3, #16]
 800b80e:	f7ff fd35 	bl	800b27c <__hi0bits>
 800b812:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b816:	e7df      	b.n	800b7d8 <__d2b+0x70>
 800b818:	08013e8b 	.word	0x08013e8b
 800b81c:	08013efc 	.word	0x08013efc

0800b820 <_calloc_r>:
 800b820:	b513      	push	{r0, r1, r4, lr}
 800b822:	434a      	muls	r2, r1
 800b824:	4611      	mov	r1, r2
 800b826:	9201      	str	r2, [sp, #4]
 800b828:	f7fd fd46 	bl	80092b8 <_malloc_r>
 800b82c:	4604      	mov	r4, r0
 800b82e:	b118      	cbz	r0, 800b838 <_calloc_r+0x18>
 800b830:	9a01      	ldr	r2, [sp, #4]
 800b832:	2100      	movs	r1, #0
 800b834:	f7fd fce8 	bl	8009208 <memset>
 800b838:	4620      	mov	r0, r4
 800b83a:	b002      	add	sp, #8
 800b83c:	bd10      	pop	{r4, pc}

0800b83e <__ssputs_r>:
 800b83e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b842:	688e      	ldr	r6, [r1, #8]
 800b844:	429e      	cmp	r6, r3
 800b846:	4682      	mov	sl, r0
 800b848:	460c      	mov	r4, r1
 800b84a:	4690      	mov	r8, r2
 800b84c:	461f      	mov	r7, r3
 800b84e:	d838      	bhi.n	800b8c2 <__ssputs_r+0x84>
 800b850:	898a      	ldrh	r2, [r1, #12]
 800b852:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b856:	d032      	beq.n	800b8be <__ssputs_r+0x80>
 800b858:	6825      	ldr	r5, [r4, #0]
 800b85a:	6909      	ldr	r1, [r1, #16]
 800b85c:	eba5 0901 	sub.w	r9, r5, r1
 800b860:	6965      	ldr	r5, [r4, #20]
 800b862:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b866:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b86a:	3301      	adds	r3, #1
 800b86c:	444b      	add	r3, r9
 800b86e:	106d      	asrs	r5, r5, #1
 800b870:	429d      	cmp	r5, r3
 800b872:	bf38      	it	cc
 800b874:	461d      	movcc	r5, r3
 800b876:	0553      	lsls	r3, r2, #21
 800b878:	d531      	bpl.n	800b8de <__ssputs_r+0xa0>
 800b87a:	4629      	mov	r1, r5
 800b87c:	f7fd fd1c 	bl	80092b8 <_malloc_r>
 800b880:	4606      	mov	r6, r0
 800b882:	b950      	cbnz	r0, 800b89a <__ssputs_r+0x5c>
 800b884:	230c      	movs	r3, #12
 800b886:	f8ca 3000 	str.w	r3, [sl]
 800b88a:	89a3      	ldrh	r3, [r4, #12]
 800b88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b890:	81a3      	strh	r3, [r4, #12]
 800b892:	f04f 30ff 	mov.w	r0, #4294967295
 800b896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b89a:	6921      	ldr	r1, [r4, #16]
 800b89c:	464a      	mov	r2, r9
 800b89e:	f7ff fc27 	bl	800b0f0 <memcpy>
 800b8a2:	89a3      	ldrh	r3, [r4, #12]
 800b8a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ac:	81a3      	strh	r3, [r4, #12]
 800b8ae:	6126      	str	r6, [r4, #16]
 800b8b0:	6165      	str	r5, [r4, #20]
 800b8b2:	444e      	add	r6, r9
 800b8b4:	eba5 0509 	sub.w	r5, r5, r9
 800b8b8:	6026      	str	r6, [r4, #0]
 800b8ba:	60a5      	str	r5, [r4, #8]
 800b8bc:	463e      	mov	r6, r7
 800b8be:	42be      	cmp	r6, r7
 800b8c0:	d900      	bls.n	800b8c4 <__ssputs_r+0x86>
 800b8c2:	463e      	mov	r6, r7
 800b8c4:	4632      	mov	r2, r6
 800b8c6:	6820      	ldr	r0, [r4, #0]
 800b8c8:	4641      	mov	r1, r8
 800b8ca:	f000 fb49 	bl	800bf60 <memmove>
 800b8ce:	68a3      	ldr	r3, [r4, #8]
 800b8d0:	6822      	ldr	r2, [r4, #0]
 800b8d2:	1b9b      	subs	r3, r3, r6
 800b8d4:	4432      	add	r2, r6
 800b8d6:	60a3      	str	r3, [r4, #8]
 800b8d8:	6022      	str	r2, [r4, #0]
 800b8da:	2000      	movs	r0, #0
 800b8dc:	e7db      	b.n	800b896 <__ssputs_r+0x58>
 800b8de:	462a      	mov	r2, r5
 800b8e0:	f000 fb58 	bl	800bf94 <_realloc_r>
 800b8e4:	4606      	mov	r6, r0
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d1e1      	bne.n	800b8ae <__ssputs_r+0x70>
 800b8ea:	6921      	ldr	r1, [r4, #16]
 800b8ec:	4650      	mov	r0, sl
 800b8ee:	f7fd fc93 	bl	8009218 <_free_r>
 800b8f2:	e7c7      	b.n	800b884 <__ssputs_r+0x46>

0800b8f4 <_svfiprintf_r>:
 800b8f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8f8:	4698      	mov	r8, r3
 800b8fa:	898b      	ldrh	r3, [r1, #12]
 800b8fc:	061b      	lsls	r3, r3, #24
 800b8fe:	b09d      	sub	sp, #116	; 0x74
 800b900:	4607      	mov	r7, r0
 800b902:	460d      	mov	r5, r1
 800b904:	4614      	mov	r4, r2
 800b906:	d50e      	bpl.n	800b926 <_svfiprintf_r+0x32>
 800b908:	690b      	ldr	r3, [r1, #16]
 800b90a:	b963      	cbnz	r3, 800b926 <_svfiprintf_r+0x32>
 800b90c:	2140      	movs	r1, #64	; 0x40
 800b90e:	f7fd fcd3 	bl	80092b8 <_malloc_r>
 800b912:	6028      	str	r0, [r5, #0]
 800b914:	6128      	str	r0, [r5, #16]
 800b916:	b920      	cbnz	r0, 800b922 <_svfiprintf_r+0x2e>
 800b918:	230c      	movs	r3, #12
 800b91a:	603b      	str	r3, [r7, #0]
 800b91c:	f04f 30ff 	mov.w	r0, #4294967295
 800b920:	e0d1      	b.n	800bac6 <_svfiprintf_r+0x1d2>
 800b922:	2340      	movs	r3, #64	; 0x40
 800b924:	616b      	str	r3, [r5, #20]
 800b926:	2300      	movs	r3, #0
 800b928:	9309      	str	r3, [sp, #36]	; 0x24
 800b92a:	2320      	movs	r3, #32
 800b92c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b930:	f8cd 800c 	str.w	r8, [sp, #12]
 800b934:	2330      	movs	r3, #48	; 0x30
 800b936:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bae0 <_svfiprintf_r+0x1ec>
 800b93a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b93e:	f04f 0901 	mov.w	r9, #1
 800b942:	4623      	mov	r3, r4
 800b944:	469a      	mov	sl, r3
 800b946:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b94a:	b10a      	cbz	r2, 800b950 <_svfiprintf_r+0x5c>
 800b94c:	2a25      	cmp	r2, #37	; 0x25
 800b94e:	d1f9      	bne.n	800b944 <_svfiprintf_r+0x50>
 800b950:	ebba 0b04 	subs.w	fp, sl, r4
 800b954:	d00b      	beq.n	800b96e <_svfiprintf_r+0x7a>
 800b956:	465b      	mov	r3, fp
 800b958:	4622      	mov	r2, r4
 800b95a:	4629      	mov	r1, r5
 800b95c:	4638      	mov	r0, r7
 800b95e:	f7ff ff6e 	bl	800b83e <__ssputs_r>
 800b962:	3001      	adds	r0, #1
 800b964:	f000 80aa 	beq.w	800babc <_svfiprintf_r+0x1c8>
 800b968:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b96a:	445a      	add	r2, fp
 800b96c:	9209      	str	r2, [sp, #36]	; 0x24
 800b96e:	f89a 3000 	ldrb.w	r3, [sl]
 800b972:	2b00      	cmp	r3, #0
 800b974:	f000 80a2 	beq.w	800babc <_svfiprintf_r+0x1c8>
 800b978:	2300      	movs	r3, #0
 800b97a:	f04f 32ff 	mov.w	r2, #4294967295
 800b97e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b982:	f10a 0a01 	add.w	sl, sl, #1
 800b986:	9304      	str	r3, [sp, #16]
 800b988:	9307      	str	r3, [sp, #28]
 800b98a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b98e:	931a      	str	r3, [sp, #104]	; 0x68
 800b990:	4654      	mov	r4, sl
 800b992:	2205      	movs	r2, #5
 800b994:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b998:	4851      	ldr	r0, [pc, #324]	; (800bae0 <_svfiprintf_r+0x1ec>)
 800b99a:	f7f4 fc51 	bl	8000240 <memchr>
 800b99e:	9a04      	ldr	r2, [sp, #16]
 800b9a0:	b9d8      	cbnz	r0, 800b9da <_svfiprintf_r+0xe6>
 800b9a2:	06d0      	lsls	r0, r2, #27
 800b9a4:	bf44      	itt	mi
 800b9a6:	2320      	movmi	r3, #32
 800b9a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ac:	0711      	lsls	r1, r2, #28
 800b9ae:	bf44      	itt	mi
 800b9b0:	232b      	movmi	r3, #43	; 0x2b
 800b9b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9b6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ba:	2b2a      	cmp	r3, #42	; 0x2a
 800b9bc:	d015      	beq.n	800b9ea <_svfiprintf_r+0xf6>
 800b9be:	9a07      	ldr	r2, [sp, #28]
 800b9c0:	4654      	mov	r4, sl
 800b9c2:	2000      	movs	r0, #0
 800b9c4:	f04f 0c0a 	mov.w	ip, #10
 800b9c8:	4621      	mov	r1, r4
 800b9ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9ce:	3b30      	subs	r3, #48	; 0x30
 800b9d0:	2b09      	cmp	r3, #9
 800b9d2:	d94e      	bls.n	800ba72 <_svfiprintf_r+0x17e>
 800b9d4:	b1b0      	cbz	r0, 800ba04 <_svfiprintf_r+0x110>
 800b9d6:	9207      	str	r2, [sp, #28]
 800b9d8:	e014      	b.n	800ba04 <_svfiprintf_r+0x110>
 800b9da:	eba0 0308 	sub.w	r3, r0, r8
 800b9de:	fa09 f303 	lsl.w	r3, r9, r3
 800b9e2:	4313      	orrs	r3, r2
 800b9e4:	9304      	str	r3, [sp, #16]
 800b9e6:	46a2      	mov	sl, r4
 800b9e8:	e7d2      	b.n	800b990 <_svfiprintf_r+0x9c>
 800b9ea:	9b03      	ldr	r3, [sp, #12]
 800b9ec:	1d19      	adds	r1, r3, #4
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	9103      	str	r1, [sp, #12]
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	bfbb      	ittet	lt
 800b9f6:	425b      	neglt	r3, r3
 800b9f8:	f042 0202 	orrlt.w	r2, r2, #2
 800b9fc:	9307      	strge	r3, [sp, #28]
 800b9fe:	9307      	strlt	r3, [sp, #28]
 800ba00:	bfb8      	it	lt
 800ba02:	9204      	strlt	r2, [sp, #16]
 800ba04:	7823      	ldrb	r3, [r4, #0]
 800ba06:	2b2e      	cmp	r3, #46	; 0x2e
 800ba08:	d10c      	bne.n	800ba24 <_svfiprintf_r+0x130>
 800ba0a:	7863      	ldrb	r3, [r4, #1]
 800ba0c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba0e:	d135      	bne.n	800ba7c <_svfiprintf_r+0x188>
 800ba10:	9b03      	ldr	r3, [sp, #12]
 800ba12:	1d1a      	adds	r2, r3, #4
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	9203      	str	r2, [sp, #12]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	bfb8      	it	lt
 800ba1c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba20:	3402      	adds	r4, #2
 800ba22:	9305      	str	r3, [sp, #20]
 800ba24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800baf0 <_svfiprintf_r+0x1fc>
 800ba28:	7821      	ldrb	r1, [r4, #0]
 800ba2a:	2203      	movs	r2, #3
 800ba2c:	4650      	mov	r0, sl
 800ba2e:	f7f4 fc07 	bl	8000240 <memchr>
 800ba32:	b140      	cbz	r0, 800ba46 <_svfiprintf_r+0x152>
 800ba34:	2340      	movs	r3, #64	; 0x40
 800ba36:	eba0 000a 	sub.w	r0, r0, sl
 800ba3a:	fa03 f000 	lsl.w	r0, r3, r0
 800ba3e:	9b04      	ldr	r3, [sp, #16]
 800ba40:	4303      	orrs	r3, r0
 800ba42:	3401      	adds	r4, #1
 800ba44:	9304      	str	r3, [sp, #16]
 800ba46:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba4a:	4826      	ldr	r0, [pc, #152]	; (800bae4 <_svfiprintf_r+0x1f0>)
 800ba4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba50:	2206      	movs	r2, #6
 800ba52:	f7f4 fbf5 	bl	8000240 <memchr>
 800ba56:	2800      	cmp	r0, #0
 800ba58:	d038      	beq.n	800bacc <_svfiprintf_r+0x1d8>
 800ba5a:	4b23      	ldr	r3, [pc, #140]	; (800bae8 <_svfiprintf_r+0x1f4>)
 800ba5c:	bb1b      	cbnz	r3, 800baa6 <_svfiprintf_r+0x1b2>
 800ba5e:	9b03      	ldr	r3, [sp, #12]
 800ba60:	3307      	adds	r3, #7
 800ba62:	f023 0307 	bic.w	r3, r3, #7
 800ba66:	3308      	adds	r3, #8
 800ba68:	9303      	str	r3, [sp, #12]
 800ba6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba6c:	4433      	add	r3, r6
 800ba6e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba70:	e767      	b.n	800b942 <_svfiprintf_r+0x4e>
 800ba72:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba76:	460c      	mov	r4, r1
 800ba78:	2001      	movs	r0, #1
 800ba7a:	e7a5      	b.n	800b9c8 <_svfiprintf_r+0xd4>
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	3401      	adds	r4, #1
 800ba80:	9305      	str	r3, [sp, #20]
 800ba82:	4619      	mov	r1, r3
 800ba84:	f04f 0c0a 	mov.w	ip, #10
 800ba88:	4620      	mov	r0, r4
 800ba8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba8e:	3a30      	subs	r2, #48	; 0x30
 800ba90:	2a09      	cmp	r2, #9
 800ba92:	d903      	bls.n	800ba9c <_svfiprintf_r+0x1a8>
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d0c5      	beq.n	800ba24 <_svfiprintf_r+0x130>
 800ba98:	9105      	str	r1, [sp, #20]
 800ba9a:	e7c3      	b.n	800ba24 <_svfiprintf_r+0x130>
 800ba9c:	fb0c 2101 	mla	r1, ip, r1, r2
 800baa0:	4604      	mov	r4, r0
 800baa2:	2301      	movs	r3, #1
 800baa4:	e7f0      	b.n	800ba88 <_svfiprintf_r+0x194>
 800baa6:	ab03      	add	r3, sp, #12
 800baa8:	9300      	str	r3, [sp, #0]
 800baaa:	462a      	mov	r2, r5
 800baac:	4b0f      	ldr	r3, [pc, #60]	; (800baec <_svfiprintf_r+0x1f8>)
 800baae:	a904      	add	r1, sp, #16
 800bab0:	4638      	mov	r0, r7
 800bab2:	f7fd fcfb 	bl	80094ac <_printf_float>
 800bab6:	1c42      	adds	r2, r0, #1
 800bab8:	4606      	mov	r6, r0
 800baba:	d1d6      	bne.n	800ba6a <_svfiprintf_r+0x176>
 800babc:	89ab      	ldrh	r3, [r5, #12]
 800babe:	065b      	lsls	r3, r3, #25
 800bac0:	f53f af2c 	bmi.w	800b91c <_svfiprintf_r+0x28>
 800bac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bac6:	b01d      	add	sp, #116	; 0x74
 800bac8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bacc:	ab03      	add	r3, sp, #12
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	462a      	mov	r2, r5
 800bad2:	4b06      	ldr	r3, [pc, #24]	; (800baec <_svfiprintf_r+0x1f8>)
 800bad4:	a904      	add	r1, sp, #16
 800bad6:	4638      	mov	r0, r7
 800bad8:	f7fd ff8c 	bl	80099f4 <_printf_i>
 800badc:	e7eb      	b.n	800bab6 <_svfiprintf_r+0x1c2>
 800bade:	bf00      	nop
 800bae0:	0801405c 	.word	0x0801405c
 800bae4:	08014066 	.word	0x08014066
 800bae8:	080094ad 	.word	0x080094ad
 800baec:	0800b83f 	.word	0x0800b83f
 800baf0:	08014062 	.word	0x08014062

0800baf4 <__sfputc_r>:
 800baf4:	6893      	ldr	r3, [r2, #8]
 800baf6:	3b01      	subs	r3, #1
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	b410      	push	{r4}
 800bafc:	6093      	str	r3, [r2, #8]
 800bafe:	da08      	bge.n	800bb12 <__sfputc_r+0x1e>
 800bb00:	6994      	ldr	r4, [r2, #24]
 800bb02:	42a3      	cmp	r3, r4
 800bb04:	db01      	blt.n	800bb0a <__sfputc_r+0x16>
 800bb06:	290a      	cmp	r1, #10
 800bb08:	d103      	bne.n	800bb12 <__sfputc_r+0x1e>
 800bb0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb0e:	f7fe b991 	b.w	8009e34 <__swbuf_r>
 800bb12:	6813      	ldr	r3, [r2, #0]
 800bb14:	1c58      	adds	r0, r3, #1
 800bb16:	6010      	str	r0, [r2, #0]
 800bb18:	7019      	strb	r1, [r3, #0]
 800bb1a:	4608      	mov	r0, r1
 800bb1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb20:	4770      	bx	lr

0800bb22 <__sfputs_r>:
 800bb22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb24:	4606      	mov	r6, r0
 800bb26:	460f      	mov	r7, r1
 800bb28:	4614      	mov	r4, r2
 800bb2a:	18d5      	adds	r5, r2, r3
 800bb2c:	42ac      	cmp	r4, r5
 800bb2e:	d101      	bne.n	800bb34 <__sfputs_r+0x12>
 800bb30:	2000      	movs	r0, #0
 800bb32:	e007      	b.n	800bb44 <__sfputs_r+0x22>
 800bb34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb38:	463a      	mov	r2, r7
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f7ff ffda 	bl	800baf4 <__sfputc_r>
 800bb40:	1c43      	adds	r3, r0, #1
 800bb42:	d1f3      	bne.n	800bb2c <__sfputs_r+0xa>
 800bb44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb48 <_vfiprintf_r>:
 800bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	460d      	mov	r5, r1
 800bb4e:	b09d      	sub	sp, #116	; 0x74
 800bb50:	4614      	mov	r4, r2
 800bb52:	4698      	mov	r8, r3
 800bb54:	4606      	mov	r6, r0
 800bb56:	b118      	cbz	r0, 800bb60 <_vfiprintf_r+0x18>
 800bb58:	6983      	ldr	r3, [r0, #24]
 800bb5a:	b90b      	cbnz	r3, 800bb60 <_vfiprintf_r+0x18>
 800bb5c:	f7ff f9be 	bl	800aedc <__sinit>
 800bb60:	4b89      	ldr	r3, [pc, #548]	; (800bd88 <_vfiprintf_r+0x240>)
 800bb62:	429d      	cmp	r5, r3
 800bb64:	d11b      	bne.n	800bb9e <_vfiprintf_r+0x56>
 800bb66:	6875      	ldr	r5, [r6, #4]
 800bb68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb6a:	07d9      	lsls	r1, r3, #31
 800bb6c:	d405      	bmi.n	800bb7a <_vfiprintf_r+0x32>
 800bb6e:	89ab      	ldrh	r3, [r5, #12]
 800bb70:	059a      	lsls	r2, r3, #22
 800bb72:	d402      	bmi.n	800bb7a <_vfiprintf_r+0x32>
 800bb74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bb76:	f7ff fa54 	bl	800b022 <__retarget_lock_acquire_recursive>
 800bb7a:	89ab      	ldrh	r3, [r5, #12]
 800bb7c:	071b      	lsls	r3, r3, #28
 800bb7e:	d501      	bpl.n	800bb84 <_vfiprintf_r+0x3c>
 800bb80:	692b      	ldr	r3, [r5, #16]
 800bb82:	b9eb      	cbnz	r3, 800bbc0 <_vfiprintf_r+0x78>
 800bb84:	4629      	mov	r1, r5
 800bb86:	4630      	mov	r0, r6
 800bb88:	f7fe f9a6 	bl	8009ed8 <__swsetup_r>
 800bb8c:	b1c0      	cbz	r0, 800bbc0 <_vfiprintf_r+0x78>
 800bb8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bb90:	07dc      	lsls	r4, r3, #31
 800bb92:	d50e      	bpl.n	800bbb2 <_vfiprintf_r+0x6a>
 800bb94:	f04f 30ff 	mov.w	r0, #4294967295
 800bb98:	b01d      	add	sp, #116	; 0x74
 800bb9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb9e:	4b7b      	ldr	r3, [pc, #492]	; (800bd8c <_vfiprintf_r+0x244>)
 800bba0:	429d      	cmp	r5, r3
 800bba2:	d101      	bne.n	800bba8 <_vfiprintf_r+0x60>
 800bba4:	68b5      	ldr	r5, [r6, #8]
 800bba6:	e7df      	b.n	800bb68 <_vfiprintf_r+0x20>
 800bba8:	4b79      	ldr	r3, [pc, #484]	; (800bd90 <_vfiprintf_r+0x248>)
 800bbaa:	429d      	cmp	r5, r3
 800bbac:	bf08      	it	eq
 800bbae:	68f5      	ldreq	r5, [r6, #12]
 800bbb0:	e7da      	b.n	800bb68 <_vfiprintf_r+0x20>
 800bbb2:	89ab      	ldrh	r3, [r5, #12]
 800bbb4:	0598      	lsls	r0, r3, #22
 800bbb6:	d4ed      	bmi.n	800bb94 <_vfiprintf_r+0x4c>
 800bbb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bbba:	f7ff fa33 	bl	800b024 <__retarget_lock_release_recursive>
 800bbbe:	e7e9      	b.n	800bb94 <_vfiprintf_r+0x4c>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	9309      	str	r3, [sp, #36]	; 0x24
 800bbc4:	2320      	movs	r3, #32
 800bbc6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bbca:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbce:	2330      	movs	r3, #48	; 0x30
 800bbd0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bd94 <_vfiprintf_r+0x24c>
 800bbd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bbd8:	f04f 0901 	mov.w	r9, #1
 800bbdc:	4623      	mov	r3, r4
 800bbde:	469a      	mov	sl, r3
 800bbe0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe4:	b10a      	cbz	r2, 800bbea <_vfiprintf_r+0xa2>
 800bbe6:	2a25      	cmp	r2, #37	; 0x25
 800bbe8:	d1f9      	bne.n	800bbde <_vfiprintf_r+0x96>
 800bbea:	ebba 0b04 	subs.w	fp, sl, r4
 800bbee:	d00b      	beq.n	800bc08 <_vfiprintf_r+0xc0>
 800bbf0:	465b      	mov	r3, fp
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	4629      	mov	r1, r5
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	f7ff ff93 	bl	800bb22 <__sfputs_r>
 800bbfc:	3001      	adds	r0, #1
 800bbfe:	f000 80aa 	beq.w	800bd56 <_vfiprintf_r+0x20e>
 800bc02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bc04:	445a      	add	r2, fp
 800bc06:	9209      	str	r2, [sp, #36]	; 0x24
 800bc08:	f89a 3000 	ldrb.w	r3, [sl]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	f000 80a2 	beq.w	800bd56 <_vfiprintf_r+0x20e>
 800bc12:	2300      	movs	r3, #0
 800bc14:	f04f 32ff 	mov.w	r2, #4294967295
 800bc18:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc1c:	f10a 0a01 	add.w	sl, sl, #1
 800bc20:	9304      	str	r3, [sp, #16]
 800bc22:	9307      	str	r3, [sp, #28]
 800bc24:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bc28:	931a      	str	r3, [sp, #104]	; 0x68
 800bc2a:	4654      	mov	r4, sl
 800bc2c:	2205      	movs	r2, #5
 800bc2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc32:	4858      	ldr	r0, [pc, #352]	; (800bd94 <_vfiprintf_r+0x24c>)
 800bc34:	f7f4 fb04 	bl	8000240 <memchr>
 800bc38:	9a04      	ldr	r2, [sp, #16]
 800bc3a:	b9d8      	cbnz	r0, 800bc74 <_vfiprintf_r+0x12c>
 800bc3c:	06d1      	lsls	r1, r2, #27
 800bc3e:	bf44      	itt	mi
 800bc40:	2320      	movmi	r3, #32
 800bc42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc46:	0713      	lsls	r3, r2, #28
 800bc48:	bf44      	itt	mi
 800bc4a:	232b      	movmi	r3, #43	; 0x2b
 800bc4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bc50:	f89a 3000 	ldrb.w	r3, [sl]
 800bc54:	2b2a      	cmp	r3, #42	; 0x2a
 800bc56:	d015      	beq.n	800bc84 <_vfiprintf_r+0x13c>
 800bc58:	9a07      	ldr	r2, [sp, #28]
 800bc5a:	4654      	mov	r4, sl
 800bc5c:	2000      	movs	r0, #0
 800bc5e:	f04f 0c0a 	mov.w	ip, #10
 800bc62:	4621      	mov	r1, r4
 800bc64:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc68:	3b30      	subs	r3, #48	; 0x30
 800bc6a:	2b09      	cmp	r3, #9
 800bc6c:	d94e      	bls.n	800bd0c <_vfiprintf_r+0x1c4>
 800bc6e:	b1b0      	cbz	r0, 800bc9e <_vfiprintf_r+0x156>
 800bc70:	9207      	str	r2, [sp, #28]
 800bc72:	e014      	b.n	800bc9e <_vfiprintf_r+0x156>
 800bc74:	eba0 0308 	sub.w	r3, r0, r8
 800bc78:	fa09 f303 	lsl.w	r3, r9, r3
 800bc7c:	4313      	orrs	r3, r2
 800bc7e:	9304      	str	r3, [sp, #16]
 800bc80:	46a2      	mov	sl, r4
 800bc82:	e7d2      	b.n	800bc2a <_vfiprintf_r+0xe2>
 800bc84:	9b03      	ldr	r3, [sp, #12]
 800bc86:	1d19      	adds	r1, r3, #4
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	9103      	str	r1, [sp, #12]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	bfbb      	ittet	lt
 800bc90:	425b      	neglt	r3, r3
 800bc92:	f042 0202 	orrlt.w	r2, r2, #2
 800bc96:	9307      	strge	r3, [sp, #28]
 800bc98:	9307      	strlt	r3, [sp, #28]
 800bc9a:	bfb8      	it	lt
 800bc9c:	9204      	strlt	r2, [sp, #16]
 800bc9e:	7823      	ldrb	r3, [r4, #0]
 800bca0:	2b2e      	cmp	r3, #46	; 0x2e
 800bca2:	d10c      	bne.n	800bcbe <_vfiprintf_r+0x176>
 800bca4:	7863      	ldrb	r3, [r4, #1]
 800bca6:	2b2a      	cmp	r3, #42	; 0x2a
 800bca8:	d135      	bne.n	800bd16 <_vfiprintf_r+0x1ce>
 800bcaa:	9b03      	ldr	r3, [sp, #12]
 800bcac:	1d1a      	adds	r2, r3, #4
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	9203      	str	r2, [sp, #12]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	bfb8      	it	lt
 800bcb6:	f04f 33ff 	movlt.w	r3, #4294967295
 800bcba:	3402      	adds	r4, #2
 800bcbc:	9305      	str	r3, [sp, #20]
 800bcbe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bda4 <_vfiprintf_r+0x25c>
 800bcc2:	7821      	ldrb	r1, [r4, #0]
 800bcc4:	2203      	movs	r2, #3
 800bcc6:	4650      	mov	r0, sl
 800bcc8:	f7f4 faba 	bl	8000240 <memchr>
 800bccc:	b140      	cbz	r0, 800bce0 <_vfiprintf_r+0x198>
 800bcce:	2340      	movs	r3, #64	; 0x40
 800bcd0:	eba0 000a 	sub.w	r0, r0, sl
 800bcd4:	fa03 f000 	lsl.w	r0, r3, r0
 800bcd8:	9b04      	ldr	r3, [sp, #16]
 800bcda:	4303      	orrs	r3, r0
 800bcdc:	3401      	adds	r4, #1
 800bcde:	9304      	str	r3, [sp, #16]
 800bce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bce4:	482c      	ldr	r0, [pc, #176]	; (800bd98 <_vfiprintf_r+0x250>)
 800bce6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcea:	2206      	movs	r2, #6
 800bcec:	f7f4 faa8 	bl	8000240 <memchr>
 800bcf0:	2800      	cmp	r0, #0
 800bcf2:	d03f      	beq.n	800bd74 <_vfiprintf_r+0x22c>
 800bcf4:	4b29      	ldr	r3, [pc, #164]	; (800bd9c <_vfiprintf_r+0x254>)
 800bcf6:	bb1b      	cbnz	r3, 800bd40 <_vfiprintf_r+0x1f8>
 800bcf8:	9b03      	ldr	r3, [sp, #12]
 800bcfa:	3307      	adds	r3, #7
 800bcfc:	f023 0307 	bic.w	r3, r3, #7
 800bd00:	3308      	adds	r3, #8
 800bd02:	9303      	str	r3, [sp, #12]
 800bd04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd06:	443b      	add	r3, r7
 800bd08:	9309      	str	r3, [sp, #36]	; 0x24
 800bd0a:	e767      	b.n	800bbdc <_vfiprintf_r+0x94>
 800bd0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd10:	460c      	mov	r4, r1
 800bd12:	2001      	movs	r0, #1
 800bd14:	e7a5      	b.n	800bc62 <_vfiprintf_r+0x11a>
 800bd16:	2300      	movs	r3, #0
 800bd18:	3401      	adds	r4, #1
 800bd1a:	9305      	str	r3, [sp, #20]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	f04f 0c0a 	mov.w	ip, #10
 800bd22:	4620      	mov	r0, r4
 800bd24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd28:	3a30      	subs	r2, #48	; 0x30
 800bd2a:	2a09      	cmp	r2, #9
 800bd2c:	d903      	bls.n	800bd36 <_vfiprintf_r+0x1ee>
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d0c5      	beq.n	800bcbe <_vfiprintf_r+0x176>
 800bd32:	9105      	str	r1, [sp, #20]
 800bd34:	e7c3      	b.n	800bcbe <_vfiprintf_r+0x176>
 800bd36:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd3a:	4604      	mov	r4, r0
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	e7f0      	b.n	800bd22 <_vfiprintf_r+0x1da>
 800bd40:	ab03      	add	r3, sp, #12
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	462a      	mov	r2, r5
 800bd46:	4b16      	ldr	r3, [pc, #88]	; (800bda0 <_vfiprintf_r+0x258>)
 800bd48:	a904      	add	r1, sp, #16
 800bd4a:	4630      	mov	r0, r6
 800bd4c:	f7fd fbae 	bl	80094ac <_printf_float>
 800bd50:	4607      	mov	r7, r0
 800bd52:	1c78      	adds	r0, r7, #1
 800bd54:	d1d6      	bne.n	800bd04 <_vfiprintf_r+0x1bc>
 800bd56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd58:	07d9      	lsls	r1, r3, #31
 800bd5a:	d405      	bmi.n	800bd68 <_vfiprintf_r+0x220>
 800bd5c:	89ab      	ldrh	r3, [r5, #12]
 800bd5e:	059a      	lsls	r2, r3, #22
 800bd60:	d402      	bmi.n	800bd68 <_vfiprintf_r+0x220>
 800bd62:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd64:	f7ff f95e 	bl	800b024 <__retarget_lock_release_recursive>
 800bd68:	89ab      	ldrh	r3, [r5, #12]
 800bd6a:	065b      	lsls	r3, r3, #25
 800bd6c:	f53f af12 	bmi.w	800bb94 <_vfiprintf_r+0x4c>
 800bd70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd72:	e711      	b.n	800bb98 <_vfiprintf_r+0x50>
 800bd74:	ab03      	add	r3, sp, #12
 800bd76:	9300      	str	r3, [sp, #0]
 800bd78:	462a      	mov	r2, r5
 800bd7a:	4b09      	ldr	r3, [pc, #36]	; (800bda0 <_vfiprintf_r+0x258>)
 800bd7c:	a904      	add	r1, sp, #16
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f7fd fe38 	bl	80099f4 <_printf_i>
 800bd84:	e7e4      	b.n	800bd50 <_vfiprintf_r+0x208>
 800bd86:	bf00      	nop
 800bd88:	08013ebc 	.word	0x08013ebc
 800bd8c:	08013edc 	.word	0x08013edc
 800bd90:	08013e9c 	.word	0x08013e9c
 800bd94:	0801405c 	.word	0x0801405c
 800bd98:	08014066 	.word	0x08014066
 800bd9c:	080094ad 	.word	0x080094ad
 800bda0:	0800bb23 	.word	0x0800bb23
 800bda4:	08014062 	.word	0x08014062

0800bda8 <__sread>:
 800bda8:	b510      	push	{r4, lr}
 800bdaa:	460c      	mov	r4, r1
 800bdac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bdb0:	f000 f916 	bl	800bfe0 <_read_r>
 800bdb4:	2800      	cmp	r0, #0
 800bdb6:	bfab      	itete	ge
 800bdb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bdba:	89a3      	ldrhlt	r3, [r4, #12]
 800bdbc:	181b      	addge	r3, r3, r0
 800bdbe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bdc2:	bfac      	ite	ge
 800bdc4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bdc6:	81a3      	strhlt	r3, [r4, #12]
 800bdc8:	bd10      	pop	{r4, pc}

0800bdca <__swrite>:
 800bdca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdce:	461f      	mov	r7, r3
 800bdd0:	898b      	ldrh	r3, [r1, #12]
 800bdd2:	05db      	lsls	r3, r3, #23
 800bdd4:	4605      	mov	r5, r0
 800bdd6:	460c      	mov	r4, r1
 800bdd8:	4616      	mov	r6, r2
 800bdda:	d505      	bpl.n	800bde8 <__swrite+0x1e>
 800bddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bde0:	2302      	movs	r3, #2
 800bde2:	2200      	movs	r2, #0
 800bde4:	f000 f898 	bl	800bf18 <_lseek_r>
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bdee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bdf2:	81a3      	strh	r3, [r4, #12]
 800bdf4:	4632      	mov	r2, r6
 800bdf6:	463b      	mov	r3, r7
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdfe:	f000 b817 	b.w	800be30 <_write_r>

0800be02 <__sseek>:
 800be02:	b510      	push	{r4, lr}
 800be04:	460c      	mov	r4, r1
 800be06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be0a:	f000 f885 	bl	800bf18 <_lseek_r>
 800be0e:	1c43      	adds	r3, r0, #1
 800be10:	89a3      	ldrh	r3, [r4, #12]
 800be12:	bf15      	itete	ne
 800be14:	6560      	strne	r0, [r4, #84]	; 0x54
 800be16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800be1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800be1e:	81a3      	strheq	r3, [r4, #12]
 800be20:	bf18      	it	ne
 800be22:	81a3      	strhne	r3, [r4, #12]
 800be24:	bd10      	pop	{r4, pc}

0800be26 <__sclose>:
 800be26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be2a:	f000 b831 	b.w	800be90 <_close_r>
	...

0800be30 <_write_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	4d07      	ldr	r5, [pc, #28]	; (800be50 <_write_r+0x20>)
 800be34:	4604      	mov	r4, r0
 800be36:	4608      	mov	r0, r1
 800be38:	4611      	mov	r1, r2
 800be3a:	2200      	movs	r2, #0
 800be3c:	602a      	str	r2, [r5, #0]
 800be3e:	461a      	mov	r2, r3
 800be40:	f7f5 fb43 	bl	80014ca <_write>
 800be44:	1c43      	adds	r3, r0, #1
 800be46:	d102      	bne.n	800be4e <_write_r+0x1e>
 800be48:	682b      	ldr	r3, [r5, #0]
 800be4a:	b103      	cbz	r3, 800be4e <_write_r+0x1e>
 800be4c:	6023      	str	r3, [r4, #0]
 800be4e:	bd38      	pop	{r3, r4, r5, pc}
 800be50:	20000ee8 	.word	0x20000ee8

0800be54 <__assert_func>:
 800be54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be56:	4614      	mov	r4, r2
 800be58:	461a      	mov	r2, r3
 800be5a:	4b09      	ldr	r3, [pc, #36]	; (800be80 <__assert_func+0x2c>)
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	4605      	mov	r5, r0
 800be60:	68d8      	ldr	r0, [r3, #12]
 800be62:	b14c      	cbz	r4, 800be78 <__assert_func+0x24>
 800be64:	4b07      	ldr	r3, [pc, #28]	; (800be84 <__assert_func+0x30>)
 800be66:	9100      	str	r1, [sp, #0]
 800be68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be6c:	4906      	ldr	r1, [pc, #24]	; (800be88 <__assert_func+0x34>)
 800be6e:	462b      	mov	r3, r5
 800be70:	f000 f81e 	bl	800beb0 <fiprintf>
 800be74:	f000 f8d3 	bl	800c01e <abort>
 800be78:	4b04      	ldr	r3, [pc, #16]	; (800be8c <__assert_func+0x38>)
 800be7a:	461c      	mov	r4, r3
 800be7c:	e7f3      	b.n	800be66 <__assert_func+0x12>
 800be7e:	bf00      	nop
 800be80:	20000010 	.word	0x20000010
 800be84:	0801406d 	.word	0x0801406d
 800be88:	0801407a 	.word	0x0801407a
 800be8c:	080140a8 	.word	0x080140a8

0800be90 <_close_r>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	4d06      	ldr	r5, [pc, #24]	; (800beac <_close_r+0x1c>)
 800be94:	2300      	movs	r3, #0
 800be96:	4604      	mov	r4, r0
 800be98:	4608      	mov	r0, r1
 800be9a:	602b      	str	r3, [r5, #0]
 800be9c:	f7f6 fa2b 	bl	80022f6 <_close>
 800bea0:	1c43      	adds	r3, r0, #1
 800bea2:	d102      	bne.n	800beaa <_close_r+0x1a>
 800bea4:	682b      	ldr	r3, [r5, #0]
 800bea6:	b103      	cbz	r3, 800beaa <_close_r+0x1a>
 800bea8:	6023      	str	r3, [r4, #0]
 800beaa:	bd38      	pop	{r3, r4, r5, pc}
 800beac:	20000ee8 	.word	0x20000ee8

0800beb0 <fiprintf>:
 800beb0:	b40e      	push	{r1, r2, r3}
 800beb2:	b503      	push	{r0, r1, lr}
 800beb4:	4601      	mov	r1, r0
 800beb6:	ab03      	add	r3, sp, #12
 800beb8:	4805      	ldr	r0, [pc, #20]	; (800bed0 <fiprintf+0x20>)
 800beba:	f853 2b04 	ldr.w	r2, [r3], #4
 800bebe:	6800      	ldr	r0, [r0, #0]
 800bec0:	9301      	str	r3, [sp, #4]
 800bec2:	f7ff fe41 	bl	800bb48 <_vfiprintf_r>
 800bec6:	b002      	add	sp, #8
 800bec8:	f85d eb04 	ldr.w	lr, [sp], #4
 800becc:	b003      	add	sp, #12
 800bece:	4770      	bx	lr
 800bed0:	20000010 	.word	0x20000010

0800bed4 <_fstat_r>:
 800bed4:	b538      	push	{r3, r4, r5, lr}
 800bed6:	4d07      	ldr	r5, [pc, #28]	; (800bef4 <_fstat_r+0x20>)
 800bed8:	2300      	movs	r3, #0
 800beda:	4604      	mov	r4, r0
 800bedc:	4608      	mov	r0, r1
 800bede:	4611      	mov	r1, r2
 800bee0:	602b      	str	r3, [r5, #0]
 800bee2:	f7f6 fa14 	bl	800230e <_fstat>
 800bee6:	1c43      	adds	r3, r0, #1
 800bee8:	d102      	bne.n	800bef0 <_fstat_r+0x1c>
 800beea:	682b      	ldr	r3, [r5, #0]
 800beec:	b103      	cbz	r3, 800bef0 <_fstat_r+0x1c>
 800beee:	6023      	str	r3, [r4, #0]
 800bef0:	bd38      	pop	{r3, r4, r5, pc}
 800bef2:	bf00      	nop
 800bef4:	20000ee8 	.word	0x20000ee8

0800bef8 <_isatty_r>:
 800bef8:	b538      	push	{r3, r4, r5, lr}
 800befa:	4d06      	ldr	r5, [pc, #24]	; (800bf14 <_isatty_r+0x1c>)
 800befc:	2300      	movs	r3, #0
 800befe:	4604      	mov	r4, r0
 800bf00:	4608      	mov	r0, r1
 800bf02:	602b      	str	r3, [r5, #0]
 800bf04:	f7f6 fa13 	bl	800232e <_isatty>
 800bf08:	1c43      	adds	r3, r0, #1
 800bf0a:	d102      	bne.n	800bf12 <_isatty_r+0x1a>
 800bf0c:	682b      	ldr	r3, [r5, #0]
 800bf0e:	b103      	cbz	r3, 800bf12 <_isatty_r+0x1a>
 800bf10:	6023      	str	r3, [r4, #0]
 800bf12:	bd38      	pop	{r3, r4, r5, pc}
 800bf14:	20000ee8 	.word	0x20000ee8

0800bf18 <_lseek_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4d07      	ldr	r5, [pc, #28]	; (800bf38 <_lseek_r+0x20>)
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	4608      	mov	r0, r1
 800bf20:	4611      	mov	r1, r2
 800bf22:	2200      	movs	r2, #0
 800bf24:	602a      	str	r2, [r5, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	f7f6 fa0c 	bl	8002344 <_lseek>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d102      	bne.n	800bf36 <_lseek_r+0x1e>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	b103      	cbz	r3, 800bf36 <_lseek_r+0x1e>
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	bd38      	pop	{r3, r4, r5, pc}
 800bf38:	20000ee8 	.word	0x20000ee8

0800bf3c <__ascii_mbtowc>:
 800bf3c:	b082      	sub	sp, #8
 800bf3e:	b901      	cbnz	r1, 800bf42 <__ascii_mbtowc+0x6>
 800bf40:	a901      	add	r1, sp, #4
 800bf42:	b142      	cbz	r2, 800bf56 <__ascii_mbtowc+0x1a>
 800bf44:	b14b      	cbz	r3, 800bf5a <__ascii_mbtowc+0x1e>
 800bf46:	7813      	ldrb	r3, [r2, #0]
 800bf48:	600b      	str	r3, [r1, #0]
 800bf4a:	7812      	ldrb	r2, [r2, #0]
 800bf4c:	1e10      	subs	r0, r2, #0
 800bf4e:	bf18      	it	ne
 800bf50:	2001      	movne	r0, #1
 800bf52:	b002      	add	sp, #8
 800bf54:	4770      	bx	lr
 800bf56:	4610      	mov	r0, r2
 800bf58:	e7fb      	b.n	800bf52 <__ascii_mbtowc+0x16>
 800bf5a:	f06f 0001 	mvn.w	r0, #1
 800bf5e:	e7f8      	b.n	800bf52 <__ascii_mbtowc+0x16>

0800bf60 <memmove>:
 800bf60:	4288      	cmp	r0, r1
 800bf62:	b510      	push	{r4, lr}
 800bf64:	eb01 0402 	add.w	r4, r1, r2
 800bf68:	d902      	bls.n	800bf70 <memmove+0x10>
 800bf6a:	4284      	cmp	r4, r0
 800bf6c:	4623      	mov	r3, r4
 800bf6e:	d807      	bhi.n	800bf80 <memmove+0x20>
 800bf70:	1e43      	subs	r3, r0, #1
 800bf72:	42a1      	cmp	r1, r4
 800bf74:	d008      	beq.n	800bf88 <memmove+0x28>
 800bf76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf7a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf7e:	e7f8      	b.n	800bf72 <memmove+0x12>
 800bf80:	4402      	add	r2, r0
 800bf82:	4601      	mov	r1, r0
 800bf84:	428a      	cmp	r2, r1
 800bf86:	d100      	bne.n	800bf8a <memmove+0x2a>
 800bf88:	bd10      	pop	{r4, pc}
 800bf8a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf8e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf92:	e7f7      	b.n	800bf84 <memmove+0x24>

0800bf94 <_realloc_r>:
 800bf94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf96:	4607      	mov	r7, r0
 800bf98:	4614      	mov	r4, r2
 800bf9a:	460e      	mov	r6, r1
 800bf9c:	b921      	cbnz	r1, 800bfa8 <_realloc_r+0x14>
 800bf9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bfa2:	4611      	mov	r1, r2
 800bfa4:	f7fd b988 	b.w	80092b8 <_malloc_r>
 800bfa8:	b922      	cbnz	r2, 800bfb4 <_realloc_r+0x20>
 800bfaa:	f7fd f935 	bl	8009218 <_free_r>
 800bfae:	4625      	mov	r5, r4
 800bfb0:	4628      	mov	r0, r5
 800bfb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfb4:	f000 f83a 	bl	800c02c <_malloc_usable_size_r>
 800bfb8:	42a0      	cmp	r0, r4
 800bfba:	d20f      	bcs.n	800bfdc <_realloc_r+0x48>
 800bfbc:	4621      	mov	r1, r4
 800bfbe:	4638      	mov	r0, r7
 800bfc0:	f7fd f97a 	bl	80092b8 <_malloc_r>
 800bfc4:	4605      	mov	r5, r0
 800bfc6:	2800      	cmp	r0, #0
 800bfc8:	d0f2      	beq.n	800bfb0 <_realloc_r+0x1c>
 800bfca:	4631      	mov	r1, r6
 800bfcc:	4622      	mov	r2, r4
 800bfce:	f7ff f88f 	bl	800b0f0 <memcpy>
 800bfd2:	4631      	mov	r1, r6
 800bfd4:	4638      	mov	r0, r7
 800bfd6:	f7fd f91f 	bl	8009218 <_free_r>
 800bfda:	e7e9      	b.n	800bfb0 <_realloc_r+0x1c>
 800bfdc:	4635      	mov	r5, r6
 800bfde:	e7e7      	b.n	800bfb0 <_realloc_r+0x1c>

0800bfe0 <_read_r>:
 800bfe0:	b538      	push	{r3, r4, r5, lr}
 800bfe2:	4d07      	ldr	r5, [pc, #28]	; (800c000 <_read_r+0x20>)
 800bfe4:	4604      	mov	r4, r0
 800bfe6:	4608      	mov	r0, r1
 800bfe8:	4611      	mov	r1, r2
 800bfea:	2200      	movs	r2, #0
 800bfec:	602a      	str	r2, [r5, #0]
 800bfee:	461a      	mov	r2, r3
 800bff0:	f7f6 f964 	bl	80022bc <_read>
 800bff4:	1c43      	adds	r3, r0, #1
 800bff6:	d102      	bne.n	800bffe <_read_r+0x1e>
 800bff8:	682b      	ldr	r3, [r5, #0]
 800bffa:	b103      	cbz	r3, 800bffe <_read_r+0x1e>
 800bffc:	6023      	str	r3, [r4, #0]
 800bffe:	bd38      	pop	{r3, r4, r5, pc}
 800c000:	20000ee8 	.word	0x20000ee8

0800c004 <__ascii_wctomb>:
 800c004:	b149      	cbz	r1, 800c01a <__ascii_wctomb+0x16>
 800c006:	2aff      	cmp	r2, #255	; 0xff
 800c008:	bf85      	ittet	hi
 800c00a:	238a      	movhi	r3, #138	; 0x8a
 800c00c:	6003      	strhi	r3, [r0, #0]
 800c00e:	700a      	strbls	r2, [r1, #0]
 800c010:	f04f 30ff 	movhi.w	r0, #4294967295
 800c014:	bf98      	it	ls
 800c016:	2001      	movls	r0, #1
 800c018:	4770      	bx	lr
 800c01a:	4608      	mov	r0, r1
 800c01c:	4770      	bx	lr

0800c01e <abort>:
 800c01e:	b508      	push	{r3, lr}
 800c020:	2006      	movs	r0, #6
 800c022:	f000 f833 	bl	800c08c <raise>
 800c026:	2001      	movs	r0, #1
 800c028:	f7f6 f93e 	bl	80022a8 <_exit>

0800c02c <_malloc_usable_size_r>:
 800c02c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c030:	1f18      	subs	r0, r3, #4
 800c032:	2b00      	cmp	r3, #0
 800c034:	bfbc      	itt	lt
 800c036:	580b      	ldrlt	r3, [r1, r0]
 800c038:	18c0      	addlt	r0, r0, r3
 800c03a:	4770      	bx	lr

0800c03c <_raise_r>:
 800c03c:	291f      	cmp	r1, #31
 800c03e:	b538      	push	{r3, r4, r5, lr}
 800c040:	4604      	mov	r4, r0
 800c042:	460d      	mov	r5, r1
 800c044:	d904      	bls.n	800c050 <_raise_r+0x14>
 800c046:	2316      	movs	r3, #22
 800c048:	6003      	str	r3, [r0, #0]
 800c04a:	f04f 30ff 	mov.w	r0, #4294967295
 800c04e:	bd38      	pop	{r3, r4, r5, pc}
 800c050:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c052:	b112      	cbz	r2, 800c05a <_raise_r+0x1e>
 800c054:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c058:	b94b      	cbnz	r3, 800c06e <_raise_r+0x32>
 800c05a:	4620      	mov	r0, r4
 800c05c:	f000 f830 	bl	800c0c0 <_getpid_r>
 800c060:	462a      	mov	r2, r5
 800c062:	4601      	mov	r1, r0
 800c064:	4620      	mov	r0, r4
 800c066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c06a:	f000 b817 	b.w	800c09c <_kill_r>
 800c06e:	2b01      	cmp	r3, #1
 800c070:	d00a      	beq.n	800c088 <_raise_r+0x4c>
 800c072:	1c59      	adds	r1, r3, #1
 800c074:	d103      	bne.n	800c07e <_raise_r+0x42>
 800c076:	2316      	movs	r3, #22
 800c078:	6003      	str	r3, [r0, #0]
 800c07a:	2001      	movs	r0, #1
 800c07c:	e7e7      	b.n	800c04e <_raise_r+0x12>
 800c07e:	2400      	movs	r4, #0
 800c080:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c084:	4628      	mov	r0, r5
 800c086:	4798      	blx	r3
 800c088:	2000      	movs	r0, #0
 800c08a:	e7e0      	b.n	800c04e <_raise_r+0x12>

0800c08c <raise>:
 800c08c:	4b02      	ldr	r3, [pc, #8]	; (800c098 <raise+0xc>)
 800c08e:	4601      	mov	r1, r0
 800c090:	6818      	ldr	r0, [r3, #0]
 800c092:	f7ff bfd3 	b.w	800c03c <_raise_r>
 800c096:	bf00      	nop
 800c098:	20000010 	.word	0x20000010

0800c09c <_kill_r>:
 800c09c:	b538      	push	{r3, r4, r5, lr}
 800c09e:	4d07      	ldr	r5, [pc, #28]	; (800c0bc <_kill_r+0x20>)
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	4604      	mov	r4, r0
 800c0a4:	4608      	mov	r0, r1
 800c0a6:	4611      	mov	r1, r2
 800c0a8:	602b      	str	r3, [r5, #0]
 800c0aa:	f7f6 f8ed 	bl	8002288 <_kill>
 800c0ae:	1c43      	adds	r3, r0, #1
 800c0b0:	d102      	bne.n	800c0b8 <_kill_r+0x1c>
 800c0b2:	682b      	ldr	r3, [r5, #0]
 800c0b4:	b103      	cbz	r3, 800c0b8 <_kill_r+0x1c>
 800c0b6:	6023      	str	r3, [r4, #0]
 800c0b8:	bd38      	pop	{r3, r4, r5, pc}
 800c0ba:	bf00      	nop
 800c0bc:	20000ee8 	.word	0x20000ee8

0800c0c0 <_getpid_r>:
 800c0c0:	f7f6 b8da 	b.w	8002278 <_getpid>

0800c0c4 <_init>:
 800c0c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c6:	bf00      	nop
 800c0c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ca:	bc08      	pop	{r3}
 800c0cc:	469e      	mov	lr, r3
 800c0ce:	4770      	bx	lr

0800c0d0 <_fini>:
 800c0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d2:	bf00      	nop
 800c0d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0d6:	bc08      	pop	{r3}
 800c0d8:	469e      	mov	lr, r3
 800c0da:	4770      	bx	lr
