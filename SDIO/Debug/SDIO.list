
SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000080f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000584  080082c4  080082c4  000182c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008848  08008848  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008848  08008848  00018848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008850  08008850  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008850  08008850  00018850  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008854  08008854  00018854  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008858  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a8c  20000070  080088c8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000afc  080088c8  00020afc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b2a  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000288d  00000000  00000000  00032bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d80  00000000  00000000  00035458  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  000361d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023b92  00000000  00000000  00036e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d21b  00000000  00000000  0005a9c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cf059  00000000  00000000  00067bdd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00136c36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a18  00000000  00000000  00136cb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080082ac 	.word	0x080082ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080082ac 	.word	0x080082ac

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b972 	b.w	80005dc <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff fe1b 	bl	8000224 <strlen>
 80005ee:	4603      	mov	r3, r0
 80005f0:	b29a      	uxth	r2, r3
 80005f2:	f04f 33ff 	mov.w	r3, #4294967295
 80005f6:	6879      	ldr	r1, [r7, #4]
 80005f8:	4803      	ldr	r0, [pc, #12]	; (8000608 <Send_Uart+0x28>)
 80005fa:	f003 fa78 	bl	8003aee <HAL_UART_Transmit>
}
 80005fe:	bf00      	nop
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	2000064c 	.word	0x2000064c

0800060c <Mount_SD>:
//	return len;
//}


void Mount_SD (const TCHAR* path)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 8000614:	2201      	movs	r2, #1
 8000616:	6879      	ldr	r1, [r7, #4]
 8000618:	480a      	ldr	r0, [pc, #40]	; (8000644 <Mount_SD+0x38>)
 800061a:	f006 fbc7 	bl	8006dac <f_mount>
 800061e:	4603      	mov	r3, r0
 8000620:	461a      	mov	r2, r3
 8000622:	4b09      	ldr	r3, [pc, #36]	; (8000648 <Mount_SD+0x3c>)
 8000624:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <Mount_SD+0x3c>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d003      	beq.n	8000636 <Mount_SD+0x2a>
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <Mount_SD+0x40>)
 8000630:	f7ff ffd6 	bl	80005e0 <Send_Uart>
	else Send_Uart("SD CARD mounted successfully...\n");
}
 8000634:	e002      	b.n	800063c <Mount_SD+0x30>
	else Send_Uart("SD CARD mounted successfully...\n");
 8000636:	4806      	ldr	r0, [pc, #24]	; (8000650 <Mount_SD+0x44>)
 8000638:	f7ff ffd2 	bl	80005e0 <Send_Uart>
}
 800063c:	bf00      	nop
 800063e:	3708      	adds	r7, #8
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	200000ec 	.word	0x200000ec
 8000648:	2000032c 	.word	0x2000032c
 800064c:	080082c4 	.word	0x080082c4
 8000650:	080082e8 	.word	0x080082e8

08000654 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 800065c:	2201      	movs	r2, #1
 800065e:	6879      	ldr	r1, [r7, #4]
 8000660:	2000      	movs	r0, #0
 8000662:	f006 fba3 	bl	8006dac <f_mount>
 8000666:	4603      	mov	r3, r0
 8000668:	461a      	mov	r2, r3
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <Unmount_SD+0x38>)
 800066c:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 800066e:	4b07      	ldr	r3, [pc, #28]	; (800068c <Unmount_SD+0x38>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d103      	bne.n	800067e <Unmount_SD+0x2a>
 8000676:	4806      	ldr	r0, [pc, #24]	; (8000690 <Unmount_SD+0x3c>)
 8000678:	f7ff ffb2 	bl	80005e0 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 800067c:	e002      	b.n	8000684 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800067e:	4805      	ldr	r0, [pc, #20]	; (8000694 <Unmount_SD+0x40>)
 8000680:	f7ff ffae 	bl	80005e0 <Send_Uart>
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2000032c 	.word	0x2000032c
 8000690:	0800830c 	.word	0x0800830c
 8000694:	08008334 	.word	0x08008334

08000698 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08e      	sub	sp, #56	; 0x38
 800069c:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 800069e:	2014      	movs	r0, #20
 80006a0:	f007 f9e6 	bl	8007a70 <malloc>
 80006a4:	4603      	mov	r3, r0
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 80006a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006aa:	4929      	ldr	r1, [pc, #164]	; (8000750 <Format_SD+0xb8>)
 80006ac:	461a      	mov	r2, r3
 80006ae:	460b      	mov	r3, r1
 80006b0:	881b      	ldrh	r3, [r3, #0]
 80006b2:	8013      	strh	r3, [r2, #0]

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80006b8:	4618      	mov	r0, r3
 80006ba:	f006 ff98 	bl	80075ee <f_opendir>
 80006be:	4603      	mov	r3, r0
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b24      	ldr	r3, [pc, #144]	; (8000754 <Format_SD+0xbc>)
 80006c4:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80006c6:	4b23      	ldr	r3, [pc, #140]	; (8000754 <Format_SD+0xbc>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d136      	bne.n	800073c <Format_SD+0xa4>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	4921      	ldr	r1, [pc, #132]	; (8000758 <Format_SD+0xc0>)
 80006d2:	4618      	mov	r0, r3
 80006d4:	f007 f824 	bl	8007720 <f_readdir>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <Format_SD+0xbc>)
 80006de:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80006e0:	4b1c      	ldr	r3, [pc, #112]	; (8000754 <Format_SD+0xbc>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d125      	bne.n	8000734 <Format_SD+0x9c>
 80006e8:	4b1b      	ldr	r3, [pc, #108]	; (8000758 <Format_SD+0xc0>)
 80006ea:	7a5b      	ldrb	r3, [r3, #9]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d021      	beq.n	8000734 <Format_SD+0x9c>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 80006f0:	4b19      	ldr	r3, [pc, #100]	; (8000758 <Format_SD+0xc0>)
 80006f2:	7a1b      	ldrb	r3, [r3, #8]
 80006f4:	f003 0310 	and.w	r3, r3, #16
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d011      	beq.n	8000720 <Format_SD+0x88>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80006fc:	4917      	ldr	r1, [pc, #92]	; (800075c <Format_SD+0xc4>)
 80006fe:	4818      	ldr	r0, [pc, #96]	; (8000760 <Format_SD+0xc8>)
 8000700:	f7ff fd86 	bl	8000210 <strcmp>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d012      	beq.n	8000730 <Format_SD+0x98>
            	fresult = f_unlink(fno.fname);
 800070a:	4814      	ldr	r0, [pc, #80]	; (800075c <Format_SD+0xc4>)
 800070c:	f007 f87e 	bl	800780c <f_unlink>
 8000710:	4603      	mov	r3, r0
 8000712:	461a      	mov	r2, r3
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <Format_SD+0xbc>)
 8000716:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 8000718:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <Format_SD+0xbc>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b07      	cmp	r3, #7
 800071e:	e7d6      	b.n	80006ce <Format_SD+0x36>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8000720:	480e      	ldr	r0, [pc, #56]	; (800075c <Format_SD+0xc4>)
 8000722:	f007 f873 	bl	800780c <f_unlink>
 8000726:	4603      	mov	r3, r0
 8000728:	461a      	mov	r2, r3
 800072a:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <Format_SD+0xbc>)
 800072c:	701a      	strb	r2, [r3, #0]
 800072e:	e7ce      	b.n	80006ce <Format_SD+0x36>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8000730:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8000732:	e7cc      	b.n	80006ce <Format_SD+0x36>
            }
        }
        f_closedir(&dir);
 8000734:	1d3b      	adds	r3, r7, #4
 8000736:	4618      	mov	r0, r3
 8000738:	f006 ffcc 	bl	80076d4 <f_closedir>
    }
    free(path);
 800073c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800073e:	f007 f99f 	bl	8007a80 <free>
    return fresult;
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <Format_SD+0xbc>)
 8000744:	781b      	ldrb	r3, [r3, #0]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3738      	adds	r7, #56	; 0x38
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	08008384 	.word	0x08008384
 8000754:	2000032c 	.word	0x2000032c
 8000758:	200000d4 	.word	0x200000d4
 800075c:	200000dd 	.word	0x200000dd
 8000760:	08008358 	.word	0x08008358

08000764 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b088      	sub	sp, #32
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800076c:	4943      	ldr	r1, [pc, #268]	; (800087c <Create_File+0x118>)
 800076e:	6878      	ldr	r0, [r7, #4]
 8000770:	f007 f813 	bl	800779a <f_stat>
 8000774:	4603      	mov	r3, r0
 8000776:	461a      	mov	r2, r3
 8000778:	4b41      	ldr	r3, [pc, #260]	; (8000880 <Create_File+0x11c>)
 800077a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800077c:	4b40      	ldr	r3, [pc, #256]	; (8000880 <Create_File+0x11c>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d112      	bne.n	80007aa <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000784:	2064      	movs	r0, #100	; 0x64
 8000786:	f007 f973 	bl	8007a70 <malloc>
 800078a:	4603      	mov	r3, r0
 800078c:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	493c      	ldr	r1, [pc, #240]	; (8000884 <Create_File+0x120>)
 8000792:	68f8      	ldr	r0, [r7, #12]
 8000794:	f007 fa3c 	bl	8007c10 <siprintf>
		Send_Uart(buf);
 8000798:	68f8      	ldr	r0, [r7, #12]
 800079a:	f7ff ff21 	bl	80005e0 <Send_Uart>
		free(buf);
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f007 f96e 	bl	8007a80 <free>
	    return fresult;
 80007a4:	4b36      	ldr	r3, [pc, #216]	; (8000880 <Create_File+0x11c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	e063      	b.n	8000872 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80007aa:	220b      	movs	r2, #11
 80007ac:	6879      	ldr	r1, [r7, #4]
 80007ae:	4836      	ldr	r0, [pc, #216]	; (8000888 <Create_File+0x124>)
 80007b0:	f006 fb42 	bl	8006e38 <f_open>
 80007b4:	4603      	mov	r3, r0
 80007b6:	461a      	mov	r2, r3
 80007b8:	4b31      	ldr	r3, [pc, #196]	; (8000880 <Create_File+0x11c>)
 80007ba:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80007bc:	4b30      	ldr	r3, [pc, #192]	; (8000880 <Create_File+0x11c>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d015      	beq.n	80007f0 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 80007c4:	2064      	movs	r0, #100	; 0x64
 80007c6:	f007 f953 	bl	8007a70 <malloc>
 80007ca:	4603      	mov	r3, r0
 80007cc:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80007ce:	4b2c      	ldr	r3, [pc, #176]	; (8000880 <Create_File+0x11c>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	492d      	ldr	r1, [pc, #180]	; (800088c <Create_File+0x128>)
 80007d8:	6938      	ldr	r0, [r7, #16]
 80007da:	f007 fa19 	bl	8007c10 <siprintf>
			Send_Uart(buf);
 80007de:	6938      	ldr	r0, [r7, #16]
 80007e0:	f7ff fefe 	bl	80005e0 <Send_Uart>
			free(buf);
 80007e4:	6938      	ldr	r0, [r7, #16]
 80007e6:	f007 f94b 	bl	8007a80 <free>
		    return fresult;
 80007ea:	4b25      	ldr	r3, [pc, #148]	; (8000880 <Create_File+0x11c>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	e040      	b.n	8000872 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80007f0:	2064      	movs	r0, #100	; 0x64
 80007f2:	f007 f93d 	bl	8007a70 <malloc>
 80007f6:	4603      	mov	r3, r0
 80007f8:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	4924      	ldr	r1, [pc, #144]	; (8000890 <Create_File+0x12c>)
 80007fe:	69f8      	ldr	r0, [r7, #28]
 8000800:	f007 fa06 	bl	8007c10 <siprintf>
			Send_Uart(buf);
 8000804:	69f8      	ldr	r0, [r7, #28]
 8000806:	f7ff feeb 	bl	80005e0 <Send_Uart>
			free(buf);
 800080a:	69f8      	ldr	r0, [r7, #28]
 800080c:	f007 f938 	bl	8007a80 <free>
		}

		fresult = f_close(&fil);
 8000810:	481d      	ldr	r0, [pc, #116]	; (8000888 <Create_File+0x124>)
 8000812:	f006 fec2 	bl	800759a <f_close>
 8000816:	4603      	mov	r3, r0
 8000818:	461a      	mov	r2, r3
 800081a:	4b19      	ldr	r3, [pc, #100]	; (8000880 <Create_File+0x11c>)
 800081c:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <Create_File+0x11c>)
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b00      	cmp	r3, #0
 8000824:	d013      	beq.n	800084e <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 8000826:	2064      	movs	r0, #100	; 0x64
 8000828:	f007 f922 	bl	8007a70 <malloc>
 800082c:	4603      	mov	r3, r0
 800082e:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8000830:	4b13      	ldr	r3, [pc, #76]	; (8000880 <Create_File+0x11c>)
 8000832:	781b      	ldrb	r3, [r3, #0]
 8000834:	461a      	mov	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4916      	ldr	r1, [pc, #88]	; (8000894 <Create_File+0x130>)
 800083a:	6978      	ldr	r0, [r7, #20]
 800083c:	f007 f9e8 	bl	8007c10 <siprintf>
			Send_Uart(buf);
 8000840:	6978      	ldr	r0, [r7, #20]
 8000842:	f7ff fecd 	bl	80005e0 <Send_Uart>
			free(buf);
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f007 f91a 	bl	8007a80 <free>
 800084c:	e00f      	b.n	800086e <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800084e:	2064      	movs	r0, #100	; 0x64
 8000850:	f007 f90e 	bl	8007a70 <malloc>
 8000854:	4603      	mov	r3, r0
 8000856:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8000858:	687a      	ldr	r2, [r7, #4]
 800085a:	490f      	ldr	r1, [pc, #60]	; (8000898 <Create_File+0x134>)
 800085c:	69b8      	ldr	r0, [r7, #24]
 800085e:	f007 f9d7 	bl	8007c10 <siprintf>
			Send_Uart(buf);
 8000862:	69b8      	ldr	r0, [r7, #24]
 8000864:	f7ff febc 	bl	80005e0 <Send_Uart>
			free(buf);
 8000868:	69b8      	ldr	r0, [r7, #24]
 800086a:	f007 f909 	bl	8007a80 <free>
		}
	}
    return fresult;
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <Create_File+0x11c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
}
 8000872:	4618      	mov	r0, r3
 8000874:	3720      	adds	r7, #32
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000d4 	.word	0x200000d4
 8000880:	2000032c 	.word	0x2000032c
 8000884:	08008500 	.word	0x08008500
 8000888:	20000334 	.word	0x20000334
 800088c:	08008538 	.word	0x08008538
 8000890:	08008560 	.word	0x08008560
 8000894:	080085a0 	.word	0x080085a0
 8000898:	080084e0 	.word	0x080084e0

0800089c <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80008a6:	4956      	ldr	r1, [pc, #344]	; (8000a00 <Update_File+0x164>)
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f006 ff76 	bl	800779a <f_stat>
 80008ae:	4603      	mov	r3, r0
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b54      	ldr	r3, [pc, #336]	; (8000a04 <Update_File+0x168>)
 80008b4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80008b6:	4b53      	ldr	r3, [pc, #332]	; (8000a04 <Update_File+0x168>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d012      	beq.n	80008e4 <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80008be:	2064      	movs	r0, #100	; 0x64
 80008c0:	f007 f8d6 	bl	8007a70 <malloc>
 80008c4:	4603      	mov	r3, r0
 80008c6:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80008c8:	687a      	ldr	r2, [r7, #4]
 80008ca:	494f      	ldr	r1, [pc, #316]	; (8000a08 <Update_File+0x16c>)
 80008cc:	68b8      	ldr	r0, [r7, #8]
 80008ce:	f007 f99f 	bl	8007c10 <siprintf>
		Send_Uart (buf);
 80008d2:	68b8      	ldr	r0, [r7, #8]
 80008d4:	f7ff fe84 	bl	80005e0 <Send_Uart>
		free(buf);
 80008d8:	68b8      	ldr	r0, [r7, #8]
 80008da:	f007 f8d1 	bl	8007a80 <free>
	    return fresult;
 80008de:	4b49      	ldr	r3, [pc, #292]	; (8000a04 <Update_File+0x168>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	e088      	b.n	80009f6 <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80008e4:	2232      	movs	r2, #50	; 0x32
 80008e6:	6879      	ldr	r1, [r7, #4]
 80008e8:	4848      	ldr	r0, [pc, #288]	; (8000a0c <Update_File+0x170>)
 80008ea:	f006 faa5 	bl	8006e38 <f_open>
 80008ee:	4603      	mov	r3, r0
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b44      	ldr	r3, [pc, #272]	; (8000a04 <Update_File+0x168>)
 80008f4:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80008f6:	4b43      	ldr	r3, [pc, #268]	; (8000a04 <Update_File+0x168>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d015      	beq.n	800092a <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80008fe:	2064      	movs	r0, #100	; 0x64
 8000900:	f007 f8b6 	bl	8007a70 <malloc>
 8000904:	4603      	mov	r3, r0
 8000906:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 8000908:	4b3e      	ldr	r3, [pc, #248]	; (8000a04 <Update_File+0x168>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	461a      	mov	r2, r3
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	493f      	ldr	r1, [pc, #252]	; (8000a10 <Update_File+0x174>)
 8000912:	68f8      	ldr	r0, [r7, #12]
 8000914:	f007 f97c 	bl	8007c10 <siprintf>
	    	Send_Uart(buf);
 8000918:	68f8      	ldr	r0, [r7, #12]
 800091a:	f7ff fe61 	bl	80005e0 <Send_Uart>
	        free(buf);
 800091e:	68f8      	ldr	r0, [r7, #12]
 8000920:	f007 f8ae 	bl	8007a80 <free>
	        return fresult;
 8000924:	4b37      	ldr	r3, [pc, #220]	; (8000a04 <Update_File+0x168>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	e065      	b.n	80009f6 <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800092a:	6838      	ldr	r0, [r7, #0]
 800092c:	f7ff fc7a 	bl	8000224 <strlen>
 8000930:	4602      	mov	r2, r0
 8000932:	4b38      	ldr	r3, [pc, #224]	; (8000a14 <Update_File+0x178>)
 8000934:	6839      	ldr	r1, [r7, #0]
 8000936:	4835      	ldr	r0, [pc, #212]	; (8000a0c <Update_File+0x170>)
 8000938:	f006 fc3c 	bl	80071b4 <f_write>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	4b30      	ldr	r3, [pc, #192]	; (8000a04 <Update_File+0x168>)
 8000942:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8000944:	4b2f      	ldr	r3, [pc, #188]	; (8000a04 <Update_File+0x168>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d013      	beq.n	8000974 <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 800094c:	2064      	movs	r0, #100	; 0x64
 800094e:	f007 f88f 	bl	8007a70 <malloc>
 8000952:	4603      	mov	r3, r0
 8000954:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8000956:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <Update_File+0x168>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	492e      	ldr	r1, [pc, #184]	; (8000a18 <Update_File+0x17c>)
 8000960:	69b8      	ldr	r0, [r7, #24]
 8000962:	f007 f955 	bl	8007c10 <siprintf>
	    	Send_Uart(buf);
 8000966:	69b8      	ldr	r0, [r7, #24]
 8000968:	f7ff fe3a 	bl	80005e0 <Send_Uart>
	    	free(buf);
 800096c:	69b8      	ldr	r0, [r7, #24]
 800096e:	f007 f887 	bl	8007a80 <free>
 8000972:	e00f      	b.n	8000994 <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000974:	2064      	movs	r0, #100	; 0x64
 8000976:	f007 f87b 	bl	8007a70 <malloc>
 800097a:	4603      	mov	r3, r0
 800097c:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800097e:	687a      	ldr	r2, [r7, #4]
 8000980:	4926      	ldr	r1, [pc, #152]	; (8000a1c <Update_File+0x180>)
 8000982:	69f8      	ldr	r0, [r7, #28]
 8000984:	f007 f944 	bl	8007c10 <siprintf>
	    	Send_Uart(buf);
 8000988:	69f8      	ldr	r0, [r7, #28]
 800098a:	f7ff fe29 	bl	80005e0 <Send_Uart>
	    	free(buf);
 800098e:	69f8      	ldr	r0, [r7, #28]
 8000990:	f007 f876 	bl	8007a80 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8000994:	481d      	ldr	r0, [pc, #116]	; (8000a0c <Update_File+0x170>)
 8000996:	f006 fe00 	bl	800759a <f_close>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	4b19      	ldr	r3, [pc, #100]	; (8000a04 <Update_File+0x168>)
 80009a0:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <Update_File+0x168>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d013      	beq.n	80009d2 <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80009aa:	2064      	movs	r0, #100	; 0x64
 80009ac:	f007 f860 	bl	8007a70 <malloc>
 80009b0:	4603      	mov	r3, r0
 80009b2:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 80009b4:	4b13      	ldr	r3, [pc, #76]	; (8000a04 <Update_File+0x168>)
 80009b6:	781b      	ldrb	r3, [r3, #0]
 80009b8:	461a      	mov	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4918      	ldr	r1, [pc, #96]	; (8000a20 <Update_File+0x184>)
 80009be:	6938      	ldr	r0, [r7, #16]
 80009c0:	f007 f926 	bl	8007c10 <siprintf>
	    	Send_Uart(buf);
 80009c4:	6938      	ldr	r0, [r7, #16]
 80009c6:	f7ff fe0b 	bl	80005e0 <Send_Uart>
	    	free(buf);
 80009ca:	6938      	ldr	r0, [r7, #16]
 80009cc:	f007 f858 	bl	8007a80 <free>
 80009d0:	e00f      	b.n	80009f2 <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80009d2:	2064      	movs	r0, #100	; 0x64
 80009d4:	f007 f84c 	bl	8007a70 <malloc>
 80009d8:	4603      	mov	r3, r0
 80009da:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80009dc:	687a      	ldr	r2, [r7, #4]
 80009de:	4911      	ldr	r1, [pc, #68]	; (8000a24 <Update_File+0x188>)
 80009e0:	6978      	ldr	r0, [r7, #20]
 80009e2:	f007 f915 	bl	8007c10 <siprintf>
	    	Send_Uart(buf);
 80009e6:	6978      	ldr	r0, [r7, #20]
 80009e8:	f7ff fdfa 	bl	80005e0 <Send_Uart>
	    	free(buf);
 80009ec:	6978      	ldr	r0, [r7, #20]
 80009ee:	f007 f847 	bl	8007a80 <free>
	     }
	}
    return fresult;
 80009f2:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <Update_File+0x168>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3720      	adds	r7, #32
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	200000d4 	.word	0x200000d4
 8000a04:	2000032c 	.word	0x2000032c
 8000a08:	08008388 	.word	0x08008388
 8000a0c:	20000334 	.word	0x20000334
 8000a10:	080083a8 	.word	0x080083a8
 8000a14:	20000324 	.word	0x20000324
 8000a18:	080085c4 	.word	0x080085c4
 8000a1c:	080085ec 	.word	0x080085ec
 8000a20:	080084b8 	.word	0x080084b8
 8000a24:	080084e0 	.word	0x080084e0

08000a28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a2e:	f000 fb35 	bl	800109c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a32:	f000 f859 	bl	8000ae8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a36:	f000 f92f 	bl	8000c98 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a3a:	f000 f903 	bl	8000c44 <MX_USART2_UART_Init>
  MX_SDIO_SD_Init();
 8000a3e:	f000 f8e1 	bl	8000c04 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000a42:	f004 fa17 	bl	8004e74 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000a46:	f000 f927 	bl	8000c98 <MX_GPIO_Init>
    MX_USART2_UART_Init();
 8000a4a:	f000 f8fb 	bl	8000c44 <MX_USART2_UART_Init>
    MX_SDIO_SD_Init();
 8000a4e:	f000 f8d9 	bl	8000c04 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8000a52:	f004 fa0f 	bl	8004e74 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */
    Mount_SD("/");
 8000a56:	481e      	ldr	r0, [pc, #120]	; (8000ad0 <main+0xa8>)
 8000a58:	f7ff fdd8 	bl	800060c <Mount_SD>
    Format_SD();
 8000a5c:	f7ff fe1c 	bl	8000698 <Format_SD>
//    Create_File("FILE1.TXT");
//    Create_File("FILE2.TXT");
    Create_File("CSV_TEST.CSV");
 8000a60:	481c      	ldr	r0, [pc, #112]	; (8000ad4 <main+0xac>)
 8000a62:	f7ff fe7f 	bl	8000764 <Create_File>

    sprintf(buffer, "Device, Data, Time\n\n");
 8000a66:	4a1c      	ldr	r2, [pc, #112]	; (8000ad8 <main+0xb0>)
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <main+0xb4>)
 8000a6a:	4615      	mov	r5, r2
 8000a6c:	461c      	mov	r4, r3
 8000a6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a70:	6028      	str	r0, [r5, #0]
 8000a72:	6069      	str	r1, [r5, #4]
 8000a74:	60aa      	str	r2, [r5, #8]
 8000a76:	60eb      	str	r3, [r5, #12]
 8000a78:	6820      	ldr	r0, [r4, #0]
 8000a7a:	6128      	str	r0, [r5, #16]
 8000a7c:	7923      	ldrb	r3, [r4, #4]
 8000a7e:	752b      	strb	r3, [r5, #20]
    Update_File("CSV_TEST.CSV", buffer);
 8000a80:	4915      	ldr	r1, [pc, #84]	; (8000ad8 <main+0xb0>)
 8000a82:	4814      	ldr	r0, [pc, #80]	; (8000ad4 <main+0xac>)
 8000a84:	f7ff ff0a 	bl	800089c <Update_File>

    Unmount_SD("/");
 8000a88:	4811      	ldr	r0, [pc, #68]	; (8000ad0 <main+0xa8>)
 8000a8a:	f7ff fde3 	bl	8000654 <Unmount_SD>
//	Update_File("FILE1.TXT", buffer);
//	sprintf(buffer, "world ---> %d\n", indx);
//	Update_File("FILE2.TXT", buffer);
//	Unmount_SD("/");

	Mount_SD("/");
 8000a8e:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <main+0xa8>)
 8000a90:	f7ff fdbc 	bl	800060c <Mount_SD>
	sprintf(buffer, "Device%d, %d m/s, %d seconds\n", indx, indx, indx);
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <main+0xb8>)
 8000a96:	681a      	ldr	r2, [r3, #0]
 8000a98:	4b11      	ldr	r3, [pc, #68]	; (8000ae0 <main+0xb8>)
 8000a9a:	6819      	ldr	r1, [r3, #0]
 8000a9c:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <main+0xb8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	460b      	mov	r3, r1
 8000aa4:	490f      	ldr	r1, [pc, #60]	; (8000ae4 <main+0xbc>)
 8000aa6:	480c      	ldr	r0, [pc, #48]	; (8000ad8 <main+0xb0>)
 8000aa8:	f007 f8b2 	bl	8007c10 <siprintf>
	Update_File("CSV_TEST.CSV", buffer);
 8000aac:	490a      	ldr	r1, [pc, #40]	; (8000ad8 <main+0xb0>)
 8000aae:	4809      	ldr	r0, [pc, #36]	; (8000ad4 <main+0xac>)
 8000ab0:	f7ff fef4 	bl	800089c <Update_File>
	Unmount_SD("/");
 8000ab4:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <main+0xa8>)
 8000ab6:	f7ff fdcd 	bl	8000654 <Unmount_SD>

	indx++;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <main+0xb8>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	4a07      	ldr	r2, [pc, #28]	; (8000ae0 <main+0xb8>)
 8000ac2:	6013      	str	r3, [r2, #0]

	HAL_Delay(2000);
 8000ac4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000ac8:	f000 fb5a 	bl	8001180 <HAL_Delay>
	Mount_SD("/");
 8000acc:	e7df      	b.n	8000a8e <main+0x66>
 8000ace:	bf00      	nop
 8000ad0:	080086d8 	.word	0x080086d8
 8000ad4:	080086dc 	.word	0x080086dc
 8000ad8:	20000564 	.word	0x20000564
 8000adc:	080086ec 	.word	0x080086ec
 8000ae0:	2000008c 	.word	0x2000008c
 8000ae4:	08008704 	.word	0x08008704

08000ae8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0ac      	sub	sp, #176	; 0xb0
 8000aec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aee:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000af2:	2234      	movs	r2, #52	; 0x34
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f006 ffca 	bl	8007a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000afc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b0c:	f107 030c 	add.w	r3, r7, #12
 8000b10:	225c      	movs	r2, #92	; 0x5c
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f006 ffbb 	bl	8007a90 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	4b37      	ldr	r3, [pc, #220]	; (8000bfc <SystemClock_Config+0x114>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a36      	ldr	r2, [pc, #216]	; (8000bfc <SystemClock_Config+0x114>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b34      	ldr	r3, [pc, #208]	; (8000bfc <SystemClock_Config+0x114>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	60bb      	str	r3, [r7, #8]
 8000b34:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b31      	ldr	r3, [pc, #196]	; (8000c00 <SystemClock_Config+0x118>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b42:	4a2f      	ldr	r2, [pc, #188]	; (8000c00 <SystemClock_Config+0x118>)
 8000b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	; (8000c00 <SystemClock_Config+0x118>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b52:	607b      	str	r3, [r7, #4]
 8000b54:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b56:	2302      	movs	r3, #2
 8000b58:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b60:	2310      	movs	r3, #16
 8000b62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b66:	2302      	movs	r3, #2
 8000b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b72:	2308      	movs	r3, #8
 8000b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000b78:	2332      	movs	r3, #50	; 0x32
 8000b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000b84:	2303      	movs	r3, #3
 8000b86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b90:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 fb8b 	bl	80022b0 <HAL_RCC_OscConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000ba0:	f000 f8f8 	bl	8000d94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb4:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f000 fd91 	bl	80016e8 <HAL_RCC_ClockConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000bcc:	f000 f8e2 	bl	8000d94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000bd0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd4:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bde:	f107 030c 	add.w	r3, r7, #12
 8000be2:	4618      	mov	r0, r3
 8000be4:	f000 fe9a 	bl	800191c <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000bee:	f000 f8d1 	bl	8000d94 <Error_Handler>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	37b0      	adds	r7, #176	; 0xb0
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800
 8000c00:	40007000 	.word	0x40007000

08000c04 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_SDIO_SD_Init+0x38>)
 8000c0a:	4a0d      	ldr	r2, [pc, #52]	; (8000c40 <MX_SDIO_SD_Init+0x3c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_SDIO_SD_Init+0x38>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_SDIO_SD_Init+0x38>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_SDIO_SD_Init+0x38>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_SDIO_SD_Init+0x38>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000c26:	4b05      	ldr	r3, [pc, #20]	; (8000c3c <MX_SDIO_SD_Init+0x38>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 16;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <MX_SDIO_SD_Init+0x38>)
 8000c2e:	2210      	movs	r2, #16
 8000c30:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	200005c8 	.word	0x200005c8
 8000c40:	40012c00 	.word	0x40012c00

08000c44 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	; (8000c94 <MX_USART2_UART_Init+0x50>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b09      	ldr	r3, [pc, #36]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	; (8000c90 <MX_USART2_UART_Init+0x4c>)
 8000c7c:	f002 feea 	bl	8003a54 <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c86:	f000 f885 	bl	8000d94 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	2000064c 	.word	0x2000064c
 8000c94:	40004400 	.word	0x40004400

08000c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08a      	sub	sp, #40	; 0x28
 8000c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9e:	f107 0314 	add.w	r3, r7, #20
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]
 8000caa:	60da      	str	r2, [r3, #12]
 8000cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
 8000cb2:	4b34      	ldr	r3, [pc, #208]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb6:	4a33      	ldr	r2, [pc, #204]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cb8:	f043 0304 	orr.w	r3, r3, #4
 8000cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cbe:	4b31      	ldr	r3, [pc, #196]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	f003 0304 	and.w	r3, r3, #4
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
 8000cce:	4b2d      	ldr	r3, [pc, #180]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a2c      	ldr	r2, [pc, #176]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b2a      	ldr	r3, [pc, #168]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce2:	60fb      	str	r3, [r7, #12]
 8000ce4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	4b26      	ldr	r3, [pc, #152]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a25      	ldr	r2, [pc, #148]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b23      	ldr	r3, [pc, #140]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a1e      	ldr	r2, [pc, #120]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000d0c:	f043 0308 	orr.w	r3, r3, #8
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0308 	and.w	r3, r3, #8
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	603b      	str	r3, [r7, #0]
 8000d22:	4b18      	ldr	r3, [pc, #96]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a17      	ldr	r2, [pc, #92]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000d28:	f043 0302 	orr.w	r3, r3, #2
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b15      	ldr	r3, [pc, #84]	; (8000d84 <MX_GPIO_Init+0xec>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	2120      	movs	r1, #32
 8000d3e:	4812      	ldr	r0, [pc, #72]	; (8000d88 <MX_GPIO_Init+0xf0>)
 8000d40:	f000 fcb8 	bl	80016b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d4a:	4b10      	ldr	r3, [pc, #64]	; (8000d8c <MX_GPIO_Init+0xf4>)
 8000d4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 0314 	add.w	r3, r7, #20
 8000d56:	4619      	mov	r1, r3
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <MX_GPIO_Init+0xf8>)
 8000d5a:	f000 fb19 	bl	8001390 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d5e:	2320      	movs	r3, #32
 8000d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d62:	2301      	movs	r3, #1
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d6e:	f107 0314 	add.w	r3, r7, #20
 8000d72:	4619      	mov	r1, r3
 8000d74:	4804      	ldr	r0, [pc, #16]	; (8000d88 <MX_GPIO_Init+0xf0>)
 8000d76:	f000 fb0b 	bl	8001390 <HAL_GPIO_Init>

}
 8000d7a:	bf00      	nop
 8000d7c:	3728      	adds	r7, #40	; 0x28
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	10210000 	.word	0x10210000
 8000d90:	40020800 	.word	0x40020800

08000d94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b10      	ldr	r3, [pc, #64]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	4a0f      	ldr	r2, [pc, #60]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dba:	4b0d      	ldr	r3, [pc, #52]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	4a08      	ldr	r2, [pc, #32]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd6:	4b06      	ldr	r3, [pc, #24]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000de2:	2007      	movs	r0, #7
 8000de4:	f000 faa0 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de8:	bf00      	nop
 8000dea:	3708      	adds	r7, #8
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40023800 	.word	0x40023800

08000df4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a28      	ldr	r2, [pc, #160]	; (8000eb4 <HAL_SD_MspInit+0xc0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d14a      	bne.n	8000eac <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <HAL_SD_MspInit+0xc4>)
 8000e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1e:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <HAL_SD_MspInit+0xc4>)
 8000e20:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e24:	6453      	str	r3, [r2, #68]	; 0x44
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <HAL_SD_MspInit+0xc4>)
 8000e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b20      	ldr	r3, [pc, #128]	; (8000eb8 <HAL_SD_MspInit+0xc4>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_SD_MspInit+0xc4>)
 8000e3c:	f043 0304 	orr.w	r3, r3, #4
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_SD_MspInit+0xc4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0304 	and.w	r3, r3, #4
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b19      	ldr	r3, [pc, #100]	; (8000eb8 <HAL_SD_MspInit+0xc4>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a18      	ldr	r2, [pc, #96]	; (8000eb8 <HAL_SD_MspInit+0xc4>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_SD_MspInit+0xc4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e6a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e6e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	2302      	movs	r3, #2
 8000e72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e7c:	230c      	movs	r3, #12
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	4619      	mov	r1, r3
 8000e86:	480d      	ldr	r0, [pc, #52]	; (8000ebc <HAL_SD_MspInit+0xc8>)
 8000e88:	f000 fa82 	bl	8001390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e8c:	2304      	movs	r3, #4
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e90:	2302      	movs	r3, #2
 8000e92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e98:	2303      	movs	r3, #3
 8000e9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <HAL_SD_MspInit+0xcc>)
 8000ea8:	f000 fa72 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8000eac:	bf00      	nop
 8000eae:	3728      	adds	r7, #40	; 0x28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40012c00 	.word	0x40012c00
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020800 	.word	0x40020800
 8000ec0:	40020c00 	.word	0x40020c00

08000ec4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b08a      	sub	sp, #40	; 0x28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a19      	ldr	r2, [pc, #100]	; (8000f48 <HAL_UART_MspInit+0x84>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d12b      	bne.n	8000f3e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	4b18      	ldr	r3, [pc, #96]	; (8000f4c <HAL_UART_MspInit+0x88>)
 8000eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eee:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <HAL_UART_MspInit+0x88>)
 8000ef0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ef4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef6:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <HAL_UART_MspInit+0x88>)
 8000ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000efe:	613b      	str	r3, [r7, #16]
 8000f00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <HAL_UART_MspInit+0x88>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a10      	ldr	r2, [pc, #64]	; (8000f4c <HAL_UART_MspInit+0x88>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_UART_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f1e:	230c      	movs	r3, #12
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f22:	2302      	movs	r3, #2
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f2e:	2307      	movs	r3, #7
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f32:	f107 0314 	add.w	r3, r7, #20
 8000f36:	4619      	mov	r1, r3
 8000f38:	4805      	ldr	r0, [pc, #20]	; (8000f50 <HAL_UART_MspInit+0x8c>)
 8000f3a:	f000 fa29 	bl	8001390 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f3e:	bf00      	nop
 8000f40:	3728      	adds	r7, #40	; 0x28
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40004400 	.word	0x40004400
 8000f4c:	40023800 	.word	0x40023800
 8000f50:	40020000 	.word	0x40020000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <HardFault_Handler+0x4>

08000f68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f6c:	e7fe      	b.n	8000f6c <MemManage_Handler+0x4>

08000f6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f72:	e7fe      	b.n	8000f72 <BusFault_Handler+0x4>

08000f74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f78:	e7fe      	b.n	8000f78 <UsageFault_Handler+0x4>

08000f7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9a:	bf00      	nop
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr

08000fa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa8:	f000 f8ca 	bl	8001140 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fb8:	4a14      	ldr	r2, [pc, #80]	; (800100c <_sbrk+0x5c>)
 8000fba:	4b15      	ldr	r3, [pc, #84]	; (8001010 <_sbrk+0x60>)
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fc4:	4b13      	ldr	r3, [pc, #76]	; (8001014 <_sbrk+0x64>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d102      	bne.n	8000fd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <_sbrk+0x64>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <_sbrk+0x68>)
 8000fd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <_sbrk+0x64>)
 8000fd4:	681a      	ldr	r2, [r3, #0]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	d207      	bcs.n	8000ff0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fe0:	f006 fd1c 	bl	8007a1c <__errno>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	230c      	movs	r3, #12
 8000fe8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295
 8000fee:	e009      	b.n	8001004 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ff0:	4b08      	ldr	r3, [pc, #32]	; (8001014 <_sbrk+0x64>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ff6:	4b07      	ldr	r3, [pc, #28]	; (8001014 <_sbrk+0x64>)
 8000ff8:	681a      	ldr	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4413      	add	r3, r2
 8000ffe:	4a05      	ldr	r2, [pc, #20]	; (8001014 <_sbrk+0x64>)
 8001000:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001002:	68fb      	ldr	r3, [r7, #12]
}
 8001004:	4618      	mov	r0, r3
 8001006:	3718      	adds	r7, #24
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20020000 	.word	0x20020000
 8001010:	00000400 	.word	0x00000400
 8001014:	20000090 	.word	0x20000090
 8001018:	20000b00 	.word	0x20000b00

0800101c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <SystemInit+0x28>)
 8001022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001026:	4a07      	ldr	r2, [pc, #28]	; (8001044 <SystemInit+0x28>)
 8001028:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800102c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <SystemInit+0x28>)
 8001032:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001036:	609a      	str	r2, [r3, #8]
#endif
}
 8001038:	bf00      	nop
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001048:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001080 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800104c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800104e:	e003      	b.n	8001058 <LoopCopyDataInit>

08001050 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001050:	4b0c      	ldr	r3, [pc, #48]	; (8001084 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001052:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001054:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001056:	3104      	adds	r1, #4

08001058 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001058:	480b      	ldr	r0, [pc, #44]	; (8001088 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800105c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800105e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001060:	d3f6      	bcc.n	8001050 <CopyDataInit>
  ldr  r2, =_sbss
 8001062:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001064:	e002      	b.n	800106c <LoopFillZerobss>

08001066 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001066:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001068:	f842 3b04 	str.w	r3, [r2], #4

0800106c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800106e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001070:	d3f9      	bcc.n	8001066 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001072:	f7ff ffd3 	bl	800101c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001076:	f006 fcd7 	bl	8007a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800107a:	f7ff fcd5 	bl	8000a28 <main>
  bx  lr    
 800107e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001080:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001084:	08008858 	.word	0x08008858
  ldr  r0, =_sdata
 8001088:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800108c:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001090:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001094:	20000afc 	.word	0x20000afc

08001098 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001098:	e7fe      	b.n	8001098 <ADC_IRQHandler>
	...

0800109c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_Init+0x40>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_Init+0x40>)
 80010a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_Init+0x40>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a0a      	ldr	r2, [pc, #40]	; (80010dc <HAL_Init+0x40>)
 80010b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_Init+0x40>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_Init+0x40>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c4:	2003      	movs	r0, #3
 80010c6:	f000 f92f 	bl	8001328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ca:	2000      	movs	r0, #0
 80010cc:	f000 f808 	bl	80010e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d0:	f7ff fe68 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d4:	2300      	movs	r3, #0
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40023c00 	.word	0x40023c00

080010e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x54>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_InitTick+0x58>)
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80010fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 f939 	bl	8001376 <HAL_SYSTICK_Config>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800110a:	2301      	movs	r3, #1
 800110c:	e00e      	b.n	800112c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b0f      	cmp	r3, #15
 8001112:	d80a      	bhi.n	800112a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001114:	2200      	movs	r2, #0
 8001116:	6879      	ldr	r1, [r7, #4]
 8001118:	f04f 30ff 	mov.w	r0, #4294967295
 800111c:	f000 f90f 	bl	800133e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001120:	4a06      	ldr	r2, [pc, #24]	; (800113c <HAL_InitTick+0x5c>)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001126:	2300      	movs	r3, #0
 8001128:	e000      	b.n	800112c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
}
 800112c:	4618      	mov	r0, r3
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	20000000 	.word	0x20000000
 8001138:	20000008 	.word	0x20000008
 800113c:	20000004 	.word	0x20000004

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000008 	.word	0x20000008
 8001164:	2000068c 	.word	0x2000068c

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	2000068c 	.word	0x2000068c

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b09      	ldr	r3, [pc, #36]	; (80011c0 <HAL_Delay+0x40>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	20000008 	.word	0x20000008

080011c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011da:	68ba      	ldr	r2, [r7, #8]
 80011dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011e0:	4013      	ands	r3, r2
 80011e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011f6:	4a04      	ldr	r2, [pc, #16]	; (8001208 <__NVIC_SetPriorityGrouping+0x44>)
 80011f8:	68bb      	ldr	r3, [r7, #8]
 80011fa:	60d3      	str	r3, [r2, #12]
}
 80011fc:	bf00      	nop
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001210:	4b04      	ldr	r3, [pc, #16]	; (8001224 <__NVIC_GetPriorityGrouping+0x18>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	0a1b      	lsrs	r3, r3, #8
 8001216:	f003 0307 	and.w	r3, r3, #7
}
 800121a:	4618      	mov	r0, r3
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	; (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
	...

080012e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012f4:	d301      	bcc.n	80012fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012f6:	2301      	movs	r3, #1
 80012f8:	e00f      	b.n	800131a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012fa:	4a0a      	ldr	r2, [pc, #40]	; (8001324 <SysTick_Config+0x40>)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3b01      	subs	r3, #1
 8001300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001302:	210f      	movs	r1, #15
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f7ff ff8e 	bl	8001228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <SysTick_Config+0x40>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001312:	4b04      	ldr	r3, [pc, #16]	; (8001324 <SysTick_Config+0x40>)
 8001314:	2207      	movs	r2, #7
 8001316:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	e000e010 	.word	0xe000e010

08001328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff ff47 	bl	80011c4 <__NVIC_SetPriorityGrouping>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800133e:	b580      	push	{r7, lr}
 8001340:	b086      	sub	sp, #24
 8001342:	af00      	add	r7, sp, #0
 8001344:	4603      	mov	r3, r0
 8001346:	60b9      	str	r1, [r7, #8]
 8001348:	607a      	str	r2, [r7, #4]
 800134a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001350:	f7ff ff5c 	bl	800120c <__NVIC_GetPriorityGrouping>
 8001354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	6978      	ldr	r0, [r7, #20]
 800135c:	f7ff ff8e 	bl	800127c <NVIC_EncodePriority>
 8001360:	4602      	mov	r2, r0
 8001362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff ff5d 	bl	8001228 <__NVIC_SetPriority>
}
 800136e:	bf00      	nop
 8001370:	3718      	adds	r7, #24
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b082      	sub	sp, #8
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ffb0 	bl	80012e4 <SysTick_Config>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
	...

08001390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001390:	b480      	push	{r7}
 8001392:	b089      	sub	sp, #36	; 0x24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
 8001398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
 80013aa:	e165      	b.n	8001678 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013ac:	2201      	movs	r2, #1
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	697a      	ldr	r2, [r7, #20]
 80013bc:	4013      	ands	r3, r2
 80013be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80013c0:	693a      	ldr	r2, [r7, #16]
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 8154 	bne.w	8001672 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d00b      	beq.n	80013ea <HAL_GPIO_Init+0x5a>
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d007      	beq.n	80013ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013de:	2b11      	cmp	r3, #17
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	2b12      	cmp	r3, #18
 80013e8:	d130      	bne.n	800144c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	2203      	movs	r2, #3
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43db      	mvns	r3, r3
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	4013      	ands	r3, r2
 8001400:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	68da      	ldr	r2, [r3, #12]
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	fa02 f303 	lsl.w	r3, r2, r3
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001420:	2201      	movs	r2, #1
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	091b      	lsrs	r3, r3, #4
 8001436:	f003 0201 	and.w	r2, r3, #1
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	2203      	movs	r2, #3
 8001458:	fa02 f303 	lsl.w	r3, r2, r3
 800145c:	43db      	mvns	r3, r3
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	4013      	ands	r3, r2
 8001462:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	69ba      	ldr	r2, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b02      	cmp	r3, #2
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0xfc>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b12      	cmp	r3, #18
 800148a:	d123      	bne.n	80014d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	220f      	movs	r2, #15
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	691a      	ldr	r2, [r3, #16]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	69ba      	ldr	r2, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	08da      	lsrs	r2, r3, #3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3208      	adds	r2, #8
 80014ce:	69b9      	ldr	r1, [r7, #24]
 80014d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	2203      	movs	r2, #3
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	f003 0203 	and.w	r2, r3, #3
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	2b00      	cmp	r3, #0
 8001512:	f000 80ae 	beq.w	8001672 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	60fb      	str	r3, [r7, #12]
 800151a:	4b5c      	ldr	r3, [pc, #368]	; (800168c <HAL_GPIO_Init+0x2fc>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	4a5b      	ldr	r2, [pc, #364]	; (800168c <HAL_GPIO_Init+0x2fc>)
 8001520:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001524:	6453      	str	r3, [r2, #68]	; 0x44
 8001526:	4b59      	ldr	r3, [pc, #356]	; (800168c <HAL_GPIO_Init+0x2fc>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001532:	4a57      	ldr	r2, [pc, #348]	; (8001690 <HAL_GPIO_Init+0x300>)
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	089b      	lsrs	r3, r3, #2
 8001538:	3302      	adds	r3, #2
 800153a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	f003 0303 	and.w	r3, r3, #3
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	220f      	movs	r2, #15
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4e      	ldr	r2, [pc, #312]	; (8001694 <HAL_GPIO_Init+0x304>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d025      	beq.n	80015aa <HAL_GPIO_Init+0x21a>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a4d      	ldr	r2, [pc, #308]	; (8001698 <HAL_GPIO_Init+0x308>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d01f      	beq.n	80015a6 <HAL_GPIO_Init+0x216>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a4c      	ldr	r2, [pc, #304]	; (800169c <HAL_GPIO_Init+0x30c>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0x212>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a4b      	ldr	r2, [pc, #300]	; (80016a0 <HAL_GPIO_Init+0x310>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x20e>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a4a      	ldr	r2, [pc, #296]	; (80016a4 <HAL_GPIO_Init+0x314>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x20a>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a49      	ldr	r2, [pc, #292]	; (80016a8 <HAL_GPIO_Init+0x318>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x206>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a48      	ldr	r2, [pc, #288]	; (80016ac <HAL_GPIO_Init+0x31c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x202>
 800158e:	2306      	movs	r3, #6
 8001590:	e00c      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 8001592:	2307      	movs	r3, #7
 8001594:	e00a      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 8001596:	2305      	movs	r3, #5
 8001598:	e008      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 800159a:	2304      	movs	r3, #4
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 800159e:	2303      	movs	r3, #3
 80015a0:	e004      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 80015a2:	2302      	movs	r3, #2
 80015a4:	e002      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <HAL_GPIO_Init+0x21c>
 80015aa:	2300      	movs	r3, #0
 80015ac:	69fa      	ldr	r2, [r7, #28]
 80015ae:	f002 0203 	and.w	r2, r2, #3
 80015b2:	0092      	lsls	r2, r2, #2
 80015b4:	4093      	lsls	r3, r2
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015bc:	4934      	ldr	r1, [pc, #208]	; (8001690 <HAL_GPIO_Init+0x300>)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	089b      	lsrs	r3, r3, #2
 80015c2:	3302      	adds	r3, #2
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <HAL_GPIO_Init+0x320>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d003      	beq.n	80015ee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015ee:	4a30      	ldr	r2, [pc, #192]	; (80016b0 <HAL_GPIO_Init+0x320>)
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80015f4:	4b2e      	ldr	r3, [pc, #184]	; (80016b0 <HAL_GPIO_Init+0x320>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	4013      	ands	r3, r2
 8001602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001618:	4a25      	ldr	r2, [pc, #148]	; (80016b0 <HAL_GPIO_Init+0x320>)
 800161a:	69bb      	ldr	r3, [r7, #24]
 800161c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800161e:	4b24      	ldr	r3, [pc, #144]	; (80016b0 <HAL_GPIO_Init+0x320>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	43db      	mvns	r3, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	4013      	ands	r3, r2
 800162c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d003      	beq.n	8001642 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001642:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <HAL_GPIO_Init+0x320>)
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_GPIO_Init+0x320>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	43db      	mvns	r3, r3
 8001652:	69ba      	ldr	r2, [r7, #24]
 8001654:	4013      	ands	r3, r2
 8001656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d003      	beq.n	800166c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800166c:	4a10      	ldr	r2, [pc, #64]	; (80016b0 <HAL_GPIO_Init+0x320>)
 800166e:	69bb      	ldr	r3, [r7, #24]
 8001670:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	3301      	adds	r3, #1
 8001676:	61fb      	str	r3, [r7, #28]
 8001678:	69fb      	ldr	r3, [r7, #28]
 800167a:	2b0f      	cmp	r3, #15
 800167c:	f67f ae96 	bls.w	80013ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001680:	bf00      	nop
 8001682:	3724      	adds	r7, #36	; 0x24
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr
 800168c:	40023800 	.word	0x40023800
 8001690:	40013800 	.word	0x40013800
 8001694:	40020000 	.word	0x40020000
 8001698:	40020400 	.word	0x40020400
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020c00 	.word	0x40020c00
 80016a4:	40021000 	.word	0x40021000
 80016a8:	40021400 	.word	0x40021400
 80016ac:	40021800 	.word	0x40021800
 80016b0:	40013c00 	.word	0x40013c00

080016b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	460b      	mov	r3, r1
 80016be:	807b      	strh	r3, [r7, #2]
 80016c0:	4613      	mov	r3, r2
 80016c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016c4:	787b      	ldrb	r3, [r7, #1]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016ca:	887a      	ldrh	r2, [r7, #2]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016d0:	e003      	b.n	80016da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016d2:	887b      	ldrh	r3, [r7, #2]
 80016d4:	041a      	lsls	r2, r3, #16
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	619a      	str	r2, [r3, #24]
}
 80016da:	bf00      	nop
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d101      	bne.n	80016fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0cc      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016fc:	4b68      	ldr	r3, [pc, #416]	; (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 030f 	and.w	r3, r3, #15
 8001704:	683a      	ldr	r2, [r7, #0]
 8001706:	429a      	cmp	r2, r3
 8001708:	d90c      	bls.n	8001724 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800170a:	4b65      	ldr	r3, [pc, #404]	; (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 800170c:	683a      	ldr	r2, [r7, #0]
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001712:	4b63      	ldr	r3, [pc, #396]	; (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 030f 	and.w	r3, r3, #15
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e0b8      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0302 	and.w	r3, r3, #2
 800172c:	2b00      	cmp	r3, #0
 800172e:	d020      	beq.n	8001772 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f003 0304 	and.w	r3, r3, #4
 8001738:	2b00      	cmp	r3, #0
 800173a:	d005      	beq.n	8001748 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800173c:	4b59      	ldr	r3, [pc, #356]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a58      	ldr	r2, [pc, #352]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001742:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001746:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001754:	4b53      	ldr	r3, [pc, #332]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001756:	689b      	ldr	r3, [r3, #8]
 8001758:	4a52      	ldr	r2, [pc, #328]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800175a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800175e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001760:	4b50      	ldr	r3, [pc, #320]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	494d      	ldr	r1, [pc, #308]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800176e:	4313      	orrs	r3, r2
 8001770:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d044      	beq.n	8001808 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001786:	4b47      	ldr	r3, [pc, #284]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d119      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e07f      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b02      	cmp	r3, #2
 800179c:	d003      	beq.n	80017a6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d107      	bne.n	80017b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017a6:	4b3f      	ldr	r3, [pc, #252]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d109      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e06f      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b6:	4b3b      	ldr	r3, [pc, #236]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d101      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e067      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017c6:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f023 0203 	bic.w	r2, r3, #3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4934      	ldr	r1, [pc, #208]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017d8:	f7ff fcc6 	bl	8001168 <HAL_GetTick>
 80017dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e0:	f7ff fcc2 	bl	8001168 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d901      	bls.n	80017f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e04f      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f6:	4b2b      	ldr	r3, [pc, #172]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 020c 	and.w	r2, r3, #12
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	429a      	cmp	r2, r3
 8001806:	d1eb      	bne.n	80017e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001808:	4b25      	ldr	r3, [pc, #148]	; (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 030f 	and.w	r3, r3, #15
 8001810:	683a      	ldr	r2, [r7, #0]
 8001812:	429a      	cmp	r2, r3
 8001814:	d20c      	bcs.n	8001830 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001816:	4b22      	ldr	r3, [pc, #136]	; (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181e:	4b20      	ldr	r3, [pc, #128]	; (80018a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 030f 	and.w	r3, r3, #15
 8001826:	683a      	ldr	r2, [r7, #0]
 8001828:	429a      	cmp	r2, r3
 800182a:	d001      	beq.n	8001830 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e032      	b.n	8001896 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0304 	and.w	r3, r3, #4
 8001838:	2b00      	cmp	r3, #0
 800183a:	d008      	beq.n	800184e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800183c:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	4916      	ldr	r1, [pc, #88]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	4313      	orrs	r3, r2
 800184c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800185a:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	691b      	ldr	r3, [r3, #16]
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	490e      	ldr	r1, [pc, #56]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 800186a:	4313      	orrs	r3, r2
 800186c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800186e:	f000 fb7f 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001872:	4601      	mov	r1, r0
 8001874:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	091b      	lsrs	r3, r3, #4
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	4a0a      	ldr	r2, [pc, #40]	; (80018a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001880:	5cd3      	ldrb	r3, [r2, r3]
 8001882:	fa21 f303 	lsr.w	r3, r1, r3
 8001886:	4a09      	ldr	r2, [pc, #36]	; (80018ac <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800188a:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <HAL_RCC_ClockConfig+0x1c8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4618      	mov	r0, r3
 8001890:	f7ff fc26 	bl	80010e0 <HAL_InitTick>

  return HAL_OK;
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	40023c00 	.word	0x40023c00
 80018a4:	40023800 	.word	0x40023800
 80018a8:	08008768 	.word	0x08008768
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000004 	.word	0x20000004

080018b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000000 	.word	0x20000000

080018cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018d0:	f7ff fff0 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
 80018d4:	4601      	mov	r1, r0
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	0a9b      	lsrs	r3, r3, #10
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	4a03      	ldr	r2, [pc, #12]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e2:	5cd3      	ldrb	r3, [r2, r3]
 80018e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	08008778 	.word	0x08008778

080018f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018f8:	f7ff ffdc 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
 80018fc:	4601      	mov	r1, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	0b5b      	lsrs	r3, r3, #13
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4a03      	ldr	r2, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800190a:	5cd3      	ldrb	r3, [r2, r3]
 800190c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	08008778 	.word	0x08008778

0800191c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08c      	sub	sp, #48	; 0x30
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001924:	2300      	movs	r3, #0
 8001926:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001928:	2300      	movs	r3, #0
 800192a:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001930:	2300      	movs	r3, #0
 8001932:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001938:	2300      	movs	r3, #0
 800193a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001944:	2300      	movs	r3, #0
 8001946:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0301 	and.w	r3, r3, #1
 8001950:	2b00      	cmp	r3, #0
 8001952:	d010      	beq.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001954:	4b6f      	ldr	r3, [pc, #444]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800195a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001962:	496c      	ldr	r1, [pc, #432]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001964:	4313      	orrs	r3, r2
 8001966:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001972:	2301      	movs	r3, #1
 8001974:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0302 	and.w	r3, r3, #2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d010      	beq.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001982:	4b64      	ldr	r3, [pc, #400]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001988:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001990:	4960      	ldr	r1, [pc, #384]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001992:	4313      	orrs	r3, r2
 8001994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d101      	bne.n	80019a4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80019a0:	2301      	movs	r3, #1
 80019a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d017      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80019b0:	4b58      	ldr	r3, [pc, #352]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	4955      	ldr	r1, [pc, #340]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019c0:	4313      	orrs	r3, r2
 80019c2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80019ce:	d101      	bne.n	80019d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80019d0:	2301      	movs	r3, #1
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d101      	bne.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80019dc:	2301      	movs	r3, #1
 80019de:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d017      	beq.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80019ec:	4b49      	ldr	r3, [pc, #292]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80019f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fa:	4946      	ldr	r1, [pc, #280]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80019fc:	4313      	orrs	r3, r2
 80019fe:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001a0a:	d101      	bne.n	8001a10 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d101      	bne.n	8001a1c <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0320 	and.w	r3, r3, #32
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	f000 808a 	beq.w	8001b3e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	60bb      	str	r3, [r7, #8]
 8001a2e:	4b39      	ldr	r3, [pc, #228]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a38      	ldr	r2, [pc, #224]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b36      	ldr	r3, [pc, #216]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	60bb      	str	r3, [r7, #8]
 8001a44:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001a46:	4b34      	ldr	r3, [pc, #208]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a33      	ldr	r2, [pc, #204]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a50:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a52:	f7ff fb89 	bl	8001168 <HAL_GetTick>
 8001a56:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a58:	e008      	b.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001a5a:	f7ff fb85 	bl	8001168 <HAL_GetTick>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	1ad3      	subs	r3, r2, r3
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d901      	bls.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e278      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d0f0      	beq.n	8001a5a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001a78:	4b26      	ldr	r3, [pc, #152]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a80:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d02f      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a90:	6a3a      	ldr	r2, [r7, #32]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d028      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001a96:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a9e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001aa6:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001aac:	4a19      	ldr	r2, [pc, #100]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001aae:	6a3b      	ldr	r3, [r7, #32]
 8001ab0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001ab2:	4b18      	ldr	r3, [pc, #96]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d114      	bne.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001abe:	f7ff fb53 	bl	8001168 <HAL_GetTick>
 8001ac2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ac4:	e00a      	b.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac6:	f7ff fb4f 	bl	8001168 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e240      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0ee      	beq.n	8001ac6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001af4:	d114      	bne.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001b06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b0a:	4902      	ldr	r1, [pc, #8]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	608b      	str	r3, [r1, #8]
 8001b10:	e00c      	b.n	8001b2c <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	42470e40 	.word	0x42470e40
 8001b20:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4a49      	ldr	r2, [pc, #292]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b26:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001b2a:	6093      	str	r3, [r2, #8]
 8001b2c:	4b47      	ldr	r3, [pc, #284]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b2e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b38:	4944      	ldr	r1, [pc, #272]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0310 	and.w	r3, r3, #16
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d004      	beq.n	8001b54 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001b50:	4b3f      	ldr	r3, [pc, #252]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001b52:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00a      	beq.n	8001b76 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001b60:	4b3a      	ldr	r3, [pc, #232]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b6e:	4937      	ldr	r1, [pc, #220]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00a      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001b82:	4b32      	ldr	r3, [pc, #200]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b84:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b88:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b90:	492e      	ldr	r1, [pc, #184]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d011      	beq.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ba4:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001baa:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb2:	4926      	ldr	r1, [pc, #152]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001bc2:	d101      	bne.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d00a      	beq.n	8001bea <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001bd4:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bda:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	491a      	ldr	r1, [pc, #104]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d011      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001bf6:	4b15      	ldr	r3, [pc, #84]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001bf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bfc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c04:	4911      	ldr	r1, [pc, #68]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c14:	d101      	bne.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001c16:	2301      	movs	r3, #1
 8001c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d005      	beq.n	8001c2c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001c28:	f040 80ff 	bne.w	8001e2a <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001c2c:	4b09      	ldr	r3, [pc, #36]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001c32:	f7ff fa99 	bl	8001168 <HAL_GetTick>
 8001c36:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c38:	e00e      	b.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001c3a:	f7ff fa95 	bl	8001168 <HAL_GetTick>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	1ad3      	subs	r3, r2, r3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d907      	bls.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001c48:	2303      	movs	r3, #3
 8001c4a:	e188      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	424711e0 	.word	0x424711e0
 8001c54:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001c58:	4b7e      	ldr	r3, [pc, #504]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1ea      	bne.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d009      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d028      	beq.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d124      	bne.n	8001cd6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001c8c:	4b71      	ldr	r3, [pc, #452]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c92:	0c1b      	lsrs	r3, r3, #16
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	3301      	adds	r3, #1
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001c9e:	4b6d      	ldr	r3, [pc, #436]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ca4:	0e1b      	lsrs	r3, r3, #24
 8001ca6:	f003 030f 	and.w	r3, r3, #15
 8001caa:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	019b      	lsls	r3, r3, #6
 8001cb6:	431a      	orrs	r2, r3
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	085b      	lsrs	r3, r3, #1
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	041b      	lsls	r3, r3, #16
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	69bb      	ldr	r3, [r7, #24]
 8001cc4:	061b      	lsls	r3, r3, #24
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	071b      	lsls	r3, r3, #28
 8001cce:	4961      	ldr	r1, [pc, #388]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0304 	and.w	r3, r3, #4
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d004      	beq.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001cea:	d00a      	beq.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d035      	beq.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d00:	d130      	bne.n	8001d64 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d02:	4b54      	ldr	r3, [pc, #336]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d08:	0c1b      	lsrs	r3, r3, #16
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d14:	4b4f      	ldr	r3, [pc, #316]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d1a:	0f1b      	lsrs	r3, r3, #28
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	685a      	ldr	r2, [r3, #4]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	019b      	lsls	r3, r3, #6
 8001d2c:	431a      	orrs	r2, r3
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	085b      	lsrs	r3, r3, #1
 8001d32:	3b01      	subs	r3, #1
 8001d34:	041b      	lsls	r3, r3, #16
 8001d36:	431a      	orrs	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	061b      	lsls	r3, r3, #24
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	071b      	lsls	r3, r3, #28
 8001d44:	4943      	ldr	r1, [pc, #268]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d46:	4313      	orrs	r3, r2
 8001d48:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001d4c:	4b41      	ldr	r3, [pc, #260]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d52:	f023 021f 	bic.w	r2, r3, #31
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	493d      	ldr	r1, [pc, #244]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d029      	beq.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d78:	d124      	bne.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001d7a:	4b36      	ldr	r3, [pc, #216]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d80:	0c1b      	lsrs	r3, r3, #16
 8001d82:	f003 0303 	and.w	r3, r3, #3
 8001d86:	3301      	adds	r3, #1
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001d8c:	4b31      	ldr	r3, [pc, #196]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001d8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d92:	0f1b      	lsrs	r3, r3, #28
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685a      	ldr	r2, [r3, #4]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	019b      	lsls	r3, r3, #6
 8001da4:	431a      	orrs	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	085b      	lsrs	r3, r3, #1
 8001dac:	3b01      	subs	r3, #1
 8001dae:	041b      	lsls	r3, r3, #16
 8001db0:	431a      	orrs	r2, r3
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	061b      	lsls	r3, r3, #24
 8001db6:	431a      	orrs	r2, r3
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	071b      	lsls	r3, r3, #28
 8001dbc:	4925      	ldr	r1, [pc, #148]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d016      	beq.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	019b      	lsls	r3, r3, #6
 8001dda:	431a      	orrs	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	085b      	lsrs	r3, r3, #1
 8001de2:	3b01      	subs	r3, #1
 8001de4:	041b      	lsls	r3, r3, #16
 8001de6:	431a      	orrs	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	061b      	lsls	r3, r3, #24
 8001dee:	431a      	orrs	r2, r3
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	071b      	lsls	r3, r3, #28
 8001df6:	4917      	ldr	r1, [pc, #92]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001e00:	2201      	movs	r2, #1
 8001e02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e04:	f7ff f9b0 	bl	8001168 <HAL_GetTick>
 8001e08:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001e0c:	f7ff f9ac 	bl	8001168 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d901      	bls.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e09f      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	f040 8095 	bne.w	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001e38:	f7ff f996 	bl	8001168 <HAL_GetTick>
 8001e3c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e3e:	e00f      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001e40:	f7ff f992 	bl	8001168 <HAL_GetTick>
 8001e44:	4602      	mov	r2, r0
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d908      	bls.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e4e:	2303      	movs	r3, #3
 8001e50:	e085      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800
 8001e58:	42470068 	.word	0x42470068
 8001e5c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e60:	4b41      	ldr	r3, [pc, #260]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001e68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001e6c:	d0e8      	beq.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d009      	beq.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d02b      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d127      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8001e96:	4b34      	ldr	r3, [pc, #208]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e9c:	0c1b      	lsrs	r3, r3, #16
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	3301      	adds	r3, #1
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699a      	ldr	r2, [r3, #24]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	69db      	ldr	r3, [r3, #28]
 8001eb0:	019b      	lsls	r3, r3, #6
 8001eb2:	431a      	orrs	r2, r3
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	085b      	lsrs	r3, r3, #1
 8001eb8:	3b01      	subs	r3, #1
 8001eba:	041b      	lsls	r3, r3, #16
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	061b      	lsls	r3, r3, #24
 8001ec4:	4928      	ldr	r1, [pc, #160]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001ecc:	4b26      	ldr	r3, [pc, #152]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ed2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eda:	3b01      	subs	r3, #1
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	4922      	ldr	r1, [pc, #136]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d01d      	beq.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x612>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001efa:	d118      	bne.n	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001efc:	4b1a      	ldr	r3, [pc, #104]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f02:	0e1b      	lsrs	r3, r3, #24
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	699a      	ldr	r2, [r3, #24]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	019b      	lsls	r3, r3, #6
 8001f14:	431a      	orrs	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a1b      	ldr	r3, [r3, #32]
 8001f1a:	085b      	lsrs	r3, r3, #1
 8001f1c:	3b01      	subs	r3, #1
 8001f1e:	041b      	lsls	r3, r3, #16
 8001f20:	431a      	orrs	r2, r3
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	4910      	ldr	r1, [pc, #64]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f2e:	4b0f      	ldr	r3, [pc, #60]	; (8001f6c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001f34:	f7ff f918 	bl	8001168 <HAL_GetTick>
 8001f38:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8001f3c:	f7ff f914 	bl	8001168 <HAL_GetTick>
 8001f40:	4602      	mov	r2, r0
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e007      	b.n	8001f5e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001f56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f5a:	d1ef      	bne.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3730      	adds	r7, #48	; 0x30
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	40023800 	.word	0x40023800
 8001f6c:	42470070 	.word	0x42470070

08001f70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f8a:	4bc6      	ldr	r3, [pc, #792]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	f200 817e 	bhi.w	8002294 <HAL_RCC_GetSysClockFreq+0x324>
 8001f98:	a201      	add	r2, pc, #4	; (adr r2, 8001fa0 <HAL_RCC_GetSysClockFreq+0x30>)
 8001f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f9e:	bf00      	nop
 8001fa0:	08001fd5 	.word	0x08001fd5
 8001fa4:	08002295 	.word	0x08002295
 8001fa8:	08002295 	.word	0x08002295
 8001fac:	08002295 	.word	0x08002295
 8001fb0:	08001fdb 	.word	0x08001fdb
 8001fb4:	08002295 	.word	0x08002295
 8001fb8:	08002295 	.word	0x08002295
 8001fbc:	08002295 	.word	0x08002295
 8001fc0:	08001fe1 	.word	0x08001fe1
 8001fc4:	08002295 	.word	0x08002295
 8001fc8:	08002295 	.word	0x08002295
 8001fcc:	08002295 	.word	0x08002295
 8001fd0:	0800213d 	.word	0x0800213d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4bb4      	ldr	r3, [pc, #720]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001fd6:	613b      	str	r3, [r7, #16]
       break;
 8001fd8:	e15f      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fda:	4bb4      	ldr	r3, [pc, #720]	; (80022ac <HAL_RCC_GetSysClockFreq+0x33c>)
 8001fdc:	613b      	str	r3, [r7, #16]
      break;
 8001fde:	e15c      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fe0:	4bb0      	ldr	r3, [pc, #704]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fe8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fea:	4bae      	ldr	r3, [pc, #696]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d04a      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ff6:	4bab      	ldr	r3, [pc, #684]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	099b      	lsrs	r3, r3, #6
 8001ffc:	f04f 0400 	mov.w	r4, #0
 8002000:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	ea03 0501 	and.w	r5, r3, r1
 800200c:	ea04 0602 	and.w	r6, r4, r2
 8002010:	4629      	mov	r1, r5
 8002012:	4632      	mov	r2, r6
 8002014:	f04f 0300 	mov.w	r3, #0
 8002018:	f04f 0400 	mov.w	r4, #0
 800201c:	0154      	lsls	r4, r2, #5
 800201e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002022:	014b      	lsls	r3, r1, #5
 8002024:	4619      	mov	r1, r3
 8002026:	4622      	mov	r2, r4
 8002028:	1b49      	subs	r1, r1, r5
 800202a:	eb62 0206 	sbc.w	r2, r2, r6
 800202e:	f04f 0300 	mov.w	r3, #0
 8002032:	f04f 0400 	mov.w	r4, #0
 8002036:	0194      	lsls	r4, r2, #6
 8002038:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800203c:	018b      	lsls	r3, r1, #6
 800203e:	1a5b      	subs	r3, r3, r1
 8002040:	eb64 0402 	sbc.w	r4, r4, r2
 8002044:	f04f 0100 	mov.w	r1, #0
 8002048:	f04f 0200 	mov.w	r2, #0
 800204c:	00e2      	lsls	r2, r4, #3
 800204e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002052:	00d9      	lsls	r1, r3, #3
 8002054:	460b      	mov	r3, r1
 8002056:	4614      	mov	r4, r2
 8002058:	195b      	adds	r3, r3, r5
 800205a:	eb44 0406 	adc.w	r4, r4, r6
 800205e:	f04f 0100 	mov.w	r1, #0
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	0262      	lsls	r2, r4, #9
 8002068:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800206c:	0259      	lsls	r1, r3, #9
 800206e:	460b      	mov	r3, r1
 8002070:	4614      	mov	r4, r2
 8002072:	4618      	mov	r0, r3
 8002074:	4621      	mov	r1, r4
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	f04f 0400 	mov.w	r4, #0
 800207c:	461a      	mov	r2, r3
 800207e:	4623      	mov	r3, r4
 8002080:	f7fe f92e 	bl	80002e0 <__aeabi_uldivmod>
 8002084:	4603      	mov	r3, r0
 8002086:	460c      	mov	r4, r1
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e049      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800208c:	4b85      	ldr	r3, [pc, #532]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	099b      	lsrs	r3, r3, #6
 8002092:	f04f 0400 	mov.w	r4, #0
 8002096:	f240 11ff 	movw	r1, #511	; 0x1ff
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	ea03 0501 	and.w	r5, r3, r1
 80020a2:	ea04 0602 	and.w	r6, r4, r2
 80020a6:	4629      	mov	r1, r5
 80020a8:	4632      	mov	r2, r6
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	f04f 0400 	mov.w	r4, #0
 80020b2:	0154      	lsls	r4, r2, #5
 80020b4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80020b8:	014b      	lsls	r3, r1, #5
 80020ba:	4619      	mov	r1, r3
 80020bc:	4622      	mov	r2, r4
 80020be:	1b49      	subs	r1, r1, r5
 80020c0:	eb62 0206 	sbc.w	r2, r2, r6
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	f04f 0400 	mov.w	r4, #0
 80020cc:	0194      	lsls	r4, r2, #6
 80020ce:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020d2:	018b      	lsls	r3, r1, #6
 80020d4:	1a5b      	subs	r3, r3, r1
 80020d6:	eb64 0402 	sbc.w	r4, r4, r2
 80020da:	f04f 0100 	mov.w	r1, #0
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	00e2      	lsls	r2, r4, #3
 80020e4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020e8:	00d9      	lsls	r1, r3, #3
 80020ea:	460b      	mov	r3, r1
 80020ec:	4614      	mov	r4, r2
 80020ee:	195b      	adds	r3, r3, r5
 80020f0:	eb44 0406 	adc.w	r4, r4, r6
 80020f4:	f04f 0100 	mov.w	r1, #0
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	02a2      	lsls	r2, r4, #10
 80020fe:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002102:	0299      	lsls	r1, r3, #10
 8002104:	460b      	mov	r3, r1
 8002106:	4614      	mov	r4, r2
 8002108:	4618      	mov	r0, r3
 800210a:	4621      	mov	r1, r4
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f04f 0400 	mov.w	r4, #0
 8002112:	461a      	mov	r2, r3
 8002114:	4623      	mov	r3, r4
 8002116:	f7fe f8e3 	bl	80002e0 <__aeabi_uldivmod>
 800211a:	4603      	mov	r3, r0
 800211c:	460c      	mov	r4, r1
 800211e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002120:	4b60      	ldr	r3, [pc, #384]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	0c1b      	lsrs	r3, r3, #16
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	3301      	adds	r3, #1
 800212c:	005b      	lsls	r3, r3, #1
 800212e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	fbb2 f3f3 	udiv	r3, r2, r3
 8002138:	613b      	str	r3, [r7, #16]
      break;
 800213a:	e0ae      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800213c:	4b59      	ldr	r3, [pc, #356]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002144:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002146:	4b57      	ldr	r3, [pc, #348]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d04a      	beq.n	80021e8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002152:	4b54      	ldr	r3, [pc, #336]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	099b      	lsrs	r3, r3, #6
 8002158:	f04f 0400 	mov.w	r4, #0
 800215c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002160:	f04f 0200 	mov.w	r2, #0
 8002164:	ea03 0501 	and.w	r5, r3, r1
 8002168:	ea04 0602 	and.w	r6, r4, r2
 800216c:	4629      	mov	r1, r5
 800216e:	4632      	mov	r2, r6
 8002170:	f04f 0300 	mov.w	r3, #0
 8002174:	f04f 0400 	mov.w	r4, #0
 8002178:	0154      	lsls	r4, r2, #5
 800217a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800217e:	014b      	lsls	r3, r1, #5
 8002180:	4619      	mov	r1, r3
 8002182:	4622      	mov	r2, r4
 8002184:	1b49      	subs	r1, r1, r5
 8002186:	eb62 0206 	sbc.w	r2, r2, r6
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	f04f 0400 	mov.w	r4, #0
 8002192:	0194      	lsls	r4, r2, #6
 8002194:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002198:	018b      	lsls	r3, r1, #6
 800219a:	1a5b      	subs	r3, r3, r1
 800219c:	eb64 0402 	sbc.w	r4, r4, r2
 80021a0:	f04f 0100 	mov.w	r1, #0
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	00e2      	lsls	r2, r4, #3
 80021aa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80021ae:	00d9      	lsls	r1, r3, #3
 80021b0:	460b      	mov	r3, r1
 80021b2:	4614      	mov	r4, r2
 80021b4:	195b      	adds	r3, r3, r5
 80021b6:	eb44 0406 	adc.w	r4, r4, r6
 80021ba:	f04f 0100 	mov.w	r1, #0
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	0262      	lsls	r2, r4, #9
 80021c4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80021c8:	0259      	lsls	r1, r3, #9
 80021ca:	460b      	mov	r3, r1
 80021cc:	4614      	mov	r4, r2
 80021ce:	4618      	mov	r0, r3
 80021d0:	4621      	mov	r1, r4
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f04f 0400 	mov.w	r4, #0
 80021d8:	461a      	mov	r2, r3
 80021da:	4623      	mov	r3, r4
 80021dc:	f7fe f880 	bl	80002e0 <__aeabi_uldivmod>
 80021e0:	4603      	mov	r3, r0
 80021e2:	460c      	mov	r4, r1
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	e049      	b.n	800227c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021e8:	4b2e      	ldr	r3, [pc, #184]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x334>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	099b      	lsrs	r3, r3, #6
 80021ee:	f04f 0400 	mov.w	r4, #0
 80021f2:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	ea03 0501 	and.w	r5, r3, r1
 80021fe:	ea04 0602 	and.w	r6, r4, r2
 8002202:	4629      	mov	r1, r5
 8002204:	4632      	mov	r2, r6
 8002206:	f04f 0300 	mov.w	r3, #0
 800220a:	f04f 0400 	mov.w	r4, #0
 800220e:	0154      	lsls	r4, r2, #5
 8002210:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002214:	014b      	lsls	r3, r1, #5
 8002216:	4619      	mov	r1, r3
 8002218:	4622      	mov	r2, r4
 800221a:	1b49      	subs	r1, r1, r5
 800221c:	eb62 0206 	sbc.w	r2, r2, r6
 8002220:	f04f 0300 	mov.w	r3, #0
 8002224:	f04f 0400 	mov.w	r4, #0
 8002228:	0194      	lsls	r4, r2, #6
 800222a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800222e:	018b      	lsls	r3, r1, #6
 8002230:	1a5b      	subs	r3, r3, r1
 8002232:	eb64 0402 	sbc.w	r4, r4, r2
 8002236:	f04f 0100 	mov.w	r1, #0
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	00e2      	lsls	r2, r4, #3
 8002240:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002244:	00d9      	lsls	r1, r3, #3
 8002246:	460b      	mov	r3, r1
 8002248:	4614      	mov	r4, r2
 800224a:	195b      	adds	r3, r3, r5
 800224c:	eb44 0406 	adc.w	r4, r4, r6
 8002250:	f04f 0100 	mov.w	r1, #0
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	02a2      	lsls	r2, r4, #10
 800225a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800225e:	0299      	lsls	r1, r3, #10
 8002260:	460b      	mov	r3, r1
 8002262:	4614      	mov	r4, r2
 8002264:	4618      	mov	r0, r3
 8002266:	4621      	mov	r1, r4
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f04f 0400 	mov.w	r4, #0
 800226e:	461a      	mov	r2, r3
 8002270:	4623      	mov	r3, r4
 8002272:	f7fe f835 	bl	80002e0 <__aeabi_uldivmod>
 8002276:	4603      	mov	r3, r0
 8002278:	460c      	mov	r4, r1
 800227a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800227c:	4b09      	ldr	r3, [pc, #36]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x334>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	0f1b      	lsrs	r3, r3, #28
 8002282:	f003 0307 	and.w	r3, r3, #7
 8002286:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002288:	697a      	ldr	r2, [r7, #20]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002290:	613b      	str	r3, [r7, #16]
      break;
 8002292:	e002      	b.n	800229a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002294:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <HAL_RCC_GetSysClockFreq+0x338>)
 8002296:	613b      	str	r3, [r7, #16]
      break;
 8002298:	bf00      	nop
    }
  }
  return sysclockfreq;
 800229a:	693b      	ldr	r3, [r7, #16]
}
 800229c:	4618      	mov	r0, r3
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022a4:	40023800 	.word	0x40023800
 80022a8:	00f42400 	.word	0x00f42400
 80022ac:	007a1200 	.word	0x007a1200

080022b0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 8083 	beq.w	80023d0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022ca:	4b95      	ldr	r3, [pc, #596]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d019      	beq.n	800230a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022d6:	4b92      	ldr	r3, [pc, #584]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d106      	bne.n	80022f0 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022e2:	4b8f      	ldr	r3, [pc, #572]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ee:	d00c      	beq.n	800230a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022f0:	4b8b      	ldr	r3, [pc, #556]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d112      	bne.n	8002322 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022fc:	4b88      	ldr	r3, [pc, #544]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002304:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002308:	d10b      	bne.n	8002322 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230a:	4b85      	ldr	r3, [pc, #532]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d05b      	beq.n	80023ce <HAL_RCC_OscConfig+0x11e>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d157      	bne.n	80023ce <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e216      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x8a>
 800232c:	4b7c      	ldr	r3, [pc, #496]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a7b      	ldr	r2, [pc, #492]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 8002332:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	e01d      	b.n	8002376 <HAL_RCC_OscConfig+0xc6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002342:	d10c      	bne.n	800235e <HAL_RCC_OscConfig+0xae>
 8002344:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a75      	ldr	r2, [pc, #468]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 800234a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b73      	ldr	r3, [pc, #460]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a72      	ldr	r2, [pc, #456]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 8002356:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800235a:	6013      	str	r3, [r2, #0]
 800235c:	e00b      	b.n	8002376 <HAL_RCC_OscConfig+0xc6>
 800235e:	4b70      	ldr	r3, [pc, #448]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a6f      	ldr	r2, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 8002364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6c      	ldr	r2, [pc, #432]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 8002370:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002374:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d013      	beq.n	80023a6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7fe fef3 	bl	8001168 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002386:	f7fe feef 	bl	8001168 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b64      	cmp	r3, #100	; 0x64
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e1db      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002398:	4b61      	ldr	r3, [pc, #388]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0xd6>
 80023a4:	e014      	b.n	80023d0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f7fe fedf 	bl	8001168 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ae:	f7fe fedb 	bl	8001168 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b64      	cmp	r3, #100	; 0x64
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e1c7      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023c0:	4b57      	ldr	r3, [pc, #348]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0xfe>
 80023cc:	e000      	b.n	80023d0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023ce:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0302 	and.w	r3, r3, #2
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d06f      	beq.n	80024bc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023dc:	4b50      	ldr	r3, [pc, #320]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f003 030c 	and.w	r3, r3, #12
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d017      	beq.n	8002418 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023e8:	4b4d      	ldr	r3, [pc, #308]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	d105      	bne.n	8002400 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80023f4:	4b4a      	ldr	r3, [pc, #296]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00b      	beq.n	8002418 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002400:	4b47      	ldr	r3, [pc, #284]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002408:	2b0c      	cmp	r3, #12
 800240a:	d11c      	bne.n	8002446 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240c:	4b44      	ldr	r3, [pc, #272]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d116      	bne.n	8002446 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002418:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_OscConfig+0x180>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	2b01      	cmp	r3, #1
 800242a:	d001      	beq.n	8002430 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e18f      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002430:	4b3b      	ldr	r3, [pc, #236]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	691b      	ldr	r3, [r3, #16]
 800243c:	00db      	lsls	r3, r3, #3
 800243e:	4938      	ldr	r1, [pc, #224]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 8002440:	4313      	orrs	r3, r2
 8002442:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002444:	e03a      	b.n	80024bc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	68db      	ldr	r3, [r3, #12]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d020      	beq.n	8002490 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800244e:	4b35      	ldr	r3, [pc, #212]	; (8002524 <HAL_RCC_OscConfig+0x274>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002454:	f7fe fe88 	bl	8001168 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800245c:	f7fe fe84 	bl	8001168 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e170      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800246e:	4b2c      	ldr	r3, [pc, #176]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800247a:	4b29      	ldr	r3, [pc, #164]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	00db      	lsls	r3, r3, #3
 8002488:	4925      	ldr	r1, [pc, #148]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
 800248e:	e015      	b.n	80024bc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002490:	4b24      	ldr	r3, [pc, #144]	; (8002524 <HAL_RCC_OscConfig+0x274>)
 8002492:	2200      	movs	r2, #0
 8002494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe fe67 	bl	8001168 <HAL_GetTick>
 800249a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249c:	e008      	b.n	80024b0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800249e:	f7fe fe63 	bl	8001168 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	693b      	ldr	r3, [r7, #16]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	2b02      	cmp	r3, #2
 80024aa:	d901      	bls.n	80024b0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e14f      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b0:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d1f0      	bne.n	800249e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d037      	beq.n	8002538 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d016      	beq.n	80024fe <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024d0:	4b15      	ldr	r3, [pc, #84]	; (8002528 <HAL_RCC_OscConfig+0x278>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7fe fe47 	bl	8001168 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024de:	f7fe fe43 	bl	8001168 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e12f      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <HAL_RCC_OscConfig+0x270>)
 80024f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d0f0      	beq.n	80024de <HAL_RCC_OscConfig+0x22e>
 80024fc:	e01c      	b.n	8002538 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fe:	4b0a      	ldr	r3, [pc, #40]	; (8002528 <HAL_RCC_OscConfig+0x278>)
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002504:	f7fe fe30 	bl	8001168 <HAL_GetTick>
 8002508:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800250a:	e00f      	b.n	800252c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800250c:	f7fe fe2c 	bl	8001168 <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	2b02      	cmp	r3, #2
 8002518:	d908      	bls.n	800252c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800251a:	2303      	movs	r3, #3
 800251c:	e118      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
 800251e:	bf00      	nop
 8002520:	40023800 	.word	0x40023800
 8002524:	42470000 	.word	0x42470000
 8002528:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800252c:	4b8a      	ldr	r3, [pc, #552]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 800252e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1e9      	bne.n	800250c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 8097 	beq.w	8002674 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002546:	2300      	movs	r3, #0
 8002548:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800254a:	4b83      	ldr	r3, [pc, #524]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d10f      	bne.n	8002576 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	4b7f      	ldr	r3, [pc, #508]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a7e      	ldr	r2, [pc, #504]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 8002560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b7c      	ldr	r3, [pc, #496]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800256e:	60fb      	str	r3, [r7, #12]
 8002570:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002572:	2301      	movs	r3, #1
 8002574:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002576:	4b79      	ldr	r3, [pc, #484]	; (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d118      	bne.n	80025b4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002582:	4b76      	ldr	r3, [pc, #472]	; (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a75      	ldr	r2, [pc, #468]	; (800275c <HAL_RCC_OscConfig+0x4ac>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800258e:	f7fe fdeb 	bl	8001168 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002596:	f7fe fde7 	bl	8001168 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e0d3      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a8:	4b6c      	ldr	r3, [pc, #432]	; (800275c <HAL_RCC_OscConfig+0x4ac>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d106      	bne.n	80025ca <HAL_RCC_OscConfig+0x31a>
 80025bc:	4b66      	ldr	r3, [pc, #408]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	4a65      	ldr	r2, [pc, #404]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 80025c2:	f043 0301 	orr.w	r3, r3, #1
 80025c6:	6713      	str	r3, [r2, #112]	; 0x70
 80025c8:	e01c      	b.n	8002604 <HAL_RCC_OscConfig+0x354>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b05      	cmp	r3, #5
 80025d0:	d10c      	bne.n	80025ec <HAL_RCC_OscConfig+0x33c>
 80025d2:	4b61      	ldr	r3, [pc, #388]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 80025d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d6:	4a60      	ldr	r2, [pc, #384]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 80025d8:	f043 0304 	orr.w	r3, r3, #4
 80025dc:	6713      	str	r3, [r2, #112]	; 0x70
 80025de:	4b5e      	ldr	r3, [pc, #376]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e2:	4a5d      	ldr	r2, [pc, #372]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	6713      	str	r3, [r2, #112]	; 0x70
 80025ea:	e00b      	b.n	8002604 <HAL_RCC_OscConfig+0x354>
 80025ec:	4b5a      	ldr	r3, [pc, #360]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a59      	ldr	r2, [pc, #356]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 80025f2:	f023 0301 	bic.w	r3, r3, #1
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	4b57      	ldr	r3, [pc, #348]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a56      	ldr	r2, [pc, #344]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d015      	beq.n	8002638 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800260c:	f7fe fdac 	bl	8001168 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002612:	e00a      	b.n	800262a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002614:	f7fe fda8 	bl	8001168 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002622:	4293      	cmp	r3, r2
 8002624:	d901      	bls.n	800262a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002626:	2303      	movs	r3, #3
 8002628:	e092      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262a:	4b4b      	ldr	r3, [pc, #300]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 800262c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262e:	f003 0302 	and.w	r3, r3, #2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d0ee      	beq.n	8002614 <HAL_RCC_OscConfig+0x364>
 8002636:	e014      	b.n	8002662 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002638:	f7fe fd96 	bl	8001168 <HAL_GetTick>
 800263c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800263e:	e00a      	b.n	8002656 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002640:	f7fe fd92 	bl	8001168 <HAL_GetTick>
 8002644:	4602      	mov	r2, r0
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	1ad3      	subs	r3, r2, r3
 800264a:	f241 3288 	movw	r2, #5000	; 0x1388
 800264e:	4293      	cmp	r3, r2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e07c      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002656:	4b40      	ldr	r3, [pc, #256]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 8002658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1ee      	bne.n	8002640 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002662:	7dfb      	ldrb	r3, [r7, #23]
 8002664:	2b01      	cmp	r3, #1
 8002666:	d105      	bne.n	8002674 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002668:	4b3b      	ldr	r3, [pc, #236]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 800266a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266c:	4a3a      	ldr	r2, [pc, #232]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 800266e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002672:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	2b00      	cmp	r3, #0
 800267a:	d068      	beq.n	800274e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800267c:	4b36      	ldr	r3, [pc, #216]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b08      	cmp	r3, #8
 8002686:	d060      	beq.n	800274a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	2b02      	cmp	r3, #2
 800268e:	d145      	bne.n	800271c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002690:	4b33      	ldr	r3, [pc, #204]	; (8002760 <HAL_RCC_OscConfig+0x4b0>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002696:	f7fe fd67 	bl	8001168 <HAL_GetTick>
 800269a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800269c:	e008      	b.n	80026b0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800269e:	f7fe fd63 	bl	8001168 <HAL_GetTick>
 80026a2:	4602      	mov	r2, r0
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	1ad3      	subs	r3, r2, r3
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d901      	bls.n	80026b0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80026ac:	2303      	movs	r3, #3
 80026ae:	e04f      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b0:	4b29      	ldr	r3, [pc, #164]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1f0      	bne.n	800269e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	69da      	ldr	r2, [r3, #28]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	431a      	orrs	r2, r3
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	019b      	lsls	r3, r3, #6
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d2:	085b      	lsrs	r3, r3, #1
 80026d4:	3b01      	subs	r3, #1
 80026d6:	041b      	lsls	r3, r3, #16
 80026d8:	431a      	orrs	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026de:	061b      	lsls	r3, r3, #24
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	071b      	lsls	r3, r3, #28
 80026e8:	491b      	ldr	r1, [pc, #108]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ee:	4b1c      	ldr	r3, [pc, #112]	; (8002760 <HAL_RCC_OscConfig+0x4b0>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fd38 	bl	8001168 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fd34 	bl	8001168 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e020      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b12      	ldr	r3, [pc, #72]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x44c>
 800271a:	e018      	b.n	800274e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_RCC_OscConfig+0x4b0>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002722:	f7fe fd21 	bl	8001168 <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800272a:	f7fe fd1d 	bl	8001168 <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e009      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <HAL_RCC_OscConfig+0x4a8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1f0      	bne.n	800272a <HAL_RCC_OscConfig+0x47a>
 8002748:	e001      	b.n	800274e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e000      	b.n	8002750 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40023800 	.word	0x40023800
 800275c:	40007000 	.word	0x40007000
 8002760:	42470060 	.word	0x42470060

08002764 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e022      	b.n	80027bc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b00      	cmp	r3, #0
 8002780:	d105      	bne.n	800278e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f7fe fb33 	bl	8000df4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2203      	movs	r2, #3
 8002792:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f000 f814 	bl	80027c4 <HAL_SD_InitCard>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00a      	b.n	80027bc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2201      	movs	r2, #1
 80027b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3708      	adds	r7, #8
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80027c4:	b5b0      	push	{r4, r5, r7, lr}
 80027c6:	b08e      	sub	sp, #56	; 0x38
 80027c8:	af04      	add	r7, sp, #16
 80027ca:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80027d4:	2300      	movs	r3, #0
 80027d6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80027d8:	2300      	movs	r3, #0
 80027da:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80027e0:	2376      	movs	r3, #118	; 0x76
 80027e2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681d      	ldr	r5, [r3, #0]
 80027e8:	466c      	mov	r4, sp
 80027ea:	f107 0314 	add.w	r3, r7, #20
 80027ee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027f6:	f107 0308 	add.w	r3, r7, #8
 80027fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80027fc:	4628      	mov	r0, r5
 80027fe:	f001 fdd5 	bl	80043ac <SDIO_Init>
 8002802:	4603      	mov	r3, r0
 8002804:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002808:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800280c:	2b00      	cmp	r3, #0
 800280e:	d001      	beq.n	8002814 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e031      	b.n	8002878 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8002814:	4b1a      	ldr	r3, [pc, #104]	; (8002880 <HAL_SD_InitCard+0xbc>)
 8002816:	2200      	movs	r2, #0
 8002818:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4618      	mov	r0, r3
 8002820:	f001 fe0d 	bl	800443e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8002824:	4b16      	ldr	r3, [pc, #88]	; (8002880 <HAL_SD_InitCard+0xbc>)
 8002826:	2201      	movs	r2, #1
 8002828:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 fefc 	bl	8003628 <SD_PowerON>
 8002830:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00b      	beq.n	8002850 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002844:	6a3b      	ldr	r3, [r7, #32]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e013      	b.n	8002878 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 fe1b 	bl	800348c <SD_InitCard>
 8002856:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002858:	6a3b      	ldr	r3, [r7, #32]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d00b      	beq.n	8002876 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2201      	movs	r2, #1
 8002862:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3728      	adds	r7, #40	; 0x28
 800287c:	46bd      	mov	sp, r7
 800287e:	bdb0      	pop	{r4, r5, r7, pc}
 8002880:	422580a0 	.word	0x422580a0

08002884 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b092      	sub	sp, #72	; 0x48
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
 8002890:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002892:	f7fe fc69 	bl	8001168 <HAL_GetTick>
 8002896:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d107      	bne.n	80028b6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e1d7      	b.n	8002c66 <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b01      	cmp	r3, #1
 80028c0:	f040 81ca 	bne.w	8002c58 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80028ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	441a      	add	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d907      	bls.n	80028e8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028dc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e1be      	b.n	8002c66 <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2203      	movs	r2, #3
 80028ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2200      	movs	r2, #0
 80028f6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d002      	beq.n	8002906 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002902:	025b      	lsls	r3, r3, #9
 8002904:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800290e:	4618      	mov	r0, r3
 8002910:	f001 fe28 	bl	8004564 <SDMMC_CmdBlockLength>
 8002914:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002916:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00f      	beq.n	800293c <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a9a      	ldr	r2, [pc, #616]	; (8002b8c <HAL_SD_ReadBlocks+0x308>)
 8002922:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002928:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800292a:	431a      	orrs	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002938:	2301      	movs	r3, #1
 800293a:	e194      	b.n	8002c66 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800293c:	f04f 33ff 	mov.w	r3, #4294967295
 8002940:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	025b      	lsls	r3, r3, #9
 8002946:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002948:	2390      	movs	r3, #144	; 0x90
 800294a:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800294c:	2302      	movs	r3, #2
 800294e:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002950:	2300      	movs	r3, #0
 8002952:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002954:	2301      	movs	r3, #1
 8002956:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f107 0214 	add.w	r2, r7, #20
 8002960:	4611      	mov	r1, r2
 8002962:	4618      	mov	r0, r3
 8002964:	f001 fdd2 	bl	800450c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d90a      	bls.n	8002984 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2202      	movs	r2, #2
 8002972:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800297a:	4618      	mov	r0, r3
 800297c:	f001 fe36 	bl	80045ec <SDMMC_CmdReadMultiBlock>
 8002980:	6478      	str	r0, [r7, #68]	; 0x44
 8002982:	e009      	b.n	8002998 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2201      	movs	r2, #1
 8002988:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002990:	4618      	mov	r0, r3
 8002992:	f001 fe09 	bl	80045a8 <SDMMC_CmdReadSingleBlock>
 8002996:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800299a:	2b00      	cmp	r3, #0
 800299c:	d012      	beq.n	80029c4 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a7a      	ldr	r2, [pc, #488]	; (8002b8c <HAL_SD_ReadBlocks+0x308>)
 80029a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029ac:	431a      	orrs	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	2201      	movs	r2, #1
 80029b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e150      	b.n	8002c66 <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80029c8:	e061      	b.n	8002a8e <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d03c      	beq.n	8002a52 <HAL_SD_ReadBlocks+0x1ce>
 80029d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d039      	beq.n	8002a52 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80029de:	2300      	movs	r3, #0
 80029e0:	643b      	str	r3, [r7, #64]	; 0x40
 80029e2:	e033      	b.n	8002a4c <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 fd0a 	bl	8004402 <SDIO_ReadFIFO>
 80029ee:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80029f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80029f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029fa:	3301      	adds	r3, #1
 80029fc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80029fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a00:	3b01      	subs	r3, #1
 8002a02:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a06:	0a1b      	lsrs	r3, r3, #8
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a0c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a10:	3301      	adds	r3, #1
 8002a12:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a16:	3b01      	subs	r3, #1
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	0c1b      	lsrs	r3, r3, #16
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a22:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a26:	3301      	adds	r3, #1
 8002a28:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a2c:	3b01      	subs	r3, #1
 8002a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a32:	0e1b      	lsrs	r3, r3, #24
 8002a34:	b2da      	uxtb	r2, r3
 8002a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a38:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002a3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3c:	3301      	adds	r3, #1
 8002a3e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a42:	3b01      	subs	r3, #1
 8002a44:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a48:	3301      	adds	r3, #1
 8002a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a4e:	2b07      	cmp	r3, #7
 8002a50:	d9c8      	bls.n	80029e4 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002a52:	f7fe fb89 	bl	8001168 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	d902      	bls.n	8002a68 <HAL_SD_ReadBlocks+0x1e4>
 8002a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d112      	bne.n	8002a8e <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a47      	ldr	r2, [pc, #284]	; (8002b8c <HAL_SD_ReadBlocks+0x308>)
 8002a6e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2200      	movs	r2, #0
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e0eb      	b.n	8002c66 <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a94:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d096      	beq.n	80029ca <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d022      	beq.n	8002af0 <HAL_SD_ReadBlocks+0x26c>
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2b01      	cmp	r3, #1
 8002aae:	d91f      	bls.n	8002af0 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d01b      	beq.n	8002af0 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f001 fdfb 	bl	80046b8 <SDMMC_CmdStopTransfer>
 8002ac2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d012      	beq.n	8002af0 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a2f      	ldr	r2, [pc, #188]	; (8002b8c <HAL_SD_ReadBlocks+0x308>)
 8002ad0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad8:	431a      	orrs	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e0ba      	b.n	8002c66 <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d012      	beq.n	8002b24 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a22      	ldr	r2, [pc, #136]	; (8002b8c <HAL_SD_ReadBlocks+0x308>)
 8002b04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b0a:	f043 0208 	orr.w	r2, r3, #8
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0a0      	b.n	8002c66 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d012      	beq.n	8002b58 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a15      	ldr	r2, [pc, #84]	; (8002b8c <HAL_SD_ReadBlocks+0x308>)
 8002b38:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3e:	f043 0202 	orr.w	r2, r3, #2
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	e086      	b.n	8002c66 <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b5e:	f003 0320 	and.w	r3, r3, #32
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d063      	beq.n	8002c2e <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a08      	ldr	r2, [pc, #32]	; (8002b8c <HAL_SD_ReadBlocks+0x308>)
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b72:	f043 0220 	orr.w	r2, r3, #32
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e06c      	b.n	8002c66 <HAL_SD_ReadBlocks+0x3e2>
 8002b8c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f001 fc34 	bl	8004402 <SDIO_ReadFIFO>
 8002b9a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b9e:	b2da      	uxtb	r2, r3
 8002ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bac:	3b01      	subs	r3, #1
 8002bae:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb2:	0a1b      	lsrs	r3, r3, #8
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	b2da      	uxtb	r2, r3
 8002bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bce:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002bd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bde:	0e1b      	lsrs	r3, r3, #24
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be8:	3301      	adds	r3, #1
 8002bea:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002bf2:	f7fe fab9 	bl	8001168 <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d902      	bls.n	8002c08 <HAL_SD_ReadBlocks+0x384>
 8002c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d112      	bne.n	8002c2e <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a18      	ldr	r2, [pc, #96]	; (8002c70 <HAL_SD_ReadBlocks+0x3ec>)
 8002c0e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c14:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e01b      	b.n	8002c66 <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <HAL_SD_ReadBlocks+0x3be>
 8002c3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d1a6      	bne.n	8002b90 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f240 523a 	movw	r2, #1338	; 0x53a
 8002c4a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002c54:	2300      	movs	r3, #0
 8002c56:	e006      	b.n	8002c66 <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
  }
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3748      	adds	r7, #72	; 0x48
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	004005ff 	.word	0x004005ff

08002c74 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b092      	sub	sp, #72	; 0x48
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002c82:	f7fe fa71 	bl	8001168 <HAL_GetTick>
 8002c86:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d107      	bne.n	8002ca6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e182      	b.n	8002fac <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	f040 8175 	bne.w	8002f9e <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002cba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	441a      	add	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d907      	bls.n	8002cd8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ccc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e169      	b.n	8002fac <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2203      	movs	r2, #3
 8002cdc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cec:	2b01      	cmp	r3, #1
 8002cee:	d002      	beq.n	8002cf6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf2:	025b      	lsls	r3, r3, #9
 8002cf4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f001 fc30 	bl	8004564 <SDMMC_CmdBlockLength>
 8002d04:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00f      	beq.n	8002d2c <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a9c      	ldr	r2, [pc, #624]	; (8002f84 <HAL_SD_WriteBlocks+0x310>)
 8002d12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d1a:	431a      	orrs	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e13f      	b.n	8002fac <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8002d30:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	025b      	lsls	r3, r3, #9
 8002d36:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002d38:	2390      	movs	r3, #144	; 0x90
 8002d3a:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002d44:	2301      	movs	r3, #1
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f107 0218 	add.w	r2, r7, #24
 8002d50:	4611      	mov	r1, r2
 8002d52:	4618      	mov	r0, r3
 8002d54:	f001 fbda 	bl	800450c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d90a      	bls.n	8002d74 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2220      	movs	r2, #32
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f001 fc82 	bl	8004674 <SDMMC_CmdWriteMultiBlock>
 8002d70:	6478      	str	r0, [r7, #68]	; 0x44
 8002d72:	e009      	b.n	8002d88 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2210      	movs	r2, #16
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d80:	4618      	mov	r0, r3
 8002d82:	f001 fc55 	bl	8004630 <SDMMC_CmdWriteSingleBlock>
 8002d86:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d012      	beq.n	8002db4 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a7c      	ldr	r2, [pc, #496]	; (8002f84 <HAL_SD_WriteBlocks+0x310>)
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2200      	movs	r2, #0
 8002dae:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e0fb      	b.n	8002fac <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002db8:	e065      	b.n	8002e86 <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d040      	beq.n	8002e4a <HAL_SD_WriteBlocks+0x1d6>
 8002dc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d03d      	beq.n	8002e4a <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	643b      	str	r3, [r7, #64]	; 0x40
 8002dd2:	e037      	b.n	8002e44 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8002dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002dda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ddc:	3301      	adds	r3, #1
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002de2:	3b01      	subs	r3, #1
 8002de4:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	021a      	lsls	r2, r3, #8
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df4:	3301      	adds	r3, #1
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002df8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	041a      	lsls	r2, r3, #16
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0c:	3301      	adds	r3, #1
 8002e0e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e12:	3b01      	subs	r3, #1
 8002e14:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	061a      	lsls	r2, r3, #24
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e24:	3301      	adds	r3, #1
 8002e26:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f107 0214 	add.w	r2, r7, #20
 8002e36:	4611      	mov	r1, r2
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f001 faef 	bl	800441c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002e3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e40:	3301      	adds	r3, #1
 8002e42:	643b      	str	r3, [r7, #64]	; 0x40
 8002e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e46:	2b07      	cmp	r3, #7
 8002e48:	d9c4      	bls.n	8002dd4 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002e4a:	f7fe f98d 	bl	8001168 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d902      	bls.n	8002e60 <HAL_SD_WriteBlocks+0x1ec>
 8002e5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d112      	bne.n	8002e86 <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a47      	ldr	r2, [pc, #284]	; (8002f84 <HAL_SD_WriteBlocks+0x310>)
 8002e66:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e6e:	431a      	orrs	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	e092      	b.n	8002fac <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8c:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d092      	beq.n	8002dba <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d022      	beq.n	8002ee8 <HAL_SD_WriteBlocks+0x274>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	d91f      	bls.n	8002ee8 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d01b      	beq.n	8002ee8 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f001 fbff 	bl	80046b8 <SDMMC_CmdStopTransfer>
 8002eba:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002ebc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d012      	beq.n	8002ee8 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a2f      	ldr	r2, [pc, #188]	; (8002f84 <HAL_SD_WriteBlocks+0x310>)
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ed0:	431a      	orrs	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e061      	b.n	8002fac <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eee:	f003 0308 	and.w	r3, r3, #8
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d012      	beq.n	8002f1c <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a22      	ldr	r2, [pc, #136]	; (8002f84 <HAL_SD_WriteBlocks+0x310>)
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	f043 0208 	orr.w	r2, r3, #8
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f18:	2301      	movs	r3, #1
 8002f1a:	e047      	b.n	8002fac <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f22:	f003 0302 	and.w	r3, r3, #2
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d012      	beq.n	8002f50 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a15      	ldr	r2, [pc, #84]	; (8002f84 <HAL_SD_WriteBlocks+0x310>)
 8002f30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	f043 0202 	orr.w	r2, r3, #2
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e02d      	b.n	8002fac <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	f003 0310 	and.w	r3, r3, #16
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d014      	beq.n	8002f88 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a08      	ldr	r2, [pc, #32]	; (8002f84 <HAL_SD_WriteBlocks+0x310>)
 8002f64:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2201      	movs	r2, #1
 8002f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e013      	b.n	8002fac <HAL_SD_WriteBlocks+0x338>
 8002f84:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f240 523a 	movw	r2, #1338	; 0x53a
 8002f90:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2201      	movs	r2, #1
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e006      	b.n	8002fac <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
  }
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3748      	adds	r7, #72	; 0x48
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc2:	0f9b      	lsrs	r3, r3, #30
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fce:	0e9b      	lsrs	r3, r3, #26
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	b2da      	uxtb	r2, r3
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fe0:	0e1b      	lsrs	r3, r3, #24
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	b2da      	uxtb	r2, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ffe:	0a1b      	lsrs	r3, r3, #8
 8003000:	b2da      	uxtb	r2, r3
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800300a:	b2da      	uxtb	r2, r3
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003014:	0d1b      	lsrs	r3, r3, #20
 8003016:	b29a      	uxth	r2, r3
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003020:	0c1b      	lsrs	r3, r3, #16
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	b2da      	uxtb	r2, r3
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003032:	0bdb      	lsrs	r3, r3, #15
 8003034:	b2db      	uxtb	r3, r3
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	b2da      	uxtb	r2, r3
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003044:	0b9b      	lsrs	r3, r3, #14
 8003046:	b2db      	uxtb	r3, r3
 8003048:	f003 0301 	and.w	r3, r3, #1
 800304c:	b2da      	uxtb	r2, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003056:	0b5b      	lsrs	r3, r3, #13
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	b2da      	uxtb	r2, r3
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003068:	0b1b      	lsrs	r3, r3, #12
 800306a:	b2db      	uxtb	r3, r3
 800306c:	f003 0301 	and.w	r3, r3, #1
 8003070:	b2da      	uxtb	r2, r3
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	2200      	movs	r2, #0
 800307a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003080:	2b00      	cmp	r3, #0
 8003082:	d163      	bne.n	800314c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003088:	009a      	lsls	r2, r3, #2
 800308a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800308e:	4013      	ands	r3, r2
 8003090:	687a      	ldr	r2, [r7, #4]
 8003092:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003094:	0f92      	lsrs	r2, r2, #30
 8003096:	431a      	orrs	r2, r3
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030a0:	0edb      	lsrs	r3, r3, #27
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f003 0307 	and.w	r3, r3, #7
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030b2:	0e1b      	lsrs	r3, r3, #24
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	f003 0307 	and.w	r3, r3, #7
 80030ba:	b2da      	uxtb	r2, r3
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030c4:	0d5b      	lsrs	r3, r3, #21
 80030c6:	b2db      	uxtb	r3, r3
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030d6:	0c9b      	lsrs	r3, r3, #18
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030e8:	0bdb      	lsrs	r3, r3, #15
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	1c5a      	adds	r2, r3, #1
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	7e1b      	ldrb	r3, [r3, #24]
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	3302      	adds	r3, #2
 800310c:	2201      	movs	r2, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003116:	fb02 f203 	mul.w	r2, r2, r3
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	7a1b      	ldrb	r3, [r3, #8]
 8003122:	b2db      	uxtb	r3, r3
 8003124:	f003 030f 	and.w	r3, r3, #15
 8003128:	2201      	movs	r2, #1
 800312a:	409a      	lsls	r2, r3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003134:	687a      	ldr	r2, [r7, #4]
 8003136:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003138:	0a52      	lsrs	r2, r2, #9
 800313a:	fb02 f203 	mul.w	r2, r2, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003148:	661a      	str	r2, [r3, #96]	; 0x60
 800314a:	e031      	b.n	80031b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003150:	2b01      	cmp	r3, #1
 8003152:	d11d      	bne.n	8003190 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003158:	041b      	lsls	r3, r3, #16
 800315a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003162:	0c1b      	lsrs	r3, r3, #16
 8003164:	431a      	orrs	r2, r3
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	3301      	adds	r3, #1
 8003170:	029a      	lsls	r2, r3, #10
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003184:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	661a      	str	r2, [r3, #96]	; 0x60
 800318e:	e00f      	b.n	80031b0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a58      	ldr	r2, [pc, #352]	; (80032f8 <HAL_SD_GetCardCSD+0x344>)
 8003196:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e09d      	b.n	80032ec <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031b4:	0b9b      	lsrs	r3, r3, #14
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031c6:	09db      	lsrs	r3, r3, #7
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e8:	0fdb      	lsrs	r3, r3, #31
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031f4:	0f5b      	lsrs	r3, r3, #29
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	f003 0303 	and.w	r3, r3, #3
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003206:	0e9b      	lsrs	r3, r3, #26
 8003208:	b2db      	uxtb	r3, r3
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	b2da      	uxtb	r2, r3
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003218:	0d9b      	lsrs	r3, r3, #22
 800321a:	b2db      	uxtb	r3, r3
 800321c:	f003 030f 	and.w	r3, r3, #15
 8003220:	b2da      	uxtb	r2, r3
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	0d5b      	lsrs	r3, r3, #21
 800322c:	b2db      	uxtb	r3, r3
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	b2da      	uxtb	r2, r3
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003246:	0c1b      	lsrs	r3, r3, #16
 8003248:	b2db      	uxtb	r3, r3
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	b2da      	uxtb	r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325a:	0bdb      	lsrs	r3, r3, #15
 800325c:	b2db      	uxtb	r3, r3
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	b2da      	uxtb	r2, r3
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	0b9b      	lsrs	r3, r3, #14
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	b2da      	uxtb	r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003282:	0b5b      	lsrs	r3, r3, #13
 8003284:	b2db      	uxtb	r3, r3
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	b2da      	uxtb	r2, r3
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003296:	0b1b      	lsrs	r3, r3, #12
 8003298:	b2db      	uxtb	r3, r3
 800329a:	f003 0301 	and.w	r3, r3, #1
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	0a9b      	lsrs	r3, r3, #10
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	f003 0303 	and.w	r3, r3, #3
 80032b2:	b2da      	uxtb	r2, r3
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032be:	0a1b      	lsrs	r3, r3, #8
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d2:	085b      	lsrs	r3, r3, #1
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032da:	b2da      	uxtb	r2, r3
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2201      	movs	r2, #1
 80032e6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr
 80032f8:	004005ff 	.word	0x004005ff

080032fc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b083      	sub	sp, #12
 8003300:	af00      	add	r7, sp, #0
 8003302:	6078      	str	r0, [r7, #4]
 8003304:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003354:	b5b0      	push	{r4, r5, r7, lr}
 8003356:	b08e      	sub	sp, #56	; 0x38
 8003358:	af04      	add	r7, sp, #16
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2203      	movs	r2, #3
 8003362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336a:	2b03      	cmp	r3, #3
 800336c:	d02e      	beq.n	80033cc <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003374:	d106      	bne.n	8003384 <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800337a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	639a      	str	r2, [r3, #56]	; 0x38
 8003382:	e029      	b.n	80033d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800338a:	d10a      	bne.n	80033a2 <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f000 fa01 	bl	8003794 <SD_WideBus_Enable>
 8003392:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339a:	431a      	orrs	r2, r3
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	639a      	str	r2, [r3, #56]	; 0x38
 80033a0:	e01a      	b.n	80033d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d10a      	bne.n	80033be <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fa3e 	bl	800382a <SD_WideBus_Disable>
 80033ae:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b6:	431a      	orrs	r2, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	639a      	str	r2, [r3, #56]	; 0x38
 80033bc:	e00c      	b.n	80033d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38
 80033ca:	e005      	b.n	80033d8 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d009      	beq.n	80033f4 <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a18      	ldr	r2, [pc, #96]	; (8003448 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80033e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e024      	b.n	800343e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	68db      	ldr	r3, [r3, #12]
 8003404:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	699b      	ldr	r3, [r3, #24]
 8003414:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681d      	ldr	r5, [r3, #0]
 800341a:	466c      	mov	r4, sp
 800341c:	f107 0318 	add.w	r3, r7, #24
 8003420:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003424:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003428:	f107 030c 	add.w	r3, r7, #12
 800342c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800342e:	4628      	mov	r0, r5
 8003430:	f000 ffbc 	bl	80043ac <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3728      	adds	r7, #40	; 0x28
 8003442:	46bd      	mov	sp, r7
 8003444:	bdb0      	pop	{r4, r5, r7, pc}
 8003446:	bf00      	nop
 8003448:	004005ff 	.word	0x004005ff

0800344c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003458:	f107 030c 	add.w	r3, r7, #12
 800345c:	4619      	mov	r1, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f970 	bl	8003744 <SD_SendStatus>
 8003464:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	0a5b      	lsrs	r3, r3, #9
 800347c:	f003 030f 	and.w	r3, r3, #15
 8003480:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003482:	693b      	ldr	r3, [r7, #16]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800348c:	b5b0      	push	{r4, r5, r7, lr}
 800348e:	b094      	sub	sp, #80	; 0x50
 8003490:	af04      	add	r7, sp, #16
 8003492:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003494:	2301      	movs	r3, #1
 8003496:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4618      	mov	r0, r3
 800349e:	f000 ffdd 	bl	800445c <SDIO_GetPowerState>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d102      	bne.n	80034ae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80034a8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80034ac:	e0b7      	b.n	800361e <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d02f      	beq.n	8003516 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 fa06 	bl	80048cc <SDMMC_CmdSendCID>
 80034c0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80034c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <SD_InitCard+0x40>
    {
      return errorstate;
 80034c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034ca:	e0a8      	b.n	800361e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f001 f807 	bl	80044e6 <SDIO_GetResponse>
 80034d8:	4602      	mov	r2, r0
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2104      	movs	r1, #4
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fffe 	bl	80044e6 <SDIO_GetResponse>
 80034ea:	4602      	mov	r2, r0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2108      	movs	r1, #8
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fff5 	bl	80044e6 <SDIO_GetResponse>
 80034fc:	4602      	mov	r2, r0
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	210c      	movs	r1, #12
 8003508:	4618      	mov	r0, r3
 800350a:	f000 ffec 	bl	80044e6 <SDIO_GetResponse>
 800350e:	4602      	mov	r2, r0
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351a:	2b03      	cmp	r3, #3
 800351c:	d00d      	beq.n	800353a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f107 020e 	add.w	r2, r7, #14
 8003526:	4611      	mov	r1, r2
 8003528:	4618      	mov	r0, r3
 800352a:	f001 fa0c 	bl	8004946 <SDMMC_CmdSetRelAdd>
 800352e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003530:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <SD_InitCard+0xae>
    {
      return errorstate;
 8003536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003538:	e071      	b.n	800361e <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800353e:	2b03      	cmp	r3, #3
 8003540:	d036      	beq.n	80035b0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003542:	89fb      	ldrh	r3, [r7, #14]
 8003544:	461a      	mov	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003552:	041b      	lsls	r3, r3, #16
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f001 f9d6 	bl	8004908 <SDMMC_CmdSendCSD>
 800355c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800355e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003560:	2b00      	cmp	r3, #0
 8003562:	d001      	beq.n	8003568 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003564:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003566:	e05a      	b.n	800361e <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2100      	movs	r1, #0
 800356e:	4618      	mov	r0, r3
 8003570:	f000 ffb9 	bl	80044e6 <SDIO_GetResponse>
 8003574:	4602      	mov	r2, r0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2104      	movs	r1, #4
 8003580:	4618      	mov	r0, r3
 8003582:	f000 ffb0 	bl	80044e6 <SDIO_GetResponse>
 8003586:	4602      	mov	r2, r0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2108      	movs	r1, #8
 8003592:	4618      	mov	r0, r3
 8003594:	f000 ffa7 	bl	80044e6 <SDIO_GetResponse>
 8003598:	4602      	mov	r2, r0
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	210c      	movs	r1, #12
 80035a4:	4618      	mov	r0, r3
 80035a6:	f000 ff9e 	bl	80044e6 <SDIO_GetResponse>
 80035aa:	4602      	mov	r2, r0
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2104      	movs	r1, #4
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 ff95 	bl	80044e6 <SDIO_GetResponse>
 80035bc:	4603      	mov	r3, r0
 80035be:	0d1a      	lsrs	r2, r3, #20
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80035c4:	f107 0310 	add.w	r3, r7, #16
 80035c8:	4619      	mov	r1, r3
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff fcf2 	bl	8002fb4 <HAL_SD_GetCardCSD>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d002      	beq.n	80035dc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80035da:	e020      	b.n	800361e <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6819      	ldr	r1, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035e4:	041b      	lsls	r3, r3, #16
 80035e6:	f04f 0400 	mov.w	r4, #0
 80035ea:	461a      	mov	r2, r3
 80035ec:	4623      	mov	r3, r4
 80035ee:	4608      	mov	r0, r1
 80035f0:	f001 f884 	bl	80046fc <SDMMC_CmdSelDesel>
 80035f4:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80035f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d001      	beq.n	8003600 <SD_InitCard+0x174>
  {
    return errorstate;
 80035fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035fe:	e00e      	b.n	800361e <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681d      	ldr	r5, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	466c      	mov	r4, sp
 8003608:	f103 0210 	add.w	r2, r3, #16
 800360c:	ca07      	ldmia	r2, {r0, r1, r2}
 800360e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003612:	3304      	adds	r3, #4
 8003614:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003616:	4628      	mov	r0, r5
 8003618:	f000 fec8 	bl	80043ac <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3740      	adds	r7, #64	; 0x40
 8003622:	46bd      	mov	sp, r7
 8003624:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003628 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	2300      	movs	r3, #0
 800363a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4618      	mov	r0, r3
 8003642:	f001 f87e 	bl	8004742 <SDMMC_CmdGoIdleState>
 8003646:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <SD_PowerON+0x2a>
  {
    return errorstate;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	e072      	b.n	8003738 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4618      	mov	r0, r3
 8003658:	f001 f891 	bl	800477e <SDMMC_CmdOperCond>
 800365c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00d      	beq.n	8003680 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f001 f867 	bl	8004742 <SDMMC_CmdGoIdleState>
 8003674:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d004      	beq.n	8003686 <SD_PowerON+0x5e>
    {
      return errorstate;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	e05b      	b.n	8003738 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800368a:	2b01      	cmp	r3, #1
 800368c:	d137      	bne.n	80036fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2100      	movs	r1, #0
 8003694:	4618      	mov	r0, r3
 8003696:	f001 f891 	bl	80047bc <SDMMC_CmdAppCommand>
 800369a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d02d      	beq.n	80036fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80036a6:	e047      	b.n	8003738 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2100      	movs	r1, #0
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 f884 	bl	80047bc <SDMMC_CmdAppCommand>
 80036b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <SD_PowerON+0x98>
    {
      return errorstate;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	e03b      	b.n	8003738 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	491e      	ldr	r1, [pc, #120]	; (8003740 <SD_PowerON+0x118>)
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 f89a 	bl	8004800 <SDMMC_CmdAppOperCommand>
 80036cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80036d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80036d8:	e02e      	b.n	8003738 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2100      	movs	r1, #0
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 ff00 	bl	80044e6 <SDIO_GetResponse>
 80036e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	0fdb      	lsrs	r3, r3, #31
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <SD_PowerON+0xcc>
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <SD_PowerON+0xce>
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]

    count++;
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	3301      	adds	r3, #1
 80036fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003704:	4293      	cmp	r3, r2
 8003706:	d802      	bhi.n	800370e <SD_PowerON+0xe6>
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0cc      	beq.n	80036a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003714:	4293      	cmp	r3, r2
 8003716:	d902      	bls.n	800371e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003718:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800371c:	e00c      	b.n	8003738 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003724:	2b00      	cmp	r3, #0
 8003726:	d003      	beq.n	8003730 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	645a      	str	r2, [r3, #68]	; 0x44
 800372e:	e002      	b.n	8003736 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	c1100000 	.word	0xc1100000

08003744 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
 800374c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d102      	bne.n	800375a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003754:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003758:	e018      	b.n	800378c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003762:	041b      	lsls	r3, r3, #16
 8003764:	4619      	mov	r1, r3
 8003766:	4610      	mov	r0, r2
 8003768:	f001 f90e 	bl	8004988 <SDMMC_CmdSendStatus>
 800376c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	e009      	b.n	800378c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f000 feb1 	bl	80044e6 <SDIO_GetResponse>
 8003784:	4602      	mov	r2, r0
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3710      	adds	r7, #16
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
 80037a0:	2300      	movs	r3, #0
 80037a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2100      	movs	r1, #0
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fe9b 	bl	80044e6 <SDIO_GetResponse>
 80037b0:	4603      	mov	r3, r0
 80037b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037ba:	d102      	bne.n	80037c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80037bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037c0:	e02f      	b.n	8003822 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80037c2:	f107 030c 	add.w	r3, r7, #12
 80037c6:	4619      	mov	r1, r3
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	f000 f879 	bl	80038c0 <SD_FindSCR>
 80037ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	e023      	b.n	8003822 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01c      	beq.n	800381e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	4619      	mov	r1, r3
 80037f0:	4610      	mov	r0, r2
 80037f2:	f000 ffe3 	bl	80047bc <SDMMC_CmdAppCommand>
 80037f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	e00f      	b.n	8003822 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2102      	movs	r1, #2
 8003808:	4618      	mov	r0, r3
 800380a:	f001 f81c 	bl	8004846 <SDMMC_CmdBusWidth>
 800380e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	e003      	b.n	8003822 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800381a:	2300      	movs	r3, #0
 800381c:	e001      	b.n	8003822 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800381e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003822:	4618      	mov	r0, r3
 8003824:	3718      	adds	r7, #24
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800382a:	b580      	push	{r7, lr}
 800382c:	b086      	sub	sp, #24
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003832:	2300      	movs	r3, #0
 8003834:	60fb      	str	r3, [r7, #12]
 8003836:	2300      	movs	r3, #0
 8003838:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fe50 	bl	80044e6 <SDIO_GetResponse>
 8003846:	4603      	mov	r3, r0
 8003848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800384c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003850:	d102      	bne.n	8003858 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003852:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003856:	e02f      	b.n	80038b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003858:	f107 030c 	add.w	r3, r7, #12
 800385c:	4619      	mov	r1, r3
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f82e 	bl	80038c0 <SD_FindSCR>
 8003864:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003866:	697b      	ldr	r3, [r7, #20]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	e023      	b.n	80038b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d01c      	beq.n	80038b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003882:	041b      	lsls	r3, r3, #16
 8003884:	4619      	mov	r1, r3
 8003886:	4610      	mov	r0, r2
 8003888:	f000 ff98 	bl	80047bc <SDMMC_CmdAppCommand>
 800388c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	e00f      	b.n	80038b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f000 ffd1 	bl	8004846 <SDMMC_CmdBusWidth>
 80038a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d001      	beq.n	80038b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	e003      	b.n	80038b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80038b0:	2300      	movs	r3, #0
 80038b2:	e001      	b.n	80038b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80038b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3718      	adds	r7, #24
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}

080038c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80038c0:	b590      	push	{r4, r7, lr}
 80038c2:	b08f      	sub	sp, #60	; 0x3c
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80038ca:	f7fd fc4d 	bl	8001168 <HAL_GetTick>
 80038ce:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80038d4:	2300      	movs	r3, #0
 80038d6:	60bb      	str	r3, [r7, #8]
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2108      	movs	r1, #8
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fe3c 	bl	8004564 <SDMMC_CmdBlockLength>
 80038ec:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80038ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80038f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f6:	e0a9      	b.n	8003a4c <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003900:	041b      	lsls	r3, r3, #16
 8003902:	4619      	mov	r1, r3
 8003904:	4610      	mov	r0, r2
 8003906:	f000 ff59 	bl	80047bc <SDMMC_CmdAppCommand>
 800390a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003914:	e09a      	b.n	8003a4c <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003916:	f04f 33ff 	mov.w	r3, #4294967295
 800391a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800391c:	2308      	movs	r3, #8
 800391e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003920:	2330      	movs	r3, #48	; 0x30
 8003922:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003924:	2302      	movs	r3, #2
 8003926:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003928:	2300      	movs	r3, #0
 800392a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800392c:	2301      	movs	r3, #1
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f107 0210 	add.w	r2, r7, #16
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f000 fde6 	bl	800450c <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f000 ffa0 	bl	800488a <SDMMC_CmdSendSCR>
 800394a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800394c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394e:	2b00      	cmp	r3, #0
 8003950:	d022      	beq.n	8003998 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8003952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003954:	e07a      	b.n	8003a4c <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00e      	beq.n	8003982 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6819      	ldr	r1, [r3, #0]
 8003968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	f107 0208 	add.w	r2, r7, #8
 8003970:	18d4      	adds	r4, r2, r3
 8003972:	4608      	mov	r0, r1
 8003974:	f000 fd45 	bl	8004402 <SDIO_ReadFIFO>
 8003978:	4603      	mov	r3, r0
 800397a:	6023      	str	r3, [r4, #0]
      index++;
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397e:	3301      	adds	r3, #1
 8003980:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003982:	f7fd fbf1 	bl	8001168 <HAL_GetTick>
 8003986:	4602      	mov	r2, r0
 8003988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398a:	1ad3      	subs	r3, r2, r3
 800398c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003990:	d102      	bne.n	8003998 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003992:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003996:	e059      	b.n	8003a4c <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399e:	f240 432a 	movw	r3, #1066	; 0x42a
 80039a2:	4013      	ands	r3, r2
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0d6      	beq.n	8003956 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ae:	f003 0308 	and.w	r3, r3, #8
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d005      	beq.n	80039c2 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2208      	movs	r2, #8
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80039be:	2308      	movs	r3, #8
 80039c0:	e044      	b.n	8003a4c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	2202      	movs	r2, #2
 80039d6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80039d8:	2302      	movs	r3, #2
 80039da:	e037      	b.n	8003a4c <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e2:	f003 0320 	and.w	r3, r3, #32
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d005      	beq.n	80039f6 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2220      	movs	r2, #32
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80039f2:	2320      	movs	r3, #32
 80039f4:	e02a      	b.n	8003a4c <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f240 523a 	movw	r2, #1338	; 0x53a
 80039fe:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	061a      	lsls	r2, r3, #24
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a0c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	0a1b      	lsrs	r3, r3, #8
 8003a12:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003a16:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	0e1b      	lsrs	r3, r3, #24
 8003a1c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	601a      	str	r2, [r3, #0]
    scr++;
 8003a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a24:	3304      	adds	r3, #4
 8003a26:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	061a      	lsls	r2, r3, #24
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	021b      	lsls	r3, r3, #8
 8003a30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003a34:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	0a1b      	lsrs	r3, r3, #8
 8003a3a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a3e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	0e1b      	lsrs	r3, r3, #24
 8003a44:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a48:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	373c      	adds	r7, #60	; 0x3c
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd90      	pop	{r4, r7, pc}

08003a54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d101      	bne.n	8003a66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e03f      	b.n	8003ae6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d106      	bne.n	8003a80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f7fd fa22 	bl	8000ec4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2224      	movs	r2, #36	; 0x24
 8003a84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 f90b 	bl	8003cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	695a      	ldr	r2, [r3, #20]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003abc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68da      	ldr	r2, [r3, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003acc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2220      	movs	r2, #32
 8003ae0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003ae4:	2300      	movs	r3, #0
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd80      	pop	{r7, pc}

08003aee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b088      	sub	sp, #32
 8003af2:	af02      	add	r7, sp, #8
 8003af4:	60f8      	str	r0, [r7, #12]
 8003af6:	60b9      	str	r1, [r7, #8]
 8003af8:	603b      	str	r3, [r7, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003afe:	2300      	movs	r3, #0
 8003b00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	f040 8083 	bne.w	8003c16 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_UART_Transmit+0x2e>
 8003b16:	88fb      	ldrh	r3, [r7, #6]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d101      	bne.n	8003b20 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e07b      	b.n	8003c18 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_UART_Transmit+0x40>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e074      	b.n	8003c18 <HAL_UART_Transmit+0x12a>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2221      	movs	r2, #33	; 0x21
 8003b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003b44:	f7fd fb10 	bl	8001168 <HAL_GetTick>
 8003b48:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	88fa      	ldrh	r2, [r7, #6]
 8003b4e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	88fa      	ldrh	r2, [r7, #6]
 8003b54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8003b5e:	e042      	b.n	8003be6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b76:	d122      	bne.n	8003bbe <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	9300      	str	r3, [sp, #0]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	2180      	movs	r1, #128	; 0x80
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f000 f84c 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e042      	b.n	8003c18 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	881b      	ldrh	r3, [r3, #0]
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ba4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d103      	bne.n	8003bb6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	3302      	adds	r3, #2
 8003bb2:	60bb      	str	r3, [r7, #8]
 8003bb4:	e017      	b.n	8003be6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8003bb6:	68bb      	ldr	r3, [r7, #8]
 8003bb8:	3301      	adds	r3, #1
 8003bba:	60bb      	str	r3, [r7, #8]
 8003bbc:	e013      	b.n	8003be6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	2180      	movs	r1, #128	; 0x80
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f000 f829 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e01f      	b.n	8003c18 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	1c5a      	adds	r2, r3, #1
 8003bdc:	60ba      	str	r2, [r7, #8]
 8003bde:	781a      	ldrb	r2, [r3, #0]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d1b7      	bne.n	8003b60 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	9300      	str	r3, [sp, #0]
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	2140      	movs	r1, #64	; 0x40
 8003bfa:	68f8      	ldr	r0, [r7, #12]
 8003bfc:	f000 f810 	bl	8003c20 <UART_WaitOnFlagUntilTimeout>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d001      	beq.n	8003c0a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e006      	b.n	8003c18 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e000      	b.n	8003c18 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003c16:	2302      	movs	r3, #2
  }
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b084      	sub	sp, #16
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	603b      	str	r3, [r7, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c30:	e02c      	b.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c38:	d028      	beq.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c40:	f7fd fa92 	bl	8001168 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d21d      	bcs.n	8003c8c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003c5e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695a      	ldr	r2, [r3, #20]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003c88:	2303      	movs	r3, #3
 8003c8a:	e00f      	b.n	8003cac <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	4013      	ands	r3, r2
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	79fb      	ldrb	r3, [r7, #7]
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d0c3      	beq.n	8003c32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb8:	b085      	sub	sp, #20
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68da      	ldr	r2, [r3, #12]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	430a      	orrs	r2, r1
 8003cd2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691b      	ldr	r3, [r3, #16]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	431a      	orrs	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	69db      	ldr	r3, [r3, #28]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003cf6:	f023 030c 	bic.w	r3, r3, #12
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	6812      	ldr	r2, [r2, #0]
 8003cfe:	68f9      	ldr	r1, [r7, #12]
 8003d00:	430b      	orrs	r3, r1
 8003d02:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	699a      	ldr	r2, [r3, #24]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d22:	f040 818b 	bne.w	800403c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4ac1      	ldr	r2, [pc, #772]	; (8004030 <UART_SetConfig+0x37c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d005      	beq.n	8003d3c <UART_SetConfig+0x88>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4abf      	ldr	r2, [pc, #764]	; (8004034 <UART_SetConfig+0x380>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	f040 80bd 	bne.w	8003eb6 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d3c:	f7fd fdda 	bl	80018f4 <HAL_RCC_GetPCLK2Freq>
 8003d40:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	461d      	mov	r5, r3
 8003d46:	f04f 0600 	mov.w	r6, #0
 8003d4a:	46a8      	mov	r8, r5
 8003d4c:	46b1      	mov	r9, r6
 8003d4e:	eb18 0308 	adds.w	r3, r8, r8
 8003d52:	eb49 0409 	adc.w	r4, r9, r9
 8003d56:	4698      	mov	r8, r3
 8003d58:	46a1      	mov	r9, r4
 8003d5a:	eb18 0805 	adds.w	r8, r8, r5
 8003d5e:	eb49 0906 	adc.w	r9, r9, r6
 8003d62:	f04f 0100 	mov.w	r1, #0
 8003d66:	f04f 0200 	mov.w	r2, #0
 8003d6a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d6e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d72:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d76:	4688      	mov	r8, r1
 8003d78:	4691      	mov	r9, r2
 8003d7a:	eb18 0005 	adds.w	r0, r8, r5
 8003d7e:	eb49 0106 	adc.w	r1, r9, r6
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	461d      	mov	r5, r3
 8003d88:	f04f 0600 	mov.w	r6, #0
 8003d8c:	196b      	adds	r3, r5, r5
 8003d8e:	eb46 0406 	adc.w	r4, r6, r6
 8003d92:	461a      	mov	r2, r3
 8003d94:	4623      	mov	r3, r4
 8003d96:	f7fc faa3 	bl	80002e0 <__aeabi_uldivmod>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4ba5      	ldr	r3, [pc, #660]	; (8004038 <UART_SetConfig+0x384>)
 8003da2:	fba3 2302 	umull	r2, r3, r3, r2
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	461d      	mov	r5, r3
 8003db0:	f04f 0600 	mov.w	r6, #0
 8003db4:	46a9      	mov	r9, r5
 8003db6:	46b2      	mov	sl, r6
 8003db8:	eb19 0309 	adds.w	r3, r9, r9
 8003dbc:	eb4a 040a 	adc.w	r4, sl, sl
 8003dc0:	4699      	mov	r9, r3
 8003dc2:	46a2      	mov	sl, r4
 8003dc4:	eb19 0905 	adds.w	r9, r9, r5
 8003dc8:	eb4a 0a06 	adc.w	sl, sl, r6
 8003dcc:	f04f 0100 	mov.w	r1, #0
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003dd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ddc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003de0:	4689      	mov	r9, r1
 8003de2:	4692      	mov	sl, r2
 8003de4:	eb19 0005 	adds.w	r0, r9, r5
 8003de8:	eb4a 0106 	adc.w	r1, sl, r6
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	461d      	mov	r5, r3
 8003df2:	f04f 0600 	mov.w	r6, #0
 8003df6:	196b      	adds	r3, r5, r5
 8003df8:	eb46 0406 	adc.w	r4, r6, r6
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	4623      	mov	r3, r4
 8003e00:	f7fc fa6e 	bl	80002e0 <__aeabi_uldivmod>
 8003e04:	4603      	mov	r3, r0
 8003e06:	460c      	mov	r4, r1
 8003e08:	461a      	mov	r2, r3
 8003e0a:	4b8b      	ldr	r3, [pc, #556]	; (8004038 <UART_SetConfig+0x384>)
 8003e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8003e10:	095b      	lsrs	r3, r3, #5
 8003e12:	2164      	movs	r1, #100	; 0x64
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	00db      	lsls	r3, r3, #3
 8003e1c:	3332      	adds	r3, #50	; 0x32
 8003e1e:	4a86      	ldr	r2, [pc, #536]	; (8004038 <UART_SetConfig+0x384>)
 8003e20:	fba2 2303 	umull	r2, r3, r2, r3
 8003e24:	095b      	lsrs	r3, r3, #5
 8003e26:	005b      	lsls	r3, r3, #1
 8003e28:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e2c:	4498      	add	r8, r3
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	461d      	mov	r5, r3
 8003e32:	f04f 0600 	mov.w	r6, #0
 8003e36:	46a9      	mov	r9, r5
 8003e38:	46b2      	mov	sl, r6
 8003e3a:	eb19 0309 	adds.w	r3, r9, r9
 8003e3e:	eb4a 040a 	adc.w	r4, sl, sl
 8003e42:	4699      	mov	r9, r3
 8003e44:	46a2      	mov	sl, r4
 8003e46:	eb19 0905 	adds.w	r9, r9, r5
 8003e4a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e4e:	f04f 0100 	mov.w	r1, #0
 8003e52:	f04f 0200 	mov.w	r2, #0
 8003e56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e62:	4689      	mov	r9, r1
 8003e64:	4692      	mov	sl, r2
 8003e66:	eb19 0005 	adds.w	r0, r9, r5
 8003e6a:	eb4a 0106 	adc.w	r1, sl, r6
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	461d      	mov	r5, r3
 8003e74:	f04f 0600 	mov.w	r6, #0
 8003e78:	196b      	adds	r3, r5, r5
 8003e7a:	eb46 0406 	adc.w	r4, r6, r6
 8003e7e:	461a      	mov	r2, r3
 8003e80:	4623      	mov	r3, r4
 8003e82:	f7fc fa2d 	bl	80002e0 <__aeabi_uldivmod>
 8003e86:	4603      	mov	r3, r0
 8003e88:	460c      	mov	r4, r1
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	4b6a      	ldr	r3, [pc, #424]	; (8004038 <UART_SetConfig+0x384>)
 8003e8e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e92:	095b      	lsrs	r3, r3, #5
 8003e94:	2164      	movs	r1, #100	; 0x64
 8003e96:	fb01 f303 	mul.w	r3, r1, r3
 8003e9a:	1ad3      	subs	r3, r2, r3
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	3332      	adds	r3, #50	; 0x32
 8003ea0:	4a65      	ldr	r2, [pc, #404]	; (8004038 <UART_SetConfig+0x384>)
 8003ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea6:	095b      	lsrs	r3, r3, #5
 8003ea8:	f003 0207 	and.w	r2, r3, #7
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4442      	add	r2, r8
 8003eb2:	609a      	str	r2, [r3, #8]
 8003eb4:	e26f      	b.n	8004396 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003eb6:	f7fd fd09 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8003eba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	461d      	mov	r5, r3
 8003ec0:	f04f 0600 	mov.w	r6, #0
 8003ec4:	46a8      	mov	r8, r5
 8003ec6:	46b1      	mov	r9, r6
 8003ec8:	eb18 0308 	adds.w	r3, r8, r8
 8003ecc:	eb49 0409 	adc.w	r4, r9, r9
 8003ed0:	4698      	mov	r8, r3
 8003ed2:	46a1      	mov	r9, r4
 8003ed4:	eb18 0805 	adds.w	r8, r8, r5
 8003ed8:	eb49 0906 	adc.w	r9, r9, r6
 8003edc:	f04f 0100 	mov.w	r1, #0
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ee8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003eec:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ef0:	4688      	mov	r8, r1
 8003ef2:	4691      	mov	r9, r2
 8003ef4:	eb18 0005 	adds.w	r0, r8, r5
 8003ef8:	eb49 0106 	adc.w	r1, r9, r6
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	461d      	mov	r5, r3
 8003f02:	f04f 0600 	mov.w	r6, #0
 8003f06:	196b      	adds	r3, r5, r5
 8003f08:	eb46 0406 	adc.w	r4, r6, r6
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	4623      	mov	r3, r4
 8003f10:	f7fc f9e6 	bl	80002e0 <__aeabi_uldivmod>
 8003f14:	4603      	mov	r3, r0
 8003f16:	460c      	mov	r4, r1
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4b47      	ldr	r3, [pc, #284]	; (8004038 <UART_SetConfig+0x384>)
 8003f1c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	461d      	mov	r5, r3
 8003f2a:	f04f 0600 	mov.w	r6, #0
 8003f2e:	46a9      	mov	r9, r5
 8003f30:	46b2      	mov	sl, r6
 8003f32:	eb19 0309 	adds.w	r3, r9, r9
 8003f36:	eb4a 040a 	adc.w	r4, sl, sl
 8003f3a:	4699      	mov	r9, r3
 8003f3c:	46a2      	mov	sl, r4
 8003f3e:	eb19 0905 	adds.w	r9, r9, r5
 8003f42:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f46:	f04f 0100 	mov.w	r1, #0
 8003f4a:	f04f 0200 	mov.w	r2, #0
 8003f4e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f52:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f56:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f5a:	4689      	mov	r9, r1
 8003f5c:	4692      	mov	sl, r2
 8003f5e:	eb19 0005 	adds.w	r0, r9, r5
 8003f62:	eb4a 0106 	adc.w	r1, sl, r6
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	461d      	mov	r5, r3
 8003f6c:	f04f 0600 	mov.w	r6, #0
 8003f70:	196b      	adds	r3, r5, r5
 8003f72:	eb46 0406 	adc.w	r4, r6, r6
 8003f76:	461a      	mov	r2, r3
 8003f78:	4623      	mov	r3, r4
 8003f7a:	f7fc f9b1 	bl	80002e0 <__aeabi_uldivmod>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	460c      	mov	r4, r1
 8003f82:	461a      	mov	r2, r3
 8003f84:	4b2c      	ldr	r3, [pc, #176]	; (8004038 <UART_SetConfig+0x384>)
 8003f86:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8a:	095b      	lsrs	r3, r3, #5
 8003f8c:	2164      	movs	r1, #100	; 0x64
 8003f8e:	fb01 f303 	mul.w	r3, r1, r3
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	3332      	adds	r3, #50	; 0x32
 8003f98:	4a27      	ldr	r2, [pc, #156]	; (8004038 <UART_SetConfig+0x384>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003fa6:	4498      	add	r8, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	461d      	mov	r5, r3
 8003fac:	f04f 0600 	mov.w	r6, #0
 8003fb0:	46a9      	mov	r9, r5
 8003fb2:	46b2      	mov	sl, r6
 8003fb4:	eb19 0309 	adds.w	r3, r9, r9
 8003fb8:	eb4a 040a 	adc.w	r4, sl, sl
 8003fbc:	4699      	mov	r9, r3
 8003fbe:	46a2      	mov	sl, r4
 8003fc0:	eb19 0905 	adds.w	r9, r9, r5
 8003fc4:	eb4a 0a06 	adc.w	sl, sl, r6
 8003fc8:	f04f 0100 	mov.w	r1, #0
 8003fcc:	f04f 0200 	mov.w	r2, #0
 8003fd0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fd4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fd8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fdc:	4689      	mov	r9, r1
 8003fde:	4692      	mov	sl, r2
 8003fe0:	eb19 0005 	adds.w	r0, r9, r5
 8003fe4:	eb4a 0106 	adc.w	r1, sl, r6
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	461d      	mov	r5, r3
 8003fee:	f04f 0600 	mov.w	r6, #0
 8003ff2:	196b      	adds	r3, r5, r5
 8003ff4:	eb46 0406 	adc.w	r4, r6, r6
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	f7fc f970 	bl	80002e0 <__aeabi_uldivmod>
 8004000:	4603      	mov	r3, r0
 8004002:	460c      	mov	r4, r1
 8004004:	461a      	mov	r2, r3
 8004006:	4b0c      	ldr	r3, [pc, #48]	; (8004038 <UART_SetConfig+0x384>)
 8004008:	fba3 1302 	umull	r1, r3, r3, r2
 800400c:	095b      	lsrs	r3, r3, #5
 800400e:	2164      	movs	r1, #100	; 0x64
 8004010:	fb01 f303 	mul.w	r3, r1, r3
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	00db      	lsls	r3, r3, #3
 8004018:	3332      	adds	r3, #50	; 0x32
 800401a:	4a07      	ldr	r2, [pc, #28]	; (8004038 <UART_SetConfig+0x384>)
 800401c:	fba2 2303 	umull	r2, r3, r2, r3
 8004020:	095b      	lsrs	r3, r3, #5
 8004022:	f003 0207 	and.w	r2, r3, #7
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4442      	add	r2, r8
 800402c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800402e:	e1b2      	b.n	8004396 <UART_SetConfig+0x6e2>
 8004030:	40011000 	.word	0x40011000
 8004034:	40011400 	.word	0x40011400
 8004038:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4ad7      	ldr	r2, [pc, #860]	; (80043a0 <UART_SetConfig+0x6ec>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d005      	beq.n	8004052 <UART_SetConfig+0x39e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4ad6      	ldr	r2, [pc, #856]	; (80043a4 <UART_SetConfig+0x6f0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	f040 80d1 	bne.w	80041f4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004052:	f7fd fc4f 	bl	80018f4 <HAL_RCC_GetPCLK2Freq>
 8004056:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	469a      	mov	sl, r3
 800405c:	f04f 0b00 	mov.w	fp, #0
 8004060:	46d0      	mov	r8, sl
 8004062:	46d9      	mov	r9, fp
 8004064:	eb18 0308 	adds.w	r3, r8, r8
 8004068:	eb49 0409 	adc.w	r4, r9, r9
 800406c:	4698      	mov	r8, r3
 800406e:	46a1      	mov	r9, r4
 8004070:	eb18 080a 	adds.w	r8, r8, sl
 8004074:	eb49 090b 	adc.w	r9, r9, fp
 8004078:	f04f 0100 	mov.w	r1, #0
 800407c:	f04f 0200 	mov.w	r2, #0
 8004080:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004084:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004088:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800408c:	4688      	mov	r8, r1
 800408e:	4691      	mov	r9, r2
 8004090:	eb1a 0508 	adds.w	r5, sl, r8
 8004094:	eb4b 0609 	adc.w	r6, fp, r9
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4619      	mov	r1, r3
 800409e:	f04f 0200 	mov.w	r2, #0
 80040a2:	f04f 0300 	mov.w	r3, #0
 80040a6:	f04f 0400 	mov.w	r4, #0
 80040aa:	0094      	lsls	r4, r2, #2
 80040ac:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040b0:	008b      	lsls	r3, r1, #2
 80040b2:	461a      	mov	r2, r3
 80040b4:	4623      	mov	r3, r4
 80040b6:	4628      	mov	r0, r5
 80040b8:	4631      	mov	r1, r6
 80040ba:	f7fc f911 	bl	80002e0 <__aeabi_uldivmod>
 80040be:	4603      	mov	r3, r0
 80040c0:	460c      	mov	r4, r1
 80040c2:	461a      	mov	r2, r3
 80040c4:	4bb8      	ldr	r3, [pc, #736]	; (80043a8 <UART_SetConfig+0x6f4>)
 80040c6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ca:	095b      	lsrs	r3, r3, #5
 80040cc:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	469b      	mov	fp, r3
 80040d4:	f04f 0c00 	mov.w	ip, #0
 80040d8:	46d9      	mov	r9, fp
 80040da:	46e2      	mov	sl, ip
 80040dc:	eb19 0309 	adds.w	r3, r9, r9
 80040e0:	eb4a 040a 	adc.w	r4, sl, sl
 80040e4:	4699      	mov	r9, r3
 80040e6:	46a2      	mov	sl, r4
 80040e8:	eb19 090b 	adds.w	r9, r9, fp
 80040ec:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040f0:	f04f 0100 	mov.w	r1, #0
 80040f4:	f04f 0200 	mov.w	r2, #0
 80040f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040fc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004100:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004104:	4689      	mov	r9, r1
 8004106:	4692      	mov	sl, r2
 8004108:	eb1b 0509 	adds.w	r5, fp, r9
 800410c:	eb4c 060a 	adc.w	r6, ip, sl
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4619      	mov	r1, r3
 8004116:	f04f 0200 	mov.w	r2, #0
 800411a:	f04f 0300 	mov.w	r3, #0
 800411e:	f04f 0400 	mov.w	r4, #0
 8004122:	0094      	lsls	r4, r2, #2
 8004124:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004128:	008b      	lsls	r3, r1, #2
 800412a:	461a      	mov	r2, r3
 800412c:	4623      	mov	r3, r4
 800412e:	4628      	mov	r0, r5
 8004130:	4631      	mov	r1, r6
 8004132:	f7fc f8d5 	bl	80002e0 <__aeabi_uldivmod>
 8004136:	4603      	mov	r3, r0
 8004138:	460c      	mov	r4, r1
 800413a:	461a      	mov	r2, r3
 800413c:	4b9a      	ldr	r3, [pc, #616]	; (80043a8 <UART_SetConfig+0x6f4>)
 800413e:	fba3 1302 	umull	r1, r3, r3, r2
 8004142:	095b      	lsrs	r3, r3, #5
 8004144:	2164      	movs	r1, #100	; 0x64
 8004146:	fb01 f303 	mul.w	r3, r1, r3
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	3332      	adds	r3, #50	; 0x32
 8004150:	4a95      	ldr	r2, [pc, #596]	; (80043a8 <UART_SetConfig+0x6f4>)
 8004152:	fba2 2303 	umull	r2, r3, r2, r3
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800415c:	4498      	add	r8, r3
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	469b      	mov	fp, r3
 8004162:	f04f 0c00 	mov.w	ip, #0
 8004166:	46d9      	mov	r9, fp
 8004168:	46e2      	mov	sl, ip
 800416a:	eb19 0309 	adds.w	r3, r9, r9
 800416e:	eb4a 040a 	adc.w	r4, sl, sl
 8004172:	4699      	mov	r9, r3
 8004174:	46a2      	mov	sl, r4
 8004176:	eb19 090b 	adds.w	r9, r9, fp
 800417a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800417e:	f04f 0100 	mov.w	r1, #0
 8004182:	f04f 0200 	mov.w	r2, #0
 8004186:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800418a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800418e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004192:	4689      	mov	r9, r1
 8004194:	4692      	mov	sl, r2
 8004196:	eb1b 0509 	adds.w	r5, fp, r9
 800419a:	eb4c 060a 	adc.w	r6, ip, sl
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4619      	mov	r1, r3
 80041a4:	f04f 0200 	mov.w	r2, #0
 80041a8:	f04f 0300 	mov.w	r3, #0
 80041ac:	f04f 0400 	mov.w	r4, #0
 80041b0:	0094      	lsls	r4, r2, #2
 80041b2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80041b6:	008b      	lsls	r3, r1, #2
 80041b8:	461a      	mov	r2, r3
 80041ba:	4623      	mov	r3, r4
 80041bc:	4628      	mov	r0, r5
 80041be:	4631      	mov	r1, r6
 80041c0:	f7fc f88e 	bl	80002e0 <__aeabi_uldivmod>
 80041c4:	4603      	mov	r3, r0
 80041c6:	460c      	mov	r4, r1
 80041c8:	461a      	mov	r2, r3
 80041ca:	4b77      	ldr	r3, [pc, #476]	; (80043a8 <UART_SetConfig+0x6f4>)
 80041cc:	fba3 1302 	umull	r1, r3, r3, r2
 80041d0:	095b      	lsrs	r3, r3, #5
 80041d2:	2164      	movs	r1, #100	; 0x64
 80041d4:	fb01 f303 	mul.w	r3, r1, r3
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	011b      	lsls	r3, r3, #4
 80041dc:	3332      	adds	r3, #50	; 0x32
 80041de:	4a72      	ldr	r2, [pc, #456]	; (80043a8 <UART_SetConfig+0x6f4>)
 80041e0:	fba2 2303 	umull	r2, r3, r2, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	f003 020f 	and.w	r2, r3, #15
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4442      	add	r2, r8
 80041f0:	609a      	str	r2, [r3, #8]
 80041f2:	e0d0      	b.n	8004396 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80041f4:	f7fd fb6a 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 80041f8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	469a      	mov	sl, r3
 80041fe:	f04f 0b00 	mov.w	fp, #0
 8004202:	46d0      	mov	r8, sl
 8004204:	46d9      	mov	r9, fp
 8004206:	eb18 0308 	adds.w	r3, r8, r8
 800420a:	eb49 0409 	adc.w	r4, r9, r9
 800420e:	4698      	mov	r8, r3
 8004210:	46a1      	mov	r9, r4
 8004212:	eb18 080a 	adds.w	r8, r8, sl
 8004216:	eb49 090b 	adc.w	r9, r9, fp
 800421a:	f04f 0100 	mov.w	r1, #0
 800421e:	f04f 0200 	mov.w	r2, #0
 8004222:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004226:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800422a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800422e:	4688      	mov	r8, r1
 8004230:	4691      	mov	r9, r2
 8004232:	eb1a 0508 	adds.w	r5, sl, r8
 8004236:	eb4b 0609 	adc.w	r6, fp, r9
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	4619      	mov	r1, r3
 8004240:	f04f 0200 	mov.w	r2, #0
 8004244:	f04f 0300 	mov.w	r3, #0
 8004248:	f04f 0400 	mov.w	r4, #0
 800424c:	0094      	lsls	r4, r2, #2
 800424e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004252:	008b      	lsls	r3, r1, #2
 8004254:	461a      	mov	r2, r3
 8004256:	4623      	mov	r3, r4
 8004258:	4628      	mov	r0, r5
 800425a:	4631      	mov	r1, r6
 800425c:	f7fc f840 	bl	80002e0 <__aeabi_uldivmod>
 8004260:	4603      	mov	r3, r0
 8004262:	460c      	mov	r4, r1
 8004264:	461a      	mov	r2, r3
 8004266:	4b50      	ldr	r3, [pc, #320]	; (80043a8 <UART_SetConfig+0x6f4>)
 8004268:	fba3 2302 	umull	r2, r3, r3, r2
 800426c:	095b      	lsrs	r3, r3, #5
 800426e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	469b      	mov	fp, r3
 8004276:	f04f 0c00 	mov.w	ip, #0
 800427a:	46d9      	mov	r9, fp
 800427c:	46e2      	mov	sl, ip
 800427e:	eb19 0309 	adds.w	r3, r9, r9
 8004282:	eb4a 040a 	adc.w	r4, sl, sl
 8004286:	4699      	mov	r9, r3
 8004288:	46a2      	mov	sl, r4
 800428a:	eb19 090b 	adds.w	r9, r9, fp
 800428e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004292:	f04f 0100 	mov.w	r1, #0
 8004296:	f04f 0200 	mov.w	r2, #0
 800429a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800429e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80042a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80042a6:	4689      	mov	r9, r1
 80042a8:	4692      	mov	sl, r2
 80042aa:	eb1b 0509 	adds.w	r5, fp, r9
 80042ae:	eb4c 060a 	adc.w	r6, ip, sl
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	4619      	mov	r1, r3
 80042b8:	f04f 0200 	mov.w	r2, #0
 80042bc:	f04f 0300 	mov.w	r3, #0
 80042c0:	f04f 0400 	mov.w	r4, #0
 80042c4:	0094      	lsls	r4, r2, #2
 80042c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042ca:	008b      	lsls	r3, r1, #2
 80042cc:	461a      	mov	r2, r3
 80042ce:	4623      	mov	r3, r4
 80042d0:	4628      	mov	r0, r5
 80042d2:	4631      	mov	r1, r6
 80042d4:	f7fc f804 	bl	80002e0 <__aeabi_uldivmod>
 80042d8:	4603      	mov	r3, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	461a      	mov	r2, r3
 80042de:	4b32      	ldr	r3, [pc, #200]	; (80043a8 <UART_SetConfig+0x6f4>)
 80042e0:	fba3 1302 	umull	r1, r3, r3, r2
 80042e4:	095b      	lsrs	r3, r3, #5
 80042e6:	2164      	movs	r1, #100	; 0x64
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	3332      	adds	r3, #50	; 0x32
 80042f2:	4a2d      	ldr	r2, [pc, #180]	; (80043a8 <UART_SetConfig+0x6f4>)
 80042f4:	fba2 2303 	umull	r2, r3, r2, r3
 80042f8:	095b      	lsrs	r3, r3, #5
 80042fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fe:	4498      	add	r8, r3
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	469b      	mov	fp, r3
 8004304:	f04f 0c00 	mov.w	ip, #0
 8004308:	46d9      	mov	r9, fp
 800430a:	46e2      	mov	sl, ip
 800430c:	eb19 0309 	adds.w	r3, r9, r9
 8004310:	eb4a 040a 	adc.w	r4, sl, sl
 8004314:	4699      	mov	r9, r3
 8004316:	46a2      	mov	sl, r4
 8004318:	eb19 090b 	adds.w	r9, r9, fp
 800431c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004320:	f04f 0100 	mov.w	r1, #0
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800432c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004330:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004334:	4689      	mov	r9, r1
 8004336:	4692      	mov	sl, r2
 8004338:	eb1b 0509 	adds.w	r5, fp, r9
 800433c:	eb4c 060a 	adc.w	r6, ip, sl
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	4619      	mov	r1, r3
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	f04f 0400 	mov.w	r4, #0
 8004352:	0094      	lsls	r4, r2, #2
 8004354:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004358:	008b      	lsls	r3, r1, #2
 800435a:	461a      	mov	r2, r3
 800435c:	4623      	mov	r3, r4
 800435e:	4628      	mov	r0, r5
 8004360:	4631      	mov	r1, r6
 8004362:	f7fb ffbd 	bl	80002e0 <__aeabi_uldivmod>
 8004366:	4603      	mov	r3, r0
 8004368:	460c      	mov	r4, r1
 800436a:	461a      	mov	r2, r3
 800436c:	4b0e      	ldr	r3, [pc, #56]	; (80043a8 <UART_SetConfig+0x6f4>)
 800436e:	fba3 1302 	umull	r1, r3, r3, r2
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2164      	movs	r1, #100	; 0x64
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	1ad3      	subs	r3, r2, r3
 800437c:	011b      	lsls	r3, r3, #4
 800437e:	3332      	adds	r3, #50	; 0x32
 8004380:	4a09      	ldr	r2, [pc, #36]	; (80043a8 <UART_SetConfig+0x6f4>)
 8004382:	fba2 2303 	umull	r2, r3, r2, r3
 8004386:	095b      	lsrs	r3, r3, #5
 8004388:	f003 020f 	and.w	r2, r3, #15
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4442      	add	r2, r8
 8004392:	609a      	str	r2, [r3, #8]
}
 8004394:	e7ff      	b.n	8004396 <UART_SetConfig+0x6e2>
 8004396:	bf00      	nop
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043a0:	40011000 	.word	0x40011000
 80043a4:	40011400 	.word	0x40011400
 80043a8:	51eb851f 	.word	0x51eb851f

080043ac <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80043ac:	b084      	sub	sp, #16
 80043ae:	b480      	push	{r7}
 80043b0:	b085      	sub	sp, #20
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	f107 001c 	add.w	r0, r7, #28
 80043ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80043c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80043c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80043c6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80043ca:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80043cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80043ce:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80043d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80043d2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80043d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80043d6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80043d8:	68fa      	ldr	r2, [r7, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80043e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	431a      	orrs	r2, r3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80043f2:	2300      	movs	r3, #0
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	3714      	adds	r7, #20
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	b004      	add	sp, #16
 8004400:	4770      	bx	lr

08004402 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004410:	4618      	mov	r0, r3
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	370c      	adds	r7, #12
 8004436:	46bd      	mov	sp, r7
 8004438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443c:	4770      	bx	lr

0800443e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800443e:	b580      	push	{r7, lr}
 8004440:	b082      	sub	sp, #8
 8004442:	af00      	add	r7, sp, #0
 8004444:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2203      	movs	r2, #3
 800444a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800444c:	2002      	movs	r0, #2
 800444e:	f7fc fe97 	bl	8001180 <HAL_Delay>
  
  return HAL_OK;
 8004452:	2300      	movs	r3, #0
}
 8004454:	4618      	mov	r0, r3
 8004456:	3708      	adds	r7, #8
 8004458:	46bd      	mov	sp, r7
 800445a:	bd80      	pop	{r7, pc}

0800445c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f003 0303 	and.w	r3, r3, #3
}
 800446c:	4618      	mov	r0, r3
 800446e:	370c      	adds	r7, #12
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004496:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800449c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80044a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80044a4:	68fa      	ldr	r2, [r7, #12]
 80044a6:	4313      	orrs	r3, r2
 80044a8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	68db      	ldr	r3, [r3, #12]
 80044ae:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80044b2:	f023 030f 	bic.w	r3, r3, #15
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	431a      	orrs	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80044be:	2300      	movs	r3, #0
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	b2db      	uxtb	r3, r3
}
 80044da:	4618      	mov	r0, r3
 80044dc:	370c      	adds	r7, #12
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3314      	adds	r3, #20
 80044f4:	461a      	mov	r2, r3
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	4413      	add	r3, r2
 80044fa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
}  
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004516:	2300      	movs	r3, #0
 8004518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	685a      	ldr	r2, [r3, #4]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004532:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004538:	431a      	orrs	r2, r3
                       Data->DPSM);
 800453a:	683b      	ldr	r3, [r7, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800453e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	4313      	orrs	r3, r2
 8004544:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	431a      	orrs	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004556:	2300      	movs	r3, #0

}
 8004558:	4618      	mov	r0, r3
 800455a:	3714      	adds	r7, #20
 800455c:	46bd      	mov	sp, r7
 800455e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004562:	4770      	bx	lr

08004564 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004572:	2310      	movs	r3, #16
 8004574:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004576:	2340      	movs	r3, #64	; 0x40
 8004578:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800457a:	2300      	movs	r3, #0
 800457c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800457e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004582:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004584:	f107 0308 	add.w	r3, r7, #8
 8004588:	4619      	mov	r1, r3
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff ff74 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004590:	f241 3288 	movw	r2, #5000	; 0x1388
 8004594:	2110      	movs	r1, #16
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f000 fa40 	bl	8004a1c <SDMMC_GetCmdResp1>
 800459c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800459e:	69fb      	ldr	r3, [r7, #28]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3720      	adds	r7, #32
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b088      	sub	sp, #32
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80045b6:	2311      	movs	r3, #17
 80045b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045ba:	2340      	movs	r3, #64	; 0x40
 80045bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80045be:	2300      	movs	r3, #0
 80045c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80045c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80045c8:	f107 0308 	add.w	r3, r7, #8
 80045cc:	4619      	mov	r1, r3
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7ff ff52 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80045d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d8:	2111      	movs	r1, #17
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 fa1e 	bl	8004a1c <SDMMC_GetCmdResp1>
 80045e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80045e2:	69fb      	ldr	r3, [r7, #28]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3720      	adds	r7, #32
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b088      	sub	sp, #32
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80045fa:	2312      	movs	r3, #18
 80045fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80045fe:	2340      	movs	r3, #64	; 0x40
 8004600:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004602:	2300      	movs	r3, #0
 8004604:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800460a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800460c:	f107 0308 	add.w	r3, r7, #8
 8004610:	4619      	mov	r1, r3
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f7ff ff30 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004618:	f241 3288 	movw	r2, #5000	; 0x1388
 800461c:	2112      	movs	r1, #18
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f9fc 	bl	8004a1c <SDMMC_GetCmdResp1>
 8004624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004626:	69fb      	ldr	r3, [r7, #28]
}
 8004628:	4618      	mov	r0, r3
 800462a:	3720      	adds	r7, #32
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b088      	sub	sp, #32
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
 8004638:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800463e:	2318      	movs	r3, #24
 8004640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004642:	2340      	movs	r3, #64	; 0x40
 8004644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004646:	2300      	movs	r3, #0
 8004648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800464a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800464e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004650:	f107 0308 	add.w	r3, r7, #8
 8004654:	4619      	mov	r1, r3
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f7ff ff0e 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800465c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004660:	2118      	movs	r1, #24
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f000 f9da 	bl	8004a1c <SDMMC_GetCmdResp1>
 8004668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800466a:	69fb      	ldr	r3, [r7, #28]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3720      	adds	r7, #32
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004682:	2319      	movs	r3, #25
 8004684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004686:	2340      	movs	r3, #64	; 0x40
 8004688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800468e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004692:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004694:	f107 0308 	add.w	r3, r7, #8
 8004698:	4619      	mov	r1, r3
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f7ff feec 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80046a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80046a4:	2119      	movs	r1, #25
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f9b8 	bl	8004a1c <SDMMC_GetCmdResp1>
 80046ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046ae:	69fb      	ldr	r3, [r7, #28]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3720      	adds	r7, #32
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b088      	sub	sp, #32
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80046c4:	230c      	movs	r3, #12
 80046c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046c8:	2340      	movs	r3, #64	; 0x40
 80046ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046d6:	f107 0308 	add.w	r3, r7, #8
 80046da:	4619      	mov	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f7ff fecb 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 80046e2:	4a05      	ldr	r2, [pc, #20]	; (80046f8 <SDMMC_CmdStopTransfer+0x40>)
 80046e4:	210c      	movs	r1, #12
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f998 	bl	8004a1c <SDMMC_GetCmdResp1>
 80046ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046ee:	69fb      	ldr	r3, [r7, #28]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3720      	adds	r7, #32
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	05f5e100 	.word	0x05f5e100

080046fc <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b08a      	sub	sp, #40	; 0x28
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800470c:	2307      	movs	r3, #7
 800470e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004710:	2340      	movs	r3, #64	; 0x40
 8004712:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004714:	2300      	movs	r3, #0
 8004716:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800471c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800471e:	f107 0310 	add.w	r3, r7, #16
 8004722:	4619      	mov	r1, r3
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f7ff fea7 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800472a:	f241 3288 	movw	r2, #5000	; 0x1388
 800472e:	2107      	movs	r1, #7
 8004730:	68f8      	ldr	r0, [r7, #12]
 8004732:	f000 f973 	bl	8004a1c <SDMMC_GetCmdResp1>
 8004736:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800473a:	4618      	mov	r0, r3
 800473c:	3728      	adds	r7, #40	; 0x28
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b088      	sub	sp, #32
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800474a:	2300      	movs	r3, #0
 800474c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800474e:	2300      	movs	r3, #0
 8004750:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004752:	2300      	movs	r3, #0
 8004754:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004756:	2300      	movs	r3, #0
 8004758:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800475a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800475e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004760:	f107 0308 	add.w	r3, r7, #8
 8004764:	4619      	mov	r1, r3
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff fe86 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f92d 	bl	80049cc <SDMMC_GetCmdError>
 8004772:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004774:	69fb      	ldr	r3, [r7, #28]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3720      	adds	r7, #32
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b088      	sub	sp, #32
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004786:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800478a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800478c:	2308      	movs	r3, #8
 800478e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004790:	2340      	movs	r3, #64	; 0x40
 8004792:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004794:	2300      	movs	r3, #0
 8004796:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004798:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800479c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	4619      	mov	r1, r3
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fe67 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f000 fb16 	bl	8004ddc <SDMMC_GetCmdResp7>
 80047b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047b2:	69fb      	ldr	r3, [r7, #28]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3720      	adds	r7, #32
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b088      	sub	sp, #32
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80047ca:	2337      	movs	r3, #55	; 0x37
 80047cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047ce:	2340      	movs	r3, #64	; 0x40
 80047d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80047da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047dc:	f107 0308 	add.w	r3, r7, #8
 80047e0:	4619      	mov	r1, r3
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff fe48 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 80047e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ec:	2137      	movs	r1, #55	; 0x37
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 f914 	bl	8004a1c <SDMMC_GetCmdResp1>
 80047f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80047f6:	69fb      	ldr	r3, [r7, #28]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3720      	adds	r7, #32
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b088      	sub	sp, #32
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004810:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004816:	2329      	movs	r3, #41	; 0x29
 8004818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800481a:	2340      	movs	r3, #64	; 0x40
 800481c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004826:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004828:	f107 0308 	add.w	r3, r7, #8
 800482c:	4619      	mov	r1, r3
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff fe22 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 fa23 	bl	8004c80 <SDMMC_GetCmdResp3>
 800483a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800483c:	69fb      	ldr	r3, [r7, #28]
}
 800483e:	4618      	mov	r0, r3
 8004840:	3720      	adds	r7, #32
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b088      	sub	sp, #32
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
 800484e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004854:	2306      	movs	r3, #6
 8004856:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004858:	2340      	movs	r3, #64	; 0x40
 800485a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004860:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004864:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004866:	f107 0308 	add.w	r3, r7, #8
 800486a:	4619      	mov	r1, r3
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f7ff fe03 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004872:	f241 3288 	movw	r2, #5000	; 0x1388
 8004876:	2106      	movs	r1, #6
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f8cf 	bl	8004a1c <SDMMC_GetCmdResp1>
 800487e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004880:	69fb      	ldr	r3, [r7, #28]
}
 8004882:	4618      	mov	r0, r3
 8004884:	3720      	adds	r7, #32
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}

0800488a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800488a:	b580      	push	{r7, lr}
 800488c:	b088      	sub	sp, #32
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004896:	2333      	movs	r3, #51	; 0x33
 8004898:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800489a:	2340      	movs	r3, #64	; 0x40
 800489c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800489e:	2300      	movs	r3, #0
 80048a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048a8:	f107 0308 	add.w	r3, r7, #8
 80048ac:	4619      	mov	r1, r3
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff fde2 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80048b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80048b8:	2133      	movs	r1, #51	; 0x33
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f8ae 	bl	8004a1c <SDMMC_GetCmdResp1>
 80048c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048c2:	69fb      	ldr	r3, [r7, #28]
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3720      	adds	r7, #32
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b088      	sub	sp, #32
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80048d8:	2302      	movs	r3, #2
 80048da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80048dc:	23c0      	movs	r3, #192	; 0xc0
 80048de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048e0:	2300      	movs	r3, #0
 80048e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048ea:	f107 0308 	add.w	r3, r7, #8
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f7ff fdc1 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f97c 	bl	8004bf4 <SDMMC_GetCmdResp2>
 80048fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048fe:	69fb      	ldr	r3, [r7, #28]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3720      	adds	r7, #32
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b088      	sub	sp, #32
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004916:	2309      	movs	r3, #9
 8004918:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800491a:	23c0      	movs	r3, #192	; 0xc0
 800491c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800491e:	2300      	movs	r3, #0
 8004920:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004922:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004926:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004928:	f107 0308 	add.w	r3, r7, #8
 800492c:	4619      	mov	r1, r3
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7ff fda2 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f95d 	bl	8004bf4 <SDMMC_GetCmdResp2>
 800493a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800493c:	69fb      	ldr	r3, [r7, #28]
}
 800493e:	4618      	mov	r0, r3
 8004940:	3720      	adds	r7, #32
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}

08004946 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004946:	b580      	push	{r7, lr}
 8004948:	b088      	sub	sp, #32
 800494a:	af00      	add	r7, sp, #0
 800494c:	6078      	str	r0, [r7, #4]
 800494e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004954:	2303      	movs	r3, #3
 8004956:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004958:	2340      	movs	r3, #64	; 0x40
 800495a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800495c:	2300      	movs	r3, #0
 800495e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004960:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004964:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004966:	f107 0308 	add.w	r3, r7, #8
 800496a:	4619      	mov	r1, r3
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7ff fd83 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	2103      	movs	r1, #3
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f9bc 	bl	8004cf4 <SDMMC_GetCmdResp6>
 800497c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800497e:	69fb      	ldr	r3, [r7, #28]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3720      	adds	r7, #32
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b088      	sub	sp, #32
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004996:	230d      	movs	r3, #13
 8004998:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800499a:	2340      	movs	r3, #64	; 0x40
 800499c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049a8:	f107 0308 	add.w	r3, r7, #8
 80049ac:	4619      	mov	r1, r3
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7ff fd62 	bl	8004478 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80049b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80049b8:	210d      	movs	r1, #13
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f82e 	bl	8004a1c <SDMMC_GetCmdResp1>
 80049c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049c2:	69fb      	ldr	r3, [r7, #28]
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	3720      	adds	r7, #32
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}

080049cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80049cc:	b490      	push	{r4, r7}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80049d4:	4b0f      	ldr	r3, [pc, #60]	; (8004a14 <SDMMC_GetCmdError+0x48>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a0f      	ldr	r2, [pc, #60]	; (8004a18 <SDMMC_GetCmdError+0x4c>)
 80049da:	fba2 2303 	umull	r2, r3, r2, r3
 80049de:	0a5b      	lsrs	r3, r3, #9
 80049e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80049e8:	4623      	mov	r3, r4
 80049ea:	1e5c      	subs	r4, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d102      	bne.n	80049f6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80049f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80049f4:	e009      	b.n	8004a0a <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0f2      	beq.n	80049e8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	22c5      	movs	r2, #197	; 0xc5
 8004a06:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bc90      	pop	{r4, r7}
 8004a12:	4770      	bx	lr
 8004a14:	20000000 	.word	0x20000000
 8004a18:	10624dd3 	.word	0x10624dd3

08004a1c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004a1c:	b590      	push	{r4, r7, lr}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	460b      	mov	r3, r1
 8004a26:	607a      	str	r2, [r7, #4]
 8004a28:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004a2a:	4b6f      	ldr	r3, [pc, #444]	; (8004be8 <SDMMC_GetCmdResp1+0x1cc>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a6f      	ldr	r2, [pc, #444]	; (8004bec <SDMMC_GetCmdResp1+0x1d0>)
 8004a30:	fba2 2303 	umull	r2, r3, r2, r3
 8004a34:	0a5b      	lsrs	r3, r3, #9
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004a3c:	4623      	mov	r3, r4
 8004a3e:	1e5c      	subs	r4, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d102      	bne.n	8004a4a <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004a44:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004a48:	e0c9      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a4e:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d0f0      	beq.n	8004a3c <SDMMC_GetCmdResp1+0x20>
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1eb      	bne.n	8004a3c <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d004      	beq.n	8004a7a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2204      	movs	r2, #4
 8004a74:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004a76:	2304      	movs	r3, #4
 8004a78:	e0b1      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a7e:	f003 0301 	and.w	r3, r3, #1
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d004      	beq.n	8004a90 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	2201      	movs	r2, #1
 8004a8a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e0a6      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	22c5      	movs	r2, #197	; 0xc5
 8004a94:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7ff fd18 	bl	80044cc <SDIO_GetCommandResponse>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	7afb      	ldrb	r3, [r7, #11]
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d001      	beq.n	8004aaa <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e099      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004aaa:	2100      	movs	r1, #0
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f7ff fd1a 	bl	80044e6 <SDIO_GetResponse>
 8004ab2:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4b4e      	ldr	r3, [pc, #312]	; (8004bf0 <SDMMC_GetCmdResp1+0x1d4>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d101      	bne.n	8004ac2 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	e08d      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	da02      	bge.n	8004ace <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004ac8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004acc:	e087      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004ad8:	2340      	movs	r3, #64	; 0x40
 8004ada:	e080      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d001      	beq.n	8004aea <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004ae6:	2380      	movs	r3, #128	; 0x80
 8004ae8:	e079      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d002      	beq.n	8004afa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004af4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004af8:	e071      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d002      	beq.n	8004b0a <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b08:	e069      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d002      	beq.n	8004b1a <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004b14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b18:	e061      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004b1a:	693b      	ldr	r3, [r7, #16]
 8004b1c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d002      	beq.n	8004b2a <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004b24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b28:	e059      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b38:	e051      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d002      	beq.n	8004b4a <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004b44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004b48:	e049      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d002      	beq.n	8004b5a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004b54:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b58:	e041      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8004b64:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b68:	e039      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d002      	beq.n	8004b7a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004b74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b78:	e031      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004b84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004b88:	e029      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d002      	beq.n	8004b9a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004b94:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004b98:	e021      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d002      	beq.n	8004baa <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004ba4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004ba8:	e019      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004bb4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004bb8:	e011      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d002      	beq.n	8004bca <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004bc4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004bc8:	e009      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f003 0308 	and.w	r3, r3, #8
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d002      	beq.n	8004bda <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004bd4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004bd8:	e001      	b.n	8004bde <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004bda:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	371c      	adds	r7, #28
 8004be2:	46bd      	mov	sp, r7
 8004be4:	bd90      	pop	{r4, r7, pc}
 8004be6:	bf00      	nop
 8004be8:	20000000 	.word	0x20000000
 8004bec:	10624dd3 	.word	0x10624dd3
 8004bf0:	fdffe008 	.word	0xfdffe008

08004bf4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004bf4:	b490      	push	{r4, r7}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004bfc:	4b1e      	ldr	r3, [pc, #120]	; (8004c78 <SDMMC_GetCmdResp2+0x84>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1e      	ldr	r2, [pc, #120]	; (8004c7c <SDMMC_GetCmdResp2+0x88>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	0a5b      	lsrs	r3, r3, #9
 8004c08:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c0c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004c10:	4623      	mov	r3, r4
 8004c12:	1e5c      	subs	r4, r3, #1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d102      	bne.n	8004c1e <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c18:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c1c:	e026      	b.n	8004c6c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c22:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <SDMMC_GetCmdResp2+0x1c>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d1eb      	bne.n	8004c10 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3c:	f003 0304 	and.w	r3, r3, #4
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d004      	beq.n	8004c4e <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2204      	movs	r2, #4
 8004c48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004c4a:	2304      	movs	r3, #4
 8004c4c:	e00e      	b.n	8004c6c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d004      	beq.n	8004c64 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004c60:	2301      	movs	r3, #1
 8004c62:	e003      	b.n	8004c6c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	22c5      	movs	r2, #197	; 0xc5
 8004c68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bc90      	pop	{r4, r7}
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	20000000 	.word	0x20000000
 8004c7c:	10624dd3 	.word	0x10624dd3

08004c80 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004c80:	b490      	push	{r4, r7}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c88:	4b18      	ldr	r3, [pc, #96]	; (8004cec <SDMMC_GetCmdResp3+0x6c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <SDMMC_GetCmdResp3+0x70>)
 8004c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c92:	0a5b      	lsrs	r3, r3, #9
 8004c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c98:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004c9c:	4623      	mov	r3, r4
 8004c9e:	1e5c      	subs	r4, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d102      	bne.n	8004caa <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004ca4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004ca8:	e01b      	b.n	8004ce2 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cae:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <SDMMC_GetCmdResp3+0x1c>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1eb      	bne.n	8004c9c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cc8:	f003 0304 	and.w	r3, r3, #4
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d004      	beq.n	8004cda <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2204      	movs	r2, #4
 8004cd4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004cd6:	2304      	movs	r3, #4
 8004cd8:	e003      	b.n	8004ce2 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	22c5      	movs	r2, #197	; 0xc5
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bc90      	pop	{r4, r7}
 8004cea:	4770      	bx	lr
 8004cec:	20000000 	.word	0x20000000
 8004cf0:	10624dd3 	.word	0x10624dd3

08004cf4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004cf4:	b590      	push	{r4, r7, lr}
 8004cf6:	b087      	sub	sp, #28
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	607a      	str	r2, [r7, #4]
 8004d00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d02:	4b34      	ldr	r3, [pc, #208]	; (8004dd4 <SDMMC_GetCmdResp6+0xe0>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a34      	ldr	r2, [pc, #208]	; (8004dd8 <SDMMC_GetCmdResp6+0xe4>)
 8004d08:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0c:	0a5b      	lsrs	r3, r3, #9
 8004d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d12:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004d16:	4623      	mov	r3, r4
 8004d18:	1e5c      	subs	r4, r3, #1
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d102      	bne.n	8004d24 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d1e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d22:	e052      	b.n	8004dca <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d28:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d0f0      	beq.n	8004d16 <SDMMC_GetCmdResp6+0x22>
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1eb      	bne.n	8004d16 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d42:	f003 0304 	and.w	r3, r3, #4
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d004      	beq.n	8004d54 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2204      	movs	r2, #4
 8004d4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d50:	2304      	movs	r3, #4
 8004d52:	e03a      	b.n	8004dca <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d004      	beq.n	8004d6a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2201      	movs	r2, #1
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e02f      	b.n	8004dca <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004d6a:	68f8      	ldr	r0, [r7, #12]
 8004d6c:	f7ff fbae 	bl	80044cc <SDIO_GetCommandResponse>
 8004d70:	4603      	mov	r3, r0
 8004d72:	461a      	mov	r2, r3
 8004d74:	7afb      	ldrb	r3, [r7, #11]
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d001      	beq.n	8004d7e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e025      	b.n	8004dca <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	22c5      	movs	r2, #197	; 0xc5
 8004d82:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004d84:	2100      	movs	r1, #0
 8004d86:	68f8      	ldr	r0, [r7, #12]
 8004d88:	f7ff fbad 	bl	80044e6 <SDIO_GetResponse>
 8004d8c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d106      	bne.n	8004da6 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	0c1b      	lsrs	r3, r3, #16
 8004d9c:	b29a      	uxth	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004da2:	2300      	movs	r3, #0
 8004da4:	e011      	b.n	8004dca <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d002      	beq.n	8004db6 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004db4:	e009      	b.n	8004dca <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d002      	beq.n	8004dc6 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004dc4:	e001      	b.n	8004dca <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	371c      	adds	r7, #28
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd90      	pop	{r4, r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	20000000 	.word	0x20000000
 8004dd8:	10624dd3 	.word	0x10624dd3

08004ddc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004ddc:	b490      	push	{r4, r7}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004de4:	4b21      	ldr	r3, [pc, #132]	; (8004e6c <SDMMC_GetCmdResp7+0x90>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4a21      	ldr	r2, [pc, #132]	; (8004e70 <SDMMC_GetCmdResp7+0x94>)
 8004dea:	fba2 2303 	umull	r2, r3, r2, r3
 8004dee:	0a5b      	lsrs	r3, r3, #9
 8004df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8004df8:	4623      	mov	r3, r4
 8004dfa:	1e5c      	subs	r4, r3, #1
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d102      	bne.n	8004e06 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e04:	e02c      	b.n	8004e60 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d0f0      	beq.n	8004df8 <SDMMC_GetCmdResp7+0x1c>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d1eb      	bne.n	8004df8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d004      	beq.n	8004e36 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2204      	movs	r2, #4
 8004e30:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e32:	2304      	movs	r3, #4
 8004e34:	e014      	b.n	8004e60 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d004      	beq.n	8004e4c <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2201      	movs	r2, #1
 8004e46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e009      	b.n	8004e60 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2240      	movs	r2, #64	; 0x40
 8004e5c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004e5e:	2300      	movs	r3, #0
  
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bc90      	pop	{r4, r7}
 8004e68:	4770      	bx	lr
 8004e6a:	bf00      	nop
 8004e6c:	20000000 	.word	0x20000000
 8004e70:	10624dd3 	.word	0x10624dd3

08004e74 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004e78:	4904      	ldr	r1, [pc, #16]	; (8004e8c <MX_FATFS_Init+0x18>)
 8004e7a:	4805      	ldr	r0, [pc, #20]	; (8004e90 <MX_FATFS_Init+0x1c>)
 8004e7c:	f002 fdbe 	bl	80079fc <FATFS_LinkDriver>
 8004e80:	4603      	mov	r3, r0
 8004e82:	461a      	mov	r2, r3
 8004e84:	4b03      	ldr	r3, [pc, #12]	; (8004e94 <MX_FATFS_Init+0x20>)
 8004e86:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004e88:	bf00      	nop
 8004e8a:	bd80      	pop	{r7, pc}
 8004e8c:	20000694 	.word	0x20000694
 8004e90:	08008780 	.word	0x08008780
 8004e94:	20000690 	.word	0x20000690

08004e98 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004e9c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr

08004ea8 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b082      	sub	sp, #8
 8004eac:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004eb2:	f000 f879 	bl	8004fa8 <BSP_SD_IsDetected>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d001      	beq.n	8004ec0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e012      	b.n	8004ee6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004ec0:	480b      	ldr	r0, [pc, #44]	; (8004ef0 <BSP_SD_Init+0x48>)
 8004ec2:	f7fd fc4f 	bl	8002764 <HAL_SD_Init>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004eca:	79fb      	ldrb	r3, [r7, #7]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d109      	bne.n	8004ee4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004ed0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004ed4:	4806      	ldr	r0, [pc, #24]	; (8004ef0 <BSP_SD_Init+0x48>)
 8004ed6:	f7fe fa3d 	bl	8003354 <HAL_SD_ConfigWideBusOperation>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3708      	adds	r7, #8
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	200005c8 	.word	0x200005c8

08004ef4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b088      	sub	sp, #32
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	9300      	str	r3, [sp, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	68ba      	ldr	r2, [r7, #8]
 8004f0e:	68f9      	ldr	r1, [r7, #12]
 8004f10:	4806      	ldr	r0, [pc, #24]	; (8004f2c <BSP_SD_ReadBlocks+0x38>)
 8004f12:	f7fd fcb7 	bl	8002884 <HAL_SD_ReadBlocks>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d001      	beq.n	8004f20 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3718      	adds	r7, #24
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	200005c8 	.word	0x200005c8

08004f30 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	9300      	str	r3, [sp, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	68f9      	ldr	r1, [r7, #12]
 8004f4c:	4806      	ldr	r0, [pc, #24]	; (8004f68 <BSP_SD_WriteBlocks+0x38>)
 8004f4e:	f7fd fe91 	bl	8002c74 <HAL_SD_WriteBlocks>
 8004f52:	4603      	mov	r3, r0
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d001      	beq.n	8004f5c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004f58:	2301      	movs	r3, #1
 8004f5a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004f5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	200005c8 	.word	0x200005c8

08004f6c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8004f70:	4805      	ldr	r0, [pc, #20]	; (8004f88 <BSP_SD_GetCardState+0x1c>)
 8004f72:	f7fe fa6b 	bl	800344c <HAL_SD_GetCardState>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b04      	cmp	r3, #4
 8004f7a:	bf14      	ite	ne
 8004f7c:	2301      	movne	r3, #1
 8004f7e:	2300      	moveq	r3, #0
 8004f80:	b2db      	uxtb	r3, r3
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	200005c8 	.word	0x200005c8

08004f8c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b082      	sub	sp, #8
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8004f94:	6879      	ldr	r1, [r7, #4]
 8004f96:	4803      	ldr	r0, [pc, #12]	; (8004fa4 <BSP_SD_GetCardInfo+0x18>)
 8004f98:	f7fe f9b0 	bl	80032fc <HAL_SD_GetCardInfo>
}
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	200005c8 	.word	0x200005c8

08004fa8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8004fb2:	79fb      	ldrb	r3, [r7, #7]
 8004fb4:	b2db      	uxtb	r3, r3
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	4603      	mov	r3, r0
 8004fcc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8004fce:	4b0b      	ldr	r3, [pc, #44]	; (8004ffc <SD_CheckStatus+0x38>)
 8004fd0:	2201      	movs	r2, #1
 8004fd2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8004fd4:	f7ff ffca 	bl	8004f6c <BSP_SD_GetCardState>
 8004fd8:	4603      	mov	r3, r0
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d107      	bne.n	8004fee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8004fde:	4b07      	ldr	r3, [pc, #28]	; (8004ffc <SD_CheckStatus+0x38>)
 8004fe0:	781b      	ldrb	r3, [r3, #0]
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	f023 0301 	bic.w	r3, r3, #1
 8004fe8:	b2da      	uxtb	r2, r3
 8004fea:	4b04      	ldr	r3, [pc, #16]	; (8004ffc <SD_CheckStatus+0x38>)
 8004fec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8004fee:	4b03      	ldr	r3, [pc, #12]	; (8004ffc <SD_CheckStatus+0x38>)
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	b2db      	uxtb	r3, r3
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	20000009 	.word	0x20000009

08005000 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	4603      	mov	r3, r0
 8005008:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800500a:	4b0b      	ldr	r3, [pc, #44]	; (8005038 <SD_initialize+0x38>)
 800500c:	2201      	movs	r2, #1
 800500e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005010:	f7ff ff4a 	bl	8004ea8 <BSP_SD_Init>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d107      	bne.n	800502a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800501a:	79fb      	ldrb	r3, [r7, #7]
 800501c:	4618      	mov	r0, r3
 800501e:	f7ff ffd1 	bl	8004fc4 <SD_CheckStatus>
 8005022:	4603      	mov	r3, r0
 8005024:	461a      	mov	r2, r3
 8005026:	4b04      	ldr	r3, [pc, #16]	; (8005038 <SD_initialize+0x38>)
 8005028:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800502a:	4b03      	ldr	r3, [pc, #12]	; (8005038 <SD_initialize+0x38>)
 800502c:	781b      	ldrb	r3, [r3, #0]
 800502e:	b2db      	uxtb	r3, r3
}
 8005030:	4618      	mov	r0, r3
 8005032:	3708      	adds	r7, #8
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}
 8005038:	20000009 	.word	0x20000009

0800503c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	4603      	mov	r3, r0
 8005044:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005046:	79fb      	ldrb	r3, [r7, #7]
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff ffbb 	bl	8004fc4 <SD_CheckStatus>
 800504e:	4603      	mov	r3, r0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b086      	sub	sp, #24
 800505c:	af00      	add	r7, sp, #0
 800505e:	60b9      	str	r1, [r7, #8]
 8005060:	607a      	str	r2, [r7, #4]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	4603      	mov	r3, r0
 8005066:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800506c:	f04f 33ff 	mov.w	r3, #4294967295
 8005070:	683a      	ldr	r2, [r7, #0]
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	68b8      	ldr	r0, [r7, #8]
 8005076:	f7ff ff3d 	bl	8004ef4 <BSP_SD_ReadBlocks>
 800507a:	4603      	mov	r3, r0
 800507c:	2b00      	cmp	r3, #0
 800507e:	d107      	bne.n	8005090 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005080:	bf00      	nop
 8005082:	f7ff ff73 	bl	8004f6c <BSP_SD_GetCardState>
 8005086:	4603      	mov	r3, r0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d1fa      	bne.n	8005082 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005090:	7dfb      	ldrb	r3, [r7, #23]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3718      	adds	r7, #24
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b086      	sub	sp, #24
 800509e:	af00      	add	r7, sp, #0
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
 80050a4:	603b      	str	r3, [r7, #0]
 80050a6:	4603      	mov	r3, r0
 80050a8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80050ae:	f04f 33ff 	mov.w	r3, #4294967295
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	6879      	ldr	r1, [r7, #4]
 80050b6:	68b8      	ldr	r0, [r7, #8]
 80050b8:	f7ff ff3a 	bl	8004f30 <BSP_SD_WriteBlocks>
 80050bc:	4603      	mov	r3, r0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d107      	bne.n	80050d2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80050c2:	bf00      	nop
 80050c4:	f7ff ff52 	bl	8004f6c <BSP_SD_GetCardState>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1fa      	bne.n	80050c4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80050ce:	2300      	movs	r3, #0
 80050d0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80050d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3718      	adds	r7, #24
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b08c      	sub	sp, #48	; 0x30
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	603a      	str	r2, [r7, #0]
 80050e6:	71fb      	strb	r3, [r7, #7]
 80050e8:	460b      	mov	r3, r1
 80050ea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80050f2:	4b25      	ldr	r3, [pc, #148]	; (8005188 <SD_ioctl+0xac>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	b2db      	uxtb	r3, r3
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d001      	beq.n	8005104 <SD_ioctl+0x28>
 8005100:	2303      	movs	r3, #3
 8005102:	e03c      	b.n	800517e <SD_ioctl+0xa2>

  switch (cmd)
 8005104:	79bb      	ldrb	r3, [r7, #6]
 8005106:	2b03      	cmp	r3, #3
 8005108:	d834      	bhi.n	8005174 <SD_ioctl+0x98>
 800510a:	a201      	add	r2, pc, #4	; (adr r2, 8005110 <SD_ioctl+0x34>)
 800510c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005110:	08005121 	.word	0x08005121
 8005114:	08005129 	.word	0x08005129
 8005118:	08005141 	.word	0x08005141
 800511c:	0800515b 	.word	0x0800515b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005126:	e028      	b.n	800517a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005128:	f107 030c 	add.w	r3, r7, #12
 800512c:	4618      	mov	r0, r3
 800512e:	f7ff ff2d 	bl	8004f8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005132:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005138:	2300      	movs	r3, #0
 800513a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800513e:	e01c      	b.n	800517a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005140:	f107 030c 	add.w	r3, r7, #12
 8005144:	4618      	mov	r0, r3
 8005146:	f7ff ff21 	bl	8004f8c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800514a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514c:	b29a      	uxth	r2, r3
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005152:	2300      	movs	r3, #0
 8005154:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005158:	e00f      	b.n	800517a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800515a:	f107 030c 	add.w	r3, r7, #12
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff ff14 	bl	8004f8c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005166:	0a5a      	lsrs	r2, r3, #9
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005172:	e002      	b.n	800517a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005174:	2304      	movs	r3, #4
 8005176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800517a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800517e:	4618      	mov	r0, r3
 8005180:	3730      	adds	r7, #48	; 0x30
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	20000009 	.word	0x20000009

0800518c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b084      	sub	sp, #16
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005196:	79fb      	ldrb	r3, [r7, #7]
 8005198:	4a08      	ldr	r2, [pc, #32]	; (80051bc <disk_status+0x30>)
 800519a:	009b      	lsls	r3, r3, #2
 800519c:	4413      	add	r3, r2
 800519e:	685b      	ldr	r3, [r3, #4]
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	79fa      	ldrb	r2, [r7, #7]
 80051a4:	4905      	ldr	r1, [pc, #20]	; (80051bc <disk_status+0x30>)
 80051a6:	440a      	add	r2, r1
 80051a8:	7a12      	ldrb	r2, [r2, #8]
 80051aa:	4610      	mov	r0, r2
 80051ac:	4798      	blx	r3
 80051ae:	4603      	mov	r3, r0
 80051b0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80051b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	3710      	adds	r7, #16
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bd80      	pop	{r7, pc}
 80051bc:	200000bc 	.word	0x200000bc

080051c0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b084      	sub	sp, #16
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	4603      	mov	r3, r0
 80051c8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80051ca:	2300      	movs	r3, #0
 80051cc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80051ce:	79fb      	ldrb	r3, [r7, #7]
 80051d0:	4a0d      	ldr	r2, [pc, #52]	; (8005208 <disk_initialize+0x48>)
 80051d2:	5cd3      	ldrb	r3, [r2, r3]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d111      	bne.n	80051fc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80051d8:	79fb      	ldrb	r3, [r7, #7]
 80051da:	4a0b      	ldr	r2, [pc, #44]	; (8005208 <disk_initialize+0x48>)
 80051dc:	2101      	movs	r1, #1
 80051de:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80051e0:	79fb      	ldrb	r3, [r7, #7]
 80051e2:	4a09      	ldr	r2, [pc, #36]	; (8005208 <disk_initialize+0x48>)
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	79fa      	ldrb	r2, [r7, #7]
 80051ee:	4906      	ldr	r1, [pc, #24]	; (8005208 <disk_initialize+0x48>)
 80051f0:	440a      	add	r2, r1
 80051f2:	7a12      	ldrb	r2, [r2, #8]
 80051f4:	4610      	mov	r0, r2
 80051f6:	4798      	blx	r3
 80051f8:	4603      	mov	r3, r0
 80051fa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	200000bc 	.word	0x200000bc

0800520c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b087      	sub	sp, #28
 8005210:	af00      	add	r7, sp, #0
 8005212:	60b9      	str	r1, [r7, #8]
 8005214:	607a      	str	r2, [r7, #4]
 8005216:	603b      	str	r3, [r7, #0]
 8005218:	4603      	mov	r3, r0
 800521a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	4a0a      	ldr	r2, [pc, #40]	; (8005248 <disk_read+0x3c>)
 8005220:	009b      	lsls	r3, r3, #2
 8005222:	4413      	add	r3, r2
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	689c      	ldr	r4, [r3, #8]
 8005228:	7bfb      	ldrb	r3, [r7, #15]
 800522a:	4a07      	ldr	r2, [pc, #28]	; (8005248 <disk_read+0x3c>)
 800522c:	4413      	add	r3, r2
 800522e:	7a18      	ldrb	r0, [r3, #8]
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	47a0      	blx	r4
 8005238:	4603      	mov	r3, r0
 800523a:	75fb      	strb	r3, [r7, #23]
  return res;
 800523c:	7dfb      	ldrb	r3, [r7, #23]
}
 800523e:	4618      	mov	r0, r3
 8005240:	371c      	adds	r7, #28
 8005242:	46bd      	mov	sp, r7
 8005244:	bd90      	pop	{r4, r7, pc}
 8005246:	bf00      	nop
 8005248:	200000bc 	.word	0x200000bc

0800524c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800524c:	b590      	push	{r4, r7, lr}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60b9      	str	r1, [r7, #8]
 8005254:	607a      	str	r2, [r7, #4]
 8005256:	603b      	str	r3, [r7, #0]
 8005258:	4603      	mov	r3, r0
 800525a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800525c:	7bfb      	ldrb	r3, [r7, #15]
 800525e:	4a0a      	ldr	r2, [pc, #40]	; (8005288 <disk_write+0x3c>)
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4413      	add	r3, r2
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	68dc      	ldr	r4, [r3, #12]
 8005268:	7bfb      	ldrb	r3, [r7, #15]
 800526a:	4a07      	ldr	r2, [pc, #28]	; (8005288 <disk_write+0x3c>)
 800526c:	4413      	add	r3, r2
 800526e:	7a18      	ldrb	r0, [r3, #8]
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	68b9      	ldr	r1, [r7, #8]
 8005276:	47a0      	blx	r4
 8005278:	4603      	mov	r3, r0
 800527a:	75fb      	strb	r3, [r7, #23]
  return res;
 800527c:	7dfb      	ldrb	r3, [r7, #23]
}
 800527e:	4618      	mov	r0, r3
 8005280:	371c      	adds	r7, #28
 8005282:	46bd      	mov	sp, r7
 8005284:	bd90      	pop	{r4, r7, pc}
 8005286:	bf00      	nop
 8005288:	200000bc 	.word	0x200000bc

0800528c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	b084      	sub	sp, #16
 8005290:	af00      	add	r7, sp, #0
 8005292:	4603      	mov	r3, r0
 8005294:	603a      	str	r2, [r7, #0]
 8005296:	71fb      	strb	r3, [r7, #7]
 8005298:	460b      	mov	r3, r1
 800529a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800529c:	79fb      	ldrb	r3, [r7, #7]
 800529e:	4a09      	ldr	r2, [pc, #36]	; (80052c4 <disk_ioctl+0x38>)
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	79fa      	ldrb	r2, [r7, #7]
 80052aa:	4906      	ldr	r1, [pc, #24]	; (80052c4 <disk_ioctl+0x38>)
 80052ac:	440a      	add	r2, r1
 80052ae:	7a10      	ldrb	r0, [r2, #8]
 80052b0:	79b9      	ldrb	r1, [r7, #6]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	4798      	blx	r3
 80052b6:	4603      	mov	r3, r0
 80052b8:	73fb      	strb	r3, [r7, #15]
  return res;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	200000bc 	.word	0x200000bc

080052c8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	3301      	adds	r3, #1
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80052d8:	89fb      	ldrh	r3, [r7, #14]
 80052da:	021b      	lsls	r3, r3, #8
 80052dc:	b21a      	sxth	r2, r3
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	781b      	ldrb	r3, [r3, #0]
 80052e2:	b21b      	sxth	r3, r3
 80052e4:	4313      	orrs	r3, r2
 80052e6:	b21b      	sxth	r3, r3
 80052e8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80052ea:	89fb      	ldrh	r3, [r7, #14]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3714      	adds	r7, #20
 80052f0:	46bd      	mov	sp, r7
 80052f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f6:	4770      	bx	lr

080052f8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3303      	adds	r3, #3
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	021b      	lsls	r3, r3, #8
 800530c:	687a      	ldr	r2, [r7, #4]
 800530e:	3202      	adds	r2, #2
 8005310:	7812      	ldrb	r2, [r2, #0]
 8005312:	4313      	orrs	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	021b      	lsls	r3, r3, #8
 800531a:	687a      	ldr	r2, [r7, #4]
 800531c:	3201      	adds	r2, #1
 800531e:	7812      	ldrb	r2, [r2, #0]
 8005320:	4313      	orrs	r3, r2
 8005322:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	687a      	ldr	r2, [r7, #4]
 800532a:	7812      	ldrb	r2, [r2, #0]
 800532c:	4313      	orrs	r3, r2
 800532e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005330:	68fb      	ldr	r3, [r7, #12]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr

0800533e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800533e:	b480      	push	{r7}
 8005340:	b083      	sub	sp, #12
 8005342:	af00      	add	r7, sp, #0
 8005344:	6078      	str	r0, [r7, #4]
 8005346:	460b      	mov	r3, r1
 8005348:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	1c5a      	adds	r2, r3, #1
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	887a      	ldrh	r2, [r7, #2]
 8005352:	b2d2      	uxtb	r2, r2
 8005354:	701a      	strb	r2, [r3, #0]
 8005356:	887b      	ldrh	r3, [r7, #2]
 8005358:	0a1b      	lsrs	r3, r3, #8
 800535a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	1c5a      	adds	r2, r3, #1
 8005360:	607a      	str	r2, [r7, #4]
 8005362:	887a      	ldrh	r2, [r7, #2]
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	683a      	ldr	r2, [r7, #0]
 8005386:	b2d2      	uxtb	r2, r2
 8005388:	701a      	strb	r2, [r3, #0]
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	0a1b      	lsrs	r3, r3, #8
 800538e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	607a      	str	r2, [r7, #4]
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	b2d2      	uxtb	r2, r2
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	0a1b      	lsrs	r3, r3, #8
 80053a0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	1c5a      	adds	r2, r3, #1
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	683a      	ldr	r2, [r7, #0]
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	701a      	strb	r2, [r3, #0]
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	0a1b      	lsrs	r3, r3, #8
 80053b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	607a      	str	r2, [r7, #4]
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	b2d2      	uxtb	r2, r2
 80053be:	701a      	strb	r2, [r3, #0]
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00d      	beq.n	8005402 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	1c53      	adds	r3, r2, #1
 80053ea:	613b      	str	r3, [r7, #16]
 80053ec:	697b      	ldr	r3, [r7, #20]
 80053ee:	1c59      	adds	r1, r3, #1
 80053f0:	6179      	str	r1, [r7, #20]
 80053f2:	7812      	ldrb	r2, [r2, #0]
 80053f4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	3b01      	subs	r3, #1
 80053fa:	607b      	str	r3, [r7, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d1f1      	bne.n	80053e6 <mem_cpy+0x1a>
	}
}
 8005402:	bf00      	nop
 8005404:	371c      	adds	r7, #28
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800540e:	b480      	push	{r7}
 8005410:	b087      	sub	sp, #28
 8005412:	af00      	add	r7, sp, #0
 8005414:	60f8      	str	r0, [r7, #12]
 8005416:	60b9      	str	r1, [r7, #8]
 8005418:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	617a      	str	r2, [r7, #20]
 8005424:	68ba      	ldr	r2, [r7, #8]
 8005426:	b2d2      	uxtb	r2, r2
 8005428:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	3b01      	subs	r3, #1
 800542e:	607b      	str	r3, [r7, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d1f3      	bne.n	800541e <mem_set+0x10>
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005442:	b480      	push	{r7}
 8005444:	b089      	sub	sp, #36	; 0x24
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	61fb      	str	r3, [r7, #28]
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	1c5a      	adds	r2, r3, #1
 800545e:	61fa      	str	r2, [r7, #28]
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	4619      	mov	r1, r3
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	1c5a      	adds	r2, r3, #1
 8005468:	61ba      	str	r2, [r7, #24]
 800546a:	781b      	ldrb	r3, [r3, #0]
 800546c:	1acb      	subs	r3, r1, r3
 800546e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3b01      	subs	r3, #1
 8005474:	607b      	str	r3, [r7, #4]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d002      	beq.n	8005482 <mem_cmp+0x40>
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0eb      	beq.n	800545a <mem_cmp+0x18>

	return r;
 8005482:	697b      	ldr	r3, [r7, #20]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3724      	adds	r7, #36	; 0x24
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr

08005490 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800549a:	e002      	b.n	80054a2 <chk_chr+0x12>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3301      	adds	r3, #1
 80054a0:	607b      	str	r3, [r7, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d005      	beq.n	80054b6 <chk_chr+0x26>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	461a      	mov	r2, r3
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d1f2      	bne.n	800549c <chk_chr+0xc>
	return *str;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	781b      	ldrb	r3, [r3, #0]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	370c      	adds	r7, #12
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80054d2:	2300      	movs	r3, #0
 80054d4:	60bb      	str	r3, [r7, #8]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	60fb      	str	r3, [r7, #12]
 80054da:	e029      	b.n	8005530 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80054dc:	4a27      	ldr	r2, [pc, #156]	; (800557c <chk_lock+0xb4>)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	4413      	add	r3, r2
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01d      	beq.n	8005526 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80054ea:	4a24      	ldr	r2, [pc, #144]	; (800557c <chk_lock+0xb4>)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	4413      	add	r3, r2
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d116      	bne.n	800552a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80054fc:	4a1f      	ldr	r2, [pc, #124]	; (800557c <chk_lock+0xb4>)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	4413      	add	r3, r2
 8005504:	3304      	adds	r3, #4
 8005506:	681a      	ldr	r2, [r3, #0]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800550c:	429a      	cmp	r2, r3
 800550e:	d10c      	bne.n	800552a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005510:	4a1a      	ldr	r2, [pc, #104]	; (800557c <chk_lock+0xb4>)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	011b      	lsls	r3, r3, #4
 8005516:	4413      	add	r3, r2
 8005518:	3308      	adds	r3, #8
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005520:	429a      	cmp	r2, r3
 8005522:	d102      	bne.n	800552a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005524:	e007      	b.n	8005536 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005526:	2301      	movs	r3, #1
 8005528:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	3301      	adds	r3, #1
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d9d2      	bls.n	80054dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b02      	cmp	r3, #2
 800553a:	d109      	bne.n	8005550 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d102      	bne.n	8005548 <chk_lock+0x80>
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b02      	cmp	r3, #2
 8005546:	d101      	bne.n	800554c <chk_lock+0x84>
 8005548:	2300      	movs	r3, #0
 800554a:	e010      	b.n	800556e <chk_lock+0xa6>
 800554c:	2312      	movs	r3, #18
 800554e:	e00e      	b.n	800556e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d108      	bne.n	8005568 <chk_lock+0xa0>
 8005556:	4a09      	ldr	r2, [pc, #36]	; (800557c <chk_lock+0xb4>)
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	011b      	lsls	r3, r3, #4
 800555c:	4413      	add	r3, r2
 800555e:	330c      	adds	r3, #12
 8005560:	881b      	ldrh	r3, [r3, #0]
 8005562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005566:	d101      	bne.n	800556c <chk_lock+0xa4>
 8005568:	2310      	movs	r3, #16
 800556a:	e000      	b.n	800556e <chk_lock+0xa6>
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	2000009c 	.word	0x2000009c

08005580 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005580:	b480      	push	{r7}
 8005582:	b083      	sub	sp, #12
 8005584:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005586:	2300      	movs	r3, #0
 8005588:	607b      	str	r3, [r7, #4]
 800558a:	e002      	b.n	8005592 <enq_lock+0x12>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	3301      	adds	r3, #1
 8005590:	607b      	str	r3, [r7, #4]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2b01      	cmp	r3, #1
 8005596:	d806      	bhi.n	80055a6 <enq_lock+0x26>
 8005598:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <enq_lock+0x40>)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	4413      	add	r3, r2
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1f2      	bne.n	800558c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2b02      	cmp	r3, #2
 80055aa:	bf14      	ite	ne
 80055ac:	2301      	movne	r3, #1
 80055ae:	2300      	moveq	r3, #0
 80055b0:	b2db      	uxtb	r3, r3
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	370c      	adds	r7, #12
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	2000009c 	.word	0x2000009c

080055c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	e01f      	b.n	8005614 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80055d4:	4a41      	ldr	r2, [pc, #260]	; (80056dc <inc_lock+0x118>)
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	011b      	lsls	r3, r3, #4
 80055da:	4413      	add	r3, r2
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d113      	bne.n	800560e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80055e6:	4a3d      	ldr	r2, [pc, #244]	; (80056dc <inc_lock+0x118>)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	4413      	add	r3, r2
 80055ee:	3304      	adds	r3, #4
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d109      	bne.n	800560e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80055fa:	4a38      	ldr	r2, [pc, #224]	; (80056dc <inc_lock+0x118>)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	011b      	lsls	r3, r3, #4
 8005600:	4413      	add	r3, r2
 8005602:	3308      	adds	r3, #8
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800560a:	429a      	cmp	r2, r3
 800560c:	d006      	beq.n	800561c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	3301      	adds	r3, #1
 8005612:	60fb      	str	r3, [r7, #12]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2b01      	cmp	r3, #1
 8005618:	d9dc      	bls.n	80055d4 <inc_lock+0x10>
 800561a:	e000      	b.n	800561e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800561c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2b02      	cmp	r3, #2
 8005622:	d132      	bne.n	800568a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	e002      	b.n	8005630 <inc_lock+0x6c>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	3301      	adds	r3, #1
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2b01      	cmp	r3, #1
 8005634:	d806      	bhi.n	8005644 <inc_lock+0x80>
 8005636:	4a29      	ldr	r2, [pc, #164]	; (80056dc <inc_lock+0x118>)
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	4413      	add	r3, r2
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1f2      	bne.n	800562a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d101      	bne.n	800564e <inc_lock+0x8a>
 800564a:	2300      	movs	r3, #0
 800564c:	e040      	b.n	80056d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4922      	ldr	r1, [pc, #136]	; (80056dc <inc_lock+0x118>)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	011b      	lsls	r3, r3, #4
 8005658:	440b      	add	r3, r1
 800565a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	689a      	ldr	r2, [r3, #8]
 8005660:	491e      	ldr	r1, [pc, #120]	; (80056dc <inc_lock+0x118>)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	011b      	lsls	r3, r3, #4
 8005666:	440b      	add	r3, r1
 8005668:	3304      	adds	r3, #4
 800566a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	695a      	ldr	r2, [r3, #20]
 8005670:	491a      	ldr	r1, [pc, #104]	; (80056dc <inc_lock+0x118>)
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	440b      	add	r3, r1
 8005678:	3308      	adds	r3, #8
 800567a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800567c:	4a17      	ldr	r2, [pc, #92]	; (80056dc <inc_lock+0x118>)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	011b      	lsls	r3, r3, #4
 8005682:	4413      	add	r3, r2
 8005684:	330c      	adds	r3, #12
 8005686:	2200      	movs	r2, #0
 8005688:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d009      	beq.n	80056a4 <inc_lock+0xe0>
 8005690:	4a12      	ldr	r2, [pc, #72]	; (80056dc <inc_lock+0x118>)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	4413      	add	r3, r2
 8005698:	330c      	adds	r3, #12
 800569a:	881b      	ldrh	r3, [r3, #0]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d001      	beq.n	80056a4 <inc_lock+0xe0>
 80056a0:	2300      	movs	r3, #0
 80056a2:	e015      	b.n	80056d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d108      	bne.n	80056bc <inc_lock+0xf8>
 80056aa:	4a0c      	ldr	r2, [pc, #48]	; (80056dc <inc_lock+0x118>)
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	011b      	lsls	r3, r3, #4
 80056b0:	4413      	add	r3, r2
 80056b2:	330c      	adds	r3, #12
 80056b4:	881b      	ldrh	r3, [r3, #0]
 80056b6:	3301      	adds	r3, #1
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	e001      	b.n	80056c0 <inc_lock+0xfc>
 80056bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056c0:	4906      	ldr	r1, [pc, #24]	; (80056dc <inc_lock+0x118>)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	011b      	lsls	r3, r3, #4
 80056c6:	440b      	add	r3, r1
 80056c8:	330c      	adds	r3, #12
 80056ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	3301      	adds	r3, #1
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3714      	adds	r7, #20
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr
 80056dc:	2000009c 	.word	0x2000009c

080056e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	607b      	str	r3, [r7, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d825      	bhi.n	8005740 <dec_lock+0x60>
		n = Files[i].ctr;
 80056f4:	4a17      	ldr	r2, [pc, #92]	; (8005754 <dec_lock+0x74>)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	4413      	add	r3, r2
 80056fc:	330c      	adds	r3, #12
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005702:	89fb      	ldrh	r3, [r7, #14]
 8005704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005708:	d101      	bne.n	800570e <dec_lock+0x2e>
 800570a:	2300      	movs	r3, #0
 800570c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800570e:	89fb      	ldrh	r3, [r7, #14]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d002      	beq.n	800571a <dec_lock+0x3a>
 8005714:	89fb      	ldrh	r3, [r7, #14]
 8005716:	3b01      	subs	r3, #1
 8005718:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800571a:	4a0e      	ldr	r2, [pc, #56]	; (8005754 <dec_lock+0x74>)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	4413      	add	r3, r2
 8005722:	330c      	adds	r3, #12
 8005724:	89fa      	ldrh	r2, [r7, #14]
 8005726:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005728:	89fb      	ldrh	r3, [r7, #14]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d105      	bne.n	800573a <dec_lock+0x5a>
 800572e:	4a09      	ldr	r2, [pc, #36]	; (8005754 <dec_lock+0x74>)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	4413      	add	r3, r2
 8005736:	2200      	movs	r2, #0
 8005738:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800573a:	2300      	movs	r3, #0
 800573c:	737b      	strb	r3, [r7, #13]
 800573e:	e001      	b.n	8005744 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005740:	2302      	movs	r3, #2
 8005742:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005744:	7b7b      	ldrb	r3, [r7, #13]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3714      	adds	r7, #20
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	2000009c 	.word	0x2000009c

08005758 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	e010      	b.n	8005788 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005766:	4a0d      	ldr	r2, [pc, #52]	; (800579c <clear_lock+0x44>)
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	4413      	add	r3, r2
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	687a      	ldr	r2, [r7, #4]
 8005772:	429a      	cmp	r2, r3
 8005774:	d105      	bne.n	8005782 <clear_lock+0x2a>
 8005776:	4a09      	ldr	r2, [pc, #36]	; (800579c <clear_lock+0x44>)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	011b      	lsls	r3, r3, #4
 800577c:	4413      	add	r3, r2
 800577e:	2200      	movs	r2, #0
 8005780:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	3301      	adds	r3, #1
 8005786:	60fb      	str	r3, [r7, #12]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d9eb      	bls.n	8005766 <clear_lock+0xe>
	}
}
 800578e:	bf00      	nop
 8005790:	3714      	adds	r7, #20
 8005792:	46bd      	mov	sp, r7
 8005794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005798:	4770      	bx	lr
 800579a:	bf00      	nop
 800579c:	2000009c 	.word	0x2000009c

080057a0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b086      	sub	sp, #24
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80057a8:	2300      	movs	r3, #0
 80057aa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	78db      	ldrb	r3, [r3, #3]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d034      	beq.n	800581e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	7858      	ldrb	r0, [r3, #1]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80057c4:	2301      	movs	r3, #1
 80057c6:	697a      	ldr	r2, [r7, #20]
 80057c8:	f7ff fd40 	bl	800524c <disk_write>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d002      	beq.n	80057d8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
 80057d6:	e022      	b.n	800581e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	697a      	ldr	r2, [r7, #20]
 80057e4:	1ad2      	subs	r2, r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d217      	bcs.n	800581e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	789b      	ldrb	r3, [r3, #2]
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	e010      	b.n	8005818 <sync_window+0x78>
					wsect += fs->fsize;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	4413      	add	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	7858      	ldrb	r0, [r3, #1]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800580a:	2301      	movs	r3, #1
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	f7ff fd1d 	bl	800524c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	3b01      	subs	r3, #1
 8005816:	613b      	str	r3, [r7, #16]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	2b01      	cmp	r3, #1
 800581c:	d8eb      	bhi.n	80057f6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800581e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005820:	4618      	mov	r0, r3
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800583a:	683a      	ldr	r2, [r7, #0]
 800583c:	429a      	cmp	r2, r3
 800583e:	d01b      	beq.n	8005878 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005840:	6878      	ldr	r0, [r7, #4]
 8005842:	f7ff ffad 	bl	80057a0 <sync_window>
 8005846:	4603      	mov	r3, r0
 8005848:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800584a:	7bfb      	ldrb	r3, [r7, #15]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d113      	bne.n	8005878 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	7858      	ldrb	r0, [r3, #1]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800585a:	2301      	movs	r3, #1
 800585c:	683a      	ldr	r2, [r7, #0]
 800585e:	f7ff fcd5 	bl	800520c <disk_read>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d004      	beq.n	8005872 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005868:	f04f 33ff 	mov.w	r3, #4294967295
 800586c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800586e:	2301      	movs	r3, #1
 8005870:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	683a      	ldr	r2, [r7, #0]
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8005878:	7bfb      	ldrb	r3, [r7, #15]
}
 800587a:	4618      	mov	r0, r3
 800587c:	3710      	adds	r7, #16
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
	...

08005884 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b084      	sub	sp, #16
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff ff87 	bl	80057a0 <sync_window>
 8005892:	4603      	mov	r3, r0
 8005894:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005896:	7bfb      	ldrb	r3, [r7, #15]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d158      	bne.n	800594e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	781b      	ldrb	r3, [r3, #0]
 80058a0:	2b03      	cmp	r3, #3
 80058a2:	d148      	bne.n	8005936 <sync_fs+0xb2>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	791b      	ldrb	r3, [r3, #4]
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d144      	bne.n	8005936 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	3330      	adds	r3, #48	; 0x30
 80058b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80058b4:	2100      	movs	r1, #0
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7ff fda9 	bl	800540e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	3330      	adds	r3, #48	; 0x30
 80058c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80058c4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80058c8:	4618      	mov	r0, r3
 80058ca:	f7ff fd38 	bl	800533e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3330      	adds	r3, #48	; 0x30
 80058d2:	4921      	ldr	r1, [pc, #132]	; (8005958 <sync_fs+0xd4>)
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fd4d 	bl	8005374 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	3330      	adds	r3, #48	; 0x30
 80058de:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80058e2:	491e      	ldr	r1, [pc, #120]	; (800595c <sync_fs+0xd8>)
 80058e4:	4618      	mov	r0, r3
 80058e6:	f7ff fd45 	bl	8005374 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	3330      	adds	r3, #48	; 0x30
 80058ee:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	691b      	ldr	r3, [r3, #16]
 80058f6:	4619      	mov	r1, r3
 80058f8:	4610      	mov	r0, r2
 80058fa:	f7ff fd3b 	bl	8005374 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3330      	adds	r3, #48	; 0x30
 8005902:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	4619      	mov	r1, r3
 800590c:	4610      	mov	r0, r2
 800590e:	f7ff fd31 	bl	8005374 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	69db      	ldr	r3, [r3, #28]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	7858      	ldrb	r0, [r3, #1]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800592a:	2301      	movs	r3, #1
 800592c:	f7ff fc8e 	bl	800524c <disk_write>
			fs->fsi_flag = 0;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	785b      	ldrb	r3, [r3, #1]
 800593a:	2200      	movs	r2, #0
 800593c:	2100      	movs	r1, #0
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fca4 	bl	800528c <disk_ioctl>
 8005944:	4603      	mov	r3, r0
 8005946:	2b00      	cmp	r3, #0
 8005948:	d001      	beq.n	800594e <sync_fs+0xca>
 800594a:	2301      	movs	r3, #1
 800594c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800594e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}
 8005958:	41615252 	.word	0x41615252
 800595c:	61417272 	.word	0x61417272

08005960 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	3b02      	subs	r3, #2
 800596e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	3b02      	subs	r3, #2
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	429a      	cmp	r2, r3
 800597a:	d301      	bcc.n	8005980 <clust2sect+0x20>
 800597c:	2300      	movs	r3, #0
 800597e:	e008      	b.n	8005992 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	895b      	ldrh	r3, [r3, #10]
 8005984:	461a      	mov	r2, r3
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	fb03 f202 	mul.w	r2, r3, r2
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005990:	4413      	add	r3, r2
}
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b086      	sub	sp, #24
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d904      	bls.n	80059be <get_fat+0x20>
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	695b      	ldr	r3, [r3, #20]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d302      	bcc.n	80059c4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80059be:	2301      	movs	r3, #1
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	e08c      	b.n	8005ade <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80059c4:	f04f 33ff 	mov.w	r3, #4294967295
 80059c8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	781b      	ldrb	r3, [r3, #0]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d045      	beq.n	8005a5e <get_fat+0xc0>
 80059d2:	2b03      	cmp	r3, #3
 80059d4:	d05d      	beq.n	8005a92 <get_fat+0xf4>
 80059d6:	2b01      	cmp	r3, #1
 80059d8:	d177      	bne.n	8005aca <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	085b      	lsrs	r3, r3, #1
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4413      	add	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6a1a      	ldr	r2, [r3, #32]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	0a5b      	lsrs	r3, r3, #9
 80059f0:	4413      	add	r3, r2
 80059f2:	4619      	mov	r1, r3
 80059f4:	6938      	ldr	r0, [r7, #16]
 80059f6:	f7ff ff17 	bl	8005828 <move_window>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d167      	bne.n	8005ad0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	1c5a      	adds	r2, r3, #1
 8005a04:	60fa      	str	r2, [r7, #12]
 8005a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4413      	add	r3, r2
 8005a0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a12:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	6a1a      	ldr	r2, [r3, #32]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	0a5b      	lsrs	r3, r3, #9
 8005a1c:	4413      	add	r3, r2
 8005a1e:	4619      	mov	r1, r3
 8005a20:	6938      	ldr	r0, [r7, #16]
 8005a22:	f7ff ff01 	bl	8005828 <move_window>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d153      	bne.n	8005ad4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a32:	693a      	ldr	r2, [r7, #16]
 8005a34:	4413      	add	r3, r2
 8005a36:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a3a:	021b      	lsls	r3, r3, #8
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <get_fat+0xb6>
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	091b      	lsrs	r3, r3, #4
 8005a52:	e002      	b.n	8005a5a <get_fat+0xbc>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a5a:	617b      	str	r3, [r7, #20]
			break;
 8005a5c:	e03f      	b.n	8005ade <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	6a1a      	ldr	r2, [r3, #32]
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	0a1b      	lsrs	r3, r3, #8
 8005a66:	4413      	add	r3, r2
 8005a68:	4619      	mov	r1, r3
 8005a6a:	6938      	ldr	r0, [r7, #16]
 8005a6c:	f7ff fedc 	bl	8005828 <move_window>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d130      	bne.n	8005ad8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	005b      	lsls	r3, r3, #1
 8005a80:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005a84:	4413      	add	r3, r2
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7ff fc1e 	bl	80052c8 <ld_word>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	617b      	str	r3, [r7, #20]
			break;
 8005a90:	e025      	b.n	8005ade <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	6a1a      	ldr	r2, [r3, #32]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	09db      	lsrs	r3, r3, #7
 8005a9a:	4413      	add	r3, r2
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6938      	ldr	r0, [r7, #16]
 8005aa0:	f7ff fec2 	bl	8005828 <move_window>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d118      	bne.n	8005adc <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005ab8:	4413      	add	r3, r2
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7ff fc1c 	bl	80052f8 <ld_dword>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ac6:	617b      	str	r3, [r7, #20]
			break;
 8005ac8:	e009      	b.n	8005ade <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005aca:	2301      	movs	r3, #1
 8005acc:	617b      	str	r3, [r7, #20]
 8005ace:	e006      	b.n	8005ade <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ad0:	bf00      	nop
 8005ad2:	e004      	b.n	8005ade <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005ad4:	bf00      	nop
 8005ad6:	e002      	b.n	8005ade <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005ad8:	bf00      	nop
 8005ada:	e000      	b.n	8005ade <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005adc:	bf00      	nop
		}
	}

	return val;
 8005ade:	697b      	ldr	r3, [r7, #20]
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3718      	adds	r7, #24
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005ae8:	b590      	push	{r4, r7, lr}
 8005aea:	b089      	sub	sp, #36	; 0x24
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005af4:	2302      	movs	r3, #2
 8005af6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	f240 80d6 	bls.w	8005cac <put_fat+0x1c4>
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	695b      	ldr	r3, [r3, #20]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	f080 80d0 	bcs.w	8005cac <put_fat+0x1c4>
		switch (fs->fs_type) {
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d073      	beq.n	8005bfc <put_fat+0x114>
 8005b14:	2b03      	cmp	r3, #3
 8005b16:	f000 8091 	beq.w	8005c3c <put_fat+0x154>
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	f040 80c6 	bne.w	8005cac <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	61bb      	str	r3, [r7, #24]
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	085b      	lsrs	r3, r3, #1
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	4413      	add	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	6a1a      	ldr	r2, [r3, #32]
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	0a5b      	lsrs	r3, r3, #9
 8005b36:	4413      	add	r3, r2
 8005b38:	4619      	mov	r1, r3
 8005b3a:	68f8      	ldr	r0, [r7, #12]
 8005b3c:	f7ff fe74 	bl	8005828 <move_window>
 8005b40:	4603      	mov	r3, r0
 8005b42:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b44:	7ffb      	ldrb	r3, [r7, #31]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	f040 80a9 	bne.w	8005c9e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005b52:	69bb      	ldr	r3, [r7, #24]
 8005b54:	1c59      	adds	r1, r3, #1
 8005b56:	61b9      	str	r1, [r7, #24]
 8005b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b5c:	4413      	add	r3, r2
 8005b5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d00d      	beq.n	8005b86 <put_fat+0x9e>
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	b25b      	sxtb	r3, r3
 8005b70:	f003 030f 	and.w	r3, r3, #15
 8005b74:	b25a      	sxtb	r2, r3
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	b25b      	sxtb	r3, r3
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	b25b      	sxtb	r3, r3
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	e001      	b.n	8005b8a <put_fat+0xa2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6a1a      	ldr	r2, [r3, #32]
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	0a5b      	lsrs	r3, r3, #9
 8005b9c:	4413      	add	r3, r2
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff fe41 	bl	8005828 <move_window>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005baa:	7ffb      	ldrb	r3, [r7, #31]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d178      	bne.n	8005ca2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bbc:	4413      	add	r3, r2
 8005bbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <put_fat+0xea>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	e00e      	b.n	8005bf0 <put_fat+0x108>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	b25b      	sxtb	r3, r3
 8005bd8:	f023 030f 	bic.w	r3, r3, #15
 8005bdc:	b25a      	sxtb	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	0a1b      	lsrs	r3, r3, #8
 8005be2:	b25b      	sxtb	r3, r3
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	b25b      	sxtb	r3, r3
 8005bea:	4313      	orrs	r3, r2
 8005bec:	b25b      	sxtb	r3, r3
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	70da      	strb	r2, [r3, #3]
			break;
 8005bfa:	e057      	b.n	8005cac <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6a1a      	ldr	r2, [r3, #32]
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	0a1b      	lsrs	r3, r3, #8
 8005c04:	4413      	add	r3, r2
 8005c06:	4619      	mov	r1, r3
 8005c08:	68f8      	ldr	r0, [r7, #12]
 8005c0a:	f7ff fe0d 	bl	8005828 <move_window>
 8005c0e:	4603      	mov	r3, r0
 8005c10:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c12:	7ffb      	ldrb	r3, [r7, #31]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d146      	bne.n	8005ca6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c1e:	68bb      	ldr	r3, [r7, #8]
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8005c26:	4413      	add	r3, r2
 8005c28:	687a      	ldr	r2, [r7, #4]
 8005c2a:	b292      	uxth	r2, r2
 8005c2c:	4611      	mov	r1, r2
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7ff fb85 	bl	800533e <st_word>
			fs->wflag = 1;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	70da      	strb	r2, [r3, #3]
			break;
 8005c3a:	e037      	b.n	8005cac <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6a1a      	ldr	r2, [r3, #32]
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	09db      	lsrs	r3, r3, #7
 8005c44:	4413      	add	r3, r2
 8005c46:	4619      	mov	r1, r3
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f7ff fded 	bl	8005828 <move_window>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c52:	7ffb      	ldrb	r3, [r7, #31]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d128      	bne.n	8005caa <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005c6c:	4413      	add	r3, r2
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff fb42 	bl	80052f8 <ld_dword>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005c7a:	4323      	orrs	r3, r4
 8005c7c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	009b      	lsls	r3, r3, #2
 8005c88:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8005c8c:	4413      	add	r3, r2
 8005c8e:	6879      	ldr	r1, [r7, #4]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7ff fb6f 	bl	8005374 <st_dword>
			fs->wflag = 1;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	70da      	strb	r2, [r3, #3]
			break;
 8005c9c:	e006      	b.n	8005cac <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005c9e:	bf00      	nop
 8005ca0:	e004      	b.n	8005cac <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005ca2:	bf00      	nop
 8005ca4:	e002      	b.n	8005cac <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005ca6:	bf00      	nop
 8005ca8:	e000      	b.n	8005cac <put_fat+0x1c4>
			if (res != FR_OK) break;
 8005caa:	bf00      	nop
		}
	}
	return res;
 8005cac:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3724      	adds	r7, #36	; 0x24
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd90      	pop	{r4, r7, pc}

08005cb6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b088      	sub	sp, #32
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	60f8      	str	r0, [r7, #12]
 8005cbe:	60b9      	str	r1, [r7, #8]
 8005cc0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d904      	bls.n	8005cdc <remove_chain+0x26>
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d301      	bcc.n	8005ce0 <remove_chain+0x2a>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e04b      	b.n	8005d78 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d00c      	beq.n	8005d00 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005ce6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cea:	6879      	ldr	r1, [r7, #4]
 8005cec:	69b8      	ldr	r0, [r7, #24]
 8005cee:	f7ff fefb 	bl	8005ae8 <put_fat>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8005cf6:	7ffb      	ldrb	r3, [r7, #31]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d001      	beq.n	8005d00 <remove_chain+0x4a>
 8005cfc:	7ffb      	ldrb	r3, [r7, #31]
 8005cfe:	e03b      	b.n	8005d78 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8005d00:	68b9      	ldr	r1, [r7, #8]
 8005d02:	68f8      	ldr	r0, [r7, #12]
 8005d04:	f7ff fe4b 	bl	800599e <get_fat>
 8005d08:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d031      	beq.n	8005d74 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8005d10:	697b      	ldr	r3, [r7, #20]
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <remove_chain+0x64>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e02e      	b.n	8005d78 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d20:	d101      	bne.n	8005d26 <remove_chain+0x70>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e028      	b.n	8005d78 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8005d26:	2200      	movs	r2, #0
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	69b8      	ldr	r0, [r7, #24]
 8005d2c:	f7ff fedc 	bl	8005ae8 <put_fat>
 8005d30:	4603      	mov	r3, r0
 8005d32:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8005d34:	7ffb      	ldrb	r3, [r7, #31]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d001      	beq.n	8005d3e <remove_chain+0x88>
 8005d3a:	7ffb      	ldrb	r3, [r7, #31]
 8005d3c:	e01c      	b.n	8005d78 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	691a      	ldr	r2, [r3, #16]
 8005d42:	69bb      	ldr	r3, [r7, #24]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	3b02      	subs	r3, #2
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d20b      	bcs.n	8005d64 <remove_chain+0xae>
			fs->free_clst++;
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	69bb      	ldr	r3, [r7, #24]
 8005d54:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	791b      	ldrb	r3, [r3, #4]
 8005d5a:	f043 0301 	orr.w	r3, r3, #1
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	695b      	ldr	r3, [r3, #20]
 8005d6c:	68ba      	ldr	r2, [r7, #8]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d3c6      	bcc.n	8005d00 <remove_chain+0x4a>
 8005d72:	e000      	b.n	8005d76 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8005d74:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8005d76:	2300      	movs	r3, #0
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3720      	adds	r7, #32
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}

08005d80 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b088      	sub	sp, #32
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10d      	bne.n	8005db2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d004      	beq.n	8005dac <create_chain+0x2c>
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d31b      	bcc.n	8005de4 <create_chain+0x64>
 8005dac:	2301      	movs	r3, #1
 8005dae:	61bb      	str	r3, [r7, #24]
 8005db0:	e018      	b.n	8005de4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8005db2:	6839      	ldr	r1, [r7, #0]
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f7ff fdf2 	bl	800599e <get_fat>
 8005dba:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d801      	bhi.n	8005dc6 <create_chain+0x46>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e070      	b.n	8005ea8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d101      	bne.n	8005dd2 <create_chain+0x52>
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	e06a      	b.n	8005ea8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8005dd2:	693b      	ldr	r3, [r7, #16]
 8005dd4:	695b      	ldr	r3, [r3, #20]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d201      	bcs.n	8005de0 <create_chain+0x60>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	e063      	b.n	8005ea8 <create_chain+0x128>
		scl = clst;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8005de4:	69bb      	ldr	r3, [r7, #24]
 8005de6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	3301      	adds	r3, #1
 8005dec:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	695b      	ldr	r3, [r3, #20]
 8005df2:	69fa      	ldr	r2, [r7, #28]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d307      	bcc.n	8005e08 <create_chain+0x88>
				ncl = 2;
 8005df8:	2302      	movs	r3, #2
 8005dfa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8005dfc:	69fa      	ldr	r2, [r7, #28]
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d901      	bls.n	8005e08 <create_chain+0x88>
 8005e04:	2300      	movs	r3, #0
 8005e06:	e04f      	b.n	8005ea8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8005e08:	69f9      	ldr	r1, [r7, #28]
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7ff fdc7 	bl	800599e <get_fat>
 8005e10:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d00e      	beq.n	8005e36 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d003      	beq.n	8005e26 <create_chain+0xa6>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e24:	d101      	bne.n	8005e2a <create_chain+0xaa>
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	e03e      	b.n	8005ea8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	429a      	cmp	r2, r3
 8005e30:	d1da      	bne.n	8005de8 <create_chain+0x68>
 8005e32:	2300      	movs	r3, #0
 8005e34:	e038      	b.n	8005ea8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8005e36:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8005e38:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3c:	69f9      	ldr	r1, [r7, #28]
 8005e3e:	6938      	ldr	r0, [r7, #16]
 8005e40:	f7ff fe52 	bl	8005ae8 <put_fat>
 8005e44:	4603      	mov	r3, r0
 8005e46:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8005e48:	7dfb      	ldrb	r3, [r7, #23]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d109      	bne.n	8005e62 <create_chain+0xe2>
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d006      	beq.n	8005e62 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8005e54:	69fa      	ldr	r2, [r7, #28]
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6938      	ldr	r0, [r7, #16]
 8005e5a:	f7ff fe45 	bl	8005ae8 <put_fat>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d116      	bne.n	8005e96 <create_chain+0x116>
		fs->last_clst = ncl;
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	69fa      	ldr	r2, [r7, #28]
 8005e6c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	691a      	ldr	r2, [r3, #16]
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	3b02      	subs	r3, #2
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d804      	bhi.n	8005e86 <create_chain+0x106>
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	1e5a      	subs	r2, r3, #1
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	791b      	ldrb	r3, [r3, #4]
 8005e8a:	f043 0301 	orr.w	r3, r3, #1
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	711a      	strb	r2, [r3, #4]
 8005e94:	e007      	b.n	8005ea6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8005e96:	7dfb      	ldrb	r3, [r7, #23]
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d102      	bne.n	8005ea2 <create_chain+0x122>
 8005e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005ea0:	e000      	b.n	8005ea4 <create_chain+0x124>
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8005ea6:	69fb      	ldr	r3, [r7, #28]
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3720      	adds	r7, #32
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b087      	sub	sp, #28
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec4:	3304      	adds	r3, #4
 8005ec6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	0a5b      	lsrs	r3, r3, #9
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	8952      	ldrh	r2, [r2, #10]
 8005ed0:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	1d1a      	adds	r2, r3, #4
 8005eda:	613a      	str	r2, [r7, #16]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <clmt_clust+0x3a>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e010      	b.n	8005f0c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d307      	bcc.n	8005f02 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	1ad3      	subs	r3, r2, r3
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	3304      	adds	r3, #4
 8005efe:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8005f00:	e7e9      	b.n	8005ed6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8005f02:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	4413      	add	r3, r2
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	371c      	adds	r7, #28
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b086      	sub	sp, #24
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005f2e:	d204      	bcs.n	8005f3a <dir_sdi+0x22>
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	f003 031f 	and.w	r3, r3, #31
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <dir_sdi+0x26>
		return FR_INT_ERR;
 8005f3a:	2302      	movs	r3, #2
 8005f3c:	e063      	b.n	8006006 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d106      	bne.n	8005f5e <dir_sdi+0x46>
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d902      	bls.n	8005f5e <dir_sdi+0x46>
		clst = fs->dirbase;
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d10c      	bne.n	8005f7e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	095b      	lsrs	r3, r3, #5
 8005f68:	693a      	ldr	r2, [r7, #16]
 8005f6a:	8912      	ldrh	r2, [r2, #8]
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d301      	bcc.n	8005f74 <dir_sdi+0x5c>
 8005f70:	2302      	movs	r3, #2
 8005f72:	e048      	b.n	8006006 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8005f74:	693b      	ldr	r3, [r7, #16]
 8005f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	61da      	str	r2, [r3, #28]
 8005f7c:	e029      	b.n	8005fd2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	895b      	ldrh	r3, [r3, #10]
 8005f82:	025b      	lsls	r3, r3, #9
 8005f84:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005f86:	e019      	b.n	8005fbc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6979      	ldr	r1, [r7, #20]
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7ff fd06 	bl	800599e <get_fat>
 8005f92:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9a:	d101      	bne.n	8005fa0 <dir_sdi+0x88>
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e032      	b.n	8006006 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d904      	bls.n	8005fb0 <dir_sdi+0x98>
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	695b      	ldr	r3, [r3, #20]
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d301      	bcc.n	8005fb4 <dir_sdi+0x9c>
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	e028      	b.n	8006006 <dir_sdi+0xee>
			ofs -= csz;
 8005fb4:	683a      	ldr	r2, [r7, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	1ad3      	subs	r3, r2, r3
 8005fba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8005fbc:	683a      	ldr	r2, [r7, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d2e1      	bcs.n	8005f88 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8005fc4:	6979      	ldr	r1, [r7, #20]
 8005fc6:	6938      	ldr	r0, [r7, #16]
 8005fc8:	f7ff fcca 	bl	8005960 <clust2sect>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <dir_sdi+0xcc>
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	e010      	b.n	8006006 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69da      	ldr	r2, [r3, #28]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	0a5b      	lsrs	r3, r3, #9
 8005fec:	441a      	add	r2, r3
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ffe:	441a      	add	r2, r3
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006004:	2300      	movs	r3, #0
}
 8006006:	4618      	mov	r0, r3
 8006008:	3718      	adds	r7, #24
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b086      	sub	sp, #24
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	3320      	adds	r3, #32
 8006024:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <dir_next+0x28>
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006034:	d301      	bcc.n	800603a <dir_next+0x2c>
 8006036:	2304      	movs	r3, #4
 8006038:	e0aa      	b.n	8006190 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006040:	2b00      	cmp	r3, #0
 8006042:	f040 8098 	bne.w	8006176 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	699b      	ldr	r3, [r3, #24]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10b      	bne.n	8006070 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	8912      	ldrh	r2, [r2, #8]
 8006060:	4293      	cmp	r3, r2
 8006062:	f0c0 8088 	bcc.w	8006176 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	61da      	str	r2, [r3, #28]
 800606c:	2304      	movs	r3, #4
 800606e:	e08f      	b.n	8006190 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	0a5b      	lsrs	r3, r3, #9
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	8952      	ldrh	r2, [r2, #10]
 8006078:	3a01      	subs	r2, #1
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	d17a      	bne.n	8006176 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	699b      	ldr	r3, [r3, #24]
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f7ff fc88 	bl	800599e <get_fat>
 800608e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d801      	bhi.n	800609a <dir_next+0x8c>
 8006096:	2302      	movs	r3, #2
 8006098:	e07a      	b.n	8006190 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	d101      	bne.n	80060a6 <dir_next+0x98>
 80060a2:	2301      	movs	r3, #1
 80060a4:	e074      	b.n	8006190 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d358      	bcc.n	8006162 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d104      	bne.n	80060c0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	61da      	str	r2, [r3, #28]
 80060bc:	2304      	movs	r3, #4
 80060be:	e067      	b.n	8006190 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	4619      	mov	r1, r3
 80060c8:	4610      	mov	r0, r2
 80060ca:	f7ff fe59 	bl	8005d80 <create_chain>
 80060ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d101      	bne.n	80060da <dir_next+0xcc>
 80060d6:	2307      	movs	r3, #7
 80060d8:	e05a      	b.n	8006190 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b01      	cmp	r3, #1
 80060de:	d101      	bne.n	80060e4 <dir_next+0xd6>
 80060e0:	2302      	movs	r3, #2
 80060e2:	e055      	b.n	8006190 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ea:	d101      	bne.n	80060f0 <dir_next+0xe2>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e04f      	b.n	8006190 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f7ff fb55 	bl	80057a0 <sync_window>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <dir_next+0xf2>
 80060fc:	2301      	movs	r3, #1
 80060fe:	e047      	b.n	8006190 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3330      	adds	r3, #48	; 0x30
 8006104:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006108:	2100      	movs	r1, #0
 800610a:	4618      	mov	r0, r3
 800610c:	f7ff f97f 	bl	800540e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006110:	2300      	movs	r3, #0
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	6979      	ldr	r1, [r7, #20]
 8006116:	68f8      	ldr	r0, [r7, #12]
 8006118:	f7ff fc22 	bl	8005960 <clust2sect>
 800611c:	4602      	mov	r2, r0
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	62da      	str	r2, [r3, #44]	; 0x2c
 8006122:	e012      	b.n	800614a <dir_next+0x13c>
						fs->wflag = 1;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	2201      	movs	r2, #1
 8006128:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f7ff fb38 	bl	80057a0 <sync_window>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d001      	beq.n	800613a <dir_next+0x12c>
 8006136:	2301      	movs	r3, #1
 8006138:	e02a      	b.n	8006190 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	3301      	adds	r3, #1
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006144:	1c5a      	adds	r2, r3, #1
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	62da      	str	r2, [r3, #44]	; 0x2c
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	895b      	ldrh	r3, [r3, #10]
 800614e:	461a      	mov	r2, r3
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	4293      	cmp	r3, r2
 8006154:	d3e6      	bcc.n	8006124 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad2      	subs	r2, r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	697a      	ldr	r2, [r7, #20]
 8006166:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006168:	6979      	ldr	r1, [r7, #20]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff fbf8 	bl	8005960 <clust2sect>
 8006170:	4602      	mov	r2, r0
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006188:	441a      	add	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800618e:	2300      	movs	r3, #0
}
 8006190:	4618      	mov	r0, r3
 8006192:	3718      	adds	r7, #24
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}

08006198 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b086      	sub	sp, #24
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80061a8:	2100      	movs	r1, #0
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f7ff feb4 	bl	8005f18 <dir_sdi>
 80061b0:	4603      	mov	r3, r0
 80061b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80061b4:	7dfb      	ldrb	r3, [r7, #23]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d12b      	bne.n	8006212 <dir_alloc+0x7a>
		n = 0;
 80061ba:	2300      	movs	r3, #0
 80061bc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	69db      	ldr	r3, [r3, #28]
 80061c2:	4619      	mov	r1, r3
 80061c4:	68f8      	ldr	r0, [r7, #12]
 80061c6:	f7ff fb2f 	bl	8005828 <move_window>
 80061ca:	4603      	mov	r3, r0
 80061cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d11d      	bne.n	8006210 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	2be5      	cmp	r3, #229	; 0xe5
 80061dc:	d004      	beq.n	80061e8 <dir_alloc+0x50>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a1b      	ldr	r3, [r3, #32]
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d107      	bne.n	80061f8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	3301      	adds	r3, #1
 80061ec:	613b      	str	r3, [r7, #16]
 80061ee:	693a      	ldr	r2, [r7, #16]
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d102      	bne.n	80061fc <dir_alloc+0x64>
 80061f6:	e00c      	b.n	8006212 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80061f8:	2300      	movs	r3, #0
 80061fa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80061fc:	2101      	movs	r1, #1
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f7ff ff05 	bl	800600e <dir_next>
 8006204:	4603      	mov	r3, r0
 8006206:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006208:	7dfb      	ldrb	r3, [r7, #23]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0d7      	beq.n	80061be <dir_alloc+0x26>
 800620e:	e000      	b.n	8006212 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006210:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006212:	7dfb      	ldrb	r3, [r7, #23]
 8006214:	2b04      	cmp	r3, #4
 8006216:	d101      	bne.n	800621c <dir_alloc+0x84>
 8006218:	2307      	movs	r3, #7
 800621a:	75fb      	strb	r3, [r7, #23]
	return res;
 800621c:	7dfb      	ldrb	r3, [r7, #23]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	6078      	str	r0, [r7, #4]
 800622e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	331a      	adds	r3, #26
 8006234:	4618      	mov	r0, r3
 8006236:	f7ff f847 	bl	80052c8 <ld_word>
 800623a:	4603      	mov	r3, r0
 800623c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b03      	cmp	r3, #3
 8006244:	d109      	bne.n	800625a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	3314      	adds	r3, #20
 800624a:	4618      	mov	r0, r3
 800624c:	f7ff f83c 	bl	80052c8 <ld_word>
 8006250:	4603      	mov	r3, r0
 8006252:	041b      	lsls	r3, r3, #16
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800625a:	68fb      	ldr	r3, [r7, #12]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b084      	sub	sp, #16
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006270:	68bb      	ldr	r3, [r7, #8]
 8006272:	331a      	adds	r3, #26
 8006274:	687a      	ldr	r2, [r7, #4]
 8006276:	b292      	uxth	r2, r2
 8006278:	4611      	mov	r1, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff f85f 	bl	800533e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b03      	cmp	r3, #3
 8006286:	d109      	bne.n	800629c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f103 0214 	add.w	r2, r3, #20
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	0c1b      	lsrs	r3, r3, #16
 8006292:	b29b      	uxth	r3, r3
 8006294:	4619      	mov	r1, r3
 8006296:	4610      	mov	r0, r2
 8006298:	f7ff f851 	bl	800533e <st_word>
	}
}
 800629c:	bf00      	nop
 800629e:	3710      	adds	r7, #16
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b086      	sub	sp, #24
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
 80062ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80062ae:	2304      	movs	r3, #4
 80062b0:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	while (dp->sect) {
 80062b8:	e03c      	b.n	8006334 <dir_read+0x90>
		res = move_window(fs, dp->sect);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	69db      	ldr	r3, [r3, #28]
 80062be:	4619      	mov	r1, r3
 80062c0:	6938      	ldr	r0, [r7, #16]
 80062c2:	f7ff fab1 	bl	8005828 <move_window>
 80062c6:	4603      	mov	r3, r0
 80062c8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d136      	bne.n	800633e <dir_read+0x9a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) {
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d102      	bne.n	80062e4 <dir_read+0x40>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80062de:	2304      	movs	r3, #4
 80062e0:	75fb      	strb	r3, [r7, #23]
 80062e2:	e031      	b.n	8006348 <dir_read+0xa4>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	6a1b      	ldr	r3, [r3, #32]
 80062e8:	330b      	adds	r3, #11
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062f0:	73bb      	strb	r3, [r7, #14]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	7bba      	ldrb	r2, [r7, #14]
 80062f6:	719a      	strb	r2, [r3, #6]
					}
					break;
				}
			}
#else		/* Non LFN configuration */
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	2be5      	cmp	r3, #229	; 0xe5
 80062fc:	d011      	beq.n	8006322 <dir_read+0x7e>
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	2b2e      	cmp	r3, #46	; 0x2e
 8006302:	d00e      	beq.n	8006322 <dir_read+0x7e>
 8006304:	7bbb      	ldrb	r3, [r7, #14]
 8006306:	2b0f      	cmp	r3, #15
 8006308:	d00b      	beq.n	8006322 <dir_read+0x7e>
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	f023 0320 	bic.w	r3, r3, #32
 8006310:	2b08      	cmp	r3, #8
 8006312:	bf0c      	ite	eq
 8006314:	2301      	moveq	r3, #1
 8006316:	2300      	movne	r3, #0
 8006318:	b2db      	uxtb	r3, r3
 800631a:	461a      	mov	r2, r3
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	4293      	cmp	r3, r2
 8006320:	d00f      	beq.n	8006342 <dir_read+0x9e>
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8006322:	2100      	movs	r1, #0
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff fe72 	bl	800600e <dir_next>
 800632a:	4603      	mov	r3, r0
 800632c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800632e:	7dfb      	ldrb	r3, [r7, #23]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d108      	bne.n	8006346 <dir_read+0xa2>
	while (dp->sect) {
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	69db      	ldr	r3, [r3, #28]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1be      	bne.n	80062ba <dir_read+0x16>
 800633c:	e004      	b.n	8006348 <dir_read+0xa4>
		if (res != FR_OK) break;
 800633e:	bf00      	nop
 8006340:	e002      	b.n	8006348 <dir_read+0xa4>
				break;
 8006342:	bf00      	nop
 8006344:	e000      	b.n	8006348 <dir_read+0xa4>
		if (res != FR_OK) break;
 8006346:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8006348:	7dfb      	ldrb	r3, [r7, #23]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <dir_read+0xb0>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2200      	movs	r2, #0
 8006352:	61da      	str	r2, [r3, #28]
	return res;
 8006354:	7dfb      	ldrb	r3, [r7, #23]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800635e:	b580      	push	{r7, lr}
 8006360:	b086      	sub	sp, #24
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800636c:	2100      	movs	r1, #0
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7ff fdd2 	bl	8005f18 <dir_sdi>
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006378:	7dfb      	ldrb	r3, [r7, #23]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d001      	beq.n	8006382 <dir_find+0x24>
 800637e:	7dfb      	ldrb	r3, [r7, #23]
 8006380:	e03e      	b.n	8006400 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	4619      	mov	r1, r3
 8006388:	6938      	ldr	r0, [r7, #16]
 800638a:	f7ff fa4d 	bl	8005828 <move_window>
 800638e:	4603      	mov	r3, r0
 8006390:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006392:	7dfb      	ldrb	r3, [r7, #23]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d12f      	bne.n	80063f8 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a1b      	ldr	r3, [r3, #32]
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d102      	bne.n	80063ac <dir_find+0x4e>
 80063a6:	2304      	movs	r3, #4
 80063a8:	75fb      	strb	r3, [r7, #23]
 80063aa:	e028      	b.n	80063fe <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6a1b      	ldr	r3, [r3, #32]
 80063b0:	330b      	adds	r3, #11
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	330b      	adds	r3, #11
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	f003 0308 	and.w	r3, r3, #8
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d10a      	bne.n	80063e4 <dir_find+0x86>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a18      	ldr	r0, [r3, #32]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3324      	adds	r3, #36	; 0x24
 80063d6:	220b      	movs	r2, #11
 80063d8:	4619      	mov	r1, r3
 80063da:	f7ff f832 	bl	8005442 <mem_cmp>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00b      	beq.n	80063fc <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80063e4:	2100      	movs	r1, #0
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff fe11 	bl	800600e <dir_next>
 80063ec:	4603      	mov	r3, r0
 80063ee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80063f0:	7dfb      	ldrb	r3, [r7, #23]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d0c5      	beq.n	8006382 <dir_find+0x24>
 80063f6:	e002      	b.n	80063fe <dir_find+0xa0>
		if (res != FR_OK) break;
 80063f8:	bf00      	nop
 80063fa:	e000      	b.n	80063fe <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80063fc:	bf00      	nop

	return res;
 80063fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006400:	4618      	mov	r0, r3
 8006402:	3718      	adds	r7, #24
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b084      	sub	sp, #16
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8006416:	2101      	movs	r1, #1
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f7ff febd 	bl	8006198 <dir_alloc>
 800641e:	4603      	mov	r3, r0
 8006420:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006422:	7bfb      	ldrb	r3, [r7, #15]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d11c      	bne.n	8006462 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	69db      	ldr	r3, [r3, #28]
 800642c:	4619      	mov	r1, r3
 800642e:	68b8      	ldr	r0, [r7, #8]
 8006430:	f7ff f9fa 	bl	8005828 <move_window>
 8006434:	4603      	mov	r3, r0
 8006436:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006438:	7bfb      	ldrb	r3, [r7, #15]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d111      	bne.n	8006462 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a1b      	ldr	r3, [r3, #32]
 8006442:	2220      	movs	r2, #32
 8006444:	2100      	movs	r1, #0
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe ffe1 	bl	800540e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	6a18      	ldr	r0, [r3, #32]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	3324      	adds	r3, #36	; 0x24
 8006454:	220b      	movs	r2, #11
 8006456:	4619      	mov	r1, r3
 8006458:	f7fe ffb8 	bl	80053cc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800645c:	68bb      	ldr	r3, [r7, #8]
 800645e:	2201      	movs	r2, #1
 8006460:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006462:	7bfb      	ldrb	r3, [r7, #15]
}
 8006464:	4618      	mov	r0, r3
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}

0800646c <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b084      	sub	sp, #16
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}
#else			/* Non LFN configuration */

	res = move_window(fs, dp->sect);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	69db      	ldr	r3, [r3, #28]
 800647e:	4619      	mov	r1, r3
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f7ff f9d1 	bl	8005828 <move_window>
 8006486:	4603      	mov	r3, r0
 8006488:	72fb      	strb	r3, [r7, #11]
	if (res == FR_OK) {
 800648a:	7afb      	ldrb	r3, [r7, #11]
 800648c:	2b00      	cmp	r3, #0
 800648e:	d106      	bne.n	800649e <dir_remove+0x32>
		dp->dir[DIR_Name] = DDEM;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6a1b      	ldr	r3, [r3, #32]
 8006494:	22e5      	movs	r2, #229	; 0xe5
 8006496:	701a      	strb	r2, [r3, #0]
		fs->wflag = 1;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2201      	movs	r2, #1
 800649c:	70da      	strb	r2, [r3, #3]
	}
#endif

	return res;
 800649e:	7afb      	ldrb	r3, [r7, #11]
}
 80064a0:	4618      	mov	r0, r3
 80064a2:	3710      	adds	r7, #16
 80064a4:	46bd      	mov	sp, r7
 80064a6:	bd80      	pop	{r7, pc}

080064a8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b086      	sub	sp, #24
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2200      	movs	r2, #0
 80064b6:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d04e      	beq.n	800655e <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	613b      	str	r3, [r7, #16]
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 80064c8:	e021      	b.n	800650e <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1a      	ldr	r2, [r3, #32]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	1c59      	adds	r1, r3, #1
 80064d2:	6179      	str	r1, [r7, #20]
 80064d4:	4413      	add	r3, r2
 80064d6:	781b      	ldrb	r3, [r3, #0]
 80064d8:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 80064da:	7bfb      	ldrb	r3, [r7, #15]
 80064dc:	2b20      	cmp	r3, #32
 80064de:	d100      	bne.n	80064e2 <get_fileinfo+0x3a>
 80064e0:	e015      	b.n	800650e <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80064e2:	7bfb      	ldrb	r3, [r7, #15]
 80064e4:	2b05      	cmp	r3, #5
 80064e6:	d101      	bne.n	80064ec <get_fileinfo+0x44>
 80064e8:	23e5      	movs	r3, #229	; 0xe5
 80064ea:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b09      	cmp	r3, #9
 80064f0:	d106      	bne.n	8006500 <get_fileinfo+0x58>
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	1c5a      	adds	r2, r3, #1
 80064f6:	613a      	str	r2, [r7, #16]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	4413      	add	r3, r2
 80064fc:	222e      	movs	r2, #46	; 0x2e
 80064fe:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	1c5a      	adds	r2, r3, #1
 8006504:	613a      	str	r2, [r7, #16]
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	4413      	add	r3, r2
 800650a:	7bfa      	ldrb	r2, [r7, #15]
 800650c:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	2b0a      	cmp	r3, #10
 8006512:	d9da      	bls.n	80064ca <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	4413      	add	r3, r2
 800651a:	3309      	adds	r3, #9
 800651c:	2200      	movs	r2, #0
 800651e:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a1b      	ldr	r3, [r3, #32]
 8006524:	7ada      	ldrb	r2, [r3, #11]
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6a1b      	ldr	r3, [r3, #32]
 800652e:	331c      	adds	r3, #28
 8006530:	4618      	mov	r0, r3
 8006532:	f7fe fee1 	bl	80052f8 <ld_dword>
 8006536:	4602      	mov	r2, r0
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a1b      	ldr	r3, [r3, #32]
 8006540:	3316      	adds	r3, #22
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe fed8 	bl	80052f8 <ld_dword>
 8006548:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	b29a      	uxth	r2, r3
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	80da      	strh	r2, [r3, #6]
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	0c1b      	lsrs	r3, r3, #16
 8006556:	b29a      	uxth	r2, r3
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	809a      	strh	r2, [r3, #4]
 800655c:	e000      	b.n	8006560 <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800655e:	bf00      	nop
}
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b088      	sub	sp, #32
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	60fb      	str	r3, [r7, #12]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	3324      	adds	r3, #36	; 0x24
 800657c:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800657e:	220b      	movs	r2, #11
 8006580:	2120      	movs	r1, #32
 8006582:	68b8      	ldr	r0, [r7, #8]
 8006584:	f7fe ff43 	bl	800540e <mem_set>
	si = i = 0; ni = 8;
 8006588:	2300      	movs	r3, #0
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	617b      	str	r3, [r7, #20]
 8006590:	2308      	movs	r3, #8
 8006592:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	617a      	str	r2, [r7, #20]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	4413      	add	r3, r2
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80065a2:	7ffb      	ldrb	r3, [r7, #31]
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	d94e      	bls.n	8006646 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80065a8:	7ffb      	ldrb	r3, [r7, #31]
 80065aa:	2b2f      	cmp	r3, #47	; 0x2f
 80065ac:	d006      	beq.n	80065bc <create_name+0x54>
 80065ae:	7ffb      	ldrb	r3, [r7, #31]
 80065b0:	2b5c      	cmp	r3, #92	; 0x5c
 80065b2:	d110      	bne.n	80065d6 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80065b4:	e002      	b.n	80065bc <create_name+0x54>
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	3301      	adds	r3, #1
 80065ba:	617b      	str	r3, [r7, #20]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	4413      	add	r3, r2
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b2f      	cmp	r3, #47	; 0x2f
 80065c6:	d0f6      	beq.n	80065b6 <create_name+0x4e>
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	4413      	add	r3, r2
 80065ce:	781b      	ldrb	r3, [r3, #0]
 80065d0:	2b5c      	cmp	r3, #92	; 0x5c
 80065d2:	d0f0      	beq.n	80065b6 <create_name+0x4e>
			break;
 80065d4:	e038      	b.n	8006648 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80065d6:	7ffb      	ldrb	r3, [r7, #31]
 80065d8:	2b2e      	cmp	r3, #46	; 0x2e
 80065da:	d003      	beq.n	80065e4 <create_name+0x7c>
 80065dc:	693a      	ldr	r2, [r7, #16]
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d30c      	bcc.n	80065fe <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	2b0b      	cmp	r3, #11
 80065e8:	d002      	beq.n	80065f0 <create_name+0x88>
 80065ea:	7ffb      	ldrb	r3, [r7, #31]
 80065ec:	2b2e      	cmp	r3, #46	; 0x2e
 80065ee:	d001      	beq.n	80065f4 <create_name+0x8c>
 80065f0:	2306      	movs	r3, #6
 80065f2:	e044      	b.n	800667e <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80065f4:	2308      	movs	r3, #8
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	230b      	movs	r3, #11
 80065fa:	61bb      	str	r3, [r7, #24]
			continue;
 80065fc:	e022      	b.n	8006644 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80065fe:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006602:	2b00      	cmp	r3, #0
 8006604:	da04      	bge.n	8006610 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006606:	7ffb      	ldrb	r3, [r7, #31]
 8006608:	3b80      	subs	r3, #128	; 0x80
 800660a:	4a1f      	ldr	r2, [pc, #124]	; (8006688 <create_name+0x120>)
 800660c:	5cd3      	ldrb	r3, [r2, r3]
 800660e:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8006610:	7ffb      	ldrb	r3, [r7, #31]
 8006612:	4619      	mov	r1, r3
 8006614:	481d      	ldr	r0, [pc, #116]	; (800668c <create_name+0x124>)
 8006616:	f7fe ff3b 	bl	8005490 <chk_chr>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d001      	beq.n	8006624 <create_name+0xbc>
 8006620:	2306      	movs	r3, #6
 8006622:	e02c      	b.n	800667e <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8006624:	7ffb      	ldrb	r3, [r7, #31]
 8006626:	2b60      	cmp	r3, #96	; 0x60
 8006628:	d905      	bls.n	8006636 <create_name+0xce>
 800662a:	7ffb      	ldrb	r3, [r7, #31]
 800662c:	2b7a      	cmp	r3, #122	; 0x7a
 800662e:	d802      	bhi.n	8006636 <create_name+0xce>
 8006630:	7ffb      	ldrb	r3, [r7, #31]
 8006632:	3b20      	subs	r3, #32
 8006634:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	1c5a      	adds	r2, r3, #1
 800663a:	613a      	str	r2, [r7, #16]
 800663c:	68ba      	ldr	r2, [r7, #8]
 800663e:	4413      	add	r3, r2
 8006640:	7ffa      	ldrb	r2, [r7, #31]
 8006642:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8006644:	e7a6      	b.n	8006594 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8006646:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	441a      	add	r2, r3
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d101      	bne.n	800665c <create_name+0xf4>
 8006658:	2306      	movs	r3, #6
 800665a:	e010      	b.n	800667e <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2be5      	cmp	r3, #229	; 0xe5
 8006662:	d102      	bne.n	800666a <create_name+0x102>
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2205      	movs	r2, #5
 8006668:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800666a:	7ffb      	ldrb	r3, [r7, #31]
 800666c:	2b20      	cmp	r3, #32
 800666e:	d801      	bhi.n	8006674 <create_name+0x10c>
 8006670:	2204      	movs	r2, #4
 8006672:	e000      	b.n	8006676 <create_name+0x10e>
 8006674:	2200      	movs	r2, #0
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	330b      	adds	r3, #11
 800667a:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800667c:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800667e:	4618      	mov	r0, r3
 8006680:	3720      	adds	r7, #32
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	08008794 	.word	0x08008794
 800668c:	08008724 	.word	0x08008724

08006690 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b086      	sub	sp, #24
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80066a4:	e002      	b.n	80066ac <follow_path+0x1c>
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	3301      	adds	r3, #1
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	2b2f      	cmp	r3, #47	; 0x2f
 80066b2:	d0f8      	beq.n	80066a6 <follow_path+0x16>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b5c      	cmp	r3, #92	; 0x5c
 80066ba:	d0f4      	beq.n	80066a6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	2200      	movs	r2, #0
 80066c0:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	781b      	ldrb	r3, [r3, #0]
 80066c6:	2b1f      	cmp	r3, #31
 80066c8:	d80a      	bhi.n	80066e0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2280      	movs	r2, #128	; 0x80
 80066ce:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80066d2:	2100      	movs	r1, #0
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f7ff fc1f 	bl	8005f18 <dir_sdi>
 80066da:	4603      	mov	r3, r0
 80066dc:	75fb      	strb	r3, [r7, #23]
 80066de:	e043      	b.n	8006768 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80066e0:	463b      	mov	r3, r7
 80066e2:	4619      	mov	r1, r3
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f7ff ff3f 	bl	8006568 <create_name>
 80066ea:	4603      	mov	r3, r0
 80066ec:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80066ee:	7dfb      	ldrb	r3, [r7, #23]
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d134      	bne.n	800675e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f7ff fe32 	bl	800635e <dir_find>
 80066fa:	4603      	mov	r3, r0
 80066fc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006704:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8006706:	7dfb      	ldrb	r3, [r7, #23]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d00a      	beq.n	8006722 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800670c:	7dfb      	ldrb	r3, [r7, #23]
 800670e:	2b04      	cmp	r3, #4
 8006710:	d127      	bne.n	8006762 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006712:	7afb      	ldrb	r3, [r7, #11]
 8006714:	f003 0304 	and.w	r3, r3, #4
 8006718:	2b00      	cmp	r3, #0
 800671a:	d122      	bne.n	8006762 <follow_path+0xd2>
 800671c:	2305      	movs	r3, #5
 800671e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8006720:	e01f      	b.n	8006762 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006722:	7afb      	ldrb	r3, [r7, #11]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d11c      	bne.n	8006766 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	799b      	ldrb	r3, [r3, #6]
 8006730:	f003 0310 	and.w	r3, r3, #16
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8006738:	2305      	movs	r3, #5
 800673a:	75fb      	strb	r3, [r7, #23]
 800673c:	e014      	b.n	8006768 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	695b      	ldr	r3, [r3, #20]
 8006748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800674c:	4413      	add	r3, r2
 800674e:	4619      	mov	r1, r3
 8006750:	68f8      	ldr	r0, [r7, #12]
 8006752:	f7ff fd68 	bl	8006226 <ld_clust>
 8006756:	4602      	mov	r2, r0
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800675c:	e7c0      	b.n	80066e0 <follow_path+0x50>
			if (res != FR_OK) break;
 800675e:	bf00      	nop
 8006760:	e002      	b.n	8006768 <follow_path+0xd8>
				break;
 8006762:	bf00      	nop
 8006764:	e000      	b.n	8006768 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006766:	bf00      	nop
			}
		}
	}

	return res;
 8006768:	7dfb      	ldrb	r3, [r7, #23]
}
 800676a:	4618      	mov	r0, r3
 800676c:	3718      	adds	r7, #24
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}

08006772 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006772:	b480      	push	{r7}
 8006774:	b087      	sub	sp, #28
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800677a:	f04f 33ff 	mov.w	r3, #4294967295
 800677e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d031      	beq.n	80067ec <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e002      	b.n	8006796 <get_ldnumber+0x24>
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	3301      	adds	r3, #1
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b20      	cmp	r3, #32
 800679c:	d903      	bls.n	80067a6 <get_ldnumber+0x34>
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b3a      	cmp	r3, #58	; 0x3a
 80067a4:	d1f4      	bne.n	8006790 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b3a      	cmp	r3, #58	; 0x3a
 80067ac:	d11c      	bne.n	80067e8 <get_ldnumber+0x76>
			tp = *path;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	60fa      	str	r2, [r7, #12]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	3b30      	subs	r3, #48	; 0x30
 80067be:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b09      	cmp	r3, #9
 80067c4:	d80e      	bhi.n	80067e4 <get_ldnumber+0x72>
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	697b      	ldr	r3, [r7, #20]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d10a      	bne.n	80067e4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d107      	bne.n	80067e4 <get_ldnumber+0x72>
					vol = (int)i;
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	3301      	adds	r3, #1
 80067dc:	617b      	str	r3, [r7, #20]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	697a      	ldr	r2, [r7, #20]
 80067e2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	e002      	b.n	80067ee <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80067e8:	2300      	movs	r3, #0
 80067ea:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80067ec:	693b      	ldr	r3, [r7, #16]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	371c      	adds	r7, #28
 80067f2:	46bd      	mov	sp, r7
 80067f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f8:	4770      	bx	lr
	...

080067fc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	70da      	strb	r2, [r3, #3]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f04f 32ff 	mov.w	r2, #4294967295
 8006812:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff f806 	bl	8005828 <move_window>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <check_fs+0x2a>
 8006822:	2304      	movs	r3, #4
 8006824:	e038      	b.n	8006898 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3330      	adds	r3, #48	; 0x30
 800682a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800682e:	4618      	mov	r0, r3
 8006830:	f7fe fd4a 	bl	80052c8 <ld_word>
 8006834:	4603      	mov	r3, r0
 8006836:	461a      	mov	r2, r3
 8006838:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800683c:	429a      	cmp	r2, r3
 800683e:	d001      	beq.n	8006844 <check_fs+0x48>
 8006840:	2303      	movs	r3, #3
 8006842:	e029      	b.n	8006898 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800684a:	2be9      	cmp	r3, #233	; 0xe9
 800684c:	d009      	beq.n	8006862 <check_fs+0x66>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006854:	2beb      	cmp	r3, #235	; 0xeb
 8006856:	d11e      	bne.n	8006896 <check_fs+0x9a>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800685e:	2b90      	cmp	r3, #144	; 0x90
 8006860:	d119      	bne.n	8006896 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	3330      	adds	r3, #48	; 0x30
 8006866:	3336      	adds	r3, #54	; 0x36
 8006868:	4618      	mov	r0, r3
 800686a:	f7fe fd45 	bl	80052f8 <ld_dword>
 800686e:	4603      	mov	r3, r0
 8006870:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006874:	4a0a      	ldr	r2, [pc, #40]	; (80068a0 <check_fs+0xa4>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d101      	bne.n	800687e <check_fs+0x82>
 800687a:	2300      	movs	r3, #0
 800687c:	e00c      	b.n	8006898 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	3330      	adds	r3, #48	; 0x30
 8006882:	3352      	adds	r3, #82	; 0x52
 8006884:	4618      	mov	r0, r3
 8006886:	f7fe fd37 	bl	80052f8 <ld_dword>
 800688a:	4602      	mov	r2, r0
 800688c:	4b05      	ldr	r3, [pc, #20]	; (80068a4 <check_fs+0xa8>)
 800688e:	429a      	cmp	r2, r3
 8006890:	d101      	bne.n	8006896 <check_fs+0x9a>
 8006892:	2300      	movs	r3, #0
 8006894:	e000      	b.n	8006898 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8006896:	2302      	movs	r3, #2
}
 8006898:	4618      	mov	r0, r3
 800689a:	3708      	adds	r7, #8
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	00544146 	.word	0x00544146
 80068a4:	33544146 	.word	0x33544146

080068a8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b096      	sub	sp, #88	; 0x58
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	4613      	mov	r3, r2
 80068b4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	2200      	movs	r2, #0
 80068ba:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80068bc:	68f8      	ldr	r0, [r7, #12]
 80068be:	f7ff ff58 	bl	8006772 <get_ldnumber>
 80068c2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80068c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da01      	bge.n	80068ce <find_volume+0x26>
 80068ca:	230b      	movs	r3, #11
 80068cc:	e22e      	b.n	8006d2c <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80068ce:	4aa8      	ldr	r2, [pc, #672]	; (8006b70 <find_volume+0x2c8>)
 80068d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80068d6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d101      	bne.n	80068e2 <find_volume+0x3a>
 80068de:	230c      	movs	r3, #12
 80068e0:	e224      	b.n	8006d2c <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80068e2:	68bb      	ldr	r3, [r7, #8]
 80068e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80068e6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80068e8:	79fb      	ldrb	r3, [r7, #7]
 80068ea:	f023 0301 	bic.w	r3, r3, #1
 80068ee:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80068f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d01a      	beq.n	800692e <find_volume+0x86>
		stat = disk_status(fs->drv);
 80068f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068fa:	785b      	ldrb	r3, [r3, #1]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f7fe fc45 	bl	800518c <disk_status>
 8006902:	4603      	mov	r3, r0
 8006904:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006908:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10c      	bne.n	800692e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8006914:	79fb      	ldrb	r3, [r7, #7]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d007      	beq.n	800692a <find_volume+0x82>
 800691a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800691e:	f003 0304 	and.w	r3, r3, #4
 8006922:	2b00      	cmp	r3, #0
 8006924:	d001      	beq.n	800692a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8006926:	230a      	movs	r3, #10
 8006928:	e200      	b.n	8006d2c <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 800692a:	2300      	movs	r3, #0
 800692c:	e1fe      	b.n	8006d2c <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800692e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006930:	2200      	movs	r2, #0
 8006932:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006936:	b2da      	uxtb	r2, r3
 8006938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800693c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800693e:	785b      	ldrb	r3, [r3, #1]
 8006940:	4618      	mov	r0, r3
 8006942:	f7fe fc3d 	bl	80051c0 <disk_initialize>
 8006946:	4603      	mov	r3, r0
 8006948:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800694c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006950:	f003 0301 	and.w	r3, r3, #1
 8006954:	2b00      	cmp	r3, #0
 8006956:	d001      	beq.n	800695c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006958:	2303      	movs	r3, #3
 800695a:	e1e7      	b.n	8006d2c <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800695c:	79fb      	ldrb	r3, [r7, #7]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d007      	beq.n	8006972 <find_volume+0xca>
 8006962:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006966:	f003 0304 	and.w	r3, r3, #4
 800696a:	2b00      	cmp	r3, #0
 800696c:	d001      	beq.n	8006972 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800696e:	230a      	movs	r3, #10
 8006970:	e1dc      	b.n	8006d2c <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8006972:	2300      	movs	r3, #0
 8006974:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8006976:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006978:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800697a:	f7ff ff3f 	bl	80067fc <check_fs>
 800697e:	4603      	mov	r3, r0
 8006980:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8006984:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006988:	2b02      	cmp	r3, #2
 800698a:	d14b      	bne.n	8006a24 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800698c:	2300      	movs	r3, #0
 800698e:	643b      	str	r3, [r7, #64]	; 0x40
 8006990:	e01f      	b.n	80069d2 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8006992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006994:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8006998:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800699a:	011b      	lsls	r3, r3, #4
 800699c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80069a0:	4413      	add	r3, r2
 80069a2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80069a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a6:	3304      	adds	r3, #4
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d006      	beq.n	80069bc <find_volume+0x114>
 80069ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069b0:	3308      	adds	r3, #8
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fe fca0 	bl	80052f8 <ld_dword>
 80069b8:	4602      	mov	r2, r0
 80069ba:	e000      	b.n	80069be <find_volume+0x116>
 80069bc:	2200      	movs	r2, #0
 80069be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80069c6:	440b      	add	r3, r1
 80069c8:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80069cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ce:	3301      	adds	r3, #1
 80069d0:	643b      	str	r3, [r7, #64]	; 0x40
 80069d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d9dc      	bls.n	8006992 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80069d8:	2300      	movs	r3, #0
 80069da:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80069dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d002      	beq.n	80069e8 <find_volume+0x140>
 80069e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069e4:	3b01      	subs	r3, #1
 80069e6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80069e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80069f0:	4413      	add	r3, r2
 80069f2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80069f6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80069f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d005      	beq.n	8006a0a <find_volume+0x162>
 80069fe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006a00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006a02:	f7ff fefb 	bl	80067fc <check_fs>
 8006a06:	4603      	mov	r3, r0
 8006a08:	e000      	b.n	8006a0c <find_volume+0x164>
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8006a10:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d905      	bls.n	8006a24 <find_volume+0x17c>
 8006a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	643b      	str	r3, [r7, #64]	; 0x40
 8006a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006a20:	2b03      	cmp	r3, #3
 8006a22:	d9e1      	bls.n	80069e8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006a24:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a28:	2b04      	cmp	r3, #4
 8006a2a:	d101      	bne.n	8006a30 <find_volume+0x188>
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e17d      	b.n	8006d2c <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006a30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d901      	bls.n	8006a3c <find_volume+0x194>
 8006a38:	230d      	movs	r3, #13
 8006a3a:	e177      	b.n	8006d2c <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a3e:	3330      	adds	r3, #48	; 0x30
 8006a40:	330b      	adds	r3, #11
 8006a42:	4618      	mov	r0, r3
 8006a44:	f7fe fc40 	bl	80052c8 <ld_word>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a4e:	d001      	beq.n	8006a54 <find_volume+0x1ac>
 8006a50:	230d      	movs	r3, #13
 8006a52:	e16b      	b.n	8006d2c <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	3330      	adds	r3, #48	; 0x30
 8006a58:	3316      	adds	r3, #22
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe fc34 	bl	80052c8 <ld_word>
 8006a60:	4603      	mov	r3, r0
 8006a62:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d106      	bne.n	8006a78 <find_volume+0x1d0>
 8006a6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a6c:	3330      	adds	r3, #48	; 0x30
 8006a6e:	3324      	adds	r3, #36	; 0x24
 8006a70:	4618      	mov	r0, r3
 8006a72:	f7fe fc41 	bl	80052f8 <ld_dword>
 8006a76:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8006a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a7c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a80:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8006a84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a86:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8006a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8a:	789b      	ldrb	r3, [r3, #2]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d005      	beq.n	8006a9c <find_volume+0x1f4>
 8006a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a92:	789b      	ldrb	r3, [r3, #2]
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d001      	beq.n	8006a9c <find_volume+0x1f4>
 8006a98:	230d      	movs	r3, #13
 8006a9a:	e147      	b.n	8006d2c <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a9e:	789b      	ldrb	r3, [r3, #2]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa4:	fb02 f303 	mul.w	r3, r2, r3
 8006aa8:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8006aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	895b      	ldrh	r3, [r3, #10]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d008      	beq.n	8006ad0 <find_volume+0x228>
 8006abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac0:	895b      	ldrh	r3, [r3, #10]
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ac6:	895b      	ldrh	r3, [r3, #10]
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	4013      	ands	r3, r2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <find_volume+0x22c>
 8006ad0:	230d      	movs	r3, #13
 8006ad2:	e12b      	b.n	8006d2c <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad6:	3330      	adds	r3, #48	; 0x30
 8006ad8:	3311      	adds	r3, #17
 8006ada:	4618      	mov	r0, r3
 8006adc:	f7fe fbf4 	bl	80052c8 <ld_word>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ae6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8006ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aea:	891b      	ldrh	r3, [r3, #8]
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	b29b      	uxth	r3, r3
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d001      	beq.n	8006afa <find_volume+0x252>
 8006af6:	230d      	movs	r3, #13
 8006af8:	e118      	b.n	8006d2c <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8006afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006afc:	3330      	adds	r3, #48	; 0x30
 8006afe:	3313      	adds	r3, #19
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fe fbe1 	bl	80052c8 <ld_word>
 8006b06:	4603      	mov	r3, r0
 8006b08:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8006b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d106      	bne.n	8006b1e <find_volume+0x276>
 8006b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b12:	3330      	adds	r3, #48	; 0x30
 8006b14:	3320      	adds	r3, #32
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7fe fbee 	bl	80052f8 <ld_dword>
 8006b1c:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b20:	3330      	adds	r3, #48	; 0x30
 8006b22:	330e      	adds	r3, #14
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7fe fbcf 	bl	80052c8 <ld_word>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006b2e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d101      	bne.n	8006b38 <find_volume+0x290>
 8006b34:	230d      	movs	r3, #13
 8006b36:	e0f9      	b.n	8006d2c <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8006b38:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006b3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b3c:	4413      	add	r3, r2
 8006b3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b40:	8912      	ldrh	r2, [r2, #8]
 8006b42:	0912      	lsrs	r2, r2, #4
 8006b44:	b292      	uxth	r2, r2
 8006b46:	4413      	add	r3, r2
 8006b48:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d201      	bcs.n	8006b56 <find_volume+0x2ae>
 8006b52:	230d      	movs	r3, #13
 8006b54:	e0ea      	b.n	8006d2c <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006b56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006b5e:	8952      	ldrh	r2, [r2, #10]
 8006b60:	fbb3 f3f2 	udiv	r3, r3, r2
 8006b64:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d103      	bne.n	8006b74 <find_volume+0x2cc>
 8006b6c:	230d      	movs	r3, #13
 8006b6e:	e0dd      	b.n	8006d2c <find_volume+0x484>
 8006b70:	20000094 	.word	0x20000094
		fmt = FS_FAT32;
 8006b74:	2303      	movs	r3, #3
 8006b76:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d802      	bhi.n	8006b8a <find_volume+0x2e2>
 8006b84:	2302      	movs	r3, #2
 8006b86:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d802      	bhi.n	8006b9a <find_volume+0x2f2>
 8006b94:	2301      	movs	r3, #1
 8006b96:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9c:	1c9a      	adds	r2, r3, #2
 8006b9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba0:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8006ba2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ba6:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8006ba8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8006baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006bac:	441a      	add	r2, r3
 8006bae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb0:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8006bb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	441a      	add	r2, r3
 8006bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bba:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8006bbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006bc0:	2b03      	cmp	r3, #3
 8006bc2:	d11e      	bne.n	8006c02 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8006bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc6:	3330      	adds	r3, #48	; 0x30
 8006bc8:	332a      	adds	r3, #42	; 0x2a
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7fe fb7c 	bl	80052c8 <ld_word>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d001      	beq.n	8006bda <find_volume+0x332>
 8006bd6:	230d      	movs	r3, #13
 8006bd8:	e0a8      	b.n	8006d2c <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bdc:	891b      	ldrh	r3, [r3, #8]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <find_volume+0x33e>
 8006be2:	230d      	movs	r3, #13
 8006be4:	e0a2      	b.n	8006d2c <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006be8:	3330      	adds	r3, #48	; 0x30
 8006bea:	332c      	adds	r3, #44	; 0x2c
 8006bec:	4618      	mov	r0, r3
 8006bee:	f7fe fb83 	bl	80052f8 <ld_dword>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf6:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8006c00:	e01f      	b.n	8006c42 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8006c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c04:	891b      	ldrh	r3, [r3, #8]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <find_volume+0x366>
 8006c0a:	230d      	movs	r3, #13
 8006c0c:	e08e      	b.n	8006d2c <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c10:	6a1a      	ldr	r2, [r3, #32]
 8006c12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c14:	441a      	add	r2, r3
 8006c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c18:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006c1a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c1e:	2b02      	cmp	r3, #2
 8006c20:	d103      	bne.n	8006c2a <find_volume+0x382>
 8006c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	e00a      	b.n	8006c40 <find_volume+0x398>
 8006c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c2c:	695a      	ldr	r2, [r3, #20]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	005b      	lsls	r3, r3, #1
 8006c32:	4413      	add	r3, r2
 8006c34:	085a      	lsrs	r2, r3, #1
 8006c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c38:	695b      	ldr	r3, [r3, #20]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006c40:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c44:	699a      	ldr	r2, [r3, #24]
 8006c46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c48:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006c4c:	0a5b      	lsrs	r3, r3, #9
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d201      	bcs.n	8006c56 <find_volume+0x3ae>
 8006c52:	230d      	movs	r3, #13
 8006c54:	e06a      	b.n	8006d2c <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8006c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c58:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5c:	611a      	str	r2, [r3, #16]
 8006c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c60:	691a      	ldr	r2, [r3, #16]
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8006c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c68:	2280      	movs	r2, #128	; 0x80
 8006c6a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006c6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d149      	bne.n	8006d08 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c76:	3330      	adds	r3, #48	; 0x30
 8006c78:	3330      	adds	r3, #48	; 0x30
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fe fb24 	bl	80052c8 <ld_word>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	d140      	bne.n	8006d08 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c88:	3301      	adds	r3, #1
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006c8e:	f7fe fdcb 	bl	8005828 <move_window>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d137      	bne.n	8006d08 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8006c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ca0:	3330      	adds	r3, #48	; 0x30
 8006ca2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fe fb0e 	bl	80052c8 <ld_word>
 8006cac:	4603      	mov	r3, r0
 8006cae:	461a      	mov	r2, r3
 8006cb0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8006cb4:	429a      	cmp	r2, r3
 8006cb6:	d127      	bne.n	8006d08 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8006cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cba:	3330      	adds	r3, #48	; 0x30
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	f7fe fb1b 	bl	80052f8 <ld_dword>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	4b1b      	ldr	r3, [pc, #108]	; (8006d34 <find_volume+0x48c>)
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d11e      	bne.n	8006d08 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8006cca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ccc:	3330      	adds	r3, #48	; 0x30
 8006cce:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7fe fb10 	bl	80052f8 <ld_dword>
 8006cd8:	4602      	mov	r2, r0
 8006cda:	4b17      	ldr	r3, [pc, #92]	; (8006d38 <find_volume+0x490>)
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d113      	bne.n	8006d08 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ce2:	3330      	adds	r3, #48	; 0x30
 8006ce4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fe fb05 	bl	80052f8 <ld_dword>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf2:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cf6:	3330      	adds	r3, #48	; 0x30
 8006cf8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7fe fafb 	bl	80052f8 <ld_dword>
 8006d02:	4602      	mov	r2, r0
 8006d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d06:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8006d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d0a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8006d0e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006d10:	4b0a      	ldr	r3, [pc, #40]	; (8006d3c <find_volume+0x494>)
 8006d12:	881b      	ldrh	r3, [r3, #0]
 8006d14:	3301      	adds	r3, #1
 8006d16:	b29a      	uxth	r2, r3
 8006d18:	4b08      	ldr	r3, [pc, #32]	; (8006d3c <find_volume+0x494>)
 8006d1a:	801a      	strh	r2, [r3, #0]
 8006d1c:	4b07      	ldr	r3, [pc, #28]	; (8006d3c <find_volume+0x494>)
 8006d1e:	881a      	ldrh	r2, [r3, #0]
 8006d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d22:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8006d24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006d26:	f7fe fd17 	bl	8005758 <clear_lock>
#endif
	return FR_OK;
 8006d2a:	2300      	movs	r3, #0
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3758      	adds	r7, #88	; 0x58
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	41615252 	.word	0x41615252
 8006d38:	61417272 	.word	0x61417272
 8006d3c:	20000098 	.word	0x20000098

08006d40 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006d4a:	2309      	movs	r3, #9
 8006d4c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d01c      	beq.n	8006d8e <validate+0x4e>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d018      	beq.n	8006d8e <validate+0x4e>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d013      	beq.n	8006d8e <validate+0x4e>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	889a      	ldrh	r2, [r3, #4]
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	88db      	ldrh	r3, [r3, #6]
 8006d70:	429a      	cmp	r2, r3
 8006d72:	d10c      	bne.n	8006d8e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	785b      	ldrb	r3, [r3, #1]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f7fe fa06 	bl	800518c <disk_status>
 8006d80:	4603      	mov	r3, r0
 8006d82:	f003 0301 	and.w	r3, r3, #1
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <validate+0x4e>
			res = FR_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8006d8e:	7bfb      	ldrb	r3, [r7, #15]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d102      	bne.n	8006d9a <validate+0x5a>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	e000      	b.n	8006d9c <validate+0x5c>
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	6013      	str	r3, [r2, #0]
	return res;
 8006da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}
	...

08006dac <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b088      	sub	sp, #32
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	60f8      	str	r0, [r7, #12]
 8006db4:	60b9      	str	r1, [r7, #8]
 8006db6:	4613      	mov	r3, r2
 8006db8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8006dbe:	f107 0310 	add.w	r3, r7, #16
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f7ff fcd5 	bl	8006772 <get_ldnumber>
 8006dc8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006dca:	69fb      	ldr	r3, [r7, #28]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	da01      	bge.n	8006dd4 <f_mount+0x28>
 8006dd0:	230b      	movs	r3, #11
 8006dd2:	e02b      	b.n	8006e2c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006dd4:	4a17      	ldr	r2, [pc, #92]	; (8006e34 <f_mount+0x88>)
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ddc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d005      	beq.n	8006df0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006de4:	69b8      	ldr	r0, [r7, #24]
 8006de6:	f7fe fcb7 	bl	8005758 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8006dea:	69bb      	ldr	r3, [r7, #24]
 8006dec:	2200      	movs	r2, #0
 8006dee:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8006dfc:	68fa      	ldr	r2, [r7, #12]
 8006dfe:	490d      	ldr	r1, [pc, #52]	; (8006e34 <f_mount+0x88>)
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <f_mount+0x66>
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	2b01      	cmp	r3, #1
 8006e10:	d001      	beq.n	8006e16 <f_mount+0x6a>
 8006e12:	2300      	movs	r3, #0
 8006e14:	e00a      	b.n	8006e2c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006e16:	f107 010c 	add.w	r1, r7, #12
 8006e1a:	f107 0308 	add.w	r3, r7, #8
 8006e1e:	2200      	movs	r2, #0
 8006e20:	4618      	mov	r0, r3
 8006e22:	f7ff fd41 	bl	80068a8 <find_volume>
 8006e26:	4603      	mov	r3, r0
 8006e28:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	3720      	adds	r7, #32
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	20000094 	.word	0x20000094

08006e38 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b098      	sub	sp, #96	; 0x60
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	4613      	mov	r3, r2
 8006e44:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <f_open+0x18>
 8006e4c:	2309      	movs	r3, #9
 8006e4e:	e1ad      	b.n	80071ac <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006e50:	79fb      	ldrb	r3, [r7, #7]
 8006e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e56:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006e58:	79fa      	ldrb	r2, [r7, #7]
 8006e5a:	f107 0110 	add.w	r1, r7, #16
 8006e5e:	f107 0308 	add.w	r3, r7, #8
 8006e62:	4618      	mov	r0, r3
 8006e64:	f7ff fd20 	bl	80068a8 <find_volume>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006e6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	f040 8191 	bne.w	800719a <f_open+0x362>
		dj.obj.fs = fs;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006e7c:	68ba      	ldr	r2, [r7, #8]
 8006e7e:	f107 0314 	add.w	r3, r7, #20
 8006e82:	4611      	mov	r1, r2
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7ff fc03 	bl	8006690 <follow_path>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8006e90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d11a      	bne.n	8006ece <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006e98:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006e9c:	b25b      	sxtb	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	da03      	bge.n	8006eaa <f_open+0x72>
				res = FR_INVALID_NAME;
 8006ea2:	2306      	movs	r3, #6
 8006ea4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ea8:	e011      	b.n	8006ece <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006eaa:	79fb      	ldrb	r3, [r7, #7]
 8006eac:	f023 0301 	bic.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	bf14      	ite	ne
 8006eb4:	2301      	movne	r3, #1
 8006eb6:	2300      	moveq	r3, #0
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	461a      	mov	r2, r3
 8006ebc:	f107 0314 	add.w	r3, r7, #20
 8006ec0:	4611      	mov	r1, r2
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7fe fb00 	bl	80054c8 <chk_lock>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006ece:	79fb      	ldrb	r3, [r7, #7]
 8006ed0:	f003 031c 	and.w	r3, r3, #28
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d07f      	beq.n	8006fd8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8006ed8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d017      	beq.n	8006f10 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006ee0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006ee4:	2b04      	cmp	r3, #4
 8006ee6:	d10e      	bne.n	8006f06 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006ee8:	f7fe fb4a 	bl	8005580 <enq_lock>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d006      	beq.n	8006f00 <f_open+0xc8>
 8006ef2:	f107 0314 	add.w	r3, r7, #20
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7ff fa86 	bl	8006408 <dir_register>
 8006efc:	4603      	mov	r3, r0
 8006efe:	e000      	b.n	8006f02 <f_open+0xca>
 8006f00:	2312      	movs	r3, #18
 8006f02:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	f043 0308 	orr.w	r3, r3, #8
 8006f0c:	71fb      	strb	r3, [r7, #7]
 8006f0e:	e010      	b.n	8006f32 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006f10:	7ebb      	ldrb	r3, [r7, #26]
 8006f12:	f003 0311 	and.w	r3, r3, #17
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d003      	beq.n	8006f22 <f_open+0xea>
					res = FR_DENIED;
 8006f1a:	2307      	movs	r3, #7
 8006f1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006f20:	e007      	b.n	8006f32 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	f003 0304 	and.w	r3, r3, #4
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <f_open+0xfa>
 8006f2c:	2308      	movs	r3, #8
 8006f2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8006f32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d168      	bne.n	800700c <f_open+0x1d4>
 8006f3a:	79fb      	ldrb	r3, [r7, #7]
 8006f3c:	f003 0308 	and.w	r3, r3, #8
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d063      	beq.n	800700c <f_open+0x1d4>
				dw = GET_FATTIME();
 8006f44:	f7fd ffa8 	bl	8004e98 <get_fattime>
 8006f48:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f4c:	330e      	adds	r3, #14
 8006f4e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fe fa0f 	bl	8005374 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f58:	3316      	adds	r3, #22
 8006f5a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	f7fe fa09 	bl	8005374 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006f62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f64:	330b      	adds	r3, #11
 8006f66:	2220      	movs	r2, #32
 8006f68:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006f6e:	4611      	mov	r1, r2
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7ff f958 	bl	8006226 <ld_clust>
 8006f76:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4618      	mov	r0, r3
 8006f80:	f7ff f970 	bl	8006264 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f86:	331c      	adds	r3, #28
 8006f88:	2100      	movs	r1, #0
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f7fe f9f2 	bl	8005374 <st_dword>
					fs->wflag = 1;
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	2201      	movs	r2, #1
 8006f94:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8006f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d037      	beq.n	800700c <f_open+0x1d4>
						dw = fs->winsect;
 8006f9c:	693b      	ldr	r3, [r7, #16]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8006fa2:	f107 0314 	add.w	r3, r7, #20
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fe fe83 	bl	8005cb6 <remove_chain>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006fb6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d126      	bne.n	800700c <f_open+0x1d4>
							res = move_window(fs, dw);
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe fc30 	bl	8005828 <move_window>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006fd2:	3a01      	subs	r2, #1
 8006fd4:	60da      	str	r2, [r3, #12]
 8006fd6:	e019      	b.n	800700c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006fd8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d115      	bne.n	800700c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8006fe0:	7ebb      	ldrb	r3, [r7, #26]
 8006fe2:	f003 0310 	and.w	r3, r3, #16
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d003      	beq.n	8006ff2 <f_open+0x1ba>
					res = FR_NO_FILE;
 8006fea:	2304      	movs	r3, #4
 8006fec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006ff0:	e00c      	b.n	800700c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	f003 0302 	and.w	r3, r3, #2
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d007      	beq.n	800700c <f_open+0x1d4>
 8006ffc:	7ebb      	ldrb	r3, [r7, #26]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <f_open+0x1d4>
						res = FR_DENIED;
 8007006:	2307      	movs	r3, #7
 8007008:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800700c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007010:	2b00      	cmp	r3, #0
 8007012:	d128      	bne.n	8007066 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007014:	79fb      	ldrb	r3, [r7, #7]
 8007016:	f003 0308 	and.w	r3, r3, #8
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800701e:	79fb      	ldrb	r3, [r7, #7]
 8007020:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007024:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800702e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	f023 0301 	bic.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	bf14      	ite	ne
 800703e:	2301      	movne	r3, #1
 8007040:	2300      	moveq	r3, #0
 8007042:	b2db      	uxtb	r3, r3
 8007044:	461a      	mov	r2, r3
 8007046:	f107 0314 	add.w	r3, r7, #20
 800704a:	4611      	mov	r1, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f7fe fab9 	bl	80055c4 <inc_lock>
 8007052:	4602      	mov	r2, r0
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	691b      	ldr	r3, [r3, #16]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d102      	bne.n	8007066 <f_open+0x22e>
 8007060:	2302      	movs	r3, #2
 8007062:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007066:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800706a:	2b00      	cmp	r3, #0
 800706c:	f040 8095 	bne.w	800719a <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007070:	693b      	ldr	r3, [r7, #16]
 8007072:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007074:	4611      	mov	r1, r2
 8007076:	4618      	mov	r0, r3
 8007078:	f7ff f8d5 	bl	8006226 <ld_clust>
 800707c:	4602      	mov	r2, r0
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007084:	331c      	adds	r3, #28
 8007086:	4618      	mov	r0, r3
 8007088:	f7fe f936 	bl	80052f8 <ld_dword>
 800708c:	4602      	mov	r2, r0
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	88da      	ldrh	r2, [r3, #6]
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	79fa      	ldrb	r2, [r7, #7]
 80070aa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2200      	movs	r2, #0
 80070b0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	2200      	movs	r2, #0
 80070b6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3330      	adds	r3, #48	; 0x30
 80070c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80070c6:	2100      	movs	r1, #0
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fe f9a0 	bl	800540e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80070ce:	79fb      	ldrb	r3, [r7, #7]
 80070d0:	f003 0320 	and.w	r3, r3, #32
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d060      	beq.n	800719a <f_open+0x362>
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d05c      	beq.n	800719a <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	68da      	ldr	r2, [r3, #12]
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	895b      	ldrh	r3, [r3, #10]
 80070ec:	025b      	lsls	r3, r3, #9
 80070ee:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	657b      	str	r3, [r7, #84]	; 0x54
 80070fc:	e016      	b.n	800712c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007102:	4618      	mov	r0, r3
 8007104:	f7fe fc4b 	bl	800599e <get_fat>
 8007108:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800710a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800710c:	2b01      	cmp	r3, #1
 800710e:	d802      	bhi.n	8007116 <f_open+0x2de>
 8007110:	2302      	movs	r3, #2
 8007112:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800711c:	d102      	bne.n	8007124 <f_open+0x2ec>
 800711e:	2301      	movs	r3, #1
 8007120:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007124:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	657b      	str	r3, [r7, #84]	; 0x54
 800712c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007130:	2b00      	cmp	r3, #0
 8007132:	d103      	bne.n	800713c <f_open+0x304>
 8007134:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007138:	429a      	cmp	r2, r3
 800713a:	d8e0      	bhi.n	80070fe <f_open+0x2c6>
				}
				fp->clust = clst;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007140:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007142:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8007146:	2b00      	cmp	r3, #0
 8007148:	d127      	bne.n	800719a <f_open+0x362>
 800714a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800714c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007150:	2b00      	cmp	r3, #0
 8007152:	d022      	beq.n	800719a <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007158:	4618      	mov	r0, r3
 800715a:	f7fe fc01 	bl	8005960 <clust2sect>
 800715e:	6478      	str	r0, [r7, #68]	; 0x44
 8007160:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007162:	2b00      	cmp	r3, #0
 8007164:	d103      	bne.n	800716e <f_open+0x336>
						res = FR_INT_ERR;
 8007166:	2302      	movs	r3, #2
 8007168:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800716c:	e015      	b.n	800719a <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800716e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007170:	0a5a      	lsrs	r2, r3, #9
 8007172:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007174:	441a      	add	r2, r3
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800717a:	693b      	ldr	r3, [r7, #16]
 800717c:	7858      	ldrb	r0, [r3, #1]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a1a      	ldr	r2, [r3, #32]
 8007188:	2301      	movs	r3, #1
 800718a:	f7fe f83f 	bl	800520c <disk_read>
 800718e:	4603      	mov	r3, r0
 8007190:	2b00      	cmp	r3, #0
 8007192:	d002      	beq.n	800719a <f_open+0x362>
 8007194:	2301      	movs	r3, #1
 8007196:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800719a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d002      	beq.n	80071a8 <f_open+0x370>
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2200      	movs	r2, #0
 80071a6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80071a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3760      	adds	r7, #96	; 0x60
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b08c      	sub	sp, #48	; 0x30
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	60f8      	str	r0, [r7, #12]
 80071bc:	60b9      	str	r1, [r7, #8]
 80071be:	607a      	str	r2, [r7, #4]
 80071c0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2200      	movs	r2, #0
 80071ca:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f107 0210 	add.w	r2, r7, #16
 80071d2:	4611      	mov	r1, r2
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7ff fdb3 	bl	8006d40 <validate>
 80071da:	4603      	mov	r3, r0
 80071dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80071e0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d107      	bne.n	80071f8 <f_write+0x44>
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	7d5b      	ldrb	r3, [r3, #21]
 80071ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80071f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <f_write+0x4a>
 80071f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80071fc:	e14b      	b.n	8007496 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	7d1b      	ldrb	r3, [r3, #20]
 8007202:	f003 0302 	and.w	r3, r3, #2
 8007206:	2b00      	cmp	r3, #0
 8007208:	d101      	bne.n	800720e <f_write+0x5a>
 800720a:	2307      	movs	r3, #7
 800720c:	e143      	b.n	8007496 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	699a      	ldr	r2, [r3, #24]
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	441a      	add	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	429a      	cmp	r2, r3
 800721c:	f080 812d 	bcs.w	800747a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	43db      	mvns	r3, r3
 8007226:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8007228:	e127      	b.n	800747a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	699b      	ldr	r3, [r3, #24]
 800722e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007232:	2b00      	cmp	r3, #0
 8007234:	f040 80e3 	bne.w	80073fe <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	699b      	ldr	r3, [r3, #24]
 800723c:	0a5b      	lsrs	r3, r3, #9
 800723e:	693a      	ldr	r2, [r7, #16]
 8007240:	8952      	ldrh	r2, [r2, #10]
 8007242:	3a01      	subs	r2, #1
 8007244:	4013      	ands	r3, r2
 8007246:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8007248:	69bb      	ldr	r3, [r7, #24]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d143      	bne.n	80072d6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10c      	bne.n	8007270 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	689b      	ldr	r3, [r3, #8]
 800725a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800725c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800725e:	2b00      	cmp	r3, #0
 8007260:	d11a      	bne.n	8007298 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2100      	movs	r1, #0
 8007266:	4618      	mov	r0, r3
 8007268:	f7fe fd8a 	bl	8005d80 <create_chain>
 800726c:	62b8      	str	r0, [r7, #40]	; 0x28
 800726e:	e013      	b.n	8007298 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007274:	2b00      	cmp	r3, #0
 8007276:	d007      	beq.n	8007288 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	4619      	mov	r1, r3
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f7fe fe16 	bl	8005eb0 <clmt_clust>
 8007284:	62b8      	str	r0, [r7, #40]	; 0x28
 8007286:	e007      	b.n	8007298 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	69db      	ldr	r3, [r3, #28]
 800728e:	4619      	mov	r1, r3
 8007290:	4610      	mov	r0, r2
 8007292:	f7fe fd75 	bl	8005d80 <create_chain>
 8007296:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800729a:	2b00      	cmp	r3, #0
 800729c:	f000 80f2 	beq.w	8007484 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80072a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	d104      	bne.n	80072b0 <f_write+0xfc>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2202      	movs	r2, #2
 80072aa:	755a      	strb	r2, [r3, #21]
 80072ac:	2302      	movs	r3, #2
 80072ae:	e0f2      	b.n	8007496 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80072b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072b6:	d104      	bne.n	80072c2 <f_write+0x10e>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2201      	movs	r2, #1
 80072bc:	755a      	strb	r2, [r3, #21]
 80072be:	2301      	movs	r3, #1
 80072c0:	e0e9      	b.n	8007496 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072c6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d102      	bne.n	80072d6 <f_write+0x122>
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80072d4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	7d1b      	ldrb	r3, [r3, #20]
 80072da:	b25b      	sxtb	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	da18      	bge.n	8007312 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	7858      	ldrb	r0, [r3, #1]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6a1a      	ldr	r2, [r3, #32]
 80072ee:	2301      	movs	r3, #1
 80072f0:	f7fd ffac 	bl	800524c <disk_write>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d004      	beq.n	8007304 <f_write+0x150>
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2201      	movs	r2, #1
 80072fe:	755a      	strb	r2, [r3, #21]
 8007300:	2301      	movs	r3, #1
 8007302:	e0c8      	b.n	8007496 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	7d1b      	ldrb	r3, [r3, #20]
 8007308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800730c:	b2da      	uxtb	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	4619      	mov	r1, r3
 800731a:	4610      	mov	r0, r2
 800731c:	f7fe fb20 	bl	8005960 <clust2sect>
 8007320:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d104      	bne.n	8007332 <f_write+0x17e>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2202      	movs	r2, #2
 800732c:	755a      	strb	r2, [r3, #21]
 800732e:	2302      	movs	r3, #2
 8007330:	e0b1      	b.n	8007496 <f_write+0x2e2>
			sect += csect;
 8007332:	697a      	ldr	r2, [r7, #20]
 8007334:	69bb      	ldr	r3, [r7, #24]
 8007336:	4413      	add	r3, r2
 8007338:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	0a5b      	lsrs	r3, r3, #9
 800733e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d03c      	beq.n	80073c0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8007346:	69ba      	ldr	r2, [r7, #24]
 8007348:	6a3b      	ldr	r3, [r7, #32]
 800734a:	4413      	add	r3, r2
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	8952      	ldrh	r2, [r2, #10]
 8007350:	4293      	cmp	r3, r2
 8007352:	d905      	bls.n	8007360 <f_write+0x1ac>
					cc = fs->csize - csect;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	895b      	ldrh	r3, [r3, #10]
 8007358:	461a      	mov	r2, r3
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	1ad3      	subs	r3, r2, r3
 800735e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	7858      	ldrb	r0, [r3, #1]
 8007364:	6a3b      	ldr	r3, [r7, #32]
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	69f9      	ldr	r1, [r7, #28]
 800736a:	f7fd ff6f 	bl	800524c <disk_write>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d004      	beq.n	800737e <f_write+0x1ca>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2201      	movs	r2, #1
 8007378:	755a      	strb	r2, [r3, #21]
 800737a:	2301      	movs	r3, #1
 800737c:	e08b      	b.n	8007496 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1a      	ldr	r2, [r3, #32]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	6a3a      	ldr	r2, [r7, #32]
 8007388:	429a      	cmp	r2, r3
 800738a:	d915      	bls.n	80073b8 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a1a      	ldr	r2, [r3, #32]
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	025b      	lsls	r3, r3, #9
 800739c:	69fa      	ldr	r2, [r7, #28]
 800739e:	4413      	add	r3, r2
 80073a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073a4:	4619      	mov	r1, r3
 80073a6:	f7fe f811 	bl	80053cc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	7d1b      	ldrb	r3, [r3, #20]
 80073ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073b2:	b2da      	uxtb	r2, r3
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	025b      	lsls	r3, r3, #9
 80073bc:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80073be:	e03f      	b.n	8007440 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	697a      	ldr	r2, [r7, #20]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d016      	beq.n	80073f8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	699a      	ldr	r2, [r3, #24]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d210      	bcs.n	80073f8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80073d6:	693b      	ldr	r3, [r7, #16]
 80073d8:	7858      	ldrb	r0, [r3, #1]
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80073e0:	2301      	movs	r3, #1
 80073e2:	697a      	ldr	r2, [r7, #20]
 80073e4:	f7fd ff12 	bl	800520c <disk_read>
 80073e8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d004      	beq.n	80073f8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	755a      	strb	r2, [r3, #21]
 80073f4:	2301      	movs	r3, #1
 80073f6:	e04e      	b.n	8007496 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	697a      	ldr	r2, [r7, #20]
 80073fc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007406:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800740a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800740c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	429a      	cmp	r2, r3
 8007412:	d901      	bls.n	8007418 <f_write+0x264>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	699b      	ldr	r3, [r3, #24]
 8007422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007426:	4413      	add	r3, r2
 8007428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742a:	69f9      	ldr	r1, [r7, #28]
 800742c:	4618      	mov	r0, r3
 800742e:	f7fd ffcd 	bl	80053cc <mem_cpy>
		fp->flag |= FA_DIRTY;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	7d1b      	ldrb	r3, [r3, #20]
 8007436:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800743a:	b2da      	uxtb	r2, r3
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8007440:	69fa      	ldr	r2, [r7, #28]
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	4413      	add	r3, r2
 8007446:	61fb      	str	r3, [r7, #28]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	699a      	ldr	r2, [r3, #24]
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	441a      	add	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	619a      	str	r2, [r3, #24]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	699b      	ldr	r3, [r3, #24]
 800745c:	429a      	cmp	r2, r3
 800745e:	bf38      	it	cc
 8007460:	461a      	movcc	r2, r3
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	60da      	str	r2, [r3, #12]
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746c:	441a      	add	r2, r3
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b00      	cmp	r3, #0
 800747e:	f47f aed4 	bne.w	800722a <f_write+0x76>
 8007482:	e000      	b.n	8007486 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8007484:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	7d1b      	ldrb	r3, [r3, #20]
 800748a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800748e:	b2da      	uxtb	r2, r3
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8007494:	2300      	movs	r3, #0
}
 8007496:	4618      	mov	r0, r3
 8007498:	3730      	adds	r7, #48	; 0x30
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b086      	sub	sp, #24
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f107 0208 	add.w	r2, r7, #8
 80074ac:	4611      	mov	r1, r2
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fc46 	bl	8006d40 <validate>
 80074b4:	4603      	mov	r3, r0
 80074b6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d168      	bne.n	8007590 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	7d1b      	ldrb	r3, [r3, #20]
 80074c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d062      	beq.n	8007590 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	7d1b      	ldrb	r3, [r3, #20]
 80074ce:	b25b      	sxtb	r3, r3
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	da15      	bge.n	8007500 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	7858      	ldrb	r0, [r3, #1]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1a      	ldr	r2, [r3, #32]
 80074e2:	2301      	movs	r3, #1
 80074e4:	f7fd feb2 	bl	800524c <disk_write>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <f_sync+0x54>
 80074ee:	2301      	movs	r3, #1
 80074f0:	e04f      	b.n	8007592 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	7d1b      	ldrb	r3, [r3, #20]
 80074f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074fa:	b2da      	uxtb	r2, r3
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007500:	f7fd fcca 	bl	8004e98 <get_fattime>
 8007504:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800750c:	4619      	mov	r1, r3
 800750e:	4610      	mov	r0, r2
 8007510:	f7fe f98a 	bl	8005828 <move_window>
 8007514:	4603      	mov	r3, r0
 8007516:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007518:	7dfb      	ldrb	r3, [r7, #23]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d138      	bne.n	8007590 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007522:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	330b      	adds	r3, #11
 8007528:	781a      	ldrb	r2, [r3, #0]
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	330b      	adds	r3, #11
 800752e:	f042 0220 	orr.w	r2, r2, #32
 8007532:	b2d2      	uxtb	r2, r2
 8007534:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6818      	ldr	r0, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	461a      	mov	r2, r3
 8007540:	68f9      	ldr	r1, [r7, #12]
 8007542:	f7fe fe8f 	bl	8006264 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	f103 021c 	add.w	r2, r3, #28
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	4619      	mov	r1, r3
 8007552:	4610      	mov	r0, r2
 8007554:	f7fd ff0e 	bl	8005374 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	3316      	adds	r3, #22
 800755c:	6939      	ldr	r1, [r7, #16]
 800755e:	4618      	mov	r0, r3
 8007560:	f7fd ff08 	bl	8005374 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	3312      	adds	r3, #18
 8007568:	2100      	movs	r1, #0
 800756a:	4618      	mov	r0, r3
 800756c:	f7fd fee7 	bl	800533e <st_word>
					fs->wflag = 1;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	2201      	movs	r2, #1
 8007574:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007576:	68bb      	ldr	r3, [r7, #8]
 8007578:	4618      	mov	r0, r3
 800757a:	f7fe f983 	bl	8005884 <sync_fs>
 800757e:	4603      	mov	r3, r0
 8007580:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	7d1b      	ldrb	r3, [r3, #20]
 8007586:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800758a:	b2da      	uxtb	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007590:	7dfb      	ldrb	r3, [r7, #23]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3718      	adds	r7, #24
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80075a2:	6878      	ldr	r0, [r7, #4]
 80075a4:	f7ff ff7b 	bl	800749e <f_sync>
 80075a8:	4603      	mov	r3, r0
 80075aa:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80075ac:	7bfb      	ldrb	r3, [r7, #15]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d118      	bne.n	80075e4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f107 0208 	add.w	r2, r7, #8
 80075b8:	4611      	mov	r1, r2
 80075ba:	4618      	mov	r0, r3
 80075bc:	f7ff fbc0 	bl	8006d40 <validate>
 80075c0:	4603      	mov	r3, r0
 80075c2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10c      	bne.n	80075e4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	691b      	ldr	r3, [r3, #16]
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe f886 	bl	80056e0 <dec_lock>
 80075d4:	4603      	mov	r3, r0
 80075d6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d102      	bne.n	80075e4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 80075ee:	b580      	push	{r7, lr}
 80075f0:	b086      	sub	sp, #24
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d101      	bne.n	8007602 <f_opendir+0x14>
 80075fe:	2309      	movs	r3, #9
 8007600:	e064      	b.n	80076cc <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8007606:	f107 010c 	add.w	r1, r7, #12
 800760a:	463b      	mov	r3, r7
 800760c:	2200      	movs	r2, #0
 800760e:	4618      	mov	r0, r3
 8007610:	f7ff f94a 	bl	80068a8 <find_volume>
 8007614:	4603      	mov	r3, r0
 8007616:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007618:	7dfb      	ldrb	r3, [r7, #23]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d14f      	bne.n	80076be <f_opendir+0xd0>
		obj->fs = fs;
 800761e:	68fa      	ldr	r2, [r7, #12]
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	4619      	mov	r1, r3
 8007628:	6878      	ldr	r0, [r7, #4]
 800762a:	f7ff f831 	bl	8006690 <follow_path>
 800762e:	4603      	mov	r3, r0
 8007630:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8007632:	7dfb      	ldrb	r3, [r7, #23]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d13d      	bne.n	80076b4 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800763e:	b25b      	sxtb	r3, r3
 8007640:	2b00      	cmp	r3, #0
 8007642:	db12      	blt.n	800766a <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	799b      	ldrb	r3, [r3, #6]
 8007648:	f003 0310 	and.w	r3, r3, #16
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00a      	beq.n	8007666 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	4619      	mov	r1, r3
 8007658:	4610      	mov	r0, r2
 800765a:	f7fe fde4 	bl	8006226 <ld_clust>
 800765e:	4602      	mov	r2, r0
 8007660:	693b      	ldr	r3, [r7, #16]
 8007662:	609a      	str	r2, [r3, #8]
 8007664:	e001      	b.n	800766a <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8007666:	2305      	movs	r3, #5
 8007668:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 800766a:	7dfb      	ldrb	r3, [r7, #23]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d121      	bne.n	80076b4 <f_opendir+0xc6>
				obj->id = fs->id;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	88da      	ldrh	r2, [r3, #6]
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8007678:	2100      	movs	r1, #0
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7fe fc4c 	bl	8005f18 <dir_sdi>
 8007680:	4603      	mov	r3, r0
 8007682:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8007684:	7dfb      	ldrb	r3, [r7, #23]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d114      	bne.n	80076b4 <f_opendir+0xc6>
					if (obj->sclust) {
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d00d      	beq.n	80076ae <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8007692:	2100      	movs	r1, #0
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f7fd ff95 	bl	80055c4 <inc_lock>
 800769a:	4602      	mov	r2, r0
 800769c:	693b      	ldr	r3, [r7, #16]
 800769e:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	691b      	ldr	r3, [r3, #16]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d105      	bne.n	80076b4 <f_opendir+0xc6>
 80076a8:	2312      	movs	r3, #18
 80076aa:	75fb      	strb	r3, [r7, #23]
 80076ac:	e002      	b.n	80076b4 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 80076ae:	693b      	ldr	r3, [r7, #16]
 80076b0:	2200      	movs	r2, #0
 80076b2:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80076b4:	7dfb      	ldrb	r3, [r7, #23]
 80076b6:	2b04      	cmp	r3, #4
 80076b8:	d101      	bne.n	80076be <f_opendir+0xd0>
 80076ba:	2305      	movs	r3, #5
 80076bc:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d002      	beq.n	80076ca <f_opendir+0xdc>
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	2200      	movs	r2, #0
 80076c8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80076ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3718      	adds	r7, #24
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}

080076d4 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	f107 0208 	add.w	r2, r7, #8
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7ff fb2b 	bl	8006d40 <validate>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d110      	bne.n	8007716 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	691b      	ldr	r3, [r3, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d006      	beq.n	800770a <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	4618      	mov	r0, r3
 8007702:	f7fd ffed 	bl	80056e0 <dec_lock>
 8007706:	4603      	mov	r3, r0
 8007708:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d102      	bne.n	8007716 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8007716:	7bfb      	ldrb	r3, [r7, #15]
}
 8007718:	4618      	mov	r0, r3
 800771a:	3710      	adds	r7, #16
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f107 0208 	add.w	r2, r7, #8
 8007730:	4611      	mov	r1, r2
 8007732:	4618      	mov	r0, r3
 8007734:	f7ff fb04 	bl	8006d40 <validate>
 8007738:	4603      	mov	r3, r0
 800773a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800773c:	7bfb      	ldrb	r3, [r7, #15]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d126      	bne.n	8007790 <f_readdir+0x70>
		if (!fno) {
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d106      	bne.n	8007756 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8007748:	2100      	movs	r1, #0
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7fe fbe4 	bl	8005f18 <dir_sdi>
 8007750:	4603      	mov	r3, r0
 8007752:	73fb      	strb	r3, [r7, #15]
 8007754:	e01c      	b.n	8007790 <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8007756:	2100      	movs	r1, #0
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f7fe fda3 	bl	80062a4 <dir_read>
 800775e:	4603      	mov	r3, r0
 8007760:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8007762:	7bfb      	ldrb	r3, [r7, #15]
 8007764:	2b04      	cmp	r3, #4
 8007766:	d101      	bne.n	800776c <f_readdir+0x4c>
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 800776c:	7bfb      	ldrb	r3, [r7, #15]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10e      	bne.n	8007790 <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8007772:	6839      	ldr	r1, [r7, #0]
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7fe fe97 	bl	80064a8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 800777a:	2100      	movs	r1, #0
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f7fe fc46 	bl	800600e <dir_next>
 8007782:	4603      	mov	r3, r0
 8007784:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8007786:	7bfb      	ldrb	r3, [r7, #15]
 8007788:	2b04      	cmp	r3, #4
 800778a:	d101      	bne.n	8007790 <f_readdir+0x70>
 800778c:	2300      	movs	r3, #0
 800778e:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8007790:	7bfb      	ldrb	r3, [r7, #15]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b090      	sub	sp, #64	; 0x40
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80077a4:	f107 010c 	add.w	r1, r7, #12
 80077a8:	1d3b      	adds	r3, r7, #4
 80077aa:	2200      	movs	r2, #0
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7ff f87b 	bl	80068a8 <find_volume>
 80077b2:	4603      	mov	r3, r0
 80077b4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 80077b8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d11f      	bne.n	8007800 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	f107 030c 	add.w	r3, r7, #12
 80077c6:	4611      	mov	r1, r2
 80077c8:	4618      	mov	r0, r3
 80077ca:	f7fe ff61 	bl	8006690 <follow_path>
 80077ce:	4603      	mov	r3, r0
 80077d0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 80077d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d111      	bne.n	8007800 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 80077dc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80077e0:	b25b      	sxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	da03      	bge.n	80077ee <f_stat+0x54>
				res = FR_INVALID_NAME;
 80077e6:	2306      	movs	r3, #6
 80077e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80077ec:	e008      	b.n	8007800 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d005      	beq.n	8007800 <f_stat+0x66>
 80077f4:	f107 030c 	add.w	r3, r7, #12
 80077f8:	6839      	ldr	r1, [r7, #0]
 80077fa:	4618      	mov	r0, r3
 80077fc:	f7fe fe54 	bl	80064a8 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8007800:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007804:	4618      	mov	r0, r3
 8007806:	3740      	adds	r7, #64	; 0x40
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}

0800780c <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b09e      	sub	sp, #120	; 0x78
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8007814:	2300      	movs	r3, #0
 8007816:	673b      	str	r3, [r7, #112]	; 0x70
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8007818:	f107 010c 	add.w	r1, r7, #12
 800781c:	1d3b      	adds	r3, r7, #4
 800781e:	2202      	movs	r2, #2
 8007820:	4618      	mov	r0, r3
 8007822:	f7ff f841 	bl	80068a8 <find_volume>
 8007826:	4603      	mov	r3, r0
 8007828:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	dj.obj.fs = fs;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	643b      	str	r3, [r7, #64]	; 0x40
	if (res == FR_OK) {
 8007830:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007834:	2b00      	cmp	r3, #0
 8007836:	f040 808e 	bne.w	8007956 <f_unlink+0x14a>
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);		/* Follow the file path */
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007840:	4611      	mov	r1, r2
 8007842:	4618      	mov	r0, r3
 8007844:	f7fe ff24 	bl	8006690 <follow_path>
 8007848:	4603      	mov	r3, r0
 800784a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 800784e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007852:	2b00      	cmp	r3, #0
 8007854:	d108      	bne.n	8007868 <f_unlink+0x5c>
 8007856:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800785a:	2102      	movs	r1, #2
 800785c:	4618      	mov	r0, r3
 800785e:	f7fd fe33 	bl	80054c8 <chk_lock>
 8007862:	4603      	mov	r3, r0
 8007864:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8007868:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800786c:	2b00      	cmp	r3, #0
 800786e:	d172      	bne.n	8007956 <f_unlink+0x14a>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8007870:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007874:	b25b      	sxtb	r3, r3
 8007876:	2b00      	cmp	r3, #0
 8007878:	da03      	bge.n	8007882 <f_unlink+0x76>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800787a:	2306      	movs	r3, #6
 800787c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8007880:	e008      	b.n	8007894 <f_unlink+0x88>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8007882:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007886:	f003 0301 	and.w	r3, r3, #1
 800788a:	2b00      	cmp	r3, #0
 800788c:	d002      	beq.n	8007894 <f_unlink+0x88>
					res = FR_DENIED;		/* Cannot remove R/O object */
 800788e:	2307      	movs	r3, #7
 8007890:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				}
			}
			if (res == FR_OK) {
 8007894:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007898:	2b00      	cmp	r3, #0
 800789a:	d134      	bne.n	8007906 <f_unlink+0xfa>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078a0:	4611      	mov	r1, r2
 80078a2:	4618      	mov	r0, r3
 80078a4:	f7fe fcbf 	bl	8006226 <ld_clust>
 80078a8:	6738      	str	r0, [r7, #112]	; 0x70
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 80078aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80078ae:	f003 0310 	and.w	r3, r3, #16
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d027      	beq.n	8007906 <f_unlink+0xfa>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	613b      	str	r3, [r7, #16]
						sdj.obj.sclust = dclst;
 80078ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80078bc:	61bb      	str	r3, [r7, #24]
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 80078be:	f107 0310 	add.w	r3, r7, #16
 80078c2:	2100      	movs	r1, #0
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fe fb27 	bl	8005f18 <dir_sdi>
 80078ca:	4603      	mov	r3, r0
 80078cc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						if (res == FR_OK) {
 80078d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d116      	bne.n	8007906 <f_unlink+0xfa>
							res = dir_read(&sdj, 0);			/* Read an item */
 80078d8:	f107 0310 	add.w	r3, r7, #16
 80078dc:	2100      	movs	r1, #0
 80078de:	4618      	mov	r0, r3
 80078e0:	f7fe fce0 	bl	80062a4 <dir_read>
 80078e4:	4603      	mov	r3, r0
 80078e6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 80078ea:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d102      	bne.n	80078f8 <f_unlink+0xec>
 80078f2:	2307      	movs	r3, #7
 80078f4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 80078f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80078fc:	2b04      	cmp	r3, #4
 80078fe:	d102      	bne.n	8007906 <f_unlink+0xfa>
 8007900:	2300      	movs	r3, #0
 8007902:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
						}
					}
				}
			}
			if (res == FR_OK) {
 8007906:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800790a:	2b00      	cmp	r3, #0
 800790c:	d123      	bne.n	8007956 <f_unlink+0x14a>
				res = dir_remove(&dj);			/* Remove the directory entry */
 800790e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007912:	4618      	mov	r0, r3
 8007914:	f7fe fdaa 	bl	800646c <dir_remove>
 8007918:	4603      	mov	r3, r0
 800791a:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 800791e:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10c      	bne.n	8007940 <f_unlink+0x134>
 8007926:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007928:	2b00      	cmp	r3, #0
 800792a:	d009      	beq.n	8007940 <f_unlink+0x134>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 800792c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007930:	2200      	movs	r2, #0
 8007932:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8007934:	4618      	mov	r0, r3
 8007936:	f7fe f9be 	bl	8005cb6 <remove_chain>
 800793a:	4603      	mov	r3, r0
 800793c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8007940:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8007944:	2b00      	cmp	r3, #0
 8007946:	d106      	bne.n	8007956 <f_unlink+0x14a>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	4618      	mov	r0, r3
 800794c:	f7fd ff9a 	bl	8005884 <sync_fs>
 8007950:	4603      	mov	r3, r0
 8007952:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8007956:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800795a:	4618      	mov	r0, r3
 800795c:	3778      	adds	r7, #120	; 0x78
 800795e:	46bd      	mov	sp, r7
 8007960:	bd80      	pop	{r7, pc}
	...

08007964 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007964:	b480      	push	{r7}
 8007966:	b087      	sub	sp, #28
 8007968:	af00      	add	r7, sp, #0
 800796a:	60f8      	str	r0, [r7, #12]
 800796c:	60b9      	str	r1, [r7, #8]
 800796e:	4613      	mov	r3, r2
 8007970:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007972:	2301      	movs	r3, #1
 8007974:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007976:	2300      	movs	r3, #0
 8007978:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800797a:	4b1f      	ldr	r3, [pc, #124]	; (80079f8 <FATFS_LinkDriverEx+0x94>)
 800797c:	7a5b      	ldrb	r3, [r3, #9]
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b00      	cmp	r3, #0
 8007982:	d131      	bne.n	80079e8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007984:	4b1c      	ldr	r3, [pc, #112]	; (80079f8 <FATFS_LinkDriverEx+0x94>)
 8007986:	7a5b      	ldrb	r3, [r3, #9]
 8007988:	b2db      	uxtb	r3, r3
 800798a:	461a      	mov	r2, r3
 800798c:	4b1a      	ldr	r3, [pc, #104]	; (80079f8 <FATFS_LinkDriverEx+0x94>)
 800798e:	2100      	movs	r1, #0
 8007990:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007992:	4b19      	ldr	r3, [pc, #100]	; (80079f8 <FATFS_LinkDriverEx+0x94>)
 8007994:	7a5b      	ldrb	r3, [r3, #9]
 8007996:	b2db      	uxtb	r3, r3
 8007998:	4a17      	ldr	r2, [pc, #92]	; (80079f8 <FATFS_LinkDriverEx+0x94>)
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80079a2:	4b15      	ldr	r3, [pc, #84]	; (80079f8 <FATFS_LinkDriverEx+0x94>)
 80079a4:	7a5b      	ldrb	r3, [r3, #9]
 80079a6:	b2db      	uxtb	r3, r3
 80079a8:	461a      	mov	r2, r3
 80079aa:	4b13      	ldr	r3, [pc, #76]	; (80079f8 <FATFS_LinkDriverEx+0x94>)
 80079ac:	4413      	add	r3, r2
 80079ae:	79fa      	ldrb	r2, [r7, #7]
 80079b0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80079b2:	4b11      	ldr	r3, [pc, #68]	; (80079f8 <FATFS_LinkDriverEx+0x94>)
 80079b4:	7a5b      	ldrb	r3, [r3, #9]
 80079b6:	b2db      	uxtb	r3, r3
 80079b8:	1c5a      	adds	r2, r3, #1
 80079ba:	b2d1      	uxtb	r1, r2
 80079bc:	4a0e      	ldr	r2, [pc, #56]	; (80079f8 <FATFS_LinkDriverEx+0x94>)
 80079be:	7251      	strb	r1, [r2, #9]
 80079c0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80079c2:	7dbb      	ldrb	r3, [r7, #22]
 80079c4:	3330      	adds	r3, #48	; 0x30
 80079c6:	b2da      	uxtb	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	3301      	adds	r3, #1
 80079d0:	223a      	movs	r2, #58	; 0x3a
 80079d2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	3302      	adds	r3, #2
 80079d8:	222f      	movs	r2, #47	; 0x2f
 80079da:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	3303      	adds	r3, #3
 80079e0:	2200      	movs	r2, #0
 80079e2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80079e4:	2300      	movs	r3, #0
 80079e6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	371c      	adds	r7, #28
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	200000bc 	.word	0x200000bc

080079fc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80079fc:	b580      	push	{r7, lr}
 80079fe:	b082      	sub	sp, #8
 8007a00:	af00      	add	r7, sp, #0
 8007a02:	6078      	str	r0, [r7, #4]
 8007a04:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007a06:	2200      	movs	r2, #0
 8007a08:	6839      	ldr	r1, [r7, #0]
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f7ff ffaa 	bl	8007964 <FATFS_LinkDriverEx>
 8007a10:	4603      	mov	r3, r0
}
 8007a12:	4618      	mov	r0, r3
 8007a14:	3708      	adds	r7, #8
 8007a16:	46bd      	mov	sp, r7
 8007a18:	bd80      	pop	{r7, pc}
	...

08007a1c <__errno>:
 8007a1c:	4b01      	ldr	r3, [pc, #4]	; (8007a24 <__errno+0x8>)
 8007a1e:	6818      	ldr	r0, [r3, #0]
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	2000000c 	.word	0x2000000c

08007a28 <__libc_init_array>:
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	4e0d      	ldr	r6, [pc, #52]	; (8007a60 <__libc_init_array+0x38>)
 8007a2c:	4c0d      	ldr	r4, [pc, #52]	; (8007a64 <__libc_init_array+0x3c>)
 8007a2e:	1ba4      	subs	r4, r4, r6
 8007a30:	10a4      	asrs	r4, r4, #2
 8007a32:	2500      	movs	r5, #0
 8007a34:	42a5      	cmp	r5, r4
 8007a36:	d109      	bne.n	8007a4c <__libc_init_array+0x24>
 8007a38:	4e0b      	ldr	r6, [pc, #44]	; (8007a68 <__libc_init_array+0x40>)
 8007a3a:	4c0c      	ldr	r4, [pc, #48]	; (8007a6c <__libc_init_array+0x44>)
 8007a3c:	f000 fc36 	bl	80082ac <_init>
 8007a40:	1ba4      	subs	r4, r4, r6
 8007a42:	10a4      	asrs	r4, r4, #2
 8007a44:	2500      	movs	r5, #0
 8007a46:	42a5      	cmp	r5, r4
 8007a48:	d105      	bne.n	8007a56 <__libc_init_array+0x2e>
 8007a4a:	bd70      	pop	{r4, r5, r6, pc}
 8007a4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a50:	4798      	blx	r3
 8007a52:	3501      	adds	r5, #1
 8007a54:	e7ee      	b.n	8007a34 <__libc_init_array+0xc>
 8007a56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007a5a:	4798      	blx	r3
 8007a5c:	3501      	adds	r5, #1
 8007a5e:	e7f2      	b.n	8007a46 <__libc_init_array+0x1e>
 8007a60:	08008850 	.word	0x08008850
 8007a64:	08008850 	.word	0x08008850
 8007a68:	08008850 	.word	0x08008850
 8007a6c:	08008854 	.word	0x08008854

08007a70 <malloc>:
 8007a70:	4b02      	ldr	r3, [pc, #8]	; (8007a7c <malloc+0xc>)
 8007a72:	4601      	mov	r1, r0
 8007a74:	6818      	ldr	r0, [r3, #0]
 8007a76:	f000 b861 	b.w	8007b3c <_malloc_r>
 8007a7a:	bf00      	nop
 8007a7c:	2000000c 	.word	0x2000000c

08007a80 <free>:
 8007a80:	4b02      	ldr	r3, [pc, #8]	; (8007a8c <free+0xc>)
 8007a82:	4601      	mov	r1, r0
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	f000 b80b 	b.w	8007aa0 <_free_r>
 8007a8a:	bf00      	nop
 8007a8c:	2000000c 	.word	0x2000000c

08007a90 <memset>:
 8007a90:	4402      	add	r2, r0
 8007a92:	4603      	mov	r3, r0
 8007a94:	4293      	cmp	r3, r2
 8007a96:	d100      	bne.n	8007a9a <memset+0xa>
 8007a98:	4770      	bx	lr
 8007a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a9e:	e7f9      	b.n	8007a94 <memset+0x4>

08007aa0 <_free_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	2900      	cmp	r1, #0
 8007aa6:	d045      	beq.n	8007b34 <_free_r+0x94>
 8007aa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aac:	1f0c      	subs	r4, r1, #4
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	bfb8      	it	lt
 8007ab2:	18e4      	addlt	r4, r4, r3
 8007ab4:	f000 f8cc 	bl	8007c50 <__malloc_lock>
 8007ab8:	4a1f      	ldr	r2, [pc, #124]	; (8007b38 <_free_r+0x98>)
 8007aba:	6813      	ldr	r3, [r2, #0]
 8007abc:	4610      	mov	r0, r2
 8007abe:	b933      	cbnz	r3, 8007ace <_free_r+0x2e>
 8007ac0:	6063      	str	r3, [r4, #4]
 8007ac2:	6014      	str	r4, [r2, #0]
 8007ac4:	4628      	mov	r0, r5
 8007ac6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aca:	f000 b8c2 	b.w	8007c52 <__malloc_unlock>
 8007ace:	42a3      	cmp	r3, r4
 8007ad0:	d90c      	bls.n	8007aec <_free_r+0x4c>
 8007ad2:	6821      	ldr	r1, [r4, #0]
 8007ad4:	1862      	adds	r2, r4, r1
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	bf04      	itt	eq
 8007ada:	681a      	ldreq	r2, [r3, #0]
 8007adc:	685b      	ldreq	r3, [r3, #4]
 8007ade:	6063      	str	r3, [r4, #4]
 8007ae0:	bf04      	itt	eq
 8007ae2:	1852      	addeq	r2, r2, r1
 8007ae4:	6022      	streq	r2, [r4, #0]
 8007ae6:	6004      	str	r4, [r0, #0]
 8007ae8:	e7ec      	b.n	8007ac4 <_free_r+0x24>
 8007aea:	4613      	mov	r3, r2
 8007aec:	685a      	ldr	r2, [r3, #4]
 8007aee:	b10a      	cbz	r2, 8007af4 <_free_r+0x54>
 8007af0:	42a2      	cmp	r2, r4
 8007af2:	d9fa      	bls.n	8007aea <_free_r+0x4a>
 8007af4:	6819      	ldr	r1, [r3, #0]
 8007af6:	1858      	adds	r0, r3, r1
 8007af8:	42a0      	cmp	r0, r4
 8007afa:	d10b      	bne.n	8007b14 <_free_r+0x74>
 8007afc:	6820      	ldr	r0, [r4, #0]
 8007afe:	4401      	add	r1, r0
 8007b00:	1858      	adds	r0, r3, r1
 8007b02:	4282      	cmp	r2, r0
 8007b04:	6019      	str	r1, [r3, #0]
 8007b06:	d1dd      	bne.n	8007ac4 <_free_r+0x24>
 8007b08:	6810      	ldr	r0, [r2, #0]
 8007b0a:	6852      	ldr	r2, [r2, #4]
 8007b0c:	605a      	str	r2, [r3, #4]
 8007b0e:	4401      	add	r1, r0
 8007b10:	6019      	str	r1, [r3, #0]
 8007b12:	e7d7      	b.n	8007ac4 <_free_r+0x24>
 8007b14:	d902      	bls.n	8007b1c <_free_r+0x7c>
 8007b16:	230c      	movs	r3, #12
 8007b18:	602b      	str	r3, [r5, #0]
 8007b1a:	e7d3      	b.n	8007ac4 <_free_r+0x24>
 8007b1c:	6820      	ldr	r0, [r4, #0]
 8007b1e:	1821      	adds	r1, r4, r0
 8007b20:	428a      	cmp	r2, r1
 8007b22:	bf04      	itt	eq
 8007b24:	6811      	ldreq	r1, [r2, #0]
 8007b26:	6852      	ldreq	r2, [r2, #4]
 8007b28:	6062      	str	r2, [r4, #4]
 8007b2a:	bf04      	itt	eq
 8007b2c:	1809      	addeq	r1, r1, r0
 8007b2e:	6021      	streq	r1, [r4, #0]
 8007b30:	605c      	str	r4, [r3, #4]
 8007b32:	e7c7      	b.n	8007ac4 <_free_r+0x24>
 8007b34:	bd38      	pop	{r3, r4, r5, pc}
 8007b36:	bf00      	nop
 8007b38:	200000c8 	.word	0x200000c8

08007b3c <_malloc_r>:
 8007b3c:	b570      	push	{r4, r5, r6, lr}
 8007b3e:	1ccd      	adds	r5, r1, #3
 8007b40:	f025 0503 	bic.w	r5, r5, #3
 8007b44:	3508      	adds	r5, #8
 8007b46:	2d0c      	cmp	r5, #12
 8007b48:	bf38      	it	cc
 8007b4a:	250c      	movcc	r5, #12
 8007b4c:	2d00      	cmp	r5, #0
 8007b4e:	4606      	mov	r6, r0
 8007b50:	db01      	blt.n	8007b56 <_malloc_r+0x1a>
 8007b52:	42a9      	cmp	r1, r5
 8007b54:	d903      	bls.n	8007b5e <_malloc_r+0x22>
 8007b56:	230c      	movs	r3, #12
 8007b58:	6033      	str	r3, [r6, #0]
 8007b5a:	2000      	movs	r0, #0
 8007b5c:	bd70      	pop	{r4, r5, r6, pc}
 8007b5e:	f000 f877 	bl	8007c50 <__malloc_lock>
 8007b62:	4a21      	ldr	r2, [pc, #132]	; (8007be8 <_malloc_r+0xac>)
 8007b64:	6814      	ldr	r4, [r2, #0]
 8007b66:	4621      	mov	r1, r4
 8007b68:	b991      	cbnz	r1, 8007b90 <_malloc_r+0x54>
 8007b6a:	4c20      	ldr	r4, [pc, #128]	; (8007bec <_malloc_r+0xb0>)
 8007b6c:	6823      	ldr	r3, [r4, #0]
 8007b6e:	b91b      	cbnz	r3, 8007b78 <_malloc_r+0x3c>
 8007b70:	4630      	mov	r0, r6
 8007b72:	f000 f83d 	bl	8007bf0 <_sbrk_r>
 8007b76:	6020      	str	r0, [r4, #0]
 8007b78:	4629      	mov	r1, r5
 8007b7a:	4630      	mov	r0, r6
 8007b7c:	f000 f838 	bl	8007bf0 <_sbrk_r>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d124      	bne.n	8007bce <_malloc_r+0x92>
 8007b84:	230c      	movs	r3, #12
 8007b86:	6033      	str	r3, [r6, #0]
 8007b88:	4630      	mov	r0, r6
 8007b8a:	f000 f862 	bl	8007c52 <__malloc_unlock>
 8007b8e:	e7e4      	b.n	8007b5a <_malloc_r+0x1e>
 8007b90:	680b      	ldr	r3, [r1, #0]
 8007b92:	1b5b      	subs	r3, r3, r5
 8007b94:	d418      	bmi.n	8007bc8 <_malloc_r+0x8c>
 8007b96:	2b0b      	cmp	r3, #11
 8007b98:	d90f      	bls.n	8007bba <_malloc_r+0x7e>
 8007b9a:	600b      	str	r3, [r1, #0]
 8007b9c:	50cd      	str	r5, [r1, r3]
 8007b9e:	18cc      	adds	r4, r1, r3
 8007ba0:	4630      	mov	r0, r6
 8007ba2:	f000 f856 	bl	8007c52 <__malloc_unlock>
 8007ba6:	f104 000b 	add.w	r0, r4, #11
 8007baa:	1d23      	adds	r3, r4, #4
 8007bac:	f020 0007 	bic.w	r0, r0, #7
 8007bb0:	1ac3      	subs	r3, r0, r3
 8007bb2:	d0d3      	beq.n	8007b5c <_malloc_r+0x20>
 8007bb4:	425a      	negs	r2, r3
 8007bb6:	50e2      	str	r2, [r4, r3]
 8007bb8:	e7d0      	b.n	8007b5c <_malloc_r+0x20>
 8007bba:	428c      	cmp	r4, r1
 8007bbc:	684b      	ldr	r3, [r1, #4]
 8007bbe:	bf16      	itet	ne
 8007bc0:	6063      	strne	r3, [r4, #4]
 8007bc2:	6013      	streq	r3, [r2, #0]
 8007bc4:	460c      	movne	r4, r1
 8007bc6:	e7eb      	b.n	8007ba0 <_malloc_r+0x64>
 8007bc8:	460c      	mov	r4, r1
 8007bca:	6849      	ldr	r1, [r1, #4]
 8007bcc:	e7cc      	b.n	8007b68 <_malloc_r+0x2c>
 8007bce:	1cc4      	adds	r4, r0, #3
 8007bd0:	f024 0403 	bic.w	r4, r4, #3
 8007bd4:	42a0      	cmp	r0, r4
 8007bd6:	d005      	beq.n	8007be4 <_malloc_r+0xa8>
 8007bd8:	1a21      	subs	r1, r4, r0
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f000 f808 	bl	8007bf0 <_sbrk_r>
 8007be0:	3001      	adds	r0, #1
 8007be2:	d0cf      	beq.n	8007b84 <_malloc_r+0x48>
 8007be4:	6025      	str	r5, [r4, #0]
 8007be6:	e7db      	b.n	8007ba0 <_malloc_r+0x64>
 8007be8:	200000c8 	.word	0x200000c8
 8007bec:	200000cc 	.word	0x200000cc

08007bf0 <_sbrk_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4c06      	ldr	r4, [pc, #24]	; (8007c0c <_sbrk_r+0x1c>)
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	4605      	mov	r5, r0
 8007bf8:	4608      	mov	r0, r1
 8007bfa:	6023      	str	r3, [r4, #0]
 8007bfc:	f7f9 f9d8 	bl	8000fb0 <_sbrk>
 8007c00:	1c43      	adds	r3, r0, #1
 8007c02:	d102      	bne.n	8007c0a <_sbrk_r+0x1a>
 8007c04:	6823      	ldr	r3, [r4, #0]
 8007c06:	b103      	cbz	r3, 8007c0a <_sbrk_r+0x1a>
 8007c08:	602b      	str	r3, [r5, #0]
 8007c0a:	bd38      	pop	{r3, r4, r5, pc}
 8007c0c:	20000af8 	.word	0x20000af8

08007c10 <siprintf>:
 8007c10:	b40e      	push	{r1, r2, r3}
 8007c12:	b500      	push	{lr}
 8007c14:	b09c      	sub	sp, #112	; 0x70
 8007c16:	ab1d      	add	r3, sp, #116	; 0x74
 8007c18:	9002      	str	r0, [sp, #8]
 8007c1a:	9006      	str	r0, [sp, #24]
 8007c1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c20:	4809      	ldr	r0, [pc, #36]	; (8007c48 <siprintf+0x38>)
 8007c22:	9107      	str	r1, [sp, #28]
 8007c24:	9104      	str	r1, [sp, #16]
 8007c26:	4909      	ldr	r1, [pc, #36]	; (8007c4c <siprintf+0x3c>)
 8007c28:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c2c:	9105      	str	r1, [sp, #20]
 8007c2e:	6800      	ldr	r0, [r0, #0]
 8007c30:	9301      	str	r3, [sp, #4]
 8007c32:	a902      	add	r1, sp, #8
 8007c34:	f000 f868 	bl	8007d08 <_svfiprintf_r>
 8007c38:	9b02      	ldr	r3, [sp, #8]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	701a      	strb	r2, [r3, #0]
 8007c3e:	b01c      	add	sp, #112	; 0x70
 8007c40:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c44:	b003      	add	sp, #12
 8007c46:	4770      	bx	lr
 8007c48:	2000000c 	.word	0x2000000c
 8007c4c:	ffff0208 	.word	0xffff0208

08007c50 <__malloc_lock>:
 8007c50:	4770      	bx	lr

08007c52 <__malloc_unlock>:
 8007c52:	4770      	bx	lr

08007c54 <__ssputs_r>:
 8007c54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c58:	688e      	ldr	r6, [r1, #8]
 8007c5a:	429e      	cmp	r6, r3
 8007c5c:	4682      	mov	sl, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	4690      	mov	r8, r2
 8007c62:	4699      	mov	r9, r3
 8007c64:	d837      	bhi.n	8007cd6 <__ssputs_r+0x82>
 8007c66:	898a      	ldrh	r2, [r1, #12]
 8007c68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007c6c:	d031      	beq.n	8007cd2 <__ssputs_r+0x7e>
 8007c6e:	6825      	ldr	r5, [r4, #0]
 8007c70:	6909      	ldr	r1, [r1, #16]
 8007c72:	1a6f      	subs	r7, r5, r1
 8007c74:	6965      	ldr	r5, [r4, #20]
 8007c76:	2302      	movs	r3, #2
 8007c78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c7c:	fb95 f5f3 	sdiv	r5, r5, r3
 8007c80:	f109 0301 	add.w	r3, r9, #1
 8007c84:	443b      	add	r3, r7
 8007c86:	429d      	cmp	r5, r3
 8007c88:	bf38      	it	cc
 8007c8a:	461d      	movcc	r5, r3
 8007c8c:	0553      	lsls	r3, r2, #21
 8007c8e:	d530      	bpl.n	8007cf2 <__ssputs_r+0x9e>
 8007c90:	4629      	mov	r1, r5
 8007c92:	f7ff ff53 	bl	8007b3c <_malloc_r>
 8007c96:	4606      	mov	r6, r0
 8007c98:	b950      	cbnz	r0, 8007cb0 <__ssputs_r+0x5c>
 8007c9a:	230c      	movs	r3, #12
 8007c9c:	f8ca 3000 	str.w	r3, [sl]
 8007ca0:	89a3      	ldrh	r3, [r4, #12]
 8007ca2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ca6:	81a3      	strh	r3, [r4, #12]
 8007ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8007cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb0:	463a      	mov	r2, r7
 8007cb2:	6921      	ldr	r1, [r4, #16]
 8007cb4:	f000 faa8 	bl	8008208 <memcpy>
 8007cb8:	89a3      	ldrh	r3, [r4, #12]
 8007cba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cc2:	81a3      	strh	r3, [r4, #12]
 8007cc4:	6126      	str	r6, [r4, #16]
 8007cc6:	6165      	str	r5, [r4, #20]
 8007cc8:	443e      	add	r6, r7
 8007cca:	1bed      	subs	r5, r5, r7
 8007ccc:	6026      	str	r6, [r4, #0]
 8007cce:	60a5      	str	r5, [r4, #8]
 8007cd0:	464e      	mov	r6, r9
 8007cd2:	454e      	cmp	r6, r9
 8007cd4:	d900      	bls.n	8007cd8 <__ssputs_r+0x84>
 8007cd6:	464e      	mov	r6, r9
 8007cd8:	4632      	mov	r2, r6
 8007cda:	4641      	mov	r1, r8
 8007cdc:	6820      	ldr	r0, [r4, #0]
 8007cde:	f000 fa9e 	bl	800821e <memmove>
 8007ce2:	68a3      	ldr	r3, [r4, #8]
 8007ce4:	1b9b      	subs	r3, r3, r6
 8007ce6:	60a3      	str	r3, [r4, #8]
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	441e      	add	r6, r3
 8007cec:	6026      	str	r6, [r4, #0]
 8007cee:	2000      	movs	r0, #0
 8007cf0:	e7dc      	b.n	8007cac <__ssputs_r+0x58>
 8007cf2:	462a      	mov	r2, r5
 8007cf4:	f000 faac 	bl	8008250 <_realloc_r>
 8007cf8:	4606      	mov	r6, r0
 8007cfa:	2800      	cmp	r0, #0
 8007cfc:	d1e2      	bne.n	8007cc4 <__ssputs_r+0x70>
 8007cfe:	6921      	ldr	r1, [r4, #16]
 8007d00:	4650      	mov	r0, sl
 8007d02:	f7ff fecd 	bl	8007aa0 <_free_r>
 8007d06:	e7c8      	b.n	8007c9a <__ssputs_r+0x46>

08007d08 <_svfiprintf_r>:
 8007d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d0c:	461d      	mov	r5, r3
 8007d0e:	898b      	ldrh	r3, [r1, #12]
 8007d10:	061f      	lsls	r7, r3, #24
 8007d12:	b09d      	sub	sp, #116	; 0x74
 8007d14:	4680      	mov	r8, r0
 8007d16:	460c      	mov	r4, r1
 8007d18:	4616      	mov	r6, r2
 8007d1a:	d50f      	bpl.n	8007d3c <_svfiprintf_r+0x34>
 8007d1c:	690b      	ldr	r3, [r1, #16]
 8007d1e:	b96b      	cbnz	r3, 8007d3c <_svfiprintf_r+0x34>
 8007d20:	2140      	movs	r1, #64	; 0x40
 8007d22:	f7ff ff0b 	bl	8007b3c <_malloc_r>
 8007d26:	6020      	str	r0, [r4, #0]
 8007d28:	6120      	str	r0, [r4, #16]
 8007d2a:	b928      	cbnz	r0, 8007d38 <_svfiprintf_r+0x30>
 8007d2c:	230c      	movs	r3, #12
 8007d2e:	f8c8 3000 	str.w	r3, [r8]
 8007d32:	f04f 30ff 	mov.w	r0, #4294967295
 8007d36:	e0c8      	b.n	8007eca <_svfiprintf_r+0x1c2>
 8007d38:	2340      	movs	r3, #64	; 0x40
 8007d3a:	6163      	str	r3, [r4, #20]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007d40:	2320      	movs	r3, #32
 8007d42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007d46:	2330      	movs	r3, #48	; 0x30
 8007d48:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007d4c:	9503      	str	r5, [sp, #12]
 8007d4e:	f04f 0b01 	mov.w	fp, #1
 8007d52:	4637      	mov	r7, r6
 8007d54:	463d      	mov	r5, r7
 8007d56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8007d5a:	b10b      	cbz	r3, 8007d60 <_svfiprintf_r+0x58>
 8007d5c:	2b25      	cmp	r3, #37	; 0x25
 8007d5e:	d13e      	bne.n	8007dde <_svfiprintf_r+0xd6>
 8007d60:	ebb7 0a06 	subs.w	sl, r7, r6
 8007d64:	d00b      	beq.n	8007d7e <_svfiprintf_r+0x76>
 8007d66:	4653      	mov	r3, sl
 8007d68:	4632      	mov	r2, r6
 8007d6a:	4621      	mov	r1, r4
 8007d6c:	4640      	mov	r0, r8
 8007d6e:	f7ff ff71 	bl	8007c54 <__ssputs_r>
 8007d72:	3001      	adds	r0, #1
 8007d74:	f000 80a4 	beq.w	8007ec0 <_svfiprintf_r+0x1b8>
 8007d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d7a:	4453      	add	r3, sl
 8007d7c:	9309      	str	r3, [sp, #36]	; 0x24
 8007d7e:	783b      	ldrb	r3, [r7, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 809d 	beq.w	8007ec0 <_svfiprintf_r+0x1b8>
 8007d86:	2300      	movs	r3, #0
 8007d88:	f04f 32ff 	mov.w	r2, #4294967295
 8007d8c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	9307      	str	r3, [sp, #28]
 8007d94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007d98:	931a      	str	r3, [sp, #104]	; 0x68
 8007d9a:	462f      	mov	r7, r5
 8007d9c:	2205      	movs	r2, #5
 8007d9e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007da2:	4850      	ldr	r0, [pc, #320]	; (8007ee4 <_svfiprintf_r+0x1dc>)
 8007da4:	f7f8 fa4c 	bl	8000240 <memchr>
 8007da8:	9b04      	ldr	r3, [sp, #16]
 8007daa:	b9d0      	cbnz	r0, 8007de2 <_svfiprintf_r+0xda>
 8007dac:	06d9      	lsls	r1, r3, #27
 8007dae:	bf44      	itt	mi
 8007db0:	2220      	movmi	r2, #32
 8007db2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007db6:	071a      	lsls	r2, r3, #28
 8007db8:	bf44      	itt	mi
 8007dba:	222b      	movmi	r2, #43	; 0x2b
 8007dbc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007dc0:	782a      	ldrb	r2, [r5, #0]
 8007dc2:	2a2a      	cmp	r2, #42	; 0x2a
 8007dc4:	d015      	beq.n	8007df2 <_svfiprintf_r+0xea>
 8007dc6:	9a07      	ldr	r2, [sp, #28]
 8007dc8:	462f      	mov	r7, r5
 8007dca:	2000      	movs	r0, #0
 8007dcc:	250a      	movs	r5, #10
 8007dce:	4639      	mov	r1, r7
 8007dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dd4:	3b30      	subs	r3, #48	; 0x30
 8007dd6:	2b09      	cmp	r3, #9
 8007dd8:	d94d      	bls.n	8007e76 <_svfiprintf_r+0x16e>
 8007dda:	b1b8      	cbz	r0, 8007e0c <_svfiprintf_r+0x104>
 8007ddc:	e00f      	b.n	8007dfe <_svfiprintf_r+0xf6>
 8007dde:	462f      	mov	r7, r5
 8007de0:	e7b8      	b.n	8007d54 <_svfiprintf_r+0x4c>
 8007de2:	4a40      	ldr	r2, [pc, #256]	; (8007ee4 <_svfiprintf_r+0x1dc>)
 8007de4:	1a80      	subs	r0, r0, r2
 8007de6:	fa0b f000 	lsl.w	r0, fp, r0
 8007dea:	4318      	orrs	r0, r3
 8007dec:	9004      	str	r0, [sp, #16]
 8007dee:	463d      	mov	r5, r7
 8007df0:	e7d3      	b.n	8007d9a <_svfiprintf_r+0x92>
 8007df2:	9a03      	ldr	r2, [sp, #12]
 8007df4:	1d11      	adds	r1, r2, #4
 8007df6:	6812      	ldr	r2, [r2, #0]
 8007df8:	9103      	str	r1, [sp, #12]
 8007dfa:	2a00      	cmp	r2, #0
 8007dfc:	db01      	blt.n	8007e02 <_svfiprintf_r+0xfa>
 8007dfe:	9207      	str	r2, [sp, #28]
 8007e00:	e004      	b.n	8007e0c <_svfiprintf_r+0x104>
 8007e02:	4252      	negs	r2, r2
 8007e04:	f043 0302 	orr.w	r3, r3, #2
 8007e08:	9207      	str	r2, [sp, #28]
 8007e0a:	9304      	str	r3, [sp, #16]
 8007e0c:	783b      	ldrb	r3, [r7, #0]
 8007e0e:	2b2e      	cmp	r3, #46	; 0x2e
 8007e10:	d10c      	bne.n	8007e2c <_svfiprintf_r+0x124>
 8007e12:	787b      	ldrb	r3, [r7, #1]
 8007e14:	2b2a      	cmp	r3, #42	; 0x2a
 8007e16:	d133      	bne.n	8007e80 <_svfiprintf_r+0x178>
 8007e18:	9b03      	ldr	r3, [sp, #12]
 8007e1a:	1d1a      	adds	r2, r3, #4
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	9203      	str	r2, [sp, #12]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	bfb8      	it	lt
 8007e24:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e28:	3702      	adds	r7, #2
 8007e2a:	9305      	str	r3, [sp, #20]
 8007e2c:	4d2e      	ldr	r5, [pc, #184]	; (8007ee8 <_svfiprintf_r+0x1e0>)
 8007e2e:	7839      	ldrb	r1, [r7, #0]
 8007e30:	2203      	movs	r2, #3
 8007e32:	4628      	mov	r0, r5
 8007e34:	f7f8 fa04 	bl	8000240 <memchr>
 8007e38:	b138      	cbz	r0, 8007e4a <_svfiprintf_r+0x142>
 8007e3a:	2340      	movs	r3, #64	; 0x40
 8007e3c:	1b40      	subs	r0, r0, r5
 8007e3e:	fa03 f000 	lsl.w	r0, r3, r0
 8007e42:	9b04      	ldr	r3, [sp, #16]
 8007e44:	4303      	orrs	r3, r0
 8007e46:	3701      	adds	r7, #1
 8007e48:	9304      	str	r3, [sp, #16]
 8007e4a:	7839      	ldrb	r1, [r7, #0]
 8007e4c:	4827      	ldr	r0, [pc, #156]	; (8007eec <_svfiprintf_r+0x1e4>)
 8007e4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007e52:	2206      	movs	r2, #6
 8007e54:	1c7e      	adds	r6, r7, #1
 8007e56:	f7f8 f9f3 	bl	8000240 <memchr>
 8007e5a:	2800      	cmp	r0, #0
 8007e5c:	d038      	beq.n	8007ed0 <_svfiprintf_r+0x1c8>
 8007e5e:	4b24      	ldr	r3, [pc, #144]	; (8007ef0 <_svfiprintf_r+0x1e8>)
 8007e60:	bb13      	cbnz	r3, 8007ea8 <_svfiprintf_r+0x1a0>
 8007e62:	9b03      	ldr	r3, [sp, #12]
 8007e64:	3307      	adds	r3, #7
 8007e66:	f023 0307 	bic.w	r3, r3, #7
 8007e6a:	3308      	adds	r3, #8
 8007e6c:	9303      	str	r3, [sp, #12]
 8007e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e70:	444b      	add	r3, r9
 8007e72:	9309      	str	r3, [sp, #36]	; 0x24
 8007e74:	e76d      	b.n	8007d52 <_svfiprintf_r+0x4a>
 8007e76:	fb05 3202 	mla	r2, r5, r2, r3
 8007e7a:	2001      	movs	r0, #1
 8007e7c:	460f      	mov	r7, r1
 8007e7e:	e7a6      	b.n	8007dce <_svfiprintf_r+0xc6>
 8007e80:	2300      	movs	r3, #0
 8007e82:	3701      	adds	r7, #1
 8007e84:	9305      	str	r3, [sp, #20]
 8007e86:	4619      	mov	r1, r3
 8007e88:	250a      	movs	r5, #10
 8007e8a:	4638      	mov	r0, r7
 8007e8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e90:	3a30      	subs	r2, #48	; 0x30
 8007e92:	2a09      	cmp	r2, #9
 8007e94:	d903      	bls.n	8007e9e <_svfiprintf_r+0x196>
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d0c8      	beq.n	8007e2c <_svfiprintf_r+0x124>
 8007e9a:	9105      	str	r1, [sp, #20]
 8007e9c:	e7c6      	b.n	8007e2c <_svfiprintf_r+0x124>
 8007e9e:	fb05 2101 	mla	r1, r5, r1, r2
 8007ea2:	2301      	movs	r3, #1
 8007ea4:	4607      	mov	r7, r0
 8007ea6:	e7f0      	b.n	8007e8a <_svfiprintf_r+0x182>
 8007ea8:	ab03      	add	r3, sp, #12
 8007eaa:	9300      	str	r3, [sp, #0]
 8007eac:	4622      	mov	r2, r4
 8007eae:	4b11      	ldr	r3, [pc, #68]	; (8007ef4 <_svfiprintf_r+0x1ec>)
 8007eb0:	a904      	add	r1, sp, #16
 8007eb2:	4640      	mov	r0, r8
 8007eb4:	f3af 8000 	nop.w
 8007eb8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007ebc:	4681      	mov	r9, r0
 8007ebe:	d1d6      	bne.n	8007e6e <_svfiprintf_r+0x166>
 8007ec0:	89a3      	ldrh	r3, [r4, #12]
 8007ec2:	065b      	lsls	r3, r3, #25
 8007ec4:	f53f af35 	bmi.w	8007d32 <_svfiprintf_r+0x2a>
 8007ec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007eca:	b01d      	add	sp, #116	; 0x74
 8007ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ed0:	ab03      	add	r3, sp, #12
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	4622      	mov	r2, r4
 8007ed6:	4b07      	ldr	r3, [pc, #28]	; (8007ef4 <_svfiprintf_r+0x1ec>)
 8007ed8:	a904      	add	r1, sp, #16
 8007eda:	4640      	mov	r0, r8
 8007edc:	f000 f882 	bl	8007fe4 <_printf_i>
 8007ee0:	e7ea      	b.n	8007eb8 <_svfiprintf_r+0x1b0>
 8007ee2:	bf00      	nop
 8007ee4:	08008814 	.word	0x08008814
 8007ee8:	0800881a 	.word	0x0800881a
 8007eec:	0800881e 	.word	0x0800881e
 8007ef0:	00000000 	.word	0x00000000
 8007ef4:	08007c55 	.word	0x08007c55

08007ef8 <_printf_common>:
 8007ef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007efc:	4691      	mov	r9, r2
 8007efe:	461f      	mov	r7, r3
 8007f00:	688a      	ldr	r2, [r1, #8]
 8007f02:	690b      	ldr	r3, [r1, #16]
 8007f04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f08:	4293      	cmp	r3, r2
 8007f0a:	bfb8      	it	lt
 8007f0c:	4613      	movlt	r3, r2
 8007f0e:	f8c9 3000 	str.w	r3, [r9]
 8007f12:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f16:	4606      	mov	r6, r0
 8007f18:	460c      	mov	r4, r1
 8007f1a:	b112      	cbz	r2, 8007f22 <_printf_common+0x2a>
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	f8c9 3000 	str.w	r3, [r9]
 8007f22:	6823      	ldr	r3, [r4, #0]
 8007f24:	0699      	lsls	r1, r3, #26
 8007f26:	bf42      	ittt	mi
 8007f28:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007f2c:	3302      	addmi	r3, #2
 8007f2e:	f8c9 3000 	strmi.w	r3, [r9]
 8007f32:	6825      	ldr	r5, [r4, #0]
 8007f34:	f015 0506 	ands.w	r5, r5, #6
 8007f38:	d107      	bne.n	8007f4a <_printf_common+0x52>
 8007f3a:	f104 0a19 	add.w	sl, r4, #25
 8007f3e:	68e3      	ldr	r3, [r4, #12]
 8007f40:	f8d9 2000 	ldr.w	r2, [r9]
 8007f44:	1a9b      	subs	r3, r3, r2
 8007f46:	42ab      	cmp	r3, r5
 8007f48:	dc28      	bgt.n	8007f9c <_printf_common+0xa4>
 8007f4a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007f4e:	6822      	ldr	r2, [r4, #0]
 8007f50:	3300      	adds	r3, #0
 8007f52:	bf18      	it	ne
 8007f54:	2301      	movne	r3, #1
 8007f56:	0692      	lsls	r2, r2, #26
 8007f58:	d42d      	bmi.n	8007fb6 <_printf_common+0xbe>
 8007f5a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007f5e:	4639      	mov	r1, r7
 8007f60:	4630      	mov	r0, r6
 8007f62:	47c0      	blx	r8
 8007f64:	3001      	adds	r0, #1
 8007f66:	d020      	beq.n	8007faa <_printf_common+0xb2>
 8007f68:	6823      	ldr	r3, [r4, #0]
 8007f6a:	68e5      	ldr	r5, [r4, #12]
 8007f6c:	f8d9 2000 	ldr.w	r2, [r9]
 8007f70:	f003 0306 	and.w	r3, r3, #6
 8007f74:	2b04      	cmp	r3, #4
 8007f76:	bf08      	it	eq
 8007f78:	1aad      	subeq	r5, r5, r2
 8007f7a:	68a3      	ldr	r3, [r4, #8]
 8007f7c:	6922      	ldr	r2, [r4, #16]
 8007f7e:	bf0c      	ite	eq
 8007f80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f84:	2500      	movne	r5, #0
 8007f86:	4293      	cmp	r3, r2
 8007f88:	bfc4      	itt	gt
 8007f8a:	1a9b      	subgt	r3, r3, r2
 8007f8c:	18ed      	addgt	r5, r5, r3
 8007f8e:	f04f 0900 	mov.w	r9, #0
 8007f92:	341a      	adds	r4, #26
 8007f94:	454d      	cmp	r5, r9
 8007f96:	d11a      	bne.n	8007fce <_printf_common+0xd6>
 8007f98:	2000      	movs	r0, #0
 8007f9a:	e008      	b.n	8007fae <_printf_common+0xb6>
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	4652      	mov	r2, sl
 8007fa0:	4639      	mov	r1, r7
 8007fa2:	4630      	mov	r0, r6
 8007fa4:	47c0      	blx	r8
 8007fa6:	3001      	adds	r0, #1
 8007fa8:	d103      	bne.n	8007fb2 <_printf_common+0xba>
 8007faa:	f04f 30ff 	mov.w	r0, #4294967295
 8007fae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fb2:	3501      	adds	r5, #1
 8007fb4:	e7c3      	b.n	8007f3e <_printf_common+0x46>
 8007fb6:	18e1      	adds	r1, r4, r3
 8007fb8:	1c5a      	adds	r2, r3, #1
 8007fba:	2030      	movs	r0, #48	; 0x30
 8007fbc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007fc0:	4422      	add	r2, r4
 8007fc2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007fc6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007fca:	3302      	adds	r3, #2
 8007fcc:	e7c5      	b.n	8007f5a <_printf_common+0x62>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4622      	mov	r2, r4
 8007fd2:	4639      	mov	r1, r7
 8007fd4:	4630      	mov	r0, r6
 8007fd6:	47c0      	blx	r8
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d0e6      	beq.n	8007faa <_printf_common+0xb2>
 8007fdc:	f109 0901 	add.w	r9, r9, #1
 8007fe0:	e7d8      	b.n	8007f94 <_printf_common+0x9c>
	...

08007fe4 <_printf_i>:
 8007fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007fe8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007fec:	460c      	mov	r4, r1
 8007fee:	7e09      	ldrb	r1, [r1, #24]
 8007ff0:	b085      	sub	sp, #20
 8007ff2:	296e      	cmp	r1, #110	; 0x6e
 8007ff4:	4617      	mov	r7, r2
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	4698      	mov	r8, r3
 8007ffa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ffc:	f000 80b3 	beq.w	8008166 <_printf_i+0x182>
 8008000:	d822      	bhi.n	8008048 <_printf_i+0x64>
 8008002:	2963      	cmp	r1, #99	; 0x63
 8008004:	d036      	beq.n	8008074 <_printf_i+0x90>
 8008006:	d80a      	bhi.n	800801e <_printf_i+0x3a>
 8008008:	2900      	cmp	r1, #0
 800800a:	f000 80b9 	beq.w	8008180 <_printf_i+0x19c>
 800800e:	2958      	cmp	r1, #88	; 0x58
 8008010:	f000 8083 	beq.w	800811a <_printf_i+0x136>
 8008014:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008018:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800801c:	e032      	b.n	8008084 <_printf_i+0xa0>
 800801e:	2964      	cmp	r1, #100	; 0x64
 8008020:	d001      	beq.n	8008026 <_printf_i+0x42>
 8008022:	2969      	cmp	r1, #105	; 0x69
 8008024:	d1f6      	bne.n	8008014 <_printf_i+0x30>
 8008026:	6820      	ldr	r0, [r4, #0]
 8008028:	6813      	ldr	r3, [r2, #0]
 800802a:	0605      	lsls	r5, r0, #24
 800802c:	f103 0104 	add.w	r1, r3, #4
 8008030:	d52a      	bpl.n	8008088 <_printf_i+0xa4>
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	6011      	str	r1, [r2, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	da03      	bge.n	8008042 <_printf_i+0x5e>
 800803a:	222d      	movs	r2, #45	; 0x2d
 800803c:	425b      	negs	r3, r3
 800803e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008042:	486f      	ldr	r0, [pc, #444]	; (8008200 <_printf_i+0x21c>)
 8008044:	220a      	movs	r2, #10
 8008046:	e039      	b.n	80080bc <_printf_i+0xd8>
 8008048:	2973      	cmp	r1, #115	; 0x73
 800804a:	f000 809d 	beq.w	8008188 <_printf_i+0x1a4>
 800804e:	d808      	bhi.n	8008062 <_printf_i+0x7e>
 8008050:	296f      	cmp	r1, #111	; 0x6f
 8008052:	d020      	beq.n	8008096 <_printf_i+0xb2>
 8008054:	2970      	cmp	r1, #112	; 0x70
 8008056:	d1dd      	bne.n	8008014 <_printf_i+0x30>
 8008058:	6823      	ldr	r3, [r4, #0]
 800805a:	f043 0320 	orr.w	r3, r3, #32
 800805e:	6023      	str	r3, [r4, #0]
 8008060:	e003      	b.n	800806a <_printf_i+0x86>
 8008062:	2975      	cmp	r1, #117	; 0x75
 8008064:	d017      	beq.n	8008096 <_printf_i+0xb2>
 8008066:	2978      	cmp	r1, #120	; 0x78
 8008068:	d1d4      	bne.n	8008014 <_printf_i+0x30>
 800806a:	2378      	movs	r3, #120	; 0x78
 800806c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008070:	4864      	ldr	r0, [pc, #400]	; (8008204 <_printf_i+0x220>)
 8008072:	e055      	b.n	8008120 <_printf_i+0x13c>
 8008074:	6813      	ldr	r3, [r2, #0]
 8008076:	1d19      	adds	r1, r3, #4
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6011      	str	r1, [r2, #0]
 800807c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008080:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008084:	2301      	movs	r3, #1
 8008086:	e08c      	b.n	80081a2 <_printf_i+0x1be>
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	6011      	str	r1, [r2, #0]
 800808c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008090:	bf18      	it	ne
 8008092:	b21b      	sxthne	r3, r3
 8008094:	e7cf      	b.n	8008036 <_printf_i+0x52>
 8008096:	6813      	ldr	r3, [r2, #0]
 8008098:	6825      	ldr	r5, [r4, #0]
 800809a:	1d18      	adds	r0, r3, #4
 800809c:	6010      	str	r0, [r2, #0]
 800809e:	0628      	lsls	r0, r5, #24
 80080a0:	d501      	bpl.n	80080a6 <_printf_i+0xc2>
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	e002      	b.n	80080ac <_printf_i+0xc8>
 80080a6:	0668      	lsls	r0, r5, #25
 80080a8:	d5fb      	bpl.n	80080a2 <_printf_i+0xbe>
 80080aa:	881b      	ldrh	r3, [r3, #0]
 80080ac:	4854      	ldr	r0, [pc, #336]	; (8008200 <_printf_i+0x21c>)
 80080ae:	296f      	cmp	r1, #111	; 0x6f
 80080b0:	bf14      	ite	ne
 80080b2:	220a      	movne	r2, #10
 80080b4:	2208      	moveq	r2, #8
 80080b6:	2100      	movs	r1, #0
 80080b8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80080bc:	6865      	ldr	r5, [r4, #4]
 80080be:	60a5      	str	r5, [r4, #8]
 80080c0:	2d00      	cmp	r5, #0
 80080c2:	f2c0 8095 	blt.w	80081f0 <_printf_i+0x20c>
 80080c6:	6821      	ldr	r1, [r4, #0]
 80080c8:	f021 0104 	bic.w	r1, r1, #4
 80080cc:	6021      	str	r1, [r4, #0]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d13d      	bne.n	800814e <_printf_i+0x16a>
 80080d2:	2d00      	cmp	r5, #0
 80080d4:	f040 808e 	bne.w	80081f4 <_printf_i+0x210>
 80080d8:	4665      	mov	r5, ip
 80080da:	2a08      	cmp	r2, #8
 80080dc:	d10b      	bne.n	80080f6 <_printf_i+0x112>
 80080de:	6823      	ldr	r3, [r4, #0]
 80080e0:	07db      	lsls	r3, r3, #31
 80080e2:	d508      	bpl.n	80080f6 <_printf_i+0x112>
 80080e4:	6923      	ldr	r3, [r4, #16]
 80080e6:	6862      	ldr	r2, [r4, #4]
 80080e8:	429a      	cmp	r2, r3
 80080ea:	bfde      	ittt	le
 80080ec:	2330      	movle	r3, #48	; 0x30
 80080ee:	f805 3c01 	strble.w	r3, [r5, #-1]
 80080f2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80080f6:	ebac 0305 	sub.w	r3, ip, r5
 80080fa:	6123      	str	r3, [r4, #16]
 80080fc:	f8cd 8000 	str.w	r8, [sp]
 8008100:	463b      	mov	r3, r7
 8008102:	aa03      	add	r2, sp, #12
 8008104:	4621      	mov	r1, r4
 8008106:	4630      	mov	r0, r6
 8008108:	f7ff fef6 	bl	8007ef8 <_printf_common>
 800810c:	3001      	adds	r0, #1
 800810e:	d14d      	bne.n	80081ac <_printf_i+0x1c8>
 8008110:	f04f 30ff 	mov.w	r0, #4294967295
 8008114:	b005      	add	sp, #20
 8008116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800811a:	4839      	ldr	r0, [pc, #228]	; (8008200 <_printf_i+0x21c>)
 800811c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008120:	6813      	ldr	r3, [r2, #0]
 8008122:	6821      	ldr	r1, [r4, #0]
 8008124:	1d1d      	adds	r5, r3, #4
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6015      	str	r5, [r2, #0]
 800812a:	060a      	lsls	r2, r1, #24
 800812c:	d50b      	bpl.n	8008146 <_printf_i+0x162>
 800812e:	07ca      	lsls	r2, r1, #31
 8008130:	bf44      	itt	mi
 8008132:	f041 0120 	orrmi.w	r1, r1, #32
 8008136:	6021      	strmi	r1, [r4, #0]
 8008138:	b91b      	cbnz	r3, 8008142 <_printf_i+0x15e>
 800813a:	6822      	ldr	r2, [r4, #0]
 800813c:	f022 0220 	bic.w	r2, r2, #32
 8008140:	6022      	str	r2, [r4, #0]
 8008142:	2210      	movs	r2, #16
 8008144:	e7b7      	b.n	80080b6 <_printf_i+0xd2>
 8008146:	064d      	lsls	r5, r1, #25
 8008148:	bf48      	it	mi
 800814a:	b29b      	uxthmi	r3, r3
 800814c:	e7ef      	b.n	800812e <_printf_i+0x14a>
 800814e:	4665      	mov	r5, ip
 8008150:	fbb3 f1f2 	udiv	r1, r3, r2
 8008154:	fb02 3311 	mls	r3, r2, r1, r3
 8008158:	5cc3      	ldrb	r3, [r0, r3]
 800815a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800815e:	460b      	mov	r3, r1
 8008160:	2900      	cmp	r1, #0
 8008162:	d1f5      	bne.n	8008150 <_printf_i+0x16c>
 8008164:	e7b9      	b.n	80080da <_printf_i+0xf6>
 8008166:	6813      	ldr	r3, [r2, #0]
 8008168:	6825      	ldr	r5, [r4, #0]
 800816a:	6961      	ldr	r1, [r4, #20]
 800816c:	1d18      	adds	r0, r3, #4
 800816e:	6010      	str	r0, [r2, #0]
 8008170:	0628      	lsls	r0, r5, #24
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	d501      	bpl.n	800817a <_printf_i+0x196>
 8008176:	6019      	str	r1, [r3, #0]
 8008178:	e002      	b.n	8008180 <_printf_i+0x19c>
 800817a:	066a      	lsls	r2, r5, #25
 800817c:	d5fb      	bpl.n	8008176 <_printf_i+0x192>
 800817e:	8019      	strh	r1, [r3, #0]
 8008180:	2300      	movs	r3, #0
 8008182:	6123      	str	r3, [r4, #16]
 8008184:	4665      	mov	r5, ip
 8008186:	e7b9      	b.n	80080fc <_printf_i+0x118>
 8008188:	6813      	ldr	r3, [r2, #0]
 800818a:	1d19      	adds	r1, r3, #4
 800818c:	6011      	str	r1, [r2, #0]
 800818e:	681d      	ldr	r5, [r3, #0]
 8008190:	6862      	ldr	r2, [r4, #4]
 8008192:	2100      	movs	r1, #0
 8008194:	4628      	mov	r0, r5
 8008196:	f7f8 f853 	bl	8000240 <memchr>
 800819a:	b108      	cbz	r0, 80081a0 <_printf_i+0x1bc>
 800819c:	1b40      	subs	r0, r0, r5
 800819e:	6060      	str	r0, [r4, #4]
 80081a0:	6863      	ldr	r3, [r4, #4]
 80081a2:	6123      	str	r3, [r4, #16]
 80081a4:	2300      	movs	r3, #0
 80081a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081aa:	e7a7      	b.n	80080fc <_printf_i+0x118>
 80081ac:	6923      	ldr	r3, [r4, #16]
 80081ae:	462a      	mov	r2, r5
 80081b0:	4639      	mov	r1, r7
 80081b2:	4630      	mov	r0, r6
 80081b4:	47c0      	blx	r8
 80081b6:	3001      	adds	r0, #1
 80081b8:	d0aa      	beq.n	8008110 <_printf_i+0x12c>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	079b      	lsls	r3, r3, #30
 80081be:	d413      	bmi.n	80081e8 <_printf_i+0x204>
 80081c0:	68e0      	ldr	r0, [r4, #12]
 80081c2:	9b03      	ldr	r3, [sp, #12]
 80081c4:	4298      	cmp	r0, r3
 80081c6:	bfb8      	it	lt
 80081c8:	4618      	movlt	r0, r3
 80081ca:	e7a3      	b.n	8008114 <_printf_i+0x130>
 80081cc:	2301      	movs	r3, #1
 80081ce:	464a      	mov	r2, r9
 80081d0:	4639      	mov	r1, r7
 80081d2:	4630      	mov	r0, r6
 80081d4:	47c0      	blx	r8
 80081d6:	3001      	adds	r0, #1
 80081d8:	d09a      	beq.n	8008110 <_printf_i+0x12c>
 80081da:	3501      	adds	r5, #1
 80081dc:	68e3      	ldr	r3, [r4, #12]
 80081de:	9a03      	ldr	r2, [sp, #12]
 80081e0:	1a9b      	subs	r3, r3, r2
 80081e2:	42ab      	cmp	r3, r5
 80081e4:	dcf2      	bgt.n	80081cc <_printf_i+0x1e8>
 80081e6:	e7eb      	b.n	80081c0 <_printf_i+0x1dc>
 80081e8:	2500      	movs	r5, #0
 80081ea:	f104 0919 	add.w	r9, r4, #25
 80081ee:	e7f5      	b.n	80081dc <_printf_i+0x1f8>
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d1ac      	bne.n	800814e <_printf_i+0x16a>
 80081f4:	7803      	ldrb	r3, [r0, #0]
 80081f6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081fa:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081fe:	e76c      	b.n	80080da <_printf_i+0xf6>
 8008200:	08008825 	.word	0x08008825
 8008204:	08008836 	.word	0x08008836

08008208 <memcpy>:
 8008208:	b510      	push	{r4, lr}
 800820a:	1e43      	subs	r3, r0, #1
 800820c:	440a      	add	r2, r1
 800820e:	4291      	cmp	r1, r2
 8008210:	d100      	bne.n	8008214 <memcpy+0xc>
 8008212:	bd10      	pop	{r4, pc}
 8008214:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800821c:	e7f7      	b.n	800820e <memcpy+0x6>

0800821e <memmove>:
 800821e:	4288      	cmp	r0, r1
 8008220:	b510      	push	{r4, lr}
 8008222:	eb01 0302 	add.w	r3, r1, r2
 8008226:	d807      	bhi.n	8008238 <memmove+0x1a>
 8008228:	1e42      	subs	r2, r0, #1
 800822a:	4299      	cmp	r1, r3
 800822c:	d00a      	beq.n	8008244 <memmove+0x26>
 800822e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008232:	f802 4f01 	strb.w	r4, [r2, #1]!
 8008236:	e7f8      	b.n	800822a <memmove+0xc>
 8008238:	4283      	cmp	r3, r0
 800823a:	d9f5      	bls.n	8008228 <memmove+0xa>
 800823c:	1881      	adds	r1, r0, r2
 800823e:	1ad2      	subs	r2, r2, r3
 8008240:	42d3      	cmn	r3, r2
 8008242:	d100      	bne.n	8008246 <memmove+0x28>
 8008244:	bd10      	pop	{r4, pc}
 8008246:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800824a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800824e:	e7f7      	b.n	8008240 <memmove+0x22>

08008250 <_realloc_r>:
 8008250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008252:	4607      	mov	r7, r0
 8008254:	4614      	mov	r4, r2
 8008256:	460e      	mov	r6, r1
 8008258:	b921      	cbnz	r1, 8008264 <_realloc_r+0x14>
 800825a:	4611      	mov	r1, r2
 800825c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008260:	f7ff bc6c 	b.w	8007b3c <_malloc_r>
 8008264:	b922      	cbnz	r2, 8008270 <_realloc_r+0x20>
 8008266:	f7ff fc1b 	bl	8007aa0 <_free_r>
 800826a:	4625      	mov	r5, r4
 800826c:	4628      	mov	r0, r5
 800826e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008270:	f000 f814 	bl	800829c <_malloc_usable_size_r>
 8008274:	42a0      	cmp	r0, r4
 8008276:	d20f      	bcs.n	8008298 <_realloc_r+0x48>
 8008278:	4621      	mov	r1, r4
 800827a:	4638      	mov	r0, r7
 800827c:	f7ff fc5e 	bl	8007b3c <_malloc_r>
 8008280:	4605      	mov	r5, r0
 8008282:	2800      	cmp	r0, #0
 8008284:	d0f2      	beq.n	800826c <_realloc_r+0x1c>
 8008286:	4631      	mov	r1, r6
 8008288:	4622      	mov	r2, r4
 800828a:	f7ff ffbd 	bl	8008208 <memcpy>
 800828e:	4631      	mov	r1, r6
 8008290:	4638      	mov	r0, r7
 8008292:	f7ff fc05 	bl	8007aa0 <_free_r>
 8008296:	e7e9      	b.n	800826c <_realloc_r+0x1c>
 8008298:	4635      	mov	r5, r6
 800829a:	e7e7      	b.n	800826c <_realloc_r+0x1c>

0800829c <_malloc_usable_size_r>:
 800829c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082a0:	1f18      	subs	r0, r3, #4
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	bfbc      	itt	lt
 80082a6:	580b      	ldrlt	r3, [r1, r0]
 80082a8:	18c0      	addlt	r0, r0, r3
 80082aa:	4770      	bx	lr

080082ac <_init>:
 80082ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ae:	bf00      	nop
 80082b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082b2:	bc08      	pop	{r3}
 80082b4:	469e      	mov	lr, r3
 80082b6:	4770      	bx	lr

080082b8 <_fini>:
 80082b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082ba:	bf00      	nop
 80082bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082be:	bc08      	pop	{r3}
 80082c0:	469e      	mov	lr, r3
 80082c2:	4770      	bx	lr
