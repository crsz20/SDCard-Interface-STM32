
SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9e0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007ee8  0800bbb0  0800bbb0  0001bbb0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013a98  08013a98  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08013a98  08013a98  00023a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013aa0  08013aa0  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013aa0  08013aa0  00023aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08013aa4  08013aa4  00023aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08013aa8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cec  200001e0  08013c84  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ecc  08013c84  00030ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000139a5  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002ab1  00000000  00000000  00043bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ca8  00000000  00000000  00046668  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b70  00000000  00000000  00047310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000245fd  00000000  00000000  00047e80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d490  00000000  00000000  0006c47d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cde69  00000000  00000000  0007990d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00147776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004294  00000000  00000000  001477f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bb98 	.word	0x0800bb98

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800bb98 	.word	0x0800bb98

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b972 	b.w	8000f04 <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9e08      	ldr	r6, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	4688      	mov	r8, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d14b      	bne.n	8000cde <__udivmoddi4+0xa6>
 8000c46:	428a      	cmp	r2, r1
 8000c48:	4615      	mov	r5, r2
 8000c4a:	d967      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000c4c:	fab2 f282 	clz	r2, r2
 8000c50:	b14a      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c52:	f1c2 0720 	rsb	r7, r2, #32
 8000c56:	fa01 f302 	lsl.w	r3, r1, r2
 8000c5a:	fa20 f707 	lsr.w	r7, r0, r7
 8000c5e:	4095      	lsls	r5, r2
 8000c60:	ea47 0803 	orr.w	r8, r7, r3
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c70:	fa1f fc85 	uxth.w	ip, r5
 8000c74:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c78:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c7c:	fb07 f10c 	mul.w	r1, r7, ip
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18eb      	adds	r3, r5, r3
 8000c86:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c8a:	f080 811b 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8118 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000c94:	3f02      	subs	r7, #2
 8000c96:	442b      	add	r3, r5
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ca0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cac:	45a4      	cmp	ip, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	192c      	adds	r4, r5, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8107 	bcs.w	8000ec8 <__udivmoddi4+0x290>
 8000cba:	45a4      	cmp	ip, r4
 8000cbc:	f240 8104 	bls.w	8000ec8 <__udivmoddi4+0x290>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	442c      	add	r4, r5
 8000cc4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cc8:	eba4 040c 	sub.w	r4, r4, ip
 8000ccc:	2700      	movs	r7, #0
 8000cce:	b11e      	cbz	r6, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c6 4300 	strd	r4, r3, [r6]
 8000cd8:	4639      	mov	r1, r7
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	428b      	cmp	r3, r1
 8000ce0:	d909      	bls.n	8000cf6 <__udivmoddi4+0xbe>
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	f000 80eb 	beq.w	8000ebe <__udivmoddi4+0x286>
 8000ce8:	2700      	movs	r7, #0
 8000cea:	e9c6 0100 	strd	r0, r1, [r6]
 8000cee:	4638      	mov	r0, r7
 8000cf0:	4639      	mov	r1, r7
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	fab3 f783 	clz	r7, r3
 8000cfa:	2f00      	cmp	r7, #0
 8000cfc:	d147      	bne.n	8000d8e <__udivmoddi4+0x156>
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d302      	bcc.n	8000d08 <__udivmoddi4+0xd0>
 8000d02:	4282      	cmp	r2, r0
 8000d04:	f200 80fa 	bhi.w	8000efc <__udivmoddi4+0x2c4>
 8000d08:	1a84      	subs	r4, r0, r2
 8000d0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d0e:	2001      	movs	r0, #1
 8000d10:	4698      	mov	r8, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d0e0      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d16:	e9c6 4800 	strd	r4, r8, [r6]
 8000d1a:	e7dd      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d1c:	b902      	cbnz	r2, 8000d20 <__udivmoddi4+0xe8>
 8000d1e:	deff      	udf	#255	; 0xff
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	2a00      	cmp	r2, #0
 8000d26:	f040 808f 	bne.w	8000e48 <__udivmoddi4+0x210>
 8000d2a:	1b49      	subs	r1, r1, r5
 8000d2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d30:	fa1f f885 	uxth.w	r8, r5
 8000d34:	2701      	movs	r7, #1
 8000d36:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d3a:	0c23      	lsrs	r3, r4, #16
 8000d3c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d40:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d44:	fb08 f10c 	mul.w	r1, r8, ip
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x124>
 8000d4c:	18eb      	adds	r3, r5, r3
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x122>
 8000d54:	4299      	cmp	r1, r3
 8000d56:	f200 80cd 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1a59      	subs	r1, r3, r1
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d68:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x14c>
 8000d74:	192c      	adds	r4, r5, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x14a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80b6 	bhi.w	8000eee <__udivmoddi4+0x2b6>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e79f      	b.n	8000cce <__udivmoddi4+0x96>
 8000d8e:	f1c7 0c20 	rsb	ip, r7, #32
 8000d92:	40bb      	lsls	r3, r7
 8000d94:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d98:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d9c:	fa01 f407 	lsl.w	r4, r1, r7
 8000da0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000da4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000da8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000dac:	4325      	orrs	r5, r4
 8000dae:	fbb3 f9f8 	udiv	r9, r3, r8
 8000db2:	0c2c      	lsrs	r4, r5, #16
 8000db4:	fb08 3319 	mls	r3, r8, r9, r3
 8000db8:	fa1f fa8e 	uxth.w	sl, lr
 8000dbc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000dc0:	fb09 f40a 	mul.w	r4, r9, sl
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	fa02 f207 	lsl.w	r2, r2, r7
 8000dca:	fa00 f107 	lsl.w	r1, r0, r7
 8000dce:	d90b      	bls.n	8000de8 <__udivmoddi4+0x1b0>
 8000dd0:	eb1e 0303 	adds.w	r3, lr, r3
 8000dd4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000dd8:	f080 8087 	bcs.w	8000eea <__udivmoddi4+0x2b2>
 8000ddc:	429c      	cmp	r4, r3
 8000dde:	f240 8084 	bls.w	8000eea <__udivmoddi4+0x2b2>
 8000de2:	f1a9 0902 	sub.w	r9, r9, #2
 8000de6:	4473      	add	r3, lr
 8000de8:	1b1b      	subs	r3, r3, r4
 8000dea:	b2ad      	uxth	r5, r5
 8000dec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000df0:	fb08 3310 	mls	r3, r8, r0, r3
 8000df4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000df8:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dfc:	45a2      	cmp	sl, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x1da>
 8000e00:	eb1e 0404 	adds.w	r4, lr, r4
 8000e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e08:	d26b      	bcs.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0a:	45a2      	cmp	sl, r4
 8000e0c:	d969      	bls.n	8000ee2 <__udivmoddi4+0x2aa>
 8000e0e:	3802      	subs	r0, #2
 8000e10:	4474      	add	r4, lr
 8000e12:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e16:	fba0 8902 	umull	r8, r9, r0, r2
 8000e1a:	eba4 040a 	sub.w	r4, r4, sl
 8000e1e:	454c      	cmp	r4, r9
 8000e20:	46c2      	mov	sl, r8
 8000e22:	464b      	mov	r3, r9
 8000e24:	d354      	bcc.n	8000ed0 <__udivmoddi4+0x298>
 8000e26:	d051      	beq.n	8000ecc <__udivmoddi4+0x294>
 8000e28:	2e00      	cmp	r6, #0
 8000e2a:	d069      	beq.n	8000f00 <__udivmoddi4+0x2c8>
 8000e2c:	ebb1 050a 	subs.w	r5, r1, sl
 8000e30:	eb64 0403 	sbc.w	r4, r4, r3
 8000e34:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e38:	40fd      	lsrs	r5, r7
 8000e3a:	40fc      	lsrs	r4, r7
 8000e3c:	ea4c 0505 	orr.w	r5, ip, r5
 8000e40:	e9c6 5400 	strd	r5, r4, [r6]
 8000e44:	2700      	movs	r7, #0
 8000e46:	e747      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000e48:	f1c2 0320 	rsb	r3, r2, #32
 8000e4c:	fa20 f703 	lsr.w	r7, r0, r3
 8000e50:	4095      	lsls	r5, r2
 8000e52:	fa01 f002 	lsl.w	r0, r1, r2
 8000e56:	fa21 f303 	lsr.w	r3, r1, r3
 8000e5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e5e:	4338      	orrs	r0, r7
 8000e60:	0c01      	lsrs	r1, r0, #16
 8000e62:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e66:	fa1f f885 	uxth.w	r8, r5
 8000e6a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb07 f308 	mul.w	r3, r7, r8
 8000e76:	428b      	cmp	r3, r1
 8000e78:	fa04 f402 	lsl.w	r4, r4, r2
 8000e7c:	d907      	bls.n	8000e8e <__udivmoddi4+0x256>
 8000e7e:	1869      	adds	r1, r5, r1
 8000e80:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e84:	d22f      	bcs.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d92d      	bls.n	8000ee6 <__udivmoddi4+0x2ae>
 8000e8a:	3f02      	subs	r7, #2
 8000e8c:	4429      	add	r1, r5
 8000e8e:	1acb      	subs	r3, r1, r3
 8000e90:	b281      	uxth	r1, r0
 8000e92:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e96:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e9a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e9e:	fb00 f308 	mul.w	r3, r0, r8
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d907      	bls.n	8000eb6 <__udivmoddi4+0x27e>
 8000ea6:	1869      	adds	r1, r5, r1
 8000ea8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000eac:	d217      	bcs.n	8000ede <__udivmoddi4+0x2a6>
 8000eae:	428b      	cmp	r3, r1
 8000eb0:	d915      	bls.n	8000ede <__udivmoddi4+0x2a6>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	4429      	add	r1, r5
 8000eb6:	1ac9      	subs	r1, r1, r3
 8000eb8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ebc:	e73b      	b.n	8000d36 <__udivmoddi4+0xfe>
 8000ebe:	4637      	mov	r7, r6
 8000ec0:	4630      	mov	r0, r6
 8000ec2:	e709      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec4:	4607      	mov	r7, r0
 8000ec6:	e6e7      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec8:	4618      	mov	r0, r3
 8000eca:	e6fb      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ecc:	4541      	cmp	r1, r8
 8000ece:	d2ab      	bcs.n	8000e28 <__udivmoddi4+0x1f0>
 8000ed0:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ed4:	eb69 020e 	sbc.w	r2, r9, lr
 8000ed8:	3801      	subs	r0, #1
 8000eda:	4613      	mov	r3, r2
 8000edc:	e7a4      	b.n	8000e28 <__udivmoddi4+0x1f0>
 8000ede:	4660      	mov	r0, ip
 8000ee0:	e7e9      	b.n	8000eb6 <__udivmoddi4+0x27e>
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	e795      	b.n	8000e12 <__udivmoddi4+0x1da>
 8000ee6:	4667      	mov	r7, ip
 8000ee8:	e7d1      	b.n	8000e8e <__udivmoddi4+0x256>
 8000eea:	4681      	mov	r9, r0
 8000eec:	e77c      	b.n	8000de8 <__udivmoddi4+0x1b0>
 8000eee:	3802      	subs	r0, #2
 8000ef0:	442c      	add	r4, r5
 8000ef2:	e747      	b.n	8000d84 <__udivmoddi4+0x14c>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	442b      	add	r3, r5
 8000efa:	e72f      	b.n	8000d5c <__udivmoddi4+0x124>
 8000efc:	4638      	mov	r0, r7
 8000efe:	e708      	b.n	8000d12 <__udivmoddi4+0xda>
 8000f00:	4637      	mov	r7, r6
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0xa0>

08000f04 <__aeabi_idiv0>:
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop

08000f08 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b089      	sub	sp, #36	; 0x24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (src <= 0x80) {	/* ASCII */
 8000f14:	88fb      	ldrh	r3, [r7, #6]
 8000f16:	2b80      	cmp	r3, #128	; 0x80
 8000f18:	d802      	bhi.n	8000f20 <ff_convert+0x18>
		c = src;
 8000f1a:	88fb      	ldrh	r3, [r7, #6]
 8000f1c:	837b      	strh	r3, [r7, #26]
 8000f1e:	e053      	b.n	8000fc8 <ff_convert+0xc0>
			else
				hi = i;
		}
		c = n ? p[i * 2 + 1] : 0;
#else
		if (dir) {		/* OEMCP to unicode (Incremental search)*/
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d015      	beq.n	8000f52 <ff_convert+0x4a>
			p = &uni2sjis[1];
 8000f26:	4b2c      	ldr	r3, [pc, #176]	; (8000fd8 <ff_convert+0xd0>)
 8000f28:	61fb      	str	r3, [r7, #28]
			do {
				c = *p;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	837b      	strh	r3, [r7, #26]
				p += 2;
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	3304      	adds	r3, #4
 8000f34:	61fb      	str	r3, [r7, #28]
			} while (c && c != src);
 8000f36:	8b7b      	ldrh	r3, [r7, #26]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d003      	beq.n	8000f44 <ff_convert+0x3c>
 8000f3c:	8b7a      	ldrh	r2, [r7, #26]
 8000f3e:	88fb      	ldrh	r3, [r7, #6]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d1f2      	bne.n	8000f2a <ff_convert+0x22>
			p -= 3;
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	3b06      	subs	r3, #6
 8000f48:	61fb      	str	r3, [r7, #28]
			c = *p;
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	881b      	ldrh	r3, [r3, #0]
 8000f4e:	837b      	strh	r3, [r7, #26]
 8000f50:	e03a      	b.n	8000fc8 <ff_convert+0xc0>
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60fb      	str	r3, [r7, #12]
 8000f56:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 8000f5a:	60bb      	str	r3, [r7, #8]
			for (n = 16; n; n--) {
 8000f5c:	2310      	movs	r3, #16
 8000f5e:	613b      	str	r3, [r7, #16]
 8000f60:	e021      	b.n	8000fa6 <ff_convert+0x9e>
				i = li + (hi - li) / 2;
 8000f62:	68ba      	ldr	r2, [r7, #8]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	0fda      	lsrs	r2, r3, #31
 8000f6a:	4413      	add	r3, r2
 8000f6c:	105b      	asrs	r3, r3, #1
 8000f6e:	461a      	mov	r2, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	4413      	add	r3, r2
 8000f74:	617b      	str	r3, [r7, #20]
				if (src == uni2sjis[i * 2]) break;
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4a18      	ldr	r2, [pc, #96]	; (8000fdc <ff_convert+0xd4>)
 8000f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f80:	88fa      	ldrh	r2, [r7, #6]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d013      	beq.n	8000fae <ff_convert+0xa6>
				if (src > uni2sjis[i * 2])
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4a14      	ldr	r2, [pc, #80]	; (8000fdc <ff_convert+0xd4>)
 8000f8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f90:	88fa      	ldrh	r2, [r7, #6]
 8000f92:	429a      	cmp	r2, r3
 8000f94:	d902      	bls.n	8000f9c <ff_convert+0x94>
					li = i;
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	e001      	b.n	8000fa0 <ff_convert+0x98>
				else
					hi = i;
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	60bb      	str	r3, [r7, #8]
			for (n = 16; n; n--) {
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1da      	bne.n	8000f62 <ff_convert+0x5a>
 8000fac:	e000      	b.n	8000fb0 <ff_convert+0xa8>
				if (src == uni2sjis[i * 2]) break;
 8000fae:	bf00      	nop
			}
			c = n ? uni2sjis[i * 2 + 1] : 0;
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d006      	beq.n	8000fc4 <ff_convert+0xbc>
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	3301      	adds	r3, #1
 8000fbc:	4a07      	ldr	r2, [pc, #28]	; (8000fdc <ff_convert+0xd4>)
 8000fbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fc2:	e000      	b.n	8000fc6 <ff_convert+0xbe>
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	837b      	strh	r3, [r7, #26]
		}
#endif
	}

	return c;
 8000fc8:	8b7b      	ldrh	r3, [r7, #26]
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3724      	adds	r7, #36	; 0x24
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	0800c3ae 	.word	0x0800c3ae
 8000fdc:	0800c3ac 	.word	0x0800c3ac

08000fe0 <ff_wtoupper>:

WCHAR ff_wtoupper(WCHAR chr)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	80fb      	strh	r3, [r7, #6]
	if(chr >= 'a' && chr <= 'z')
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	2b60      	cmp	r3, #96	; 0x60
 8000fee:	d906      	bls.n	8000ffe <ff_wtoupper+0x1e>
 8000ff0:	88fb      	ldrh	r3, [r7, #6]
 8000ff2:	2b7a      	cmp	r3, #122	; 0x7a
 8000ff4:	d803      	bhi.n	8000ffe <ff_wtoupper+0x1e>
		return (chr - 32);
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
 8000ff8:	3b20      	subs	r3, #32
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	e000      	b.n	8001000 <ff_wtoupper+0x20>
	else
		return chr;
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
}
 8001000:	4618      	mov	r0, r3
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr

0800100c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001014:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001018:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800101c:	f003 0301 	and.w	r3, r3, #1
 8001020:	2b00      	cmp	r3, #0
 8001022:	d013      	beq.n	800104c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001024:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001028:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800102c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001030:	2b00      	cmp	r3, #0
 8001032:	d00b      	beq.n	800104c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001034:	e000      	b.n	8001038 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001036:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001038:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f9      	beq.n	8001036 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001042:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001046:	687a      	ldr	r2, [r7, #4]
 8001048:	b2d2      	uxtb	r2, r2
 800104a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <_write>:
uint32_t total, free_space;



int _write(int file, char *ptr, int len)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b086      	sub	sp, #24
 800105e:	af00      	add	r7, sp, #0
 8001060:	60f8      	str	r0, [r7, #12]
 8001062:	60b9      	str	r1, [r7, #8]
 8001064:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 8001066:	2300      	movs	r3, #0
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	e009      	b.n	8001080 <_write+0x26>
		ITM_SendChar((*ptr++));
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	60ba      	str	r2, [r7, #8]
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff ffc9 	bl	800100c <ITM_SendChar>
	for(int i=0; i<len; i++)
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	3301      	adds	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697a      	ldr	r2, [r7, #20]
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	429a      	cmp	r2, r3
 8001086:	dbf1      	blt.n	800106c <_write+0x12>

	return len;
 8001088:	687b      	ldr	r3, [r7, #4]
}
 800108a:	4618      	mov	r0, r3
 800108c:	3718      	adds	r7, #24
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
	...

08001094 <Mount_SD>:


void Mount_SD (const TCHAR* path)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 800109c:	2201      	movs	r2, #1
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	480a      	ldr	r0, [pc, #40]	; (80010cc <Mount_SD+0x38>)
 80010a2:	f007 f891 	bl	80081c8 <f_mount>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <Mount_SD+0x3c>)
 80010ac:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) printf("ERROR!!! in mounting SD CARD...\n");
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <Mount_SD+0x3c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <Mount_SD+0x2a>
 80010b6:	4807      	ldr	r0, [pc, #28]	; (80010d4 <Mount_SD+0x40>)
 80010b8:	f008 fd6c 	bl	8009b94 <puts>
	else printf("SD CARD mounted successfully...\n");
}
 80010bc:	e002      	b.n	80010c4 <Mount_SD+0x30>
	else printf("SD CARD mounted successfully...\n");
 80010be:	4806      	ldr	r0, [pc, #24]	; (80010d8 <Mount_SD+0x44>)
 80010c0:	f008 fd68 	bl	8009b94 <puts>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000424 	.word	0x20000424
 80010d0:	20000668 	.word	0x20000668
 80010d4:	0800bbb0 	.word	0x0800bbb0
 80010d8:	0800bbd0 	.word	0x0800bbd0

080010dc <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80010e4:	2201      	movs	r2, #1
 80010e6:	6879      	ldr	r1, [r7, #4]
 80010e8:	2000      	movs	r0, #0
 80010ea:	f007 f86d 	bl	80081c8 <f_mount>
 80010ee:	4603      	mov	r3, r0
 80010f0:	461a      	mov	r2, r3
 80010f2:	4b08      	ldr	r3, [pc, #32]	; (8001114 <Unmount_SD+0x38>)
 80010f4:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) printf("SD CARD UNMOUNTED successfully...\n\n");
 80010f6:	4b07      	ldr	r3, [pc, #28]	; (8001114 <Unmount_SD+0x38>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d103      	bne.n	8001106 <Unmount_SD+0x2a>
 80010fe:	4806      	ldr	r0, [pc, #24]	; (8001118 <Unmount_SD+0x3c>)
 8001100:	f008 fd48 	bl	8009b94 <puts>
	else printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 8001104:	e002      	b.n	800110c <Unmount_SD+0x30>
	else printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <Unmount_SD+0x40>)
 8001108:	f008 fd44 	bl	8009b94 <puts>
}
 800110c:	bf00      	nop
 800110e:	3708      	adds	r7, #8
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000668 	.word	0x20000668
 8001118:	0800bbf0 	.word	0x0800bbf0
 800111c:	0800bc14 	.word	0x0800bc14

08001120 <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08e      	sub	sp, #56	; 0x38
 8001124:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 8001126:	2014      	movs	r0, #20
 8001128:	f007 ffa4 	bl	8009074 <malloc>
 800112c:	4603      	mov	r3, r0
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 8001130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001132:	4929      	ldr	r1, [pc, #164]	; (80011d8 <Format_SD+0xb8>)
 8001134:	461a      	mov	r2, r3
 8001136:	460b      	mov	r3, r1
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	8013      	strh	r3, [r2, #0]

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 800113c:	463b      	mov	r3, r7
 800113e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001140:	4618      	mov	r0, r3
 8001142:	f007 fcee 	bl	8008b22 <f_opendir>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	4b24      	ldr	r3, [pc, #144]	; (80011dc <Format_SD+0xbc>)
 800114c:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 800114e:	4b23      	ldr	r3, [pc, #140]	; (80011dc <Format_SD+0xbc>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d136      	bne.n	80011c4 <Format_SD+0xa4>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001156:	463b      	mov	r3, r7
 8001158:	4921      	ldr	r1, [pc, #132]	; (80011e0 <Format_SD+0xc0>)
 800115a:	4618      	mov	r0, r3
 800115c:	f007 fda5 	bl	8008caa <f_readdir>
 8001160:	4603      	mov	r3, r0
 8001162:	461a      	mov	r2, r3
 8001164:	4b1d      	ldr	r3, [pc, #116]	; (80011dc <Format_SD+0xbc>)
 8001166:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 8001168:	4b1c      	ldr	r3, [pc, #112]	; (80011dc <Format_SD+0xbc>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d125      	bne.n	80011bc <Format_SD+0x9c>
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <Format_SD+0xc0>)
 8001172:	7d9b      	ldrb	r3, [r3, #22]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d021      	beq.n	80011bc <Format_SD+0x9c>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <Format_SD+0xc0>)
 800117a:	7a1b      	ldrb	r3, [r3, #8]
 800117c:	f003 0310 	and.w	r3, r3, #16
 8001180:	2b00      	cmp	r3, #0
 8001182:	d011      	beq.n	80011a8 <Format_SD+0x88>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001184:	4917      	ldr	r1, [pc, #92]	; (80011e4 <Format_SD+0xc4>)
 8001186:	4818      	ldr	r0, [pc, #96]	; (80011e8 <Format_SD+0xc8>)
 8001188:	f7ff f842 	bl	8000210 <strcmp>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d012      	beq.n	80011b8 <Format_SD+0x98>
            	fresult = f_unlink(fno.fname);
 8001192:	4814      	ldr	r0, [pc, #80]	; (80011e4 <Format_SD+0xc4>)
 8001194:	f007 fe26 	bl	8008de4 <f_unlink>
 8001198:	4603      	mov	r3, r0
 800119a:	461a      	mov	r2, r3
 800119c:	4b0f      	ldr	r3, [pc, #60]	; (80011dc <Format_SD+0xbc>)
 800119e:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <Format_SD+0xbc>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b07      	cmp	r3, #7
 80011a6:	e7d6      	b.n	8001156 <Format_SD+0x36>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 80011a8:	480e      	ldr	r0, [pc, #56]	; (80011e4 <Format_SD+0xc4>)
 80011aa:	f007 fe1b 	bl	8008de4 <f_unlink>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <Format_SD+0xbc>)
 80011b4:	701a      	strb	r2, [r3, #0]
 80011b6:	e7ce      	b.n	8001156 <Format_SD+0x36>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 80011b8:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80011ba:	e7cc      	b.n	8001156 <Format_SD+0x36>
            }
        }
        f_closedir(&dir);
 80011bc:	463b      	mov	r3, r7
 80011be:	4618      	mov	r0, r3
 80011c0:	f007 fd4d 	bl	8008c5e <f_closedir>
    }
    free(path);
 80011c4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80011c6:	f007 ff5d 	bl	8009084 <free>
    return fresult;
 80011ca:	4b04      	ldr	r3, [pc, #16]	; (80011dc <Format_SD+0xbc>)
 80011cc:	781b      	ldrb	r3, [r3, #0]
}
 80011ce:	4618      	mov	r0, r3
 80011d0:	3738      	adds	r7, #56	; 0x38
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	0800bc60 	.word	0x0800bc60
 80011dc:	20000668 	.word	0x20000668
 80011e0:	2000030c 	.word	0x2000030c
 80011e4:	20000322 	.word	0x20000322
 80011e8:	0800bc34 	.word	0x0800bc34

080011ec <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b088      	sub	sp, #32
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 80011f4:	4943      	ldr	r1, [pc, #268]	; (8001304 <Create_File+0x118>)
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f007 fdaf 	bl	8008d5a <f_stat>
 80011fc:	4603      	mov	r3, r0
 80011fe:	461a      	mov	r2, r3
 8001200:	4b41      	ldr	r3, [pc, #260]	; (8001308 <Create_File+0x11c>)
 8001202:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001204:	4b40      	ldr	r3, [pc, #256]	; (8001308 <Create_File+0x11c>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d112      	bne.n	8001232 <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 800120c:	2064      	movs	r0, #100	; 0x64
 800120e:	f007 ff31 	bl	8009074 <malloc>
 8001212:	4603      	mov	r3, r0
 8001214:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",name);
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	493c      	ldr	r1, [pc, #240]	; (800130c <Create_File+0x120>)
 800121a:	68f8      	ldr	r0, [r7, #12]
 800121c:	f008 fd06 	bl	8009c2c <siprintf>
		printf(buf);
 8001220:	68f8      	ldr	r0, [r7, #12]
 8001222:	f008 fc43 	bl	8009aac <iprintf>
		free(buf);
 8001226:	68f8      	ldr	r0, [r7, #12]
 8001228:	f007 ff2c 	bl	8009084 <free>
	    return fresult;
 800122c:	4b36      	ldr	r3, [pc, #216]	; (8001308 <Create_File+0x11c>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	e063      	b.n	80012fa <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8001232:	220b      	movs	r2, #11
 8001234:	6879      	ldr	r1, [r7, #4]
 8001236:	4836      	ldr	r0, [pc, #216]	; (8001310 <Create_File+0x124>)
 8001238:	f007 f80c 	bl	8008254 <f_open>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b31      	ldr	r3, [pc, #196]	; (8001308 <Create_File+0x11c>)
 8001242:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001244:	4b30      	ldr	r3, [pc, #192]	; (8001308 <Create_File+0x11c>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d015      	beq.n	8001278 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f007 ff11 	bl	8009074 <malloc>
 8001252:	4603      	mov	r3, r0
 8001254:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n", fresult, name);
 8001256:	4b2c      	ldr	r3, [pc, #176]	; (8001308 <Create_File+0x11c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	492d      	ldr	r1, [pc, #180]	; (8001314 <Create_File+0x128>)
 8001260:	6938      	ldr	r0, [r7, #16]
 8001262:	f008 fce3 	bl	8009c2c <siprintf>
			printf(buf);
 8001266:	6938      	ldr	r0, [r7, #16]
 8001268:	f008 fc20 	bl	8009aac <iprintf>
			free(buf);
 800126c:	6938      	ldr	r0, [r7, #16]
 800126e:	f007 ff09 	bl	8009084 <free>
		    return fresult;
 8001272:	4b25      	ldr	r3, [pc, #148]	; (8001308 <Create_File+0x11c>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	e040      	b.n	80012fa <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001278:	2064      	movs	r0, #100	; 0x64
 800127a:	f007 fefb 	bl	8009074 <malloc>
 800127e:	4603      	mov	r3, r0
 8001280:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	4924      	ldr	r1, [pc, #144]	; (8001318 <Create_File+0x12c>)
 8001286:	69f8      	ldr	r0, [r7, #28]
 8001288:	f008 fcd0 	bl	8009c2c <siprintf>
			printf(buf);
 800128c:	69f8      	ldr	r0, [r7, #28]
 800128e:	f008 fc0d 	bl	8009aac <iprintf>
			free(buf);
 8001292:	69f8      	ldr	r0, [r7, #28]
 8001294:	f007 fef6 	bl	8009084 <free>
		}

		fresult = f_close(&fil);
 8001298:	481d      	ldr	r0, [pc, #116]	; (8001310 <Create_File+0x124>)
 800129a:	f007 fc18 	bl	8008ace <f_close>
 800129e:	4603      	mov	r3, r0
 80012a0:	461a      	mov	r2, r3
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <Create_File+0x11c>)
 80012a4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80012a6:	4b18      	ldr	r3, [pc, #96]	; (8001308 <Create_File+0x11c>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d013      	beq.n	80012d6 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 80012ae:	2064      	movs	r0, #100	; 0x64
 80012b0:	f007 fee0 	bl	8009074 <malloc>
 80012b4:	4603      	mov	r3, r0
 80012b6:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <Create_File+0x11c>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	461a      	mov	r2, r3
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	4916      	ldr	r1, [pc, #88]	; (800131c <Create_File+0x130>)
 80012c2:	6978      	ldr	r0, [r7, #20]
 80012c4:	f008 fcb2 	bl	8009c2c <siprintf>
			printf(buf);
 80012c8:	6978      	ldr	r0, [r7, #20]
 80012ca:	f008 fbef 	bl	8009aac <iprintf>
			free(buf);
 80012ce:	6978      	ldr	r0, [r7, #20]
 80012d0:	f007 fed8 	bl	8009084 <free>
 80012d4:	e00f      	b.n	80012f6 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80012d6:	2064      	movs	r0, #100	; 0x64
 80012d8:	f007 fecc 	bl	8009074 <malloc>
 80012dc:	4603      	mov	r3, r0
 80012de:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	490f      	ldr	r1, [pc, #60]	; (8001320 <Create_File+0x134>)
 80012e4:	69b8      	ldr	r0, [r7, #24]
 80012e6:	f008 fca1 	bl	8009c2c <siprintf>
			printf(buf);
 80012ea:	69b8      	ldr	r0, [r7, #24]
 80012ec:	f008 fbde 	bl	8009aac <iprintf>
			free(buf);
 80012f0:	69b8      	ldr	r0, [r7, #24]
 80012f2:	f007 fec7 	bl	8009084 <free>
		}
	}
    return fresult;
 80012f6:	4b04      	ldr	r3, [pc, #16]	; (8001308 <Create_File+0x11c>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3720      	adds	r7, #32
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
 8001302:	bf00      	nop
 8001304:	2000030c 	.word	0x2000030c
 8001308:	20000668 	.word	0x20000668
 800130c:	0800bdd4 	.word	0x0800bdd4
 8001310:	20000670 	.word	0x20000670
 8001314:	0800be08 	.word	0x0800be08
 8001318:	0800be30 	.word	0x0800be30
 800131c:	0800be70 	.word	0x0800be70
 8001320:	0800bdb4 	.word	0x0800bdb4

08001324 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b088      	sub	sp, #32
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800132e:	4956      	ldr	r1, [pc, #344]	; (8001488 <Update_File+0x164>)
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f007 fd12 	bl	8008d5a <f_stat>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b54      	ldr	r3, [pc, #336]	; (800148c <Update_File+0x168>)
 800133c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800133e:	4b53      	ldr	r3, [pc, #332]	; (800148c <Update_File+0x168>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d012      	beq.n	800136c <Update_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 8001346:	2064      	movs	r0, #100	; 0x64
 8001348:	f007 fe94 	bl	8009074 <malloc>
 800134c:	4603      	mov	r3, r0
 800134e:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n", name);
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	494f      	ldr	r1, [pc, #316]	; (8001490 <Update_File+0x16c>)
 8001354:	68b8      	ldr	r0, [r7, #8]
 8001356:	f008 fc69 	bl	8009c2c <siprintf>
		printf (buf);
 800135a:	68b8      	ldr	r0, [r7, #8]
 800135c:	f008 fba6 	bl	8009aac <iprintf>
		free(buf);
 8001360:	68b8      	ldr	r0, [r7, #8]
 8001362:	f007 fe8f 	bl	8009084 <free>
	    return fresult;
 8001366:	4b49      	ldr	r3, [pc, #292]	; (800148c <Update_File+0x168>)
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	e088      	b.n	800147e <Update_File+0x15a>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 800136c:	2232      	movs	r2, #50	; 0x32
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4848      	ldr	r0, [pc, #288]	; (8001494 <Update_File+0x170>)
 8001372:	f006 ff6f 	bl	8008254 <f_open>
 8001376:	4603      	mov	r3, r0
 8001378:	461a      	mov	r2, r3
 800137a:	4b44      	ldr	r3, [pc, #272]	; (800148c <Update_File+0x168>)
 800137c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800137e:	4b43      	ldr	r3, [pc, #268]	; (800148c <Update_File+0x168>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d015      	beq.n	80013b2 <Update_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001386:	2064      	movs	r0, #100	; 0x64
 8001388:	f007 fe74 	bl	8009074 <malloc>
 800138c:	4603      	mov	r3, r0
 800138e:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n", fresult, name);
 8001390:	4b3e      	ldr	r3, [pc, #248]	; (800148c <Update_File+0x168>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	461a      	mov	r2, r3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	493f      	ldr	r1, [pc, #252]	; (8001498 <Update_File+0x174>)
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f008 fc46 	bl	8009c2c <siprintf>
	    	printf(buf);
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f008 fb83 	bl	8009aac <iprintf>
	        free(buf);
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f007 fe6c 	bl	8009084 <free>
	        return fresult;
 80013ac:	4b37      	ldr	r3, [pc, #220]	; (800148c <Update_File+0x168>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	e065      	b.n	800147e <Update_File+0x15a>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80013b2:	6838      	ldr	r0, [r7, #0]
 80013b4:	f7fe ff36 	bl	8000224 <strlen>
 80013b8:	4602      	mov	r2, r0
 80013ba:	4b38      	ldr	r3, [pc, #224]	; (800149c <Update_File+0x178>)
 80013bc:	6839      	ldr	r1, [r7, #0]
 80013be:	4835      	ldr	r0, [pc, #212]	; (8001494 <Update_File+0x170>)
 80013c0:	f007 f992 	bl	80086e8 <f_write>
 80013c4:	4603      	mov	r3, r0
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b30      	ldr	r3, [pc, #192]	; (800148c <Update_File+0x168>)
 80013ca:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80013cc:	4b2f      	ldr	r3, [pc, #188]	; (800148c <Update_File+0x168>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d013      	beq.n	80013fc <Update_File+0xd8>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013d4:	2064      	movs	r0, #100	; 0x64
 80013d6:	f007 fe4d 	bl	8009074 <malloc>
 80013da:	4603      	mov	r3, r0
 80013dc:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n", fresult, name);
 80013de:	4b2b      	ldr	r3, [pc, #172]	; (800148c <Update_File+0x168>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	461a      	mov	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	492e      	ldr	r1, [pc, #184]	; (80014a0 <Update_File+0x17c>)
 80013e8:	69b8      	ldr	r0, [r7, #24]
 80013ea:	f008 fc1f 	bl	8009c2c <siprintf>
	    	printf(buf);
 80013ee:	69b8      	ldr	r0, [r7, #24]
 80013f0:	f008 fb5c 	bl	8009aac <iprintf>
	    	free(buf);
 80013f4:	69b8      	ldr	r0, [r7, #24]
 80013f6:	f007 fe45 	bl	8009084 <free>
 80013fa:	e00f      	b.n	800141c <Update_File+0xf8>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013fc:	2064      	movs	r0, #100	; 0x64
 80013fe:	f007 fe39 	bl	8009074 <malloc>
 8001402:	4603      	mov	r3, r0
 8001404:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	4926      	ldr	r1, [pc, #152]	; (80014a4 <Update_File+0x180>)
 800140a:	69f8      	ldr	r0, [r7, #28]
 800140c:	f008 fc0e 	bl	8009c2c <siprintf>
	    	printf(buf);
 8001410:	69f8      	ldr	r0, [r7, #28]
 8001412:	f008 fb4b 	bl	8009aac <iprintf>
	    	free(buf);
 8001416:	69f8      	ldr	r0, [r7, #28]
 8001418:	f007 fe34 	bl	8009084 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 800141c:	481d      	ldr	r0, [pc, #116]	; (8001494 <Update_File+0x170>)
 800141e:	f007 fb56 	bl	8008ace <f_close>
 8001422:	4603      	mov	r3, r0
 8001424:	461a      	mov	r2, r3
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <Update_File+0x168>)
 8001428:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <Update_File+0x168>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d013      	beq.n	800145a <Update_File+0x136>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001432:	2064      	movs	r0, #100	; 0x64
 8001434:	f007 fe1e 	bl	8009074 <malloc>
 8001438:	4603      	mov	r3, r0
 800143a:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n", fresult, name);
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <Update_File+0x168>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4918      	ldr	r1, [pc, #96]	; (80014a8 <Update_File+0x184>)
 8001446:	6938      	ldr	r0, [r7, #16]
 8001448:	f008 fbf0 	bl	8009c2c <siprintf>
	    	printf(buf);
 800144c:	6938      	ldr	r0, [r7, #16]
 800144e:	f008 fb2d 	bl	8009aac <iprintf>
	    	free(buf);
 8001452:	6938      	ldr	r0, [r7, #16]
 8001454:	f007 fe16 	bl	8009084 <free>
 8001458:	e00f      	b.n	800147a <Update_File+0x156>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800145a:	2064      	movs	r0, #100	; 0x64
 800145c:	f007 fe0a 	bl	8009074 <malloc>
 8001460:	4603      	mov	r3, r0
 8001462:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	4911      	ldr	r1, [pc, #68]	; (80014ac <Update_File+0x188>)
 8001468:	6978      	ldr	r0, [r7, #20]
 800146a:	f008 fbdf 	bl	8009c2c <siprintf>
	    	printf(buf);
 800146e:	6978      	ldr	r0, [r7, #20]
 8001470:	f008 fb1c 	bl	8009aac <iprintf>
	    	free(buf);
 8001474:	6978      	ldr	r0, [r7, #20]
 8001476:	f007 fe05 	bl	8009084 <free>
	     }
	}
    return fresult;
 800147a:	4b04      	ldr	r3, [pc, #16]	; (800148c <Update_File+0x168>)
 800147c:	781b      	ldrb	r3, [r3, #0]
}
 800147e:	4618      	mov	r0, r3
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	2000030c 	.word	0x2000030c
 800148c:	20000668 	.word	0x20000668
 8001490:	0800bc64 	.word	0x0800bc64
 8001494:	20000670 	.word	0x20000670
 8001498:	0800bc84 	.word	0x0800bc84
 800149c:	20000660 	.word	0x20000660
 80014a0:	0800be94 	.word	0x0800be94
 80014a4:	0800bebc 	.word	0x0800bebc
 80014a8:	0800bd8c 	.word	0x0800bd8c
 80014ac:	0800bdb4 	.word	0x0800bdb4

080014b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b09d      	sub	sp, #116	; 0x74
 80014b4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014b6:	f000 ffa9 	bl	800240c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ba:	f000 f8ef 	bl	800169c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014be:	f000 f999 	bl	80017f4 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80014c2:	f000 f977 	bl	80017b4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80014c6:	f004 f9ad 	bl	8005824 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	/* Initialize all configured peripherals */
    MX_GPIO_Init();
 80014ca:	f000 f993 	bl	80017f4 <MX_GPIO_Init>
    MX_SDIO_SD_Init();
 80014ce:	f000 f971 	bl	80017b4 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 80014d2:	f004 f9a7 	bl	8005824 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */

    //Create new file with a GPS naming convention
	second = 53;
 80014d6:	4b66      	ldr	r3, [pc, #408]	; (8001670 <main+0x1c0>)
 80014d8:	2235      	movs	r2, #53	; 0x35
 80014da:	601a      	str	r2, [r3, #0]
	minute = 33;
 80014dc:	4b65      	ldr	r3, [pc, #404]	; (8001674 <main+0x1c4>)
 80014de:	2221      	movs	r2, #33	; 0x21
 80014e0:	601a      	str	r2, [r3, #0]
	hour = 14;
 80014e2:	4b65      	ldr	r3, [pc, #404]	; (8001678 <main+0x1c8>)
 80014e4:	220e      	movs	r2, #14
 80014e6:	601a      	str	r2, [r3, #0]
	day = 24;
 80014e8:	4b64      	ldr	r3, [pc, #400]	; (800167c <main+0x1cc>)
 80014ea:	2218      	movs	r2, #24
 80014ec:	601a      	str	r2, [r3, #0]
	month = 3;
 80014ee:	4b64      	ldr	r3, [pc, #400]	; (8001680 <main+0x1d0>)
 80014f0:	2203      	movs	r2, #3
 80014f2:	601a      	str	r2, [r3, #0]
	year = 2021;
 80014f4:	4b63      	ldr	r3, [pc, #396]	; (8001684 <main+0x1d4>)
 80014f6:	f240 72e5 	movw	r2, #2021	; 0x7e5
 80014fa:	601a      	str	r2, [r3, #0]
	char dayS[12], monthS[12], yearS[12], hourS[12], minuteS[12], secondS[12];
	sprintf(dayS, "%d", day);
 80014fc:	4b5f      	ldr	r3, [pc, #380]	; (800167c <main+0x1cc>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001504:	4960      	ldr	r1, [pc, #384]	; (8001688 <main+0x1d8>)
 8001506:	4618      	mov	r0, r3
 8001508:	f008 fb90 	bl	8009c2c <siprintf>
	sprintf(monthS, "%d", month);
 800150c:	4b5c      	ldr	r3, [pc, #368]	; (8001680 <main+0x1d0>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001514:	495c      	ldr	r1, [pc, #368]	; (8001688 <main+0x1d8>)
 8001516:	4618      	mov	r0, r3
 8001518:	f008 fb88 	bl	8009c2c <siprintf>
	sprintf(yearS, "%d", year);
 800151c:	4b59      	ldr	r3, [pc, #356]	; (8001684 <main+0x1d4>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001524:	4958      	ldr	r1, [pc, #352]	; (8001688 <main+0x1d8>)
 8001526:	4618      	mov	r0, r3
 8001528:	f008 fb80 	bl	8009c2c <siprintf>
	sprintf(hourS, "%d", hour);
 800152c:	4b52      	ldr	r3, [pc, #328]	; (8001678 <main+0x1c8>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4954      	ldr	r1, [pc, #336]	; (8001688 <main+0x1d8>)
 8001536:	4618      	mov	r0, r3
 8001538:	f008 fb78 	bl	8009c2c <siprintf>
	sprintf(minuteS, "%d", minute);
 800153c:	4b4d      	ldr	r3, [pc, #308]	; (8001674 <main+0x1c4>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	f107 0310 	add.w	r3, r7, #16
 8001544:	4950      	ldr	r1, [pc, #320]	; (8001688 <main+0x1d8>)
 8001546:	4618      	mov	r0, r3
 8001548:	f008 fb70 	bl	8009c2c <siprintf>
	sprintf(secondS, "%d", second);
 800154c:	4b48      	ldr	r3, [pc, #288]	; (8001670 <main+0x1c0>)
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	494d      	ldr	r1, [pc, #308]	; (8001688 <main+0x1d8>)
 8001554:	4618      	mov	r0, r3
 8001556:	f008 fb69 	bl	8009c2c <siprintf>
	int lenF = strlen("DFR_")+strlen(dayS)+strlen("-")+strlen(monthS)+strlen("-")+strlen(yearS)+strlen("_")+strlen(secondS)+strlen("-")+strlen(minuteS)+strlen("-")+strlen(hourS)+strlen(".csv")+1;
 800155a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800155e:	4618      	mov	r0, r3
 8001560:	f7fe fe60 	bl	8000224 <strlen>
 8001564:	4604      	mov	r4, r0
 8001566:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800156a:	4618      	mov	r0, r3
 800156c:	f7fe fe5a 	bl	8000224 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	441c      	add	r4, r3
 8001574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe fe53 	bl	8000224 <strlen>
 800157e:	4603      	mov	r3, r0
 8001580:	441c      	add	r4, r3
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	4618      	mov	r0, r3
 8001586:	f7fe fe4d 	bl	8000224 <strlen>
 800158a:	4603      	mov	r3, r0
 800158c:	441c      	add	r4, r3
 800158e:	f107 0310 	add.w	r3, r7, #16
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fe46 	bl	8000224 <strlen>
 8001598:	4603      	mov	r3, r0
 800159a:	441c      	add	r4, r3
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe fe3f 	bl	8000224 <strlen>
 80015a6:	4603      	mov	r3, r0
 80015a8:	4423      	add	r3, r4
 80015aa:	330e      	adds	r3, #14
 80015ac:	657b      	str	r3, [r7, #84]	; 0x54
	char FileName[lenF];
 80015ae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80015b0:	1e43      	subs	r3, r0, #1
 80015b2:	653b      	str	r3, [r7, #80]	; 0x50
 80015b4:	4603      	mov	r3, r0
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	f04f 0400 	mov.w	r4, #0
 80015c4:	00d4      	lsls	r4, r2, #3
 80015c6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80015ca:	00cb      	lsls	r3, r1, #3
 80015cc:	4603      	mov	r3, r0
 80015ce:	4619      	mov	r1, r3
 80015d0:	f04f 0200 	mov.w	r2, #0
 80015d4:	f04f 0300 	mov.w	r3, #0
 80015d8:	f04f 0400 	mov.w	r4, #0
 80015dc:	00d4      	lsls	r4, r2, #3
 80015de:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80015e2:	00cb      	lsls	r3, r1, #3
 80015e4:	4603      	mov	r3, r0
 80015e6:	3307      	adds	r3, #7
 80015e8:	08db      	lsrs	r3, r3, #3
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	ebad 0d03 	sub.w	sp, sp, r3
 80015f0:	ab06      	add	r3, sp, #24
 80015f2:	3300      	adds	r3, #0
 80015f4:	64fb      	str	r3, [r7, #76]	; 0x4c
	snprintf(FileName,lenF,"DFR_%s-%s-%s_%s-%s-%s.CSV", dayS, monthS, yearS, secondS, minuteS, hourS);
 80015f6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80015f8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80015fa:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80015fe:	f107 031c 	add.w	r3, r7, #28
 8001602:	9304      	str	r3, [sp, #16]
 8001604:	f107 0310 	add.w	r3, r7, #16
 8001608:	9303      	str	r3, [sp, #12]
 800160a:	1d3b      	adds	r3, r7, #4
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	4613      	mov	r3, r2
 800161c:	4a1b      	ldr	r2, [pc, #108]	; (800168c <main+0x1dc>)
 800161e:	f008 fad1 	bl	8009bc4 <sniprintf>
	//sprintf(FileName,"DFR_%d-%d-%d_%d-%d-%d.CSV", day, month, year, second, minute, hour);

	Mount_SD("/");
 8001622:	481b      	ldr	r0, [pc, #108]	; (8001690 <main+0x1e0>)
 8001624:	f7ff fd36 	bl	8001094 <Mount_SD>
	Format_SD();
 8001628:	f7ff fd7a 	bl	8001120 <Format_SD>
	Create_File(FileName);
 800162c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800162e:	4618      	mov	r0, r3
 8001630:	f7ff fddc 	bl	80011ec <Create_File>
	Unmount_SD("/");
 8001634:	4816      	ldr	r0, [pc, #88]	; (8001690 <main+0x1e0>)
 8001636:	f7ff fd51 	bl	80010dc <Unmount_SD>



	csvHeader(FileName, lenF);
 800163a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800163c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800163e:	4618      	mov	r0, r3
 8001640:	f000 f966 	bl	8001910 <csvHeader>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		csvUpdate(FileName, lenF);
 8001644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001646:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fb53 	bl	8001cf4 <csvUpdate>
		indx++;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <main+0x1e4>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	3301      	adds	r3, #1
 8001654:	4a0f      	ldr	r2, [pc, #60]	; (8001694 <main+0x1e4>)
 8001656:	6013      	str	r3, [r2, #0]
		printf("\n Count: %d \n", indx);
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <main+0x1e4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	480e      	ldr	r0, [pc, #56]	; (8001698 <main+0x1e8>)
 8001660:	f008 fa24 	bl	8009aac <iprintf>

		HAL_Delay(2000);
 8001664:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001668:	f000 ff42 	bl	80024f0 <HAL_Delay>
		csvUpdate(FileName, lenF);
 800166c:	e7ea      	b.n	8001644 <main+0x194>
 800166e:	bf00      	nop
 8001670:	200008cc 	.word	0x200008cc
 8001674:	200008d4 	.word	0x200008d4
 8001678:	20000964 	.word	0x20000964
 800167c:	20000a18 	.word	0x20000a18
 8001680:	200008c8 	.word	0x200008c8
 8001684:	20000a0c 	.word	0x20000a0c
 8001688:	0800bfa8 	.word	0x0800bfa8
 800168c:	0800bfac 	.word	0x0800bfac
 8001690:	0800bfc8 	.word	0x0800bfc8
 8001694:	200002c4 	.word	0x200002c4
 8001698:	0800bfcc 	.word	0x0800bfcc

0800169c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b0ac      	sub	sp, #176	; 0xb0
 80016a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80016a6:	2234      	movs	r2, #52	; 0x34
 80016a8:	2100      	movs	r1, #0
 80016aa:	4618      	mov	r0, r3
 80016ac:	f007 fcf2 	bl	8009094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
 80016be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016c0:	f107 030c 	add.w	r3, r7, #12
 80016c4:	225c      	movs	r2, #92	; 0x5c
 80016c6:	2100      	movs	r1, #0
 80016c8:	4618      	mov	r0, r3
 80016ca:	f007 fce3 	bl	8009094 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	4b36      	ldr	r3, [pc, #216]	; (80017ac <SystemClock_Config+0x110>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a35      	ldr	r2, [pc, #212]	; (80017ac <SystemClock_Config+0x110>)
 80016d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b33      	ldr	r3, [pc, #204]	; (80017ac <SystemClock_Config+0x110>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80016ea:	2300      	movs	r3, #0
 80016ec:	607b      	str	r3, [r7, #4]
 80016ee:	4b30      	ldr	r3, [pc, #192]	; (80017b0 <SystemClock_Config+0x114>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80016f6:	4a2e      	ldr	r2, [pc, #184]	; (80017b0 <SystemClock_Config+0x114>)
 80016f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	4b2c      	ldr	r3, [pc, #176]	; (80017b0 <SystemClock_Config+0x114>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800170a:	2301      	movs	r3, #1
 800170c:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800170e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001712:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001716:	2302      	movs	r3, #2
 8001718:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800171c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001720:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001724:	2308      	movs	r3, #8
 8001726:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 100;
 800172a:	2364      	movs	r3, #100	; 0x64
 800172c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001730:	2302      	movs	r3, #2
 8001732:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001736:	2303      	movs	r3, #3
 8001738:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 800173c:	2302      	movs	r3, #2
 800173e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001742:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001746:	4618      	mov	r0, r3
 8001748:	f001 ff36 	bl	80035b8 <HAL_RCC_OscConfig>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8001752:	f000 fccd 	bl	80020f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001756:	230f      	movs	r3, #15
 8001758:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800175a:	2302      	movs	r3, #2
 800175c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800175e:	2300      	movs	r3, #0
 8001760:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001762:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001766:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001768:	2300      	movs	r3, #0
 800176a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800176c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001770:	2101      	movs	r1, #1
 8001772:	4618      	mov	r0, r3
 8001774:	f001 f970 	bl	8002a58 <HAL_RCC_ClockConfig>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800177e:	f000 fcb7 	bl	80020f0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8001782:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001786:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001788:	2300      	movs	r3, #0
 800178a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 800178c:	2300      	movs	r3, #0
 800178e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001790:	f107 030c 	add.w	r3, r7, #12
 8001794:	4618      	mov	r0, r3
 8001796:	f001 fa45 	bl	8002c24 <HAL_RCCEx_PeriphCLKConfig>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <SystemClock_Config+0x108>
  {
    Error_Handler();
 80017a0:	f000 fca6 	bl	80020f0 <Error_Handler>
  }
}
 80017a4:	bf00      	nop
 80017a6:	37b0      	adds	r7, #176	; 0xb0
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40007000 	.word	0x40007000

080017b4 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_SDIO_SD_Init+0x38>)
 80017ba:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <MX_SDIO_SD_Init+0x3c>)
 80017bc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_SDIO_SD_Init+0x38>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_SDIO_SD_Init+0x38>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_SDIO_SD_Init+0x38>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_SDIO_SD_Init+0x38>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80017d6:	4b05      	ldr	r3, [pc, #20]	; (80017ec <MX_SDIO_SD_Init+0x38>)
 80017d8:	2200      	movs	r2, #0
 80017da:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 16;
 80017dc:	4b03      	ldr	r3, [pc, #12]	; (80017ec <MX_SDIO_SD_Init+0x38>)
 80017de:	2210      	movs	r2, #16
 80017e0:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	20000978 	.word	0x20000978
 80017f0:	40012c00 	.word	0x40012c00

080017f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	; 0x28
 80017f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017fa:	f107 0314 	add.w	r3, r7, #20
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
 8001808:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <MX_GPIO_Init+0x10c>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a3b      	ldr	r2, [pc, #236]	; (8001900 <MX_GPIO_Init+0x10c>)
 8001814:	f043 0304 	orr.w	r3, r3, #4
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b39      	ldr	r3, [pc, #228]	; (8001900 <MX_GPIO_Init+0x10c>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0304 	and.w	r3, r3, #4
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b35      	ldr	r3, [pc, #212]	; (8001900 <MX_GPIO_Init+0x10c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	4a34      	ldr	r2, [pc, #208]	; (8001900 <MX_GPIO_Init+0x10c>)
 8001830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001834:	6313      	str	r3, [r2, #48]	; 0x30
 8001836:	4b32      	ldr	r3, [pc, #200]	; (8001900 <MX_GPIO_Init+0x10c>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	4b2e      	ldr	r3, [pc, #184]	; (8001900 <MX_GPIO_Init+0x10c>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	4a2d      	ldr	r2, [pc, #180]	; (8001900 <MX_GPIO_Init+0x10c>)
 800184c:	f043 0301 	orr.w	r3, r3, #1
 8001850:	6313      	str	r3, [r2, #48]	; 0x30
 8001852:	4b2b      	ldr	r3, [pc, #172]	; (8001900 <MX_GPIO_Init+0x10c>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	607b      	str	r3, [r7, #4]
 8001862:	4b27      	ldr	r3, [pc, #156]	; (8001900 <MX_GPIO_Init+0x10c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a26      	ldr	r2, [pc, #152]	; (8001900 <MX_GPIO_Init+0x10c>)
 8001868:	f043 0308 	orr.w	r3, r3, #8
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <MX_GPIO_Init+0x10c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0308 	and.w	r3, r3, #8
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	603b      	str	r3, [r7, #0]
 800187e:	4b20      	ldr	r3, [pc, #128]	; (8001900 <MX_GPIO_Init+0x10c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a1f      	ldr	r2, [pc, #124]	; (8001900 <MX_GPIO_Init+0x10c>)
 8001884:	f043 0302 	orr.w	r3, r3, #2
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b1d      	ldr	r3, [pc, #116]	; (8001900 <MX_GPIO_Init+0x10c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	603b      	str	r3, [r7, #0]
 8001894:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001896:	2200      	movs	r2, #0
 8001898:	2120      	movs	r1, #32
 800189a:	481a      	ldr	r0, [pc, #104]	; (8001904 <MX_GPIO_Init+0x110>)
 800189c:	f001 f8c2 	bl	8002a24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018a6:	4b18      	ldr	r3, [pc, #96]	; (8001908 <MX_GPIO_Init+0x114>)
 80018a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018ae:	f107 0314 	add.w	r3, r7, #20
 80018b2:	4619      	mov	r1, r3
 80018b4:	4815      	ldr	r0, [pc, #84]	; (800190c <MX_GPIO_Init+0x118>)
 80018b6:	f000 ff23 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 80018ba:	2308      	movs	r3, #8
 80018bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018be:	2302      	movs	r3, #2
 80018c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c2:	2300      	movs	r3, #0
 80018c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c6:	2303      	movs	r3, #3
 80018c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018ca:	2307      	movs	r3, #7
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 80018ce:	f107 0314 	add.w	r3, r7, #20
 80018d2:	4619      	mov	r1, r3
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <MX_GPIO_Init+0x110>)
 80018d6:	f000 ff13 	bl	8002700 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80018da:	2320      	movs	r3, #32
 80018dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018de:	2301      	movs	r3, #1
 80018e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e6:	2300      	movs	r3, #0
 80018e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <MX_GPIO_Init+0x110>)
 80018f2:	f000 ff05 	bl	8002700 <HAL_GPIO_Init>

}
 80018f6:	bf00      	nop
 80018f8:	3728      	adds	r7, #40	; 0x28
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023800 	.word	0x40023800
 8001904:	40020000 	.word	0x40020000
 8001908:	10210000 	.word	0x10210000
 800190c:	40020800 	.word	0x40020800

08001910 <csvHeader>:

/* USER CODE BEGIN 4 */

void csvHeader(char* FileName, int lenF) {
 8001910:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001914:	b084      	sub	sp, #16
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
 800191a:	6039      	str	r1, [r7, #0]
 800191c:	466b      	mov	r3, sp
 800191e:	4698      	mov	r8, r3

	char name[lenF];
 8001920:	6838      	ldr	r0, [r7, #0]
 8001922:	1e43      	subs	r3, r0, #1
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	4603      	mov	r3, r0
 8001928:	4619      	mov	r1, r3
 800192a:	f04f 0200 	mov.w	r2, #0
 800192e:	f04f 0300 	mov.w	r3, #0
 8001932:	f04f 0400 	mov.w	r4, #0
 8001936:	00d4      	lsls	r4, r2, #3
 8001938:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800193c:	00cb      	lsls	r3, r1, #3
 800193e:	4603      	mov	r3, r0
 8001940:	4619      	mov	r1, r3
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	f04f 0400 	mov.w	r4, #0
 800194e:	00d4      	lsls	r4, r2, #3
 8001950:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001954:	00cb      	lsls	r3, r1, #3
 8001956:	4603      	mov	r3, r0
 8001958:	3307      	adds	r3, #7
 800195a:	08db      	lsrs	r3, r3, #3
 800195c:	00db      	lsls	r3, r3, #3
 800195e:	ebad 0d03 	sub.w	sp, sp, r3
 8001962:	466b      	mov	r3, sp
 8001964:	3300      	adds	r3, #0
 8001966:	60bb      	str	r3, [r7, #8]
	strcpy(name, FileName);
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	4618      	mov	r0, r3
 800196e:	f008 f97d 	bl	8009c6c <strcpy>

	Mount_SD("/");
 8001972:	48cc      	ldr	r0, [pc, #816]	; (8001ca4 <csvHeader+0x394>)
 8001974:	f7ff fb8e 	bl	8001094 <Mount_SD>

	//CAN Bus
	sprintf(buffer, "Time, RPM, TPS (%%), Fuel Open Time (ms), Ignition Angle (Degrees),");
 8001978:	49cb      	ldr	r1, [pc, #812]	; (8001ca8 <csvHeader+0x398>)
 800197a:	48cc      	ldr	r0, [pc, #816]	; (8001cac <csvHeader+0x39c>)
 800197c:	f008 f956 	bl	8009c2c <siprintf>
	Update_File(name, buffer);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	49ca      	ldr	r1, [pc, #808]	; (8001cac <csvHeader+0x39c>)
 8001984:	4618      	mov	r0, r3
 8001986:	f7ff fccd 	bl	8001324 <Update_File>
	sprintf(buffer, "Barometer (PSI), MAP (PSI), Pressure Type,");
 800198a:	4bc8      	ldr	r3, [pc, #800]	; (8001cac <csvHeader+0x39c>)
 800198c:	4ac8      	ldr	r2, [pc, #800]	; (8001cb0 <csvHeader+0x3a0>)
 800198e:	4614      	mov	r4, r2
 8001990:	469c      	mov	ip, r3
 8001992:	f104 0e20 	add.w	lr, r4, #32
 8001996:	4665      	mov	r5, ip
 8001998:	4626      	mov	r6, r4
 800199a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800199c:	6028      	str	r0, [r5, #0]
 800199e:	6069      	str	r1, [r5, #4]
 80019a0:	60aa      	str	r2, [r5, #8]
 80019a2:	60eb      	str	r3, [r5, #12]
 80019a4:	3410      	adds	r4, #16
 80019a6:	f10c 0c10 	add.w	ip, ip, #16
 80019aa:	4574      	cmp	r4, lr
 80019ac:	d1f3      	bne.n	8001996 <csvHeader+0x86>
 80019ae:	4662      	mov	r2, ip
 80019b0:	4623      	mov	r3, r4
 80019b2:	cb03      	ldmia	r3!, {r0, r1}
 80019b4:	6010      	str	r0, [r2, #0]
 80019b6:	6051      	str	r1, [r2, #4]
 80019b8:	8819      	ldrh	r1, [r3, #0]
 80019ba:	789b      	ldrb	r3, [r3, #2]
 80019bc:	8111      	strh	r1, [r2, #8]
 80019be:	7293      	strb	r3, [r2, #10]
	Update_File(name, buffer);
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	49ba      	ldr	r1, [pc, #744]	; (8001cac <csvHeader+0x39c>)
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fcad 	bl	8001324 <Update_File>
	sprintf(buffer, "Pre Radiator Air Temp (C), Post Radiator Air Temp (C),");
 80019ca:	4bb8      	ldr	r3, [pc, #736]	; (8001cac <csvHeader+0x39c>)
 80019cc:	4ab9      	ldr	r2, [pc, #740]	; (8001cb4 <csvHeader+0x3a4>)
 80019ce:	4614      	mov	r4, r2
 80019d0:	469c      	mov	ip, r3
 80019d2:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80019d6:	4665      	mov	r5, ip
 80019d8:	4626      	mov	r6, r4
 80019da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80019dc:	6028      	str	r0, [r5, #0]
 80019de:	6069      	str	r1, [r5, #4]
 80019e0:	60aa      	str	r2, [r5, #8]
 80019e2:	60eb      	str	r3, [r5, #12]
 80019e4:	3410      	adds	r4, #16
 80019e6:	f10c 0c10 	add.w	ip, ip, #16
 80019ea:	4574      	cmp	r4, lr
 80019ec:	d1f3      	bne.n	80019d6 <csvHeader+0xc6>
 80019ee:	4663      	mov	r3, ip
 80019f0:	4622      	mov	r2, r4
 80019f2:	6810      	ldr	r0, [r2, #0]
 80019f4:	6018      	str	r0, [r3, #0]
 80019f6:	8891      	ldrh	r1, [r2, #4]
 80019f8:	7992      	ldrb	r2, [r2, #6]
 80019fa:	8099      	strh	r1, [r3, #4]
 80019fc:	719a      	strb	r2, [r3, #6]
	Update_File(name, buffer);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	49aa      	ldr	r1, [pc, #680]	; (8001cac <csvHeader+0x39c>)
 8001a02:	4618      	mov	r0, r3
 8001a04:	f7ff fc8e 	bl	8001324 <Update_File>
	sprintf(buffer, "Labmda #1 (A/F R), Lambda #2 (A/F R),");
 8001a08:	4ba8      	ldr	r3, [pc, #672]	; (8001cac <csvHeader+0x39c>)
 8001a0a:	4aab      	ldr	r2, [pc, #684]	; (8001cb8 <csvHeader+0x3a8>)
 8001a0c:	4614      	mov	r4, r2
 8001a0e:	469c      	mov	ip, r3
 8001a10:	f104 0e20 	add.w	lr, r4, #32
 8001a14:	4665      	mov	r5, ip
 8001a16:	4626      	mov	r6, r4
 8001a18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a1a:	6028      	str	r0, [r5, #0]
 8001a1c:	6069      	str	r1, [r5, #4]
 8001a1e:	60aa      	str	r2, [r5, #8]
 8001a20:	60eb      	str	r3, [r5, #12]
 8001a22:	3410      	adds	r4, #16
 8001a24:	f10c 0c10 	add.w	ip, ip, #16
 8001a28:	4574      	cmp	r4, lr
 8001a2a:	d1f3      	bne.n	8001a14 <csvHeader+0x104>
 8001a2c:	4663      	mov	r3, ip
 8001a2e:	4622      	mov	r2, r4
 8001a30:	6810      	ldr	r0, [r2, #0]
 8001a32:	6018      	str	r0, [r3, #0]
 8001a34:	8892      	ldrh	r2, [r2, #4]
 8001a36:	809a      	strh	r2, [r3, #4]
	Update_File(name, buffer);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	499c      	ldr	r1, [pc, #624]	; (8001cac <csvHeader+0x39c>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fc71 	bl	8001324 <Update_File>
	sprintf(buffer, "Pre Radiator Coolant Temp (C), Post Radiator Coolant Temp (C),");
 8001a42:	4b9a      	ldr	r3, [pc, #616]	; (8001cac <csvHeader+0x39c>)
 8001a44:	4a9d      	ldr	r2, [pc, #628]	; (8001cbc <csvHeader+0x3ac>)
 8001a46:	4615      	mov	r5, r2
 8001a48:	469c      	mov	ip, r3
 8001a4a:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 8001a4e:	4664      	mov	r4, ip
 8001a50:	462e      	mov	r6, r5
 8001a52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a54:	6020      	str	r0, [r4, #0]
 8001a56:	6061      	str	r1, [r4, #4]
 8001a58:	60a2      	str	r2, [r4, #8]
 8001a5a:	60e3      	str	r3, [r4, #12]
 8001a5c:	3510      	adds	r5, #16
 8001a5e:	f10c 0c10 	add.w	ip, ip, #16
 8001a62:	4575      	cmp	r5, lr
 8001a64:	d1f3      	bne.n	8001a4e <csvHeader+0x13e>
 8001a66:	4664      	mov	r4, ip
 8001a68:	462b      	mov	r3, r5
 8001a6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001a6c:	6020      	str	r0, [r4, #0]
 8001a6e:	6061      	str	r1, [r4, #4]
 8001a70:	60a2      	str	r2, [r4, #8]
 8001a72:	881a      	ldrh	r2, [r3, #0]
 8001a74:	789b      	ldrb	r3, [r3, #2]
 8001a76:	81a2      	strh	r2, [r4, #12]
 8001a78:	73a3      	strb	r3, [r4, #14]
	Update_File(name, buffer);
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	498b      	ldr	r1, [pc, #556]	; (8001cac <csvHeader+0x39c>)
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7ff fc50 	bl	8001324 <Update_File>
	sprintf(buffer, "Oil Pressure (PSI), Mass Air Flow Sensor (kg/s),");
 8001a84:	4b89      	ldr	r3, [pc, #548]	; (8001cac <csvHeader+0x39c>)
 8001a86:	4a8e      	ldr	r2, [pc, #568]	; (8001cc0 <csvHeader+0x3b0>)
 8001a88:	4614      	mov	r4, r2
 8001a8a:	469c      	mov	ip, r3
 8001a8c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001a90:	4665      	mov	r5, ip
 8001a92:	4626      	mov	r6, r4
 8001a94:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001a96:	6028      	str	r0, [r5, #0]
 8001a98:	6069      	str	r1, [r5, #4]
 8001a9a:	60aa      	str	r2, [r5, #8]
 8001a9c:	60eb      	str	r3, [r5, #12]
 8001a9e:	3410      	adds	r4, #16
 8001aa0:	f10c 0c10 	add.w	ip, ip, #16
 8001aa4:	4574      	cmp	r4, lr
 8001aa6:	d1f3      	bne.n	8001a90 <csvHeader+0x180>
 8001aa8:	4663      	mov	r3, ip
 8001aaa:	4622      	mov	r2, r4
 8001aac:	7812      	ldrb	r2, [r2, #0]
 8001aae:	701a      	strb	r2, [r3, #0]
	Update_File(name, buffer);
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	497e      	ldr	r1, [pc, #504]	; (8001cac <csvHeader+0x39c>)
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fc35 	bl	8001324 <Update_File>
	sprintf(buffer, "FR Wheel Speed (mph), FL Wheel Speed (mph),");
 8001aba:	4b7c      	ldr	r3, [pc, #496]	; (8001cac <csvHeader+0x39c>)
 8001abc:	4a81      	ldr	r2, [pc, #516]	; (8001cc4 <csvHeader+0x3b4>)
 8001abe:	4614      	mov	r4, r2
 8001ac0:	469c      	mov	ip, r3
 8001ac2:	f104 0e20 	add.w	lr, r4, #32
 8001ac6:	4665      	mov	r5, ip
 8001ac8:	4626      	mov	r6, r4
 8001aca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001acc:	6028      	str	r0, [r5, #0]
 8001ace:	6069      	str	r1, [r5, #4]
 8001ad0:	60aa      	str	r2, [r5, #8]
 8001ad2:	60eb      	str	r3, [r5, #12]
 8001ad4:	3410      	adds	r4, #16
 8001ad6:	f10c 0c10 	add.w	ip, ip, #16
 8001ada:	4574      	cmp	r4, lr
 8001adc:	d1f3      	bne.n	8001ac6 <csvHeader+0x1b6>
 8001ade:	4665      	mov	r5, ip
 8001ae0:	4623      	mov	r3, r4
 8001ae2:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001ae4:	6028      	str	r0, [r5, #0]
 8001ae6:	6069      	str	r1, [r5, #4]
 8001ae8:	60aa      	str	r2, [r5, #8]
	Update_File(name, buffer);
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	496f      	ldr	r1, [pc, #444]	; (8001cac <csvHeader+0x39c>)
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fc18 	bl	8001324 <Update_File>
	sprintf(buffer, "RR Wheel Speed (mph), RL Wheel Speed (mph),");
 8001af4:	4b6d      	ldr	r3, [pc, #436]	; (8001cac <csvHeader+0x39c>)
 8001af6:	4a74      	ldr	r2, [pc, #464]	; (8001cc8 <csvHeader+0x3b8>)
 8001af8:	4614      	mov	r4, r2
 8001afa:	469c      	mov	ip, r3
 8001afc:	f104 0e20 	add.w	lr, r4, #32
 8001b00:	4665      	mov	r5, ip
 8001b02:	4626      	mov	r6, r4
 8001b04:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b06:	6028      	str	r0, [r5, #0]
 8001b08:	6069      	str	r1, [r5, #4]
 8001b0a:	60aa      	str	r2, [r5, #8]
 8001b0c:	60eb      	str	r3, [r5, #12]
 8001b0e:	3410      	adds	r4, #16
 8001b10:	f10c 0c10 	add.w	ip, ip, #16
 8001b14:	4574      	cmp	r4, lr
 8001b16:	d1f3      	bne.n	8001b00 <csvHeader+0x1f0>
 8001b18:	4665      	mov	r5, ip
 8001b1a:	4623      	mov	r3, r4
 8001b1c:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001b1e:	6028      	str	r0, [r5, #0]
 8001b20:	6069      	str	r1, [r5, #4]
 8001b22:	60aa      	str	r2, [r5, #8]
	Update_File(name, buffer);
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4961      	ldr	r1, [pc, #388]	; (8001cac <csvHeader+0x39c>)
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff fbfb 	bl	8001324 <Update_File>
	sprintf(buffer, "Battery Voltage (V), Air Temp (C), Coolant Temp (C),");
 8001b2e:	4b5f      	ldr	r3, [pc, #380]	; (8001cac <csvHeader+0x39c>)
 8001b30:	4a66      	ldr	r2, [pc, #408]	; (8001ccc <csvHeader+0x3bc>)
 8001b32:	4614      	mov	r4, r2
 8001b34:	469c      	mov	ip, r3
 8001b36:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001b3a:	4665      	mov	r5, ip
 8001b3c:	4626      	mov	r6, r4
 8001b3e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b40:	6028      	str	r0, [r5, #0]
 8001b42:	6069      	str	r1, [r5, #4]
 8001b44:	60aa      	str	r2, [r5, #8]
 8001b46:	60eb      	str	r3, [r5, #12]
 8001b48:	3410      	adds	r4, #16
 8001b4a:	f10c 0c10 	add.w	ip, ip, #16
 8001b4e:	4574      	cmp	r4, lr
 8001b50:	d1f3      	bne.n	8001b3a <csvHeader+0x22a>
 8001b52:	4663      	mov	r3, ip
 8001b54:	4622      	mov	r2, r4
 8001b56:	6810      	ldr	r0, [r2, #0]
 8001b58:	6018      	str	r0, [r3, #0]
 8001b5a:	7912      	ldrb	r2, [r2, #4]
 8001b5c:	711a      	strb	r2, [r3, #4]
	Update_File(name, buffer);
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	4952      	ldr	r1, [pc, #328]	; (8001cac <csvHeader+0x39c>)
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fbde 	bl	8001324 <Update_File>

	//GPS
	sprintf(buffer, "Day, Month, Year, Hour, Minute, Second, gSpeed,");
 8001b68:	4b50      	ldr	r3, [pc, #320]	; (8001cac <csvHeader+0x39c>)
 8001b6a:	4a59      	ldr	r2, [pc, #356]	; (8001cd0 <csvHeader+0x3c0>)
 8001b6c:	4614      	mov	r4, r2
 8001b6e:	469c      	mov	ip, r3
 8001b70:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001b74:	4665      	mov	r5, ip
 8001b76:	4626      	mov	r6, r4
 8001b78:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b7a:	6028      	str	r0, [r5, #0]
 8001b7c:	6069      	str	r1, [r5, #4]
 8001b7e:	60aa      	str	r2, [r5, #8]
 8001b80:	60eb      	str	r3, [r5, #12]
 8001b82:	3410      	adds	r4, #16
 8001b84:	f10c 0c10 	add.w	ip, ip, #16
 8001b88:	4574      	cmp	r4, lr
 8001b8a:	d1f3      	bne.n	8001b74 <csvHeader+0x264>
	Update_File(name, buffer);
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	4947      	ldr	r1, [pc, #284]	; (8001cac <csvHeader+0x39c>)
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff fbc7 	bl	8001324 <Update_File>
	sprintf(buffer, "Latitude, Longitude, Height Ellipsoid, Height Sea Level,");
 8001b96:	4b45      	ldr	r3, [pc, #276]	; (8001cac <csvHeader+0x39c>)
 8001b98:	4a4e      	ldr	r2, [pc, #312]	; (8001cd4 <csvHeader+0x3c4>)
 8001b9a:	4614      	mov	r4, r2
 8001b9c:	469c      	mov	ip, r3
 8001b9e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001ba2:	4665      	mov	r5, ip
 8001ba4:	4626      	mov	r6, r4
 8001ba6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001ba8:	6028      	str	r0, [r5, #0]
 8001baa:	6069      	str	r1, [r5, #4]
 8001bac:	60aa      	str	r2, [r5, #8]
 8001bae:	60eb      	str	r3, [r5, #12]
 8001bb0:	3410      	adds	r4, #16
 8001bb2:	f10c 0c10 	add.w	ip, ip, #16
 8001bb6:	4574      	cmp	r4, lr
 8001bb8:	d1f3      	bne.n	8001ba2 <csvHeader+0x292>
 8001bba:	4662      	mov	r2, ip
 8001bbc:	4623      	mov	r3, r4
 8001bbe:	cb03      	ldmia	r3!, {r0, r1}
 8001bc0:	6010      	str	r0, [r2, #0]
 8001bc2:	6051      	str	r1, [r2, #4]
 8001bc4:	781b      	ldrb	r3, [r3, #0]
 8001bc6:	7213      	strb	r3, [r2, #8]
	Update_File(name, buffer);
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	4938      	ldr	r1, [pc, #224]	; (8001cac <csvHeader+0x39c>)
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff fba9 	bl	8001324 <Update_File>

	//ADC1
	sprintf(buffer, "FL Damper Sensor, FR Damper Sensor,");
 8001bd2:	4b36      	ldr	r3, [pc, #216]	; (8001cac <csvHeader+0x39c>)
 8001bd4:	4a40      	ldr	r2, [pc, #256]	; (8001cd8 <csvHeader+0x3c8>)
 8001bd6:	4614      	mov	r4, r2
 8001bd8:	469c      	mov	ip, r3
 8001bda:	f104 0e20 	add.w	lr, r4, #32
 8001bde:	4665      	mov	r5, ip
 8001be0:	4626      	mov	r6, r4
 8001be2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001be4:	6028      	str	r0, [r5, #0]
 8001be6:	6069      	str	r1, [r5, #4]
 8001be8:	60aa      	str	r2, [r5, #8]
 8001bea:	60eb      	str	r3, [r5, #12]
 8001bec:	3410      	adds	r4, #16
 8001bee:	f10c 0c10 	add.w	ip, ip, #16
 8001bf2:	4574      	cmp	r4, lr
 8001bf4:	d1f3      	bne.n	8001bde <csvHeader+0x2ce>
 8001bf6:	4663      	mov	r3, ip
 8001bf8:	4622      	mov	r2, r4
 8001bfa:	6810      	ldr	r0, [r2, #0]
 8001bfc:	6018      	str	r0, [r3, #0]
	Update_File(name, buffer);
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	492a      	ldr	r1, [pc, #168]	; (8001cac <csvHeader+0x39c>)
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fb8e 	bl	8001324 <Update_File>
	sprintf(buffer, "RL Damper Sensor, RR Damper Sensor,");
 8001c08:	4b28      	ldr	r3, [pc, #160]	; (8001cac <csvHeader+0x39c>)
 8001c0a:	4a34      	ldr	r2, [pc, #208]	; (8001cdc <csvHeader+0x3cc>)
 8001c0c:	4614      	mov	r4, r2
 8001c0e:	469c      	mov	ip, r3
 8001c10:	f104 0e20 	add.w	lr, r4, #32
 8001c14:	4665      	mov	r5, ip
 8001c16:	4626      	mov	r6, r4
 8001c18:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c1a:	6028      	str	r0, [r5, #0]
 8001c1c:	6069      	str	r1, [r5, #4]
 8001c1e:	60aa      	str	r2, [r5, #8]
 8001c20:	60eb      	str	r3, [r5, #12]
 8001c22:	3410      	adds	r4, #16
 8001c24:	f10c 0c10 	add.w	ip, ip, #16
 8001c28:	4574      	cmp	r4, lr
 8001c2a:	d1f3      	bne.n	8001c14 <csvHeader+0x304>
 8001c2c:	4663      	mov	r3, ip
 8001c2e:	4622      	mov	r2, r4
 8001c30:	6810      	ldr	r0, [r2, #0]
 8001c32:	6018      	str	r0, [r3, #0]
	Update_File(name, buffer);
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	491d      	ldr	r1, [pc, #116]	; (8001cac <csvHeader+0x39c>)
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fb73 	bl	8001324 <Update_File>

	//ADC2
	sprintf(buffer, "Steering Sensor, Brake Sensor #1, Brake Sensor #2,");
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <csvHeader+0x39c>)
 8001c40:	4a27      	ldr	r2, [pc, #156]	; (8001ce0 <csvHeader+0x3d0>)
 8001c42:	4614      	mov	r4, r2
 8001c44:	469c      	mov	ip, r3
 8001c46:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001c4a:	4665      	mov	r5, ip
 8001c4c:	4626      	mov	r6, r4
 8001c4e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001c50:	6028      	str	r0, [r5, #0]
 8001c52:	6069      	str	r1, [r5, #4]
 8001c54:	60aa      	str	r2, [r5, #8]
 8001c56:	60eb      	str	r3, [r5, #12]
 8001c58:	3410      	adds	r4, #16
 8001c5a:	f10c 0c10 	add.w	ip, ip, #16
 8001c5e:	4574      	cmp	r4, lr
 8001c60:	d1f3      	bne.n	8001c4a <csvHeader+0x33a>
 8001c62:	4663      	mov	r3, ip
 8001c64:	4622      	mov	r2, r4
 8001c66:	8811      	ldrh	r1, [r2, #0]
 8001c68:	7892      	ldrb	r2, [r2, #2]
 8001c6a:	8019      	strh	r1, [r3, #0]
 8001c6c:	709a      	strb	r2, [r3, #2]
	Update_File(name, buffer);
 8001c6e:	68bb      	ldr	r3, [r7, #8]
 8001c70:	490e      	ldr	r1, [pc, #56]	; (8001cac <csvHeader+0x39c>)
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff fb56 	bl	8001324 <Update_File>

	//Ask about Unused #1 and #2

	//Accelerometer & Gyroscope
	sprintf(buffer, "X, Y, Z, Roll, Pitch, Yaw\n\n");
 8001c78:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <csvHeader+0x39c>)
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <csvHeader+0x3d4>)
 8001c7c:	4615      	mov	r5, r2
 8001c7e:	461c      	mov	r4, r3
 8001c80:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c82:	6028      	str	r0, [r5, #0]
 8001c84:	6069      	str	r1, [r5, #4]
 8001c86:	60aa      	str	r2, [r5, #8]
 8001c88:	60eb      	str	r3, [r5, #12]
 8001c8a:	cc07      	ldmia	r4!, {r0, r1, r2}
 8001c8c:	6128      	str	r0, [r5, #16]
 8001c8e:	6169      	str	r1, [r5, #20]
 8001c90:	61aa      	str	r2, [r5, #24]
	Update_File(name, buffer);
 8001c92:	68bb      	ldr	r3, [r7, #8]
 8001c94:	4905      	ldr	r1, [pc, #20]	; (8001cac <csvHeader+0x39c>)
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fb44 	bl	8001324 <Update_File>


	Unmount_SD("/");
 8001c9c:	4801      	ldr	r0, [pc, #4]	; (8001ca4 <csvHeader+0x394>)
 8001c9e:	f7ff fa1d 	bl	80010dc <Unmount_SD>
 8001ca2:	e021      	b.n	8001ce8 <csvHeader+0x3d8>
 8001ca4:	0800bfc8 	.word	0x0800bfc8
 8001ca8:	0800bfdc 	.word	0x0800bfdc
 8001cac:	200008d8 	.word	0x200008d8
 8001cb0:	0800c020 	.word	0x0800c020
 8001cb4:	0800c04c 	.word	0x0800c04c
 8001cb8:	0800c084 	.word	0x0800c084
 8001cbc:	0800c0ac 	.word	0x0800c0ac
 8001cc0:	0800c0ec 	.word	0x0800c0ec
 8001cc4:	0800c120 	.word	0x0800c120
 8001cc8:	0800c14c 	.word	0x0800c14c
 8001ccc:	0800c178 	.word	0x0800c178
 8001cd0:	0800c1b0 	.word	0x0800c1b0
 8001cd4:	0800c1e0 	.word	0x0800c1e0
 8001cd8:	0800c21c 	.word	0x0800c21c
 8001cdc:	0800c240 	.word	0x0800c240
 8001ce0:	0800c264 	.word	0x0800c264
 8001ce4:	0800c298 	.word	0x0800c298
 8001ce8:	46c5      	mov	sp, r8
}
 8001cea:	bf00      	nop
 8001cec:	3710      	adds	r7, #16
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001cf4 <csvUpdate>:

void csvUpdate(char* FileName, int lenF) {
 8001cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf8:	b097      	sub	sp, #92	; 0x5c
 8001cfa:	af0e      	add	r7, sp, #56	; 0x38
 8001cfc:	6178      	str	r0, [r7, #20]
 8001cfe:	6139      	str	r1, [r7, #16]
 8001d00:	466b      	mov	r3, sp
 8001d02:	60fb      	str	r3, [r7, #12]

	char name[lenF];
 8001d04:	6938      	ldr	r0, [r7, #16]
 8001d06:	1e43      	subs	r3, r0, #1
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f04f 0200 	mov.w	r2, #0
 8001d12:	f04f 0300 	mov.w	r3, #0
 8001d16:	f04f 0400 	mov.w	r4, #0
 8001d1a:	00d4      	lsls	r4, r2, #3
 8001d1c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d20:	00cb      	lsls	r3, r1, #3
 8001d22:	4603      	mov	r3, r0
 8001d24:	4619      	mov	r1, r3
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	f04f 0300 	mov.w	r3, #0
 8001d2e:	f04f 0400 	mov.w	r4, #0
 8001d32:	00d4      	lsls	r4, r2, #3
 8001d34:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001d38:	00cb      	lsls	r3, r1, #3
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	3307      	adds	r3, #7
 8001d3e:	08db      	lsrs	r3, r3, #3
 8001d40:	00db      	lsls	r3, r3, #3
 8001d42:	ebad 0d03 	sub.w	sp, sp, r3
 8001d46:	ab0e      	add	r3, sp, #56	; 0x38
 8001d48:	3300      	adds	r3, #0
 8001d4a:	61bb      	str	r3, [r7, #24]
	strcpy(name, FileName);
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6979      	ldr	r1, [r7, #20]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f007 ff8b 	bl	8009c6c <strcpy>

	Mount_SD("/");
 8001d56:	4896      	ldr	r0, [pc, #600]	; (8001fb0 <csvUpdate+0x2bc>)
 8001d58:	f7ff f99c 	bl	8001094 <Mount_SD>



	sprintf(buffer, "%d,%hu,%f,%f,%f,", indx, RPM, TPS, fuelOpenTime, ignitionAngle);
 8001d5c:	4b95      	ldr	r3, [pc, #596]	; (8001fb4 <csvUpdate+0x2c0>)
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	603a      	str	r2, [r7, #0]
 8001d62:	4b95      	ldr	r3, [pc, #596]	; (8001fb8 <csvUpdate+0x2c4>)
 8001d64:	6819      	ldr	r1, [r3, #0]
 8001d66:	60b9      	str	r1, [r7, #8]
 8001d68:	4b94      	ldr	r3, [pc, #592]	; (8001fbc <csvUpdate+0x2c8>)
 8001d6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001d6e:	4a94      	ldr	r2, [pc, #592]	; (8001fc0 <csvUpdate+0x2cc>)
 8001d70:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001d74:	4893      	ldr	r0, [pc, #588]	; (8001fc4 <csvUpdate+0x2d0>)
 8001d76:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001d7a:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8001d7e:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001d82:	e9cd 3400 	strd	r3, r4, [sp]
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	683a      	ldr	r2, [r7, #0]
 8001d8a:	498f      	ldr	r1, [pc, #572]	; (8001fc8 <csvUpdate+0x2d4>)
 8001d8c:	488f      	ldr	r0, [pc, #572]	; (8001fcc <csvUpdate+0x2d8>)
 8001d8e:	f007 ff4d 	bl	8009c2c <siprintf>
	Update_File(name, buffer);
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	498d      	ldr	r1, [pc, #564]	; (8001fcc <csvUpdate+0x2d8>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff fac4 	bl	8001324 <Update_File>
	sprintf(buffer, "%f,%f,%i,", barometer, MAP, pressureType);
 8001d9c:	4b8c      	ldr	r3, [pc, #560]	; (8001fd0 <csvUpdate+0x2dc>)
 8001d9e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001da2:	4b8c      	ldr	r3, [pc, #560]	; (8001fd4 <csvUpdate+0x2e0>)
 8001da4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001da8:	488b      	ldr	r0, [pc, #556]	; (8001fd8 <csvUpdate+0x2e4>)
 8001daa:	6800      	ldr	r0, [r0, #0]
 8001dac:	9002      	str	r0, [sp, #8]
 8001dae:	e9cd 3400 	strd	r3, r4, [sp]
 8001db2:	4613      	mov	r3, r2
 8001db4:	460a      	mov	r2, r1
 8001db6:	4989      	ldr	r1, [pc, #548]	; (8001fdc <csvUpdate+0x2e8>)
 8001db8:	4884      	ldr	r0, [pc, #528]	; (8001fcc <csvUpdate+0x2d8>)
 8001dba:	f007 ff37 	bl	8009c2c <siprintf>
	Update_File(name, buffer);
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	4982      	ldr	r1, [pc, #520]	; (8001fcc <csvUpdate+0x2d8>)
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff faae 	bl	8001324 <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,", AnIn1, AnIn2, AnIn3, AnIn4, AnIn5, AnIn6, AnIn7, AnIn8);
 8001dc8:	4b85      	ldr	r3, [pc, #532]	; (8001fe0 <csvUpdate+0x2ec>)
 8001dca:	ed93 7b00 	vldr	d7, [r3]
 8001dce:	ed87 7b00 	vstr	d7, [r7]
 8001dd2:	4b84      	ldr	r3, [pc, #528]	; (8001fe4 <csvUpdate+0x2f0>)
 8001dd4:	e9d3 5600 	ldrd	r5, r6, [r3]
 8001dd8:	4b83      	ldr	r3, [pc, #524]	; (8001fe8 <csvUpdate+0x2f4>)
 8001dda:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001dde:	4b83      	ldr	r3, [pc, #524]	; (8001fec <csvUpdate+0x2f8>)
 8001de0:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001de4:	4b82      	ldr	r3, [pc, #520]	; (8001ff0 <csvUpdate+0x2fc>)
 8001de6:	ed93 7b00 	vldr	d7, [r3]
 8001dea:	4b82      	ldr	r3, [pc, #520]	; (8001ff4 <csvUpdate+0x300>)
 8001dec:	ed93 6b00 	vldr	d6, [r3]
 8001df0:	4b81      	ldr	r3, [pc, #516]	; (8001ff8 <csvUpdate+0x304>)
 8001df2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001df6:	4b81      	ldr	r3, [pc, #516]	; (8001ffc <csvUpdate+0x308>)
 8001df8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dfc:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8001e00:	e9cd 120a 	strd	r1, r2, [sp, #40]	; 0x28
 8001e04:	ed8d 6b08 	vstr	d6, [sp, #32]
 8001e08:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001e0c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001e10:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001e14:	e9cd 5600 	strd	r5, r6, [sp]
 8001e18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e1c:	4978      	ldr	r1, [pc, #480]	; (8002000 <csvUpdate+0x30c>)
 8001e1e:	486b      	ldr	r0, [pc, #428]	; (8001fcc <csvUpdate+0x2d8>)
 8001e20:	f007 ff04 	bl	8009c2c <siprintf>
	Update_File(name, buffer);
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	4969      	ldr	r1, [pc, #420]	; (8001fcc <csvUpdate+0x2d8>)
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fa7b 	bl	8001324 <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,%f,", freq1, freq2, freq3, freq4, batteryVoltage);
 8001e2e:	4b75      	ldr	r3, [pc, #468]	; (8002004 <csvUpdate+0x310>)
 8001e30:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001e34:	4b74      	ldr	r3, [pc, #464]	; (8002008 <csvUpdate+0x314>)
 8001e36:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e3a:	4a74      	ldr	r2, [pc, #464]	; (800200c <csvUpdate+0x318>)
 8001e3c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001e40:	4873      	ldr	r0, [pc, #460]	; (8002010 <csvUpdate+0x31c>)
 8001e42:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001e46:	4873      	ldr	r0, [pc, #460]	; (8002014 <csvUpdate+0x320>)
 8001e48:	e9d0 8900 	ldrd	r8, r9, [r0]
 8001e4c:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001e50:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8001e54:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8001e58:	e9cd 3400 	strd	r3, r4, [sp]
 8001e5c:	4652      	mov	r2, sl
 8001e5e:	465b      	mov	r3, fp
 8001e60:	496d      	ldr	r1, [pc, #436]	; (8002018 <csvUpdate+0x324>)
 8001e62:	485a      	ldr	r0, [pc, #360]	; (8001fcc <csvUpdate+0x2d8>)
 8001e64:	f007 fee2 	bl	8009c2c <siprintf>
	Update_File(name, buffer);
 8001e68:	69bb      	ldr	r3, [r7, #24]
 8001e6a:	4958      	ldr	r1, [pc, #352]	; (8001fcc <csvUpdate+0x2d8>)
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fa59 	bl	8001324 <Update_File>
	sprintf(buffer, "%f,%f,", airTemp, coolantTemp);
 8001e72:	4b6a      	ldr	r3, [pc, #424]	; (800201c <csvUpdate+0x328>)
 8001e74:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001e78:	4b69      	ldr	r3, [pc, #420]	; (8002020 <csvUpdate+0x32c>)
 8001e7a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e7e:	e9cd 3400 	strd	r3, r4, [sp]
 8001e82:	4613      	mov	r3, r2
 8001e84:	460a      	mov	r2, r1
 8001e86:	4967      	ldr	r1, [pc, #412]	; (8002024 <csvUpdate+0x330>)
 8001e88:	4850      	ldr	r0, [pc, #320]	; (8001fcc <csvUpdate+0x2d8>)
 8001e8a:	f007 fecf 	bl	8009c2c <siprintf>
	Update_File(name, buffer);
 8001e8e:	69bb      	ldr	r3, [r7, #24]
 8001e90:	494e      	ldr	r1, [pc, #312]	; (8001fcc <csvUpdate+0x2d8>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff fa46 	bl	8001324 <Update_File>

	sprintf(buffer, "%d,%d,%d,%d,%d,%d,%d,", day, month, year, hour, minute, second, gSpeed);
 8001e98:	4b63      	ldr	r3, [pc, #396]	; (8002028 <csvUpdate+0x334>)
 8001e9a:	681d      	ldr	r5, [r3, #0]
 8001e9c:	4b63      	ldr	r3, [pc, #396]	; (800202c <csvUpdate+0x338>)
 8001e9e:	681e      	ldr	r6, [r3, #0]
 8001ea0:	4b63      	ldr	r3, [pc, #396]	; (8002030 <csvUpdate+0x33c>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a63      	ldr	r2, [pc, #396]	; (8002034 <csvUpdate+0x340>)
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	4963      	ldr	r1, [pc, #396]	; (8002038 <csvUpdate+0x344>)
 8001eaa:	6809      	ldr	r1, [r1, #0]
 8001eac:	4863      	ldr	r0, [pc, #396]	; (800203c <csvUpdate+0x348>)
 8001eae:	6800      	ldr	r0, [r0, #0]
 8001eb0:	4c63      	ldr	r4, [pc, #396]	; (8002040 <csvUpdate+0x34c>)
 8001eb2:	6824      	ldr	r4, [r4, #0]
 8001eb4:	9404      	str	r4, [sp, #16]
 8001eb6:	9003      	str	r0, [sp, #12]
 8001eb8:	9102      	str	r1, [sp, #8]
 8001eba:	9201      	str	r2, [sp, #4]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	4633      	mov	r3, r6
 8001ec0:	462a      	mov	r2, r5
 8001ec2:	4960      	ldr	r1, [pc, #384]	; (8002044 <csvUpdate+0x350>)
 8001ec4:	4841      	ldr	r0, [pc, #260]	; (8001fcc <csvUpdate+0x2d8>)
 8001ec6:	f007 feb1 	bl	8009c2c <siprintf>
	Update_File(name, buffer);
 8001eca:	69bb      	ldr	r3, [r7, #24]
 8001ecc:	493f      	ldr	r1, [pc, #252]	; (8001fcc <csvUpdate+0x2d8>)
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff fa28 	bl	8001324 <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,", latitude, longitude, height_Ellipsoid, height_SeaLvl);
 8001ed4:	4b5c      	ldr	r3, [pc, #368]	; (8002048 <csvUpdate+0x354>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb65 	bl	80005a8 <__aeabi_f2d>
 8001ede:	4682      	mov	sl, r0
 8001ee0:	468b      	mov	fp, r1
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	; (800204c <csvUpdate+0x358>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7fe fb5e 	bl	80005a8 <__aeabi_f2d>
 8001eec:	4604      	mov	r4, r0
 8001eee:	460d      	mov	r5, r1
 8001ef0:	4b57      	ldr	r3, [pc, #348]	; (8002050 <csvUpdate+0x35c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe fb57 	bl	80005a8 <__aeabi_f2d>
 8001efa:	4680      	mov	r8, r0
 8001efc:	4689      	mov	r9, r1
 8001efe:	4b55      	ldr	r3, [pc, #340]	; (8002054 <csvUpdate+0x360>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fb50 	bl	80005a8 <__aeabi_f2d>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001f10:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001f14:	e9cd 4500 	strd	r4, r5, [sp]
 8001f18:	4652      	mov	r2, sl
 8001f1a:	465b      	mov	r3, fp
 8001f1c:	494e      	ldr	r1, [pc, #312]	; (8002058 <csvUpdate+0x364>)
 8001f1e:	482b      	ldr	r0, [pc, #172]	; (8001fcc <csvUpdate+0x2d8>)
 8001f20:	f007 fe84 	bl	8009c2c <siprintf>
	Update_File(name, buffer);
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	4929      	ldr	r1, [pc, #164]	; (8001fcc <csvUpdate+0x2d8>)
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff f9fb 	bl	8001324 <Update_File>

	sprintf(buffer, "%d,%d,%d,%d,", damperT_Sense_FL, damperT_Sense_FR, damperT_Sense_RL, damperT_Sense_RR);
 8001f2e:	4b4b      	ldr	r3, [pc, #300]	; (800205c <csvUpdate+0x368>)
 8001f30:	6819      	ldr	r1, [r3, #0]
 8001f32:	4b4b      	ldr	r3, [pc, #300]	; (8002060 <csvUpdate+0x36c>)
 8001f34:	6818      	ldr	r0, [r3, #0]
 8001f36:	4b4b      	ldr	r3, [pc, #300]	; (8002064 <csvUpdate+0x370>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a4b      	ldr	r2, [pc, #300]	; (8002068 <csvUpdate+0x374>)
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	9201      	str	r2, [sp, #4]
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	4603      	mov	r3, r0
 8001f44:	460a      	mov	r2, r1
 8001f46:	4949      	ldr	r1, [pc, #292]	; (800206c <csvUpdate+0x378>)
 8001f48:	4820      	ldr	r0, [pc, #128]	; (8001fcc <csvUpdate+0x2d8>)
 8001f4a:	f007 fe6f 	bl	8009c2c <siprintf>
	Update_File(name, buffer);
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	491e      	ldr	r1, [pc, #120]	; (8001fcc <csvUpdate+0x2d8>)
 8001f52:	4618      	mov	r0, r3
 8001f54:	f7ff f9e6 	bl	8001324 <Update_File>

	sprintf(buffer, "%d,%d,%d,", steeringA_Sense, brakeP_Sense1, brakeP_Sense2);
 8001f58:	4b45      	ldr	r3, [pc, #276]	; (8002070 <csvUpdate+0x37c>)
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	4b45      	ldr	r3, [pc, #276]	; (8002074 <csvUpdate+0x380>)
 8001f5e:	6819      	ldr	r1, [r3, #0]
 8001f60:	4b45      	ldr	r3, [pc, #276]	; (8002078 <csvUpdate+0x384>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	9300      	str	r3, [sp, #0]
 8001f66:	460b      	mov	r3, r1
 8001f68:	4944      	ldr	r1, [pc, #272]	; (800207c <csvUpdate+0x388>)
 8001f6a:	4818      	ldr	r0, [pc, #96]	; (8001fcc <csvUpdate+0x2d8>)
 8001f6c:	f007 fe5e 	bl	8009c2c <siprintf>
	Update_File(name, buffer);
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	4916      	ldr	r1, [pc, #88]	; (8001fcc <csvUpdate+0x2d8>)
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff f9d5 	bl	8001324 <Update_File>

	sprintf(buffer, "%f,%f,%f,%f,%f,%f", x_LS, y_LS, z_LS, roll_LS, pitch_LS, yaw_LS);
 8001f7a:	4b41      	ldr	r3, [pc, #260]	; (8002080 <csvUpdate+0x38c>)
 8001f7c:	ed93 7b00 	vldr	d7, [r3]
 8001f80:	ed87 7b00 	vstr	d7, [r7]
 8001f84:	4b3f      	ldr	r3, [pc, #252]	; (8002084 <csvUpdate+0x390>)
 8001f86:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f8a:	4a3f      	ldr	r2, [pc, #252]	; (8002088 <csvUpdate+0x394>)
 8001f8c:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001f90:	483e      	ldr	r0, [pc, #248]	; (800208c <csvUpdate+0x398>)
 8001f92:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001f96:	483e      	ldr	r0, [pc, #248]	; (8002090 <csvUpdate+0x39c>)
 8001f98:	e9d0 8900 	ldrd	r8, r9, [r0]
 8001f9c:	483d      	ldr	r0, [pc, #244]	; (8002094 <csvUpdate+0x3a0>)
 8001f9e:	e9d0 ab00 	ldrd	sl, fp, [r0]
 8001fa2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001fa6:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001faa:	e9cd 5604 	strd	r5, r6, [sp, #16]
 8001fae:	e073      	b.n	8002098 <csvUpdate+0x3a4>
 8001fb0:	0800bfc8 	.word	0x0800bfc8
 8001fb4:	200002c4 	.word	0x200002c4
 8001fb8:	200001fc 	.word	0x200001fc
 8001fbc:	20000200 	.word	0x20000200
 8001fc0:	20000208 	.word	0x20000208
 8001fc4:	20000210 	.word	0x20000210
 8001fc8:	0800c2b4 	.word	0x0800c2b4
 8001fcc:	200008d8 	.word	0x200008d8
 8001fd0:	20000218 	.word	0x20000218
 8001fd4:	20000220 	.word	0x20000220
 8001fd8:	20000228 	.word	0x20000228
 8001fdc:	0800c2c8 	.word	0x0800c2c8
 8001fe0:	20000230 	.word	0x20000230
 8001fe4:	20000238 	.word	0x20000238
 8001fe8:	20000240 	.word	0x20000240
 8001fec:	20000248 	.word	0x20000248
 8001ff0:	20000250 	.word	0x20000250
 8001ff4:	20000258 	.word	0x20000258
 8001ff8:	20000260 	.word	0x20000260
 8001ffc:	20000268 	.word	0x20000268
 8002000:	0800c2d4 	.word	0x0800c2d4
 8002004:	20000270 	.word	0x20000270
 8002008:	20000278 	.word	0x20000278
 800200c:	20000280 	.word	0x20000280
 8002010:	20000288 	.word	0x20000288
 8002014:	20000290 	.word	0x20000290
 8002018:	0800c2f0 	.word	0x0800c2f0
 800201c:	20000298 	.word	0x20000298
 8002020:	200002a0 	.word	0x200002a0
 8002024:	0800c300 	.word	0x0800c300
 8002028:	20000a18 	.word	0x20000a18
 800202c:	200008c8 	.word	0x200008c8
 8002030:	20000a0c 	.word	0x20000a0c
 8002034:	20000964 	.word	0x20000964
 8002038:	200008d4 	.word	0x200008d4
 800203c:	200008cc 	.word	0x200008cc
 8002040:	200008d0 	.word	0x200008d0
 8002044:	0800c308 	.word	0x0800c308
 8002048:	20000a14 	.word	0x20000a14
 800204c:	20000968 	.word	0x20000968
 8002050:	200008ac 	.word	0x200008ac
 8002054:	2000093c 	.word	0x2000093c
 8002058:	0800c320 	.word	0x0800c320
 800205c:	200002a8 	.word	0x200002a8
 8002060:	200002ac 	.word	0x200002ac
 8002064:	200002b0 	.word	0x200002b0
 8002068:	200002b4 	.word	0x200002b4
 800206c:	0800c330 	.word	0x0800c330
 8002070:	200002b8 	.word	0x200002b8
 8002074:	200002bc 	.word	0x200002bc
 8002078:	200002c0 	.word	0x200002c0
 800207c:	0800c340 	.word	0x0800c340
 8002080:	20000970 	.word	0x20000970
 8002084:	20000a00 	.word	0x20000a00
 8002088:	200008a0 	.word	0x200008a0
 800208c:	20000a20 	.word	0x20000a20
 8002090:	20000940 	.word	0x20000940
 8002094:	20000958 	.word	0x20000958
 8002098:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800209c:	e9cd 3400 	strd	r3, r4, [sp]
 80020a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80020a4:	490e      	ldr	r1, [pc, #56]	; (80020e0 <csvUpdate+0x3ec>)
 80020a6:	480f      	ldr	r0, [pc, #60]	; (80020e4 <csvUpdate+0x3f0>)
 80020a8:	f007 fdc0 	bl	8009c2c <siprintf>
	Update_File(name, buffer);
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	490d      	ldr	r1, [pc, #52]	; (80020e4 <csvUpdate+0x3f0>)
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff f937 	bl	8001324 <Update_File>

	sprintf(buffer, "\n\n");
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <csvUpdate+0x3f0>)
 80020b8:	4a0b      	ldr	r2, [pc, #44]	; (80020e8 <csvUpdate+0x3f4>)
 80020ba:	8811      	ldrh	r1, [r2, #0]
 80020bc:	7892      	ldrb	r2, [r2, #2]
 80020be:	8019      	strh	r1, [r3, #0]
 80020c0:	709a      	strb	r2, [r3, #2]
	Update_File(name, buffer);
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	4907      	ldr	r1, [pc, #28]	; (80020e4 <csvUpdate+0x3f0>)
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f92c 	bl	8001324 <Update_File>



	Unmount_SD("/");
 80020cc:	4807      	ldr	r0, [pc, #28]	; (80020ec <csvUpdate+0x3f8>)
 80020ce:	f7ff f805 	bl	80010dc <Unmount_SD>
 80020d2:	f8d7 d00c 	ldr.w	sp, [r7, #12]
}
 80020d6:	bf00      	nop
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80020e0:	0800c34c 	.word	0x0800c34c
 80020e4:	200008d8 	.word	0x200008d8
 80020e8:	0800c360 	.word	0x0800c360
 80020ec:	0800bfc8 	.word	0x0800bfc8

080020f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	4b10      	ldr	r3, [pc, #64]	; (800214c <HAL_MspInit+0x4c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210e:	4a0f      	ldr	r2, [pc, #60]	; (800214c <HAL_MspInit+0x4c>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002114:	6453      	str	r3, [r2, #68]	; 0x44
 8002116:	4b0d      	ldr	r3, [pc, #52]	; (800214c <HAL_MspInit+0x4c>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_MspInit+0x4c>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a08      	ldr	r2, [pc, #32]	; (800214c <HAL_MspInit+0x4c>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_MspInit+0x4c>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800213e:	2007      	movs	r0, #7
 8002140:	f000 faaa 	bl	8002698 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40023800 	.word	0x40023800

08002150 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a28      	ldr	r2, [pc, #160]	; (8002210 <HAL_SD_MspInit+0xc0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d14a      	bne.n	8002208 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_SD_MspInit+0xc4>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	4a26      	ldr	r2, [pc, #152]	; (8002214 <HAL_SD_MspInit+0xc4>)
 800217c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002180:	6453      	str	r3, [r2, #68]	; 0x44
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_SD_MspInit+0xc4>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_SD_MspInit+0xc4>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a1f      	ldr	r2, [pc, #124]	; (8002214 <HAL_SD_MspInit+0xc4>)
 8002198:	f043 0304 	orr.w	r3, r3, #4
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b1d      	ldr	r3, [pc, #116]	; (8002214 <HAL_SD_MspInit+0xc4>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0304 	and.w	r3, r3, #4
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	60bb      	str	r3, [r7, #8]
 80021ae:	4b19      	ldr	r3, [pc, #100]	; (8002214 <HAL_SD_MspInit+0xc4>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	4a18      	ldr	r2, [pc, #96]	; (8002214 <HAL_SD_MspInit+0xc4>)
 80021b4:	f043 0308 	orr.w	r3, r3, #8
 80021b8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ba:	4b16      	ldr	r3, [pc, #88]	; (8002214 <HAL_SD_MspInit+0xc4>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021be:	f003 0308 	and.w	r3, r3, #8
 80021c2:	60bb      	str	r3, [r7, #8]
 80021c4:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80021c6:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80021ca:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021cc:	2302      	movs	r3, #2
 80021ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80021d8:	230c      	movs	r3, #12
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021dc:	f107 0314 	add.w	r3, r7, #20
 80021e0:	4619      	mov	r1, r3
 80021e2:	480d      	ldr	r0, [pc, #52]	; (8002218 <HAL_SD_MspInit+0xc8>)
 80021e4:	f000 fa8c 	bl	8002700 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80021e8:	2304      	movs	r3, #4
 80021ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ec:	2302      	movs	r3, #2
 80021ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f0:	2300      	movs	r3, #0
 80021f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021f4:	2303      	movs	r3, #3
 80021f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80021f8:	230c      	movs	r3, #12
 80021fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021fc:	f107 0314 	add.w	r3, r7, #20
 8002200:	4619      	mov	r1, r3
 8002202:	4806      	ldr	r0, [pc, #24]	; (800221c <HAL_SD_MspInit+0xcc>)
 8002204:	f000 fa7c 	bl	8002700 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002208:	bf00      	nop
 800220a:	3728      	adds	r7, #40	; 0x28
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40012c00 	.word	0x40012c00
 8002214:	40023800 	.word	0x40023800
 8002218:	40020800 	.word	0x40020800
 800221c:	40020c00 	.word	0x40020c00

08002220 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002220:	b480      	push	{r7}
 8002222:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800222e:	b480      	push	{r7}
 8002230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002232:	e7fe      	b.n	8002232 <HardFault_Handler+0x4>

08002234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002238:	e7fe      	b.n	8002238 <MemManage_Handler+0x4>

0800223a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800223a:	b480      	push	{r7}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800223e:	e7fe      	b.n	800223e <BusFault_Handler+0x4>

08002240 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002244:	e7fe      	b.n	8002244 <UsageFault_Handler+0x4>

08002246 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002246:	b480      	push	{r7}
 8002248:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800224a:	bf00      	nop
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002258:	bf00      	nop
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002262:	b480      	push	{r7}
 8002264:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002274:	f000 f91c 	bl	80024b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002278:	bf00      	nop
 800227a:	bd80      	pop	{r7, pc}

0800227c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	60b9      	str	r1, [r7, #8]
 8002286:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e00a      	b.n	80022a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800228e:	f3af 8000 	nop.w
 8002292:	4601      	mov	r1, r0
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	60ba      	str	r2, [r7, #8]
 800229a:	b2ca      	uxtb	r2, r1
 800229c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	3301      	adds	r3, #1
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	dbf0      	blt.n	800228e <_read+0x12>
	}

return len;
 80022ac:	687b      	ldr	r3, [r7, #4]
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
	return -1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022de:	605a      	str	r2, [r3, #4]
	return 0;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	370c      	adds	r7, #12
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <_isatty>:

int _isatty(int file)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
	return 1;
 80022f6:	2301      	movs	r3, #1
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
	return 0;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr
	...

08002320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002328:	4a14      	ldr	r2, [pc, #80]	; (800237c <_sbrk+0x5c>)
 800232a:	4b15      	ldr	r3, [pc, #84]	; (8002380 <_sbrk+0x60>)
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d102      	bne.n	8002342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800233c:	4b11      	ldr	r3, [pc, #68]	; (8002384 <_sbrk+0x64>)
 800233e:	4a12      	ldr	r2, [pc, #72]	; (8002388 <_sbrk+0x68>)
 8002340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <_sbrk+0x64>)
 8002344:	681a      	ldr	r2, [r3, #0]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	693a      	ldr	r2, [r7, #16]
 800234c:	429a      	cmp	r2, r3
 800234e:	d207      	bcs.n	8002360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002350:	f006 fe66 	bl	8009020 <__errno>
 8002354:	4602      	mov	r2, r0
 8002356:	230c      	movs	r3, #12
 8002358:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800235a:	f04f 33ff 	mov.w	r3, #4294967295
 800235e:	e009      	b.n	8002374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002360:	4b08      	ldr	r3, [pc, #32]	; (8002384 <_sbrk+0x64>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002366:	4b07      	ldr	r3, [pc, #28]	; (8002384 <_sbrk+0x64>)
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4413      	add	r3, r2
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <_sbrk+0x64>)
 8002370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002372:	68fb      	ldr	r3, [r7, #12]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}
 800237c:	20020000 	.word	0x20020000
 8002380:	00000400 	.word	0x00000400
 8002384:	200002c8 	.word	0x200002c8
 8002388:	20000ed0 	.word	0x20000ed0

0800238c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800238c:	b480      	push	{r7}
 800238e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002390:	4b08      	ldr	r3, [pc, #32]	; (80023b4 <SystemInit+0x28>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	4a07      	ldr	r2, [pc, #28]	; (80023b4 <SystemInit+0x28>)
 8002398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800239c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023a0:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <SystemInit+0x28>)
 80023a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023a6:	609a      	str	r2, [r3, #8]
#endif
}
 80023a8:	bf00      	nop
 80023aa:	46bd      	mov	sp, r7
 80023ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	e000ed00 	.word	0xe000ed00

080023b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023be:	e003      	b.n	80023c8 <LoopCopyDataInit>

080023c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023c0:	4b0c      	ldr	r3, [pc, #48]	; (80023f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023c6:	3104      	adds	r1, #4

080023c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023c8:	480b      	ldr	r0, [pc, #44]	; (80023f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023ca:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023d0:	d3f6      	bcc.n	80023c0 <CopyDataInit>
  ldr  r2, =_sbss
 80023d2:	4a0b      	ldr	r2, [pc, #44]	; (8002400 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023d4:	e002      	b.n	80023dc <LoopFillZerobss>

080023d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023d8:	f842 3b04 	str.w	r3, [r2], #4

080023dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023dc:	4b09      	ldr	r3, [pc, #36]	; (8002404 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023e0:	d3f9      	bcc.n	80023d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023e2:	f7ff ffd3 	bl	800238c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023e6:	f006 fe21 	bl	800902c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023ea:	f7ff f861 	bl	80014b0 <main>
  bx  lr    
 80023ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80023f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80023f4:	08013aa8 	.word	0x08013aa8
  ldr  r0, =_sdata
 80023f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023fc:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8002400:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8002404:	20000ecc 	.word	0x20000ecc

08002408 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002408:	e7fe      	b.n	8002408 <ADC_IRQHandler>
	...

0800240c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002410:	4b0e      	ldr	r3, [pc, #56]	; (800244c <HAL_Init+0x40>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a0d      	ldr	r2, [pc, #52]	; (800244c <HAL_Init+0x40>)
 8002416:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800241a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800241c:	4b0b      	ldr	r3, [pc, #44]	; (800244c <HAL_Init+0x40>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a0a      	ldr	r2, [pc, #40]	; (800244c <HAL_Init+0x40>)
 8002422:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002426:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002428:	4b08      	ldr	r3, [pc, #32]	; (800244c <HAL_Init+0x40>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a07      	ldr	r2, [pc, #28]	; (800244c <HAL_Init+0x40>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002434:	2003      	movs	r0, #3
 8002436:	f000 f92f 	bl	8002698 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800243a:	2000      	movs	r0, #0
 800243c:	f000 f808 	bl	8002450 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002440:	f7ff fe5e 	bl	8002100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002444:	2300      	movs	r3, #0
}
 8002446:	4618      	mov	r0, r3
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40023c00 	.word	0x40023c00

08002450 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b082      	sub	sp, #8
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002458:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_InitTick+0x54>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	4b12      	ldr	r3, [pc, #72]	; (80024a8 <HAL_InitTick+0x58>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	4619      	mov	r1, r3
 8002462:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002466:	fbb3 f3f1 	udiv	r3, r3, r1
 800246a:	fbb2 f3f3 	udiv	r3, r2, r3
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f939 	bl	80026e6 <HAL_SYSTICK_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e00e      	b.n	800249c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2b0f      	cmp	r3, #15
 8002482:	d80a      	bhi.n	800249a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002484:	2200      	movs	r2, #0
 8002486:	6879      	ldr	r1, [r7, #4]
 8002488:	f04f 30ff 	mov.w	r0, #4294967295
 800248c:	f000 f90f 	bl	80026ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002490:	4a06      	ldr	r2, [pc, #24]	; (80024ac <HAL_InitTick+0x5c>)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
 8002498:	e000      	b.n	800249c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	20000000 	.word	0x20000000
 80024a8:	20000008 	.word	0x20000008
 80024ac:	20000004 	.word	0x20000004

080024b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024b0:	b480      	push	{r7}
 80024b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_IncTick+0x20>)
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	4b06      	ldr	r3, [pc, #24]	; (80024d4 <HAL_IncTick+0x24>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <HAL_IncTick+0x24>)
 80024c2:	6013      	str	r3, [r2, #0]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000008 	.word	0x20000008
 80024d4:	20000a58 	.word	0x20000a58

080024d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024d8:	b480      	push	{r7}
 80024da:	af00      	add	r7, sp, #0
  return uwTick;
 80024dc:	4b03      	ldr	r3, [pc, #12]	; (80024ec <HAL_GetTick+0x14>)
 80024de:	681b      	ldr	r3, [r3, #0]
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	20000a58 	.word	0x20000a58

080024f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024f8:	f7ff ffee 	bl	80024d8 <HAL_GetTick>
 80024fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d005      	beq.n	8002516 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800250a:	4b09      	ldr	r3, [pc, #36]	; (8002530 <HAL_Delay+0x40>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	4413      	add	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002516:	bf00      	nop
 8002518:	f7ff ffde 	bl	80024d8 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	68fa      	ldr	r2, [r7, #12]
 8002524:	429a      	cmp	r2, r3
 8002526:	d8f7      	bhi.n	8002518 <HAL_Delay+0x28>
  {
  }
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	20000008 	.word	0x20000008

08002534 <__NVIC_SetPriorityGrouping>:
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f003 0307 	and.w	r3, r3, #7
 8002542:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002544:	4b0c      	ldr	r3, [pc, #48]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002546:	68db      	ldr	r3, [r3, #12]
 8002548:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800254a:	68ba      	ldr	r2, [r7, #8]
 800254c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002550:	4013      	ands	r3, r2
 8002552:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800255c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002560:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002564:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002566:	4a04      	ldr	r2, [pc, #16]	; (8002578 <__NVIC_SetPriorityGrouping+0x44>)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	60d3      	str	r3, [r2, #12]
}
 800256c:	bf00      	nop
 800256e:	3714      	adds	r7, #20
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_GetPriorityGrouping>:
{
 800257c:	b480      	push	{r7}
 800257e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <__NVIC_GetPriorityGrouping+0x18>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	0a1b      	lsrs	r3, r3, #8
 8002586:	f003 0307 	and.w	r3, r3, #7
}
 800258a:	4618      	mov	r0, r3
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <__NVIC_SetPriority>:
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	4603      	mov	r3, r0
 80025a0:	6039      	str	r1, [r7, #0]
 80025a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	db0a      	blt.n	80025c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	b2da      	uxtb	r2, r3
 80025b0:	490c      	ldr	r1, [pc, #48]	; (80025e4 <__NVIC_SetPriority+0x4c>)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	0112      	lsls	r2, r2, #4
 80025b8:	b2d2      	uxtb	r2, r2
 80025ba:	440b      	add	r3, r1
 80025bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025c0:	e00a      	b.n	80025d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	b2da      	uxtb	r2, r3
 80025c6:	4908      	ldr	r1, [pc, #32]	; (80025e8 <__NVIC_SetPriority+0x50>)
 80025c8:	79fb      	ldrb	r3, [r7, #7]
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	3b04      	subs	r3, #4
 80025d0:	0112      	lsls	r2, r2, #4
 80025d2:	b2d2      	uxtb	r2, r2
 80025d4:	440b      	add	r3, r1
 80025d6:	761a      	strb	r2, [r3, #24]
}
 80025d8:	bf00      	nop
 80025da:	370c      	adds	r7, #12
 80025dc:	46bd      	mov	sp, r7
 80025de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e2:	4770      	bx	lr
 80025e4:	e000e100 	.word	0xe000e100
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <NVIC_EncodePriority>:
{
 80025ec:	b480      	push	{r7}
 80025ee:	b089      	sub	sp, #36	; 0x24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	60b9      	str	r1, [r7, #8]
 80025f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f003 0307 	and.w	r3, r3, #7
 80025fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	f1c3 0307 	rsb	r3, r3, #7
 8002606:	2b04      	cmp	r3, #4
 8002608:	bf28      	it	cs
 800260a:	2304      	movcs	r3, #4
 800260c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3304      	adds	r3, #4
 8002612:	2b06      	cmp	r3, #6
 8002614:	d902      	bls.n	800261c <NVIC_EncodePriority+0x30>
 8002616:	69fb      	ldr	r3, [r7, #28]
 8002618:	3b03      	subs	r3, #3
 800261a:	e000      	b.n	800261e <NVIC_EncodePriority+0x32>
 800261c:	2300      	movs	r3, #0
 800261e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002620:	f04f 32ff 	mov.w	r2, #4294967295
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	fa02 f303 	lsl.w	r3, r2, r3
 800262a:	43da      	mvns	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	401a      	ands	r2, r3
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002634:	f04f 31ff 	mov.w	r1, #4294967295
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	fa01 f303 	lsl.w	r3, r1, r3
 800263e:	43d9      	mvns	r1, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002644:	4313      	orrs	r3, r2
}
 8002646:	4618      	mov	r0, r3
 8002648:	3724      	adds	r7, #36	; 0x24
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr
	...

08002654 <SysTick_Config>:
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	3b01      	subs	r3, #1
 8002660:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002664:	d301      	bcc.n	800266a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002666:	2301      	movs	r3, #1
 8002668:	e00f      	b.n	800268a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266a:	4a0a      	ldr	r2, [pc, #40]	; (8002694 <SysTick_Config+0x40>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002672:	210f      	movs	r1, #15
 8002674:	f04f 30ff 	mov.w	r0, #4294967295
 8002678:	f7ff ff8e 	bl	8002598 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800267c:	4b05      	ldr	r3, [pc, #20]	; (8002694 <SysTick_Config+0x40>)
 800267e:	2200      	movs	r2, #0
 8002680:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002682:	4b04      	ldr	r3, [pc, #16]	; (8002694 <SysTick_Config+0x40>)
 8002684:	2207      	movs	r2, #7
 8002686:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	3708      	adds	r7, #8
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}
 8002692:	bf00      	nop
 8002694:	e000e010 	.word	0xe000e010

08002698 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f7ff ff47 	bl	8002534 <__NVIC_SetPriorityGrouping>
}
 80026a6:	bf00      	nop
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b086      	sub	sp, #24
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	4603      	mov	r3, r0
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026bc:	2300      	movs	r3, #0
 80026be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c0:	f7ff ff5c 	bl	800257c <__NVIC_GetPriorityGrouping>
 80026c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	68b9      	ldr	r1, [r7, #8]
 80026ca:	6978      	ldr	r0, [r7, #20]
 80026cc:	f7ff ff8e 	bl	80025ec <NVIC_EncodePriority>
 80026d0:	4602      	mov	r2, r0
 80026d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff ff5d 	bl	8002598 <__NVIC_SetPriority>
}
 80026de:	bf00      	nop
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b082      	sub	sp, #8
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ffb0 	bl	8002654 <SysTick_Config>
 80026f4:	4603      	mov	r3, r0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002700:	b480      	push	{r7}
 8002702:	b089      	sub	sp, #36	; 0x24
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800270e:	2300      	movs	r3, #0
 8002710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002712:	2300      	movs	r3, #0
 8002714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002716:	2300      	movs	r3, #0
 8002718:	61fb      	str	r3, [r7, #28]
 800271a:	e165      	b.n	80029e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800271c:	2201      	movs	r2, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	4013      	ands	r3, r2
 800272e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002730:	693a      	ldr	r2, [r7, #16]
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	429a      	cmp	r2, r3
 8002736:	f040 8154 	bne.w	80029e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d00b      	beq.n	800275a <HAL_GPIO_Init+0x5a>
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	2b02      	cmp	r3, #2
 8002748:	d007      	beq.n	800275a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800274e:	2b11      	cmp	r3, #17
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b12      	cmp	r3, #18
 8002758:	d130      	bne.n	80027bc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	2203      	movs	r2, #3
 8002766:	fa02 f303 	lsl.w	r3, r2, r3
 800276a:	43db      	mvns	r3, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4013      	ands	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	68da      	ldr	r2, [r3, #12]
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	fa02 f303 	lsl.w	r3, r2, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69ba      	ldr	r2, [r7, #24]
 8002788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002790:	2201      	movs	r2, #1
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	f003 0201 	and.w	r2, r3, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	2203      	movs	r2, #3
 80027c8:	fa02 f303 	lsl.w	r3, r2, r3
 80027cc:	43db      	mvns	r3, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	005b      	lsls	r3, r3, #1
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d003      	beq.n	80027fc <HAL_GPIO_Init+0xfc>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	2b12      	cmp	r3, #18
 80027fa:	d123      	bne.n	8002844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	08da      	lsrs	r2, r3, #3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	3208      	adds	r2, #8
 8002804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	f003 0307 	and.w	r3, r3, #7
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	220f      	movs	r2, #15
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	43db      	mvns	r3, r3
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	4013      	ands	r3, r2
 800281e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	691a      	ldr	r2, [r3, #16]
 8002824:	69fb      	ldr	r3, [r7, #28]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	fa02 f303 	lsl.w	r3, r2, r3
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	4313      	orrs	r3, r2
 8002834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	08da      	lsrs	r2, r3, #3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	3208      	adds	r2, #8
 800283e:	69b9      	ldr	r1, [r7, #24]
 8002840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	2203      	movs	r2, #3
 8002850:	fa02 f303 	lsl.w	r3, r2, r3
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 0203 	and.w	r2, r3, #3
 8002864:	69fb      	ldr	r3, [r7, #28]
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	fa02 f303 	lsl.w	r3, r2, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4313      	orrs	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 80ae 	beq.w	80029e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002886:	2300      	movs	r3, #0
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	4b5c      	ldr	r3, [pc, #368]	; (80029fc <HAL_GPIO_Init+0x2fc>)
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	4a5b      	ldr	r2, [pc, #364]	; (80029fc <HAL_GPIO_Init+0x2fc>)
 8002890:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002894:	6453      	str	r3, [r2, #68]	; 0x44
 8002896:	4b59      	ldr	r3, [pc, #356]	; (80029fc <HAL_GPIO_Init+0x2fc>)
 8002898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800289a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289e:	60fb      	str	r3, [r7, #12]
 80028a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028a2:	4a57      	ldr	r2, [pc, #348]	; (8002a00 <HAL_GPIO_Init+0x300>)
 80028a4:	69fb      	ldr	r3, [r7, #28]
 80028a6:	089b      	lsrs	r3, r3, #2
 80028a8:	3302      	adds	r3, #2
 80028aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028b0:	69fb      	ldr	r3, [r7, #28]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	220f      	movs	r2, #15
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	43db      	mvns	r3, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4013      	ands	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a4e      	ldr	r2, [pc, #312]	; (8002a04 <HAL_GPIO_Init+0x304>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d025      	beq.n	800291a <HAL_GPIO_Init+0x21a>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a4d      	ldr	r2, [pc, #308]	; (8002a08 <HAL_GPIO_Init+0x308>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d01f      	beq.n	8002916 <HAL_GPIO_Init+0x216>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a4c      	ldr	r2, [pc, #304]	; (8002a0c <HAL_GPIO_Init+0x30c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d019      	beq.n	8002912 <HAL_GPIO_Init+0x212>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a4b      	ldr	r2, [pc, #300]	; (8002a10 <HAL_GPIO_Init+0x310>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d013      	beq.n	800290e <HAL_GPIO_Init+0x20e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a4a      	ldr	r2, [pc, #296]	; (8002a14 <HAL_GPIO_Init+0x314>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00d      	beq.n	800290a <HAL_GPIO_Init+0x20a>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a49      	ldr	r2, [pc, #292]	; (8002a18 <HAL_GPIO_Init+0x318>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d007      	beq.n	8002906 <HAL_GPIO_Init+0x206>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a48      	ldr	r2, [pc, #288]	; (8002a1c <HAL_GPIO_Init+0x31c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d101      	bne.n	8002902 <HAL_GPIO_Init+0x202>
 80028fe:	2306      	movs	r3, #6
 8002900:	e00c      	b.n	800291c <HAL_GPIO_Init+0x21c>
 8002902:	2307      	movs	r3, #7
 8002904:	e00a      	b.n	800291c <HAL_GPIO_Init+0x21c>
 8002906:	2305      	movs	r3, #5
 8002908:	e008      	b.n	800291c <HAL_GPIO_Init+0x21c>
 800290a:	2304      	movs	r3, #4
 800290c:	e006      	b.n	800291c <HAL_GPIO_Init+0x21c>
 800290e:	2303      	movs	r3, #3
 8002910:	e004      	b.n	800291c <HAL_GPIO_Init+0x21c>
 8002912:	2302      	movs	r3, #2
 8002914:	e002      	b.n	800291c <HAL_GPIO_Init+0x21c>
 8002916:	2301      	movs	r3, #1
 8002918:	e000      	b.n	800291c <HAL_GPIO_Init+0x21c>
 800291a:	2300      	movs	r3, #0
 800291c:	69fa      	ldr	r2, [r7, #28]
 800291e:	f002 0203 	and.w	r2, r2, #3
 8002922:	0092      	lsls	r2, r2, #2
 8002924:	4093      	lsls	r3, r2
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800292c:	4934      	ldr	r1, [pc, #208]	; (8002a00 <HAL_GPIO_Init+0x300>)
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	089b      	lsrs	r3, r3, #2
 8002932:	3302      	adds	r3, #2
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800293a:	4b39      	ldr	r3, [pc, #228]	; (8002a20 <HAL_GPIO_Init+0x320>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800295e:	4a30      	ldr	r2, [pc, #192]	; (8002a20 <HAL_GPIO_Init+0x320>)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002964:	4b2e      	ldr	r3, [pc, #184]	; (8002a20 <HAL_GPIO_Init+0x320>)
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002988:	4a25      	ldr	r2, [pc, #148]	; (8002a20 <HAL_GPIO_Init+0x320>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800298e:	4b24      	ldr	r3, [pc, #144]	; (8002a20 <HAL_GPIO_Init+0x320>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	43db      	mvns	r3, r3
 8002998:	69ba      	ldr	r2, [r7, #24]
 800299a:	4013      	ands	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80029aa:	69ba      	ldr	r2, [r7, #24]
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4313      	orrs	r3, r2
 80029b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029b2:	4a1b      	ldr	r2, [pc, #108]	; (8002a20 <HAL_GPIO_Init+0x320>)
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029b8:	4b19      	ldr	r3, [pc, #100]	; (8002a20 <HAL_GPIO_Init+0x320>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4313      	orrs	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029dc:	4a10      	ldr	r2, [pc, #64]	; (8002a20 <HAL_GPIO_Init+0x320>)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	3301      	adds	r3, #1
 80029e6:	61fb      	str	r3, [r7, #28]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	2b0f      	cmp	r3, #15
 80029ec:	f67f ae96 	bls.w	800271c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f0:	bf00      	nop
 80029f2:	3724      	adds	r7, #36	; 0x24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	40023800 	.word	0x40023800
 8002a00:	40013800 	.word	0x40013800
 8002a04:	40020000 	.word	0x40020000
 8002a08:	40020400 	.word	0x40020400
 8002a0c:	40020800 	.word	0x40020800
 8002a10:	40020c00 	.word	0x40020c00
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40021400 	.word	0x40021400
 8002a1c:	40021800 	.word	0x40021800
 8002a20:	40013c00 	.word	0x40013c00

08002a24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	807b      	strh	r3, [r7, #2]
 8002a30:	4613      	mov	r3, r2
 8002a32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a34:	787b      	ldrb	r3, [r7, #1]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a3a:	887a      	ldrh	r2, [r7, #2]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a40:	e003      	b.n	8002a4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a42:	887b      	ldrh	r3, [r7, #2]
 8002a44:	041a      	lsls	r2, r3, #16
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	619a      	str	r2, [r3, #24]
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
	...

08002a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b084      	sub	sp, #16
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0cc      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a6c:	4b68      	ldr	r3, [pc, #416]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 030f 	and.w	r3, r3, #15
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d90c      	bls.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7a:	4b65      	ldr	r3, [pc, #404]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a7c:	683a      	ldr	r2, [r7, #0]
 8002a7e:	b2d2      	uxtb	r2, r2
 8002a80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b63      	ldr	r3, [pc, #396]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0b8      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d020      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0304 	and.w	r3, r3, #4
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d005      	beq.n	8002ab8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aac:	4b59      	ldr	r3, [pc, #356]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	4a58      	ldr	r2, [pc, #352]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ab2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ab6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f003 0308 	and.w	r3, r3, #8
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ac4:	4b53      	ldr	r3, [pc, #332]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	4a52      	ldr	r2, [pc, #328]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002aca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ace:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	494d      	ldr	r1, [pc, #308]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d044      	beq.n	8002b78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d107      	bne.n	8002b06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002af6:	4b47      	ldr	r3, [pc, #284]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d119      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e07f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	2b02      	cmp	r3, #2
 8002b0c:	d003      	beq.n	8002b16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d107      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b16:	4b3f      	ldr	r3, [pc, #252]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d109      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e06f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b26:	4b3b      	ldr	r3, [pc, #236]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0302 	and.w	r3, r3, #2
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e067      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b36:	4b37      	ldr	r3, [pc, #220]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f023 0203 	bic.w	r2, r3, #3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	4934      	ldr	r1, [pc, #208]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b48:	f7ff fcc6 	bl	80024d8 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b4e:	e00a      	b.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b50:	f7ff fcc2 	bl	80024d8 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d901      	bls.n	8002b66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	e04f      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b66:	4b2b      	ldr	r3, [pc, #172]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 020c 	and.w	r2, r3, #12
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d1eb      	bne.n	8002b50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b78:	4b25      	ldr	r3, [pc, #148]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 030f 	and.w	r3, r3, #15
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d20c      	bcs.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b86:	4b22      	ldr	r3, [pc, #136]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	683a      	ldr	r2, [r7, #0]
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_ClockConfig+0x1b8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 030f 	and.w	r3, r3, #15
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d001      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e032      	b.n	8002c06 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0304 	and.w	r3, r3, #4
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d008      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bac:	4b19      	ldr	r3, [pc, #100]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	4916      	ldr	r1, [pc, #88]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d009      	beq.n	8002bde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bca:	4b12      	ldr	r3, [pc, #72]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	490e      	ldr	r1, [pc, #56]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bde:	f000 fb4b 	bl	8003278 <HAL_RCC_GetSysClockFreq>
 8002be2:	4601      	mov	r1, r0
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	091b      	lsrs	r3, r3, #4
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf0:	5cd3      	ldrb	r3, [r2, r3]
 8002bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8002bf6:	4a09      	ldr	r2, [pc, #36]	; (8002c1c <HAL_RCC_ClockConfig+0x1c4>)
 8002bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bfa:	4b09      	ldr	r3, [pc, #36]	; (8002c20 <HAL_RCC_ClockConfig+0x1c8>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fc26 	bl	8002450 <HAL_InitTick>

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40023c00 	.word	0x40023c00
 8002c14:	40023800 	.word	0x40023800
 8002c18:	08013724 	.word	0x08013724
 8002c1c:	20000000 	.word	0x20000000
 8002c20:	20000004 	.word	0x20000004

08002c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b08c      	sub	sp, #48	; 0x30
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002c40:	2300      	movs	r3, #0
 8002c42:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002c44:	2300      	movs	r3, #0
 8002c46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0301 	and.w	r3, r3, #1
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d010      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002c5c:	4b6f      	ldr	r3, [pc, #444]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c62:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c6a:	496c      	ldr	r1, [pc, #432]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d010      	beq.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002c8a:	4b64      	ldr	r3, [pc, #400]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c90:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c98:	4960      	ldr	r1, [pc, #384]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0304 	and.w	r3, r3, #4
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d017      	beq.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cb8:	4b58      	ldr	r3, [pc, #352]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cbe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc6:	4955      	ldr	r1, [pc, #340]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d101      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 0308 	and.w	r3, r3, #8
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d017      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cf4:	4b49      	ldr	r3, [pc, #292]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cf6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cfa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	4946      	ldr	r1, [pc, #280]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d12:	d101      	bne.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002d14:	2301      	movs	r3, #1
 8002d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002d20:	2301      	movs	r3, #1
 8002d22:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f000 808a 	beq.w	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d32:	2300      	movs	r3, #0
 8002d34:	60bb      	str	r3, [r7, #8]
 8002d36:	4b39      	ldr	r3, [pc, #228]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3a:	4a38      	ldr	r2, [pc, #224]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6413      	str	r3, [r2, #64]	; 0x40
 8002d42:	4b36      	ldr	r3, [pc, #216]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4a:	60bb      	str	r3, [r7, #8]
 8002d4c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d4e:	4b34      	ldr	r3, [pc, #208]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a33      	ldr	r2, [pc, #204]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d58:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d5a:	f7ff fbbd 	bl	80024d8 <HAL_GetTick>
 8002d5e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d60:	e008      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d62:	f7ff fbb9 	bl	80024d8 <HAL_GetTick>
 8002d66:	4602      	mov	r2, r0
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	1ad3      	subs	r3, r2, r3
 8002d6c:	2b02      	cmp	r3, #2
 8002d6e:	d901      	bls.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e278      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d74:	4b2a      	ldr	r3, [pc, #168]	; (8002e20 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d0f0      	beq.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d80:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d88:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d02f      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d98:	6a3a      	ldr	r2, [r7, #32]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d028      	beq.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d9e:	4b1f      	ldr	r3, [pc, #124]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002da8:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dae:	4b1d      	ldr	r3, [pc, #116]	; (8002e24 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002db4:	4a19      	ldr	r2, [pc, #100]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002dba:	4b18      	ldr	r3, [pc, #96]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d114      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002dc6:	f7ff fb87 	bl	80024d8 <HAL_GetTick>
 8002dca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7ff fb83 	bl	80024d8 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e240      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002de4:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ee      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dfc:	d114      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002dfe:	4b07      	ldr	r3, [pc, #28]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e12:	4902      	ldr	r1, [pc, #8]	; (8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	608b      	str	r3, [r1, #8]
 8002e18:	e00c      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002e1a:	bf00      	nop
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	40007000 	.word	0x40007000
 8002e24:	42470e40 	.word	0x42470e40
 8002e28:	4b4a      	ldr	r3, [pc, #296]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	4a49      	ldr	r2, [pc, #292]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e2e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e32:	6093      	str	r3, [r2, #8]
 8002e34:	4b47      	ldr	r3, [pc, #284]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e36:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e40:	4944      	ldr	r1, [pc, #272]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0310 	and.w	r3, r3, #16
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d004      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002e58:	4b3f      	ldr	r3, [pc, #252]	; (8002f58 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002e5a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002e68:	4b3a      	ldr	r3, [pc, #232]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e6e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	4937      	ldr	r1, [pc, #220]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e8a:	4b32      	ldr	r3, [pc, #200]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e90:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e98:	492e      	ldr	r1, [pc, #184]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d011      	beq.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002eac:	4b29      	ldr	r3, [pc, #164]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb2:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	4926      	ldr	r1, [pc, #152]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ec6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002edc:	4b1d      	ldr	r3, [pc, #116]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ee2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	491a      	ldr	r1, [pc, #104]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d011      	beq.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002efe:	4b15      	ldr	r3, [pc, #84]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f04:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0c:	4911      	ldr	r1, [pc, #68]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f1c:	d101      	bne.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d005      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f30:	f040 80ff 	bne.w	8003132 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f34:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f3a:	f7ff facd 	bl	80024d8 <HAL_GetTick>
 8002f3e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f40:	e00e      	b.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002f42:	f7ff fac9 	bl	80024d8 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d907      	bls.n	8002f60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e188      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002f54:	40023800 	.word	0x40023800
 8002f58:	424711e0 	.word	0x424711e0
 8002f5c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f60:	4b7e      	ldr	r3, [pc, #504]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ea      	bne.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d009      	beq.n	8002f94 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d028      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d124      	bne.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f94:	4b71      	ldr	r3, [pc, #452]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f9a:	0c1b      	lsrs	r3, r3, #16
 8002f9c:	f003 0303 	and.w	r3, r3, #3
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fa6:	4b6d      	ldr	r3, [pc, #436]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fac:	0e1b      	lsrs	r3, r3, #24
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	019b      	lsls	r3, r3, #6
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	085b      	lsrs	r3, r3, #1
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	041b      	lsls	r3, r3, #16
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	061b      	lsls	r3, r3, #24
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	071b      	lsls	r3, r3, #28
 8002fd6:	4961      	ldr	r1, [pc, #388]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0304 	and.w	r3, r3, #4
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d004      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff2:	d00a      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d035      	beq.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003008:	d130      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800300a:	4b54      	ldr	r3, [pc, #336]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800300c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003010:	0c1b      	lsrs	r3, r3, #16
 8003012:	f003 0303 	and.w	r3, r3, #3
 8003016:	3301      	adds	r3, #1
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800301c:	4b4f      	ldr	r3, [pc, #316]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800301e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003022:	0f1b      	lsrs	r3, r3, #28
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	019b      	lsls	r3, r3, #6
 8003034:	431a      	orrs	r2, r3
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	085b      	lsrs	r3, r3, #1
 800303a:	3b01      	subs	r3, #1
 800303c:	041b      	lsls	r3, r3, #16
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691b      	ldr	r3, [r3, #16]
 8003044:	061b      	lsls	r3, r3, #24
 8003046:	431a      	orrs	r2, r3
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	071b      	lsls	r3, r3, #28
 800304c:	4943      	ldr	r1, [pc, #268]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003054:	4b41      	ldr	r3, [pc, #260]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800305a:	f023 021f 	bic.w	r2, r3, #31
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	3b01      	subs	r3, #1
 8003064:	493d      	ldr	r1, [pc, #244]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003066:	4313      	orrs	r3, r2
 8003068:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003074:	2b00      	cmp	r3, #0
 8003076:	d029      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003080:	d124      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003082:	4b36      	ldr	r3, [pc, #216]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003084:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	3301      	adds	r3, #1
 8003090:	005b      	lsls	r3, r3, #1
 8003092:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003094:	4b31      	ldr	r3, [pc, #196]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309a:	0f1b      	lsrs	r3, r3, #28
 800309c:	f003 0307 	and.w	r3, r3, #7
 80030a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	019b      	lsls	r3, r3, #6
 80030ac:	431a      	orrs	r2, r3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	085b      	lsrs	r3, r3, #1
 80030b4:	3b01      	subs	r3, #1
 80030b6:	041b      	lsls	r3, r3, #16
 80030b8:	431a      	orrs	r2, r3
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	061b      	lsls	r3, r3, #24
 80030be:	431a      	orrs	r2, r3
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	071b      	lsls	r3, r3, #28
 80030c4:	4925      	ldr	r1, [pc, #148]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d016      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	019b      	lsls	r3, r3, #6
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	68db      	ldr	r3, [r3, #12]
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	3b01      	subs	r3, #1
 80030ec:	041b      	lsls	r3, r3, #16
 80030ee:	431a      	orrs	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	061b      	lsls	r3, r3, #24
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	071b      	lsls	r3, r3, #28
 80030fe:	4917      	ldr	r1, [pc, #92]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003106:	4b16      	ldr	r3, [pc, #88]	; (8003160 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003108:	2201      	movs	r2, #1
 800310a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800310c:	f7ff f9e4 	bl	80024d8 <HAL_GetTick>
 8003110:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003112:	e008      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003114:	f7ff f9e0 	bl	80024d8 <HAL_GetTick>
 8003118:	4602      	mov	r2, r0
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	2b02      	cmp	r3, #2
 8003120:	d901      	bls.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e09f      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003126:	4b0d      	ldr	r3, [pc, #52]	; (800315c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0f0      	beq.n	8003114 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8003132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003134:	2b01      	cmp	r3, #1
 8003136:	f040 8095 	bne.w	8003264 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800313a:	4b0a      	ldr	r3, [pc, #40]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003140:	f7ff f9ca 	bl	80024d8 <HAL_GetTick>
 8003144:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003146:	e00f      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003148:	f7ff f9c6 	bl	80024d8 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d908      	bls.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e085      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800315a:	bf00      	nop
 800315c:	40023800 	.word	0x40023800
 8003160:	42470068 	.word	0x42470068
 8003164:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003168:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003174:	d0e8      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0304 	and.w	r3, r3, #4
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02b      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319a:	2b00      	cmp	r3, #0
 800319c:	d127      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800319e:	4b34      	ldr	r3, [pc, #208]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	0c1b      	lsrs	r3, r3, #16
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	3301      	adds	r3, #1
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	699a      	ldr	r2, [r3, #24]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	69db      	ldr	r3, [r3, #28]
 80031b8:	019b      	lsls	r3, r3, #6
 80031ba:	431a      	orrs	r2, r3
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	3b01      	subs	r3, #1
 80031c2:	041b      	lsls	r3, r3, #16
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	4928      	ldr	r1, [pc, #160]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031d4:	4b26      	ldr	r3, [pc, #152]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031da:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e2:	3b01      	subs	r3, #1
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	4922      	ldr	r1, [pc, #136]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d01d      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003202:	d118      	bne.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003204:	4b1a      	ldr	r3, [pc, #104]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	0e1b      	lsrs	r3, r3, #24
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699a      	ldr	r2, [r3, #24]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	69db      	ldr	r3, [r3, #28]
 800321a:	019b      	lsls	r3, r3, #6
 800321c:	431a      	orrs	r2, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	085b      	lsrs	r3, r3, #1
 8003224:	3b01      	subs	r3, #1
 8003226:	041b      	lsls	r3, r3, #16
 8003228:	431a      	orrs	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	061b      	lsls	r3, r3, #24
 800322e:	4910      	ldr	r1, [pc, #64]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003230:	4313      	orrs	r3, r2
 8003232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003236:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003238:	2201      	movs	r2, #1
 800323a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800323c:	f7ff f94c 	bl	80024d8 <HAL_GetTick>
 8003240:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003242:	e008      	b.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8003244:	f7ff f948 	bl	80024d8 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e007      	b.n	8003266 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003256:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800325e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003262:	d1ef      	bne.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3730      	adds	r7, #48	; 0x30
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
 8003274:	42470070 	.word	0x42470070

08003278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327a:	b087      	sub	sp, #28
 800327c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8003286:	2300      	movs	r3, #0
 8003288:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 800328a:	2300      	movs	r3, #0
 800328c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003292:	4bc6      	ldr	r3, [pc, #792]	; (80035ac <HAL_RCC_GetSysClockFreq+0x334>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	f003 030c 	and.w	r3, r3, #12
 800329a:	2b0c      	cmp	r3, #12
 800329c:	f200 817e 	bhi.w	800359c <HAL_RCC_GetSysClockFreq+0x324>
 80032a0:	a201      	add	r2, pc, #4	; (adr r2, 80032a8 <HAL_RCC_GetSysClockFreq+0x30>)
 80032a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a6:	bf00      	nop
 80032a8:	080032dd 	.word	0x080032dd
 80032ac:	0800359d 	.word	0x0800359d
 80032b0:	0800359d 	.word	0x0800359d
 80032b4:	0800359d 	.word	0x0800359d
 80032b8:	080032e3 	.word	0x080032e3
 80032bc:	0800359d 	.word	0x0800359d
 80032c0:	0800359d 	.word	0x0800359d
 80032c4:	0800359d 	.word	0x0800359d
 80032c8:	080032e9 	.word	0x080032e9
 80032cc:	0800359d 	.word	0x0800359d
 80032d0:	0800359d 	.word	0x0800359d
 80032d4:	0800359d 	.word	0x0800359d
 80032d8:	08003445 	.word	0x08003445
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032dc:	4bb4      	ldr	r3, [pc, #720]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x338>)
 80032de:	613b      	str	r3, [r7, #16]
       break;
 80032e0:	e15f      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032e2:	4bb4      	ldr	r3, [pc, #720]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x33c>)
 80032e4:	613b      	str	r3, [r7, #16]
      break;
 80032e6:	e15c      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032e8:	4bb0      	ldr	r3, [pc, #704]	; (80035ac <HAL_RCC_GetSysClockFreq+0x334>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032f0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032f2:	4bae      	ldr	r3, [pc, #696]	; (80035ac <HAL_RCC_GetSysClockFreq+0x334>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d04a      	beq.n	8003394 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032fe:	4bab      	ldr	r3, [pc, #684]	; (80035ac <HAL_RCC_GetSysClockFreq+0x334>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	099b      	lsrs	r3, r3, #6
 8003304:	f04f 0400 	mov.w	r4, #0
 8003308:	f240 11ff 	movw	r1, #511	; 0x1ff
 800330c:	f04f 0200 	mov.w	r2, #0
 8003310:	ea03 0501 	and.w	r5, r3, r1
 8003314:	ea04 0602 	and.w	r6, r4, r2
 8003318:	4629      	mov	r1, r5
 800331a:	4632      	mov	r2, r6
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	f04f 0400 	mov.w	r4, #0
 8003324:	0154      	lsls	r4, r2, #5
 8003326:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800332a:	014b      	lsls	r3, r1, #5
 800332c:	4619      	mov	r1, r3
 800332e:	4622      	mov	r2, r4
 8003330:	1b49      	subs	r1, r1, r5
 8003332:	eb62 0206 	sbc.w	r2, r2, r6
 8003336:	f04f 0300 	mov.w	r3, #0
 800333a:	f04f 0400 	mov.w	r4, #0
 800333e:	0194      	lsls	r4, r2, #6
 8003340:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003344:	018b      	lsls	r3, r1, #6
 8003346:	1a5b      	subs	r3, r3, r1
 8003348:	eb64 0402 	sbc.w	r4, r4, r2
 800334c:	f04f 0100 	mov.w	r1, #0
 8003350:	f04f 0200 	mov.w	r2, #0
 8003354:	00e2      	lsls	r2, r4, #3
 8003356:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800335a:	00d9      	lsls	r1, r3, #3
 800335c:	460b      	mov	r3, r1
 800335e:	4614      	mov	r4, r2
 8003360:	195b      	adds	r3, r3, r5
 8003362:	eb44 0406 	adc.w	r4, r4, r6
 8003366:	f04f 0100 	mov.w	r1, #0
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	0262      	lsls	r2, r4, #9
 8003370:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003374:	0259      	lsls	r1, r3, #9
 8003376:	460b      	mov	r3, r1
 8003378:	4614      	mov	r4, r2
 800337a:	4618      	mov	r0, r3
 800337c:	4621      	mov	r1, r4
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f04f 0400 	mov.w	r4, #0
 8003384:	461a      	mov	r2, r3
 8003386:	4623      	mov	r3, r4
 8003388:	f7fd fc3e 	bl	8000c08 <__aeabi_uldivmod>
 800338c:	4603      	mov	r3, r0
 800338e:	460c      	mov	r4, r1
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e049      	b.n	8003428 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003394:	4b85      	ldr	r3, [pc, #532]	; (80035ac <HAL_RCC_GetSysClockFreq+0x334>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	f04f 0400 	mov.w	r4, #0
 800339e:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	ea03 0501 	and.w	r5, r3, r1
 80033aa:	ea04 0602 	and.w	r6, r4, r2
 80033ae:	4629      	mov	r1, r5
 80033b0:	4632      	mov	r2, r6
 80033b2:	f04f 0300 	mov.w	r3, #0
 80033b6:	f04f 0400 	mov.w	r4, #0
 80033ba:	0154      	lsls	r4, r2, #5
 80033bc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033c0:	014b      	lsls	r3, r1, #5
 80033c2:	4619      	mov	r1, r3
 80033c4:	4622      	mov	r2, r4
 80033c6:	1b49      	subs	r1, r1, r5
 80033c8:	eb62 0206 	sbc.w	r2, r2, r6
 80033cc:	f04f 0300 	mov.w	r3, #0
 80033d0:	f04f 0400 	mov.w	r4, #0
 80033d4:	0194      	lsls	r4, r2, #6
 80033d6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033da:	018b      	lsls	r3, r1, #6
 80033dc:	1a5b      	subs	r3, r3, r1
 80033de:	eb64 0402 	sbc.w	r4, r4, r2
 80033e2:	f04f 0100 	mov.w	r1, #0
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	00e2      	lsls	r2, r4, #3
 80033ec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033f0:	00d9      	lsls	r1, r3, #3
 80033f2:	460b      	mov	r3, r1
 80033f4:	4614      	mov	r4, r2
 80033f6:	195b      	adds	r3, r3, r5
 80033f8:	eb44 0406 	adc.w	r4, r4, r6
 80033fc:	f04f 0100 	mov.w	r1, #0
 8003400:	f04f 0200 	mov.w	r2, #0
 8003404:	02a2      	lsls	r2, r4, #10
 8003406:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800340a:	0299      	lsls	r1, r3, #10
 800340c:	460b      	mov	r3, r1
 800340e:	4614      	mov	r4, r2
 8003410:	4618      	mov	r0, r3
 8003412:	4621      	mov	r1, r4
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f04f 0400 	mov.w	r4, #0
 800341a:	461a      	mov	r2, r3
 800341c:	4623      	mov	r3, r4
 800341e:	f7fd fbf3 	bl	8000c08 <__aeabi_uldivmod>
 8003422:	4603      	mov	r3, r0
 8003424:	460c      	mov	r4, r1
 8003426:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003428:	4b60      	ldr	r3, [pc, #384]	; (80035ac <HAL_RCC_GetSysClockFreq+0x334>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	0c1b      	lsrs	r3, r3, #16
 800342e:	f003 0303 	and.w	r3, r3, #3
 8003432:	3301      	adds	r3, #1
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003440:	613b      	str	r3, [r7, #16]
      break;
 8003442:	e0ae      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003444:	4b59      	ldr	r3, [pc, #356]	; (80035ac <HAL_RCC_GetSysClockFreq+0x334>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800344c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800344e:	4b57      	ldr	r3, [pc, #348]	; (80035ac <HAL_RCC_GetSysClockFreq+0x334>)
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d04a      	beq.n	80034f0 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800345a:	4b54      	ldr	r3, [pc, #336]	; (80035ac <HAL_RCC_GetSysClockFreq+0x334>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	099b      	lsrs	r3, r3, #6
 8003460:	f04f 0400 	mov.w	r4, #0
 8003464:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003468:	f04f 0200 	mov.w	r2, #0
 800346c:	ea03 0501 	and.w	r5, r3, r1
 8003470:	ea04 0602 	and.w	r6, r4, r2
 8003474:	4629      	mov	r1, r5
 8003476:	4632      	mov	r2, r6
 8003478:	f04f 0300 	mov.w	r3, #0
 800347c:	f04f 0400 	mov.w	r4, #0
 8003480:	0154      	lsls	r4, r2, #5
 8003482:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003486:	014b      	lsls	r3, r1, #5
 8003488:	4619      	mov	r1, r3
 800348a:	4622      	mov	r2, r4
 800348c:	1b49      	subs	r1, r1, r5
 800348e:	eb62 0206 	sbc.w	r2, r2, r6
 8003492:	f04f 0300 	mov.w	r3, #0
 8003496:	f04f 0400 	mov.w	r4, #0
 800349a:	0194      	lsls	r4, r2, #6
 800349c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80034a0:	018b      	lsls	r3, r1, #6
 80034a2:	1a5b      	subs	r3, r3, r1
 80034a4:	eb64 0402 	sbc.w	r4, r4, r2
 80034a8:	f04f 0100 	mov.w	r1, #0
 80034ac:	f04f 0200 	mov.w	r2, #0
 80034b0:	00e2      	lsls	r2, r4, #3
 80034b2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80034b6:	00d9      	lsls	r1, r3, #3
 80034b8:	460b      	mov	r3, r1
 80034ba:	4614      	mov	r4, r2
 80034bc:	195b      	adds	r3, r3, r5
 80034be:	eb44 0406 	adc.w	r4, r4, r6
 80034c2:	f04f 0100 	mov.w	r1, #0
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	0262      	lsls	r2, r4, #9
 80034cc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80034d0:	0259      	lsls	r1, r3, #9
 80034d2:	460b      	mov	r3, r1
 80034d4:	4614      	mov	r4, r2
 80034d6:	4618      	mov	r0, r3
 80034d8:	4621      	mov	r1, r4
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f04f 0400 	mov.w	r4, #0
 80034e0:	461a      	mov	r2, r3
 80034e2:	4623      	mov	r3, r4
 80034e4:	f7fd fb90 	bl	8000c08 <__aeabi_uldivmod>
 80034e8:	4603      	mov	r3, r0
 80034ea:	460c      	mov	r4, r1
 80034ec:	617b      	str	r3, [r7, #20]
 80034ee:	e049      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034f0:	4b2e      	ldr	r3, [pc, #184]	; (80035ac <HAL_RCC_GetSysClockFreq+0x334>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	099b      	lsrs	r3, r3, #6
 80034f6:	f04f 0400 	mov.w	r4, #0
 80034fa:	f240 11ff 	movw	r1, #511	; 0x1ff
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	ea03 0501 	and.w	r5, r3, r1
 8003506:	ea04 0602 	and.w	r6, r4, r2
 800350a:	4629      	mov	r1, r5
 800350c:	4632      	mov	r2, r6
 800350e:	f04f 0300 	mov.w	r3, #0
 8003512:	f04f 0400 	mov.w	r4, #0
 8003516:	0154      	lsls	r4, r2, #5
 8003518:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800351c:	014b      	lsls	r3, r1, #5
 800351e:	4619      	mov	r1, r3
 8003520:	4622      	mov	r2, r4
 8003522:	1b49      	subs	r1, r1, r5
 8003524:	eb62 0206 	sbc.w	r2, r2, r6
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	f04f 0400 	mov.w	r4, #0
 8003530:	0194      	lsls	r4, r2, #6
 8003532:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003536:	018b      	lsls	r3, r1, #6
 8003538:	1a5b      	subs	r3, r3, r1
 800353a:	eb64 0402 	sbc.w	r4, r4, r2
 800353e:	f04f 0100 	mov.w	r1, #0
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	00e2      	lsls	r2, r4, #3
 8003548:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800354c:	00d9      	lsls	r1, r3, #3
 800354e:	460b      	mov	r3, r1
 8003550:	4614      	mov	r4, r2
 8003552:	195b      	adds	r3, r3, r5
 8003554:	eb44 0406 	adc.w	r4, r4, r6
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	02a2      	lsls	r2, r4, #10
 8003562:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003566:	0299      	lsls	r1, r3, #10
 8003568:	460b      	mov	r3, r1
 800356a:	4614      	mov	r4, r2
 800356c:	4618      	mov	r0, r3
 800356e:	4621      	mov	r1, r4
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f04f 0400 	mov.w	r4, #0
 8003576:	461a      	mov	r2, r3
 8003578:	4623      	mov	r3, r4
 800357a:	f7fd fb45 	bl	8000c08 <__aeabi_uldivmod>
 800357e:	4603      	mov	r3, r0
 8003580:	460c      	mov	r4, r1
 8003582:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003584:	4b09      	ldr	r3, [pc, #36]	; (80035ac <HAL_RCC_GetSysClockFreq+0x334>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	0f1b      	lsrs	r3, r3, #28
 800358a:	f003 0307 	and.w	r3, r3, #7
 800358e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003590:	697a      	ldr	r2, [r7, #20]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	fbb2 f3f3 	udiv	r3, r2, r3
 8003598:	613b      	str	r3, [r7, #16]
      break;
 800359a:	e002      	b.n	80035a2 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800359c:	4b04      	ldr	r3, [pc, #16]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x338>)
 800359e:	613b      	str	r3, [r7, #16]
      break;
 80035a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035a2:	693b      	ldr	r3, [r7, #16]
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	371c      	adds	r7, #28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	007a1200 	.word	0x007a1200

080035b8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8083 	beq.w	80036d8 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035d2:	4b95      	ldr	r3, [pc, #596]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d019      	beq.n	8003612 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035de:	4b92      	ldr	r3, [pc, #584]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035e6:	2b08      	cmp	r3, #8
 80035e8:	d106      	bne.n	80035f8 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035ea:	4b8f      	ldr	r3, [pc, #572]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035f6:	d00c      	beq.n	8003612 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f8:	4b8b      	ldr	r3, [pc, #556]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d112      	bne.n	800362a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003604:	4b88      	ldr	r3, [pc, #544]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003610:	d10b      	bne.n	800362a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003612:	4b85      	ldr	r3, [pc, #532]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d05b      	beq.n	80036d6 <HAL_RCC_OscConfig+0x11e>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d157      	bne.n	80036d6 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e216      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003632:	d106      	bne.n	8003642 <HAL_RCC_OscConfig+0x8a>
 8003634:	4b7c      	ldr	r3, [pc, #496]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a7b      	ldr	r2, [pc, #492]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 800363a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	e01d      	b.n	800367e <HAL_RCC_OscConfig+0xc6>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800364a:	d10c      	bne.n	8003666 <HAL_RCC_OscConfig+0xae>
 800364c:	4b76      	ldr	r3, [pc, #472]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a75      	ldr	r2, [pc, #468]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 8003652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003656:	6013      	str	r3, [r2, #0]
 8003658:	4b73      	ldr	r3, [pc, #460]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a72      	ldr	r2, [pc, #456]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 800365e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003662:	6013      	str	r3, [r2, #0]
 8003664:	e00b      	b.n	800367e <HAL_RCC_OscConfig+0xc6>
 8003666:	4b70      	ldr	r3, [pc, #448]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a6f      	ldr	r2, [pc, #444]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 800366c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003670:	6013      	str	r3, [r2, #0]
 8003672:	4b6d      	ldr	r3, [pc, #436]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a6c      	ldr	r2, [pc, #432]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 8003678:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d013      	beq.n	80036ae <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003686:	f7fe ff27 	bl	80024d8 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800368e:	f7fe ff23 	bl	80024d8 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b64      	cmp	r3, #100	; 0x64
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e1db      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a0:	4b61      	ldr	r3, [pc, #388]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0xd6>
 80036ac:	e014      	b.n	80036d8 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ae:	f7fe ff13 	bl	80024d8 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b6:	f7fe ff0f 	bl	80024d8 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b64      	cmp	r3, #100	; 0x64
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e1c7      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c8:	4b57      	ldr	r3, [pc, #348]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1f0      	bne.n	80036b6 <HAL_RCC_OscConfig+0xfe>
 80036d4:	e000      	b.n	80036d8 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d06f      	beq.n	80037c4 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036e4:	4b50      	ldr	r3, [pc, #320]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d017      	beq.n	8003720 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036f0:	4b4d      	ldr	r3, [pc, #308]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d105      	bne.n	8003708 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036fc:	4b4a      	ldr	r3, [pc, #296]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d00b      	beq.n	8003720 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003708:	4b47      	ldr	r3, [pc, #284]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003710:	2b0c      	cmp	r3, #12
 8003712:	d11c      	bne.n	800374e <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003714:	4b44      	ldr	r3, [pc, #272]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d116      	bne.n	800374e <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003720:	4b41      	ldr	r3, [pc, #260]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d005      	beq.n	8003738 <HAL_RCC_OscConfig+0x180>
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	68db      	ldr	r3, [r3, #12]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d001      	beq.n	8003738 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e18f      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003738:	4b3b      	ldr	r3, [pc, #236]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	00db      	lsls	r3, r3, #3
 8003746:	4938      	ldr	r1, [pc, #224]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 8003748:	4313      	orrs	r3, r2
 800374a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374c:	e03a      	b.n	80037c4 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d020      	beq.n	8003798 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003756:	4b35      	ldr	r3, [pc, #212]	; (800382c <HAL_RCC_OscConfig+0x274>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375c:	f7fe febc 	bl	80024d8 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003762:	e008      	b.n	8003776 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003764:	f7fe feb8 	bl	80024d8 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	2b02      	cmp	r3, #2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e170      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003776:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0f0      	beq.n	8003764 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003782:	4b29      	ldr	r3, [pc, #164]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	00db      	lsls	r3, r3, #3
 8003790:	4925      	ldr	r1, [pc, #148]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 8003792:	4313      	orrs	r3, r2
 8003794:	600b      	str	r3, [r1, #0]
 8003796:	e015      	b.n	80037c4 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003798:	4b24      	ldr	r3, [pc, #144]	; (800382c <HAL_RCC_OscConfig+0x274>)
 800379a:	2200      	movs	r2, #0
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379e:	f7fe fe9b 	bl	80024d8 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a6:	f7fe fe97 	bl	80024d8 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e14f      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1f0      	bne.n	80037a6 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0308 	and.w	r3, r3, #8
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d037      	beq.n	8003840 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d016      	beq.n	8003806 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d8:	4b15      	ldr	r3, [pc, #84]	; (8003830 <HAL_RCC_OscConfig+0x278>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037de:	f7fe fe7b 	bl	80024d8 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e6:	f7fe fe77 	bl	80024d8 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e12f      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f8:	4b0b      	ldr	r3, [pc, #44]	; (8003828 <HAL_RCC_OscConfig+0x270>)
 80037fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x22e>
 8003804:	e01c      	b.n	8003840 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <HAL_RCC_OscConfig+0x278>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800380c:	f7fe fe64 	bl	80024d8 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003812:	e00f      	b.n	8003834 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003814:	f7fe fe60 	bl	80024d8 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d908      	bls.n	8003834 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e118      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
 8003826:	bf00      	nop
 8003828:	40023800 	.word	0x40023800
 800382c:	42470000 	.word	0x42470000
 8003830:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003834:	4b8a      	ldr	r3, [pc, #552]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003836:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1e9      	bne.n	8003814 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	f000 8097 	beq.w	800397c <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800384e:	2300      	movs	r3, #0
 8003850:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003852:	4b83      	ldr	r3, [pc, #524]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10f      	bne.n	800387e <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	4b7f      	ldr	r3, [pc, #508]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	4a7e      	ldr	r2, [pc, #504]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800386c:	6413      	str	r3, [r2, #64]	; 0x40
 800386e:	4b7c      	ldr	r3, [pc, #496]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800387a:	2301      	movs	r3, #1
 800387c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800387e:	4b79      	ldr	r3, [pc, #484]	; (8003a64 <HAL_RCC_OscConfig+0x4ac>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003886:	2b00      	cmp	r3, #0
 8003888:	d118      	bne.n	80038bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800388a:	4b76      	ldr	r3, [pc, #472]	; (8003a64 <HAL_RCC_OscConfig+0x4ac>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a75      	ldr	r2, [pc, #468]	; (8003a64 <HAL_RCC_OscConfig+0x4ac>)
 8003890:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003894:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003896:	f7fe fe1f 	bl	80024d8 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800389c:	e008      	b.n	80038b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389e:	f7fe fe1b 	bl	80024d8 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d901      	bls.n	80038b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80038ac:	2303      	movs	r3, #3
 80038ae:	e0d3      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	4b6c      	ldr	r3, [pc, #432]	; (8003a64 <HAL_RCC_OscConfig+0x4ac>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d0f0      	beq.n	800389e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d106      	bne.n	80038d2 <HAL_RCC_OscConfig+0x31a>
 80038c4:	4b66      	ldr	r3, [pc, #408]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 80038c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c8:	4a65      	ldr	r2, [pc, #404]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 80038ca:	f043 0301 	orr.w	r3, r3, #1
 80038ce:	6713      	str	r3, [r2, #112]	; 0x70
 80038d0:	e01c      	b.n	800390c <HAL_RCC_OscConfig+0x354>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d10c      	bne.n	80038f4 <HAL_RCC_OscConfig+0x33c>
 80038da:	4b61      	ldr	r3, [pc, #388]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 80038dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038de:	4a60      	ldr	r2, [pc, #384]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 80038e0:	f043 0304 	orr.w	r3, r3, #4
 80038e4:	6713      	str	r3, [r2, #112]	; 0x70
 80038e6:	4b5e      	ldr	r3, [pc, #376]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 80038e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ea:	4a5d      	ldr	r2, [pc, #372]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 80038ec:	f043 0301 	orr.w	r3, r3, #1
 80038f0:	6713      	str	r3, [r2, #112]	; 0x70
 80038f2:	e00b      	b.n	800390c <HAL_RCC_OscConfig+0x354>
 80038f4:	4b5a      	ldr	r3, [pc, #360]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 80038f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f8:	4a59      	ldr	r2, [pc, #356]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 80038fa:	f023 0301 	bic.w	r3, r3, #1
 80038fe:	6713      	str	r3, [r2, #112]	; 0x70
 8003900:	4b57      	ldr	r3, [pc, #348]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003904:	4a56      	ldr	r2, [pc, #344]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003906:	f023 0304 	bic.w	r3, r3, #4
 800390a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d015      	beq.n	8003940 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003914:	f7fe fde0 	bl	80024d8 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391a:	e00a      	b.n	8003932 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391c:	f7fe fddc 	bl	80024d8 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	; 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e092      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003932:	4b4b      	ldr	r3, [pc, #300]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d0ee      	beq.n	800391c <HAL_RCC_OscConfig+0x364>
 800393e:	e014      	b.n	800396a <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7fe fdca 	bl	80024d8 <HAL_GetTick>
 8003944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003946:	e00a      	b.n	800395e <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003948:	f7fe fdc6 	bl	80024d8 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	f241 3288 	movw	r2, #5000	; 0x1388
 8003956:	4293      	cmp	r3, r2
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e07c      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800395e:	4b40      	ldr	r3, [pc, #256]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d1ee      	bne.n	8003948 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800396a:	7dfb      	ldrb	r3, [r7, #23]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d105      	bne.n	800397c <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003970:	4b3b      	ldr	r3, [pc, #236]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003974:	4a3a      	ldr	r2, [pc, #232]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003976:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d068      	beq.n	8003a56 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003984:	4b36      	ldr	r3, [pc, #216]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 030c 	and.w	r3, r3, #12
 800398c:	2b08      	cmp	r3, #8
 800398e:	d060      	beq.n	8003a52 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b02      	cmp	r3, #2
 8003996:	d145      	bne.n	8003a24 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003998:	4b33      	ldr	r3, [pc, #204]	; (8003a68 <HAL_RCC_OscConfig+0x4b0>)
 800399a:	2200      	movs	r2, #0
 800399c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800399e:	f7fe fd9b 	bl	80024d8 <HAL_GetTick>
 80039a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a4:	e008      	b.n	80039b8 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a6:	f7fe fd97 	bl	80024d8 <HAL_GetTick>
 80039aa:	4602      	mov	r2, r0
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	1ad3      	subs	r3, r2, r3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e04f      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b8:	4b29      	ldr	r3, [pc, #164]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d1f0      	bne.n	80039a6 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	69da      	ldr	r2, [r3, #28]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a1b      	ldr	r3, [r3, #32]
 80039cc:	431a      	orrs	r2, r3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d2:	019b      	lsls	r3, r3, #6
 80039d4:	431a      	orrs	r2, r3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	3b01      	subs	r3, #1
 80039de:	041b      	lsls	r3, r3, #16
 80039e0:	431a      	orrs	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e6:	061b      	lsls	r3, r3, #24
 80039e8:	431a      	orrs	r2, r3
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ee:	071b      	lsls	r3, r3, #28
 80039f0:	491b      	ldr	r1, [pc, #108]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f6:	4b1c      	ldr	r3, [pc, #112]	; (8003a68 <HAL_RCC_OscConfig+0x4b0>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039fc:	f7fe fd6c 	bl	80024d8 <HAL_GetTick>
 8003a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a02:	e008      	b.n	8003a16 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a04:	f7fe fd68 	bl	80024d8 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	2b02      	cmp	r3, #2
 8003a10:	d901      	bls.n	8003a16 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003a12:	2303      	movs	r3, #3
 8003a14:	e020      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a16:	4b12      	ldr	r3, [pc, #72]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d0f0      	beq.n	8003a04 <HAL_RCC_OscConfig+0x44c>
 8003a22:	e018      	b.n	8003a56 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a24:	4b10      	ldr	r3, [pc, #64]	; (8003a68 <HAL_RCC_OscConfig+0x4b0>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2a:	f7fe fd55 	bl	80024d8 <HAL_GetTick>
 8003a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a30:	e008      	b.n	8003a44 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a32:	f7fe fd51 	bl	80024d8 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	2b02      	cmp	r3, #2
 8003a3e:	d901      	bls.n	8003a44 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8003a40:	2303      	movs	r3, #3
 8003a42:	e009      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a44:	4b06      	ldr	r3, [pc, #24]	; (8003a60 <HAL_RCC_OscConfig+0x4a8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1f0      	bne.n	8003a32 <HAL_RCC_OscConfig+0x47a>
 8003a50:	e001      	b.n	8003a56 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e000      	b.n	8003a58 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8003a56:	2300      	movs	r3, #0
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3718      	adds	r7, #24
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	40023800 	.word	0x40023800
 8003a64:	40007000 	.word	0x40007000
 8003a68:	42470060 	.word	0x42470060

08003a6c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e022      	b.n	8003ac4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d105      	bne.n	8003a96 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7fe fb5d 	bl	8002150 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2203      	movs	r2, #3
 8003a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f000 f814 	bl	8003acc <HAL_SD_InitCard>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e00a      	b.n	8003ac4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003acc:	b5b0      	push	{r4, r5, r7, lr}
 8003ace:	b08e      	sub	sp, #56	; 0x38
 8003ad0:	af04      	add	r7, sp, #16
 8003ad2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003adc:	2300      	movs	r3, #0
 8003ade:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003ae8:	2376      	movs	r3, #118	; 0x76
 8003aea:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681d      	ldr	r5, [r3, #0]
 8003af0:	466c      	mov	r4, sp
 8003af2:	f107 0314 	add.w	r3, r7, #20
 8003af6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003afa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003afe:	f107 0308 	add.w	r3, r7, #8
 8003b02:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b04:	4628      	mov	r0, r5
 8003b06:	f001 f929 	bl	8004d5c <SDIO_Init>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003b10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d001      	beq.n	8003b1c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e031      	b.n	8003b80 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003b1c:	4b1a      	ldr	r3, [pc, #104]	; (8003b88 <HAL_SD_InitCard+0xbc>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4618      	mov	r0, r3
 8003b28:	f001 f961 	bl	8004dee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003b2c:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <HAL_SD_InitCard+0xbc>)
 8003b2e:	2201      	movs	r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 fefc 	bl	8004930 <SD_PowerON>
 8003b38:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00b      	beq.n	8003b58 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b4c:	6a3b      	ldr	r3, [r7, #32]
 8003b4e:	431a      	orrs	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e013      	b.n	8003b80 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 fe1b 	bl	8004794 <SD_InitCard>
 8003b5e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d00b      	beq.n	8003b7e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e000      	b.n	8003b80 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	3728      	adds	r7, #40	; 0x28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	bdb0      	pop	{r4, r5, r7, pc}
 8003b88:	422580a0 	.word	0x422580a0

08003b8c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b092      	sub	sp, #72	; 0x48
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003b9a:	f7fe fc9d 	bl	80024d8 <HAL_GetTick>
 8003b9e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d107      	bne.n	8003bbe <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e1d7      	b.n	8003f6e <HAL_SD_ReadBlocks+0x3e2>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	f040 81ca 	bne.w	8003f60 <HAL_SD_ReadBlocks+0x3d4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2200      	movs	r2, #0
 8003bd0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	441a      	add	r2, r3
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d907      	bls.n	8003bf0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e1be      	b.n	8003f6e <HAL_SD_ReadBlocks+0x3e2>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2203      	movs	r2, #3
 8003bf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d002      	beq.n	8003c0e <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c0a:	025b      	lsls	r3, r3, #9
 8003c0c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c16:	4618      	mov	r0, r3
 8003c18:	f001 f97c 	bl	8004f14 <SDMMC_CmdBlockLength>
 8003c1c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8003c1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00f      	beq.n	8003c44 <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a9a      	ldr	r2, [pc, #616]	; (8003e94 <HAL_SD_ReadBlocks+0x308>)
 8003c2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c32:	431a      	orrs	r2, r3
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e194      	b.n	8003f6e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003c44:	f04f 33ff 	mov.w	r3, #4294967295
 8003c48:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	025b      	lsls	r3, r3, #9
 8003c4e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003c50:	2390      	movs	r3, #144	; 0x90
 8003c52:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003c54:	2302      	movs	r3, #2
 8003c56:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f107 0214 	add.w	r2, r7, #20
 8003c68:	4611      	mov	r1, r2
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f001 f926 	bl	8004ebc <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	2b01      	cmp	r3, #1
 8003c74:	d90a      	bls.n	8003c8c <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2202      	movs	r2, #2
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c82:	4618      	mov	r0, r3
 8003c84:	f001 f98a 	bl	8004f9c <SDMMC_CmdReadMultiBlock>
 8003c88:	6478      	str	r0, [r7, #68]	; 0x44
 8003c8a:	e009      	b.n	8003ca0 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	2201      	movs	r2, #1
 8003c90:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 f95d 	bl	8004f58 <SDMMC_CmdReadSingleBlock>
 8003c9e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d012      	beq.n	8003ccc <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a7a      	ldr	r2, [pc, #488]	; (8003e94 <HAL_SD_ReadBlocks+0x308>)
 8003cac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e150      	b.n	8003f6e <HAL_SD_ReadBlocks+0x3e2>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003cd0:	e061      	b.n	8003d96 <HAL_SD_ReadBlocks+0x20a>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d03c      	beq.n	8003d5a <HAL_SD_ReadBlocks+0x1ce>
 8003ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d039      	beq.n	8003d5a <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	643b      	str	r3, [r7, #64]	; 0x40
 8003cea:	e033      	b.n	8003d54 <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f001 f85e 	bl	8004db2 <SDIO_ReadFIFO>
 8003cf6:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cfe:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d02:	3301      	adds	r3, #1
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0e:	0a1b      	lsrs	r3, r3, #8
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d14:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d18:	3301      	adds	r3, #1
 8003d1a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	b2da      	uxtb	r2, r3
 8003d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2e:	3301      	adds	r3, #1
 8003d30:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d34:	3b01      	subs	r3, #1
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d3a:	0e1b      	lsrs	r3, r3, #24
 8003d3c:	b2da      	uxtb	r2, r3
 8003d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d40:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d44:	3301      	adds	r3, #1
 8003d46:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d50:	3301      	adds	r3, #1
 8003d52:	643b      	str	r3, [r7, #64]	; 0x40
 8003d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d56:	2b07      	cmp	r3, #7
 8003d58:	d9c8      	bls.n	8003cec <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003d5a:	f7fe fbbd 	bl	80024d8 <HAL_GetTick>
 8003d5e:	4602      	mov	r2, r0
 8003d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d902      	bls.n	8003d70 <HAL_SD_ReadBlocks+0x1e4>
 8003d6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d112      	bne.n	8003d96 <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a47      	ldr	r2, [pc, #284]	; (8003e94 <HAL_SD_ReadBlocks+0x308>)
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e0eb      	b.n	8003f6e <HAL_SD_ReadBlocks+0x3e2>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d9c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d096      	beq.n	8003cd2 <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003daa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d022      	beq.n	8003df8 <HAL_SD_ReadBlocks+0x26c>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d91f      	bls.n	8003df8 <HAL_SD_ReadBlocks+0x26c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dbc:	2b03      	cmp	r3, #3
 8003dbe:	d01b      	beq.n	8003df8 <HAL_SD_ReadBlocks+0x26c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f001 f94f 	bl	8005068 <SDMMC_CmdStopTransfer>
 8003dca:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003dcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d012      	beq.n	8003df8 <HAL_SD_ReadBlocks+0x26c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2f      	ldr	r2, [pc, #188]	; (8003e94 <HAL_SD_ReadBlocks+0x308>)
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003de0:	431a      	orrs	r2, r3
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e0ba      	b.n	8003f6e <HAL_SD_ReadBlocks+0x3e2>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	f003 0308 	and.w	r3, r3, #8
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d012      	beq.n	8003e2c <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a22      	ldr	r2, [pc, #136]	; (8003e94 <HAL_SD_ReadBlocks+0x308>)
 8003e0c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e12:	f043 0208 	orr.w	r2, r3, #8
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e0a0      	b.n	8003f6e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e32:	f003 0302 	and.w	r3, r3, #2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d012      	beq.n	8003e60 <HAL_SD_ReadBlocks+0x2d4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <HAL_SD_ReadBlocks+0x308>)
 8003e40:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	f043 0202 	orr.w	r2, r3, #2
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e086      	b.n	8003f6e <HAL_SD_ReadBlocks+0x3e2>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e66:	f003 0320 	and.w	r3, r3, #32
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d063      	beq.n	8003f36 <HAL_SD_ReadBlocks+0x3aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a08      	ldr	r2, [pc, #32]	; (8003e94 <HAL_SD_ReadBlocks+0x308>)
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	f043 0220 	orr.w	r2, r3, #32
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e06c      	b.n	8003f6e <HAL_SD_ReadBlocks+0x3e2>
 8003e94:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f000 ff88 	bl	8004db2 <SDIO_ReadFIFO>
 8003ea2:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003ea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eaa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003eac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eae:	3301      	adds	r3, #1
 8003eb0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eba:	0a1b      	lsrs	r3, r3, #8
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed0:	0c1b      	lsrs	r3, r3, #16
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eda:	3301      	adds	r3, #1
 8003edc:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003ede:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee0:	3b01      	subs	r3, #1
 8003ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee6:	0e1b      	lsrs	r3, r3, #24
 8003ee8:	b2da      	uxtb	r2, r3
 8003eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eec:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003eee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef0:	3301      	adds	r3, #1
 8003ef2:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003efa:	f7fe faed 	bl	80024d8 <HAL_GetTick>
 8003efe:	4602      	mov	r2, r0
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d902      	bls.n	8003f10 <HAL_SD_ReadBlocks+0x384>
 8003f0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d112      	bne.n	8003f36 <HAL_SD_ReadBlocks+0x3aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4a18      	ldr	r2, [pc, #96]	; (8003f78 <HAL_SD_ReadBlocks+0x3ec>)
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e01b      	b.n	8003f6e <HAL_SD_ReadBlocks+0x3e2>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <HAL_SD_ReadBlocks+0x3be>
 8003f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1a6      	bne.n	8003e98 <HAL_SD_ReadBlocks+0x30c>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003f52:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	e006      	b.n	8003f6e <HAL_SD_ReadBlocks+0x3e2>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f64:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
  }
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3748      	adds	r7, #72	; 0x48
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	004005ff 	.word	0x004005ff

08003f7c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b092      	sub	sp, #72	; 0x48
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
 8003f88:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003f8a:	f7fe faa5 	bl	80024d8 <HAL_GetTick>
 8003f8e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d107      	bne.n	8003fae <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e182      	b.n	80042b4 <HAL_SD_WriteBlocks+0x338>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	f040 8175 	bne.w	80042a6 <HAL_SD_WriteBlocks+0x32a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003fc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	441a      	add	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d907      	bls.n	8003fe0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd4:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e169      	b.n	80042b4 <HAL_SD_WriteBlocks+0x338>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2203      	movs	r2, #3
 8003fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2200      	movs	r2, #0
 8003fee:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d002      	beq.n	8003ffe <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ffa:	025b      	lsls	r3, r3, #9
 8003ffc:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004006:	4618      	mov	r0, r3
 8004008:	f000 ff84 	bl	8004f14 <SDMMC_CmdBlockLength>
 800400c:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 800400e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00f      	beq.n	8004034 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a9c      	ldr	r2, [pc, #624]	; (800428c <HAL_SD_WriteBlocks+0x310>)
 800401a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004022:	431a      	orrs	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e13f      	b.n	80042b4 <HAL_SD_WriteBlocks+0x338>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004034:	f04f 33ff 	mov.w	r3, #4294967295
 8004038:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	025b      	lsls	r3, r3, #9
 800403e:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8004040:	2390      	movs	r3, #144	; 0x90
 8004042:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004044:	2300      	movs	r3, #0
 8004046:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004048:	2300      	movs	r3, #0
 800404a:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800404c:	2301      	movs	r3, #1
 800404e:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f107 0218 	add.w	r2, r7, #24
 8004058:	4611      	mov	r1, r2
 800405a:	4618      	mov	r0, r3
 800405c:	f000 ff2e 	bl	8004ebc <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b01      	cmp	r3, #1
 8004064:	d90a      	bls.n	800407c <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2220      	movs	r2, #32
 800406a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004072:	4618      	mov	r0, r3
 8004074:	f000 ffd6 	bl	8005024 <SDMMC_CmdWriteMultiBlock>
 8004078:	6478      	str	r0, [r7, #68]	; 0x44
 800407a:	e009      	b.n	8004090 <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2210      	movs	r2, #16
 8004080:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004088:	4618      	mov	r0, r3
 800408a:	f000 ffa9 	bl	8004fe0 <SDMMC_CmdWriteSingleBlock>
 800408e:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8004090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004092:	2b00      	cmp	r3, #0
 8004094:	d012      	beq.n	80040bc <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a7c      	ldr	r2, [pc, #496]	; (800428c <HAL_SD_WriteBlocks+0x310>)
 800409c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a4:	431a      	orrs	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2201      	movs	r2, #1
 80040ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0fb      	b.n	80042b4 <HAL_SD_WriteBlocks+0x338>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80040c0:	e065      	b.n	800418e <HAL_SD_WriteBlocks+0x212>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d040      	beq.n	8004152 <HAL_SD_WriteBlocks+0x1d6>
 80040d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d03d      	beq.n	8004152 <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80040d6:	2300      	movs	r3, #0
 80040d8:	643b      	str	r3, [r7, #64]	; 0x40
 80040da:	e037      	b.n	800414c <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 80040dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80040e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e4:	3301      	adds	r3, #1
 80040e6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80040e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ea:	3b01      	subs	r3, #1
 80040ec:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80040ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040f0:	781b      	ldrb	r3, [r3, #0]
 80040f2:	021a      	lsls	r2, r3, #8
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80040fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040fc:	3301      	adds	r3, #1
 80040fe:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004102:	3b01      	subs	r3, #1
 8004104:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004108:	781b      	ldrb	r3, [r3, #0]
 800410a:	041a      	lsls	r2, r3, #16
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004114:	3301      	adds	r3, #1
 8004116:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411a:	3b01      	subs	r3, #1
 800411c:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800411e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	061a      	lsls	r2, r3, #24
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	4313      	orrs	r3, r2
 8004128:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412c:	3301      	adds	r3, #1
 800412e:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004130:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004132:	3b01      	subs	r3, #1
 8004134:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f107 0214 	add.w	r2, r7, #20
 800413e:	4611      	mov	r1, r2
 8004140:	4618      	mov	r0, r3
 8004142:	f000 fe43 	bl	8004dcc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004146:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004148:	3301      	adds	r3, #1
 800414a:	643b      	str	r3, [r7, #64]	; 0x40
 800414c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800414e:	2b07      	cmp	r3, #7
 8004150:	d9c4      	bls.n	80040dc <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004152:	f7fe f9c1 	bl	80024d8 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800415e:	429a      	cmp	r2, r3
 8004160:	d902      	bls.n	8004168 <HAL_SD_WriteBlocks+0x1ec>
 8004162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004164:	2b00      	cmp	r3, #0
 8004166:	d112      	bne.n	800418e <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a47      	ldr	r2, [pc, #284]	; (800428c <HAL_SD_WriteBlocks+0x310>)
 800416e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004174:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004176:	431a      	orrs	r2, r3
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e092      	b.n	80042b4 <HAL_SD_WriteBlocks+0x338>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004194:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8004198:	2b00      	cmp	r3, #0
 800419a:	d092      	beq.n	80040c2 <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d022      	beq.n	80041f0 <HAL_SD_WriteBlocks+0x274>
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d91f      	bls.n	80041f0 <HAL_SD_WriteBlocks+0x274>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b4:	2b03      	cmp	r3, #3
 80041b6:	d01b      	beq.n	80041f0 <HAL_SD_WriteBlocks+0x274>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 ff53 	bl	8005068 <SDMMC_CmdStopTransfer>
 80041c2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80041c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d012      	beq.n	80041f0 <HAL_SD_WriteBlocks+0x274>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a2f      	ldr	r2, [pc, #188]	; (800428c <HAL_SD_WriteBlocks+0x310>)
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041d8:	431a      	orrs	r2, r3
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	2201      	movs	r2, #1
 80041e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e061      	b.n	80042b4 <HAL_SD_WriteBlocks+0x338>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d012      	beq.n	8004224 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a22      	ldr	r2, [pc, #136]	; (800428c <HAL_SD_WriteBlocks+0x310>)
 8004204:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800420a:	f043 0208 	orr.w	r2, r3, #8
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2201      	movs	r2, #1
 8004216:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	2200      	movs	r2, #0
 800421e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e047      	b.n	80042b4 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d012      	beq.n	8004258 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a15      	ldr	r2, [pc, #84]	; (800428c <HAL_SD_WriteBlocks+0x310>)
 8004238:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423e:	f043 0202 	orr.w	r2, r3, #2
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e02d      	b.n	80042b4 <HAL_SD_WriteBlocks+0x338>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800425e:	f003 0310 	and.w	r3, r3, #16
 8004262:	2b00      	cmp	r3, #0
 8004264:	d014      	beq.n	8004290 <HAL_SD_WriteBlocks+0x314>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	4a08      	ldr	r2, [pc, #32]	; (800428c <HAL_SD_WriteBlocks+0x310>)
 800426c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004272:	f043 0210 	orr.w	r2, r3, #16
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2200      	movs	r2, #0
 8004286:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e013      	b.n	80042b4 <HAL_SD_WriteBlocks+0x338>
 800428c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f240 523a 	movw	r2, #1338	; 0x53a
 8004298:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80042a2:	2300      	movs	r3, #0
 80042a4:	e006      	b.n	80042b4 <HAL_SD_WriteBlocks+0x338>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042aa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
  }
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3748      	adds	r7, #72	; 0x48
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80042bc:	b480      	push	{r7}
 80042be:	b083      	sub	sp, #12
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ca:	0f9b      	lsrs	r3, r3, #30
 80042cc:	b2da      	uxtb	r2, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042d6:	0e9b      	lsrs	r3, r3, #26
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	f003 030f 	and.w	r3, r3, #15
 80042de:	b2da      	uxtb	r2, r3
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042e8:	0e1b      	lsrs	r3, r3, #24
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	f003 0303 	and.w	r3, r3, #3
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042fa:	0c1b      	lsrs	r3, r3, #16
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004306:	0a1b      	lsrs	r3, r3, #8
 8004308:	b2da      	uxtb	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004312:	b2da      	uxtb	r2, r3
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800431c:	0d1b      	lsrs	r3, r3, #20
 800431e:	b29a      	uxth	r2, r3
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	b2da      	uxtb	r2, r3
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800433a:	0bdb      	lsrs	r3, r3, #15
 800433c:	b2db      	uxtb	r3, r3
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	b2da      	uxtb	r2, r3
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800434c:	0b9b      	lsrs	r3, r3, #14
 800434e:	b2db      	uxtb	r3, r3
 8004350:	f003 0301 	and.w	r3, r3, #1
 8004354:	b2da      	uxtb	r2, r3
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800435e:	0b5b      	lsrs	r3, r3, #13
 8004360:	b2db      	uxtb	r3, r3
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	b2da      	uxtb	r2, r3
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004370:	0b1b      	lsrs	r3, r3, #12
 8004372:	b2db      	uxtb	r3, r3
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	b2da      	uxtb	r2, r3
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	2200      	movs	r2, #0
 8004382:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004388:	2b00      	cmp	r3, #0
 800438a:	d163      	bne.n	8004454 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004390:	009a      	lsls	r2, r3, #2
 8004392:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004396:	4013      	ands	r3, r2
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800439c:	0f92      	lsrs	r2, r2, #30
 800439e:	431a      	orrs	r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a8:	0edb      	lsrs	r3, r3, #27
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	b2da      	uxtb	r2, r3
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ba:	0e1b      	lsrs	r3, r3, #24
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	f003 0307 	and.w	r3, r3, #7
 80043c2:	b2da      	uxtb	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043cc:	0d5b      	lsrs	r3, r3, #21
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	b2da      	uxtb	r2, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043de:	0c9b      	lsrs	r3, r3, #18
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	f003 0307 	and.w	r3, r3, #7
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043f0:	0bdb      	lsrs	r3, r3, #15
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f003 0307 	and.w	r3, r3, #7
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	7e1b      	ldrb	r3, [r3, #24]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f003 0307 	and.w	r3, r3, #7
 8004412:	3302      	adds	r3, #2
 8004414:	2201      	movs	r2, #1
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800441e:	fb02 f203 	mul.w	r2, r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	7a1b      	ldrb	r3, [r3, #8]
 800442a:	b2db      	uxtb	r3, r3
 800442c:	f003 030f 	and.w	r3, r3, #15
 8004430:	2201      	movs	r2, #1
 8004432:	409a      	lsls	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004440:	0a52      	lsrs	r2, r2, #9
 8004442:	fb02 f203 	mul.w	r2, r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004450:	661a      	str	r2, [r3, #96]	; 0x60
 8004452:	e031      	b.n	80044b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004458:	2b01      	cmp	r3, #1
 800445a:	d11d      	bne.n	8004498 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004460:	041b      	lsls	r3, r3, #16
 8004462:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800446a:	0c1b      	lsrs	r3, r3, #16
 800446c:	431a      	orrs	r2, r3
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	3301      	adds	r3, #1
 8004478:	029a      	lsls	r2, r3, #10
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f44f 7200 	mov.w	r2, #512	; 0x200
 800448c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	661a      	str	r2, [r3, #96]	; 0x60
 8004496:	e00f      	b.n	80044b8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a58      	ldr	r2, [pc, #352]	; (8004600 <HAL_SD_GetCardCSD+0x344>)
 800449e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e09d      	b.n	80045f4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044bc:	0b9b      	lsrs	r3, r3, #14
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ce:	09db      	lsrs	r3, r3, #7
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044d6:	b2da      	uxtb	r2, r3
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044e6:	b2da      	uxtb	r2, r3
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f0:	0fdb      	lsrs	r3, r3, #31
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	0f5b      	lsrs	r3, r3, #29
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	f003 0303 	and.w	r3, r3, #3
 8004504:	b2da      	uxtb	r2, r3
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	0e9b      	lsrs	r3, r3, #26
 8004510:	b2db      	uxtb	r3, r3
 8004512:	f003 0307 	and.w	r3, r3, #7
 8004516:	b2da      	uxtb	r2, r3
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	0d9b      	lsrs	r3, r3, #22
 8004522:	b2db      	uxtb	r3, r3
 8004524:	f003 030f 	and.w	r3, r3, #15
 8004528:	b2da      	uxtb	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004532:	0d5b      	lsrs	r3, r3, #21
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	b2da      	uxtb	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	2200      	movs	r2, #0
 8004546:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800454e:	0c1b      	lsrs	r3, r3, #16
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f003 0301 	and.w	r3, r3, #1
 8004556:	b2da      	uxtb	r2, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	0bdb      	lsrs	r3, r3, #15
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	b2da      	uxtb	r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004576:	0b9b      	lsrs	r3, r3, #14
 8004578:	b2db      	uxtb	r3, r3
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	b2da      	uxtb	r2, r3
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458a:	0b5b      	lsrs	r3, r3, #13
 800458c:	b2db      	uxtb	r3, r3
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	b2da      	uxtb	r2, r3
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800459e:	0b1b      	lsrs	r3, r3, #12
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b2:	0a9b      	lsrs	r3, r3, #10
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	f003 0303 	and.w	r3, r3, #3
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	0a1b      	lsrs	r3, r3, #8
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	f003 0303 	and.w	r3, r3, #3
 80045ce:	b2da      	uxtb	r2, r3
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045da:	085b      	lsrs	r3, r3, #1
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	004005ff 	.word	0x004005ff

08004604 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800465c:	b5b0      	push	{r4, r5, r7, lr}
 800465e:	b08e      	sub	sp, #56	; 0x38
 8004660:	af04      	add	r7, sp, #16
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2203      	movs	r2, #3
 800466a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004672:	2b03      	cmp	r3, #3
 8004674:	d02e      	beq.n	80046d4 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8004676:	683b      	ldr	r3, [r7, #0]
 8004678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800467c:	d106      	bne.n	800468c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	639a      	str	r2, [r3, #56]	; 0x38
 800468a:	e029      	b.n	80046e0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004692:	d10a      	bne.n	80046aa <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fa01 	bl	8004a9c <SD_WideBus_Enable>
 800469a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	431a      	orrs	r2, r3
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	639a      	str	r2, [r3, #56]	; 0x38
 80046a8:	e01a      	b.n	80046e0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10a      	bne.n	80046c6 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fa3e 	bl	8004b32 <SD_WideBus_Disable>
 80046b6:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	431a      	orrs	r2, r3
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	639a      	str	r2, [r3, #56]	; 0x38
 80046c4:	e00c      	b.n	80046e0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	639a      	str	r2, [r3, #56]	; 0x38
 80046d2:	e005      	b.n	80046e0 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d009      	beq.n	80046fc <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a18      	ldr	r2, [pc, #96]	; (8004750 <HAL_SD_ConfigWideBusOperation+0xf4>)
 80046ee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e024      	b.n	8004746 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	699b      	ldr	r3, [r3, #24]
 800471c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681d      	ldr	r5, [r3, #0]
 8004722:	466c      	mov	r4, sp
 8004724:	f107 0318 	add.w	r3, r7, #24
 8004728:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800472c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004730:	f107 030c 	add.w	r3, r7, #12
 8004734:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004736:	4628      	mov	r0, r5
 8004738:	f000 fb10 	bl	8004d5c <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3728      	adds	r7, #40	; 0x28
 800474a:	46bd      	mov	sp, r7
 800474c:	bdb0      	pop	{r4, r5, r7, pc}
 800474e:	bf00      	nop
 8004750:	004005ff 	.word	0x004005ff

08004754 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004760:	f107 030c 	add.w	r3, r7, #12
 8004764:	4619      	mov	r1, r3
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f970 	bl	8004a4c <SD_SendStatus>
 800476c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	0a5b      	lsrs	r3, r3, #9
 8004784:	f003 030f 	and.w	r3, r3, #15
 8004788:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800478a:	693b      	ldr	r3, [r7, #16]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3718      	adds	r7, #24
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004794:	b5b0      	push	{r4, r5, r7, lr}
 8004796:	b094      	sub	sp, #80	; 0x50
 8004798:	af04      	add	r7, sp, #16
 800479a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800479c:	2301      	movs	r3, #1
 800479e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4618      	mov	r0, r3
 80047a6:	f000 fb31 	bl	8004e0c <SDIO_GetPowerState>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80047b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80047b4:	e0b7      	b.n	8004926 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d02f      	beq.n	800481e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4618      	mov	r0, r3
 80047c4:	f000 fd5a 	bl	800527c <SDMMC_CmdSendCID>
 80047c8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <SD_InitCard+0x40>
    {
      return errorstate;
 80047d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d2:	e0a8      	b.n	8004926 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	2100      	movs	r1, #0
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fb5b 	bl	8004e96 <SDIO_GetResponse>
 80047e0:	4602      	mov	r2, r0
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2104      	movs	r1, #4
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 fb52 	bl	8004e96 <SDIO_GetResponse>
 80047f2:	4602      	mov	r2, r0
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	2108      	movs	r1, #8
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 fb49 	bl	8004e96 <SDIO_GetResponse>
 8004804:	4602      	mov	r2, r0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	210c      	movs	r1, #12
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fb40 	bl	8004e96 <SDIO_GetResponse>
 8004816:	4602      	mov	r2, r0
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004822:	2b03      	cmp	r3, #3
 8004824:	d00d      	beq.n	8004842 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f107 020e 	add.w	r2, r7, #14
 800482e:	4611      	mov	r1, r2
 8004830:	4618      	mov	r0, r3
 8004832:	f000 fd60 	bl	80052f6 <SDMMC_CmdSetRelAdd>
 8004836:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483a:	2b00      	cmp	r3, #0
 800483c:	d001      	beq.n	8004842 <SD_InitCard+0xae>
    {
      return errorstate;
 800483e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004840:	e071      	b.n	8004926 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004846:	2b03      	cmp	r3, #3
 8004848:	d036      	beq.n	80048b8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800484a:	89fb      	ldrh	r3, [r7, #14]
 800484c:	461a      	mov	r2, r3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800485a:	041b      	lsls	r3, r3, #16
 800485c:	4619      	mov	r1, r3
 800485e:	4610      	mov	r0, r2
 8004860:	f000 fd2a 	bl	80052b8 <SDMMC_CmdSendCSD>
 8004864:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004866:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <SD_InitCard+0xdc>
    {
      return errorstate;
 800486c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800486e:	e05a      	b.n	8004926 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2100      	movs	r1, #0
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fb0d 	bl	8004e96 <SDIO_GetResponse>
 800487c:	4602      	mov	r2, r0
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2104      	movs	r1, #4
 8004888:	4618      	mov	r0, r3
 800488a:	f000 fb04 	bl	8004e96 <SDIO_GetResponse>
 800488e:	4602      	mov	r2, r0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2108      	movs	r1, #8
 800489a:	4618      	mov	r0, r3
 800489c:	f000 fafb 	bl	8004e96 <SDIO_GetResponse>
 80048a0:	4602      	mov	r2, r0
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	210c      	movs	r1, #12
 80048ac:	4618      	mov	r0, r3
 80048ae:	f000 faf2 	bl	8004e96 <SDIO_GetResponse>
 80048b2:	4602      	mov	r2, r0
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2104      	movs	r1, #4
 80048be:	4618      	mov	r0, r3
 80048c0:	f000 fae9 	bl	8004e96 <SDIO_GetResponse>
 80048c4:	4603      	mov	r3, r0
 80048c6:	0d1a      	lsrs	r2, r3, #20
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80048cc:	f107 0310 	add.w	r3, r7, #16
 80048d0:	4619      	mov	r1, r3
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f7ff fcf2 	bl	80042bc <HAL_SD_GetCardCSD>
 80048d8:	4603      	mov	r3, r0
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d002      	beq.n	80048e4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048de:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80048e2:	e020      	b.n	8004926 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6819      	ldr	r1, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ec:	041b      	lsls	r3, r3, #16
 80048ee:	f04f 0400 	mov.w	r4, #0
 80048f2:	461a      	mov	r2, r3
 80048f4:	4623      	mov	r3, r4
 80048f6:	4608      	mov	r0, r1
 80048f8:	f000 fbd8 	bl	80050ac <SDMMC_CmdSelDesel>
 80048fc:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80048fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004900:	2b00      	cmp	r3, #0
 8004902:	d001      	beq.n	8004908 <SD_InitCard+0x174>
  {
    return errorstate;
 8004904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004906:	e00e      	b.n	8004926 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681d      	ldr	r5, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	466c      	mov	r4, sp
 8004910:	f103 0210 	add.w	r2, r3, #16
 8004914:	ca07      	ldmia	r2, {r0, r1, r2}
 8004916:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800491a:	3304      	adds	r3, #4
 800491c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800491e:	4628      	mov	r0, r5
 8004920:	f000 fa1c 	bl	8004d5c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3740      	adds	r7, #64	; 0x40
 800492a:	46bd      	mov	sp, r7
 800492c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08004930 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	2300      	movs	r3, #0
 8004942:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fbd2 	bl	80050f2 <SDMMC_CmdGoIdleState>
 800494e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	e072      	b.n	8004a40 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fbe5 	bl	800512e <SDMMC_CmdOperCond>
 8004964:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00d      	beq.n	8004988 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f000 fbbb 	bl	80050f2 <SDMMC_CmdGoIdleState>
 800497c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d004      	beq.n	800498e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	e05b      	b.n	8004a40 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004992:	2b01      	cmp	r3, #1
 8004994:	d137      	bne.n	8004a06 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2100      	movs	r1, #0
 800499c:	4618      	mov	r0, r3
 800499e:	f000 fbe5 	bl	800516c <SDMMC_CmdAppCommand>
 80049a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d02d      	beq.n	8004a06 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80049ae:	e047      	b.n	8004a40 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2100      	movs	r1, #0
 80049b6:	4618      	mov	r0, r3
 80049b8:	f000 fbd8 	bl	800516c <SDMMC_CmdAppCommand>
 80049bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <SD_PowerON+0x98>
    {
      return errorstate;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	e03b      	b.n	8004a40 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	491e      	ldr	r1, [pc, #120]	; (8004a48 <SD_PowerON+0x118>)
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fbee 	bl	80051b0 <SDMMC_CmdAppOperCommand>
 80049d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d002      	beq.n	80049e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80049dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80049e0:	e02e      	b.n	8004a40 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2100      	movs	r1, #0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f000 fa54 	bl	8004e96 <SDIO_GetResponse>
 80049ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	0fdb      	lsrs	r3, r3, #31
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d101      	bne.n	80049fc <SD_PowerON+0xcc>
 80049f8:	2301      	movs	r3, #1
 80049fa:	e000      	b.n	80049fe <SD_PowerON+0xce>
 80049fc:	2300      	movs	r3, #0
 80049fe:	613b      	str	r3, [r7, #16]

    count++;
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	3301      	adds	r3, #1
 8004a04:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d802      	bhi.n	8004a16 <SD_PowerON+0xe6>
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d0cc      	beq.n	80049b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d902      	bls.n	8004a26 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004a20:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a24:	e00c      	b.n	8004a40 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	645a      	str	r2, [r3, #68]	; 0x44
 8004a36:	e002      	b.n	8004a3e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004a3e:	2300      	movs	r3, #0
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	c1100000 	.word	0xc1100000

08004a4c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	b084      	sub	sp, #16
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d102      	bne.n	8004a62 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004a5c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a60:	e018      	b.n	8004a94 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681a      	ldr	r2, [r3, #0]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6a:	041b      	lsls	r3, r3, #16
 8004a6c:	4619      	mov	r1, r3
 8004a6e:	4610      	mov	r0, r2
 8004a70:	f000 fc62 	bl	8005338 <SDMMC_CmdSendStatus>
 8004a74:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	e009      	b.n	8004a94 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2100      	movs	r1, #0
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 fa05 	bl	8004e96 <SDIO_GetResponse>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3710      	adds	r7, #16
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	60fb      	str	r3, [r7, #12]
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f9ef 	bl	8004e96 <SDIO_GetResponse>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004abe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ac2:	d102      	bne.n	8004aca <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004ac4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ac8:	e02f      	b.n	8004b2a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004aca:	f107 030c 	add.w	r3, r7, #12
 8004ace:	4619      	mov	r1, r3
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 f879 	bl	8004bc8 <SD_FindSCR>
 8004ad6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d001      	beq.n	8004ae2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	e023      	b.n	8004b2a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d01c      	beq.n	8004b26 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af4:	041b      	lsls	r3, r3, #16
 8004af6:	4619      	mov	r1, r3
 8004af8:	4610      	mov	r0, r2
 8004afa:	f000 fb37 	bl	800516c <SDMMC_CmdAppCommand>
 8004afe:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d001      	beq.n	8004b0a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	e00f      	b.n	8004b2a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2102      	movs	r1, #2
 8004b10:	4618      	mov	r0, r3
 8004b12:	f000 fb70 	bl	80051f6 <SDMMC_CmdBusWidth>
 8004b16:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d001      	beq.n	8004b22 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	e003      	b.n	8004b2a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e001      	b.n	8004b2a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b26:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b086      	sub	sp, #24
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2100      	movs	r1, #0
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 f9a4 	bl	8004e96 <SDIO_GetResponse>
 8004b4e:	4603      	mov	r3, r0
 8004b50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b58:	d102      	bne.n	8004b60 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b5e:	e02f      	b.n	8004bc0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b60:	f107 030c 	add.w	r3, r7, #12
 8004b64:	4619      	mov	r1, r3
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f82e 	bl	8004bc8 <SD_FindSCR>
 8004b6c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d001      	beq.n	8004b78 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	e023      	b.n	8004bc0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d01c      	beq.n	8004bbc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b8a:	041b      	lsls	r3, r3, #16
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4610      	mov	r0, r2
 8004b90:	f000 faec 	bl	800516c <SDMMC_CmdAppCommand>
 8004b94:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d001      	beq.n	8004ba0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	e00f      	b.n	8004bc0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 fb25 	bl	80051f6 <SDMMC_CmdBusWidth>
 8004bac:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d001      	beq.n	8004bb8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	e003      	b.n	8004bc0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e001      	b.n	8004bc0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004bbc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	3718      	adds	r7, #24
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004bc8:	b590      	push	{r4, r7, lr}
 8004bca:	b08f      	sub	sp, #60	; 0x3c
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004bd2:	f7fd fc81 	bl	80024d8 <HAL_GetTick>
 8004bd6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004bdc:	2300      	movs	r3, #0
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	2300      	movs	r3, #0
 8004be2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	2108      	movs	r1, #8
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f000 f990 	bl	8004f14 <SDMMC_CmdBlockLength>
 8004bf4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d001      	beq.n	8004c00 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfe:	e0a9      	b.n	8004d54 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681a      	ldr	r2, [r3, #0]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c08:	041b      	lsls	r3, r3, #16
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	4610      	mov	r0, r2
 8004c0e:	f000 faad 	bl	800516c <SDMMC_CmdAppCommand>
 8004c12:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <SD_FindSCR+0x56>
  {
    return errorstate;
 8004c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1c:	e09a      	b.n	8004d54 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c22:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004c24:	2308      	movs	r3, #8
 8004c26:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004c28:	2330      	movs	r3, #48	; 0x30
 8004c2a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004c34:	2301      	movs	r3, #1
 8004c36:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f107 0210 	add.w	r2, r7, #16
 8004c40:	4611      	mov	r1, r2
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 f93a 	bl	8004ebc <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f000 faf4 	bl	800523a <SDMMC_CmdSendSCR>
 8004c52:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d022      	beq.n	8004ca0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8004c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5c:	e07a      	b.n	8004d54 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00e      	beq.n	8004c8a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6819      	ldr	r1, [r3, #0]
 8004c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	f107 0208 	add.w	r2, r7, #8
 8004c78:	18d4      	adds	r4, r2, r3
 8004c7a:	4608      	mov	r0, r1
 8004c7c:	f000 f899 	bl	8004db2 <SDIO_ReadFIFO>
 8004c80:	4603      	mov	r3, r0
 8004c82:	6023      	str	r3, [r4, #0]
      index++;
 8004c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c86:	3301      	adds	r3, #1
 8004c88:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004c8a:	f7fd fc25 	bl	80024d8 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c98:	d102      	bne.n	8004ca0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004c9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004c9e:	e059      	b.n	8004d54 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ca6:	f240 432a 	movw	r3, #1066	; 0x42a
 8004caa:	4013      	ands	r3, r2
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0d6      	beq.n	8004c5e <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d005      	beq.n	8004cca <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	2208      	movs	r2, #8
 8004cc4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004cc6:	2308      	movs	r3, #8
 8004cc8:	e044      	b.n	8004d54 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004ce0:	2302      	movs	r3, #2
 8004ce2:	e037      	b.n	8004d54 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cea:	f003 0320 	and.w	r3, r3, #32
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004cfa:	2320      	movs	r3, #32
 8004cfc:	e02a      	b.n	8004d54 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f240 523a 	movw	r2, #1338	; 0x53a
 8004d06:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	061a      	lsls	r2, r3, #24
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	021b      	lsls	r3, r3, #8
 8004d10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d14:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	0a1b      	lsrs	r3, r3, #8
 8004d1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d1e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	0e1b      	lsrs	r3, r3, #24
 8004d24:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d28:	601a      	str	r2, [r3, #0]
    scr++;
 8004d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d2c:	3304      	adds	r3, #4
 8004d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	061a      	lsls	r2, r3, #24
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	021b      	lsls	r3, r3, #8
 8004d38:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d3c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	0a1b      	lsrs	r3, r3, #8
 8004d42:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d46:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	0e1b      	lsrs	r3, r3, #24
 8004d4c:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d50:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	373c      	adds	r7, #60	; 0x3c
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd90      	pop	{r4, r7, pc}

08004d5c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004d5c:	b084      	sub	sp, #16
 8004d5e:	b480      	push	{r7}
 8004d60:	b085      	sub	sp, #20
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	f107 001c 	add.w	r0, r7, #28
 8004d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004d72:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004d74:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004d76:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004d7a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004d7e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004d82:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004d86:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004d96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	431a      	orrs	r2, r3
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004da2:	2300      	movs	r3, #0
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3714      	adds	r7, #20
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	b004      	add	sp, #16
 8004db0:	4770      	bx	lr

08004db2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004db2:	b480      	push	{r7}
 8004db4:	b083      	sub	sp, #12
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2203      	movs	r2, #3
 8004dfa:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004dfc:	2002      	movs	r0, #2
 8004dfe:	f7fd fb77 	bl	80024f0 <HAL_Delay>
  
  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3708      	adds	r7, #8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0303 	and.w	r3, r3, #3
}
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	370c      	adds	r7, #12
 8004e20:	46bd      	mov	sp, r7
 8004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e26:	4770      	bx	lr

08004e28 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004e28:	b480      	push	{r7}
 8004e2a:	b085      	sub	sp, #20
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
 8004e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	681a      	ldr	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e46:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004e4c:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004e52:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	68db      	ldr	r3, [r3, #12]
 8004e5e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004e62:	f023 030f 	bic.w	r3, r3, #15
 8004e66:	68fa      	ldr	r2, [r7, #12]
 8004e68:	431a      	orrs	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	b2db      	uxtb	r3, r3
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b085      	sub	sp, #20
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3314      	adds	r3, #20
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
}  
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3714      	adds	r7, #20
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685a      	ldr	r2, [r3, #4]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ee2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004ee8:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004eee:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0

}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3714      	adds	r7, #20
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b088      	sub	sp, #32
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004f22:	2310      	movs	r3, #16
 8004f24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f26:	2340      	movs	r3, #64	; 0x40
 8004f28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f32:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f34:	f107 0308 	add.w	r3, r7, #8
 8004f38:	4619      	mov	r1, r3
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f7ff ff74 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f44:	2110      	movs	r1, #16
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 fa40 	bl	80053cc <SDMMC_GetCmdResp1>
 8004f4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3720      	adds	r7, #32
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}

08004f58 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b088      	sub	sp, #32
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004f66:	2311      	movs	r3, #17
 8004f68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004f6a:	2340      	movs	r3, #64	; 0x40
 8004f6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f76:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004f78:	f107 0308 	add.w	r3, r7, #8
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7ff ff52 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004f84:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f88:	2111      	movs	r1, #17
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f000 fa1e 	bl	80053cc <SDMMC_GetCmdResp1>
 8004f90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004f92:	69fb      	ldr	r3, [r7, #28]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b088      	sub	sp, #32
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004faa:	2312      	movs	r3, #18
 8004fac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fae:	2340      	movs	r3, #64	; 0x40
 8004fb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fba:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fbc:	f107 0308 	add.w	r3, r7, #8
 8004fc0:	4619      	mov	r1, r3
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff ff30 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fcc:	2112      	movs	r1, #18
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	f000 f9fc 	bl	80053cc <SDMMC_GetCmdResp1>
 8004fd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fd6:	69fb      	ldr	r3, [r7, #28]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	3720      	adds	r7, #32
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bd80      	pop	{r7, pc}

08004fe0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b088      	sub	sp, #32
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
 8004fe8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004fee:	2318      	movs	r3, #24
 8004ff0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ff2:	2340      	movs	r3, #64	; 0x40
 8004ff4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ffa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ffe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005000:	f107 0308 	add.w	r3, r7, #8
 8005004:	4619      	mov	r1, r3
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff ff0e 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800500c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005010:	2118      	movs	r1, #24
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 f9da 	bl	80053cc <SDMMC_GetCmdResp1>
 8005018:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800501a:	69fb      	ldr	r3, [r7, #28]
}
 800501c:	4618      	mov	r0, r3
 800501e:	3720      	adds	r7, #32
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}

08005024 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8005032:	2319      	movs	r3, #25
 8005034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005036:	2340      	movs	r3, #64	; 0x40
 8005038:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800503e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005042:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005044:	f107 0308 	add.w	r3, r7, #8
 8005048:	4619      	mov	r1, r3
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f7ff feec 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005050:	f241 3288 	movw	r2, #5000	; 0x1388
 8005054:	2119      	movs	r1, #25
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f9b8 	bl	80053cc <SDMMC_GetCmdResp1>
 800505c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800505e:	69fb      	ldr	r3, [r7, #28]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3720      	adds	r7, #32
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005074:	230c      	movs	r3, #12
 8005076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005078:	2340      	movs	r3, #64	; 0x40
 800507a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800507c:	2300      	movs	r3, #0
 800507e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005084:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005086:	f107 0308 	add.w	r3, r7, #8
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f7ff fecb 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8005092:	4a05      	ldr	r2, [pc, #20]	; (80050a8 <SDMMC_CmdStopTransfer+0x40>)
 8005094:	210c      	movs	r1, #12
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 f998 	bl	80053cc <SDMMC_GetCmdResp1>
 800509c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800509e:	69fb      	ldr	r3, [r7, #28]
}
 80050a0:	4618      	mov	r0, r3
 80050a2:	3720      	adds	r7, #32
 80050a4:	46bd      	mov	sp, r7
 80050a6:	bd80      	pop	{r7, pc}
 80050a8:	05f5e100 	.word	0x05f5e100

080050ac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b08a      	sub	sp, #40	; 0x28
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	60f8      	str	r0, [r7, #12]
 80050b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80050bc:	2307      	movs	r3, #7
 80050be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050c0:	2340      	movs	r3, #64	; 0x40
 80050c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050c4:	2300      	movs	r3, #0
 80050c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050cc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050ce:	f107 0310 	add.w	r3, r7, #16
 80050d2:	4619      	mov	r1, r3
 80050d4:	68f8      	ldr	r0, [r7, #12]
 80050d6:	f7ff fea7 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80050da:	f241 3288 	movw	r2, #5000	; 0x1388
 80050de:	2107      	movs	r1, #7
 80050e0:	68f8      	ldr	r0, [r7, #12]
 80050e2:	f000 f973 	bl	80053cc <SDMMC_GetCmdResp1>
 80050e6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3728      	adds	r7, #40	; 0x28
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}

080050f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80050f2:	b580      	push	{r7, lr}
 80050f4:	b088      	sub	sp, #32
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80050fa:	2300      	movs	r3, #0
 80050fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80050fe:	2300      	movs	r3, #0
 8005100:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8005102:	2300      	movs	r3, #0
 8005104:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005106:	2300      	movs	r3, #0
 8005108:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800510a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800510e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005110:	f107 0308 	add.w	r3, r7, #8
 8005114:	4619      	mov	r1, r3
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f7ff fe86 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f92d 	bl	800537c <SDMMC_GetCmdError>
 8005122:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005124:	69fb      	ldr	r3, [r7, #28]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3720      	adds	r7, #32
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b088      	sub	sp, #32
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005136:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800513a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800513c:	2308      	movs	r3, #8
 800513e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005140:	2340      	movs	r3, #64	; 0x40
 8005142:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005144:	2300      	movs	r3, #0
 8005146:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005148:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800514c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800514e:	f107 0308 	add.w	r3, r7, #8
 8005152:	4619      	mov	r1, r3
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f7ff fe67 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 fb16 	bl	800578c <SDMMC_GetCmdResp7>
 8005160:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005162:	69fb      	ldr	r3, [r7, #28]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3720      	adds	r7, #32
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b088      	sub	sp, #32
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
 8005174:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800517a:	2337      	movs	r3, #55	; 0x37
 800517c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800517e:	2340      	movs	r3, #64	; 0x40
 8005180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800518a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800518c:	f107 0308 	add.w	r3, r7, #8
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff fe48 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005198:	f241 3288 	movw	r2, #5000	; 0x1388
 800519c:	2137      	movs	r1, #55	; 0x37
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 f914 	bl	80053cc <SDMMC_GetCmdResp1>
 80051a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051a6:	69fb      	ldr	r3, [r7, #28]
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3720      	adds	r7, #32
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b088      	sub	sp, #32
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80051c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80051c6:	2329      	movs	r3, #41	; 0x29
 80051c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051ca:	2340      	movs	r3, #64	; 0x40
 80051cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051ce:	2300      	movs	r3, #0
 80051d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051d8:	f107 0308 	add.w	r3, r7, #8
 80051dc:	4619      	mov	r1, r3
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f7ff fe22 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f000 fa23 	bl	8005630 <SDMMC_GetCmdResp3>
 80051ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051ec:	69fb      	ldr	r3, [r7, #28]
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3720      	adds	r7, #32
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}

080051f6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80051f6:	b580      	push	{r7, lr}
 80051f8:	b088      	sub	sp, #32
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	6078      	str	r0, [r7, #4]
 80051fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005204:	2306      	movs	r3, #6
 8005206:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005208:	2340      	movs	r3, #64	; 0x40
 800520a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005214:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005216:	f107 0308 	add.w	r3, r7, #8
 800521a:	4619      	mov	r1, r3
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f7ff fe03 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8005222:	f241 3288 	movw	r2, #5000	; 0x1388
 8005226:	2106      	movs	r1, #6
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f8cf 	bl	80053cc <SDMMC_GetCmdResp1>
 800522e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005230:	69fb      	ldr	r3, [r7, #28]
}
 8005232:	4618      	mov	r0, r3
 8005234:	3720      	adds	r7, #32
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b088      	sub	sp, #32
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8005242:	2300      	movs	r3, #0
 8005244:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005246:	2333      	movs	r3, #51	; 0x33
 8005248:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800524a:	2340      	movs	r3, #64	; 0x40
 800524c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800524e:	2300      	movs	r3, #0
 8005250:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005252:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005256:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005258:	f107 0308 	add.w	r3, r7, #8
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7ff fde2 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005264:	f241 3288 	movw	r2, #5000	; 0x1388
 8005268:	2133      	movs	r1, #51	; 0x33
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f8ae 	bl	80053cc <SDMMC_GetCmdResp1>
 8005270:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005272:	69fb      	ldr	r3, [r7, #28]
}
 8005274:	4618      	mov	r0, r3
 8005276:	3720      	adds	r7, #32
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b088      	sub	sp, #32
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005284:	2300      	movs	r3, #0
 8005286:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005288:	2302      	movs	r3, #2
 800528a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800528c:	23c0      	movs	r3, #192	; 0xc0
 800528e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005290:	2300      	movs	r3, #0
 8005292:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005298:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800529a:	f107 0308 	add.w	r3, r7, #8
 800529e:	4619      	mov	r1, r3
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff fdc1 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f97c 	bl	80055a4 <SDMMC_GetCmdResp2>
 80052ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ae:	69fb      	ldr	r3, [r7, #28]
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3720      	adds	r7, #32
 80052b4:	46bd      	mov	sp, r7
 80052b6:	bd80      	pop	{r7, pc}

080052b8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b088      	sub	sp, #32
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80052c2:	683b      	ldr	r3, [r7, #0]
 80052c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80052c6:	2309      	movs	r3, #9
 80052c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80052ca:	23c0      	movs	r3, #192	; 0xc0
 80052cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052ce:	2300      	movs	r3, #0
 80052d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052d8:	f107 0308 	add.w	r3, r7, #8
 80052dc:	4619      	mov	r1, r3
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f7ff fda2 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f000 f95d 	bl	80055a4 <SDMMC_GetCmdResp2>
 80052ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ec:	69fb      	ldr	r3, [r7, #28]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3720      	adds	r7, #32
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}

080052f6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80052f6:	b580      	push	{r7, lr}
 80052f8:	b088      	sub	sp, #32
 80052fa:	af00      	add	r7, sp, #0
 80052fc:	6078      	str	r0, [r7, #4]
 80052fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005304:	2303      	movs	r3, #3
 8005306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005308:	2340      	movs	r3, #64	; 0x40
 800530a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005314:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff fd83 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	2103      	movs	r1, #3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f9bc 	bl	80056a4 <SDMMC_GetCmdResp6>
 800532c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800532e:	69fb      	ldr	r3, [r7, #28]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3720      	adds	r7, #32
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005346:	230d      	movs	r3, #13
 8005348:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800534a:	2340      	movs	r3, #64	; 0x40
 800534c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800534e:	2300      	movs	r3, #0
 8005350:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005356:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005358:	f107 0308 	add.w	r3, r7, #8
 800535c:	4619      	mov	r1, r3
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7ff fd62 	bl	8004e28 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005364:	f241 3288 	movw	r2, #5000	; 0x1388
 8005368:	210d      	movs	r1, #13
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f000 f82e 	bl	80053cc <SDMMC_GetCmdResp1>
 8005370:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005372:	69fb      	ldr	r3, [r7, #28]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3720      	adds	r7, #32
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800537c:	b490      	push	{r4, r7}
 800537e:	b082      	sub	sp, #8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005384:	4b0f      	ldr	r3, [pc, #60]	; (80053c4 <SDMMC_GetCmdError+0x48>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a0f      	ldr	r2, [pc, #60]	; (80053c8 <SDMMC_GetCmdError+0x4c>)
 800538a:	fba2 2303 	umull	r2, r3, r2, r3
 800538e:	0a5b      	lsrs	r3, r3, #9
 8005390:	f241 3288 	movw	r2, #5000	; 0x1388
 8005394:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8005398:	4623      	mov	r3, r4
 800539a:	1e5c      	subs	r4, r3, #1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d102      	bne.n	80053a6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053a4:	e009      	b.n	80053ba <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d0f2      	beq.n	8005398 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	22c5      	movs	r2, #197	; 0xc5
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3708      	adds	r7, #8
 80053be:	46bd      	mov	sp, r7
 80053c0:	bc90      	pop	{r4, r7}
 80053c2:	4770      	bx	lr
 80053c4:	20000000 	.word	0x20000000
 80053c8:	10624dd3 	.word	0x10624dd3

080053cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80053cc:	b590      	push	{r4, r7, lr}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	460b      	mov	r3, r1
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80053da:	4b6f      	ldr	r3, [pc, #444]	; (8005598 <SDMMC_GetCmdResp1+0x1cc>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a6f      	ldr	r2, [pc, #444]	; (800559c <SDMMC_GetCmdResp1+0x1d0>)
 80053e0:	fba2 2303 	umull	r2, r3, r2, r3
 80053e4:	0a5b      	lsrs	r3, r3, #9
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80053ec:	4623      	mov	r3, r4
 80053ee:	1e5c      	subs	r4, r3, #1
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d102      	bne.n	80053fa <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80053f4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053f8:	e0c9      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053fe:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005406:	2b00      	cmp	r3, #0
 8005408:	d0f0      	beq.n	80053ec <SDMMC_GetCmdResp1+0x20>
 800540a:	697b      	ldr	r3, [r7, #20]
 800540c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1eb      	bne.n	80053ec <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005418:	f003 0304 	and.w	r3, r3, #4
 800541c:	2b00      	cmp	r3, #0
 800541e:	d004      	beq.n	800542a <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2204      	movs	r2, #4
 8005424:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005426:	2304      	movs	r3, #4
 8005428:	e0b1      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d004      	beq.n	8005440 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2201      	movs	r2, #1
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800543c:	2301      	movs	r3, #1
 800543e:	e0a6      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	22c5      	movs	r2, #197	; 0xc5
 8005444:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f7ff fd18 	bl	8004e7c <SDIO_GetCommandResponse>
 800544c:	4603      	mov	r3, r0
 800544e:	461a      	mov	r2, r3
 8005450:	7afb      	ldrb	r3, [r7, #11]
 8005452:	4293      	cmp	r3, r2
 8005454:	d001      	beq.n	800545a <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005456:	2301      	movs	r3, #1
 8005458:	e099      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800545a:	2100      	movs	r1, #0
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	f7ff fd1a 	bl	8004e96 <SDIO_GetResponse>
 8005462:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4b4e      	ldr	r3, [pc, #312]	; (80055a0 <SDMMC_GetCmdResp1+0x1d4>)
 8005468:	4013      	ands	r3, r2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 800546e:	2300      	movs	r3, #0
 8005470:	e08d      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	da02      	bge.n	800547e <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005478:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800547c:	e087      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d001      	beq.n	800548c <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005488:	2340      	movs	r3, #64	; 0x40
 800548a:	e080      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800548c:	693b      	ldr	r3, [r7, #16]
 800548e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d001      	beq.n	800549a <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8005496:	2380      	movs	r3, #128	; 0x80
 8005498:	e079      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d002      	beq.n	80054aa <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80054a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054a8:	e071      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80054b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054b8:	e069      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80054c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054c8:	e061      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80054d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80054d8:	e059      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d002      	beq.n	80054ea <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80054e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80054e8:	e051      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d002      	beq.n	80054fa <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80054f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054f8:	e049      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d002      	beq.n	800550a <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8005504:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005508:	e041      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 8005514:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005518:	e039      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d002      	beq.n	800552a <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8005524:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005528:	e031      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d002      	beq.n	800553a <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8005534:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005538:	e029      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8005544:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005548:	e021      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8005554:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005558:	e019      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800555a:	693b      	ldr	r3, [r7, #16]
 800555c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005560:	2b00      	cmp	r3, #0
 8005562:	d002      	beq.n	800556a <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8005564:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005568:	e011      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8005574:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005578:	e009      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	f003 0308 	and.w	r3, r3, #8
 8005580:	2b00      	cmp	r3, #0
 8005582:	d002      	beq.n	800558a <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8005584:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005588:	e001      	b.n	800558e <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800558a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800558e:	4618      	mov	r0, r3
 8005590:	371c      	adds	r7, #28
 8005592:	46bd      	mov	sp, r7
 8005594:	bd90      	pop	{r4, r7, pc}
 8005596:	bf00      	nop
 8005598:	20000000 	.word	0x20000000
 800559c:	10624dd3 	.word	0x10624dd3
 80055a0:	fdffe008 	.word	0xfdffe008

080055a4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80055a4:	b490      	push	{r4, r7}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80055ac:	4b1e      	ldr	r3, [pc, #120]	; (8005628 <SDMMC_GetCmdResp2+0x84>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1e      	ldr	r2, [pc, #120]	; (800562c <SDMMC_GetCmdResp2+0x88>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	0a5b      	lsrs	r3, r3, #9
 80055b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055bc:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80055c0:	4623      	mov	r3, r4
 80055c2:	1e5c      	subs	r4, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d102      	bne.n	80055ce <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80055c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80055cc:	e026      	b.n	800561c <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055d2:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0f0      	beq.n	80055c0 <SDMMC_GetCmdResp2+0x1c>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1eb      	bne.n	80055c0 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d004      	beq.n	80055fe <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2204      	movs	r2, #4
 80055f8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80055fa:	2304      	movs	r3, #4
 80055fc:	e00e      	b.n	800561c <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d004      	beq.n	8005614 <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2201      	movs	r2, #1
 800560e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005610:	2301      	movs	r3, #1
 8005612:	e003      	b.n	800561c <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	22c5      	movs	r2, #197	; 0xc5
 8005618:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3710      	adds	r7, #16
 8005620:	46bd      	mov	sp, r7
 8005622:	bc90      	pop	{r4, r7}
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	20000000 	.word	0x20000000
 800562c:	10624dd3 	.word	0x10624dd3

08005630 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8005630:	b490      	push	{r4, r7}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005638:	4b18      	ldr	r3, [pc, #96]	; (800569c <SDMMC_GetCmdResp3+0x6c>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a18      	ldr	r2, [pc, #96]	; (80056a0 <SDMMC_GetCmdResp3+0x70>)
 800563e:	fba2 2303 	umull	r2, r3, r2, r3
 8005642:	0a5b      	lsrs	r3, r3, #9
 8005644:	f241 3288 	movw	r2, #5000	; 0x1388
 8005648:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800564c:	4623      	mov	r3, r4
 800564e:	1e5c      	subs	r4, r3, #1
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005654:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005658:	e01b      	b.n	8005692 <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565e:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0f0      	beq.n	800564c <SDMMC_GetCmdResp3+0x1c>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1eb      	bne.n	800564c <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2204      	movs	r2, #4
 8005684:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005686:	2304      	movs	r3, #4
 8005688:	e003      	b.n	8005692 <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	22c5      	movs	r2, #197	; 0xc5
 800568e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bc90      	pop	{r4, r7}
 800569a:	4770      	bx	lr
 800569c:	20000000 	.word	0x20000000
 80056a0:	10624dd3 	.word	0x10624dd3

080056a4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80056a4:	b590      	push	{r4, r7, lr}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	460b      	mov	r3, r1
 80056ae:	607a      	str	r2, [r7, #4]
 80056b0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056b2:	4b34      	ldr	r3, [pc, #208]	; (8005784 <SDMMC_GetCmdResp6+0xe0>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a34      	ldr	r2, [pc, #208]	; (8005788 <SDMMC_GetCmdResp6+0xe4>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	0a5b      	lsrs	r3, r3, #9
 80056be:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80056c6:	4623      	mov	r3, r4
 80056c8:	1e5c      	subs	r4, r3, #1
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d102      	bne.n	80056d4 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056ce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056d2:	e052      	b.n	800577a <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056d8:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <SDMMC_GetCmdResp6+0x22>
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1eb      	bne.n	80056c6 <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	2204      	movs	r2, #4
 80056fe:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005700:	2304      	movs	r3, #4
 8005702:	e03a      	b.n	800577a <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2201      	movs	r2, #1
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005716:	2301      	movs	r3, #1
 8005718:	e02f      	b.n	800577a <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800571a:	68f8      	ldr	r0, [r7, #12]
 800571c:	f7ff fbae 	bl	8004e7c <SDIO_GetCommandResponse>
 8005720:	4603      	mov	r3, r0
 8005722:	461a      	mov	r2, r3
 8005724:	7afb      	ldrb	r3, [r7, #11]
 8005726:	4293      	cmp	r3, r2
 8005728:	d001      	beq.n	800572e <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800572a:	2301      	movs	r3, #1
 800572c:	e025      	b.n	800577a <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	22c5      	movs	r2, #197	; 0xc5
 8005732:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005734:	2100      	movs	r1, #0
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f7ff fbad 	bl	8004e96 <SDIO_GetResponse>
 800573c:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d106      	bne.n	8005756 <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	0c1b      	lsrs	r3, r3, #16
 800574c:	b29a      	uxth	r2, r3
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005752:	2300      	movs	r3, #0
 8005754:	e011      	b.n	800577a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d002      	beq.n	8005766 <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005764:	e009      	b.n	800577a <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d002      	beq.n	8005776 <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005774:	e001      	b.n	800577a <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005776:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800577a:	4618      	mov	r0, r3
 800577c:	371c      	adds	r7, #28
 800577e:	46bd      	mov	sp, r7
 8005780:	bd90      	pop	{r4, r7, pc}
 8005782:	bf00      	nop
 8005784:	20000000 	.word	0x20000000
 8005788:	10624dd3 	.word	0x10624dd3

0800578c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800578c:	b490      	push	{r4, r7}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005794:	4b21      	ldr	r3, [pc, #132]	; (800581c <SDMMC_GetCmdResp7+0x90>)
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a21      	ldr	r2, [pc, #132]	; (8005820 <SDMMC_GetCmdResp7+0x94>)
 800579a:	fba2 2303 	umull	r2, r3, r2, r3
 800579e:	0a5b      	lsrs	r3, r3, #9
 80057a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80057a8:	4623      	mov	r3, r4
 80057aa:	1e5c      	subs	r4, r3, #1
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d102      	bne.n	80057b6 <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80057b0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80057b4:	e02c      	b.n	8005810 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ba:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d0f0      	beq.n	80057a8 <SDMMC_GetCmdResp7+0x1c>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1eb      	bne.n	80057a8 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d4:	f003 0304 	and.w	r3, r3, #4
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d004      	beq.n	80057e6 <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2204      	movs	r2, #4
 80057e0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80057e2:	2304      	movs	r3, #4
 80057e4:	e014      	b.n	8005810 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	f003 0301 	and.w	r3, r3, #1
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d004      	beq.n	80057fc <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e009      	b.n	8005810 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2240      	movs	r2, #64	; 0x40
 800580c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800580e:	2300      	movs	r3, #0
  
}
 8005810:	4618      	mov	r0, r3
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bc90      	pop	{r4, r7}
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000000 	.word	0x20000000
 8005820:	10624dd3 	.word	0x10624dd3

08005824 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005828:	4904      	ldr	r1, [pc, #16]	; (800583c <MX_FATFS_Init+0x18>)
 800582a:	4805      	ldr	r0, [pc, #20]	; (8005840 <MX_FATFS_Init+0x1c>)
 800582c:	f003 fbe8 	bl	8009000 <FATFS_LinkDriver>
 8005830:	4603      	mov	r3, r0
 8005832:	461a      	mov	r2, r3
 8005834:	4b03      	ldr	r3, [pc, #12]	; (8005844 <MX_FATFS_Init+0x20>)
 8005836:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005838:	bf00      	nop
 800583a:	bd80      	pop	{r7, pc}
 800583c:	20000a60 	.word	0x20000a60
 8005840:	08013734 	.word	0x08013734
 8005844:	20000a5c 	.word	0x20000a5c

08005848 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800584c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800584e:	4618      	mov	r0, r3
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr

08005858 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005862:	f000 f879 	bl	8005958 <BSP_SD_IsDetected>
 8005866:	4603      	mov	r3, r0
 8005868:	2b01      	cmp	r3, #1
 800586a:	d001      	beq.n	8005870 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	e012      	b.n	8005896 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005870:	480b      	ldr	r0, [pc, #44]	; (80058a0 <BSP_SD_Init+0x48>)
 8005872:	f7fe f8fb 	bl	8003a6c <HAL_SD_Init>
 8005876:	4603      	mov	r3, r0
 8005878:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800587a:	79fb      	ldrb	r3, [r7, #7]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d109      	bne.n	8005894 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005880:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005884:	4806      	ldr	r0, [pc, #24]	; (80058a0 <BSP_SD_Init+0x48>)
 8005886:	f7fe fee9 	bl	800465c <HAL_SD_ConfigWideBusOperation>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005894:	79fb      	ldrb	r3, [r7, #7]
}
 8005896:	4618      	mov	r0, r3
 8005898:	3708      	adds	r7, #8
 800589a:	46bd      	mov	sp, r7
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	20000978 	.word	0x20000978

080058a4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b088      	sub	sp, #32
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	60f8      	str	r0, [r7, #12]
 80058ac:	60b9      	str	r1, [r7, #8]
 80058ae:	607a      	str	r2, [r7, #4]
 80058b0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80058b2:	2300      	movs	r3, #0
 80058b4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	9300      	str	r3, [sp, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	68f9      	ldr	r1, [r7, #12]
 80058c0:	4806      	ldr	r0, [pc, #24]	; (80058dc <BSP_SD_ReadBlocks+0x38>)
 80058c2:	f7fe f963 	bl	8003b8c <HAL_SD_ReadBlocks>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80058d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	20000978 	.word	0x20000978

080058e0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b088      	sub	sp, #32
 80058e4:	af02      	add	r7, sp, #8
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80058ee:	2300      	movs	r3, #0
 80058f0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	68f9      	ldr	r1, [r7, #12]
 80058fc:	4806      	ldr	r0, [pc, #24]	; (8005918 <BSP_SD_WriteBlocks+0x38>)
 80058fe:	f7fe fb3d 	bl	8003f7c <HAL_SD_WriteBlocks>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d001      	beq.n	800590c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800590c:	7dfb      	ldrb	r3, [r7, #23]
}
 800590e:	4618      	mov	r0, r3
 8005910:	3718      	adds	r7, #24
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20000978 	.word	0x20000978

0800591c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005920:	4805      	ldr	r0, [pc, #20]	; (8005938 <BSP_SD_GetCardState+0x1c>)
 8005922:	f7fe ff17 	bl	8004754 <HAL_SD_GetCardState>
 8005926:	4603      	mov	r3, r0
 8005928:	2b04      	cmp	r3, #4
 800592a:	bf14      	ite	ne
 800592c:	2301      	movne	r3, #1
 800592e:	2300      	moveq	r3, #0
 8005930:	b2db      	uxtb	r3, r3
}
 8005932:	4618      	mov	r0, r3
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20000978 	.word	0x20000978

0800593c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b082      	sub	sp, #8
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005944:	6879      	ldr	r1, [r7, #4]
 8005946:	4803      	ldr	r0, [pc, #12]	; (8005954 <BSP_SD_GetCardInfo+0x18>)
 8005948:	f7fe fe5c 	bl	8004604 <HAL_SD_GetCardInfo>
}
 800594c:	bf00      	nop
 800594e:	3708      	adds	r7, #8
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	20000978 	.word	0x20000978

08005958 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800595e:	2301      	movs	r3, #1
 8005960:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	b2db      	uxtb	r3, r3
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
	...

08005974 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800597e:	4b0b      	ldr	r3, [pc, #44]	; (80059ac <SD_CheckStatus+0x38>)
 8005980:	2201      	movs	r2, #1
 8005982:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005984:	f7ff ffca 	bl	800591c <BSP_SD_GetCardState>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d107      	bne.n	800599e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800598e:	4b07      	ldr	r3, [pc, #28]	; (80059ac <SD_CheckStatus+0x38>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	b2db      	uxtb	r3, r3
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	b2da      	uxtb	r2, r3
 800599a:	4b04      	ldr	r3, [pc, #16]	; (80059ac <SD_CheckStatus+0x38>)
 800599c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800599e:	4b03      	ldr	r3, [pc, #12]	; (80059ac <SD_CheckStatus+0x38>)
 80059a0:	781b      	ldrb	r3, [r3, #0]
 80059a2:	b2db      	uxtb	r3, r3
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	3708      	adds	r7, #8
 80059a8:	46bd      	mov	sp, r7
 80059aa:	bd80      	pop	{r7, pc}
 80059ac:	20000009 	.word	0x20000009

080059b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	4603      	mov	r3, r0
 80059b8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80059ba:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <SD_initialize+0x38>)
 80059bc:	2201      	movs	r2, #1
 80059be:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80059c0:	f7ff ff4a 	bl	8005858 <BSP_SD_Init>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d107      	bne.n	80059da <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80059ca:	79fb      	ldrb	r3, [r7, #7]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f7ff ffd1 	bl	8005974 <SD_CheckStatus>
 80059d2:	4603      	mov	r3, r0
 80059d4:	461a      	mov	r2, r3
 80059d6:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <SD_initialize+0x38>)
 80059d8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80059da:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <SD_initialize+0x38>)
 80059dc:	781b      	ldrb	r3, [r3, #0]
 80059de:	b2db      	uxtb	r3, r3
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	20000009 	.word	0x20000009

080059ec <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	4603      	mov	r3, r0
 80059f4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80059f6:	79fb      	ldrb	r3, [r7, #7]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff ffbb 	bl	8005974 <SD_CheckStatus>
 80059fe:	4603      	mov	r3, r0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3708      	adds	r7, #8
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60b9      	str	r1, [r7, #8]
 8005a10:	607a      	str	r2, [r7, #4]
 8005a12:	603b      	str	r3, [r7, #0]
 8005a14:	4603      	mov	r3, r0
 8005a16:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a20:	683a      	ldr	r2, [r7, #0]
 8005a22:	6879      	ldr	r1, [r7, #4]
 8005a24:	68b8      	ldr	r0, [r7, #8]
 8005a26:	f7ff ff3d 	bl	80058a4 <BSP_SD_ReadBlocks>
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d107      	bne.n	8005a40 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005a30:	bf00      	nop
 8005a32:	f7ff ff73 	bl	800591c <BSP_SD_GetCardState>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d1fa      	bne.n	8005a32 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3718      	adds	r7, #24
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}

08005a4a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005a4a:	b580      	push	{r7, lr}
 8005a4c:	b086      	sub	sp, #24
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
 8005a54:	603b      	str	r3, [r7, #0]
 8005a56:	4603      	mov	r3, r0
 8005a58:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	6879      	ldr	r1, [r7, #4]
 8005a66:	68b8      	ldr	r0, [r7, #8]
 8005a68:	f7ff ff3a 	bl	80058e0 <BSP_SD_WriteBlocks>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d107      	bne.n	8005a82 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005a72:	bf00      	nop
 8005a74:	f7ff ff52 	bl	800591c <BSP_SD_GetCardState>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1fa      	bne.n	8005a74 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005a82:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3718      	adds	r7, #24
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}

08005a8c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b08c      	sub	sp, #48	; 0x30
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	4603      	mov	r3, r0
 8005a94:	603a      	str	r2, [r7, #0]
 8005a96:	71fb      	strb	r3, [r7, #7]
 8005a98:	460b      	mov	r3, r1
 8005a9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005aa2:	4b25      	ldr	r3, [pc, #148]	; (8005b38 <SD_ioctl+0xac>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d001      	beq.n	8005ab4 <SD_ioctl+0x28>
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e03c      	b.n	8005b2e <SD_ioctl+0xa2>

  switch (cmd)
 8005ab4:	79bb      	ldrb	r3, [r7, #6]
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d834      	bhi.n	8005b24 <SD_ioctl+0x98>
 8005aba:	a201      	add	r2, pc, #4	; (adr r2, 8005ac0 <SD_ioctl+0x34>)
 8005abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac0:	08005ad1 	.word	0x08005ad1
 8005ac4:	08005ad9 	.word	0x08005ad9
 8005ac8:	08005af1 	.word	0x08005af1
 8005acc:	08005b0b 	.word	0x08005b0b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005ad6:	e028      	b.n	8005b2a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005ad8:	f107 030c 	add.w	r3, r7, #12
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff ff2d 	bl	800593c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005aee:	e01c      	b.n	8005b2a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005af0:	f107 030c 	add.w	r3, r7, #12
 8005af4:	4618      	mov	r0, r3
 8005af6:	f7ff ff21 	bl	800593c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005afc:	b29a      	uxth	r2, r3
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b08:	e00f      	b.n	8005b2a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b0a:	f107 030c 	add.w	r3, r7, #12
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff ff14 	bl	800593c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b16:	0a5a      	lsrs	r2, r3, #9
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b22:	e002      	b.n	8005b2a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005b24:	2304      	movs	r3, #4
 8005b26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005b2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3730      	adds	r7, #48	; 0x30
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}
 8005b36:	bf00      	nop
 8005b38:	20000009 	.word	0x20000009

08005b3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b084      	sub	sp, #16
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	4603      	mov	r3, r0
 8005b44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005b46:	79fb      	ldrb	r3, [r7, #7]
 8005b48:	4a08      	ldr	r2, [pc, #32]	; (8005b6c <disk_status+0x30>)
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	79fa      	ldrb	r2, [r7, #7]
 8005b54:	4905      	ldr	r1, [pc, #20]	; (8005b6c <disk_status+0x30>)
 8005b56:	440a      	add	r2, r1
 8005b58:	7a12      	ldrb	r2, [r2, #8]
 8005b5a:	4610      	mov	r0, r2
 8005b5c:	4798      	blx	r3
 8005b5e:	4603      	mov	r3, r0
 8005b60:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}
 8005b6c:	200002f4 	.word	0x200002f4

08005b70 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	4603      	mov	r3, r0
 8005b78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005b7e:	79fb      	ldrb	r3, [r7, #7]
 8005b80:	4a0d      	ldr	r2, [pc, #52]	; (8005bb8 <disk_initialize+0x48>)
 8005b82:	5cd3      	ldrb	r3, [r2, r3]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d111      	bne.n	8005bac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005b88:	79fb      	ldrb	r3, [r7, #7]
 8005b8a:	4a0b      	ldr	r2, [pc, #44]	; (8005bb8 <disk_initialize+0x48>)
 8005b8c:	2101      	movs	r1, #1
 8005b8e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005b90:	79fb      	ldrb	r3, [r7, #7]
 8005b92:	4a09      	ldr	r2, [pc, #36]	; (8005bb8 <disk_initialize+0x48>)
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	4413      	add	r3, r2
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	79fa      	ldrb	r2, [r7, #7]
 8005b9e:	4906      	ldr	r1, [pc, #24]	; (8005bb8 <disk_initialize+0x48>)
 8005ba0:	440a      	add	r2, r1
 8005ba2:	7a12      	ldrb	r2, [r2, #8]
 8005ba4:	4610      	mov	r0, r2
 8005ba6:	4798      	blx	r3
 8005ba8:	4603      	mov	r3, r0
 8005baa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3710      	adds	r7, #16
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	200002f4 	.word	0x200002f4

08005bbc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005bbc:	b590      	push	{r4, r7, lr}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60b9      	str	r1, [r7, #8]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	4603      	mov	r3, r0
 8005bca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005bcc:	7bfb      	ldrb	r3, [r7, #15]
 8005bce:	4a0a      	ldr	r2, [pc, #40]	; (8005bf8 <disk_read+0x3c>)
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4413      	add	r3, r2
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	689c      	ldr	r4, [r3, #8]
 8005bd8:	7bfb      	ldrb	r3, [r7, #15]
 8005bda:	4a07      	ldr	r2, [pc, #28]	; (8005bf8 <disk_read+0x3c>)
 8005bdc:	4413      	add	r3, r2
 8005bde:	7a18      	ldrb	r0, [r3, #8]
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	68b9      	ldr	r1, [r7, #8]
 8005be6:	47a0      	blx	r4
 8005be8:	4603      	mov	r3, r0
 8005bea:	75fb      	strb	r3, [r7, #23]
  return res;
 8005bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	bd90      	pop	{r4, r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	200002f4 	.word	0x200002f4

08005bfc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005bfc:	b590      	push	{r4, r7, lr}
 8005bfe:	b087      	sub	sp, #28
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	60b9      	str	r1, [r7, #8]
 8005c04:	607a      	str	r2, [r7, #4]
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	4603      	mov	r3, r0
 8005c0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	4a0a      	ldr	r2, [pc, #40]	; (8005c38 <disk_write+0x3c>)
 8005c10:	009b      	lsls	r3, r3, #2
 8005c12:	4413      	add	r3, r2
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	68dc      	ldr	r4, [r3, #12]
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	4a07      	ldr	r2, [pc, #28]	; (8005c38 <disk_write+0x3c>)
 8005c1c:	4413      	add	r3, r2
 8005c1e:	7a18      	ldrb	r0, [r3, #8]
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	68b9      	ldr	r1, [r7, #8]
 8005c26:	47a0      	blx	r4
 8005c28:	4603      	mov	r3, r0
 8005c2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd90      	pop	{r4, r7, pc}
 8005c36:	bf00      	nop
 8005c38:	200002f4 	.word	0x200002f4

08005c3c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	603a      	str	r2, [r7, #0]
 8005c46:	71fb      	strb	r3, [r7, #7]
 8005c48:	460b      	mov	r3, r1
 8005c4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005c4c:	79fb      	ldrb	r3, [r7, #7]
 8005c4e:	4a09      	ldr	r2, [pc, #36]	; (8005c74 <disk_ioctl+0x38>)
 8005c50:	009b      	lsls	r3, r3, #2
 8005c52:	4413      	add	r3, r2
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	691b      	ldr	r3, [r3, #16]
 8005c58:	79fa      	ldrb	r2, [r7, #7]
 8005c5a:	4906      	ldr	r1, [pc, #24]	; (8005c74 <disk_ioctl+0x38>)
 8005c5c:	440a      	add	r2, r1
 8005c5e:	7a10      	ldrb	r0, [r2, #8]
 8005c60:	79b9      	ldrb	r1, [r7, #6]
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	4798      	blx	r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	73fb      	strb	r3, [r7, #15]
  return res;
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	200002f4 	.word	0x200002f4

08005c78 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	3301      	adds	r3, #1
 8005c84:	781b      	ldrb	r3, [r3, #0]
 8005c86:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005c88:	89fb      	ldrh	r3, [r7, #14]
 8005c8a:	021b      	lsls	r3, r3, #8
 8005c8c:	b21a      	sxth	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	b21b      	sxth	r3, r3
 8005c94:	4313      	orrs	r3, r2
 8005c96:	b21b      	sxth	r3, r3
 8005c98:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005c9a:	89fb      	ldrh	r3, [r7, #14]
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3714      	adds	r7, #20
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca6:	4770      	bx	lr

08005ca8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3303      	adds	r3, #3
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	021b      	lsls	r3, r3, #8
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	3202      	adds	r2, #2
 8005cc0:	7812      	ldrb	r2, [r2, #0]
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	021b      	lsls	r3, r3, #8
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	3201      	adds	r2, #1
 8005cce:	7812      	ldrb	r2, [r2, #0]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	021b      	lsls	r3, r3, #8
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	7812      	ldrb	r2, [r2, #0]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]
	return rv;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr

08005cee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005cee:	b480      	push	{r7}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	460b      	mov	r3, r1
 8005cf8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	1c5a      	adds	r2, r3, #1
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	887a      	ldrh	r2, [r7, #2]
 8005d02:	b2d2      	uxtb	r2, r2
 8005d04:	701a      	strb	r2, [r3, #0]
 8005d06:	887b      	ldrh	r3, [r7, #2]
 8005d08:	0a1b      	lsrs	r3, r3, #8
 8005d0a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	1c5a      	adds	r2, r3, #1
 8005d10:	607a      	str	r2, [r7, #4]
 8005d12:	887a      	ldrh	r2, [r7, #2]
 8005d14:	b2d2      	uxtb	r2, r2
 8005d16:	701a      	strb	r2, [r3, #0]
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	1c5a      	adds	r2, r3, #1
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	683a      	ldr	r2, [r7, #0]
 8005d36:	b2d2      	uxtb	r2, r2
 8005d38:	701a      	strb	r2, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	0a1b      	lsrs	r3, r3, #8
 8005d3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	1c5a      	adds	r2, r3, #1
 8005d44:	607a      	str	r2, [r7, #4]
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	b2d2      	uxtb	r2, r2
 8005d4a:	701a      	strb	r2, [r3, #0]
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	0a1b      	lsrs	r3, r3, #8
 8005d50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	1c5a      	adds	r2, r3, #1
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	683a      	ldr	r2, [r7, #0]
 8005d5a:	b2d2      	uxtb	r2, r2
 8005d5c:	701a      	strb	r2, [r3, #0]
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	0a1b      	lsrs	r3, r3, #8
 8005d62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	1c5a      	adds	r2, r3, #1
 8005d68:	607a      	str	r2, [r7, #4]
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	b2d2      	uxtb	r2, r2
 8005d6e:	701a      	strb	r2, [r3, #0]
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005d7c:	b480      	push	{r7}
 8005d7e:	b087      	sub	sp, #28
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005d8c:	68bb      	ldr	r3, [r7, #8]
 8005d8e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d00d      	beq.n	8005db2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	1c53      	adds	r3, r2, #1
 8005d9a:	613b      	str	r3, [r7, #16]
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	1c59      	adds	r1, r3, #1
 8005da0:	6179      	str	r1, [r7, #20]
 8005da2:	7812      	ldrb	r2, [r2, #0]
 8005da4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	3b01      	subs	r3, #1
 8005daa:	607b      	str	r3, [r7, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1f1      	bne.n	8005d96 <mem_cpy+0x1a>
	}
}
 8005db2:	bf00      	nop
 8005db4:	371c      	adds	r7, #28
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr

08005dbe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005dbe:	b480      	push	{r7}
 8005dc0:	b087      	sub	sp, #28
 8005dc2:	af00      	add	r7, sp, #0
 8005dc4:	60f8      	str	r0, [r7, #12]
 8005dc6:	60b9      	str	r1, [r7, #8]
 8005dc8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	1c5a      	adds	r2, r3, #1
 8005dd2:	617a      	str	r2, [r7, #20]
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	607b      	str	r3, [r7, #4]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1f3      	bne.n	8005dce <mem_set+0x10>
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005df2:	b480      	push	{r7}
 8005df4:	b089      	sub	sp, #36	; 0x24
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	61fb      	str	r3, [r7, #28]
 8005e02:	68bb      	ldr	r3, [r7, #8]
 8005e04:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	1c5a      	adds	r2, r3, #1
 8005e0e:	61fa      	str	r2, [r7, #28]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	4619      	mov	r1, r3
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	1c5a      	adds	r2, r3, #1
 8005e18:	61ba      	str	r2, [r7, #24]
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	1acb      	subs	r3, r1, r3
 8005e1e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	3b01      	subs	r3, #1
 8005e24:	607b      	str	r3, [r7, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d002      	beq.n	8005e32 <mem_cmp+0x40>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d0eb      	beq.n	8005e0a <mem_cmp+0x18>

	return r;
 8005e32:	697b      	ldr	r3, [r7, #20]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3724      	adds	r7, #36	; 0x24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005e4a:	e002      	b.n	8005e52 <chk_chr+0x12>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3301      	adds	r3, #1
 8005e50:	607b      	str	r3, [r7, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d005      	beq.n	8005e66 <chk_chr+0x26>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	461a      	mov	r2, r3
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d1f2      	bne.n	8005e4c <chk_chr+0xc>
	return *str;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	781b      	ldrb	r3, [r3, #0]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr
	...

08005e78 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005e82:	2300      	movs	r3, #0
 8005e84:	60bb      	str	r3, [r7, #8]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	e029      	b.n	8005ee0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005e8c:	4a27      	ldr	r2, [pc, #156]	; (8005f2c <chk_lock+0xb4>)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	011b      	lsls	r3, r3, #4
 8005e92:	4413      	add	r3, r2
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01d      	beq.n	8005ed6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005e9a:	4a24      	ldr	r2, [pc, #144]	; (8005f2c <chk_lock+0xb4>)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	011b      	lsls	r3, r3, #4
 8005ea0:	4413      	add	r3, r2
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	429a      	cmp	r2, r3
 8005eaa:	d116      	bne.n	8005eda <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005eac:	4a1f      	ldr	r2, [pc, #124]	; (8005f2c <chk_lock+0xb4>)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	011b      	lsls	r3, r3, #4
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d10c      	bne.n	8005eda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005ec0:	4a1a      	ldr	r2, [pc, #104]	; (8005f2c <chk_lock+0xb4>)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	011b      	lsls	r3, r3, #4
 8005ec6:	4413      	add	r3, r2
 8005ec8:	3308      	adds	r3, #8
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d102      	bne.n	8005eda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005ed4:	e007      	b.n	8005ee6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3301      	adds	r3, #1
 8005ede:	60fb      	str	r3, [r7, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d9d2      	bls.n	8005e8c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d109      	bne.n	8005f00 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d102      	bne.n	8005ef8 <chk_lock+0x80>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d101      	bne.n	8005efc <chk_lock+0x84>
 8005ef8:	2300      	movs	r3, #0
 8005efa:	e010      	b.n	8005f1e <chk_lock+0xa6>
 8005efc:	2312      	movs	r3, #18
 8005efe:	e00e      	b.n	8005f1e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d108      	bne.n	8005f18 <chk_lock+0xa0>
 8005f06:	4a09      	ldr	r2, [pc, #36]	; (8005f2c <chk_lock+0xb4>)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	011b      	lsls	r3, r3, #4
 8005f0c:	4413      	add	r3, r2
 8005f0e:	330c      	adds	r3, #12
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f16:	d101      	bne.n	8005f1c <chk_lock+0xa4>
 8005f18:	2310      	movs	r3, #16
 8005f1a:	e000      	b.n	8005f1e <chk_lock+0xa6>
 8005f1c:	2300      	movs	r3, #0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3714      	adds	r7, #20
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr
 8005f2a:	bf00      	nop
 8005f2c:	200002d4 	.word	0x200002d4

08005f30 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005f36:	2300      	movs	r3, #0
 8005f38:	607b      	str	r3, [r7, #4]
 8005f3a:	e002      	b.n	8005f42 <enq_lock+0x12>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	607b      	str	r3, [r7, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d806      	bhi.n	8005f56 <enq_lock+0x26>
 8005f48:	4a09      	ldr	r2, [pc, #36]	; (8005f70 <enq_lock+0x40>)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	4413      	add	r3, r2
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1f2      	bne.n	8005f3c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	bf14      	ite	ne
 8005f5c:	2301      	movne	r3, #1
 8005f5e:	2300      	moveq	r3, #0
 8005f60:	b2db      	uxtb	r3, r3
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	370c      	adds	r7, #12
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	200002d4 	.word	0x200002d4

08005f74 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f74:	b480      	push	{r7}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e01f      	b.n	8005fc4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005f84:	4a41      	ldr	r2, [pc, #260]	; (800608c <inc_lock+0x118>)
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	011b      	lsls	r3, r3, #4
 8005f8a:	4413      	add	r3, r2
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d113      	bne.n	8005fbe <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005f96:	4a3d      	ldr	r2, [pc, #244]	; (800608c <inc_lock+0x118>)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	681a      	ldr	r2, [r3, #0]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d109      	bne.n	8005fbe <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005faa:	4a38      	ldr	r2, [pc, #224]	; (800608c <inc_lock+0x118>)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	011b      	lsls	r3, r3, #4
 8005fb0:	4413      	add	r3, r2
 8005fb2:	3308      	adds	r3, #8
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d006      	beq.n	8005fcc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	3301      	adds	r3, #1
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d9dc      	bls.n	8005f84 <inc_lock+0x10>
 8005fca:	e000      	b.n	8005fce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005fcc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b02      	cmp	r3, #2
 8005fd2:	d132      	bne.n	800603a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	e002      	b.n	8005fe0 <inc_lock+0x6c>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	60fb      	str	r3, [r7, #12]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d806      	bhi.n	8005ff4 <inc_lock+0x80>
 8005fe6:	4a29      	ldr	r2, [pc, #164]	; (800608c <inc_lock+0x118>)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	011b      	lsls	r3, r3, #4
 8005fec:	4413      	add	r3, r2
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d1f2      	bne.n	8005fda <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d101      	bne.n	8005ffe <inc_lock+0x8a>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	e040      	b.n	8006080 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	4922      	ldr	r1, [pc, #136]	; (800608c <inc_lock+0x118>)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	440b      	add	r3, r1
 800600a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	491e      	ldr	r1, [pc, #120]	; (800608c <inc_lock+0x118>)
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	011b      	lsls	r3, r3, #4
 8006016:	440b      	add	r3, r1
 8006018:	3304      	adds	r3, #4
 800601a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	491a      	ldr	r1, [pc, #104]	; (800608c <inc_lock+0x118>)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	440b      	add	r3, r1
 8006028:	3308      	adds	r3, #8
 800602a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800602c:	4a17      	ldr	r2, [pc, #92]	; (800608c <inc_lock+0x118>)
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	4413      	add	r3, r2
 8006034:	330c      	adds	r3, #12
 8006036:	2200      	movs	r2, #0
 8006038:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d009      	beq.n	8006054 <inc_lock+0xe0>
 8006040:	4a12      	ldr	r2, [pc, #72]	; (800608c <inc_lock+0x118>)
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	011b      	lsls	r3, r3, #4
 8006046:	4413      	add	r3, r2
 8006048:	330c      	adds	r3, #12
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <inc_lock+0xe0>
 8006050:	2300      	movs	r3, #0
 8006052:	e015      	b.n	8006080 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d108      	bne.n	800606c <inc_lock+0xf8>
 800605a:	4a0c      	ldr	r2, [pc, #48]	; (800608c <inc_lock+0x118>)
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	4413      	add	r3, r2
 8006062:	330c      	adds	r3, #12
 8006064:	881b      	ldrh	r3, [r3, #0]
 8006066:	3301      	adds	r3, #1
 8006068:	b29a      	uxth	r2, r3
 800606a:	e001      	b.n	8006070 <inc_lock+0xfc>
 800606c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006070:	4906      	ldr	r1, [pc, #24]	; (800608c <inc_lock+0x118>)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	011b      	lsls	r3, r3, #4
 8006076:	440b      	add	r3, r1
 8006078:	330c      	adds	r3, #12
 800607a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	3301      	adds	r3, #1
}
 8006080:	4618      	mov	r0, r3
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr
 800608c:	200002d4 	.word	0x200002d4

08006090 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	3b01      	subs	r3, #1
 800609c:	607b      	str	r3, [r7, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d825      	bhi.n	80060f0 <dec_lock+0x60>
		n = Files[i].ctr;
 80060a4:	4a17      	ldr	r2, [pc, #92]	; (8006104 <dec_lock+0x74>)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	011b      	lsls	r3, r3, #4
 80060aa:	4413      	add	r3, r2
 80060ac:	330c      	adds	r3, #12
 80060ae:	881b      	ldrh	r3, [r3, #0]
 80060b0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80060b2:	89fb      	ldrh	r3, [r7, #14]
 80060b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060b8:	d101      	bne.n	80060be <dec_lock+0x2e>
 80060ba:	2300      	movs	r3, #0
 80060bc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80060be:	89fb      	ldrh	r3, [r7, #14]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <dec_lock+0x3a>
 80060c4:	89fb      	ldrh	r3, [r7, #14]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80060ca:	4a0e      	ldr	r2, [pc, #56]	; (8006104 <dec_lock+0x74>)
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	011b      	lsls	r3, r3, #4
 80060d0:	4413      	add	r3, r2
 80060d2:	330c      	adds	r3, #12
 80060d4:	89fa      	ldrh	r2, [r7, #14]
 80060d6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80060d8:	89fb      	ldrh	r3, [r7, #14]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d105      	bne.n	80060ea <dec_lock+0x5a>
 80060de:	4a09      	ldr	r2, [pc, #36]	; (8006104 <dec_lock+0x74>)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	011b      	lsls	r3, r3, #4
 80060e4:	4413      	add	r3, r2
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	737b      	strb	r3, [r7, #13]
 80060ee:	e001      	b.n	80060f4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80060f0:	2302      	movs	r3, #2
 80060f2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80060f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3714      	adds	r7, #20
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
 8006102:	bf00      	nop
 8006104:	200002d4 	.word	0x200002d4

08006108 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006108:	b480      	push	{r7}
 800610a:	b085      	sub	sp, #20
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006110:	2300      	movs	r3, #0
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	e010      	b.n	8006138 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006116:	4a0d      	ldr	r2, [pc, #52]	; (800614c <clear_lock+0x44>)
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	4413      	add	r3, r2
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	429a      	cmp	r2, r3
 8006124:	d105      	bne.n	8006132 <clear_lock+0x2a>
 8006126:	4a09      	ldr	r2, [pc, #36]	; (800614c <clear_lock+0x44>)
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	4413      	add	r3, r2
 800612e:	2200      	movs	r2, #0
 8006130:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	3301      	adds	r3, #1
 8006136:	60fb      	str	r3, [r7, #12]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d9eb      	bls.n	8006116 <clear_lock+0xe>
	}
}
 800613e:	bf00      	nop
 8006140:	3714      	adds	r7, #20
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	200002d4 	.word	0x200002d4

08006150 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	b086      	sub	sp, #24
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006158:	2300      	movs	r3, #0
 800615a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	78db      	ldrb	r3, [r3, #3]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d034      	beq.n	80061ce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006168:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	7858      	ldrb	r0, [r3, #1]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006174:	2301      	movs	r3, #1
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	f7ff fd40 	bl	8005bfc <disk_write>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d002      	beq.n	8006188 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006182:	2301      	movs	r3, #1
 8006184:	73fb      	strb	r3, [r7, #15]
 8006186:	e022      	b.n	80061ce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2200      	movs	r2, #0
 800618c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	1ad2      	subs	r2, r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	69db      	ldr	r3, [r3, #28]
 800619a:	429a      	cmp	r2, r3
 800619c:	d217      	bcs.n	80061ce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	789b      	ldrb	r3, [r3, #2]
 80061a2:	613b      	str	r3, [r7, #16]
 80061a4:	e010      	b.n	80061c8 <sync_window+0x78>
					wsect += fs->fsize;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	69db      	ldr	r3, [r3, #28]
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4413      	add	r3, r2
 80061ae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	7858      	ldrb	r0, [r3, #1]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80061ba:	2301      	movs	r3, #1
 80061bc:	697a      	ldr	r2, [r7, #20]
 80061be:	f7ff fd1d 	bl	8005bfc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	3b01      	subs	r3, #1
 80061c6:	613b      	str	r3, [r7, #16]
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d8eb      	bhi.n	80061a6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80061ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3718      	adds	r7, #24
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80061e2:	2300      	movs	r3, #0
 80061e4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ea:	683a      	ldr	r2, [r7, #0]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d01b      	beq.n	8006228 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f7ff ffad 	bl	8006150 <sync_window>
 80061f6:	4603      	mov	r3, r0
 80061f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d113      	bne.n	8006228 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	7858      	ldrb	r0, [r3, #1]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800620a:	2301      	movs	r3, #1
 800620c:	683a      	ldr	r2, [r7, #0]
 800620e:	f7ff fcd5 	bl	8005bbc <disk_read>
 8006212:	4603      	mov	r3, r0
 8006214:	2b00      	cmp	r3, #0
 8006216:	d004      	beq.n	8006222 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006218:	f04f 33ff 	mov.w	r3, #4294967295
 800621c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800621e:	2301      	movs	r3, #1
 8006220:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	683a      	ldr	r2, [r7, #0]
 8006226:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8006228:	7bfb      	ldrb	r3, [r7, #15]
}
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}
	...

08006234 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800623c:	6878      	ldr	r0, [r7, #4]
 800623e:	f7ff ff87 	bl	8006150 <sync_window>
 8006242:	4603      	mov	r3, r0
 8006244:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006246:	7bfb      	ldrb	r3, [r7, #15]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d158      	bne.n	80062fe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	2b03      	cmp	r3, #3
 8006252:	d148      	bne.n	80062e6 <sync_fs+0xb2>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	791b      	ldrb	r3, [r3, #4]
 8006258:	2b01      	cmp	r3, #1
 800625a:	d144      	bne.n	80062e6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3334      	adds	r3, #52	; 0x34
 8006260:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006264:	2100      	movs	r1, #0
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff fda9 	bl	8005dbe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	3334      	adds	r3, #52	; 0x34
 8006270:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006274:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006278:	4618      	mov	r0, r3
 800627a:	f7ff fd38 	bl	8005cee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3334      	adds	r3, #52	; 0x34
 8006282:	4921      	ldr	r1, [pc, #132]	; (8006308 <sync_fs+0xd4>)
 8006284:	4618      	mov	r0, r3
 8006286:	f7ff fd4d 	bl	8005d24 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	3334      	adds	r3, #52	; 0x34
 800628e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8006292:	491e      	ldr	r1, [pc, #120]	; (800630c <sync_fs+0xd8>)
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fd45 	bl	8005d24 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	3334      	adds	r3, #52	; 0x34
 800629e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	695b      	ldr	r3, [r3, #20]
 80062a6:	4619      	mov	r1, r3
 80062a8:	4610      	mov	r0, r2
 80062aa:	f7ff fd3b 	bl	8005d24 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	3334      	adds	r3, #52	; 0x34
 80062b2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	4619      	mov	r1, r3
 80062bc:	4610      	mov	r0, r2
 80062be:	f7ff fd31 	bl	8005d24 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a1b      	ldr	r3, [r3, #32]
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	7858      	ldrb	r0, [r3, #1]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062da:	2301      	movs	r3, #1
 80062dc:	f7ff fc8e 	bl	8005bfc <disk_write>
			fs->fsi_flag = 0;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	785b      	ldrb	r3, [r3, #1]
 80062ea:	2200      	movs	r2, #0
 80062ec:	2100      	movs	r1, #0
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7ff fca4 	bl	8005c3c <disk_ioctl>
 80062f4:	4603      	mov	r3, r0
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d001      	beq.n	80062fe <sync_fs+0xca>
 80062fa:	2301      	movs	r3, #1
 80062fc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}
 8006308:	41615252 	.word	0x41615252
 800630c:	61417272 	.word	0x61417272

08006310 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
 8006318:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	3b02      	subs	r3, #2
 800631e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	699b      	ldr	r3, [r3, #24]
 8006324:	3b02      	subs	r3, #2
 8006326:	683a      	ldr	r2, [r7, #0]
 8006328:	429a      	cmp	r2, r3
 800632a:	d301      	bcc.n	8006330 <clust2sect+0x20>
 800632c:	2300      	movs	r3, #0
 800632e:	e008      	b.n	8006342 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	895b      	ldrh	r3, [r3, #10]
 8006334:	461a      	mov	r2, r3
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	fb03 f202 	mul.w	r2, r3, r2
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006340:	4413      	add	r3, r2
}
 8006342:	4618      	mov	r0, r3
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b086      	sub	sp, #24
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
 8006356:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b01      	cmp	r3, #1
 8006362:	d904      	bls.n	800636e <get_fat+0x20>
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	429a      	cmp	r2, r3
 800636c:	d302      	bcc.n	8006374 <get_fat+0x26>
		val = 1;	/* Internal error */
 800636e:	2301      	movs	r3, #1
 8006370:	617b      	str	r3, [r7, #20]
 8006372:	e08c      	b.n	800648e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006374:	f04f 33ff 	mov.w	r3, #4294967295
 8006378:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b02      	cmp	r3, #2
 8006380:	d045      	beq.n	800640e <get_fat+0xc0>
 8006382:	2b03      	cmp	r3, #3
 8006384:	d05d      	beq.n	8006442 <get_fat+0xf4>
 8006386:	2b01      	cmp	r3, #1
 8006388:	d177      	bne.n	800647a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	4413      	add	r3, r2
 8006396:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	0a5b      	lsrs	r3, r3, #9
 80063a0:	4413      	add	r3, r2
 80063a2:	4619      	mov	r1, r3
 80063a4:	6938      	ldr	r0, [r7, #16]
 80063a6:	f7ff ff17 	bl	80061d8 <move_window>
 80063aa:	4603      	mov	r3, r0
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d167      	bne.n	8006480 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	60fa      	str	r2, [r7, #12]
 80063b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063ba:	693a      	ldr	r2, [r7, #16]
 80063bc:	4413      	add	r3, r2
 80063be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063c2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	0a5b      	lsrs	r3, r3, #9
 80063cc:	4413      	add	r3, r2
 80063ce:	4619      	mov	r1, r3
 80063d0:	6938      	ldr	r0, [r7, #16]
 80063d2:	f7ff ff01 	bl	80061d8 <move_window>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d153      	bne.n	8006484 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	4413      	add	r3, r2
 80063e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80063ea:	021b      	lsls	r3, r3, #8
 80063ec:	461a      	mov	r2, r3
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	4313      	orrs	r3, r2
 80063f2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	f003 0301 	and.w	r3, r3, #1
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d002      	beq.n	8006404 <get_fat+0xb6>
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	091b      	lsrs	r3, r3, #4
 8006402:	e002      	b.n	800640a <get_fat+0xbc>
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800640a:	617b      	str	r3, [r7, #20]
			break;
 800640c:	e03f      	b.n	800648e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	0a1b      	lsrs	r3, r3, #8
 8006416:	4413      	add	r3, r2
 8006418:	4619      	mov	r1, r3
 800641a:	6938      	ldr	r0, [r7, #16]
 800641c:	f7ff fedc 	bl	80061d8 <move_window>
 8006420:	4603      	mov	r3, r0
 8006422:	2b00      	cmp	r3, #0
 8006424:	d130      	bne.n	8006488 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006426:	693b      	ldr	r3, [r7, #16]
 8006428:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	005b      	lsls	r3, r3, #1
 8006430:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006434:	4413      	add	r3, r2
 8006436:	4618      	mov	r0, r3
 8006438:	f7ff fc1e 	bl	8005c78 <ld_word>
 800643c:	4603      	mov	r3, r0
 800643e:	617b      	str	r3, [r7, #20]
			break;
 8006440:	e025      	b.n	800648e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	09db      	lsrs	r3, r3, #7
 800644a:	4413      	add	r3, r2
 800644c:	4619      	mov	r1, r3
 800644e:	6938      	ldr	r0, [r7, #16]
 8006450:	f7ff fec2 	bl	80061d8 <move_window>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	d118      	bne.n	800648c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	009b      	lsls	r3, r3, #2
 8006464:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8006468:	4413      	add	r3, r2
 800646a:	4618      	mov	r0, r3
 800646c:	f7ff fc1c 	bl	8005ca8 <ld_dword>
 8006470:	4603      	mov	r3, r0
 8006472:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006476:	617b      	str	r3, [r7, #20]
			break;
 8006478:	e009      	b.n	800648e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800647a:	2301      	movs	r3, #1
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	e006      	b.n	800648e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006480:	bf00      	nop
 8006482:	e004      	b.n	800648e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006484:	bf00      	nop
 8006486:	e002      	b.n	800648e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006488:	bf00      	nop
 800648a:	e000      	b.n	800648e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800648c:	bf00      	nop
		}
	}

	return val;
 800648e:	697b      	ldr	r3, [r7, #20]
}
 8006490:	4618      	mov	r0, r3
 8006492:	3718      	adds	r7, #24
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006498:	b590      	push	{r4, r7, lr}
 800649a:	b089      	sub	sp, #36	; 0x24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80064a4:	2302      	movs	r3, #2
 80064a6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	f240 80d6 	bls.w	800665c <put_fat+0x1c4>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	f080 80d0 	bcs.w	800665c <put_fat+0x1c4>
		switch (fs->fs_type) {
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d073      	beq.n	80065ac <put_fat+0x114>
 80064c4:	2b03      	cmp	r3, #3
 80064c6:	f000 8091 	beq.w	80065ec <put_fat+0x154>
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	f040 80c6 	bne.w	800665c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	085b      	lsrs	r3, r3, #1
 80064d8:	69ba      	ldr	r2, [r7, #24]
 80064da:	4413      	add	r3, r2
 80064dc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	0a5b      	lsrs	r3, r3, #9
 80064e6:	4413      	add	r3, r2
 80064e8:	4619      	mov	r1, r3
 80064ea:	68f8      	ldr	r0, [r7, #12]
 80064ec:	f7ff fe74 	bl	80061d8 <move_window>
 80064f0:	4603      	mov	r3, r0
 80064f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80064f4:	7ffb      	ldrb	r3, [r7, #31]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	f040 80a9 	bne.w	800664e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	1c59      	adds	r1, r3, #1
 8006506:	61b9      	str	r1, [r7, #24]
 8006508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800650c:	4413      	add	r3, r2
 800650e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00d      	beq.n	8006536 <put_fat+0x9e>
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	b25b      	sxtb	r3, r3
 8006520:	f003 030f 	and.w	r3, r3, #15
 8006524:	b25a      	sxtb	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	011b      	lsls	r3, r3, #4
 800652c:	b25b      	sxtb	r3, r3
 800652e:	4313      	orrs	r3, r2
 8006530:	b25b      	sxtb	r3, r3
 8006532:	b2db      	uxtb	r3, r3
 8006534:	e001      	b.n	800653a <put_fat+0xa2>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	b2db      	uxtb	r3, r3
 800653a:	697a      	ldr	r2, [r7, #20]
 800653c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2201      	movs	r2, #1
 8006542:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	0a5b      	lsrs	r3, r3, #9
 800654c:	4413      	add	r3, r2
 800654e:	4619      	mov	r1, r3
 8006550:	68f8      	ldr	r0, [r7, #12]
 8006552:	f7ff fe41 	bl	80061d8 <move_window>
 8006556:	4603      	mov	r3, r0
 8006558:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800655a:	7ffb      	ldrb	r3, [r7, #31]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d178      	bne.n	8006652 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800656c:	4413      	add	r3, r2
 800656e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d003      	beq.n	8006582 <put_fat+0xea>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	091b      	lsrs	r3, r3, #4
 800657e:	b2db      	uxtb	r3, r3
 8006580:	e00e      	b.n	80065a0 <put_fat+0x108>
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	b25b      	sxtb	r3, r3
 8006588:	f023 030f 	bic.w	r3, r3, #15
 800658c:	b25a      	sxtb	r2, r3
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	0a1b      	lsrs	r3, r3, #8
 8006592:	b25b      	sxtb	r3, r3
 8006594:	f003 030f 	and.w	r3, r3, #15
 8006598:	b25b      	sxtb	r3, r3
 800659a:	4313      	orrs	r3, r2
 800659c:	b25b      	sxtb	r3, r3
 800659e:	b2db      	uxtb	r3, r3
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2201      	movs	r2, #1
 80065a8:	70da      	strb	r2, [r3, #3]
			break;
 80065aa:	e057      	b.n	800665c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	0a1b      	lsrs	r3, r3, #8
 80065b4:	4413      	add	r3, r2
 80065b6:	4619      	mov	r1, r3
 80065b8:	68f8      	ldr	r0, [r7, #12]
 80065ba:	f7ff fe0d 	bl	80061d8 <move_window>
 80065be:	4603      	mov	r3, r0
 80065c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80065c2:	7ffb      	ldrb	r3, [r7, #31]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d146      	bne.n	8006656 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80065d6:	4413      	add	r3, r2
 80065d8:	687a      	ldr	r2, [r7, #4]
 80065da:	b292      	uxth	r2, r2
 80065dc:	4611      	mov	r1, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f7ff fb85 	bl	8005cee <st_word>
			fs->wflag = 1;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	2201      	movs	r2, #1
 80065e8:	70da      	strb	r2, [r3, #3]
			break;
 80065ea:	e037      	b.n	800665c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	09db      	lsrs	r3, r3, #7
 80065f4:	4413      	add	r3, r2
 80065f6:	4619      	mov	r1, r3
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f7ff fded 	bl	80061d8 <move_window>
 80065fe:	4603      	mov	r3, r0
 8006600:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006602:	7ffb      	ldrb	r3, [r7, #31]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d128      	bne.n	800665a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800661c:	4413      	add	r3, r2
 800661e:	4618      	mov	r0, r3
 8006620:	f7ff fb42 	bl	8005ca8 <ld_dword>
 8006624:	4603      	mov	r3, r0
 8006626:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800662a:	4323      	orrs	r3, r4
 800662c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800663c:	4413      	add	r3, r2
 800663e:	6879      	ldr	r1, [r7, #4]
 8006640:	4618      	mov	r0, r3
 8006642:	f7ff fb6f 	bl	8005d24 <st_dword>
			fs->wflag = 1;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2201      	movs	r2, #1
 800664a:	70da      	strb	r2, [r3, #3]
			break;
 800664c:	e006      	b.n	800665c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800664e:	bf00      	nop
 8006650:	e004      	b.n	800665c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006652:	bf00      	nop
 8006654:	e002      	b.n	800665c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8006656:	bf00      	nop
 8006658:	e000      	b.n	800665c <put_fat+0x1c4>
			if (res != FR_OK) break;
 800665a:	bf00      	nop
		}
	}
	return res;
 800665c:	7ffb      	ldrb	r3, [r7, #31]
}
 800665e:	4618      	mov	r0, r3
 8006660:	3724      	adds	r7, #36	; 0x24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd90      	pop	{r4, r7, pc}

08006666 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006666:	b580      	push	{r7, lr}
 8006668:	b088      	sub	sp, #32
 800666a:	af00      	add	r7, sp, #0
 800666c:	60f8      	str	r0, [r7, #12]
 800666e:	60b9      	str	r1, [r7, #8]
 8006670:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006672:	2300      	movs	r3, #0
 8006674:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d904      	bls.n	800668c <remove_chain+0x26>
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	429a      	cmp	r2, r3
 800668a:	d301      	bcc.n	8006690 <remove_chain+0x2a>
 800668c:	2302      	movs	r3, #2
 800668e:	e04b      	b.n	8006728 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00c      	beq.n	80066b0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006696:	f04f 32ff 	mov.w	r2, #4294967295
 800669a:	6879      	ldr	r1, [r7, #4]
 800669c:	69b8      	ldr	r0, [r7, #24]
 800669e:	f7ff fefb 	bl	8006498 <put_fat>
 80066a2:	4603      	mov	r3, r0
 80066a4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80066a6:	7ffb      	ldrb	r3, [r7, #31]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d001      	beq.n	80066b0 <remove_chain+0x4a>
 80066ac:	7ffb      	ldrb	r3, [r7, #31]
 80066ae:	e03b      	b.n	8006728 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80066b0:	68b9      	ldr	r1, [r7, #8]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f7ff fe4b 	bl	800634e <get_fat>
 80066b8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d031      	beq.n	8006724 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80066c0:	697b      	ldr	r3, [r7, #20]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d101      	bne.n	80066ca <remove_chain+0x64>
 80066c6:	2302      	movs	r3, #2
 80066c8:	e02e      	b.n	8006728 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066d0:	d101      	bne.n	80066d6 <remove_chain+0x70>
 80066d2:	2301      	movs	r3, #1
 80066d4:	e028      	b.n	8006728 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80066d6:	2200      	movs	r2, #0
 80066d8:	68b9      	ldr	r1, [r7, #8]
 80066da:	69b8      	ldr	r0, [r7, #24]
 80066dc:	f7ff fedc 	bl	8006498 <put_fat>
 80066e0:	4603      	mov	r3, r0
 80066e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80066e4:	7ffb      	ldrb	r3, [r7, #31]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d001      	beq.n	80066ee <remove_chain+0x88>
 80066ea:	7ffb      	ldrb	r3, [r7, #31]
 80066ec:	e01c      	b.n	8006728 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	695a      	ldr	r2, [r3, #20]
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	3b02      	subs	r3, #2
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d20b      	bcs.n	8006714 <remove_chain+0xae>
			fs->free_clst++;
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	695b      	ldr	r3, [r3, #20]
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	791b      	ldrb	r3, [r3, #4]
 800670a:	f043 0301 	orr.w	r3, r3, #1
 800670e:	b2da      	uxtb	r2, r3
 8006710:	69bb      	ldr	r3, [r7, #24]
 8006712:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	699b      	ldr	r3, [r3, #24]
 800671c:	68ba      	ldr	r2, [r7, #8]
 800671e:	429a      	cmp	r2, r3
 8006720:	d3c6      	bcc.n	80066b0 <remove_chain+0x4a>
 8006722:	e000      	b.n	8006726 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006724:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006726:	2300      	movs	r3, #0
}
 8006728:	4618      	mov	r0, r3
 800672a:	3720      	adds	r7, #32
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}

08006730 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10d      	bne.n	8006762 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	691b      	ldr	r3, [r3, #16]
 800674a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d004      	beq.n	800675c <create_chain+0x2c>
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	69ba      	ldr	r2, [r7, #24]
 8006758:	429a      	cmp	r2, r3
 800675a:	d31b      	bcc.n	8006794 <create_chain+0x64>
 800675c:	2301      	movs	r3, #1
 800675e:	61bb      	str	r3, [r7, #24]
 8006760:	e018      	b.n	8006794 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006762:	6839      	ldr	r1, [r7, #0]
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f7ff fdf2 	bl	800634e <get_fat>
 800676a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d801      	bhi.n	8006776 <create_chain+0x46>
 8006772:	2301      	movs	r3, #1
 8006774:	e070      	b.n	8006858 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677c:	d101      	bne.n	8006782 <create_chain+0x52>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	e06a      	b.n	8006858 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	699b      	ldr	r3, [r3, #24]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	429a      	cmp	r2, r3
 800678a:	d201      	bcs.n	8006790 <create_chain+0x60>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	e063      	b.n	8006858 <create_chain+0x128>
		scl = clst;
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006794:	69bb      	ldr	r3, [r7, #24]
 8006796:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006798:	69fb      	ldr	r3, [r7, #28]
 800679a:	3301      	adds	r3, #1
 800679c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	69fa      	ldr	r2, [r7, #28]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d307      	bcc.n	80067b8 <create_chain+0x88>
				ncl = 2;
 80067a8:	2302      	movs	r3, #2
 80067aa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d901      	bls.n	80067b8 <create_chain+0x88>
 80067b4:	2300      	movs	r3, #0
 80067b6:	e04f      	b.n	8006858 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80067b8:	69f9      	ldr	r1, [r7, #28]
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f7ff fdc7 	bl	800634e <get_fat>
 80067c0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00e      	beq.n	80067e6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d003      	beq.n	80067d6 <create_chain+0xa6>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d4:	d101      	bne.n	80067da <create_chain+0xaa>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	e03e      	b.n	8006858 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	429a      	cmp	r2, r3
 80067e0:	d1da      	bne.n	8006798 <create_chain+0x68>
 80067e2:	2300      	movs	r3, #0
 80067e4:	e038      	b.n	8006858 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80067e6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80067e8:	f04f 32ff 	mov.w	r2, #4294967295
 80067ec:	69f9      	ldr	r1, [r7, #28]
 80067ee:	6938      	ldr	r0, [r7, #16]
 80067f0:	f7ff fe52 	bl	8006498 <put_fat>
 80067f4:	4603      	mov	r3, r0
 80067f6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80067f8:	7dfb      	ldrb	r3, [r7, #23]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d109      	bne.n	8006812 <create_chain+0xe2>
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d006      	beq.n	8006812 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006804:	69fa      	ldr	r2, [r7, #28]
 8006806:	6839      	ldr	r1, [r7, #0]
 8006808:	6938      	ldr	r0, [r7, #16]
 800680a:	f7ff fe45 	bl	8006498 <put_fat>
 800680e:	4603      	mov	r3, r0
 8006810:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d116      	bne.n	8006846 <create_chain+0x116>
		fs->last_clst = ncl;
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	69fa      	ldr	r2, [r7, #28]
 800681c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	695a      	ldr	r2, [r3, #20]
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	3b02      	subs	r3, #2
 8006828:	429a      	cmp	r2, r3
 800682a:	d804      	bhi.n	8006836 <create_chain+0x106>
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	1e5a      	subs	r2, r3, #1
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	791b      	ldrb	r3, [r3, #4]
 800683a:	f043 0301 	orr.w	r3, r3, #1
 800683e:	b2da      	uxtb	r2, r3
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	711a      	strb	r2, [r3, #4]
 8006844:	e007      	b.n	8006856 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d102      	bne.n	8006852 <create_chain+0x122>
 800684c:	f04f 33ff 	mov.w	r3, #4294967295
 8006850:	e000      	b.n	8006854 <create_chain+0x124>
 8006852:	2301      	movs	r3, #1
 8006854:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006856:	69fb      	ldr	r3, [r7, #28]
}
 8006858:	4618      	mov	r0, r3
 800685a:	3720      	adds	r7, #32
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}

08006860 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006874:	3304      	adds	r3, #4
 8006876:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	0a5b      	lsrs	r3, r3, #9
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	8952      	ldrh	r2, [r2, #10]
 8006880:	fbb3 f3f2 	udiv	r3, r3, r2
 8006884:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1d1a      	adds	r2, r3, #4
 800688a:	613a      	str	r2, [r7, #16]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006890:	68bb      	ldr	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <clmt_clust+0x3a>
 8006896:	2300      	movs	r3, #0
 8006898:	e010      	b.n	80068bc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800689a:	697a      	ldr	r2, [r7, #20]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	429a      	cmp	r2, r3
 80068a0:	d307      	bcc.n	80068b2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	617b      	str	r3, [r7, #20]
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	3304      	adds	r3, #4
 80068ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80068b0:	e7e9      	b.n	8006886 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80068b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80068b4:	693b      	ldr	r3, [r7, #16]
 80068b6:	681a      	ldr	r2, [r3, #0]
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	4413      	add	r3, r2
}
 80068bc:	4618      	mov	r0, r3
 80068be:	371c      	adds	r7, #28
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80068c8:	b580      	push	{r7, lr}
 80068ca:	b086      	sub	sp, #24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068de:	d204      	bcs.n	80068ea <dir_sdi+0x22>
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	f003 031f 	and.w	r3, r3, #31
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <dir_sdi+0x26>
		return FR_INT_ERR;
 80068ea:	2302      	movs	r3, #2
 80068ec:	e063      	b.n	80069b6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	683a      	ldr	r2, [r7, #0]
 80068f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80068fa:	697b      	ldr	r3, [r7, #20]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d106      	bne.n	800690e <dir_sdi+0x46>
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	781b      	ldrb	r3, [r3, #0]
 8006904:	2b02      	cmp	r3, #2
 8006906:	d902      	bls.n	800690e <dir_sdi+0x46>
		clst = fs->dirbase;
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800690c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d10c      	bne.n	800692e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	095b      	lsrs	r3, r3, #5
 8006918:	693a      	ldr	r2, [r7, #16]
 800691a:	8912      	ldrh	r2, [r2, #8]
 800691c:	4293      	cmp	r3, r2
 800691e:	d301      	bcc.n	8006924 <dir_sdi+0x5c>
 8006920:	2302      	movs	r3, #2
 8006922:	e048      	b.n	80069b6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	61da      	str	r2, [r3, #28]
 800692c:	e029      	b.n	8006982 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	895b      	ldrh	r3, [r3, #10]
 8006932:	025b      	lsls	r3, r3, #9
 8006934:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006936:	e019      	b.n	800696c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6979      	ldr	r1, [r7, #20]
 800693c:	4618      	mov	r0, r3
 800693e:	f7ff fd06 	bl	800634e <get_fat>
 8006942:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800694a:	d101      	bne.n	8006950 <dir_sdi+0x88>
 800694c:	2301      	movs	r3, #1
 800694e:	e032      	b.n	80069b6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	2b01      	cmp	r3, #1
 8006954:	d904      	bls.n	8006960 <dir_sdi+0x98>
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	699b      	ldr	r3, [r3, #24]
 800695a:	697a      	ldr	r2, [r7, #20]
 800695c:	429a      	cmp	r2, r3
 800695e:	d301      	bcc.n	8006964 <dir_sdi+0x9c>
 8006960:	2302      	movs	r3, #2
 8006962:	e028      	b.n	80069b6 <dir_sdi+0xee>
			ofs -= csz;
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	1ad3      	subs	r3, r2, r3
 800696a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	429a      	cmp	r2, r3
 8006972:	d2e1      	bcs.n	8006938 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006974:	6979      	ldr	r1, [r7, #20]
 8006976:	6938      	ldr	r0, [r7, #16]
 8006978:	f7ff fcca 	bl	8006310 <clust2sect>
 800697c:	4602      	mov	r2, r0
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	69db      	ldr	r3, [r3, #28]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <dir_sdi+0xcc>
 8006990:	2302      	movs	r3, #2
 8006992:	e010      	b.n	80069b6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	69da      	ldr	r2, [r3, #28]
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	0a5b      	lsrs	r3, r3, #9
 800699c:	441a      	add	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069ae:	441a      	add	r2, r3
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3718      	adds	r7, #24
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}

080069be <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b086      	sub	sp, #24
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	3320      	adds	r3, #32
 80069d4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d003      	beq.n	80069e6 <dir_next+0x28>
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80069e4:	d301      	bcc.n	80069ea <dir_next+0x2c>
 80069e6:	2304      	movs	r3, #4
 80069e8:	e0aa      	b.n	8006b40 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	f040 8098 	bne.w	8006b26 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10b      	bne.n	8006a20 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	095b      	lsrs	r3, r3, #5
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	8912      	ldrh	r2, [r2, #8]
 8006a10:	4293      	cmp	r3, r2
 8006a12:	f0c0 8088 	bcc.w	8006b26 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	61da      	str	r2, [r3, #28]
 8006a1c:	2304      	movs	r3, #4
 8006a1e:	e08f      	b.n	8006b40 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006a20:	68bb      	ldr	r3, [r7, #8]
 8006a22:	0a5b      	lsrs	r3, r3, #9
 8006a24:	68fa      	ldr	r2, [r7, #12]
 8006a26:	8952      	ldrh	r2, [r2, #10]
 8006a28:	3a01      	subs	r2, #1
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d17a      	bne.n	8006b26 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	4619      	mov	r1, r3
 8006a38:	4610      	mov	r0, r2
 8006a3a:	f7ff fc88 	bl	800634e <get_fat>
 8006a3e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d801      	bhi.n	8006a4a <dir_next+0x8c>
 8006a46:	2302      	movs	r3, #2
 8006a48:	e07a      	b.n	8006b40 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a50:	d101      	bne.n	8006a56 <dir_next+0x98>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e074      	b.n	8006b40 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d358      	bcc.n	8006b12 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d104      	bne.n	8006a70 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	61da      	str	r2, [r3, #28]
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	e067      	b.n	8006b40 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006a70:	687a      	ldr	r2, [r7, #4]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	699b      	ldr	r3, [r3, #24]
 8006a76:	4619      	mov	r1, r3
 8006a78:	4610      	mov	r0, r2
 8006a7a:	f7ff fe59 	bl	8006730 <create_chain>
 8006a7e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d101      	bne.n	8006a8a <dir_next+0xcc>
 8006a86:	2307      	movs	r3, #7
 8006a88:	e05a      	b.n	8006b40 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <dir_next+0xd6>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e055      	b.n	8006b40 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9a:	d101      	bne.n	8006aa0 <dir_next+0xe2>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	e04f      	b.n	8006b40 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f7ff fb55 	bl	8006150 <sync_window>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d001      	beq.n	8006ab0 <dir_next+0xf2>
 8006aac:	2301      	movs	r3, #1
 8006aae:	e047      	b.n	8006b40 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	3334      	adds	r3, #52	; 0x34
 8006ab4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ab8:	2100      	movs	r1, #0
 8006aba:	4618      	mov	r0, r3
 8006abc:	f7ff f97f 	bl	8005dbe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	613b      	str	r3, [r7, #16]
 8006ac4:	6979      	ldr	r1, [r7, #20]
 8006ac6:	68f8      	ldr	r0, [r7, #12]
 8006ac8:	f7ff fc22 	bl	8006310 <clust2sect>
 8006acc:	4602      	mov	r2, r0
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	631a      	str	r2, [r3, #48]	; 0x30
 8006ad2:	e012      	b.n	8006afa <dir_next+0x13c>
						fs->wflag = 1;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	2201      	movs	r2, #1
 8006ad8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	f7ff fb38 	bl	8006150 <sync_window>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <dir_next+0x12c>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	e02a      	b.n	8006b40 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006aea:	693b      	ldr	r3, [r7, #16]
 8006aec:	3301      	adds	r3, #1
 8006aee:	613b      	str	r3, [r7, #16]
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	631a      	str	r2, [r3, #48]	; 0x30
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	895b      	ldrh	r3, [r3, #10]
 8006afe:	461a      	mov	r2, r3
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d3e6      	bcc.n	8006ad4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	1ad2      	subs	r2, r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	697a      	ldr	r2, [r7, #20]
 8006b16:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006b18:	6979      	ldr	r1, [r7, #20]
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	f7ff fbf8 	bl	8006310 <clust2sect>
 8006b20:	4602      	mov	r2, r0
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	68ba      	ldr	r2, [r7, #8]
 8006b2a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b38:	441a      	add	r2, r3
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006b3e:	2300      	movs	r3, #0
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3718      	adds	r7, #24
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b086      	sub	sp, #24
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006b58:	2100      	movs	r1, #0
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f7ff feb4 	bl	80068c8 <dir_sdi>
 8006b60:	4603      	mov	r3, r0
 8006b62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006b64:	7dfb      	ldrb	r3, [r7, #23]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d12b      	bne.n	8006bc2 <dir_alloc+0x7a>
		n = 0;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	69db      	ldr	r3, [r3, #28]
 8006b72:	4619      	mov	r1, r3
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f7ff fb2f 	bl	80061d8 <move_window>
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006b7e:	7dfb      	ldrb	r3, [r7, #23]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d11d      	bne.n	8006bc0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6a1b      	ldr	r3, [r3, #32]
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2be5      	cmp	r3, #229	; 0xe5
 8006b8c:	d004      	beq.n	8006b98 <dir_alloc+0x50>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6a1b      	ldr	r3, [r3, #32]
 8006b92:	781b      	ldrb	r3, [r3, #0]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d107      	bne.n	8006ba8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	613b      	str	r3, [r7, #16]
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d102      	bne.n	8006bac <dir_alloc+0x64>
 8006ba6:	e00c      	b.n	8006bc2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006ba8:	2300      	movs	r3, #0
 8006baa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006bac:	2101      	movs	r1, #1
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f7ff ff05 	bl	80069be <dir_next>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006bb8:	7dfb      	ldrb	r3, [r7, #23]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0d7      	beq.n	8006b6e <dir_alloc+0x26>
 8006bbe:	e000      	b.n	8006bc2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006bc0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006bc2:	7dfb      	ldrb	r3, [r7, #23]
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	d101      	bne.n	8006bcc <dir_alloc+0x84>
 8006bc8:	2307      	movs	r3, #7
 8006bca:	75fb      	strb	r3, [r7, #23]
	return res;
 8006bcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3718      	adds	r7, #24
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	b084      	sub	sp, #16
 8006bda:	af00      	add	r7, sp, #0
 8006bdc:	6078      	str	r0, [r7, #4]
 8006bde:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	331a      	adds	r3, #26
 8006be4:	4618      	mov	r0, r3
 8006be6:	f7ff f847 	bl	8005c78 <ld_word>
 8006bea:	4603      	mov	r3, r0
 8006bec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	2b03      	cmp	r3, #3
 8006bf4:	d109      	bne.n	8006c0a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	3314      	adds	r3, #20
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f7ff f83c 	bl	8005c78 <ld_word>
 8006c00:	4603      	mov	r3, r0
 8006c02:	041b      	lsls	r3, r3, #16
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3710      	adds	r7, #16
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b084      	sub	sp, #16
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	331a      	adds	r3, #26
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	b292      	uxth	r2, r2
 8006c28:	4611      	mov	r1, r2
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7ff f85f 	bl	8005cee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	781b      	ldrb	r3, [r3, #0]
 8006c34:	2b03      	cmp	r3, #3
 8006c36:	d109      	bne.n	8006c4c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f103 0214 	add.w	r2, r3, #20
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	0c1b      	lsrs	r3, r3, #16
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	4619      	mov	r1, r3
 8006c46:	4610      	mov	r0, r2
 8006c48:	f7ff f851 	bl	8005cee <st_word>
	}
}
 8006c4c:	bf00      	nop
 8006c4e:	3710      	adds	r7, #16
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006c54:	b590      	push	{r4, r7, lr}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	331a      	adds	r3, #26
 8006c62:	4618      	mov	r0, r3
 8006c64:	f7ff f808 	bl	8005c78 <ld_word>
 8006c68:	4603      	mov	r3, r0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d001      	beq.n	8006c72 <cmp_lfn+0x1e>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	e059      	b.n	8006d26 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c7a:	1e5a      	subs	r2, r3, #1
 8006c7c:	4613      	mov	r3, r2
 8006c7e:	005b      	lsls	r3, r3, #1
 8006c80:	4413      	add	r3, r2
 8006c82:	009b      	lsls	r3, r3, #2
 8006c84:	4413      	add	r3, r2
 8006c86:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006c88:	2301      	movs	r3, #1
 8006c8a:	81fb      	strh	r3, [r7, #14]
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	613b      	str	r3, [r7, #16]
 8006c90:	e033      	b.n	8006cfa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006c92:	4a27      	ldr	r2, [pc, #156]	; (8006d30 <cmp_lfn+0xdc>)
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	4413      	add	r3, r2
 8006c98:	781b      	ldrb	r3, [r3, #0]
 8006c9a:	461a      	mov	r2, r3
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	4413      	add	r3, r2
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7fe ffe9 	bl	8005c78 <ld_word>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006caa:	89fb      	ldrh	r3, [r7, #14]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d01a      	beq.n	8006ce6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	2bfe      	cmp	r3, #254	; 0xfe
 8006cb4:	d812      	bhi.n	8006cdc <cmp_lfn+0x88>
 8006cb6:	89bb      	ldrh	r3, [r7, #12]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fa f991 	bl	8000fe0 <ff_wtoupper>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	461c      	mov	r4, r3
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	1c5a      	adds	r2, r3, #1
 8006cc6:	617a      	str	r2, [r7, #20]
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	4413      	add	r3, r2
 8006cce:	881b      	ldrh	r3, [r3, #0]
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	f7fa f985 	bl	8000fe0 <ff_wtoupper>
 8006cd6:	4603      	mov	r3, r0
 8006cd8:	429c      	cmp	r4, r3
 8006cda:	d001      	beq.n	8006ce0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006cdc:	2300      	movs	r3, #0
 8006cde:	e022      	b.n	8006d26 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006ce0:	89bb      	ldrh	r3, [r7, #12]
 8006ce2:	81fb      	strh	r3, [r7, #14]
 8006ce4:	e006      	b.n	8006cf4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006ce6:	89bb      	ldrh	r3, [r7, #12]
 8006ce8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d001      	beq.n	8006cf4 <cmp_lfn+0xa0>
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	e018      	b.n	8006d26 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	3301      	adds	r3, #1
 8006cf8:	613b      	str	r3, [r7, #16]
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	2b0c      	cmp	r3, #12
 8006cfe:	d9c8      	bls.n	8006c92 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006d00:	683b      	ldr	r3, [r7, #0]
 8006d02:	781b      	ldrb	r3, [r3, #0]
 8006d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d00b      	beq.n	8006d24 <cmp_lfn+0xd0>
 8006d0c:	89fb      	ldrh	r3, [r7, #14]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d008      	beq.n	8006d24 <cmp_lfn+0xd0>
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	005b      	lsls	r3, r3, #1
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	4413      	add	r3, r2
 8006d1a:	881b      	ldrh	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d001      	beq.n	8006d24 <cmp_lfn+0xd0>
 8006d20:	2300      	movs	r3, #0
 8006d22:	e000      	b.n	8006d26 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006d24:	2301      	movs	r3, #1
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	371c      	adds	r7, #28
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd90      	pop	{r4, r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	080137c8 	.word	0x080137c8

08006d34 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	331a      	adds	r3, #26
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe ff98 	bl	8005c78 <ld_word>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d001      	beq.n	8006d52 <pick_lfn+0x1e>
 8006d4e:	2300      	movs	r3, #0
 8006d50:	e04d      	b.n	8006dee <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d5a:	1e5a      	subs	r2, r3, #1
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	005b      	lsls	r3, r3, #1
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4413      	add	r3, r2
 8006d66:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006d68:	2301      	movs	r3, #1
 8006d6a:	81fb      	strh	r3, [r7, #14]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	613b      	str	r3, [r7, #16]
 8006d70:	e028      	b.n	8006dc4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006d72:	4a21      	ldr	r2, [pc, #132]	; (8006df8 <pick_lfn+0xc4>)
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	4413      	add	r3, r2
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	4413      	add	r3, r2
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fe ff79 	bl	8005c78 <ld_word>
 8006d86:	4603      	mov	r3, r0
 8006d88:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006d8a:	89fb      	ldrh	r3, [r7, #14]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00f      	beq.n	8006db0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	2bfe      	cmp	r3, #254	; 0xfe
 8006d94:	d901      	bls.n	8006d9a <pick_lfn+0x66>
 8006d96:	2300      	movs	r3, #0
 8006d98:	e029      	b.n	8006dee <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006d9a:	89bb      	ldrh	r3, [r7, #12]
 8006d9c:	81fb      	strh	r3, [r7, #14]
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	1c5a      	adds	r2, r3, #1
 8006da2:	617a      	str	r2, [r7, #20]
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	4413      	add	r3, r2
 8006daa:	89fa      	ldrh	r2, [r7, #14]
 8006dac:	801a      	strh	r2, [r3, #0]
 8006dae:	e006      	b.n	8006dbe <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006db0:	89bb      	ldrh	r3, [r7, #12]
 8006db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d001      	beq.n	8006dbe <pick_lfn+0x8a>
 8006dba:	2300      	movs	r3, #0
 8006dbc:	e017      	b.n	8006dee <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	613b      	str	r3, [r7, #16]
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	2b0c      	cmp	r3, #12
 8006dc8:	d9d3      	bls.n	8006d72 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00a      	beq.n	8006dec <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	2bfe      	cmp	r3, #254	; 0xfe
 8006dda:	d901      	bls.n	8006de0 <pick_lfn+0xac>
 8006ddc:	2300      	movs	r3, #0
 8006dde:	e006      	b.n	8006dee <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	4413      	add	r3, r2
 8006de8:	2200      	movs	r2, #0
 8006dea:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006dec:	2301      	movs	r3, #1
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	080137c8 	.word	0x080137c8

08006dfc <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b088      	sub	sp, #32
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	4611      	mov	r1, r2
 8006e08:	461a      	mov	r2, r3
 8006e0a:	460b      	mov	r3, r1
 8006e0c:	71fb      	strb	r3, [r7, #7]
 8006e0e:	4613      	mov	r3, r2
 8006e10:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006e12:	68bb      	ldr	r3, [r7, #8]
 8006e14:	330d      	adds	r3, #13
 8006e16:	79ba      	ldrb	r2, [r7, #6]
 8006e18:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	330b      	adds	r3, #11
 8006e1e:	220f      	movs	r2, #15
 8006e20:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	330c      	adds	r3, #12
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	331a      	adds	r3, #26
 8006e2e:	2100      	movs	r1, #0
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe ff5c 	bl	8005cee <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006e36:	79fb      	ldrb	r3, [r7, #7]
 8006e38:	1e5a      	subs	r2, r3, #1
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	005b      	lsls	r3, r3, #1
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006e46:	2300      	movs	r3, #0
 8006e48:	82fb      	strh	r3, [r7, #22]
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006e4e:	8afb      	ldrh	r3, [r7, #22]
 8006e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d007      	beq.n	8006e68 <put_lfn+0x6c>
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	1c5a      	adds	r2, r3, #1
 8006e5c:	61fa      	str	r2, [r7, #28]
 8006e5e:	005b      	lsls	r3, r3, #1
 8006e60:	68fa      	ldr	r2, [r7, #12]
 8006e62:	4413      	add	r3, r2
 8006e64:	881b      	ldrh	r3, [r3, #0]
 8006e66:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006e68:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <put_lfn+0xcc>)
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	461a      	mov	r2, r3
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	4413      	add	r3, r2
 8006e76:	8afa      	ldrh	r2, [r7, #22]
 8006e78:	4611      	mov	r1, r2
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7fe ff37 	bl	8005cee <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006e80:	8afb      	ldrh	r3, [r7, #22]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d102      	bne.n	8006e8c <put_lfn+0x90>
 8006e86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006e8a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	3301      	adds	r3, #1
 8006e90:	61bb      	str	r3, [r7, #24]
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	2b0c      	cmp	r3, #12
 8006e96:	d9da      	bls.n	8006e4e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006e98:	8afb      	ldrh	r3, [r7, #22]
 8006e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d006      	beq.n	8006eb0 <put_lfn+0xb4>
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	005b      	lsls	r3, r3, #1
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	881b      	ldrh	r3, [r3, #0]
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d103      	bne.n	8006eb8 <put_lfn+0xbc>
 8006eb0:	79fb      	ldrb	r3, [r7, #7]
 8006eb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eb6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	79fa      	ldrb	r2, [r7, #7]
 8006ebc:	701a      	strb	r2, [r3, #0]
}
 8006ebe:	bf00      	nop
 8006ec0:	3720      	adds	r7, #32
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	080137c8 	.word	0x080137c8

08006ecc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08c      	sub	sp, #48	; 0x30
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006eda:	220b      	movs	r2, #11
 8006edc:	68b9      	ldr	r1, [r7, #8]
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7fe ff4c 	bl	8005d7c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	2b05      	cmp	r3, #5
 8006ee8:	d92b      	bls.n	8006f42 <gen_numname+0x76>
		sr = seq;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006eee:	e022      	b.n	8006f36 <gen_numname+0x6a>
			wc = *lfn++;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	1c9a      	adds	r2, r3, #2
 8006ef4:	607a      	str	r2, [r7, #4]
 8006ef6:	881b      	ldrh	r3, [r3, #0]
 8006ef8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006efa:	2300      	movs	r3, #0
 8006efc:	62bb      	str	r3, [r7, #40]	; 0x28
 8006efe:	e017      	b.n	8006f30 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	005a      	lsls	r2, r3, #1
 8006f04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	4413      	add	r3, r2
 8006f0c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006f0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d005      	beq.n	8006f2a <gen_numname+0x5e>
 8006f1e:	69fb      	ldr	r3, [r7, #28]
 8006f20:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006f24:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006f28:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f32:	2b0f      	cmp	r3, #15
 8006f34:	d9e4      	bls.n	8006f00 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	881b      	ldrh	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d1d8      	bne.n	8006ef0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006f42:	2307      	movs	r3, #7
 8006f44:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	f003 030f 	and.w	r3, r3, #15
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	3330      	adds	r3, #48	; 0x30
 8006f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006f56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f5a:	2b39      	cmp	r3, #57	; 0x39
 8006f5c:	d904      	bls.n	8006f68 <gen_numname+0x9c>
 8006f5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006f62:	3307      	adds	r3, #7
 8006f64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	1e5a      	subs	r2, r3, #1
 8006f6c:	62ba      	str	r2, [r7, #40]	; 0x28
 8006f6e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006f72:	4413      	add	r3, r2
 8006f74:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006f78:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	091b      	lsrs	r3, r3, #4
 8006f80:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1de      	bne.n	8006f46 <gen_numname+0x7a>
	ns[i] = '~';
 8006f88:	f107 0214 	add.w	r2, r7, #20
 8006f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8e:	4413      	add	r3, r2
 8006f90:	227e      	movs	r2, #126	; 0x7e
 8006f92:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006f94:	2300      	movs	r3, #0
 8006f96:	627b      	str	r3, [r7, #36]	; 0x24
 8006f98:	e002      	b.n	8006fa0 <gen_numname+0xd4>
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8006fa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d205      	bcs.n	8006fb4 <gen_numname+0xe8>
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	4413      	add	r3, r2
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2b20      	cmp	r3, #32
 8006fb2:	d1f2      	bne.n	8006f9a <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb6:	2b07      	cmp	r3, #7
 8006fb8:	d808      	bhi.n	8006fcc <gen_numname+0x100>
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fbc:	1c5a      	adds	r2, r3, #1
 8006fbe:	62ba      	str	r2, [r7, #40]	; 0x28
 8006fc0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006fc4:	4413      	add	r3, r2
 8006fc6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006fca:	e000      	b.n	8006fce <gen_numname+0x102>
 8006fcc:	2120      	movs	r1, #32
 8006fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	627a      	str	r2, [r7, #36]	; 0x24
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4413      	add	r3, r2
 8006fd8:	460a      	mov	r2, r1
 8006fda:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	2b07      	cmp	r3, #7
 8006fe0:	d9e8      	bls.n	8006fb4 <gen_numname+0xe8>
}
 8006fe2:	bf00      	nop
 8006fe4:	3730      	adds	r7, #48	; 0x30
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006fea:	b480      	push	{r7}
 8006fec:	b085      	sub	sp, #20
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006ff6:	230b      	movs	r3, #11
 8006ff8:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006ffa:	7bfb      	ldrb	r3, [r7, #15]
 8006ffc:	b2da      	uxtb	r2, r3
 8006ffe:	0852      	lsrs	r2, r2, #1
 8007000:	01db      	lsls	r3, r3, #7
 8007002:	4313      	orrs	r3, r2
 8007004:	b2da      	uxtb	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	1c59      	adds	r1, r3, #1
 800700a:	6079      	str	r1, [r7, #4]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	4413      	add	r3, r2
 8007010:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007012:	68bb      	ldr	r3, [r7, #8]
 8007014:	3b01      	subs	r3, #1
 8007016:	60bb      	str	r3, [r7, #8]
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1ed      	bne.n	8006ffa <sum_sfn+0x10>
	return sum;
 800701e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007020:	4618      	mov	r0, r3
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b086      	sub	sp, #24
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8007036:	2304      	movs	r3, #4
 8007038:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8007040:	23ff      	movs	r3, #255	; 0xff
 8007042:	757b      	strb	r3, [r7, #21]
 8007044:	23ff      	movs	r3, #255	; 0xff
 8007046:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8007048:	e081      	b.n	800714e <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	69db      	ldr	r3, [r3, #28]
 800704e:	4619      	mov	r1, r3
 8007050:	6938      	ldr	r0, [r7, #16]
 8007052:	f7ff f8c1 	bl	80061d8 <move_window>
 8007056:	4603      	mov	r3, r0
 8007058:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800705a:	7dfb      	ldrb	r3, [r7, #23]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d17c      	bne.n	800715a <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a1b      	ldr	r3, [r3, #32]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8007068:	7dbb      	ldrb	r3, [r7, #22]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d102      	bne.n	8007074 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800706e:	2304      	movs	r3, #4
 8007070:	75fb      	strb	r3, [r7, #23]
 8007072:	e077      	b.n	8007164 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6a1b      	ldr	r3, [r3, #32]
 8007078:	330b      	adds	r3, #11
 800707a:	781b      	ldrb	r3, [r3, #0]
 800707c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007080:	73fb      	strb	r3, [r7, #15]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	7bfa      	ldrb	r2, [r7, #15]
 8007086:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007088:	7dbb      	ldrb	r3, [r7, #22]
 800708a:	2be5      	cmp	r3, #229	; 0xe5
 800708c:	d00e      	beq.n	80070ac <dir_read+0x80>
 800708e:	7dbb      	ldrb	r3, [r7, #22]
 8007090:	2b2e      	cmp	r3, #46	; 0x2e
 8007092:	d00b      	beq.n	80070ac <dir_read+0x80>
 8007094:	7bfb      	ldrb	r3, [r7, #15]
 8007096:	f023 0320 	bic.w	r3, r3, #32
 800709a:	2b08      	cmp	r3, #8
 800709c:	bf0c      	ite	eq
 800709e:	2301      	moveq	r3, #1
 80070a0:	2300      	movne	r3, #0
 80070a2:	b2db      	uxtb	r3, r3
 80070a4:	461a      	mov	r2, r3
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d002      	beq.n	80070b2 <dir_read+0x86>
				ord = 0xFF;
 80070ac:	23ff      	movs	r3, #255	; 0xff
 80070ae:	757b      	strb	r3, [r7, #21]
 80070b0:	e044      	b.n	800713c <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
 80070b4:	2b0f      	cmp	r3, #15
 80070b6:	d12f      	bne.n	8007118 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80070b8:	7dbb      	ldrb	r3, [r7, #22]
 80070ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d00d      	beq.n	80070de <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	7b5b      	ldrb	r3, [r3, #13]
 80070c8:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80070ca:	7dbb      	ldrb	r3, [r7, #22]
 80070cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d0:	75bb      	strb	r3, [r7, #22]
 80070d2:	7dbb      	ldrb	r3, [r7, #22]
 80070d4:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	695a      	ldr	r2, [r3, #20]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80070de:	7dba      	ldrb	r2, [r7, #22]
 80070e0:	7d7b      	ldrb	r3, [r7, #21]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d115      	bne.n	8007112 <dir_read+0xe6>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	330d      	adds	r3, #13
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	7d3a      	ldrb	r2, [r7, #20]
 80070f0:	429a      	cmp	r2, r3
 80070f2:	d10e      	bne.n	8007112 <dir_read+0xe6>
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6a1b      	ldr	r3, [r3, #32]
 80070fc:	4619      	mov	r1, r3
 80070fe:	4610      	mov	r0, r2
 8007100:	f7ff fe18 	bl	8006d34 <pick_lfn>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <dir_read+0xe6>
 800710a:	7d7b      	ldrb	r3, [r7, #21]
 800710c:	3b01      	subs	r3, #1
 800710e:	b2db      	uxtb	r3, r3
 8007110:	e000      	b.n	8007114 <dir_read+0xe8>
 8007112:	23ff      	movs	r3, #255	; 0xff
 8007114:	757b      	strb	r3, [r7, #21]
 8007116:	e011      	b.n	800713c <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8007118:	7d7b      	ldrb	r3, [r7, #21]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d109      	bne.n	8007132 <dir_read+0x106>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a1b      	ldr	r3, [r3, #32]
 8007122:	4618      	mov	r0, r3
 8007124:	f7ff ff61 	bl	8006fea <sum_sfn>
 8007128:	4603      	mov	r3, r0
 800712a:	461a      	mov	r2, r3
 800712c:	7d3b      	ldrb	r3, [r7, #20]
 800712e:	4293      	cmp	r3, r2
 8007130:	d015      	beq.n	800715e <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f04f 32ff 	mov.w	r2, #4294967295
 8007138:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800713a:	e010      	b.n	800715e <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800713c:	2100      	movs	r1, #0
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f7ff fc3d 	bl	80069be <dir_next>
 8007144:	4603      	mov	r3, r0
 8007146:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007148:	7dfb      	ldrb	r3, [r7, #23]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d109      	bne.n	8007162 <dir_read+0x136>
	while (dp->sect) {
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	69db      	ldr	r3, [r3, #28]
 8007152:	2b00      	cmp	r3, #0
 8007154:	f47f af79 	bne.w	800704a <dir_read+0x1e>
 8007158:	e004      	b.n	8007164 <dir_read+0x138>
		if (res != FR_OK) break;
 800715a:	bf00      	nop
 800715c:	e002      	b.n	8007164 <dir_read+0x138>
					break;
 800715e:	bf00      	nop
 8007160:	e000      	b.n	8007164 <dir_read+0x138>
		if (res != FR_OK) break;
 8007162:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <dir_read+0x144>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	61da      	str	r2, [r3, #28]
	return res;
 8007170:	7dfb      	ldrb	r3, [r7, #23]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3718      	adds	r7, #24
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b086      	sub	sp, #24
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007188:	2100      	movs	r1, #0
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f7ff fb9c 	bl	80068c8 <dir_sdi>
 8007190:	4603      	mov	r3, r0
 8007192:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007194:	7dfb      	ldrb	r3, [r7, #23]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d001      	beq.n	800719e <dir_find+0x24>
 800719a:	7dfb      	ldrb	r3, [r7, #23]
 800719c:	e0a9      	b.n	80072f2 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800719e:	23ff      	movs	r3, #255	; 0xff
 80071a0:	753b      	strb	r3, [r7, #20]
 80071a2:	7d3b      	ldrb	r3, [r7, #20]
 80071a4:	757b      	strb	r3, [r7, #21]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f04f 32ff 	mov.w	r2, #4294967295
 80071ac:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	4619      	mov	r1, r3
 80071b4:	6938      	ldr	r0, [r7, #16]
 80071b6:	f7ff f80f 	bl	80061d8 <move_window>
 80071ba:	4603      	mov	r3, r0
 80071bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80071be:	7dfb      	ldrb	r3, [r7, #23]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	f040 8090 	bne.w	80072e6 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80071ce:	7dbb      	ldrb	r3, [r7, #22]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d102      	bne.n	80071da <dir_find+0x60>
 80071d4:	2304      	movs	r3, #4
 80071d6:	75fb      	strb	r3, [r7, #23]
 80071d8:	e08a      	b.n	80072f0 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6a1b      	ldr	r3, [r3, #32]
 80071de:	330b      	adds	r3, #11
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80071e6:	73fb      	strb	r3, [r7, #15]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	7bfa      	ldrb	r2, [r7, #15]
 80071ec:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80071ee:	7dbb      	ldrb	r3, [r7, #22]
 80071f0:	2be5      	cmp	r3, #229	; 0xe5
 80071f2:	d007      	beq.n	8007204 <dir_find+0x8a>
 80071f4:	7bfb      	ldrb	r3, [r7, #15]
 80071f6:	f003 0308 	and.w	r3, r3, #8
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d009      	beq.n	8007212 <dir_find+0x98>
 80071fe:	7bfb      	ldrb	r3, [r7, #15]
 8007200:	2b0f      	cmp	r3, #15
 8007202:	d006      	beq.n	8007212 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007204:	23ff      	movs	r3, #255	; 0xff
 8007206:	757b      	strb	r3, [r7, #21]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f04f 32ff 	mov.w	r2, #4294967295
 800720e:	631a      	str	r2, [r3, #48]	; 0x30
 8007210:	e05e      	b.n	80072d0 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8007212:	7bfb      	ldrb	r3, [r7, #15]
 8007214:	2b0f      	cmp	r3, #15
 8007216:	d136      	bne.n	8007286 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800721e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007222:	2b00      	cmp	r3, #0
 8007224:	d154      	bne.n	80072d0 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8007226:	7dbb      	ldrb	r3, [r7, #22]
 8007228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800722c:	2b00      	cmp	r3, #0
 800722e:	d00d      	beq.n	800724c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6a1b      	ldr	r3, [r3, #32]
 8007234:	7b5b      	ldrb	r3, [r3, #13]
 8007236:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007238:	7dbb      	ldrb	r3, [r7, #22]
 800723a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800723e:	75bb      	strb	r3, [r7, #22]
 8007240:	7dbb      	ldrb	r3, [r7, #22]
 8007242:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	695a      	ldr	r2, [r3, #20]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800724c:	7dba      	ldrb	r2, [r7, #22]
 800724e:	7d7b      	ldrb	r3, [r7, #21]
 8007250:	429a      	cmp	r2, r3
 8007252:	d115      	bne.n	8007280 <dir_find+0x106>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a1b      	ldr	r3, [r3, #32]
 8007258:	330d      	adds	r3, #13
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	7d3a      	ldrb	r2, [r7, #20]
 800725e:	429a      	cmp	r2, r3
 8007260:	d10e      	bne.n	8007280 <dir_find+0x106>
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	68da      	ldr	r2, [r3, #12]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	4619      	mov	r1, r3
 800726c:	4610      	mov	r0, r2
 800726e:	f7ff fcf1 	bl	8006c54 <cmp_lfn>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <dir_find+0x106>
 8007278:	7d7b      	ldrb	r3, [r7, #21]
 800727a:	3b01      	subs	r3, #1
 800727c:	b2db      	uxtb	r3, r3
 800727e:	e000      	b.n	8007282 <dir_find+0x108>
 8007280:	23ff      	movs	r3, #255	; 0xff
 8007282:	757b      	strb	r3, [r7, #21]
 8007284:	e024      	b.n	80072d0 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007286:	7d7b      	ldrb	r3, [r7, #21]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d109      	bne.n	80072a0 <dir_find+0x126>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6a1b      	ldr	r3, [r3, #32]
 8007290:	4618      	mov	r0, r3
 8007292:	f7ff feaa 	bl	8006fea <sum_sfn>
 8007296:	4603      	mov	r3, r0
 8007298:	461a      	mov	r2, r3
 800729a:	7d3b      	ldrb	r3, [r7, #20]
 800729c:	4293      	cmp	r3, r2
 800729e:	d024      	beq.n	80072ea <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10a      	bne.n	80072c4 <dir_find+0x14a>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a18      	ldr	r0, [r3, #32]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3324      	adds	r3, #36	; 0x24
 80072b6:	220b      	movs	r2, #11
 80072b8:	4619      	mov	r1, r3
 80072ba:	f7fe fd9a 	bl	8005df2 <mem_cmp>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d014      	beq.n	80072ee <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80072c4:	23ff      	movs	r3, #255	; 0xff
 80072c6:	757b      	strb	r3, [r7, #21]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f04f 32ff 	mov.w	r2, #4294967295
 80072ce:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80072d0:	2100      	movs	r1, #0
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff fb73 	bl	80069be <dir_next>
 80072d8:	4603      	mov	r3, r0
 80072da:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	f43f af65 	beq.w	80071ae <dir_find+0x34>
 80072e4:	e004      	b.n	80072f0 <dir_find+0x176>
		if (res != FR_OK) break;
 80072e6:	bf00      	nop
 80072e8:	e002      	b.n	80072f0 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80072ea:	bf00      	nop
 80072ec:	e000      	b.n	80072f0 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80072ee:	bf00      	nop

	return res;
 80072f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
	...

080072fc <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b08c      	sub	sp, #48	; 0x30
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007310:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <dir_register+0x20>
 8007318:	2306      	movs	r3, #6
 800731a:	e0e0      	b.n	80074de <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800731c:	2300      	movs	r3, #0
 800731e:	627b      	str	r3, [r7, #36]	; 0x24
 8007320:	e002      	b.n	8007328 <dir_register+0x2c>
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	3301      	adds	r3, #1
 8007326:	627b      	str	r3, [r7, #36]	; 0x24
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	68da      	ldr	r2, [r3, #12]
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	4413      	add	r3, r2
 8007332:	881b      	ldrh	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1f4      	bne.n	8007322 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800733e:	f107 030c 	add.w	r3, r7, #12
 8007342:	220c      	movs	r2, #12
 8007344:	4618      	mov	r0, r3
 8007346:	f7fe fd19 	bl	8005d7c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800734a:	7dfb      	ldrb	r3, [r7, #23]
 800734c:	f003 0301 	and.w	r3, r3, #1
 8007350:	2b00      	cmp	r3, #0
 8007352:	d032      	beq.n	80073ba <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2240      	movs	r2, #64	; 0x40
 8007358:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800735c:	2301      	movs	r3, #1
 800735e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007360:	e016      	b.n	8007390 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	68da      	ldr	r2, [r3, #12]
 800736c:	f107 010c 	add.w	r1, r7, #12
 8007370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007372:	f7ff fdab 	bl	8006ecc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007376:	6878      	ldr	r0, [r7, #4]
 8007378:	f7ff feff 	bl	800717a <dir_find>
 800737c:	4603      	mov	r3, r0
 800737e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8007382:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007386:	2b00      	cmp	r3, #0
 8007388:	d106      	bne.n	8007398 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800738a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800738c:	3301      	adds	r3, #1
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007392:	2b63      	cmp	r3, #99	; 0x63
 8007394:	d9e5      	bls.n	8007362 <dir_register+0x66>
 8007396:	e000      	b.n	800739a <dir_register+0x9e>
			if (res != FR_OK) break;
 8007398:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800739a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800739c:	2b64      	cmp	r3, #100	; 0x64
 800739e:	d101      	bne.n	80073a4 <dir_register+0xa8>
 80073a0:	2307      	movs	r3, #7
 80073a2:	e09c      	b.n	80074de <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80073a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073a8:	2b04      	cmp	r3, #4
 80073aa:	d002      	beq.n	80073b2 <dir_register+0xb6>
 80073ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073b0:	e095      	b.n	80074de <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80073b2:	7dfa      	ldrb	r2, [r7, #23]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80073ba:	7dfb      	ldrb	r3, [r7, #23]
 80073bc:	f003 0302 	and.w	r3, r3, #2
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d007      	beq.n	80073d4 <dir_register+0xd8>
 80073c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073c6:	330c      	adds	r3, #12
 80073c8:	4a47      	ldr	r2, [pc, #284]	; (80074e8 <dir_register+0x1ec>)
 80073ca:	fba2 2303 	umull	r2, r3, r2, r3
 80073ce:	089b      	lsrs	r3, r3, #2
 80073d0:	3301      	adds	r3, #1
 80073d2:	e000      	b.n	80073d6 <dir_register+0xda>
 80073d4:	2301      	movs	r3, #1
 80073d6:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80073d8:	6a39      	ldr	r1, [r7, #32]
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f7ff fbb4 	bl	8006b48 <dir_alloc>
 80073e0:	4603      	mov	r3, r0
 80073e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80073e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d148      	bne.n	8007480 <dir_register+0x184>
 80073ee:	6a3b      	ldr	r3, [r7, #32]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	623b      	str	r3, [r7, #32]
 80073f4:	6a3b      	ldr	r3, [r7, #32]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d042      	beq.n	8007480 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	695a      	ldr	r2, [r3, #20]
 80073fe:	6a3b      	ldr	r3, [r7, #32]
 8007400:	015b      	lsls	r3, r3, #5
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f7ff fa5e 	bl	80068c8 <dir_sdi>
 800740c:	4603      	mov	r3, r0
 800740e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007412:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007416:	2b00      	cmp	r3, #0
 8007418:	d132      	bne.n	8007480 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3324      	adds	r3, #36	; 0x24
 800741e:	4618      	mov	r0, r3
 8007420:	f7ff fde3 	bl	8006fea <sum_sfn>
 8007424:	4603      	mov	r3, r0
 8007426:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	69db      	ldr	r3, [r3, #28]
 800742c:	4619      	mov	r1, r3
 800742e:	69f8      	ldr	r0, [r7, #28]
 8007430:	f7fe fed2 	bl	80061d8 <move_window>
 8007434:	4603      	mov	r3, r0
 8007436:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800743a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800743e:	2b00      	cmp	r3, #0
 8007440:	d11d      	bne.n	800747e <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007442:	69fb      	ldr	r3, [r7, #28]
 8007444:	68d8      	ldr	r0, [r3, #12]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6a19      	ldr	r1, [r3, #32]
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	b2da      	uxtb	r2, r3
 800744e:	7efb      	ldrb	r3, [r7, #27]
 8007450:	f7ff fcd4 	bl	8006dfc <put_lfn>
				fs->wflag = 1;
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	2201      	movs	r2, #1
 8007458:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800745a:	2100      	movs	r1, #0
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff faae 	bl	80069be <dir_next>
 8007462:	4603      	mov	r3, r0
 8007464:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007468:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800746c:	2b00      	cmp	r3, #0
 800746e:	d107      	bne.n	8007480 <dir_register+0x184>
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	3b01      	subs	r3, #1
 8007474:	623b      	str	r3, [r7, #32]
 8007476:	6a3b      	ldr	r3, [r7, #32]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1d5      	bne.n	8007428 <dir_register+0x12c>
 800747c:	e000      	b.n	8007480 <dir_register+0x184>
				if (res != FR_OK) break;
 800747e:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007480:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007484:	2b00      	cmp	r3, #0
 8007486:	d128      	bne.n	80074da <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	69db      	ldr	r3, [r3, #28]
 800748c:	4619      	mov	r1, r3
 800748e:	69f8      	ldr	r0, [r7, #28]
 8007490:	f7fe fea2 	bl	80061d8 <move_window>
 8007494:	4603      	mov	r3, r0
 8007496:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800749a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d11b      	bne.n	80074da <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a1b      	ldr	r3, [r3, #32]
 80074a6:	2220      	movs	r2, #32
 80074a8:	2100      	movs	r1, #0
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fe fc87 	bl	8005dbe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a18      	ldr	r0, [r3, #32]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	3324      	adds	r3, #36	; 0x24
 80074b8:	220b      	movs	r2, #11
 80074ba:	4619      	mov	r1, r3
 80074bc:	f7fe fc5e 	bl	8005d7c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	330c      	adds	r3, #12
 80074cc:	f002 0218 	and.w	r2, r2, #24
 80074d0:	b2d2      	uxtb	r2, r2
 80074d2:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	2201      	movs	r2, #1
 80074d8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80074da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3730      	adds	r7, #48	; 0x30
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop
 80074e8:	4ec4ec4f 	.word	0x4ec4ec4f

080074ec <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 80074ec:	b580      	push	{r7, lr}
 80074ee:	b086      	sub	sp, #24
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007508:	d007      	beq.n	800751a <dir_remove+0x2e>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800750e:	4619      	mov	r1, r3
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff f9d9 	bl	80068c8 <dir_sdi>
 8007516:	4603      	mov	r3, r0
 8007518:	e000      	b.n	800751c <dir_remove+0x30>
 800751a:	2300      	movs	r3, #0
 800751c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800751e:	7dfb      	ldrb	r3, [r7, #23]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d128      	bne.n	8007576 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	69db      	ldr	r3, [r3, #28]
 8007528:	4619      	mov	r1, r3
 800752a:	6938      	ldr	r0, [r7, #16]
 800752c:	f7fe fe54 	bl	80061d8 <move_window>
 8007530:	4603      	mov	r3, r0
 8007532:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007534:	7dfb      	ldrb	r3, [r7, #23]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d115      	bne.n	8007566 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	6a1b      	ldr	r3, [r3, #32]
 800753e:	22e5      	movs	r2, #229	; 0xe5
 8007540:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	2201      	movs	r2, #1
 8007546:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	695b      	ldr	r3, [r3, #20]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	429a      	cmp	r2, r3
 8007550:	d90b      	bls.n	800756a <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 8007552:	2100      	movs	r1, #0
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f7ff fa32 	bl	80069be <dir_next>
 800755a:	4603      	mov	r3, r0
 800755c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800755e:	7dfb      	ldrb	r3, [r7, #23]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d0df      	beq.n	8007524 <dir_remove+0x38>
 8007564:	e002      	b.n	800756c <dir_remove+0x80>
			if (res != FR_OK) break;
 8007566:	bf00      	nop
 8007568:	e000      	b.n	800756c <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 800756a:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 800756c:	7dfb      	ldrb	r3, [r7, #23]
 800756e:	2b04      	cmp	r3, #4
 8007570:	d101      	bne.n	8007576 <dir_remove+0x8a>
 8007572:	2302      	movs	r3, #2
 8007574:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8007576:	7dfb      	ldrb	r3, [r7, #23]
}
 8007578:	4618      	mov	r0, r3
 800757a:	3718      	adds	r7, #24
 800757c:	46bd      	mov	sp, r7
 800757e:	bd80      	pop	{r7, pc}

08007580 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2200      	movs	r2, #0
 8007594:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	69db      	ldr	r3, [r3, #28]
 800759a:	2b00      	cmp	r3, #0
 800759c:	f000 80c9 	beq.w	8007732 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075a8:	d032      	beq.n	8007610 <get_fileinfo+0x90>
			i = j = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	61bb      	str	r3, [r7, #24]
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80075b2:	e01b      	b.n	80075ec <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80075b4:	89fb      	ldrh	r3, [r7, #14]
 80075b6:	2100      	movs	r1, #0
 80075b8:	4618      	mov	r0, r3
 80075ba:	f7f9 fca5 	bl	8000f08 <ff_convert>
 80075be:	4603      	mov	r3, r0
 80075c0:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 80075c2:	89fb      	ldrh	r3, [r7, #14]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d102      	bne.n	80075ce <get_fileinfo+0x4e>
 80075c8:	2300      	movs	r3, #0
 80075ca:	61fb      	str	r3, [r7, #28]
 80075cc:	e01a      	b.n	8007604 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 80075ce:	69fb      	ldr	r3, [r7, #28]
 80075d0:	2bfe      	cmp	r3, #254	; 0xfe
 80075d2:	d902      	bls.n	80075da <get_fileinfo+0x5a>
 80075d4:	2300      	movs	r3, #0
 80075d6:	61fb      	str	r3, [r7, #28]
 80075d8:	e014      	b.n	8007604 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 80075da:	69fb      	ldr	r3, [r7, #28]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	61fa      	str	r2, [r7, #28]
 80075e0:	89fa      	ldrh	r2, [r7, #14]
 80075e2:	b2d1      	uxtb	r1, r2
 80075e4:	683a      	ldr	r2, [r7, #0]
 80075e6:	4413      	add	r3, r2
 80075e8:	460a      	mov	r2, r1
 80075ea:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	68da      	ldr	r2, [r3, #12]
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	1c59      	adds	r1, r3, #1
 80075f4:	61b9      	str	r1, [r7, #24]
 80075f6:	005b      	lsls	r3, r3, #1
 80075f8:	4413      	add	r3, r2
 80075fa:	881b      	ldrh	r3, [r3, #0]
 80075fc:	81fb      	strh	r3, [r7, #14]
 80075fe:	89fb      	ldrh	r3, [r7, #14]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1d7      	bne.n	80075b4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8007604:	683a      	ldr	r2, [r7, #0]
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	3316      	adds	r3, #22
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8007610:	2300      	movs	r3, #0
 8007612:	61bb      	str	r3, [r7, #24]
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8007618:	683a      	ldr	r2, [r7, #0]
 800761a:	69fb      	ldr	r3, [r7, #28]
 800761c:	4413      	add	r3, r2
 800761e:	3316      	adds	r3, #22
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8007624:	e04c      	b.n	80076c0 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6a1a      	ldr	r2, [r3, #32]
 800762a:	69fb      	ldr	r3, [r7, #28]
 800762c:	1c59      	adds	r1, r3, #1
 800762e:	61f9      	str	r1, [r7, #28]
 8007630:	4413      	add	r3, r2
 8007632:	781b      	ldrb	r3, [r3, #0]
 8007634:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8007636:	7dfb      	ldrb	r3, [r7, #23]
 8007638:	2b20      	cmp	r3, #32
 800763a:	d100      	bne.n	800763e <get_fileinfo+0xbe>
 800763c:	e040      	b.n	80076c0 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800763e:	7dfb      	ldrb	r3, [r7, #23]
 8007640:	2b05      	cmp	r3, #5
 8007642:	d101      	bne.n	8007648 <get_fileinfo+0xc8>
 8007644:	23e5      	movs	r3, #229	; 0xe5
 8007646:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	2b09      	cmp	r3, #9
 800764c:	d10f      	bne.n	800766e <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800764e:	89bb      	ldrh	r3, [r7, #12]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d105      	bne.n	8007660 <get_fileinfo+0xe0>
 8007654:	683a      	ldr	r2, [r7, #0]
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	4413      	add	r3, r2
 800765a:	3316      	adds	r3, #22
 800765c:	222e      	movs	r2, #46	; 0x2e
 800765e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	61ba      	str	r2, [r7, #24]
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	4413      	add	r3, r2
 800766a:	222e      	movs	r2, #46	; 0x2e
 800766c:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800766e:	683a      	ldr	r2, [r7, #0]
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	4413      	add	r3, r2
 8007674:	3309      	adds	r3, #9
 8007676:	7dfa      	ldrb	r2, [r7, #23]
 8007678:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800767a:	89bb      	ldrh	r3, [r7, #12]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d11c      	bne.n	80076ba <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8007680:	7dfb      	ldrb	r3, [r7, #23]
 8007682:	2b40      	cmp	r3, #64	; 0x40
 8007684:	d913      	bls.n	80076ae <get_fileinfo+0x12e>
 8007686:	7dfb      	ldrb	r3, [r7, #23]
 8007688:	2b5a      	cmp	r3, #90	; 0x5a
 800768a:	d810      	bhi.n	80076ae <get_fileinfo+0x12e>
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6a1b      	ldr	r3, [r3, #32]
 8007690:	330c      	adds	r3, #12
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	69fb      	ldr	r3, [r7, #28]
 8007698:	2b08      	cmp	r3, #8
 800769a:	d901      	bls.n	80076a0 <get_fileinfo+0x120>
 800769c:	2310      	movs	r3, #16
 800769e:	e000      	b.n	80076a2 <get_fileinfo+0x122>
 80076a0:	2308      	movs	r3, #8
 80076a2:	4013      	ands	r3, r2
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80076a8:	7dfb      	ldrb	r3, [r7, #23]
 80076aa:	3320      	adds	r3, #32
 80076ac:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80076ae:	683a      	ldr	r2, [r7, #0]
 80076b0:	69bb      	ldr	r3, [r7, #24]
 80076b2:	4413      	add	r3, r2
 80076b4:	3316      	adds	r3, #22
 80076b6:	7dfa      	ldrb	r2, [r7, #23]
 80076b8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80076ba:	69bb      	ldr	r3, [r7, #24]
 80076bc:	3301      	adds	r3, #1
 80076be:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 80076c0:	69fb      	ldr	r3, [r7, #28]
 80076c2:	2b0a      	cmp	r3, #10
 80076c4:	d9af      	bls.n	8007626 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 80076c6:	89bb      	ldrh	r3, [r7, #12]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d10d      	bne.n	80076e8 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	4413      	add	r3, r2
 80076d2:	3316      	adds	r3, #22
 80076d4:	2200      	movs	r2, #0
 80076d6:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	6a1b      	ldr	r3, [r3, #32]
 80076dc:	330c      	adds	r3, #12
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d101      	bne.n	80076e8 <get_fileinfo+0x168>
 80076e4:	2300      	movs	r3, #0
 80076e6:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 80076e8:	683a      	ldr	r2, [r7, #0]
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	4413      	add	r3, r2
 80076ee:	3309      	adds	r3, #9
 80076f0:	2200      	movs	r2, #0
 80076f2:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	6a1b      	ldr	r3, [r3, #32]
 80076f8:	7ada      	ldrb	r2, [r3, #11]
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	331c      	adds	r3, #28
 8007704:	4618      	mov	r0, r3
 8007706:	f7fe facf 	bl	8005ca8 <ld_dword>
 800770a:	4602      	mov	r2, r0
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	3316      	adds	r3, #22
 8007716:	4618      	mov	r0, r3
 8007718:	f7fe fac6 	bl	8005ca8 <ld_dword>
 800771c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	b29a      	uxth	r2, r3
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	80da      	strh	r2, [r3, #6]
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	0c1b      	lsrs	r3, r3, #16
 800772a:	b29a      	uxth	r2, r3
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	809a      	strh	r2, [r3, #4]
 8007730:	e000      	b.n	8007734 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007732:	bf00      	nop
}
 8007734:	3720      	adds	r7, #32
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
	...

0800773c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	; 0x28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	613b      	str	r3, [r7, #16]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68db      	ldr	r3, [r3, #12]
 8007752:	60fb      	str	r3, [r7, #12]
 8007754:	2300      	movs	r3, #0
 8007756:	617b      	str	r3, [r7, #20]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	1c5a      	adds	r2, r3, #1
 8007760:	61ba      	str	r2, [r7, #24]
 8007762:	693a      	ldr	r2, [r7, #16]
 8007764:	4413      	add	r3, r2
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800776a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800776c:	2b1f      	cmp	r3, #31
 800776e:	d940      	bls.n	80077f2 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007770:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007772:	2b2f      	cmp	r3, #47	; 0x2f
 8007774:	d006      	beq.n	8007784 <create_name+0x48>
 8007776:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007778:	2b5c      	cmp	r3, #92	; 0x5c
 800777a:	d110      	bne.n	800779e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800777c:	e002      	b.n	8007784 <create_name+0x48>
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	3301      	adds	r3, #1
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	4413      	add	r3, r2
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b2f      	cmp	r3, #47	; 0x2f
 800778e:	d0f6      	beq.n	800777e <create_name+0x42>
 8007790:	693a      	ldr	r2, [r7, #16]
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	4413      	add	r3, r2
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b5c      	cmp	r3, #92	; 0x5c
 800779a:	d0f0      	beq.n	800777e <create_name+0x42>
			break;
 800779c:	e02a      	b.n	80077f4 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	2bfe      	cmp	r3, #254	; 0xfe
 80077a2:	d901      	bls.n	80077a8 <create_name+0x6c>
 80077a4:	2306      	movs	r3, #6
 80077a6:	e177      	b.n	8007a98 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80077a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80077ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077b0:	2101      	movs	r1, #1
 80077b2:	4618      	mov	r0, r3
 80077b4:	f7f9 fba8 	bl	8000f08 <ff_convert>
 80077b8:	4603      	mov	r3, r0
 80077ba:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80077bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d101      	bne.n	80077c6 <create_name+0x8a>
 80077c2:	2306      	movs	r3, #6
 80077c4:	e168      	b.n	8007a98 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 80077c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077c8:	2b7f      	cmp	r3, #127	; 0x7f
 80077ca:	d809      	bhi.n	80077e0 <create_name+0xa4>
 80077cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077ce:	4619      	mov	r1, r3
 80077d0:	48b3      	ldr	r0, [pc, #716]	; (8007aa0 <create_name+0x364>)
 80077d2:	f7fe fb35 	bl	8005e40 <chk_chr>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <create_name+0xa4>
 80077dc:	2306      	movs	r3, #6
 80077de:	e15b      	b.n	8007a98 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	617a      	str	r2, [r7, #20]
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	68fa      	ldr	r2, [r7, #12]
 80077ea:	4413      	add	r3, r2
 80077ec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80077ee:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80077f0:	e7b4      	b.n	800775c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80077f2:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80077f4:	693a      	ldr	r2, [r7, #16]
 80077f6:	69bb      	ldr	r3, [r7, #24]
 80077f8:	441a      	add	r2, r3
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80077fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007800:	2b1f      	cmp	r3, #31
 8007802:	d801      	bhi.n	8007808 <create_name+0xcc>
 8007804:	2304      	movs	r3, #4
 8007806:	e000      	b.n	800780a <create_name+0xce>
 8007808:	2300      	movs	r3, #0
 800780a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800780e:	e011      	b.n	8007834 <create_name+0xf8>
		w = lfn[di - 1];
 8007810:	697b      	ldr	r3, [r7, #20]
 8007812:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007816:	3b01      	subs	r3, #1
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	881b      	ldrh	r3, [r3, #0]
 8007820:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8007822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007824:	2b20      	cmp	r3, #32
 8007826:	d002      	beq.n	800782e <create_name+0xf2>
 8007828:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800782a:	2b2e      	cmp	r3, #46	; 0x2e
 800782c:	d106      	bne.n	800783c <create_name+0x100>
		di--;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	3b01      	subs	r3, #1
 8007832:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d1ea      	bne.n	8007810 <create_name+0xd4>
 800783a:	e000      	b.n	800783e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800783c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	005b      	lsls	r3, r3, #1
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	2200      	movs	r2, #0
 8007848:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <create_name+0x118>
 8007850:	2306      	movs	r3, #6
 8007852:	e121      	b.n	8007a98 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	3324      	adds	r3, #36	; 0x24
 8007858:	220b      	movs	r2, #11
 800785a:	2120      	movs	r1, #32
 800785c:	4618      	mov	r0, r3
 800785e:	f7fe faae 	bl	8005dbe <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007862:	2300      	movs	r3, #0
 8007864:	61bb      	str	r3, [r7, #24]
 8007866:	e002      	b.n	800786e <create_name+0x132>
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	3301      	adds	r3, #1
 800786c:	61bb      	str	r3, [r7, #24]
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	4413      	add	r3, r2
 8007876:	881b      	ldrh	r3, [r3, #0]
 8007878:	2b20      	cmp	r3, #32
 800787a:	d0f5      	beq.n	8007868 <create_name+0x12c>
 800787c:	69bb      	ldr	r3, [r7, #24]
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	4413      	add	r3, r2
 8007884:	881b      	ldrh	r3, [r3, #0]
 8007886:	2b2e      	cmp	r3, #46	; 0x2e
 8007888:	d0ee      	beq.n	8007868 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d009      	beq.n	80078a4 <create_name+0x168>
 8007890:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007894:	f043 0303 	orr.w	r3, r3, #3
 8007898:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800789c:	e002      	b.n	80078a4 <create_name+0x168>
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	3b01      	subs	r3, #1
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d009      	beq.n	80078be <create_name+0x182>
 80078aa:	697b      	ldr	r3, [r7, #20]
 80078ac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80078b0:	3b01      	subs	r3, #1
 80078b2:	005b      	lsls	r3, r3, #1
 80078b4:	68fa      	ldr	r2, [r7, #12]
 80078b6:	4413      	add	r3, r2
 80078b8:	881b      	ldrh	r3, [r3, #0]
 80078ba:	2b2e      	cmp	r3, #46	; 0x2e
 80078bc:	d1ef      	bne.n	800789e <create_name+0x162>

	i = b = 0; ni = 8;
 80078be:	2300      	movs	r3, #0
 80078c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80078c4:	2300      	movs	r3, #0
 80078c6:	623b      	str	r3, [r7, #32]
 80078c8:	2308      	movs	r3, #8
 80078ca:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	1c5a      	adds	r2, r3, #1
 80078d0:	61ba      	str	r2, [r7, #24]
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	4413      	add	r3, r2
 80078d8:	881b      	ldrh	r3, [r3, #0]
 80078da:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80078dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f000 8090 	beq.w	8007a04 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80078e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078e6:	2b20      	cmp	r3, #32
 80078e8:	d006      	beq.n	80078f8 <create_name+0x1bc>
 80078ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078ec:	2b2e      	cmp	r3, #46	; 0x2e
 80078ee:	d10a      	bne.n	8007906 <create_name+0x1ca>
 80078f0:	69ba      	ldr	r2, [r7, #24]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d006      	beq.n	8007906 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80078f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80078fc:	f043 0303 	orr.w	r3, r3, #3
 8007900:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007904:	e07d      	b.n	8007a02 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007906:	6a3a      	ldr	r2, [r7, #32]
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	429a      	cmp	r2, r3
 800790c:	d203      	bcs.n	8007916 <create_name+0x1da>
 800790e:	69ba      	ldr	r2, [r7, #24]
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	429a      	cmp	r2, r3
 8007914:	d123      	bne.n	800795e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	2b0b      	cmp	r3, #11
 800791a:	d106      	bne.n	800792a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800791c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007920:	f043 0303 	orr.w	r3, r3, #3
 8007924:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007928:	e06f      	b.n	8007a0a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800792a:	69ba      	ldr	r2, [r7, #24]
 800792c:	697b      	ldr	r3, [r7, #20]
 800792e:	429a      	cmp	r2, r3
 8007930:	d005      	beq.n	800793e <create_name+0x202>
 8007932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007936:	f043 0303 	orr.w	r3, r3, #3
 800793a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800793e:	69ba      	ldr	r2, [r7, #24]
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	429a      	cmp	r2, r3
 8007944:	d860      	bhi.n	8007a08 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	61bb      	str	r3, [r7, #24]
 800794a:	2308      	movs	r3, #8
 800794c:	623b      	str	r3, [r7, #32]
 800794e:	230b      	movs	r3, #11
 8007950:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007952:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800795c:	e051      	b.n	8007a02 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800795e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007960:	2b7f      	cmp	r3, #127	; 0x7f
 8007962:	d914      	bls.n	800798e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007964:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007966:	2100      	movs	r1, #0
 8007968:	4618      	mov	r0, r3
 800796a:	f7f9 facd 	bl	8000f08 <ff_convert>
 800796e:	4603      	mov	r3, r0
 8007970:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007972:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007974:	2b00      	cmp	r3, #0
 8007976:	d004      	beq.n	8007982 <create_name+0x246>
 8007978:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800797a:	3b80      	subs	r3, #128	; 0x80
 800797c:	4a49      	ldr	r2, [pc, #292]	; (8007aa4 <create_name+0x368>)
 800797e:	5cd3      	ldrb	r3, [r2, r3]
 8007980:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007986:	f043 0302 	orr.w	r3, r3, #2
 800798a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800798e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007990:	2b00      	cmp	r3, #0
 8007992:	d007      	beq.n	80079a4 <create_name+0x268>
 8007994:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007996:	4619      	mov	r1, r3
 8007998:	4843      	ldr	r0, [pc, #268]	; (8007aa8 <create_name+0x36c>)
 800799a:	f7fe fa51 	bl	8005e40 <chk_chr>
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d008      	beq.n	80079b6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80079a4:	235f      	movs	r3, #95	; 0x5f
 80079a6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80079a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079ac:	f043 0303 	orr.w	r3, r3, #3
 80079b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079b4:	e01b      	b.n	80079ee <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80079b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079b8:	2b40      	cmp	r3, #64	; 0x40
 80079ba:	d909      	bls.n	80079d0 <create_name+0x294>
 80079bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079be:	2b5a      	cmp	r3, #90	; 0x5a
 80079c0:	d806      	bhi.n	80079d0 <create_name+0x294>
					b |= 2;
 80079c2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079c6:	f043 0302 	orr.w	r3, r3, #2
 80079ca:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80079ce:	e00e      	b.n	80079ee <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80079d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079d2:	2b60      	cmp	r3, #96	; 0x60
 80079d4:	d90b      	bls.n	80079ee <create_name+0x2b2>
 80079d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079d8:	2b7a      	cmp	r3, #122	; 0x7a
 80079da:	d808      	bhi.n	80079ee <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80079dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80079e0:	f043 0301 	orr.w	r3, r3, #1
 80079e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80079e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80079ea:	3b20      	subs	r3, #32
 80079ec:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80079ee:	6a3b      	ldr	r3, [r7, #32]
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	623a      	str	r2, [r7, #32]
 80079f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079f6:	b2d1      	uxtb	r1, r2
 80079f8:	687a      	ldr	r2, [r7, #4]
 80079fa:	4413      	add	r3, r2
 80079fc:	460a      	mov	r2, r1
 80079fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007a02:	e763      	b.n	80078cc <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007a04:	bf00      	nop
 8007a06:	e000      	b.n	8007a0a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007a08:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a10:	2be5      	cmp	r3, #229	; 0xe5
 8007a12:	d103      	bne.n	8007a1c <create_name+0x2e0>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2205      	movs	r2, #5
 8007a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	2b08      	cmp	r3, #8
 8007a20:	d104      	bne.n	8007a2c <create_name+0x2f0>
 8007a22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a26:	009b      	lsls	r3, r3, #2
 8007a28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a30:	f003 030c 	and.w	r3, r3, #12
 8007a34:	2b0c      	cmp	r3, #12
 8007a36:	d005      	beq.n	8007a44 <create_name+0x308>
 8007a38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	2b03      	cmp	r3, #3
 8007a42:	d105      	bne.n	8007a50 <create_name+0x314>
 8007a44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a48:	f043 0302 	orr.w	r3, r3, #2
 8007a4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a54:	f003 0302 	and.w	r3, r3, #2
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d117      	bne.n	8007a8c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007a5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a60:	f003 0303 	and.w	r3, r3, #3
 8007a64:	2b01      	cmp	r3, #1
 8007a66:	d105      	bne.n	8007a74 <create_name+0x338>
 8007a68:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a6c:	f043 0310 	orr.w	r3, r3, #16
 8007a70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007a74:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a78:	f003 030c 	and.w	r3, r3, #12
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d105      	bne.n	8007a8c <create_name+0x350>
 8007a80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a84:	f043 0308 	orr.w	r3, r3, #8
 8007a88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007a92:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007a96:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3728      	adds	r7, #40	; 0x28
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}
 8007aa0:	0800c364 	.word	0x0800c364
 8007aa4:	08013748 	.word	0x08013748
 8007aa8:	0800c370 	.word	0x0800c370

08007aac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007ac0:	e002      	b.n	8007ac8 <follow_path+0x1c>
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	603b      	str	r3, [r7, #0]
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	2b2f      	cmp	r3, #47	; 0x2f
 8007ace:	d0f8      	beq.n	8007ac2 <follow_path+0x16>
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	781b      	ldrb	r3, [r3, #0]
 8007ad4:	2b5c      	cmp	r3, #92	; 0x5c
 8007ad6:	d0f4      	beq.n	8007ac2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007ad8:	693b      	ldr	r3, [r7, #16]
 8007ada:	2200      	movs	r2, #0
 8007adc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2b1f      	cmp	r3, #31
 8007ae4:	d80a      	bhi.n	8007afc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2280      	movs	r2, #128	; 0x80
 8007aea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007aee:	2100      	movs	r1, #0
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7fe fee9 	bl	80068c8 <dir_sdi>
 8007af6:	4603      	mov	r3, r0
 8007af8:	75fb      	strb	r3, [r7, #23]
 8007afa:	e043      	b.n	8007b84 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007afc:	463b      	mov	r3, r7
 8007afe:	4619      	mov	r1, r3
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7ff fe1b 	bl	800773c <create_name>
 8007b06:	4603      	mov	r3, r0
 8007b08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007b0a:	7dfb      	ldrb	r3, [r7, #23]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d134      	bne.n	8007b7a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f7ff fb32 	bl	800717a <dir_find>
 8007b16:	4603      	mov	r3, r0
 8007b18:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007b20:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007b22:	7dfb      	ldrb	r3, [r7, #23]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00a      	beq.n	8007b3e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007b28:	7dfb      	ldrb	r3, [r7, #23]
 8007b2a:	2b04      	cmp	r3, #4
 8007b2c:	d127      	bne.n	8007b7e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007b2e:	7afb      	ldrb	r3, [r7, #11]
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d122      	bne.n	8007b7e <follow_path+0xd2>
 8007b38:	2305      	movs	r3, #5
 8007b3a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007b3c:	e01f      	b.n	8007b7e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b3e:	7afb      	ldrb	r3, [r7, #11]
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d11c      	bne.n	8007b82 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	799b      	ldrb	r3, [r3, #6]
 8007b4c:	f003 0310 	and.w	r3, r3, #16
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d102      	bne.n	8007b5a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007b54:	2305      	movs	r3, #5
 8007b56:	75fb      	strb	r3, [r7, #23]
 8007b58:	e014      	b.n	8007b84 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	695b      	ldr	r3, [r3, #20]
 8007b64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b68:	4413      	add	r3, r2
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	68f8      	ldr	r0, [r7, #12]
 8007b6e:	f7ff f832 	bl	8006bd6 <ld_clust>
 8007b72:	4602      	mov	r2, r0
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007b78:	e7c0      	b.n	8007afc <follow_path+0x50>
			if (res != FR_OK) break;
 8007b7a:	bf00      	nop
 8007b7c:	e002      	b.n	8007b84 <follow_path+0xd8>
				break;
 8007b7e:	bf00      	nop
 8007b80:	e000      	b.n	8007b84 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b82:	bf00      	nop
			}
		}
	}

	return res;
 8007b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007b8e:	b480      	push	{r7}
 8007b90:	b087      	sub	sp, #28
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007b96:	f04f 33ff 	mov.w	r3, #4294967295
 8007b9a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d031      	beq.n	8007c08 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	617b      	str	r3, [r7, #20]
 8007baa:	e002      	b.n	8007bb2 <get_ldnumber+0x24>
 8007bac:	697b      	ldr	r3, [r7, #20]
 8007bae:	3301      	adds	r3, #1
 8007bb0:	617b      	str	r3, [r7, #20]
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	781b      	ldrb	r3, [r3, #0]
 8007bb6:	2b1f      	cmp	r3, #31
 8007bb8:	d903      	bls.n	8007bc2 <get_ldnumber+0x34>
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	2b3a      	cmp	r3, #58	; 0x3a
 8007bc0:	d1f4      	bne.n	8007bac <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	2b3a      	cmp	r3, #58	; 0x3a
 8007bc8:	d11c      	bne.n	8007c04 <get_ldnumber+0x76>
			tp = *path;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	60fa      	str	r2, [r7, #12]
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	3b30      	subs	r3, #48	; 0x30
 8007bda:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007bdc:	68bb      	ldr	r3, [r7, #8]
 8007bde:	2b09      	cmp	r3, #9
 8007be0:	d80e      	bhi.n	8007c00 <get_ldnumber+0x72>
 8007be2:	68fa      	ldr	r2, [r7, #12]
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d10a      	bne.n	8007c00 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d107      	bne.n	8007c00 <get_ldnumber+0x72>
					vol = (int)i;
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	617b      	str	r3, [r7, #20]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	e002      	b.n	8007c0a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007c04:	2300      	movs	r3, #0
 8007c06:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007c08:	693b      	ldr	r3, [r7, #16]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	371c      	adds	r7, #28
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
	...

08007c18 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	6078      	str	r0, [r7, #4]
 8007c20:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2200      	movs	r2, #0
 8007c26:	70da      	strb	r2, [r3, #3]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c2e:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f7fe fad0 	bl	80061d8 <move_window>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d001      	beq.n	8007c42 <check_fs+0x2a>
 8007c3e:	2304      	movs	r3, #4
 8007c40:	e038      	b.n	8007cb4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	3334      	adds	r3, #52	; 0x34
 8007c46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe f814 	bl	8005c78 <ld_word>
 8007c50:	4603      	mov	r3, r0
 8007c52:	461a      	mov	r2, r3
 8007c54:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	d001      	beq.n	8007c60 <check_fs+0x48>
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e029      	b.n	8007cb4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c66:	2be9      	cmp	r3, #233	; 0xe9
 8007c68:	d009      	beq.n	8007c7e <check_fs+0x66>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c70:	2beb      	cmp	r3, #235	; 0xeb
 8007c72:	d11e      	bne.n	8007cb2 <check_fs+0x9a>
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007c7a:	2b90      	cmp	r3, #144	; 0x90
 8007c7c:	d119      	bne.n	8007cb2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	3334      	adds	r3, #52	; 0x34
 8007c82:	3336      	adds	r3, #54	; 0x36
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fe f80f 	bl	8005ca8 <ld_dword>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007c90:	4a0a      	ldr	r2, [pc, #40]	; (8007cbc <check_fs+0xa4>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d101      	bne.n	8007c9a <check_fs+0x82>
 8007c96:	2300      	movs	r3, #0
 8007c98:	e00c      	b.n	8007cb4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	3334      	adds	r3, #52	; 0x34
 8007c9e:	3352      	adds	r3, #82	; 0x52
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f7fe f801 	bl	8005ca8 <ld_dword>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <check_fs+0xa8>)
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d101      	bne.n	8007cb2 <check_fs+0x9a>
 8007cae:	2300      	movs	r3, #0
 8007cb0:	e000      	b.n	8007cb4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007cb2:	2302      	movs	r3, #2
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	00544146 	.word	0x00544146
 8007cc0:	33544146 	.word	0x33544146

08007cc4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b096      	sub	sp, #88	; 0x58
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	4613      	mov	r3, r2
 8007cd0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007cd8:	68f8      	ldr	r0, [r7, #12]
 8007cda:	f7ff ff58 	bl	8007b8e <get_ldnumber>
 8007cde:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ce0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	da01      	bge.n	8007cea <find_volume+0x26>
 8007ce6:	230b      	movs	r3, #11
 8007ce8:	e22e      	b.n	8008148 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007cea:	4aa8      	ldr	r2, [pc, #672]	; (8007f8c <find_volume+0x2c8>)
 8007cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cf2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d101      	bne.n	8007cfe <find_volume+0x3a>
 8007cfa:	230c      	movs	r3, #12
 8007cfc:	e224      	b.n	8008148 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007d02:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007d04:	79fb      	ldrb	r3, [r7, #7]
 8007d06:	f023 0301 	bic.w	r3, r3, #1
 8007d0a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d01a      	beq.n	8007d4a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d16:	785b      	ldrb	r3, [r3, #1]
 8007d18:	4618      	mov	r0, r3
 8007d1a:	f7fd ff0f 	bl	8005b3c <disk_status>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007d24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d28:	f003 0301 	and.w	r3, r3, #1
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d10c      	bne.n	8007d4a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007d30:	79fb      	ldrb	r3, [r7, #7]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d007      	beq.n	8007d46 <find_volume+0x82>
 8007d36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d3a:	f003 0304 	and.w	r3, r3, #4
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007d42:	230a      	movs	r3, #10
 8007d44:	e200      	b.n	8008148 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007d46:	2300      	movs	r3, #0
 8007d48:	e1fe      	b.n	8008148 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d56:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5a:	785b      	ldrb	r3, [r3, #1]
 8007d5c:	4618      	mov	r0, r3
 8007d5e:	f7fd ff07 	bl	8005b70 <disk_initialize>
 8007d62:	4603      	mov	r3, r0
 8007d64:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007d68:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d001      	beq.n	8007d78 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007d74:	2303      	movs	r3, #3
 8007d76:	e1e7      	b.n	8008148 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007d78:	79fb      	ldrb	r3, [r7, #7]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d007      	beq.n	8007d8e <find_volume+0xca>
 8007d7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007d82:	f003 0304 	and.w	r3, r3, #4
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d001      	beq.n	8007d8e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007d8a:	230a      	movs	r3, #10
 8007d8c:	e1dc      	b.n	8008148 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007d92:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007d96:	f7ff ff3f 	bl	8007c18 <check_fs>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007da0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d14b      	bne.n	8007e40 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007da8:	2300      	movs	r3, #0
 8007daa:	643b      	str	r3, [r7, #64]	; 0x40
 8007dac:	e01f      	b.n	8007dee <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007db4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db6:	011b      	lsls	r3, r3, #4
 8007db8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007dbc:	4413      	add	r3, r2
 8007dbe:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dc2:	3304      	adds	r3, #4
 8007dc4:	781b      	ldrb	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d006      	beq.n	8007dd8 <find_volume+0x114>
 8007dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dcc:	3308      	adds	r3, #8
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f7fd ff6a 	bl	8005ca8 <ld_dword>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	e000      	b.n	8007dda <find_volume+0x116>
 8007dd8:	2200      	movs	r2, #0
 8007dda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ddc:	009b      	lsls	r3, r3, #2
 8007dde:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007de2:	440b      	add	r3, r1
 8007de4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dea:	3301      	adds	r3, #1
 8007dec:	643b      	str	r3, [r7, #64]	; 0x40
 8007dee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007df0:	2b03      	cmp	r3, #3
 8007df2:	d9dc      	bls.n	8007dae <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007df4:	2300      	movs	r3, #0
 8007df6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <find_volume+0x140>
 8007dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e00:	3b01      	subs	r3, #1
 8007e02:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007e04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007e0c:	4413      	add	r3, r2
 8007e0e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007e12:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d005      	beq.n	8007e26 <find_volume+0x162>
 8007e1a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e1c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e1e:	f7ff fefb 	bl	8007c18 <check_fs>
 8007e22:	4603      	mov	r3, r0
 8007e24:	e000      	b.n	8007e28 <find_volume+0x164>
 8007e26:	2303      	movs	r3, #3
 8007e28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e30:	2b01      	cmp	r3, #1
 8007e32:	d905      	bls.n	8007e40 <find_volume+0x17c>
 8007e34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e36:	3301      	adds	r3, #1
 8007e38:	643b      	str	r3, [r7, #64]	; 0x40
 8007e3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d9e1      	bls.n	8007e04 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007e40:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	d101      	bne.n	8007e4c <find_volume+0x188>
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e17d      	b.n	8008148 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007e4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d901      	bls.n	8007e58 <find_volume+0x194>
 8007e54:	230d      	movs	r3, #13
 8007e56:	e177      	b.n	8008148 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5a:	3334      	adds	r3, #52	; 0x34
 8007e5c:	330b      	adds	r3, #11
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fd ff0a 	bl	8005c78 <ld_word>
 8007e64:	4603      	mov	r3, r0
 8007e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e6a:	d001      	beq.n	8007e70 <find_volume+0x1ac>
 8007e6c:	230d      	movs	r3, #13
 8007e6e:	e16b      	b.n	8008148 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e72:	3334      	adds	r3, #52	; 0x34
 8007e74:	3316      	adds	r3, #22
 8007e76:	4618      	mov	r0, r3
 8007e78:	f7fd fefe 	bl	8005c78 <ld_word>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007e80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d106      	bne.n	8007e94 <find_volume+0x1d0>
 8007e86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e88:	3334      	adds	r3, #52	; 0x34
 8007e8a:	3324      	adds	r3, #36	; 0x24
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fd ff0b 	bl	8005ca8 <ld_dword>
 8007e92:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e98:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e9c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea6:	789b      	ldrb	r3, [r3, #2]
 8007ea8:	2b01      	cmp	r3, #1
 8007eaa:	d005      	beq.n	8007eb8 <find_volume+0x1f4>
 8007eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eae:	789b      	ldrb	r3, [r3, #2]
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	d001      	beq.n	8007eb8 <find_volume+0x1f4>
 8007eb4:	230d      	movs	r3, #13
 8007eb6:	e147      	b.n	8008148 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007eba:	789b      	ldrb	r3, [r3, #2]
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ec0:	fb02 f303 	mul.w	r3, r2, r3
 8007ec4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ecc:	b29a      	uxth	r2, r3
 8007ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ed4:	895b      	ldrh	r3, [r3, #10]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d008      	beq.n	8007eec <find_volume+0x228>
 8007eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007edc:	895b      	ldrh	r3, [r3, #10]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ee2:	895b      	ldrh	r3, [r3, #10]
 8007ee4:	3b01      	subs	r3, #1
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d001      	beq.n	8007ef0 <find_volume+0x22c>
 8007eec:	230d      	movs	r3, #13
 8007eee:	e12b      	b.n	8008148 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ef2:	3334      	adds	r3, #52	; 0x34
 8007ef4:	3311      	adds	r3, #17
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f7fd febe 	bl	8005c78 <ld_word>
 8007efc:	4603      	mov	r3, r0
 8007efe:	461a      	mov	r2, r3
 8007f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f02:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	891b      	ldrh	r3, [r3, #8]
 8007f08:	f003 030f 	and.w	r3, r3, #15
 8007f0c:	b29b      	uxth	r3, r3
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d001      	beq.n	8007f16 <find_volume+0x252>
 8007f12:	230d      	movs	r3, #13
 8007f14:	e118      	b.n	8008148 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f18:	3334      	adds	r3, #52	; 0x34
 8007f1a:	3313      	adds	r3, #19
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fd feab 	bl	8005c78 <ld_word>
 8007f22:	4603      	mov	r3, r0
 8007f24:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007f26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d106      	bne.n	8007f3a <find_volume+0x276>
 8007f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f2e:	3334      	adds	r3, #52	; 0x34
 8007f30:	3320      	adds	r3, #32
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fd feb8 	bl	8005ca8 <ld_dword>
 8007f38:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	3334      	adds	r3, #52	; 0x34
 8007f3e:	330e      	adds	r3, #14
 8007f40:	4618      	mov	r0, r3
 8007f42:	f7fd fe99 	bl	8005c78 <ld_word>
 8007f46:	4603      	mov	r3, r0
 8007f48:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007f4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d101      	bne.n	8007f54 <find_volume+0x290>
 8007f50:	230d      	movs	r3, #13
 8007f52:	e0f9      	b.n	8008148 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007f54:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f58:	4413      	add	r3, r2
 8007f5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f5c:	8912      	ldrh	r2, [r2, #8]
 8007f5e:	0912      	lsrs	r2, r2, #4
 8007f60:	b292      	uxth	r2, r2
 8007f62:	4413      	add	r3, r2
 8007f64:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007f66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f6a:	429a      	cmp	r2, r3
 8007f6c:	d201      	bcs.n	8007f72 <find_volume+0x2ae>
 8007f6e:	230d      	movs	r3, #13
 8007f70:	e0ea      	b.n	8008148 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f7a:	8952      	ldrh	r2, [r2, #10]
 8007f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d103      	bne.n	8007f90 <find_volume+0x2cc>
 8007f88:	230d      	movs	r3, #13
 8007f8a:	e0dd      	b.n	8008148 <find_volume+0x484>
 8007f8c:	200002cc 	.word	0x200002cc
		fmt = FS_FAT32;
 8007f90:	2303      	movs	r3, #3
 8007f92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f98:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d802      	bhi.n	8007fa6 <find_volume+0x2e2>
 8007fa0:	2302      	movs	r3, #2
 8007fa2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007fac:	4293      	cmp	r3, r2
 8007fae:	d802      	bhi.n	8007fb6 <find_volume+0x2f2>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb8:	1c9a      	adds	r2, r3, #2
 8007fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fbc:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fc2:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007fc4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fc8:	441a      	add	r2, r3
 8007fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fcc:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007fce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd2:	441a      	add	r2, r3
 8007fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fd6:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8007fd8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d11e      	bne.n	800801e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe2:	3334      	adds	r3, #52	; 0x34
 8007fe4:	332a      	adds	r3, #42	; 0x2a
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fd fe46 	bl	8005c78 <ld_word>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <find_volume+0x332>
 8007ff2:	230d      	movs	r3, #13
 8007ff4:	e0a8      	b.n	8008148 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff8:	891b      	ldrh	r3, [r3, #8]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d001      	beq.n	8008002 <find_volume+0x33e>
 8007ffe:	230d      	movs	r3, #13
 8008000:	e0a2      	b.n	8008148 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8008002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008004:	3334      	adds	r3, #52	; 0x34
 8008006:	332c      	adds	r3, #44	; 0x2c
 8008008:	4618      	mov	r0, r3
 800800a:	f7fd fe4d 	bl	8005ca8 <ld_dword>
 800800e:	4602      	mov	r2, r0
 8008010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008012:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8008014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	009b      	lsls	r3, r3, #2
 800801a:	647b      	str	r3, [r7, #68]	; 0x44
 800801c:	e01f      	b.n	800805e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800801e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008020:	891b      	ldrh	r3, [r3, #8]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d101      	bne.n	800802a <find_volume+0x366>
 8008026:	230d      	movs	r3, #13
 8008028:	e08e      	b.n	8008148 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800802a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800802c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800802e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008030:	441a      	add	r2, r3
 8008032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008034:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008036:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800803a:	2b02      	cmp	r3, #2
 800803c:	d103      	bne.n	8008046 <find_volume+0x382>
 800803e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008040:	699b      	ldr	r3, [r3, #24]
 8008042:	005b      	lsls	r3, r3, #1
 8008044:	e00a      	b.n	800805c <find_volume+0x398>
 8008046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008048:	699a      	ldr	r2, [r3, #24]
 800804a:	4613      	mov	r3, r2
 800804c:	005b      	lsls	r3, r3, #1
 800804e:	4413      	add	r3, r2
 8008050:	085a      	lsrs	r2, r3, #1
 8008052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800805c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800805e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008060:	69da      	ldr	r2, [r3, #28]
 8008062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008064:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008068:	0a5b      	lsrs	r3, r3, #9
 800806a:	429a      	cmp	r2, r3
 800806c:	d201      	bcs.n	8008072 <find_volume+0x3ae>
 800806e:	230d      	movs	r3, #13
 8008070:	e06a      	b.n	8008148 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008074:	f04f 32ff 	mov.w	r2, #4294967295
 8008078:	615a      	str	r2, [r3, #20]
 800807a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800807c:	695a      	ldr	r2, [r3, #20]
 800807e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008080:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8008082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008084:	2280      	movs	r2, #128	; 0x80
 8008086:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008088:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800808c:	2b03      	cmp	r3, #3
 800808e:	d149      	bne.n	8008124 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008092:	3334      	adds	r3, #52	; 0x34
 8008094:	3330      	adds	r3, #48	; 0x30
 8008096:	4618      	mov	r0, r3
 8008098:	f7fd fdee 	bl	8005c78 <ld_word>
 800809c:	4603      	mov	r3, r0
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d140      	bne.n	8008124 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 80080a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080a4:	3301      	adds	r3, #1
 80080a6:	4619      	mov	r1, r3
 80080a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80080aa:	f7fe f895 	bl	80061d8 <move_window>
 80080ae:	4603      	mov	r3, r0
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d137      	bne.n	8008124 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 80080b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b6:	2200      	movs	r2, #0
 80080b8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80080ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080bc:	3334      	adds	r3, #52	; 0x34
 80080be:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fd fdd8 	bl	8005c78 <ld_word>
 80080c8:	4603      	mov	r3, r0
 80080ca:	461a      	mov	r2, r3
 80080cc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d127      	bne.n	8008124 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80080d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d6:	3334      	adds	r3, #52	; 0x34
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fd fde5 	bl	8005ca8 <ld_dword>
 80080de:	4602      	mov	r2, r0
 80080e0:	4b1b      	ldr	r3, [pc, #108]	; (8008150 <find_volume+0x48c>)
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d11e      	bne.n	8008124 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80080e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e8:	3334      	adds	r3, #52	; 0x34
 80080ea:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fd fdda 	bl	8005ca8 <ld_dword>
 80080f4:	4602      	mov	r2, r0
 80080f6:	4b17      	ldr	r3, [pc, #92]	; (8008154 <find_volume+0x490>)
 80080f8:	429a      	cmp	r2, r3
 80080fa:	d113      	bne.n	8008124 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80080fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080fe:	3334      	adds	r3, #52	; 0x34
 8008100:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8008104:	4618      	mov	r0, r3
 8008106:	f7fd fdcf 	bl	8005ca8 <ld_dword>
 800810a:	4602      	mov	r2, r0
 800810c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008112:	3334      	adds	r3, #52	; 0x34
 8008114:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8008118:	4618      	mov	r0, r3
 800811a:	f7fd fdc5 	bl	8005ca8 <ld_dword>
 800811e:	4602      	mov	r2, r0
 8008120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008122:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008126:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800812a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800812c:	4b0a      	ldr	r3, [pc, #40]	; (8008158 <find_volume+0x494>)
 800812e:	881b      	ldrh	r3, [r3, #0]
 8008130:	3301      	adds	r3, #1
 8008132:	b29a      	uxth	r2, r3
 8008134:	4b08      	ldr	r3, [pc, #32]	; (8008158 <find_volume+0x494>)
 8008136:	801a      	strh	r2, [r3, #0]
 8008138:	4b07      	ldr	r3, [pc, #28]	; (8008158 <find_volume+0x494>)
 800813a:	881a      	ldrh	r2, [r3, #0]
 800813c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8008140:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008142:	f7fd ffe1 	bl	8006108 <clear_lock>
#endif
	return FR_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3758      	adds	r7, #88	; 0x58
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}
 8008150:	41615252 	.word	0x41615252
 8008154:	61417272 	.word	0x61417272
 8008158:	200002d0 	.word	0x200002d0

0800815c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008166:	2309      	movs	r3, #9
 8008168:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d01c      	beq.n	80081aa <validate+0x4e>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d018      	beq.n	80081aa <validate+0x4e>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d013      	beq.n	80081aa <validate+0x4e>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	889a      	ldrh	r2, [r3, #4]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	88db      	ldrh	r3, [r3, #6]
 800818c:	429a      	cmp	r2, r3
 800818e:	d10c      	bne.n	80081aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	785b      	ldrb	r3, [r3, #1]
 8008196:	4618      	mov	r0, r3
 8008198:	f7fd fcd0 	bl	8005b3c <disk_status>
 800819c:	4603      	mov	r3, r0
 800819e:	f003 0301 	and.w	r3, r3, #1
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <validate+0x4e>
			res = FR_OK;
 80081a6:	2300      	movs	r3, #0
 80081a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80081aa:	7bfb      	ldrb	r3, [r7, #15]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <validate+0x5a>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	e000      	b.n	80081b8 <validate+0x5c>
 80081b6:	2300      	movs	r3, #0
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	6013      	str	r3, [r2, #0]
	return res;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
	...

080081c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b088      	sub	sp, #32
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	60f8      	str	r0, [r7, #12]
 80081d0:	60b9      	str	r1, [r7, #8]
 80081d2:	4613      	mov	r3, r2
 80081d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80081da:	f107 0310 	add.w	r3, r7, #16
 80081de:	4618      	mov	r0, r3
 80081e0:	f7ff fcd5 	bl	8007b8e <get_ldnumber>
 80081e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	da01      	bge.n	80081f0 <f_mount+0x28>
 80081ec:	230b      	movs	r3, #11
 80081ee:	e02b      	b.n	8008248 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80081f0:	4a17      	ldr	r2, [pc, #92]	; (8008250 <f_mount+0x88>)
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80081f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80081fa:	69bb      	ldr	r3, [r7, #24]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d005      	beq.n	800820c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008200:	69b8      	ldr	r0, [r7, #24]
 8008202:	f7fd ff81 	bl	8006108 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008206:	69bb      	ldr	r3, [r7, #24]
 8008208:	2200      	movs	r2, #0
 800820a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d002      	beq.n	8008218 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2200      	movs	r2, #0
 8008216:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008218:	68fa      	ldr	r2, [r7, #12]
 800821a:	490d      	ldr	r1, [pc, #52]	; (8008250 <f_mount+0x88>)
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d002      	beq.n	800822e <f_mount+0x66>
 8008228:	79fb      	ldrb	r3, [r7, #7]
 800822a:	2b01      	cmp	r3, #1
 800822c:	d001      	beq.n	8008232 <f_mount+0x6a>
 800822e:	2300      	movs	r3, #0
 8008230:	e00a      	b.n	8008248 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008232:	f107 010c 	add.w	r1, r7, #12
 8008236:	f107 0308 	add.w	r3, r7, #8
 800823a:	2200      	movs	r2, #0
 800823c:	4618      	mov	r0, r3
 800823e:	f7ff fd41 	bl	8007cc4 <find_volume>
 8008242:	4603      	mov	r3, r0
 8008244:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008246:	7dfb      	ldrb	r3, [r7, #23]
}
 8008248:	4618      	mov	r0, r3
 800824a:	3720      	adds	r7, #32
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}
 8008250:	200002cc 	.word	0x200002cc

08008254 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800825a:	af00      	add	r7, sp, #0
 800825c:	f107 030c 	add.w	r3, r7, #12
 8008260:	6018      	str	r0, [r3, #0]
 8008262:	f107 0308 	add.w	r3, r7, #8
 8008266:	6019      	str	r1, [r3, #0]
 8008268:	1dfb      	adds	r3, r7, #7
 800826a:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800826c:	f107 030c 	add.w	r3, r7, #12
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d101      	bne.n	800827a <f_open+0x26>
 8008276:	2309      	movs	r3, #9
 8008278:	e231      	b.n	80086de <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800827a:	1dfb      	adds	r3, r7, #7
 800827c:	1dfa      	adds	r2, r7, #7
 800827e:	7812      	ldrb	r2, [r2, #0]
 8008280:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008284:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8008286:	1dfb      	adds	r3, r7, #7
 8008288:	781a      	ldrb	r2, [r3, #0]
 800828a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800828e:	f107 0308 	add.w	r3, r7, #8
 8008292:	4618      	mov	r0, r3
 8008294:	f7ff fd16 	bl	8007cc4 <find_volume>
 8008298:	4603      	mov	r3, r0
 800829a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800829e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	f040 8210 	bne.w	80086c8 <f_open+0x474>
		dj.obj.fs = fs;
 80082a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80082ac:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 80082b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80082b4:	f107 0214 	add.w	r2, r7, #20
 80082b8:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 80082ba:	f107 0308 	add.w	r3, r7, #8
 80082be:	681a      	ldr	r2, [r3, #0]
 80082c0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80082c4:	4611      	mov	r1, r2
 80082c6:	4618      	mov	r0, r3
 80082c8:	f7ff fbf0 	bl	8007aac <follow_path>
 80082cc:	4603      	mov	r3, r0
 80082ce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80082d2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d11b      	bne.n	8008312 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80082da:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 80082de:	b25b      	sxtb	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	da03      	bge.n	80082ec <f_open+0x98>
				res = FR_INVALID_NAME;
 80082e4:	2306      	movs	r3, #6
 80082e6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80082ea:	e012      	b.n	8008312 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80082ec:	1dfb      	adds	r3, r7, #7
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	f023 0301 	bic.w	r3, r3, #1
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	bf14      	ite	ne
 80082f8:	2301      	movne	r3, #1
 80082fa:	2300      	moveq	r3, #0
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	461a      	mov	r2, r3
 8008300:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008304:	4611      	mov	r1, r2
 8008306:	4618      	mov	r0, r3
 8008308:	f7fd fdb6 	bl	8005e78 <chk_lock>
 800830c:	4603      	mov	r3, r0
 800830e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008312:	1dfb      	adds	r3, r7, #7
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	f003 031c 	and.w	r3, r3, #28
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 809b 	beq.w	8008456 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8008320:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008324:	2b00      	cmp	r3, #0
 8008326:	d019      	beq.n	800835c <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008328:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800832c:	2b04      	cmp	r3, #4
 800832e:	d10e      	bne.n	800834e <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008330:	f7fd fdfe 	bl	8005f30 <enq_lock>
 8008334:	4603      	mov	r3, r0
 8008336:	2b00      	cmp	r3, #0
 8008338:	d006      	beq.n	8008348 <f_open+0xf4>
 800833a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800833e:	4618      	mov	r0, r3
 8008340:	f7fe ffdc 	bl	80072fc <dir_register>
 8008344:	4603      	mov	r3, r0
 8008346:	e000      	b.n	800834a <f_open+0xf6>
 8008348:	2312      	movs	r3, #18
 800834a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800834e:	1dfb      	adds	r3, r7, #7
 8008350:	1dfa      	adds	r2, r7, #7
 8008352:	7812      	ldrb	r2, [r2, #0]
 8008354:	f042 0208 	orr.w	r2, r2, #8
 8008358:	701a      	strb	r2, [r3, #0]
 800835a:	e012      	b.n	8008382 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800835c:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008360:	f003 0311 	and.w	r3, r3, #17
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <f_open+0x11c>
					res = FR_DENIED;
 8008368:	2307      	movs	r3, #7
 800836a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800836e:	e008      	b.n	8008382 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008370:	1dfb      	adds	r3, r7, #7
 8008372:	781b      	ldrb	r3, [r3, #0]
 8008374:	f003 0304 	and.w	r3, r3, #4
 8008378:	2b00      	cmp	r3, #0
 800837a:	d002      	beq.n	8008382 <f_open+0x12e>
 800837c:	2308      	movs	r3, #8
 800837e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008382:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008386:	2b00      	cmp	r3, #0
 8008388:	f040 8082 	bne.w	8008490 <f_open+0x23c>
 800838c:	1dfb      	adds	r3, r7, #7
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	f003 0308 	and.w	r3, r3, #8
 8008394:	2b00      	cmp	r3, #0
 8008396:	d07b      	beq.n	8008490 <f_open+0x23c>
				dw = GET_FATTIME();
 8008398:	f7fd fa56 	bl	8005848 <get_fattime>
 800839c:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80083a0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80083a4:	330e      	adds	r3, #14
 80083a6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80083aa:	4618      	mov	r0, r3
 80083ac:	f7fd fcba 	bl	8005d24 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80083b0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80083b4:	3316      	adds	r3, #22
 80083b6:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80083ba:	4618      	mov	r0, r3
 80083bc:	f7fd fcb2 	bl	8005d24 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80083c0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80083c4:	330b      	adds	r3, #11
 80083c6:	2220      	movs	r2, #32
 80083c8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80083ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80083ce:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80083d2:	4611      	mov	r1, r2
 80083d4:	4618      	mov	r0, r3
 80083d6:	f7fe fbfe 	bl	8006bd6 <ld_clust>
 80083da:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80083de:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80083e2:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 80083e6:	2200      	movs	r2, #0
 80083e8:	4618      	mov	r0, r3
 80083ea:	f7fe fc13 	bl	8006c14 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80083ee:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80083f2:	331c      	adds	r3, #28
 80083f4:	2100      	movs	r1, #0
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fd fc94 	bl	8005d24 <st_dword>
					fs->wflag = 1;
 80083fc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008400:	2201      	movs	r2, #1
 8008402:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008404:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8008408:	2b00      	cmp	r3, #0
 800840a:	d041      	beq.n	8008490 <f_open+0x23c>
						dw = fs->winsect;
 800840c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008412:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8008416:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800841a:	2200      	movs	r2, #0
 800841c:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8008420:	4618      	mov	r0, r3
 8008422:	f7fe f920 	bl	8006666 <remove_chain>
 8008426:	4603      	mov	r3, r0
 8008428:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800842c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008430:	2b00      	cmp	r3, #0
 8008432:	d12d      	bne.n	8008490 <f_open+0x23c>
							res = move_window(fs, dw);
 8008434:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008438:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800843c:	4618      	mov	r0, r3
 800843e:	f7fd fecb 	bl	80061d8 <move_window>
 8008442:	4603      	mov	r3, r0
 8008444:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008448:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800844c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8008450:	3a01      	subs	r2, #1
 8008452:	611a      	str	r2, [r3, #16]
 8008454:	e01c      	b.n	8008490 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008456:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800845a:	2b00      	cmp	r3, #0
 800845c:	d118      	bne.n	8008490 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800845e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008462:	f003 0310 	and.w	r3, r3, #16
 8008466:	2b00      	cmp	r3, #0
 8008468:	d003      	beq.n	8008472 <f_open+0x21e>
					res = FR_NO_FILE;
 800846a:	2304      	movs	r3, #4
 800846c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008470:	e00e      	b.n	8008490 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008472:	1dfb      	adds	r3, r7, #7
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d008      	beq.n	8008490 <f_open+0x23c>
 800847e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8008482:	f003 0301 	and.w	r3, r3, #1
 8008486:	2b00      	cmp	r3, #0
 8008488:	d002      	beq.n	8008490 <f_open+0x23c>
						res = FR_DENIED;
 800848a:	2307      	movs	r3, #7
 800848c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8008490:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008494:	2b00      	cmp	r3, #0
 8008496:	d136      	bne.n	8008506 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008498:	1dfb      	adds	r3, r7, #7
 800849a:	781b      	ldrb	r3, [r3, #0]
 800849c:	f003 0308 	and.w	r3, r3, #8
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <f_open+0x25c>
				mode |= FA_MODIFIED;
 80084a4:	1dfb      	adds	r3, r7, #7
 80084a6:	1dfa      	adds	r2, r7, #7
 80084a8:	7812      	ldrb	r2, [r2, #0]
 80084aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084ae:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80084b0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80084b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084b6:	f107 030c 	add.w	r3, r7, #12
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80084be:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80084c2:	f107 030c 	add.w	r3, r7, #12
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80084ca:	1dfb      	adds	r3, r7, #7
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	f023 0301 	bic.w	r3, r3, #1
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	bf14      	ite	ne
 80084d6:	2301      	movne	r3, #1
 80084d8:	2300      	moveq	r3, #0
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	461a      	mov	r2, r3
 80084de:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80084e2:	4611      	mov	r1, r2
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fd fd45 	bl	8005f74 <inc_lock>
 80084ea:	4602      	mov	r2, r0
 80084ec:	f107 030c 	add.w	r3, r7, #12
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80084f4:	f107 030c 	add.w	r3, r7, #12
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	691b      	ldr	r3, [r3, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d102      	bne.n	8008506 <f_open+0x2b2>
 8008500:	2302      	movs	r3, #2
 8008502:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008506:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800850a:	2b00      	cmp	r3, #0
 800850c:	f040 80dc 	bne.w	80086c8 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008510:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008514:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8008518:	4611      	mov	r1, r2
 800851a:	4618      	mov	r0, r3
 800851c:	f7fe fb5b 	bl	8006bd6 <ld_clust>
 8008520:	4602      	mov	r2, r0
 8008522:	f107 030c 	add.w	r3, r7, #12
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800852a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800852e:	331c      	adds	r3, #28
 8008530:	4618      	mov	r0, r3
 8008532:	f7fd fbb9 	bl	8005ca8 <ld_dword>
 8008536:	4602      	mov	r2, r0
 8008538:	f107 030c 	add.w	r3, r7, #12
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008540:	f107 030c 	add.w	r3, r7, #12
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2200      	movs	r2, #0
 8008548:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800854a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800854e:	f107 030c 	add.w	r3, r7, #12
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008556:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800855a:	88da      	ldrh	r2, [r3, #6]
 800855c:	f107 030c 	add.w	r3, r7, #12
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008564:	f107 030c 	add.w	r3, r7, #12
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	1dfa      	adds	r2, r7, #7
 800856c:	7812      	ldrb	r2, [r2, #0]
 800856e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008570:	f107 030c 	add.w	r3, r7, #12
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2200      	movs	r2, #0
 8008578:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800857a:	f107 030c 	add.w	r3, r7, #12
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2200      	movs	r2, #0
 8008582:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008584:	f107 030c 	add.w	r3, r7, #12
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2200      	movs	r2, #0
 800858c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800858e:	f107 030c 	add.w	r3, r7, #12
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3330      	adds	r3, #48	; 0x30
 8008596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800859a:	2100      	movs	r1, #0
 800859c:	4618      	mov	r0, r3
 800859e:	f7fd fc0e 	bl	8005dbe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80085a2:	1dfb      	adds	r3, r7, #7
 80085a4:	781b      	ldrb	r3, [r3, #0]
 80085a6:	f003 0320 	and.w	r3, r3, #32
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 808c 	beq.w	80086c8 <f_open+0x474>
 80085b0:	f107 030c 	add.w	r3, r7, #12
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	f000 8085 	beq.w	80086c8 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80085be:	f107 030c 	add.w	r3, r7, #12
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	68da      	ldr	r2, [r3, #12]
 80085c6:	f107 030c 	add.w	r3, r7, #12
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80085ce:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80085d2:	895b      	ldrh	r3, [r3, #10]
 80085d4:	025b      	lsls	r3, r3, #9
 80085d6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80085da:	f107 030c 	add.w	r3, r7, #12
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	689b      	ldr	r3, [r3, #8]
 80085e2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80085e6:	f107 030c 	add.w	r3, r7, #12
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68db      	ldr	r3, [r3, #12]
 80085ee:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80085f2:	e01f      	b.n	8008634 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 80085f4:	f107 030c 	add.w	r3, r7, #12
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fd fea5 	bl	800634e <get_fat>
 8008604:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8008608:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800860c:	2b01      	cmp	r3, #1
 800860e:	d802      	bhi.n	8008616 <f_open+0x3c2>
 8008610:	2302      	movs	r3, #2
 8008612:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008616:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800861a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800861e:	d102      	bne.n	8008626 <f_open+0x3d2>
 8008620:	2301      	movs	r3, #1
 8008622:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008626:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800862a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800862e:	1ad3      	subs	r3, r2, r3
 8008630:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8008634:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008638:	2b00      	cmp	r3, #0
 800863a:	d105      	bne.n	8008648 <f_open+0x3f4>
 800863c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8008640:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8008644:	429a      	cmp	r2, r3
 8008646:	d8d5      	bhi.n	80085f4 <f_open+0x3a0>
				}
				fp->clust = clst;
 8008648:	f107 030c 	add.w	r3, r7, #12
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8008652:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008654:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008658:	2b00      	cmp	r3, #0
 800865a:	d135      	bne.n	80086c8 <f_open+0x474>
 800865c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8008660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008664:	2b00      	cmp	r3, #0
 8008666:	d02f      	beq.n	80086c8 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008668:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800866c:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8008670:	4618      	mov	r0, r3
 8008672:	f7fd fe4d 	bl	8006310 <clust2sect>
 8008676:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 800867a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800867e:	2b00      	cmp	r3, #0
 8008680:	d103      	bne.n	800868a <f_open+0x436>
						res = FR_INT_ERR;
 8008682:	2302      	movs	r3, #2
 8008684:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008688:	e01e      	b.n	80086c8 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800868a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800868e:	0a5a      	lsrs	r2, r3, #9
 8008690:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008694:	441a      	add	r2, r3
 8008696:	f107 030c 	add.w	r3, r7, #12
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800869e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80086a2:	7858      	ldrb	r0, [r3, #1]
 80086a4:	f107 030c 	add.w	r3, r7, #12
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80086ae:	f107 030c 	add.w	r3, r7, #12
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	6a1a      	ldr	r2, [r3, #32]
 80086b6:	2301      	movs	r3, #1
 80086b8:	f7fd fa80 	bl	8005bbc <disk_read>
 80086bc:	4603      	mov	r3, r0
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d002      	beq.n	80086c8 <f_open+0x474>
 80086c2:	2301      	movs	r3, #1
 80086c4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80086c8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d004      	beq.n	80086da <f_open+0x486>
 80086d0:	f107 030c 	add.w	r3, r7, #12
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2200      	movs	r2, #0
 80086d8:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80086da:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 80086de:	4618      	mov	r0, r3
 80086e0:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b08c      	sub	sp, #48	; 0x30
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	60f8      	str	r0, [r7, #12]
 80086f0:	60b9      	str	r1, [r7, #8]
 80086f2:	607a      	str	r2, [r7, #4]
 80086f4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2200      	movs	r2, #0
 80086fe:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	f107 0210 	add.w	r2, r7, #16
 8008706:	4611      	mov	r1, r2
 8008708:	4618      	mov	r0, r3
 800870a:	f7ff fd27 	bl	800815c <validate>
 800870e:	4603      	mov	r3, r0
 8008710:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008714:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008718:	2b00      	cmp	r3, #0
 800871a:	d107      	bne.n	800872c <f_write+0x44>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	7d5b      	ldrb	r3, [r3, #21]
 8008720:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008728:	2b00      	cmp	r3, #0
 800872a:	d002      	beq.n	8008732 <f_write+0x4a>
 800872c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008730:	e14b      	b.n	80089ca <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	7d1b      	ldrb	r3, [r3, #20]
 8008736:	f003 0302 	and.w	r3, r3, #2
 800873a:	2b00      	cmp	r3, #0
 800873c:	d101      	bne.n	8008742 <f_write+0x5a>
 800873e:	2307      	movs	r3, #7
 8008740:	e143      	b.n	80089ca <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	699a      	ldr	r2, [r3, #24]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	441a      	add	r2, r3
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	699b      	ldr	r3, [r3, #24]
 800874e:	429a      	cmp	r2, r3
 8008750:	f080 812d 	bcs.w	80089ae <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	43db      	mvns	r3, r3
 800875a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800875c:	e127      	b.n	80089ae <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008766:	2b00      	cmp	r3, #0
 8008768:	f040 80e3 	bne.w	8008932 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	699b      	ldr	r3, [r3, #24]
 8008770:	0a5b      	lsrs	r3, r3, #9
 8008772:	693a      	ldr	r2, [r7, #16]
 8008774:	8952      	ldrh	r2, [r2, #10]
 8008776:	3a01      	subs	r2, #1
 8008778:	4013      	ands	r3, r2
 800877a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d143      	bne.n	800880a <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	699b      	ldr	r3, [r3, #24]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d10c      	bne.n	80087a4 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008792:	2b00      	cmp	r3, #0
 8008794:	d11a      	bne.n	80087cc <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2100      	movs	r1, #0
 800879a:	4618      	mov	r0, r3
 800879c:	f7fd ffc8 	bl	8006730 <create_chain>
 80087a0:	62b8      	str	r0, [r7, #40]	; 0x28
 80087a2:	e013      	b.n	80087cc <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d007      	beq.n	80087bc <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	699b      	ldr	r3, [r3, #24]
 80087b0:	4619      	mov	r1, r3
 80087b2:	68f8      	ldr	r0, [r7, #12]
 80087b4:	f7fe f854 	bl	8006860 <clmt_clust>
 80087b8:	62b8      	str	r0, [r7, #40]	; 0x28
 80087ba:	e007      	b.n	80087cc <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80087bc:	68fa      	ldr	r2, [r7, #12]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	4619      	mov	r1, r3
 80087c4:	4610      	mov	r0, r2
 80087c6:	f7fd ffb3 	bl	8006730 <create_chain>
 80087ca:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80087cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	f000 80f2 	beq.w	80089b8 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80087d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d104      	bne.n	80087e4 <f_write+0xfc>
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2202      	movs	r2, #2
 80087de:	755a      	strb	r2, [r3, #21]
 80087e0:	2302      	movs	r3, #2
 80087e2:	e0f2      	b.n	80089ca <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80087e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ea:	d104      	bne.n	80087f6 <f_write+0x10e>
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2201      	movs	r2, #1
 80087f0:	755a      	strb	r2, [r3, #21]
 80087f2:	2301      	movs	r3, #1
 80087f4:	e0e9      	b.n	80089ca <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80087fa:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d102      	bne.n	800880a <f_write+0x122>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008808:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	7d1b      	ldrb	r3, [r3, #20]
 800880e:	b25b      	sxtb	r3, r3
 8008810:	2b00      	cmp	r3, #0
 8008812:	da18      	bge.n	8008846 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	7858      	ldrb	r0, [r3, #1]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	6a1a      	ldr	r2, [r3, #32]
 8008822:	2301      	movs	r3, #1
 8008824:	f7fd f9ea 	bl	8005bfc <disk_write>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d004      	beq.n	8008838 <f_write+0x150>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	755a      	strb	r2, [r3, #21]
 8008834:	2301      	movs	r3, #1
 8008836:	e0c8      	b.n	80089ca <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	7d1b      	ldrb	r3, [r3, #20]
 800883c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008840:	b2da      	uxtb	r2, r3
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008846:	693a      	ldr	r2, [r7, #16]
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	69db      	ldr	r3, [r3, #28]
 800884c:	4619      	mov	r1, r3
 800884e:	4610      	mov	r0, r2
 8008850:	f7fd fd5e 	bl	8006310 <clust2sect>
 8008854:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008856:	697b      	ldr	r3, [r7, #20]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d104      	bne.n	8008866 <f_write+0x17e>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	2202      	movs	r2, #2
 8008860:	755a      	strb	r2, [r3, #21]
 8008862:	2302      	movs	r3, #2
 8008864:	e0b1      	b.n	80089ca <f_write+0x2e2>
			sect += csect;
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	69bb      	ldr	r3, [r7, #24]
 800886a:	4413      	add	r3, r2
 800886c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	0a5b      	lsrs	r3, r3, #9
 8008872:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d03c      	beq.n	80088f4 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	4413      	add	r3, r2
 8008880:	693a      	ldr	r2, [r7, #16]
 8008882:	8952      	ldrh	r2, [r2, #10]
 8008884:	4293      	cmp	r3, r2
 8008886:	d905      	bls.n	8008894 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008888:	693b      	ldr	r3, [r7, #16]
 800888a:	895b      	ldrh	r3, [r3, #10]
 800888c:	461a      	mov	r2, r3
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	1ad3      	subs	r3, r2, r3
 8008892:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	7858      	ldrb	r0, [r3, #1]
 8008898:	6a3b      	ldr	r3, [r7, #32]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	69f9      	ldr	r1, [r7, #28]
 800889e:	f7fd f9ad 	bl	8005bfc <disk_write>
 80088a2:	4603      	mov	r3, r0
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d004      	beq.n	80088b2 <f_write+0x1ca>
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2201      	movs	r2, #1
 80088ac:	755a      	strb	r2, [r3, #21]
 80088ae:	2301      	movs	r3, #1
 80088b0:	e08b      	b.n	80089ca <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	6a1a      	ldr	r2, [r3, #32]
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	1ad3      	subs	r3, r2, r3
 80088ba:	6a3a      	ldr	r2, [r7, #32]
 80088bc:	429a      	cmp	r2, r3
 80088be:	d915      	bls.n	80088ec <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	6a1a      	ldr	r2, [r3, #32]
 80088ca:	697b      	ldr	r3, [r7, #20]
 80088cc:	1ad3      	subs	r3, r2, r3
 80088ce:	025b      	lsls	r3, r3, #9
 80088d0:	69fa      	ldr	r2, [r7, #28]
 80088d2:	4413      	add	r3, r2
 80088d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80088d8:	4619      	mov	r1, r3
 80088da:	f7fd fa4f 	bl	8005d7c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	7d1b      	ldrb	r3, [r3, #20]
 80088e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e6:	b2da      	uxtb	r2, r3
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80088ec:	6a3b      	ldr	r3, [r7, #32]
 80088ee:	025b      	lsls	r3, r3, #9
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80088f2:	e03f      	b.n	8008974 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	6a1b      	ldr	r3, [r3, #32]
 80088f8:	697a      	ldr	r2, [r7, #20]
 80088fa:	429a      	cmp	r2, r3
 80088fc:	d016      	beq.n	800892c <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	699a      	ldr	r2, [r3, #24]
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008906:	429a      	cmp	r2, r3
 8008908:	d210      	bcs.n	800892c <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	7858      	ldrb	r0, [r3, #1]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008914:	2301      	movs	r3, #1
 8008916:	697a      	ldr	r2, [r7, #20]
 8008918:	f7fd f950 	bl	8005bbc <disk_read>
 800891c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800891e:	2b00      	cmp	r3, #0
 8008920:	d004      	beq.n	800892c <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2201      	movs	r2, #1
 8008926:	755a      	strb	r2, [r3, #21]
 8008928:	2301      	movs	r3, #1
 800892a:	e04e      	b.n	80089ca <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	697a      	ldr	r2, [r7, #20]
 8008930:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800893a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800893e:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	429a      	cmp	r2, r3
 8008946:	d901      	bls.n	800894c <f_write+0x264>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800895a:	4413      	add	r3, r2
 800895c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800895e:	69f9      	ldr	r1, [r7, #28]
 8008960:	4618      	mov	r0, r3
 8008962:	f7fd fa0b 	bl	8005d7c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	7d1b      	ldrb	r3, [r3, #20]
 800896a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800896e:	b2da      	uxtb	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008974:	69fa      	ldr	r2, [r7, #28]
 8008976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008978:	4413      	add	r3, r2
 800897a:	61fb      	str	r3, [r7, #28]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	699a      	ldr	r2, [r3, #24]
 8008980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008982:	441a      	add	r2, r3
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	619a      	str	r2, [r3, #24]
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	699b      	ldr	r3, [r3, #24]
 8008990:	429a      	cmp	r2, r3
 8008992:	bf38      	it	cc
 8008994:	461a      	movcc	r2, r3
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	60da      	str	r2, [r3, #12]
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	681a      	ldr	r2, [r3, #0]
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	441a      	add	r2, r3
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089aa:	1ad3      	subs	r3, r2, r3
 80089ac:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	f47f aed4 	bne.w	800875e <f_write+0x76>
 80089b6:	e000      	b.n	80089ba <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80089b8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	7d1b      	ldrb	r3, [r3, #20]
 80089be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c2:	b2da      	uxtb	r2, r3
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80089c8:	2300      	movs	r3, #0
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3730      	adds	r7, #48	; 0x30
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b086      	sub	sp, #24
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f107 0208 	add.w	r2, r7, #8
 80089e0:	4611      	mov	r1, r2
 80089e2:	4618      	mov	r0, r3
 80089e4:	f7ff fbba 	bl	800815c <validate>
 80089e8:	4603      	mov	r3, r0
 80089ea:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80089ec:	7dfb      	ldrb	r3, [r7, #23]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d168      	bne.n	8008ac4 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	7d1b      	ldrb	r3, [r3, #20]
 80089f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d062      	beq.n	8008ac4 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	7d1b      	ldrb	r3, [r3, #20]
 8008a02:	b25b      	sxtb	r3, r3
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	da15      	bge.n	8008a34 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	7858      	ldrb	r0, [r3, #1]
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a1a      	ldr	r2, [r3, #32]
 8008a16:	2301      	movs	r3, #1
 8008a18:	f7fd f8f0 	bl	8005bfc <disk_write>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <f_sync+0x54>
 8008a22:	2301      	movs	r3, #1
 8008a24:	e04f      	b.n	8008ac6 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	7d1b      	ldrb	r3, [r3, #20]
 8008a2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a2e:	b2da      	uxtb	r2, r3
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008a34:	f7fc ff08 	bl	8005848 <get_fattime>
 8008a38:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008a3a:	68ba      	ldr	r2, [r7, #8]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a40:	4619      	mov	r1, r3
 8008a42:	4610      	mov	r0, r2
 8008a44:	f7fd fbc8 	bl	80061d8 <move_window>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008a4c:	7dfb      	ldrb	r3, [r7, #23]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d138      	bne.n	8008ac4 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a56:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	330b      	adds	r3, #11
 8008a5c:	781a      	ldrb	r2, [r3, #0]
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	330b      	adds	r3, #11
 8008a62:	f042 0220 	orr.w	r2, r2, #32
 8008a66:	b2d2      	uxtb	r2, r2
 8008a68:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6818      	ldr	r0, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	689b      	ldr	r3, [r3, #8]
 8008a72:	461a      	mov	r2, r3
 8008a74:	68f9      	ldr	r1, [r7, #12]
 8008a76:	f7fe f8cd 	bl	8006c14 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	f103 021c 	add.w	r2, r3, #28
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	4619      	mov	r1, r3
 8008a86:	4610      	mov	r0, r2
 8008a88:	f7fd f94c 	bl	8005d24 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	3316      	adds	r3, #22
 8008a90:	6939      	ldr	r1, [r7, #16]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f7fd f946 	bl	8005d24 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	3312      	adds	r3, #18
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fd f925 	bl	8005cee <st_word>
					fs->wflag = 1;
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	2201      	movs	r2, #1
 8008aa8:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008aaa:	68bb      	ldr	r3, [r7, #8]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f7fd fbc1 	bl	8006234 <sync_fs>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	7d1b      	ldrb	r3, [r3, #20]
 8008aba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	3718      	adds	r7, #24
 8008aca:	46bd      	mov	sp, r7
 8008acc:	bd80      	pop	{r7, pc}

08008ace <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008ace:	b580      	push	{r7, lr}
 8008ad0:	b084      	sub	sp, #16
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7ff ff7b 	bl	80089d2 <f_sync>
 8008adc:	4603      	mov	r3, r0
 8008ade:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d118      	bne.n	8008b18 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f107 0208 	add.w	r2, r7, #8
 8008aec:	4611      	mov	r1, r2
 8008aee:	4618      	mov	r0, r3
 8008af0:	f7ff fb34 	bl	800815c <validate>
 8008af4:	4603      	mov	r3, r0
 8008af6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d10c      	bne.n	8008b18 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	691b      	ldr	r3, [r3, #16]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fd fac4 	bl	8006090 <dec_lock>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008b0c:	7bfb      	ldrb	r3, [r7, #15]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d102      	bne.n	8008b18 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3710      	adds	r7, #16
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}

08008b22 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008b22:	b580      	push	{r7, lr}
 8008b24:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	1d3b      	adds	r3, r7, #4
 8008b2c:	6018      	str	r0, [r3, #0]
 8008b2e:	463b      	mov	r3, r7
 8008b30:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008b32:	1d3b      	adds	r3, r7, #4
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d101      	bne.n	8008b3e <f_opendir+0x1c>
 8008b3a:	2309      	movs	r3, #9
 8008b3c:	e08a      	b.n	8008c54 <f_opendir+0x132>

	/* Get logical drive */
	obj = &dp->obj;
 8008b3e:	1d3b      	adds	r3, r7, #4
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 8008b46:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8008b4a:	463b      	mov	r3, r7
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f7ff f8b8 	bl	8007cc4 <find_volume>
 8008b54:	4603      	mov	r3, r0
 8008b56:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 8008b5a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d16e      	bne.n	8008c40 <f_opendir+0x11e>
		obj->fs = fs;
 8008b62:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8008b66:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008b6a:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8008b6c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008b70:	f107 020c 	add.w	r2, r7, #12
 8008b74:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008b76:	463b      	mov	r3, r7
 8008b78:	681a      	ldr	r2, [r3, #0]
 8008b7a:	1d3b      	adds	r3, r7, #4
 8008b7c:	4611      	mov	r1, r2
 8008b7e:	6818      	ldr	r0, [r3, #0]
 8008b80:	f7fe ff94 	bl	8007aac <follow_path>
 8008b84:	4603      	mov	r3, r0
 8008b86:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 8008b8a:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d14f      	bne.n	8008c32 <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008b92:	1d3b      	adds	r3, r7, #4
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008b9a:	b25b      	sxtb	r3, r3
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	db17      	blt.n	8008bd0 <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008ba0:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008ba4:	799b      	ldrb	r3, [r3, #6]
 8008ba6:	f003 0310 	and.w	r3, r3, #16
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00d      	beq.n	8008bca <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008bae:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8008bb2:	1d3b      	adds	r3, r7, #4
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6a1b      	ldr	r3, [r3, #32]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	4610      	mov	r0, r2
 8008bbc:	f7fe f80b 	bl	8006bd6 <ld_clust>
 8008bc0:	4602      	mov	r2, r0
 8008bc2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008bc6:	609a      	str	r2, [r3, #8]
 8008bc8:	e002      	b.n	8008bd0 <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008bca:	2305      	movs	r3, #5
 8008bcc:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 8008bd0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d12c      	bne.n	8008c32 <f_opendir+0x110>
				obj->id = fs->id;
 8008bd8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008bdc:	88da      	ldrh	r2, [r3, #6]
 8008bde:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008be2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008be4:	1d3b      	adds	r3, r7, #4
 8008be6:	2100      	movs	r1, #0
 8008be8:	6818      	ldr	r0, [r3, #0]
 8008bea:	f7fd fe6d 	bl	80068c8 <dir_sdi>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008bf4:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d11a      	bne.n	8008c32 <f_opendir+0x110>
					if (obj->sclust) {
 8008bfc:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d011      	beq.n	8008c2a <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008c06:	1d3b      	adds	r3, r7, #4
 8008c08:	2100      	movs	r1, #0
 8008c0a:	6818      	ldr	r0, [r3, #0]
 8008c0c:	f7fd f9b2 	bl	8005f74 <inc_lock>
 8008c10:	4602      	mov	r2, r0
 8008c12:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008c16:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008c18:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008c1c:	691b      	ldr	r3, [r3, #16]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d107      	bne.n	8008c32 <f_opendir+0x110>
 8008c22:	2312      	movs	r3, #18
 8008c24:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 8008c28:	e003      	b.n	8008c32 <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008c2a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008c2e:	2200      	movs	r2, #0
 8008c30:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008c32:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008c36:	2b04      	cmp	r3, #4
 8008c38:	d102      	bne.n	8008c40 <f_opendir+0x11e>
 8008c3a:	2305      	movs	r3, #5
 8008c3c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008c40:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d003      	beq.n	8008c50 <f_opendir+0x12e>
 8008c48:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008c50:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b084      	sub	sp, #16
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f107 0208 	add.w	r2, r7, #8
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff fa74 	bl	800815c <validate>
 8008c74:	4603      	mov	r3, r0
 8008c76:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008c78:	7bfb      	ldrb	r3, [r7, #15]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d110      	bne.n	8008ca0 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	691b      	ldr	r3, [r3, #16]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d006      	beq.n	8008c94 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	f7fd fa00 	bl	8006090 <dec_lock>
 8008c90:	4603      	mov	r3, r0
 8008c92:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d102      	bne.n	8008ca0 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3710      	adds	r7, #16
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	1d3b      	adds	r3, r7, #4
 8008cb4:	6018      	str	r0, [r3, #0]
 8008cb6:	463b      	mov	r3, r7
 8008cb8:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008cba:	1d3b      	adds	r3, r7, #4
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008cc2:	4611      	mov	r1, r2
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	f7ff fa49 	bl	800815c <validate>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 8008cd0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d139      	bne.n	8008d4c <f_readdir+0xa2>
		if (!fno) {
 8008cd8:	463b      	mov	r3, r7
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d108      	bne.n	8008cf2 <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008ce0:	1d3b      	adds	r3, r7, #4
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	f7fd fdef 	bl	80068c8 <dir_sdi>
 8008cea:	4603      	mov	r3, r0
 8008cec:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008cf0:	e02c      	b.n	8008d4c <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 8008cf2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008cf6:	f107 0208 	add.w	r2, r7, #8
 8008cfa:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8008cfc:	1d3b      	adds	r3, r7, #4
 8008cfe:	2100      	movs	r1, #0
 8008d00:	6818      	ldr	r0, [r3, #0]
 8008d02:	f7fe f993 	bl	800702c <dir_read>
 8008d06:	4603      	mov	r3, r0
 8008d08:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008d0c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008d10:	2b04      	cmp	r3, #4
 8008d12:	d102      	bne.n	8008d1a <f_readdir+0x70>
 8008d14:	2300      	movs	r3, #0
 8008d16:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8008d1a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d114      	bne.n	8008d4c <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008d22:	463a      	mov	r2, r7
 8008d24:	1d3b      	adds	r3, r7, #4
 8008d26:	6811      	ldr	r1, [r2, #0]
 8008d28:	6818      	ldr	r0, [r3, #0]
 8008d2a:	f7fe fc29 	bl	8007580 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008d2e:	1d3b      	adds	r3, r7, #4
 8008d30:	2100      	movs	r1, #0
 8008d32:	6818      	ldr	r0, [r3, #0]
 8008d34:	f7fd fe43 	bl	80069be <dir_next>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008d3e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008d42:	2b04      	cmp	r3, #4
 8008d44:	d102      	bne.n	8008d4c <f_readdir+0xa2>
 8008d46:	2300      	movs	r3, #0
 8008d48:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008d4c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 8008d50:	4618      	mov	r0, r3
 8008d52:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8008d56:	46bd      	mov	sp, r7
 8008d58:	bd80      	pop	{r7, pc}

08008d5a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008d5a:	b580      	push	{r7, lr}
 8008d5c:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	1d3b      	adds	r3, r7, #4
 8008d64:	6018      	str	r0, [r3, #0]
 8008d66:	463b      	mov	r3, r7
 8008d68:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008d6a:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8008d6e:	1d3b      	adds	r3, r7, #4
 8008d70:	2200      	movs	r2, #0
 8008d72:	4618      	mov	r0, r3
 8008d74:	f7fe ffa6 	bl	8007cc4 <find_volume>
 8008d78:	4603      	mov	r3, r0
 8008d7a:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 8008d7e:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d127      	bne.n	8008dd6 <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 8008d86:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008d8a:	f107 0208 	add.w	r2, r7, #8
 8008d8e:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008d90:	1d3b      	adds	r3, r7, #4
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008d98:	4611      	mov	r1, r2
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f7fe fe86 	bl	8007aac <follow_path>
 8008da0:	4603      	mov	r3, r0
 8008da2:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8008da6:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d113      	bne.n	8008dd6 <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008dae:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8008db2:	b25b      	sxtb	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	da03      	bge.n	8008dc0 <f_stat+0x66>
				res = FR_INVALID_NAME;
 8008db8:	2306      	movs	r3, #6
 8008dba:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8008dbe:	e00a      	b.n	8008dd6 <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008dc0:	463b      	mov	r3, r7
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d006      	beq.n	8008dd6 <f_stat+0x7c>
 8008dc8:	463b      	mov	r3, r7
 8008dca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008dce:	6819      	ldr	r1, [r3, #0]
 8008dd0:	4610      	mov	r0, r2
 8008dd2:	f7fe fbd5 	bl	8007580 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008dd6:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}

08008de4 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	1d3b      	adds	r3, r7, #4
 8008dee:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008df6:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8008dfa:	1d3b      	adds	r3, r7, #4
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe ff60 	bl	8007cc4 <find_volume>
 8008e04:	4603      	mov	r3, r0
 8008e06:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	dj.obj.fs = fs;
 8008e0a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008e0e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	if (res == FR_OK) {
 8008e12:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	f040 809e 	bne.w	8008f58 <f_unlink+0x174>
		INIT_NAMBUF(fs);
 8008e1c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008e20:	f107 020c 	add.w	r2, r7, #12
 8008e24:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8008e26:	1d3b      	adds	r3, r7, #4
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8008e2e:	4611      	mov	r1, r2
 8008e30:	4618      	mov	r0, r3
 8008e32:	f7fe fe3b 	bl	8007aac <follow_path>
 8008e36:	4603      	mov	r3, r0
 8008e38:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008e3c:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d108      	bne.n	8008e56 <f_unlink+0x72>
 8008e44:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8008e48:	2102      	movs	r1, #2
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	f7fd f814 	bl	8005e78 <chk_lock>
 8008e50:	4603      	mov	r3, r0
 8008e52:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008e56:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d17c      	bne.n	8008f58 <f_unlink+0x174>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008e5e:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 8008e62:	b25b      	sxtb	r3, r3
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	da03      	bge.n	8008e70 <f_unlink+0x8c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8008e68:	2306      	movs	r3, #6
 8008e6a:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 8008e6e:	e008      	b.n	8008e82 <f_unlink+0x9e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008e70:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8008e74:	f003 0301 	and.w	r3, r3, #1
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d002      	beq.n	8008e82 <f_unlink+0x9e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008e7c:	2307      	movs	r3, #7
 8008e7e:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				}
			}
			if (res == FR_OK) {
 8008e82:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d13b      	bne.n	8008f02 <f_unlink+0x11e>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8008e8a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008e8e:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008e92:	4611      	mov	r1, r2
 8008e94:	4618      	mov	r0, r3
 8008e96:	f7fd fe9e 	bl	8006bd6 <ld_clust>
 8008e9a:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8008e9e:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8008ea2:	f003 0310 	and.w	r3, r3, #16
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d02b      	beq.n	8008f02 <f_unlink+0x11e>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008eaa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008eae:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
						sdj.obj.sclust = dclst;
 8008eb2:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8008eb6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008eba:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f7fd fd01 	bl	80068c8 <dir_sdi>
 8008ec6:	4603      	mov	r3, r0
 8008ec8:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						if (res == FR_OK) {
 8008ecc:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d116      	bne.n	8008f02 <f_unlink+0x11e>
							res = dir_read(&sdj, 0);			/* Read an item */
 8008ed4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008ed8:	2100      	movs	r1, #0
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7fe f8a6 	bl	800702c <dir_read>
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008ee6:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d102      	bne.n	8008ef4 <f_unlink+0x110>
 8008eee:	2307      	movs	r3, #7
 8008ef0:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8008ef4:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d102      	bne.n	8008f02 <f_unlink+0x11e>
 8008efc:	2300      	movs	r3, #0
 8008efe:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						}
					}
				}
			}
			if (res == FR_OK) {
 8008f02:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d126      	bne.n	8008f58 <f_unlink+0x174>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008f0a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8008f0e:	4618      	mov	r0, r3
 8008f10:	f7fe faec 	bl	80074ec <dir_remove>
 8008f14:	4603      	mov	r3, r0
 8008f16:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008f1a:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d10e      	bne.n	8008f40 <f_unlink+0x15c>
 8008f22:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d00a      	beq.n	8008f40 <f_unlink+0x15c>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008f2a:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 8008f34:	4618      	mov	r0, r3
 8008f36:	f7fd fb96 	bl	8006666 <remove_chain>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008f40:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d107      	bne.n	8008f58 <f_unlink+0x174>
 8008f48:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7fd f971 	bl	8006234 <sync_fs>
 8008f52:	4603      	mov	r3, r0
 8008f54:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8008f58:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	f507 7720 	add.w	r7, r7, #640	; 0x280
 8008f62:	46bd      	mov	sp, r7
 8008f64:	bd80      	pop	{r7, pc}
	...

08008f68 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b087      	sub	sp, #28
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	60f8      	str	r0, [r7, #12]
 8008f70:	60b9      	str	r1, [r7, #8]
 8008f72:	4613      	mov	r3, r2
 8008f74:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008f76:	2301      	movs	r3, #1
 8008f78:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008f7e:	4b1f      	ldr	r3, [pc, #124]	; (8008ffc <FATFS_LinkDriverEx+0x94>)
 8008f80:	7a5b      	ldrb	r3, [r3, #9]
 8008f82:	b2db      	uxtb	r3, r3
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d131      	bne.n	8008fec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008f88:	4b1c      	ldr	r3, [pc, #112]	; (8008ffc <FATFS_LinkDriverEx+0x94>)
 8008f8a:	7a5b      	ldrb	r3, [r3, #9]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	461a      	mov	r2, r3
 8008f90:	4b1a      	ldr	r3, [pc, #104]	; (8008ffc <FATFS_LinkDriverEx+0x94>)
 8008f92:	2100      	movs	r1, #0
 8008f94:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008f96:	4b19      	ldr	r3, [pc, #100]	; (8008ffc <FATFS_LinkDriverEx+0x94>)
 8008f98:	7a5b      	ldrb	r3, [r3, #9]
 8008f9a:	b2db      	uxtb	r3, r3
 8008f9c:	4a17      	ldr	r2, [pc, #92]	; (8008ffc <FATFS_LinkDriverEx+0x94>)
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	68fa      	ldr	r2, [r7, #12]
 8008fa4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008fa6:	4b15      	ldr	r3, [pc, #84]	; (8008ffc <FATFS_LinkDriverEx+0x94>)
 8008fa8:	7a5b      	ldrb	r3, [r3, #9]
 8008faa:	b2db      	uxtb	r3, r3
 8008fac:	461a      	mov	r2, r3
 8008fae:	4b13      	ldr	r3, [pc, #76]	; (8008ffc <FATFS_LinkDriverEx+0x94>)
 8008fb0:	4413      	add	r3, r2
 8008fb2:	79fa      	ldrb	r2, [r7, #7]
 8008fb4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008fb6:	4b11      	ldr	r3, [pc, #68]	; (8008ffc <FATFS_LinkDriverEx+0x94>)
 8008fb8:	7a5b      	ldrb	r3, [r3, #9]
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	1c5a      	adds	r2, r3, #1
 8008fbe:	b2d1      	uxtb	r1, r2
 8008fc0:	4a0e      	ldr	r2, [pc, #56]	; (8008ffc <FATFS_LinkDriverEx+0x94>)
 8008fc2:	7251      	strb	r1, [r2, #9]
 8008fc4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008fc6:	7dbb      	ldrb	r3, [r7, #22]
 8008fc8:	3330      	adds	r3, #48	; 0x30
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	223a      	movs	r2, #58	; 0x3a
 8008fd6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	3302      	adds	r3, #2
 8008fdc:	222f      	movs	r2, #47	; 0x2f
 8008fde:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	3303      	adds	r3, #3
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008fec:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	371c      	adds	r7, #28
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	200002f4 	.word	0x200002f4

08009000 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
 8009008:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800900a:	2200      	movs	r2, #0
 800900c:	6839      	ldr	r1, [r7, #0]
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f7ff ffaa 	bl	8008f68 <FATFS_LinkDriverEx>
 8009014:	4603      	mov	r3, r0
}
 8009016:	4618      	mov	r0, r3
 8009018:	3708      	adds	r7, #8
 800901a:	46bd      	mov	sp, r7
 800901c:	bd80      	pop	{r7, pc}
	...

08009020 <__errno>:
 8009020:	4b01      	ldr	r3, [pc, #4]	; (8009028 <__errno+0x8>)
 8009022:	6818      	ldr	r0, [r3, #0]
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	2000000c 	.word	0x2000000c

0800902c <__libc_init_array>:
 800902c:	b570      	push	{r4, r5, r6, lr}
 800902e:	4e0d      	ldr	r6, [pc, #52]	; (8009064 <__libc_init_array+0x38>)
 8009030:	4c0d      	ldr	r4, [pc, #52]	; (8009068 <__libc_init_array+0x3c>)
 8009032:	1ba4      	subs	r4, r4, r6
 8009034:	10a4      	asrs	r4, r4, #2
 8009036:	2500      	movs	r5, #0
 8009038:	42a5      	cmp	r5, r4
 800903a:	d109      	bne.n	8009050 <__libc_init_array+0x24>
 800903c:	4e0b      	ldr	r6, [pc, #44]	; (800906c <__libc_init_array+0x40>)
 800903e:	4c0c      	ldr	r4, [pc, #48]	; (8009070 <__libc_init_array+0x44>)
 8009040:	f002 fdaa 	bl	800bb98 <_init>
 8009044:	1ba4      	subs	r4, r4, r6
 8009046:	10a4      	asrs	r4, r4, #2
 8009048:	2500      	movs	r5, #0
 800904a:	42a5      	cmp	r5, r4
 800904c:	d105      	bne.n	800905a <__libc_init_array+0x2e>
 800904e:	bd70      	pop	{r4, r5, r6, pc}
 8009050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009054:	4798      	blx	r3
 8009056:	3501      	adds	r5, #1
 8009058:	e7ee      	b.n	8009038 <__libc_init_array+0xc>
 800905a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800905e:	4798      	blx	r3
 8009060:	3501      	adds	r5, #1
 8009062:	e7f2      	b.n	800904a <__libc_init_array+0x1e>
 8009064:	08013aa0 	.word	0x08013aa0
 8009068:	08013aa0 	.word	0x08013aa0
 800906c:	08013aa0 	.word	0x08013aa0
 8009070:	08013aa4 	.word	0x08013aa4

08009074 <malloc>:
 8009074:	4b02      	ldr	r3, [pc, #8]	; (8009080 <malloc+0xc>)
 8009076:	4601      	mov	r1, r0
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	f000 b861 	b.w	8009140 <_malloc_r>
 800907e:	bf00      	nop
 8009080:	2000000c 	.word	0x2000000c

08009084 <free>:
 8009084:	4b02      	ldr	r3, [pc, #8]	; (8009090 <free+0xc>)
 8009086:	4601      	mov	r1, r0
 8009088:	6818      	ldr	r0, [r3, #0]
 800908a:	f000 b80b 	b.w	80090a4 <_free_r>
 800908e:	bf00      	nop
 8009090:	2000000c 	.word	0x2000000c

08009094 <memset>:
 8009094:	4402      	add	r2, r0
 8009096:	4603      	mov	r3, r0
 8009098:	4293      	cmp	r3, r2
 800909a:	d100      	bne.n	800909e <memset+0xa>
 800909c:	4770      	bx	lr
 800909e:	f803 1b01 	strb.w	r1, [r3], #1
 80090a2:	e7f9      	b.n	8009098 <memset+0x4>

080090a4 <_free_r>:
 80090a4:	b538      	push	{r3, r4, r5, lr}
 80090a6:	4605      	mov	r5, r0
 80090a8:	2900      	cmp	r1, #0
 80090aa:	d045      	beq.n	8009138 <_free_r+0x94>
 80090ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b0:	1f0c      	subs	r4, r1, #4
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	bfb8      	it	lt
 80090b6:	18e4      	addlt	r4, r4, r3
 80090b8:	f001 fedd 	bl	800ae76 <__malloc_lock>
 80090bc:	4a1f      	ldr	r2, [pc, #124]	; (800913c <_free_r+0x98>)
 80090be:	6813      	ldr	r3, [r2, #0]
 80090c0:	4610      	mov	r0, r2
 80090c2:	b933      	cbnz	r3, 80090d2 <_free_r+0x2e>
 80090c4:	6063      	str	r3, [r4, #4]
 80090c6:	6014      	str	r4, [r2, #0]
 80090c8:	4628      	mov	r0, r5
 80090ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090ce:	f001 bed3 	b.w	800ae78 <__malloc_unlock>
 80090d2:	42a3      	cmp	r3, r4
 80090d4:	d90c      	bls.n	80090f0 <_free_r+0x4c>
 80090d6:	6821      	ldr	r1, [r4, #0]
 80090d8:	1862      	adds	r2, r4, r1
 80090da:	4293      	cmp	r3, r2
 80090dc:	bf04      	itt	eq
 80090de:	681a      	ldreq	r2, [r3, #0]
 80090e0:	685b      	ldreq	r3, [r3, #4]
 80090e2:	6063      	str	r3, [r4, #4]
 80090e4:	bf04      	itt	eq
 80090e6:	1852      	addeq	r2, r2, r1
 80090e8:	6022      	streq	r2, [r4, #0]
 80090ea:	6004      	str	r4, [r0, #0]
 80090ec:	e7ec      	b.n	80090c8 <_free_r+0x24>
 80090ee:	4613      	mov	r3, r2
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	b10a      	cbz	r2, 80090f8 <_free_r+0x54>
 80090f4:	42a2      	cmp	r2, r4
 80090f6:	d9fa      	bls.n	80090ee <_free_r+0x4a>
 80090f8:	6819      	ldr	r1, [r3, #0]
 80090fa:	1858      	adds	r0, r3, r1
 80090fc:	42a0      	cmp	r0, r4
 80090fe:	d10b      	bne.n	8009118 <_free_r+0x74>
 8009100:	6820      	ldr	r0, [r4, #0]
 8009102:	4401      	add	r1, r0
 8009104:	1858      	adds	r0, r3, r1
 8009106:	4282      	cmp	r2, r0
 8009108:	6019      	str	r1, [r3, #0]
 800910a:	d1dd      	bne.n	80090c8 <_free_r+0x24>
 800910c:	6810      	ldr	r0, [r2, #0]
 800910e:	6852      	ldr	r2, [r2, #4]
 8009110:	605a      	str	r2, [r3, #4]
 8009112:	4401      	add	r1, r0
 8009114:	6019      	str	r1, [r3, #0]
 8009116:	e7d7      	b.n	80090c8 <_free_r+0x24>
 8009118:	d902      	bls.n	8009120 <_free_r+0x7c>
 800911a:	230c      	movs	r3, #12
 800911c:	602b      	str	r3, [r5, #0]
 800911e:	e7d3      	b.n	80090c8 <_free_r+0x24>
 8009120:	6820      	ldr	r0, [r4, #0]
 8009122:	1821      	adds	r1, r4, r0
 8009124:	428a      	cmp	r2, r1
 8009126:	bf04      	itt	eq
 8009128:	6811      	ldreq	r1, [r2, #0]
 800912a:	6852      	ldreq	r2, [r2, #4]
 800912c:	6062      	str	r2, [r4, #4]
 800912e:	bf04      	itt	eq
 8009130:	1809      	addeq	r1, r1, r0
 8009132:	6021      	streq	r1, [r4, #0]
 8009134:	605c      	str	r4, [r3, #4]
 8009136:	e7c7      	b.n	80090c8 <_free_r+0x24>
 8009138:	bd38      	pop	{r3, r4, r5, pc}
 800913a:	bf00      	nop
 800913c:	20000300 	.word	0x20000300

08009140 <_malloc_r>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	1ccd      	adds	r5, r1, #3
 8009144:	f025 0503 	bic.w	r5, r5, #3
 8009148:	3508      	adds	r5, #8
 800914a:	2d0c      	cmp	r5, #12
 800914c:	bf38      	it	cc
 800914e:	250c      	movcc	r5, #12
 8009150:	2d00      	cmp	r5, #0
 8009152:	4606      	mov	r6, r0
 8009154:	db01      	blt.n	800915a <_malloc_r+0x1a>
 8009156:	42a9      	cmp	r1, r5
 8009158:	d903      	bls.n	8009162 <_malloc_r+0x22>
 800915a:	230c      	movs	r3, #12
 800915c:	6033      	str	r3, [r6, #0]
 800915e:	2000      	movs	r0, #0
 8009160:	bd70      	pop	{r4, r5, r6, pc}
 8009162:	f001 fe88 	bl	800ae76 <__malloc_lock>
 8009166:	4a21      	ldr	r2, [pc, #132]	; (80091ec <_malloc_r+0xac>)
 8009168:	6814      	ldr	r4, [r2, #0]
 800916a:	4621      	mov	r1, r4
 800916c:	b991      	cbnz	r1, 8009194 <_malloc_r+0x54>
 800916e:	4c20      	ldr	r4, [pc, #128]	; (80091f0 <_malloc_r+0xb0>)
 8009170:	6823      	ldr	r3, [r4, #0]
 8009172:	b91b      	cbnz	r3, 800917c <_malloc_r+0x3c>
 8009174:	4630      	mov	r0, r6
 8009176:	f000 fd15 	bl	8009ba4 <_sbrk_r>
 800917a:	6020      	str	r0, [r4, #0]
 800917c:	4629      	mov	r1, r5
 800917e:	4630      	mov	r0, r6
 8009180:	f000 fd10 	bl	8009ba4 <_sbrk_r>
 8009184:	1c43      	adds	r3, r0, #1
 8009186:	d124      	bne.n	80091d2 <_malloc_r+0x92>
 8009188:	230c      	movs	r3, #12
 800918a:	6033      	str	r3, [r6, #0]
 800918c:	4630      	mov	r0, r6
 800918e:	f001 fe73 	bl	800ae78 <__malloc_unlock>
 8009192:	e7e4      	b.n	800915e <_malloc_r+0x1e>
 8009194:	680b      	ldr	r3, [r1, #0]
 8009196:	1b5b      	subs	r3, r3, r5
 8009198:	d418      	bmi.n	80091cc <_malloc_r+0x8c>
 800919a:	2b0b      	cmp	r3, #11
 800919c:	d90f      	bls.n	80091be <_malloc_r+0x7e>
 800919e:	600b      	str	r3, [r1, #0]
 80091a0:	50cd      	str	r5, [r1, r3]
 80091a2:	18cc      	adds	r4, r1, r3
 80091a4:	4630      	mov	r0, r6
 80091a6:	f001 fe67 	bl	800ae78 <__malloc_unlock>
 80091aa:	f104 000b 	add.w	r0, r4, #11
 80091ae:	1d23      	adds	r3, r4, #4
 80091b0:	f020 0007 	bic.w	r0, r0, #7
 80091b4:	1ac3      	subs	r3, r0, r3
 80091b6:	d0d3      	beq.n	8009160 <_malloc_r+0x20>
 80091b8:	425a      	negs	r2, r3
 80091ba:	50e2      	str	r2, [r4, r3]
 80091bc:	e7d0      	b.n	8009160 <_malloc_r+0x20>
 80091be:	428c      	cmp	r4, r1
 80091c0:	684b      	ldr	r3, [r1, #4]
 80091c2:	bf16      	itet	ne
 80091c4:	6063      	strne	r3, [r4, #4]
 80091c6:	6013      	streq	r3, [r2, #0]
 80091c8:	460c      	movne	r4, r1
 80091ca:	e7eb      	b.n	80091a4 <_malloc_r+0x64>
 80091cc:	460c      	mov	r4, r1
 80091ce:	6849      	ldr	r1, [r1, #4]
 80091d0:	e7cc      	b.n	800916c <_malloc_r+0x2c>
 80091d2:	1cc4      	adds	r4, r0, #3
 80091d4:	f024 0403 	bic.w	r4, r4, #3
 80091d8:	42a0      	cmp	r0, r4
 80091da:	d005      	beq.n	80091e8 <_malloc_r+0xa8>
 80091dc:	1a21      	subs	r1, r4, r0
 80091de:	4630      	mov	r0, r6
 80091e0:	f000 fce0 	bl	8009ba4 <_sbrk_r>
 80091e4:	3001      	adds	r0, #1
 80091e6:	d0cf      	beq.n	8009188 <_malloc_r+0x48>
 80091e8:	6025      	str	r5, [r4, #0]
 80091ea:	e7db      	b.n	80091a4 <_malloc_r+0x64>
 80091ec:	20000300 	.word	0x20000300
 80091f0:	20000304 	.word	0x20000304

080091f4 <__cvt>:
 80091f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091f8:	ec55 4b10 	vmov	r4, r5, d0
 80091fc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80091fe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009202:	2d00      	cmp	r5, #0
 8009204:	460e      	mov	r6, r1
 8009206:	4691      	mov	r9, r2
 8009208:	4619      	mov	r1, r3
 800920a:	bfb8      	it	lt
 800920c:	4622      	movlt	r2, r4
 800920e:	462b      	mov	r3, r5
 8009210:	f027 0720 	bic.w	r7, r7, #32
 8009214:	bfbb      	ittet	lt
 8009216:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800921a:	461d      	movlt	r5, r3
 800921c:	2300      	movge	r3, #0
 800921e:	232d      	movlt	r3, #45	; 0x2d
 8009220:	bfb8      	it	lt
 8009222:	4614      	movlt	r4, r2
 8009224:	2f46      	cmp	r7, #70	; 0x46
 8009226:	700b      	strb	r3, [r1, #0]
 8009228:	d004      	beq.n	8009234 <__cvt+0x40>
 800922a:	2f45      	cmp	r7, #69	; 0x45
 800922c:	d100      	bne.n	8009230 <__cvt+0x3c>
 800922e:	3601      	adds	r6, #1
 8009230:	2102      	movs	r1, #2
 8009232:	e000      	b.n	8009236 <__cvt+0x42>
 8009234:	2103      	movs	r1, #3
 8009236:	ab03      	add	r3, sp, #12
 8009238:	9301      	str	r3, [sp, #4]
 800923a:	ab02      	add	r3, sp, #8
 800923c:	9300      	str	r3, [sp, #0]
 800923e:	4632      	mov	r2, r6
 8009240:	4653      	mov	r3, sl
 8009242:	ec45 4b10 	vmov	d0, r4, r5
 8009246:	f000 fe67 	bl	8009f18 <_dtoa_r>
 800924a:	2f47      	cmp	r7, #71	; 0x47
 800924c:	4680      	mov	r8, r0
 800924e:	d102      	bne.n	8009256 <__cvt+0x62>
 8009250:	f019 0f01 	tst.w	r9, #1
 8009254:	d026      	beq.n	80092a4 <__cvt+0xb0>
 8009256:	2f46      	cmp	r7, #70	; 0x46
 8009258:	eb08 0906 	add.w	r9, r8, r6
 800925c:	d111      	bne.n	8009282 <__cvt+0x8e>
 800925e:	f898 3000 	ldrb.w	r3, [r8]
 8009262:	2b30      	cmp	r3, #48	; 0x30
 8009264:	d10a      	bne.n	800927c <__cvt+0x88>
 8009266:	2200      	movs	r2, #0
 8009268:	2300      	movs	r3, #0
 800926a:	4620      	mov	r0, r4
 800926c:	4629      	mov	r1, r5
 800926e:	f7f7 fc5b 	bl	8000b28 <__aeabi_dcmpeq>
 8009272:	b918      	cbnz	r0, 800927c <__cvt+0x88>
 8009274:	f1c6 0601 	rsb	r6, r6, #1
 8009278:	f8ca 6000 	str.w	r6, [sl]
 800927c:	f8da 3000 	ldr.w	r3, [sl]
 8009280:	4499      	add	r9, r3
 8009282:	2200      	movs	r2, #0
 8009284:	2300      	movs	r3, #0
 8009286:	4620      	mov	r0, r4
 8009288:	4629      	mov	r1, r5
 800928a:	f7f7 fc4d 	bl	8000b28 <__aeabi_dcmpeq>
 800928e:	b938      	cbnz	r0, 80092a0 <__cvt+0xac>
 8009290:	2230      	movs	r2, #48	; 0x30
 8009292:	9b03      	ldr	r3, [sp, #12]
 8009294:	454b      	cmp	r3, r9
 8009296:	d205      	bcs.n	80092a4 <__cvt+0xb0>
 8009298:	1c59      	adds	r1, r3, #1
 800929a:	9103      	str	r1, [sp, #12]
 800929c:	701a      	strb	r2, [r3, #0]
 800929e:	e7f8      	b.n	8009292 <__cvt+0x9e>
 80092a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80092a4:	9b03      	ldr	r3, [sp, #12]
 80092a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092a8:	eba3 0308 	sub.w	r3, r3, r8
 80092ac:	4640      	mov	r0, r8
 80092ae:	6013      	str	r3, [r2, #0]
 80092b0:	b004      	add	sp, #16
 80092b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080092b6 <__exponent>:
 80092b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092b8:	2900      	cmp	r1, #0
 80092ba:	4604      	mov	r4, r0
 80092bc:	bfba      	itte	lt
 80092be:	4249      	neglt	r1, r1
 80092c0:	232d      	movlt	r3, #45	; 0x2d
 80092c2:	232b      	movge	r3, #43	; 0x2b
 80092c4:	2909      	cmp	r1, #9
 80092c6:	f804 2b02 	strb.w	r2, [r4], #2
 80092ca:	7043      	strb	r3, [r0, #1]
 80092cc:	dd20      	ble.n	8009310 <__exponent+0x5a>
 80092ce:	f10d 0307 	add.w	r3, sp, #7
 80092d2:	461f      	mov	r7, r3
 80092d4:	260a      	movs	r6, #10
 80092d6:	fb91 f5f6 	sdiv	r5, r1, r6
 80092da:	fb06 1115 	mls	r1, r6, r5, r1
 80092de:	3130      	adds	r1, #48	; 0x30
 80092e0:	2d09      	cmp	r5, #9
 80092e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 80092e6:	f103 32ff 	add.w	r2, r3, #4294967295
 80092ea:	4629      	mov	r1, r5
 80092ec:	dc09      	bgt.n	8009302 <__exponent+0x4c>
 80092ee:	3130      	adds	r1, #48	; 0x30
 80092f0:	3b02      	subs	r3, #2
 80092f2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80092f6:	42bb      	cmp	r3, r7
 80092f8:	4622      	mov	r2, r4
 80092fa:	d304      	bcc.n	8009306 <__exponent+0x50>
 80092fc:	1a10      	subs	r0, r2, r0
 80092fe:	b003      	add	sp, #12
 8009300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009302:	4613      	mov	r3, r2
 8009304:	e7e7      	b.n	80092d6 <__exponent+0x20>
 8009306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800930a:	f804 2b01 	strb.w	r2, [r4], #1
 800930e:	e7f2      	b.n	80092f6 <__exponent+0x40>
 8009310:	2330      	movs	r3, #48	; 0x30
 8009312:	4419      	add	r1, r3
 8009314:	7083      	strb	r3, [r0, #2]
 8009316:	1d02      	adds	r2, r0, #4
 8009318:	70c1      	strb	r1, [r0, #3]
 800931a:	e7ef      	b.n	80092fc <__exponent+0x46>

0800931c <_printf_float>:
 800931c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009320:	b08d      	sub	sp, #52	; 0x34
 8009322:	460c      	mov	r4, r1
 8009324:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8009328:	4616      	mov	r6, r2
 800932a:	461f      	mov	r7, r3
 800932c:	4605      	mov	r5, r0
 800932e:	f001 fd25 	bl	800ad7c <_localeconv_r>
 8009332:	6803      	ldr	r3, [r0, #0]
 8009334:	9304      	str	r3, [sp, #16]
 8009336:	4618      	mov	r0, r3
 8009338:	f7f6 ff74 	bl	8000224 <strlen>
 800933c:	2300      	movs	r3, #0
 800933e:	930a      	str	r3, [sp, #40]	; 0x28
 8009340:	f8d8 3000 	ldr.w	r3, [r8]
 8009344:	9005      	str	r0, [sp, #20]
 8009346:	3307      	adds	r3, #7
 8009348:	f023 0307 	bic.w	r3, r3, #7
 800934c:	f103 0208 	add.w	r2, r3, #8
 8009350:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009354:	f8d4 b000 	ldr.w	fp, [r4]
 8009358:	f8c8 2000 	str.w	r2, [r8]
 800935c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009360:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009364:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009368:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800936c:	9307      	str	r3, [sp, #28]
 800936e:	f8cd 8018 	str.w	r8, [sp, #24]
 8009372:	f04f 32ff 	mov.w	r2, #4294967295
 8009376:	4ba7      	ldr	r3, [pc, #668]	; (8009614 <_printf_float+0x2f8>)
 8009378:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800937c:	f7f7 fc06 	bl	8000b8c <__aeabi_dcmpun>
 8009380:	bb70      	cbnz	r0, 80093e0 <_printf_float+0xc4>
 8009382:	f04f 32ff 	mov.w	r2, #4294967295
 8009386:	4ba3      	ldr	r3, [pc, #652]	; (8009614 <_printf_float+0x2f8>)
 8009388:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800938c:	f7f7 fbe0 	bl	8000b50 <__aeabi_dcmple>
 8009390:	bb30      	cbnz	r0, 80093e0 <_printf_float+0xc4>
 8009392:	2200      	movs	r2, #0
 8009394:	2300      	movs	r3, #0
 8009396:	4640      	mov	r0, r8
 8009398:	4649      	mov	r1, r9
 800939a:	f7f7 fbcf 	bl	8000b3c <__aeabi_dcmplt>
 800939e:	b110      	cbz	r0, 80093a6 <_printf_float+0x8a>
 80093a0:	232d      	movs	r3, #45	; 0x2d
 80093a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093a6:	4a9c      	ldr	r2, [pc, #624]	; (8009618 <_printf_float+0x2fc>)
 80093a8:	4b9c      	ldr	r3, [pc, #624]	; (800961c <_printf_float+0x300>)
 80093aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80093ae:	bf8c      	ite	hi
 80093b0:	4690      	movhi	r8, r2
 80093b2:	4698      	movls	r8, r3
 80093b4:	2303      	movs	r3, #3
 80093b6:	f02b 0204 	bic.w	r2, fp, #4
 80093ba:	6123      	str	r3, [r4, #16]
 80093bc:	6022      	str	r2, [r4, #0]
 80093be:	f04f 0900 	mov.w	r9, #0
 80093c2:	9700      	str	r7, [sp, #0]
 80093c4:	4633      	mov	r3, r6
 80093c6:	aa0b      	add	r2, sp, #44	; 0x2c
 80093c8:	4621      	mov	r1, r4
 80093ca:	4628      	mov	r0, r5
 80093cc:	f000 f9e6 	bl	800979c <_printf_common>
 80093d0:	3001      	adds	r0, #1
 80093d2:	f040 808d 	bne.w	80094f0 <_printf_float+0x1d4>
 80093d6:	f04f 30ff 	mov.w	r0, #4294967295
 80093da:	b00d      	add	sp, #52	; 0x34
 80093dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e0:	4642      	mov	r2, r8
 80093e2:	464b      	mov	r3, r9
 80093e4:	4640      	mov	r0, r8
 80093e6:	4649      	mov	r1, r9
 80093e8:	f7f7 fbd0 	bl	8000b8c <__aeabi_dcmpun>
 80093ec:	b110      	cbz	r0, 80093f4 <_printf_float+0xd8>
 80093ee:	4a8c      	ldr	r2, [pc, #560]	; (8009620 <_printf_float+0x304>)
 80093f0:	4b8c      	ldr	r3, [pc, #560]	; (8009624 <_printf_float+0x308>)
 80093f2:	e7da      	b.n	80093aa <_printf_float+0x8e>
 80093f4:	6861      	ldr	r1, [r4, #4]
 80093f6:	1c4b      	adds	r3, r1, #1
 80093f8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80093fc:	a80a      	add	r0, sp, #40	; 0x28
 80093fe:	d13e      	bne.n	800947e <_printf_float+0x162>
 8009400:	2306      	movs	r3, #6
 8009402:	6063      	str	r3, [r4, #4]
 8009404:	2300      	movs	r3, #0
 8009406:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800940a:	ab09      	add	r3, sp, #36	; 0x24
 800940c:	9300      	str	r3, [sp, #0]
 800940e:	ec49 8b10 	vmov	d0, r8, r9
 8009412:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009416:	6022      	str	r2, [r4, #0]
 8009418:	f8cd a004 	str.w	sl, [sp, #4]
 800941c:	6861      	ldr	r1, [r4, #4]
 800941e:	4628      	mov	r0, r5
 8009420:	f7ff fee8 	bl	80091f4 <__cvt>
 8009424:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8009428:	2b47      	cmp	r3, #71	; 0x47
 800942a:	4680      	mov	r8, r0
 800942c:	d109      	bne.n	8009442 <_printf_float+0x126>
 800942e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009430:	1cd8      	adds	r0, r3, #3
 8009432:	db02      	blt.n	800943a <_printf_float+0x11e>
 8009434:	6862      	ldr	r2, [r4, #4]
 8009436:	4293      	cmp	r3, r2
 8009438:	dd47      	ble.n	80094ca <_printf_float+0x1ae>
 800943a:	f1aa 0a02 	sub.w	sl, sl, #2
 800943e:	fa5f fa8a 	uxtb.w	sl, sl
 8009442:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8009446:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009448:	d824      	bhi.n	8009494 <_printf_float+0x178>
 800944a:	3901      	subs	r1, #1
 800944c:	4652      	mov	r2, sl
 800944e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009452:	9109      	str	r1, [sp, #36]	; 0x24
 8009454:	f7ff ff2f 	bl	80092b6 <__exponent>
 8009458:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800945a:	1813      	adds	r3, r2, r0
 800945c:	2a01      	cmp	r2, #1
 800945e:	4681      	mov	r9, r0
 8009460:	6123      	str	r3, [r4, #16]
 8009462:	dc02      	bgt.n	800946a <_printf_float+0x14e>
 8009464:	6822      	ldr	r2, [r4, #0]
 8009466:	07d1      	lsls	r1, r2, #31
 8009468:	d501      	bpl.n	800946e <_printf_float+0x152>
 800946a:	3301      	adds	r3, #1
 800946c:	6123      	str	r3, [r4, #16]
 800946e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009472:	2b00      	cmp	r3, #0
 8009474:	d0a5      	beq.n	80093c2 <_printf_float+0xa6>
 8009476:	232d      	movs	r3, #45	; 0x2d
 8009478:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800947c:	e7a1      	b.n	80093c2 <_printf_float+0xa6>
 800947e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8009482:	f000 8177 	beq.w	8009774 <_printf_float+0x458>
 8009486:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800948a:	d1bb      	bne.n	8009404 <_printf_float+0xe8>
 800948c:	2900      	cmp	r1, #0
 800948e:	d1b9      	bne.n	8009404 <_printf_float+0xe8>
 8009490:	2301      	movs	r3, #1
 8009492:	e7b6      	b.n	8009402 <_printf_float+0xe6>
 8009494:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8009498:	d119      	bne.n	80094ce <_printf_float+0x1b2>
 800949a:	2900      	cmp	r1, #0
 800949c:	6863      	ldr	r3, [r4, #4]
 800949e:	dd0c      	ble.n	80094ba <_printf_float+0x19e>
 80094a0:	6121      	str	r1, [r4, #16]
 80094a2:	b913      	cbnz	r3, 80094aa <_printf_float+0x18e>
 80094a4:	6822      	ldr	r2, [r4, #0]
 80094a6:	07d2      	lsls	r2, r2, #31
 80094a8:	d502      	bpl.n	80094b0 <_printf_float+0x194>
 80094aa:	3301      	adds	r3, #1
 80094ac:	440b      	add	r3, r1
 80094ae:	6123      	str	r3, [r4, #16]
 80094b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80094b2:	65a3      	str	r3, [r4, #88]	; 0x58
 80094b4:	f04f 0900 	mov.w	r9, #0
 80094b8:	e7d9      	b.n	800946e <_printf_float+0x152>
 80094ba:	b913      	cbnz	r3, 80094c2 <_printf_float+0x1a6>
 80094bc:	6822      	ldr	r2, [r4, #0]
 80094be:	07d0      	lsls	r0, r2, #31
 80094c0:	d501      	bpl.n	80094c6 <_printf_float+0x1aa>
 80094c2:	3302      	adds	r3, #2
 80094c4:	e7f3      	b.n	80094ae <_printf_float+0x192>
 80094c6:	2301      	movs	r3, #1
 80094c8:	e7f1      	b.n	80094ae <_printf_float+0x192>
 80094ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80094ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80094d2:	4293      	cmp	r3, r2
 80094d4:	db05      	blt.n	80094e2 <_printf_float+0x1c6>
 80094d6:	6822      	ldr	r2, [r4, #0]
 80094d8:	6123      	str	r3, [r4, #16]
 80094da:	07d1      	lsls	r1, r2, #31
 80094dc:	d5e8      	bpl.n	80094b0 <_printf_float+0x194>
 80094de:	3301      	adds	r3, #1
 80094e0:	e7e5      	b.n	80094ae <_printf_float+0x192>
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	bfd4      	ite	le
 80094e6:	f1c3 0302 	rsble	r3, r3, #2
 80094ea:	2301      	movgt	r3, #1
 80094ec:	4413      	add	r3, r2
 80094ee:	e7de      	b.n	80094ae <_printf_float+0x192>
 80094f0:	6823      	ldr	r3, [r4, #0]
 80094f2:	055a      	lsls	r2, r3, #21
 80094f4:	d407      	bmi.n	8009506 <_printf_float+0x1ea>
 80094f6:	6923      	ldr	r3, [r4, #16]
 80094f8:	4642      	mov	r2, r8
 80094fa:	4631      	mov	r1, r6
 80094fc:	4628      	mov	r0, r5
 80094fe:	47b8      	blx	r7
 8009500:	3001      	adds	r0, #1
 8009502:	d12b      	bne.n	800955c <_printf_float+0x240>
 8009504:	e767      	b.n	80093d6 <_printf_float+0xba>
 8009506:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800950a:	f240 80dc 	bls.w	80096c6 <_printf_float+0x3aa>
 800950e:	2200      	movs	r2, #0
 8009510:	2300      	movs	r3, #0
 8009512:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009516:	f7f7 fb07 	bl	8000b28 <__aeabi_dcmpeq>
 800951a:	2800      	cmp	r0, #0
 800951c:	d033      	beq.n	8009586 <_printf_float+0x26a>
 800951e:	2301      	movs	r3, #1
 8009520:	4a41      	ldr	r2, [pc, #260]	; (8009628 <_printf_float+0x30c>)
 8009522:	4631      	mov	r1, r6
 8009524:	4628      	mov	r0, r5
 8009526:	47b8      	blx	r7
 8009528:	3001      	adds	r0, #1
 800952a:	f43f af54 	beq.w	80093d6 <_printf_float+0xba>
 800952e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009532:	429a      	cmp	r2, r3
 8009534:	db02      	blt.n	800953c <_printf_float+0x220>
 8009536:	6823      	ldr	r3, [r4, #0]
 8009538:	07d8      	lsls	r0, r3, #31
 800953a:	d50f      	bpl.n	800955c <_printf_float+0x240>
 800953c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009540:	4631      	mov	r1, r6
 8009542:	4628      	mov	r0, r5
 8009544:	47b8      	blx	r7
 8009546:	3001      	adds	r0, #1
 8009548:	f43f af45 	beq.w	80093d6 <_printf_float+0xba>
 800954c:	f04f 0800 	mov.w	r8, #0
 8009550:	f104 091a 	add.w	r9, r4, #26
 8009554:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009556:	3b01      	subs	r3, #1
 8009558:	4543      	cmp	r3, r8
 800955a:	dc09      	bgt.n	8009570 <_printf_float+0x254>
 800955c:	6823      	ldr	r3, [r4, #0]
 800955e:	079b      	lsls	r3, r3, #30
 8009560:	f100 8103 	bmi.w	800976a <_printf_float+0x44e>
 8009564:	68e0      	ldr	r0, [r4, #12]
 8009566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009568:	4298      	cmp	r0, r3
 800956a:	bfb8      	it	lt
 800956c:	4618      	movlt	r0, r3
 800956e:	e734      	b.n	80093da <_printf_float+0xbe>
 8009570:	2301      	movs	r3, #1
 8009572:	464a      	mov	r2, r9
 8009574:	4631      	mov	r1, r6
 8009576:	4628      	mov	r0, r5
 8009578:	47b8      	blx	r7
 800957a:	3001      	adds	r0, #1
 800957c:	f43f af2b 	beq.w	80093d6 <_printf_float+0xba>
 8009580:	f108 0801 	add.w	r8, r8, #1
 8009584:	e7e6      	b.n	8009554 <_printf_float+0x238>
 8009586:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009588:	2b00      	cmp	r3, #0
 800958a:	dc2b      	bgt.n	80095e4 <_printf_float+0x2c8>
 800958c:	2301      	movs	r3, #1
 800958e:	4a26      	ldr	r2, [pc, #152]	; (8009628 <_printf_float+0x30c>)
 8009590:	4631      	mov	r1, r6
 8009592:	4628      	mov	r0, r5
 8009594:	47b8      	blx	r7
 8009596:	3001      	adds	r0, #1
 8009598:	f43f af1d 	beq.w	80093d6 <_printf_float+0xba>
 800959c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800959e:	b923      	cbnz	r3, 80095aa <_printf_float+0x28e>
 80095a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a2:	b913      	cbnz	r3, 80095aa <_printf_float+0x28e>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	07d9      	lsls	r1, r3, #31
 80095a8:	d5d8      	bpl.n	800955c <_printf_float+0x240>
 80095aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ae:	4631      	mov	r1, r6
 80095b0:	4628      	mov	r0, r5
 80095b2:	47b8      	blx	r7
 80095b4:	3001      	adds	r0, #1
 80095b6:	f43f af0e 	beq.w	80093d6 <_printf_float+0xba>
 80095ba:	f04f 0900 	mov.w	r9, #0
 80095be:	f104 0a1a 	add.w	sl, r4, #26
 80095c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80095c4:	425b      	negs	r3, r3
 80095c6:	454b      	cmp	r3, r9
 80095c8:	dc01      	bgt.n	80095ce <_printf_float+0x2b2>
 80095ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095cc:	e794      	b.n	80094f8 <_printf_float+0x1dc>
 80095ce:	2301      	movs	r3, #1
 80095d0:	4652      	mov	r2, sl
 80095d2:	4631      	mov	r1, r6
 80095d4:	4628      	mov	r0, r5
 80095d6:	47b8      	blx	r7
 80095d8:	3001      	adds	r0, #1
 80095da:	f43f aefc 	beq.w	80093d6 <_printf_float+0xba>
 80095de:	f109 0901 	add.w	r9, r9, #1
 80095e2:	e7ee      	b.n	80095c2 <_printf_float+0x2a6>
 80095e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80095e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80095e8:	429a      	cmp	r2, r3
 80095ea:	bfa8      	it	ge
 80095ec:	461a      	movge	r2, r3
 80095ee:	2a00      	cmp	r2, #0
 80095f0:	4691      	mov	r9, r2
 80095f2:	dd07      	ble.n	8009604 <_printf_float+0x2e8>
 80095f4:	4613      	mov	r3, r2
 80095f6:	4631      	mov	r1, r6
 80095f8:	4642      	mov	r2, r8
 80095fa:	4628      	mov	r0, r5
 80095fc:	47b8      	blx	r7
 80095fe:	3001      	adds	r0, #1
 8009600:	f43f aee9 	beq.w	80093d6 <_printf_float+0xba>
 8009604:	f104 031a 	add.w	r3, r4, #26
 8009608:	f04f 0b00 	mov.w	fp, #0
 800960c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009610:	9306      	str	r3, [sp, #24]
 8009612:	e015      	b.n	8009640 <_printf_float+0x324>
 8009614:	7fefffff 	.word	0x7fefffff
 8009618:	080137e0 	.word	0x080137e0
 800961c:	080137dc 	.word	0x080137dc
 8009620:	080137e8 	.word	0x080137e8
 8009624:	080137e4 	.word	0x080137e4
 8009628:	080137ec 	.word	0x080137ec
 800962c:	2301      	movs	r3, #1
 800962e:	9a06      	ldr	r2, [sp, #24]
 8009630:	4631      	mov	r1, r6
 8009632:	4628      	mov	r0, r5
 8009634:	47b8      	blx	r7
 8009636:	3001      	adds	r0, #1
 8009638:	f43f aecd 	beq.w	80093d6 <_printf_float+0xba>
 800963c:	f10b 0b01 	add.w	fp, fp, #1
 8009640:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009644:	ebaa 0309 	sub.w	r3, sl, r9
 8009648:	455b      	cmp	r3, fp
 800964a:	dcef      	bgt.n	800962c <_printf_float+0x310>
 800964c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009650:	429a      	cmp	r2, r3
 8009652:	44d0      	add	r8, sl
 8009654:	db15      	blt.n	8009682 <_printf_float+0x366>
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	07da      	lsls	r2, r3, #31
 800965a:	d412      	bmi.n	8009682 <_printf_float+0x366>
 800965c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800965e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009660:	eba3 020a 	sub.w	r2, r3, sl
 8009664:	eba3 0a01 	sub.w	sl, r3, r1
 8009668:	4592      	cmp	sl, r2
 800966a:	bfa8      	it	ge
 800966c:	4692      	movge	sl, r2
 800966e:	f1ba 0f00 	cmp.w	sl, #0
 8009672:	dc0e      	bgt.n	8009692 <_printf_float+0x376>
 8009674:	f04f 0800 	mov.w	r8, #0
 8009678:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800967c:	f104 091a 	add.w	r9, r4, #26
 8009680:	e019      	b.n	80096b6 <_printf_float+0x39a>
 8009682:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009686:	4631      	mov	r1, r6
 8009688:	4628      	mov	r0, r5
 800968a:	47b8      	blx	r7
 800968c:	3001      	adds	r0, #1
 800968e:	d1e5      	bne.n	800965c <_printf_float+0x340>
 8009690:	e6a1      	b.n	80093d6 <_printf_float+0xba>
 8009692:	4653      	mov	r3, sl
 8009694:	4642      	mov	r2, r8
 8009696:	4631      	mov	r1, r6
 8009698:	4628      	mov	r0, r5
 800969a:	47b8      	blx	r7
 800969c:	3001      	adds	r0, #1
 800969e:	d1e9      	bne.n	8009674 <_printf_float+0x358>
 80096a0:	e699      	b.n	80093d6 <_printf_float+0xba>
 80096a2:	2301      	movs	r3, #1
 80096a4:	464a      	mov	r2, r9
 80096a6:	4631      	mov	r1, r6
 80096a8:	4628      	mov	r0, r5
 80096aa:	47b8      	blx	r7
 80096ac:	3001      	adds	r0, #1
 80096ae:	f43f ae92 	beq.w	80093d6 <_printf_float+0xba>
 80096b2:	f108 0801 	add.w	r8, r8, #1
 80096b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096ba:	1a9b      	subs	r3, r3, r2
 80096bc:	eba3 030a 	sub.w	r3, r3, sl
 80096c0:	4543      	cmp	r3, r8
 80096c2:	dcee      	bgt.n	80096a2 <_printf_float+0x386>
 80096c4:	e74a      	b.n	800955c <_printf_float+0x240>
 80096c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096c8:	2a01      	cmp	r2, #1
 80096ca:	dc01      	bgt.n	80096d0 <_printf_float+0x3b4>
 80096cc:	07db      	lsls	r3, r3, #31
 80096ce:	d53a      	bpl.n	8009746 <_printf_float+0x42a>
 80096d0:	2301      	movs	r3, #1
 80096d2:	4642      	mov	r2, r8
 80096d4:	4631      	mov	r1, r6
 80096d6:	4628      	mov	r0, r5
 80096d8:	47b8      	blx	r7
 80096da:	3001      	adds	r0, #1
 80096dc:	f43f ae7b 	beq.w	80093d6 <_printf_float+0xba>
 80096e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096e4:	4631      	mov	r1, r6
 80096e6:	4628      	mov	r0, r5
 80096e8:	47b8      	blx	r7
 80096ea:	3001      	adds	r0, #1
 80096ec:	f108 0801 	add.w	r8, r8, #1
 80096f0:	f43f ae71 	beq.w	80093d6 <_printf_float+0xba>
 80096f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096f6:	2200      	movs	r2, #0
 80096f8:	f103 3aff 	add.w	sl, r3, #4294967295
 80096fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009700:	2300      	movs	r3, #0
 8009702:	f7f7 fa11 	bl	8000b28 <__aeabi_dcmpeq>
 8009706:	b9c8      	cbnz	r0, 800973c <_printf_float+0x420>
 8009708:	4653      	mov	r3, sl
 800970a:	4642      	mov	r2, r8
 800970c:	4631      	mov	r1, r6
 800970e:	4628      	mov	r0, r5
 8009710:	47b8      	blx	r7
 8009712:	3001      	adds	r0, #1
 8009714:	d10e      	bne.n	8009734 <_printf_float+0x418>
 8009716:	e65e      	b.n	80093d6 <_printf_float+0xba>
 8009718:	2301      	movs	r3, #1
 800971a:	4652      	mov	r2, sl
 800971c:	4631      	mov	r1, r6
 800971e:	4628      	mov	r0, r5
 8009720:	47b8      	blx	r7
 8009722:	3001      	adds	r0, #1
 8009724:	f43f ae57 	beq.w	80093d6 <_printf_float+0xba>
 8009728:	f108 0801 	add.w	r8, r8, #1
 800972c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800972e:	3b01      	subs	r3, #1
 8009730:	4543      	cmp	r3, r8
 8009732:	dcf1      	bgt.n	8009718 <_printf_float+0x3fc>
 8009734:	464b      	mov	r3, r9
 8009736:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800973a:	e6de      	b.n	80094fa <_printf_float+0x1de>
 800973c:	f04f 0800 	mov.w	r8, #0
 8009740:	f104 0a1a 	add.w	sl, r4, #26
 8009744:	e7f2      	b.n	800972c <_printf_float+0x410>
 8009746:	2301      	movs	r3, #1
 8009748:	e7df      	b.n	800970a <_printf_float+0x3ee>
 800974a:	2301      	movs	r3, #1
 800974c:	464a      	mov	r2, r9
 800974e:	4631      	mov	r1, r6
 8009750:	4628      	mov	r0, r5
 8009752:	47b8      	blx	r7
 8009754:	3001      	adds	r0, #1
 8009756:	f43f ae3e 	beq.w	80093d6 <_printf_float+0xba>
 800975a:	f108 0801 	add.w	r8, r8, #1
 800975e:	68e3      	ldr	r3, [r4, #12]
 8009760:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009762:	1a9b      	subs	r3, r3, r2
 8009764:	4543      	cmp	r3, r8
 8009766:	dcf0      	bgt.n	800974a <_printf_float+0x42e>
 8009768:	e6fc      	b.n	8009564 <_printf_float+0x248>
 800976a:	f04f 0800 	mov.w	r8, #0
 800976e:	f104 0919 	add.w	r9, r4, #25
 8009772:	e7f4      	b.n	800975e <_printf_float+0x442>
 8009774:	2900      	cmp	r1, #0
 8009776:	f43f ae8b 	beq.w	8009490 <_printf_float+0x174>
 800977a:	2300      	movs	r3, #0
 800977c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009780:	ab09      	add	r3, sp, #36	; 0x24
 8009782:	9300      	str	r3, [sp, #0]
 8009784:	ec49 8b10 	vmov	d0, r8, r9
 8009788:	6022      	str	r2, [r4, #0]
 800978a:	f8cd a004 	str.w	sl, [sp, #4]
 800978e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009792:	4628      	mov	r0, r5
 8009794:	f7ff fd2e 	bl	80091f4 <__cvt>
 8009798:	4680      	mov	r8, r0
 800979a:	e648      	b.n	800942e <_printf_float+0x112>

0800979c <_printf_common>:
 800979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097a0:	4691      	mov	r9, r2
 80097a2:	461f      	mov	r7, r3
 80097a4:	688a      	ldr	r2, [r1, #8]
 80097a6:	690b      	ldr	r3, [r1, #16]
 80097a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80097ac:	4293      	cmp	r3, r2
 80097ae:	bfb8      	it	lt
 80097b0:	4613      	movlt	r3, r2
 80097b2:	f8c9 3000 	str.w	r3, [r9]
 80097b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80097ba:	4606      	mov	r6, r0
 80097bc:	460c      	mov	r4, r1
 80097be:	b112      	cbz	r2, 80097c6 <_printf_common+0x2a>
 80097c0:	3301      	adds	r3, #1
 80097c2:	f8c9 3000 	str.w	r3, [r9]
 80097c6:	6823      	ldr	r3, [r4, #0]
 80097c8:	0699      	lsls	r1, r3, #26
 80097ca:	bf42      	ittt	mi
 80097cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80097d0:	3302      	addmi	r3, #2
 80097d2:	f8c9 3000 	strmi.w	r3, [r9]
 80097d6:	6825      	ldr	r5, [r4, #0]
 80097d8:	f015 0506 	ands.w	r5, r5, #6
 80097dc:	d107      	bne.n	80097ee <_printf_common+0x52>
 80097de:	f104 0a19 	add.w	sl, r4, #25
 80097e2:	68e3      	ldr	r3, [r4, #12]
 80097e4:	f8d9 2000 	ldr.w	r2, [r9]
 80097e8:	1a9b      	subs	r3, r3, r2
 80097ea:	42ab      	cmp	r3, r5
 80097ec:	dc28      	bgt.n	8009840 <_printf_common+0xa4>
 80097ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80097f2:	6822      	ldr	r2, [r4, #0]
 80097f4:	3300      	adds	r3, #0
 80097f6:	bf18      	it	ne
 80097f8:	2301      	movne	r3, #1
 80097fa:	0692      	lsls	r2, r2, #26
 80097fc:	d42d      	bmi.n	800985a <_printf_common+0xbe>
 80097fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009802:	4639      	mov	r1, r7
 8009804:	4630      	mov	r0, r6
 8009806:	47c0      	blx	r8
 8009808:	3001      	adds	r0, #1
 800980a:	d020      	beq.n	800984e <_printf_common+0xb2>
 800980c:	6823      	ldr	r3, [r4, #0]
 800980e:	68e5      	ldr	r5, [r4, #12]
 8009810:	f8d9 2000 	ldr.w	r2, [r9]
 8009814:	f003 0306 	and.w	r3, r3, #6
 8009818:	2b04      	cmp	r3, #4
 800981a:	bf08      	it	eq
 800981c:	1aad      	subeq	r5, r5, r2
 800981e:	68a3      	ldr	r3, [r4, #8]
 8009820:	6922      	ldr	r2, [r4, #16]
 8009822:	bf0c      	ite	eq
 8009824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009828:	2500      	movne	r5, #0
 800982a:	4293      	cmp	r3, r2
 800982c:	bfc4      	itt	gt
 800982e:	1a9b      	subgt	r3, r3, r2
 8009830:	18ed      	addgt	r5, r5, r3
 8009832:	f04f 0900 	mov.w	r9, #0
 8009836:	341a      	adds	r4, #26
 8009838:	454d      	cmp	r5, r9
 800983a:	d11a      	bne.n	8009872 <_printf_common+0xd6>
 800983c:	2000      	movs	r0, #0
 800983e:	e008      	b.n	8009852 <_printf_common+0xb6>
 8009840:	2301      	movs	r3, #1
 8009842:	4652      	mov	r2, sl
 8009844:	4639      	mov	r1, r7
 8009846:	4630      	mov	r0, r6
 8009848:	47c0      	blx	r8
 800984a:	3001      	adds	r0, #1
 800984c:	d103      	bne.n	8009856 <_printf_common+0xba>
 800984e:	f04f 30ff 	mov.w	r0, #4294967295
 8009852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009856:	3501      	adds	r5, #1
 8009858:	e7c3      	b.n	80097e2 <_printf_common+0x46>
 800985a:	18e1      	adds	r1, r4, r3
 800985c:	1c5a      	adds	r2, r3, #1
 800985e:	2030      	movs	r0, #48	; 0x30
 8009860:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009864:	4422      	add	r2, r4
 8009866:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800986a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800986e:	3302      	adds	r3, #2
 8009870:	e7c5      	b.n	80097fe <_printf_common+0x62>
 8009872:	2301      	movs	r3, #1
 8009874:	4622      	mov	r2, r4
 8009876:	4639      	mov	r1, r7
 8009878:	4630      	mov	r0, r6
 800987a:	47c0      	blx	r8
 800987c:	3001      	adds	r0, #1
 800987e:	d0e6      	beq.n	800984e <_printf_common+0xb2>
 8009880:	f109 0901 	add.w	r9, r9, #1
 8009884:	e7d8      	b.n	8009838 <_printf_common+0x9c>
	...

08009888 <_printf_i>:
 8009888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800988c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009890:	460c      	mov	r4, r1
 8009892:	7e09      	ldrb	r1, [r1, #24]
 8009894:	b085      	sub	sp, #20
 8009896:	296e      	cmp	r1, #110	; 0x6e
 8009898:	4617      	mov	r7, r2
 800989a:	4606      	mov	r6, r0
 800989c:	4698      	mov	r8, r3
 800989e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098a0:	f000 80b3 	beq.w	8009a0a <_printf_i+0x182>
 80098a4:	d822      	bhi.n	80098ec <_printf_i+0x64>
 80098a6:	2963      	cmp	r1, #99	; 0x63
 80098a8:	d036      	beq.n	8009918 <_printf_i+0x90>
 80098aa:	d80a      	bhi.n	80098c2 <_printf_i+0x3a>
 80098ac:	2900      	cmp	r1, #0
 80098ae:	f000 80b9 	beq.w	8009a24 <_printf_i+0x19c>
 80098b2:	2958      	cmp	r1, #88	; 0x58
 80098b4:	f000 8083 	beq.w	80099be <_printf_i+0x136>
 80098b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80098bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80098c0:	e032      	b.n	8009928 <_printf_i+0xa0>
 80098c2:	2964      	cmp	r1, #100	; 0x64
 80098c4:	d001      	beq.n	80098ca <_printf_i+0x42>
 80098c6:	2969      	cmp	r1, #105	; 0x69
 80098c8:	d1f6      	bne.n	80098b8 <_printf_i+0x30>
 80098ca:	6820      	ldr	r0, [r4, #0]
 80098cc:	6813      	ldr	r3, [r2, #0]
 80098ce:	0605      	lsls	r5, r0, #24
 80098d0:	f103 0104 	add.w	r1, r3, #4
 80098d4:	d52a      	bpl.n	800992c <_printf_i+0xa4>
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	6011      	str	r1, [r2, #0]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	da03      	bge.n	80098e6 <_printf_i+0x5e>
 80098de:	222d      	movs	r2, #45	; 0x2d
 80098e0:	425b      	negs	r3, r3
 80098e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80098e6:	486f      	ldr	r0, [pc, #444]	; (8009aa4 <_printf_i+0x21c>)
 80098e8:	220a      	movs	r2, #10
 80098ea:	e039      	b.n	8009960 <_printf_i+0xd8>
 80098ec:	2973      	cmp	r1, #115	; 0x73
 80098ee:	f000 809d 	beq.w	8009a2c <_printf_i+0x1a4>
 80098f2:	d808      	bhi.n	8009906 <_printf_i+0x7e>
 80098f4:	296f      	cmp	r1, #111	; 0x6f
 80098f6:	d020      	beq.n	800993a <_printf_i+0xb2>
 80098f8:	2970      	cmp	r1, #112	; 0x70
 80098fa:	d1dd      	bne.n	80098b8 <_printf_i+0x30>
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	f043 0320 	orr.w	r3, r3, #32
 8009902:	6023      	str	r3, [r4, #0]
 8009904:	e003      	b.n	800990e <_printf_i+0x86>
 8009906:	2975      	cmp	r1, #117	; 0x75
 8009908:	d017      	beq.n	800993a <_printf_i+0xb2>
 800990a:	2978      	cmp	r1, #120	; 0x78
 800990c:	d1d4      	bne.n	80098b8 <_printf_i+0x30>
 800990e:	2378      	movs	r3, #120	; 0x78
 8009910:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009914:	4864      	ldr	r0, [pc, #400]	; (8009aa8 <_printf_i+0x220>)
 8009916:	e055      	b.n	80099c4 <_printf_i+0x13c>
 8009918:	6813      	ldr	r3, [r2, #0]
 800991a:	1d19      	adds	r1, r3, #4
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	6011      	str	r1, [r2, #0]
 8009920:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009924:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009928:	2301      	movs	r3, #1
 800992a:	e08c      	b.n	8009a46 <_printf_i+0x1be>
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6011      	str	r1, [r2, #0]
 8009930:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009934:	bf18      	it	ne
 8009936:	b21b      	sxthne	r3, r3
 8009938:	e7cf      	b.n	80098da <_printf_i+0x52>
 800993a:	6813      	ldr	r3, [r2, #0]
 800993c:	6825      	ldr	r5, [r4, #0]
 800993e:	1d18      	adds	r0, r3, #4
 8009940:	6010      	str	r0, [r2, #0]
 8009942:	0628      	lsls	r0, r5, #24
 8009944:	d501      	bpl.n	800994a <_printf_i+0xc2>
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	e002      	b.n	8009950 <_printf_i+0xc8>
 800994a:	0668      	lsls	r0, r5, #25
 800994c:	d5fb      	bpl.n	8009946 <_printf_i+0xbe>
 800994e:	881b      	ldrh	r3, [r3, #0]
 8009950:	4854      	ldr	r0, [pc, #336]	; (8009aa4 <_printf_i+0x21c>)
 8009952:	296f      	cmp	r1, #111	; 0x6f
 8009954:	bf14      	ite	ne
 8009956:	220a      	movne	r2, #10
 8009958:	2208      	moveq	r2, #8
 800995a:	2100      	movs	r1, #0
 800995c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009960:	6865      	ldr	r5, [r4, #4]
 8009962:	60a5      	str	r5, [r4, #8]
 8009964:	2d00      	cmp	r5, #0
 8009966:	f2c0 8095 	blt.w	8009a94 <_printf_i+0x20c>
 800996a:	6821      	ldr	r1, [r4, #0]
 800996c:	f021 0104 	bic.w	r1, r1, #4
 8009970:	6021      	str	r1, [r4, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d13d      	bne.n	80099f2 <_printf_i+0x16a>
 8009976:	2d00      	cmp	r5, #0
 8009978:	f040 808e 	bne.w	8009a98 <_printf_i+0x210>
 800997c:	4665      	mov	r5, ip
 800997e:	2a08      	cmp	r2, #8
 8009980:	d10b      	bne.n	800999a <_printf_i+0x112>
 8009982:	6823      	ldr	r3, [r4, #0]
 8009984:	07db      	lsls	r3, r3, #31
 8009986:	d508      	bpl.n	800999a <_printf_i+0x112>
 8009988:	6923      	ldr	r3, [r4, #16]
 800998a:	6862      	ldr	r2, [r4, #4]
 800998c:	429a      	cmp	r2, r3
 800998e:	bfde      	ittt	le
 8009990:	2330      	movle	r3, #48	; 0x30
 8009992:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009996:	f105 35ff 	addle.w	r5, r5, #4294967295
 800999a:	ebac 0305 	sub.w	r3, ip, r5
 800999e:	6123      	str	r3, [r4, #16]
 80099a0:	f8cd 8000 	str.w	r8, [sp]
 80099a4:	463b      	mov	r3, r7
 80099a6:	aa03      	add	r2, sp, #12
 80099a8:	4621      	mov	r1, r4
 80099aa:	4630      	mov	r0, r6
 80099ac:	f7ff fef6 	bl	800979c <_printf_common>
 80099b0:	3001      	adds	r0, #1
 80099b2:	d14d      	bne.n	8009a50 <_printf_i+0x1c8>
 80099b4:	f04f 30ff 	mov.w	r0, #4294967295
 80099b8:	b005      	add	sp, #20
 80099ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099be:	4839      	ldr	r0, [pc, #228]	; (8009aa4 <_printf_i+0x21c>)
 80099c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80099c4:	6813      	ldr	r3, [r2, #0]
 80099c6:	6821      	ldr	r1, [r4, #0]
 80099c8:	1d1d      	adds	r5, r3, #4
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	6015      	str	r5, [r2, #0]
 80099ce:	060a      	lsls	r2, r1, #24
 80099d0:	d50b      	bpl.n	80099ea <_printf_i+0x162>
 80099d2:	07ca      	lsls	r2, r1, #31
 80099d4:	bf44      	itt	mi
 80099d6:	f041 0120 	orrmi.w	r1, r1, #32
 80099da:	6021      	strmi	r1, [r4, #0]
 80099dc:	b91b      	cbnz	r3, 80099e6 <_printf_i+0x15e>
 80099de:	6822      	ldr	r2, [r4, #0]
 80099e0:	f022 0220 	bic.w	r2, r2, #32
 80099e4:	6022      	str	r2, [r4, #0]
 80099e6:	2210      	movs	r2, #16
 80099e8:	e7b7      	b.n	800995a <_printf_i+0xd2>
 80099ea:	064d      	lsls	r5, r1, #25
 80099ec:	bf48      	it	mi
 80099ee:	b29b      	uxthmi	r3, r3
 80099f0:	e7ef      	b.n	80099d2 <_printf_i+0x14a>
 80099f2:	4665      	mov	r5, ip
 80099f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80099f8:	fb02 3311 	mls	r3, r2, r1, r3
 80099fc:	5cc3      	ldrb	r3, [r0, r3]
 80099fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009a02:	460b      	mov	r3, r1
 8009a04:	2900      	cmp	r1, #0
 8009a06:	d1f5      	bne.n	80099f4 <_printf_i+0x16c>
 8009a08:	e7b9      	b.n	800997e <_printf_i+0xf6>
 8009a0a:	6813      	ldr	r3, [r2, #0]
 8009a0c:	6825      	ldr	r5, [r4, #0]
 8009a0e:	6961      	ldr	r1, [r4, #20]
 8009a10:	1d18      	adds	r0, r3, #4
 8009a12:	6010      	str	r0, [r2, #0]
 8009a14:	0628      	lsls	r0, r5, #24
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	d501      	bpl.n	8009a1e <_printf_i+0x196>
 8009a1a:	6019      	str	r1, [r3, #0]
 8009a1c:	e002      	b.n	8009a24 <_printf_i+0x19c>
 8009a1e:	066a      	lsls	r2, r5, #25
 8009a20:	d5fb      	bpl.n	8009a1a <_printf_i+0x192>
 8009a22:	8019      	strh	r1, [r3, #0]
 8009a24:	2300      	movs	r3, #0
 8009a26:	6123      	str	r3, [r4, #16]
 8009a28:	4665      	mov	r5, ip
 8009a2a:	e7b9      	b.n	80099a0 <_printf_i+0x118>
 8009a2c:	6813      	ldr	r3, [r2, #0]
 8009a2e:	1d19      	adds	r1, r3, #4
 8009a30:	6011      	str	r1, [r2, #0]
 8009a32:	681d      	ldr	r5, [r3, #0]
 8009a34:	6862      	ldr	r2, [r4, #4]
 8009a36:	2100      	movs	r1, #0
 8009a38:	4628      	mov	r0, r5
 8009a3a:	f7f6 fc01 	bl	8000240 <memchr>
 8009a3e:	b108      	cbz	r0, 8009a44 <_printf_i+0x1bc>
 8009a40:	1b40      	subs	r0, r0, r5
 8009a42:	6060      	str	r0, [r4, #4]
 8009a44:	6863      	ldr	r3, [r4, #4]
 8009a46:	6123      	str	r3, [r4, #16]
 8009a48:	2300      	movs	r3, #0
 8009a4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a4e:	e7a7      	b.n	80099a0 <_printf_i+0x118>
 8009a50:	6923      	ldr	r3, [r4, #16]
 8009a52:	462a      	mov	r2, r5
 8009a54:	4639      	mov	r1, r7
 8009a56:	4630      	mov	r0, r6
 8009a58:	47c0      	blx	r8
 8009a5a:	3001      	adds	r0, #1
 8009a5c:	d0aa      	beq.n	80099b4 <_printf_i+0x12c>
 8009a5e:	6823      	ldr	r3, [r4, #0]
 8009a60:	079b      	lsls	r3, r3, #30
 8009a62:	d413      	bmi.n	8009a8c <_printf_i+0x204>
 8009a64:	68e0      	ldr	r0, [r4, #12]
 8009a66:	9b03      	ldr	r3, [sp, #12]
 8009a68:	4298      	cmp	r0, r3
 8009a6a:	bfb8      	it	lt
 8009a6c:	4618      	movlt	r0, r3
 8009a6e:	e7a3      	b.n	80099b8 <_printf_i+0x130>
 8009a70:	2301      	movs	r3, #1
 8009a72:	464a      	mov	r2, r9
 8009a74:	4639      	mov	r1, r7
 8009a76:	4630      	mov	r0, r6
 8009a78:	47c0      	blx	r8
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	d09a      	beq.n	80099b4 <_printf_i+0x12c>
 8009a7e:	3501      	adds	r5, #1
 8009a80:	68e3      	ldr	r3, [r4, #12]
 8009a82:	9a03      	ldr	r2, [sp, #12]
 8009a84:	1a9b      	subs	r3, r3, r2
 8009a86:	42ab      	cmp	r3, r5
 8009a88:	dcf2      	bgt.n	8009a70 <_printf_i+0x1e8>
 8009a8a:	e7eb      	b.n	8009a64 <_printf_i+0x1dc>
 8009a8c:	2500      	movs	r5, #0
 8009a8e:	f104 0919 	add.w	r9, r4, #25
 8009a92:	e7f5      	b.n	8009a80 <_printf_i+0x1f8>
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d1ac      	bne.n	80099f2 <_printf_i+0x16a>
 8009a98:	7803      	ldrb	r3, [r0, #0]
 8009a9a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a9e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aa2:	e76c      	b.n	800997e <_printf_i+0xf6>
 8009aa4:	080137ee 	.word	0x080137ee
 8009aa8:	080137ff 	.word	0x080137ff

08009aac <iprintf>:
 8009aac:	b40f      	push	{r0, r1, r2, r3}
 8009aae:	4b0a      	ldr	r3, [pc, #40]	; (8009ad8 <iprintf+0x2c>)
 8009ab0:	b513      	push	{r0, r1, r4, lr}
 8009ab2:	681c      	ldr	r4, [r3, #0]
 8009ab4:	b124      	cbz	r4, 8009ac0 <iprintf+0x14>
 8009ab6:	69a3      	ldr	r3, [r4, #24]
 8009ab8:	b913      	cbnz	r3, 8009ac0 <iprintf+0x14>
 8009aba:	4620      	mov	r0, r4
 8009abc:	f001 f8d4 	bl	800ac68 <__sinit>
 8009ac0:	ab05      	add	r3, sp, #20
 8009ac2:	9a04      	ldr	r2, [sp, #16]
 8009ac4:	68a1      	ldr	r1, [r4, #8]
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	4620      	mov	r0, r4
 8009aca:	f001 fe3b 	bl	800b744 <_vfiprintf_r>
 8009ace:	b002      	add	sp, #8
 8009ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ad4:	b004      	add	sp, #16
 8009ad6:	4770      	bx	lr
 8009ad8:	2000000c 	.word	0x2000000c

08009adc <_puts_r>:
 8009adc:	b570      	push	{r4, r5, r6, lr}
 8009ade:	460e      	mov	r6, r1
 8009ae0:	4605      	mov	r5, r0
 8009ae2:	b118      	cbz	r0, 8009aec <_puts_r+0x10>
 8009ae4:	6983      	ldr	r3, [r0, #24]
 8009ae6:	b90b      	cbnz	r3, 8009aec <_puts_r+0x10>
 8009ae8:	f001 f8be 	bl	800ac68 <__sinit>
 8009aec:	69ab      	ldr	r3, [r5, #24]
 8009aee:	68ac      	ldr	r4, [r5, #8]
 8009af0:	b913      	cbnz	r3, 8009af8 <_puts_r+0x1c>
 8009af2:	4628      	mov	r0, r5
 8009af4:	f001 f8b8 	bl	800ac68 <__sinit>
 8009af8:	4b23      	ldr	r3, [pc, #140]	; (8009b88 <_puts_r+0xac>)
 8009afa:	429c      	cmp	r4, r3
 8009afc:	d117      	bne.n	8009b2e <_puts_r+0x52>
 8009afe:	686c      	ldr	r4, [r5, #4]
 8009b00:	89a3      	ldrh	r3, [r4, #12]
 8009b02:	071b      	lsls	r3, r3, #28
 8009b04:	d51d      	bpl.n	8009b42 <_puts_r+0x66>
 8009b06:	6923      	ldr	r3, [r4, #16]
 8009b08:	b1db      	cbz	r3, 8009b42 <_puts_r+0x66>
 8009b0a:	3e01      	subs	r6, #1
 8009b0c:	68a3      	ldr	r3, [r4, #8]
 8009b0e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009b12:	3b01      	subs	r3, #1
 8009b14:	60a3      	str	r3, [r4, #8]
 8009b16:	b9e9      	cbnz	r1, 8009b54 <_puts_r+0x78>
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	da2e      	bge.n	8009b7a <_puts_r+0x9e>
 8009b1c:	4622      	mov	r2, r4
 8009b1e:	210a      	movs	r1, #10
 8009b20:	4628      	mov	r0, r5
 8009b22:	f000 f8ab 	bl	8009c7c <__swbuf_r>
 8009b26:	3001      	adds	r0, #1
 8009b28:	d011      	beq.n	8009b4e <_puts_r+0x72>
 8009b2a:	200a      	movs	r0, #10
 8009b2c:	e011      	b.n	8009b52 <_puts_r+0x76>
 8009b2e:	4b17      	ldr	r3, [pc, #92]	; (8009b8c <_puts_r+0xb0>)
 8009b30:	429c      	cmp	r4, r3
 8009b32:	d101      	bne.n	8009b38 <_puts_r+0x5c>
 8009b34:	68ac      	ldr	r4, [r5, #8]
 8009b36:	e7e3      	b.n	8009b00 <_puts_r+0x24>
 8009b38:	4b15      	ldr	r3, [pc, #84]	; (8009b90 <_puts_r+0xb4>)
 8009b3a:	429c      	cmp	r4, r3
 8009b3c:	bf08      	it	eq
 8009b3e:	68ec      	ldreq	r4, [r5, #12]
 8009b40:	e7de      	b.n	8009b00 <_puts_r+0x24>
 8009b42:	4621      	mov	r1, r4
 8009b44:	4628      	mov	r0, r5
 8009b46:	f000 f8eb 	bl	8009d20 <__swsetup_r>
 8009b4a:	2800      	cmp	r0, #0
 8009b4c:	d0dd      	beq.n	8009b0a <_puts_r+0x2e>
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	da04      	bge.n	8009b62 <_puts_r+0x86>
 8009b58:	69a2      	ldr	r2, [r4, #24]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	dc06      	bgt.n	8009b6c <_puts_r+0x90>
 8009b5e:	290a      	cmp	r1, #10
 8009b60:	d004      	beq.n	8009b6c <_puts_r+0x90>
 8009b62:	6823      	ldr	r3, [r4, #0]
 8009b64:	1c5a      	adds	r2, r3, #1
 8009b66:	6022      	str	r2, [r4, #0]
 8009b68:	7019      	strb	r1, [r3, #0]
 8009b6a:	e7cf      	b.n	8009b0c <_puts_r+0x30>
 8009b6c:	4622      	mov	r2, r4
 8009b6e:	4628      	mov	r0, r5
 8009b70:	f000 f884 	bl	8009c7c <__swbuf_r>
 8009b74:	3001      	adds	r0, #1
 8009b76:	d1c9      	bne.n	8009b0c <_puts_r+0x30>
 8009b78:	e7e9      	b.n	8009b4e <_puts_r+0x72>
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	200a      	movs	r0, #10
 8009b7e:	1c5a      	adds	r2, r3, #1
 8009b80:	6022      	str	r2, [r4, #0]
 8009b82:	7018      	strb	r0, [r3, #0]
 8009b84:	e7e5      	b.n	8009b52 <_puts_r+0x76>
 8009b86:	bf00      	nop
 8009b88:	08013840 	.word	0x08013840
 8009b8c:	08013860 	.word	0x08013860
 8009b90:	08013820 	.word	0x08013820

08009b94 <puts>:
 8009b94:	4b02      	ldr	r3, [pc, #8]	; (8009ba0 <puts+0xc>)
 8009b96:	4601      	mov	r1, r0
 8009b98:	6818      	ldr	r0, [r3, #0]
 8009b9a:	f7ff bf9f 	b.w	8009adc <_puts_r>
 8009b9e:	bf00      	nop
 8009ba0:	2000000c 	.word	0x2000000c

08009ba4 <_sbrk_r>:
 8009ba4:	b538      	push	{r3, r4, r5, lr}
 8009ba6:	4c06      	ldr	r4, [pc, #24]	; (8009bc0 <_sbrk_r+0x1c>)
 8009ba8:	2300      	movs	r3, #0
 8009baa:	4605      	mov	r5, r0
 8009bac:	4608      	mov	r0, r1
 8009bae:	6023      	str	r3, [r4, #0]
 8009bb0:	f7f8 fbb6 	bl	8002320 <_sbrk>
 8009bb4:	1c43      	adds	r3, r0, #1
 8009bb6:	d102      	bne.n	8009bbe <_sbrk_r+0x1a>
 8009bb8:	6823      	ldr	r3, [r4, #0]
 8009bba:	b103      	cbz	r3, 8009bbe <_sbrk_r+0x1a>
 8009bbc:	602b      	str	r3, [r5, #0]
 8009bbe:	bd38      	pop	{r3, r4, r5, pc}
 8009bc0:	20000ec8 	.word	0x20000ec8

08009bc4 <sniprintf>:
 8009bc4:	b40c      	push	{r2, r3}
 8009bc6:	b530      	push	{r4, r5, lr}
 8009bc8:	4b17      	ldr	r3, [pc, #92]	; (8009c28 <sniprintf+0x64>)
 8009bca:	1e0c      	subs	r4, r1, #0
 8009bcc:	b09d      	sub	sp, #116	; 0x74
 8009bce:	681d      	ldr	r5, [r3, #0]
 8009bd0:	da08      	bge.n	8009be4 <sniprintf+0x20>
 8009bd2:	238b      	movs	r3, #139	; 0x8b
 8009bd4:	602b      	str	r3, [r5, #0]
 8009bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8009bda:	b01d      	add	sp, #116	; 0x74
 8009bdc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009be0:	b002      	add	sp, #8
 8009be2:	4770      	bx	lr
 8009be4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009be8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009bec:	bf14      	ite	ne
 8009bee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009bf2:	4623      	moveq	r3, r4
 8009bf4:	9304      	str	r3, [sp, #16]
 8009bf6:	9307      	str	r3, [sp, #28]
 8009bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009bfc:	9002      	str	r0, [sp, #8]
 8009bfe:	9006      	str	r0, [sp, #24]
 8009c00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c04:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009c06:	ab21      	add	r3, sp, #132	; 0x84
 8009c08:	a902      	add	r1, sp, #8
 8009c0a:	4628      	mov	r0, r5
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	f001 fc77 	bl	800b500 <_svfiprintf_r>
 8009c12:	1c43      	adds	r3, r0, #1
 8009c14:	bfbc      	itt	lt
 8009c16:	238b      	movlt	r3, #139	; 0x8b
 8009c18:	602b      	strlt	r3, [r5, #0]
 8009c1a:	2c00      	cmp	r4, #0
 8009c1c:	d0dd      	beq.n	8009bda <sniprintf+0x16>
 8009c1e:	9b02      	ldr	r3, [sp, #8]
 8009c20:	2200      	movs	r2, #0
 8009c22:	701a      	strb	r2, [r3, #0]
 8009c24:	e7d9      	b.n	8009bda <sniprintf+0x16>
 8009c26:	bf00      	nop
 8009c28:	2000000c 	.word	0x2000000c

08009c2c <siprintf>:
 8009c2c:	b40e      	push	{r1, r2, r3}
 8009c2e:	b500      	push	{lr}
 8009c30:	b09c      	sub	sp, #112	; 0x70
 8009c32:	ab1d      	add	r3, sp, #116	; 0x74
 8009c34:	9002      	str	r0, [sp, #8]
 8009c36:	9006      	str	r0, [sp, #24]
 8009c38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c3c:	4809      	ldr	r0, [pc, #36]	; (8009c64 <siprintf+0x38>)
 8009c3e:	9107      	str	r1, [sp, #28]
 8009c40:	9104      	str	r1, [sp, #16]
 8009c42:	4909      	ldr	r1, [pc, #36]	; (8009c68 <siprintf+0x3c>)
 8009c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c48:	9105      	str	r1, [sp, #20]
 8009c4a:	6800      	ldr	r0, [r0, #0]
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	a902      	add	r1, sp, #8
 8009c50:	f001 fc56 	bl	800b500 <_svfiprintf_r>
 8009c54:	9b02      	ldr	r3, [sp, #8]
 8009c56:	2200      	movs	r2, #0
 8009c58:	701a      	strb	r2, [r3, #0]
 8009c5a:	b01c      	add	sp, #112	; 0x70
 8009c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c60:	b003      	add	sp, #12
 8009c62:	4770      	bx	lr
 8009c64:	2000000c 	.word	0x2000000c
 8009c68:	ffff0208 	.word	0xffff0208

08009c6c <strcpy>:
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c72:	f803 2b01 	strb.w	r2, [r3], #1
 8009c76:	2a00      	cmp	r2, #0
 8009c78:	d1f9      	bne.n	8009c6e <strcpy+0x2>
 8009c7a:	4770      	bx	lr

08009c7c <__swbuf_r>:
 8009c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c7e:	460e      	mov	r6, r1
 8009c80:	4614      	mov	r4, r2
 8009c82:	4605      	mov	r5, r0
 8009c84:	b118      	cbz	r0, 8009c8e <__swbuf_r+0x12>
 8009c86:	6983      	ldr	r3, [r0, #24]
 8009c88:	b90b      	cbnz	r3, 8009c8e <__swbuf_r+0x12>
 8009c8a:	f000 ffed 	bl	800ac68 <__sinit>
 8009c8e:	4b21      	ldr	r3, [pc, #132]	; (8009d14 <__swbuf_r+0x98>)
 8009c90:	429c      	cmp	r4, r3
 8009c92:	d12a      	bne.n	8009cea <__swbuf_r+0x6e>
 8009c94:	686c      	ldr	r4, [r5, #4]
 8009c96:	69a3      	ldr	r3, [r4, #24]
 8009c98:	60a3      	str	r3, [r4, #8]
 8009c9a:	89a3      	ldrh	r3, [r4, #12]
 8009c9c:	071a      	lsls	r2, r3, #28
 8009c9e:	d52e      	bpl.n	8009cfe <__swbuf_r+0x82>
 8009ca0:	6923      	ldr	r3, [r4, #16]
 8009ca2:	b363      	cbz	r3, 8009cfe <__swbuf_r+0x82>
 8009ca4:	6923      	ldr	r3, [r4, #16]
 8009ca6:	6820      	ldr	r0, [r4, #0]
 8009ca8:	1ac0      	subs	r0, r0, r3
 8009caa:	6963      	ldr	r3, [r4, #20]
 8009cac:	b2f6      	uxtb	r6, r6
 8009cae:	4283      	cmp	r3, r0
 8009cb0:	4637      	mov	r7, r6
 8009cb2:	dc04      	bgt.n	8009cbe <__swbuf_r+0x42>
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	f000 ff6c 	bl	800ab94 <_fflush_r>
 8009cbc:	bb28      	cbnz	r0, 8009d0a <__swbuf_r+0x8e>
 8009cbe:	68a3      	ldr	r3, [r4, #8]
 8009cc0:	3b01      	subs	r3, #1
 8009cc2:	60a3      	str	r3, [r4, #8]
 8009cc4:	6823      	ldr	r3, [r4, #0]
 8009cc6:	1c5a      	adds	r2, r3, #1
 8009cc8:	6022      	str	r2, [r4, #0]
 8009cca:	701e      	strb	r6, [r3, #0]
 8009ccc:	6963      	ldr	r3, [r4, #20]
 8009cce:	3001      	adds	r0, #1
 8009cd0:	4283      	cmp	r3, r0
 8009cd2:	d004      	beq.n	8009cde <__swbuf_r+0x62>
 8009cd4:	89a3      	ldrh	r3, [r4, #12]
 8009cd6:	07db      	lsls	r3, r3, #31
 8009cd8:	d519      	bpl.n	8009d0e <__swbuf_r+0x92>
 8009cda:	2e0a      	cmp	r6, #10
 8009cdc:	d117      	bne.n	8009d0e <__swbuf_r+0x92>
 8009cde:	4621      	mov	r1, r4
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	f000 ff57 	bl	800ab94 <_fflush_r>
 8009ce6:	b190      	cbz	r0, 8009d0e <__swbuf_r+0x92>
 8009ce8:	e00f      	b.n	8009d0a <__swbuf_r+0x8e>
 8009cea:	4b0b      	ldr	r3, [pc, #44]	; (8009d18 <__swbuf_r+0x9c>)
 8009cec:	429c      	cmp	r4, r3
 8009cee:	d101      	bne.n	8009cf4 <__swbuf_r+0x78>
 8009cf0:	68ac      	ldr	r4, [r5, #8]
 8009cf2:	e7d0      	b.n	8009c96 <__swbuf_r+0x1a>
 8009cf4:	4b09      	ldr	r3, [pc, #36]	; (8009d1c <__swbuf_r+0xa0>)
 8009cf6:	429c      	cmp	r4, r3
 8009cf8:	bf08      	it	eq
 8009cfa:	68ec      	ldreq	r4, [r5, #12]
 8009cfc:	e7cb      	b.n	8009c96 <__swbuf_r+0x1a>
 8009cfe:	4621      	mov	r1, r4
 8009d00:	4628      	mov	r0, r5
 8009d02:	f000 f80d 	bl	8009d20 <__swsetup_r>
 8009d06:	2800      	cmp	r0, #0
 8009d08:	d0cc      	beq.n	8009ca4 <__swbuf_r+0x28>
 8009d0a:	f04f 37ff 	mov.w	r7, #4294967295
 8009d0e:	4638      	mov	r0, r7
 8009d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009d12:	bf00      	nop
 8009d14:	08013840 	.word	0x08013840
 8009d18:	08013860 	.word	0x08013860
 8009d1c:	08013820 	.word	0x08013820

08009d20 <__swsetup_r>:
 8009d20:	4b32      	ldr	r3, [pc, #200]	; (8009dec <__swsetup_r+0xcc>)
 8009d22:	b570      	push	{r4, r5, r6, lr}
 8009d24:	681d      	ldr	r5, [r3, #0]
 8009d26:	4606      	mov	r6, r0
 8009d28:	460c      	mov	r4, r1
 8009d2a:	b125      	cbz	r5, 8009d36 <__swsetup_r+0x16>
 8009d2c:	69ab      	ldr	r3, [r5, #24]
 8009d2e:	b913      	cbnz	r3, 8009d36 <__swsetup_r+0x16>
 8009d30:	4628      	mov	r0, r5
 8009d32:	f000 ff99 	bl	800ac68 <__sinit>
 8009d36:	4b2e      	ldr	r3, [pc, #184]	; (8009df0 <__swsetup_r+0xd0>)
 8009d38:	429c      	cmp	r4, r3
 8009d3a:	d10f      	bne.n	8009d5c <__swsetup_r+0x3c>
 8009d3c:	686c      	ldr	r4, [r5, #4]
 8009d3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	0715      	lsls	r5, r2, #28
 8009d46:	d42c      	bmi.n	8009da2 <__swsetup_r+0x82>
 8009d48:	06d0      	lsls	r0, r2, #27
 8009d4a:	d411      	bmi.n	8009d70 <__swsetup_r+0x50>
 8009d4c:	2209      	movs	r2, #9
 8009d4e:	6032      	str	r2, [r6, #0]
 8009d50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d54:	81a3      	strh	r3, [r4, #12]
 8009d56:	f04f 30ff 	mov.w	r0, #4294967295
 8009d5a:	e03e      	b.n	8009dda <__swsetup_r+0xba>
 8009d5c:	4b25      	ldr	r3, [pc, #148]	; (8009df4 <__swsetup_r+0xd4>)
 8009d5e:	429c      	cmp	r4, r3
 8009d60:	d101      	bne.n	8009d66 <__swsetup_r+0x46>
 8009d62:	68ac      	ldr	r4, [r5, #8]
 8009d64:	e7eb      	b.n	8009d3e <__swsetup_r+0x1e>
 8009d66:	4b24      	ldr	r3, [pc, #144]	; (8009df8 <__swsetup_r+0xd8>)
 8009d68:	429c      	cmp	r4, r3
 8009d6a:	bf08      	it	eq
 8009d6c:	68ec      	ldreq	r4, [r5, #12]
 8009d6e:	e7e6      	b.n	8009d3e <__swsetup_r+0x1e>
 8009d70:	0751      	lsls	r1, r2, #29
 8009d72:	d512      	bpl.n	8009d9a <__swsetup_r+0x7a>
 8009d74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d76:	b141      	cbz	r1, 8009d8a <__swsetup_r+0x6a>
 8009d78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009d7c:	4299      	cmp	r1, r3
 8009d7e:	d002      	beq.n	8009d86 <__swsetup_r+0x66>
 8009d80:	4630      	mov	r0, r6
 8009d82:	f7ff f98f 	bl	80090a4 <_free_r>
 8009d86:	2300      	movs	r3, #0
 8009d88:	6363      	str	r3, [r4, #52]	; 0x34
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009d90:	81a3      	strh	r3, [r4, #12]
 8009d92:	2300      	movs	r3, #0
 8009d94:	6063      	str	r3, [r4, #4]
 8009d96:	6923      	ldr	r3, [r4, #16]
 8009d98:	6023      	str	r3, [r4, #0]
 8009d9a:	89a3      	ldrh	r3, [r4, #12]
 8009d9c:	f043 0308 	orr.w	r3, r3, #8
 8009da0:	81a3      	strh	r3, [r4, #12]
 8009da2:	6923      	ldr	r3, [r4, #16]
 8009da4:	b94b      	cbnz	r3, 8009dba <__swsetup_r+0x9a>
 8009da6:	89a3      	ldrh	r3, [r4, #12]
 8009da8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009dac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009db0:	d003      	beq.n	8009dba <__swsetup_r+0x9a>
 8009db2:	4621      	mov	r1, r4
 8009db4:	4630      	mov	r0, r6
 8009db6:	f001 f813 	bl	800ade0 <__smakebuf_r>
 8009dba:	89a2      	ldrh	r2, [r4, #12]
 8009dbc:	f012 0301 	ands.w	r3, r2, #1
 8009dc0:	d00c      	beq.n	8009ddc <__swsetup_r+0xbc>
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60a3      	str	r3, [r4, #8]
 8009dc6:	6963      	ldr	r3, [r4, #20]
 8009dc8:	425b      	negs	r3, r3
 8009dca:	61a3      	str	r3, [r4, #24]
 8009dcc:	6923      	ldr	r3, [r4, #16]
 8009dce:	b953      	cbnz	r3, 8009de6 <__swsetup_r+0xc6>
 8009dd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009dd4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8009dd8:	d1ba      	bne.n	8009d50 <__swsetup_r+0x30>
 8009dda:	bd70      	pop	{r4, r5, r6, pc}
 8009ddc:	0792      	lsls	r2, r2, #30
 8009dde:	bf58      	it	pl
 8009de0:	6963      	ldrpl	r3, [r4, #20]
 8009de2:	60a3      	str	r3, [r4, #8]
 8009de4:	e7f2      	b.n	8009dcc <__swsetup_r+0xac>
 8009de6:	2000      	movs	r0, #0
 8009de8:	e7f7      	b.n	8009dda <__swsetup_r+0xba>
 8009dea:	bf00      	nop
 8009dec:	2000000c 	.word	0x2000000c
 8009df0:	08013840 	.word	0x08013840
 8009df4:	08013860 	.word	0x08013860
 8009df8:	08013820 	.word	0x08013820

08009dfc <quorem>:
 8009dfc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e00:	6903      	ldr	r3, [r0, #16]
 8009e02:	690c      	ldr	r4, [r1, #16]
 8009e04:	42a3      	cmp	r3, r4
 8009e06:	4680      	mov	r8, r0
 8009e08:	f2c0 8082 	blt.w	8009f10 <quorem+0x114>
 8009e0c:	3c01      	subs	r4, #1
 8009e0e:	f101 0714 	add.w	r7, r1, #20
 8009e12:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8009e16:	f100 0614 	add.w	r6, r0, #20
 8009e1a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8009e1e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8009e22:	eb06 030c 	add.w	r3, r6, ip
 8009e26:	3501      	adds	r5, #1
 8009e28:	eb07 090c 	add.w	r9, r7, ip
 8009e2c:	9301      	str	r3, [sp, #4]
 8009e2e:	fbb0 f5f5 	udiv	r5, r0, r5
 8009e32:	b395      	cbz	r5, 8009e9a <quorem+0x9e>
 8009e34:	f04f 0a00 	mov.w	sl, #0
 8009e38:	4638      	mov	r0, r7
 8009e3a:	46b6      	mov	lr, r6
 8009e3c:	46d3      	mov	fp, sl
 8009e3e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009e42:	b293      	uxth	r3, r2
 8009e44:	fb05 a303 	mla	r3, r5, r3, sl
 8009e48:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009e4c:	b29b      	uxth	r3, r3
 8009e4e:	ebab 0303 	sub.w	r3, fp, r3
 8009e52:	0c12      	lsrs	r2, r2, #16
 8009e54:	f8de b000 	ldr.w	fp, [lr]
 8009e58:	fb05 a202 	mla	r2, r5, r2, sl
 8009e5c:	fa13 f38b 	uxtah	r3, r3, fp
 8009e60:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8009e64:	fa1f fb82 	uxth.w	fp, r2
 8009e68:	f8de 2000 	ldr.w	r2, [lr]
 8009e6c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009e70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009e74:	b29b      	uxth	r3, r3
 8009e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009e7a:	4581      	cmp	r9, r0
 8009e7c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009e80:	f84e 3b04 	str.w	r3, [lr], #4
 8009e84:	d2db      	bcs.n	8009e3e <quorem+0x42>
 8009e86:	f856 300c 	ldr.w	r3, [r6, ip]
 8009e8a:	b933      	cbnz	r3, 8009e9a <quorem+0x9e>
 8009e8c:	9b01      	ldr	r3, [sp, #4]
 8009e8e:	3b04      	subs	r3, #4
 8009e90:	429e      	cmp	r6, r3
 8009e92:	461a      	mov	r2, r3
 8009e94:	d330      	bcc.n	8009ef8 <quorem+0xfc>
 8009e96:	f8c8 4010 	str.w	r4, [r8, #16]
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	f001 fa02 	bl	800b2a4 <__mcmp>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	db25      	blt.n	8009ef0 <quorem+0xf4>
 8009ea4:	3501      	adds	r5, #1
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	f04f 0c00 	mov.w	ip, #0
 8009eac:	f857 2b04 	ldr.w	r2, [r7], #4
 8009eb0:	f8d0 e000 	ldr.w	lr, [r0]
 8009eb4:	b293      	uxth	r3, r2
 8009eb6:	ebac 0303 	sub.w	r3, ip, r3
 8009eba:	0c12      	lsrs	r2, r2, #16
 8009ebc:	fa13 f38e 	uxtah	r3, r3, lr
 8009ec0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009ec4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009ec8:	b29b      	uxth	r3, r3
 8009eca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009ece:	45b9      	cmp	r9, r7
 8009ed0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009ed4:	f840 3b04 	str.w	r3, [r0], #4
 8009ed8:	d2e8      	bcs.n	8009eac <quorem+0xb0>
 8009eda:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009ede:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8009ee2:	b92a      	cbnz	r2, 8009ef0 <quorem+0xf4>
 8009ee4:	3b04      	subs	r3, #4
 8009ee6:	429e      	cmp	r6, r3
 8009ee8:	461a      	mov	r2, r3
 8009eea:	d30b      	bcc.n	8009f04 <quorem+0x108>
 8009eec:	f8c8 4010 	str.w	r4, [r8, #16]
 8009ef0:	4628      	mov	r0, r5
 8009ef2:	b003      	add	sp, #12
 8009ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef8:	6812      	ldr	r2, [r2, #0]
 8009efa:	3b04      	subs	r3, #4
 8009efc:	2a00      	cmp	r2, #0
 8009efe:	d1ca      	bne.n	8009e96 <quorem+0x9a>
 8009f00:	3c01      	subs	r4, #1
 8009f02:	e7c5      	b.n	8009e90 <quorem+0x94>
 8009f04:	6812      	ldr	r2, [r2, #0]
 8009f06:	3b04      	subs	r3, #4
 8009f08:	2a00      	cmp	r2, #0
 8009f0a:	d1ef      	bne.n	8009eec <quorem+0xf0>
 8009f0c:	3c01      	subs	r4, #1
 8009f0e:	e7ea      	b.n	8009ee6 <quorem+0xea>
 8009f10:	2000      	movs	r0, #0
 8009f12:	e7ee      	b.n	8009ef2 <quorem+0xf6>
 8009f14:	0000      	movs	r0, r0
	...

08009f18 <_dtoa_r>:
 8009f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1c:	ec57 6b10 	vmov	r6, r7, d0
 8009f20:	b097      	sub	sp, #92	; 0x5c
 8009f22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009f24:	9106      	str	r1, [sp, #24]
 8009f26:	4604      	mov	r4, r0
 8009f28:	920b      	str	r2, [sp, #44]	; 0x2c
 8009f2a:	9312      	str	r3, [sp, #72]	; 0x48
 8009f2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009f30:	e9cd 6700 	strd	r6, r7, [sp]
 8009f34:	b93d      	cbnz	r5, 8009f46 <_dtoa_r+0x2e>
 8009f36:	2010      	movs	r0, #16
 8009f38:	f7ff f89c 	bl	8009074 <malloc>
 8009f3c:	6260      	str	r0, [r4, #36]	; 0x24
 8009f3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009f42:	6005      	str	r5, [r0, #0]
 8009f44:	60c5      	str	r5, [r0, #12]
 8009f46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f48:	6819      	ldr	r1, [r3, #0]
 8009f4a:	b151      	cbz	r1, 8009f62 <_dtoa_r+0x4a>
 8009f4c:	685a      	ldr	r2, [r3, #4]
 8009f4e:	604a      	str	r2, [r1, #4]
 8009f50:	2301      	movs	r3, #1
 8009f52:	4093      	lsls	r3, r2
 8009f54:	608b      	str	r3, [r1, #8]
 8009f56:	4620      	mov	r0, r4
 8009f58:	f000 ffc3 	bl	800aee2 <_Bfree>
 8009f5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f5e:	2200      	movs	r2, #0
 8009f60:	601a      	str	r2, [r3, #0]
 8009f62:	1e3b      	subs	r3, r7, #0
 8009f64:	bfbb      	ittet	lt
 8009f66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009f6a:	9301      	strlt	r3, [sp, #4]
 8009f6c:	2300      	movge	r3, #0
 8009f6e:	2201      	movlt	r2, #1
 8009f70:	bfac      	ite	ge
 8009f72:	f8c8 3000 	strge.w	r3, [r8]
 8009f76:	f8c8 2000 	strlt.w	r2, [r8]
 8009f7a:	4baf      	ldr	r3, [pc, #700]	; (800a238 <_dtoa_r+0x320>)
 8009f7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009f80:	ea33 0308 	bics.w	r3, r3, r8
 8009f84:	d114      	bne.n	8009fb0 <_dtoa_r+0x98>
 8009f86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f88:	f242 730f 	movw	r3, #9999	; 0x270f
 8009f8c:	6013      	str	r3, [r2, #0]
 8009f8e:	9b00      	ldr	r3, [sp, #0]
 8009f90:	b923      	cbnz	r3, 8009f9c <_dtoa_r+0x84>
 8009f92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8009f96:	2800      	cmp	r0, #0
 8009f98:	f000 8542 	beq.w	800aa20 <_dtoa_r+0xb08>
 8009f9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009f9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800a24c <_dtoa_r+0x334>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 8544 	beq.w	800aa30 <_dtoa_r+0xb18>
 8009fa8:	f10b 0303 	add.w	r3, fp, #3
 8009fac:	f000 bd3e 	b.w	800aa2c <_dtoa_r+0xb14>
 8009fb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	4630      	mov	r0, r6
 8009fba:	4639      	mov	r1, r7
 8009fbc:	f7f6 fdb4 	bl	8000b28 <__aeabi_dcmpeq>
 8009fc0:	4681      	mov	r9, r0
 8009fc2:	b168      	cbz	r0, 8009fe0 <_dtoa_r+0xc8>
 8009fc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	6013      	str	r3, [r2, #0]
 8009fca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	f000 8524 	beq.w	800aa1a <_dtoa_r+0xb02>
 8009fd2:	4b9a      	ldr	r3, [pc, #616]	; (800a23c <_dtoa_r+0x324>)
 8009fd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fd6:	f103 3bff 	add.w	fp, r3, #4294967295
 8009fda:	6013      	str	r3, [r2, #0]
 8009fdc:	f000 bd28 	b.w	800aa30 <_dtoa_r+0xb18>
 8009fe0:	aa14      	add	r2, sp, #80	; 0x50
 8009fe2:	a915      	add	r1, sp, #84	; 0x54
 8009fe4:	ec47 6b10 	vmov	d0, r6, r7
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f001 f9d2 	bl	800b392 <__d2b>
 8009fee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009ff2:	9004      	str	r0, [sp, #16]
 8009ff4:	2d00      	cmp	r5, #0
 8009ff6:	d07c      	beq.n	800a0f2 <_dtoa_r+0x1da>
 8009ff8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009ffc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800a000:	46b2      	mov	sl, r6
 800a002:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800a006:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a00a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800a00e:	2200      	movs	r2, #0
 800a010:	4b8b      	ldr	r3, [pc, #556]	; (800a240 <_dtoa_r+0x328>)
 800a012:	4650      	mov	r0, sl
 800a014:	4659      	mov	r1, fp
 800a016:	f7f6 f967 	bl	80002e8 <__aeabi_dsub>
 800a01a:	a381      	add	r3, pc, #516	; (adr r3, 800a220 <_dtoa_r+0x308>)
 800a01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a020:	f7f6 fb1a 	bl	8000658 <__aeabi_dmul>
 800a024:	a380      	add	r3, pc, #512	; (adr r3, 800a228 <_dtoa_r+0x310>)
 800a026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a02a:	f7f6 f95f 	bl	80002ec <__adddf3>
 800a02e:	4606      	mov	r6, r0
 800a030:	4628      	mov	r0, r5
 800a032:	460f      	mov	r7, r1
 800a034:	f7f6 faa6 	bl	8000584 <__aeabi_i2d>
 800a038:	a37d      	add	r3, pc, #500	; (adr r3, 800a230 <_dtoa_r+0x318>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	f7f6 fb0b 	bl	8000658 <__aeabi_dmul>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4630      	mov	r0, r6
 800a048:	4639      	mov	r1, r7
 800a04a:	f7f6 f94f 	bl	80002ec <__adddf3>
 800a04e:	4606      	mov	r6, r0
 800a050:	460f      	mov	r7, r1
 800a052:	f7f6 fdb1 	bl	8000bb8 <__aeabi_d2iz>
 800a056:	2200      	movs	r2, #0
 800a058:	4682      	mov	sl, r0
 800a05a:	2300      	movs	r3, #0
 800a05c:	4630      	mov	r0, r6
 800a05e:	4639      	mov	r1, r7
 800a060:	f7f6 fd6c 	bl	8000b3c <__aeabi_dcmplt>
 800a064:	b148      	cbz	r0, 800a07a <_dtoa_r+0x162>
 800a066:	4650      	mov	r0, sl
 800a068:	f7f6 fa8c 	bl	8000584 <__aeabi_i2d>
 800a06c:	4632      	mov	r2, r6
 800a06e:	463b      	mov	r3, r7
 800a070:	f7f6 fd5a 	bl	8000b28 <__aeabi_dcmpeq>
 800a074:	b908      	cbnz	r0, 800a07a <_dtoa_r+0x162>
 800a076:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a07a:	f1ba 0f16 	cmp.w	sl, #22
 800a07e:	d859      	bhi.n	800a134 <_dtoa_r+0x21c>
 800a080:	4970      	ldr	r1, [pc, #448]	; (800a244 <_dtoa_r+0x32c>)
 800a082:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a08a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a08e:	f7f6 fd73 	bl	8000b78 <__aeabi_dcmpgt>
 800a092:	2800      	cmp	r0, #0
 800a094:	d050      	beq.n	800a138 <_dtoa_r+0x220>
 800a096:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a09a:	2300      	movs	r3, #0
 800a09c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a09e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a0a0:	1b5d      	subs	r5, r3, r5
 800a0a2:	f1b5 0801 	subs.w	r8, r5, #1
 800a0a6:	bf49      	itett	mi
 800a0a8:	f1c5 0301 	rsbmi	r3, r5, #1
 800a0ac:	2300      	movpl	r3, #0
 800a0ae:	9305      	strmi	r3, [sp, #20]
 800a0b0:	f04f 0800 	movmi.w	r8, #0
 800a0b4:	bf58      	it	pl
 800a0b6:	9305      	strpl	r3, [sp, #20]
 800a0b8:	f1ba 0f00 	cmp.w	sl, #0
 800a0bc:	db3e      	blt.n	800a13c <_dtoa_r+0x224>
 800a0be:	2300      	movs	r3, #0
 800a0c0:	44d0      	add	r8, sl
 800a0c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800a0c6:	9307      	str	r3, [sp, #28]
 800a0c8:	9b06      	ldr	r3, [sp, #24]
 800a0ca:	2b09      	cmp	r3, #9
 800a0cc:	f200 8090 	bhi.w	800a1f0 <_dtoa_r+0x2d8>
 800a0d0:	2b05      	cmp	r3, #5
 800a0d2:	bfc4      	itt	gt
 800a0d4:	3b04      	subgt	r3, #4
 800a0d6:	9306      	strgt	r3, [sp, #24]
 800a0d8:	9b06      	ldr	r3, [sp, #24]
 800a0da:	f1a3 0302 	sub.w	r3, r3, #2
 800a0de:	bfcc      	ite	gt
 800a0e0:	2500      	movgt	r5, #0
 800a0e2:	2501      	movle	r5, #1
 800a0e4:	2b03      	cmp	r3, #3
 800a0e6:	f200 808f 	bhi.w	800a208 <_dtoa_r+0x2f0>
 800a0ea:	e8df f003 	tbb	[pc, r3]
 800a0ee:	7f7d      	.short	0x7f7d
 800a0f0:	7131      	.short	0x7131
 800a0f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800a0f6:	441d      	add	r5, r3
 800a0f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800a0fc:	2820      	cmp	r0, #32
 800a0fe:	dd13      	ble.n	800a128 <_dtoa_r+0x210>
 800a100:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800a104:	9b00      	ldr	r3, [sp, #0]
 800a106:	fa08 f800 	lsl.w	r8, r8, r0
 800a10a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800a10e:	fa23 f000 	lsr.w	r0, r3, r0
 800a112:	ea48 0000 	orr.w	r0, r8, r0
 800a116:	f7f6 fa25 	bl	8000564 <__aeabi_ui2d>
 800a11a:	2301      	movs	r3, #1
 800a11c:	4682      	mov	sl, r0
 800a11e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800a122:	3d01      	subs	r5, #1
 800a124:	9313      	str	r3, [sp, #76]	; 0x4c
 800a126:	e772      	b.n	800a00e <_dtoa_r+0xf6>
 800a128:	9b00      	ldr	r3, [sp, #0]
 800a12a:	f1c0 0020 	rsb	r0, r0, #32
 800a12e:	fa03 f000 	lsl.w	r0, r3, r0
 800a132:	e7f0      	b.n	800a116 <_dtoa_r+0x1fe>
 800a134:	2301      	movs	r3, #1
 800a136:	e7b1      	b.n	800a09c <_dtoa_r+0x184>
 800a138:	900f      	str	r0, [sp, #60]	; 0x3c
 800a13a:	e7b0      	b.n	800a09e <_dtoa_r+0x186>
 800a13c:	9b05      	ldr	r3, [sp, #20]
 800a13e:	eba3 030a 	sub.w	r3, r3, sl
 800a142:	9305      	str	r3, [sp, #20]
 800a144:	f1ca 0300 	rsb	r3, sl, #0
 800a148:	9307      	str	r3, [sp, #28]
 800a14a:	2300      	movs	r3, #0
 800a14c:	930e      	str	r3, [sp, #56]	; 0x38
 800a14e:	e7bb      	b.n	800a0c8 <_dtoa_r+0x1b0>
 800a150:	2301      	movs	r3, #1
 800a152:	930a      	str	r3, [sp, #40]	; 0x28
 800a154:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a156:	2b00      	cmp	r3, #0
 800a158:	dd59      	ble.n	800a20e <_dtoa_r+0x2f6>
 800a15a:	9302      	str	r3, [sp, #8]
 800a15c:	4699      	mov	r9, r3
 800a15e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a160:	2200      	movs	r2, #0
 800a162:	6072      	str	r2, [r6, #4]
 800a164:	2204      	movs	r2, #4
 800a166:	f102 0014 	add.w	r0, r2, #20
 800a16a:	4298      	cmp	r0, r3
 800a16c:	6871      	ldr	r1, [r6, #4]
 800a16e:	d953      	bls.n	800a218 <_dtoa_r+0x300>
 800a170:	4620      	mov	r0, r4
 800a172:	f000 fe82 	bl	800ae7a <_Balloc>
 800a176:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a178:	6030      	str	r0, [r6, #0]
 800a17a:	f1b9 0f0e 	cmp.w	r9, #14
 800a17e:	f8d3 b000 	ldr.w	fp, [r3]
 800a182:	f200 80e6 	bhi.w	800a352 <_dtoa_r+0x43a>
 800a186:	2d00      	cmp	r5, #0
 800a188:	f000 80e3 	beq.w	800a352 <_dtoa_r+0x43a>
 800a18c:	ed9d 7b00 	vldr	d7, [sp]
 800a190:	f1ba 0f00 	cmp.w	sl, #0
 800a194:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800a198:	dd74      	ble.n	800a284 <_dtoa_r+0x36c>
 800a19a:	4a2a      	ldr	r2, [pc, #168]	; (800a244 <_dtoa_r+0x32c>)
 800a19c:	f00a 030f 	and.w	r3, sl, #15
 800a1a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a1a4:	ed93 7b00 	vldr	d7, [r3]
 800a1a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800a1ac:	06f0      	lsls	r0, r6, #27
 800a1ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 800a1b2:	d565      	bpl.n	800a280 <_dtoa_r+0x368>
 800a1b4:	4b24      	ldr	r3, [pc, #144]	; (800a248 <_dtoa_r+0x330>)
 800a1b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a1ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a1be:	f7f6 fb75 	bl	80008ac <__aeabi_ddiv>
 800a1c2:	e9cd 0100 	strd	r0, r1, [sp]
 800a1c6:	f006 060f 	and.w	r6, r6, #15
 800a1ca:	2503      	movs	r5, #3
 800a1cc:	4f1e      	ldr	r7, [pc, #120]	; (800a248 <_dtoa_r+0x330>)
 800a1ce:	e04c      	b.n	800a26a <_dtoa_r+0x352>
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	930a      	str	r3, [sp, #40]	; 0x28
 800a1d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1d6:	4453      	add	r3, sl
 800a1d8:	f103 0901 	add.w	r9, r3, #1
 800a1dc:	9302      	str	r3, [sp, #8]
 800a1de:	464b      	mov	r3, r9
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	bfb8      	it	lt
 800a1e4:	2301      	movlt	r3, #1
 800a1e6:	e7ba      	b.n	800a15e <_dtoa_r+0x246>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	e7b2      	b.n	800a152 <_dtoa_r+0x23a>
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	e7f0      	b.n	800a1d2 <_dtoa_r+0x2ba>
 800a1f0:	2501      	movs	r5, #1
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	9306      	str	r3, [sp, #24]
 800a1f6:	950a      	str	r5, [sp, #40]	; 0x28
 800a1f8:	f04f 33ff 	mov.w	r3, #4294967295
 800a1fc:	9302      	str	r3, [sp, #8]
 800a1fe:	4699      	mov	r9, r3
 800a200:	2200      	movs	r2, #0
 800a202:	2312      	movs	r3, #18
 800a204:	920b      	str	r2, [sp, #44]	; 0x2c
 800a206:	e7aa      	b.n	800a15e <_dtoa_r+0x246>
 800a208:	2301      	movs	r3, #1
 800a20a:	930a      	str	r3, [sp, #40]	; 0x28
 800a20c:	e7f4      	b.n	800a1f8 <_dtoa_r+0x2e0>
 800a20e:	2301      	movs	r3, #1
 800a210:	9302      	str	r3, [sp, #8]
 800a212:	4699      	mov	r9, r3
 800a214:	461a      	mov	r2, r3
 800a216:	e7f5      	b.n	800a204 <_dtoa_r+0x2ec>
 800a218:	3101      	adds	r1, #1
 800a21a:	6071      	str	r1, [r6, #4]
 800a21c:	0052      	lsls	r2, r2, #1
 800a21e:	e7a2      	b.n	800a166 <_dtoa_r+0x24e>
 800a220:	636f4361 	.word	0x636f4361
 800a224:	3fd287a7 	.word	0x3fd287a7
 800a228:	8b60c8b3 	.word	0x8b60c8b3
 800a22c:	3fc68a28 	.word	0x3fc68a28
 800a230:	509f79fb 	.word	0x509f79fb
 800a234:	3fd34413 	.word	0x3fd34413
 800a238:	7ff00000 	.word	0x7ff00000
 800a23c:	080137ed 	.word	0x080137ed
 800a240:	3ff80000 	.word	0x3ff80000
 800a244:	080138a8 	.word	0x080138a8
 800a248:	08013880 	.word	0x08013880
 800a24c:	08013819 	.word	0x08013819
 800a250:	07f1      	lsls	r1, r6, #31
 800a252:	d508      	bpl.n	800a266 <_dtoa_r+0x34e>
 800a254:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a258:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a25c:	f7f6 f9fc 	bl	8000658 <__aeabi_dmul>
 800a260:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a264:	3501      	adds	r5, #1
 800a266:	1076      	asrs	r6, r6, #1
 800a268:	3708      	adds	r7, #8
 800a26a:	2e00      	cmp	r6, #0
 800a26c:	d1f0      	bne.n	800a250 <_dtoa_r+0x338>
 800a26e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800a272:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a276:	f7f6 fb19 	bl	80008ac <__aeabi_ddiv>
 800a27a:	e9cd 0100 	strd	r0, r1, [sp]
 800a27e:	e01a      	b.n	800a2b6 <_dtoa_r+0x39e>
 800a280:	2502      	movs	r5, #2
 800a282:	e7a3      	b.n	800a1cc <_dtoa_r+0x2b4>
 800a284:	f000 80a0 	beq.w	800a3c8 <_dtoa_r+0x4b0>
 800a288:	f1ca 0600 	rsb	r6, sl, #0
 800a28c:	4b9f      	ldr	r3, [pc, #636]	; (800a50c <_dtoa_r+0x5f4>)
 800a28e:	4fa0      	ldr	r7, [pc, #640]	; (800a510 <_dtoa_r+0x5f8>)
 800a290:	f006 020f 	and.w	r2, r6, #15
 800a294:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a29c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a2a0:	f7f6 f9da 	bl	8000658 <__aeabi_dmul>
 800a2a4:	e9cd 0100 	strd	r0, r1, [sp]
 800a2a8:	1136      	asrs	r6, r6, #4
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	2502      	movs	r5, #2
 800a2ae:	2e00      	cmp	r6, #0
 800a2b0:	d17f      	bne.n	800a3b2 <_dtoa_r+0x49a>
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d1e1      	bne.n	800a27a <_dtoa_r+0x362>
 800a2b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	f000 8087 	beq.w	800a3cc <_dtoa_r+0x4b4>
 800a2be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	4b93      	ldr	r3, [pc, #588]	; (800a514 <_dtoa_r+0x5fc>)
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	4639      	mov	r1, r7
 800a2ca:	f7f6 fc37 	bl	8000b3c <__aeabi_dcmplt>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d07c      	beq.n	800a3cc <_dtoa_r+0x4b4>
 800a2d2:	f1b9 0f00 	cmp.w	r9, #0
 800a2d6:	d079      	beq.n	800a3cc <_dtoa_r+0x4b4>
 800a2d8:	9b02      	ldr	r3, [sp, #8]
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	dd35      	ble.n	800a34a <_dtoa_r+0x432>
 800a2de:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a2e2:	9308      	str	r3, [sp, #32]
 800a2e4:	4639      	mov	r1, r7
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	4b8b      	ldr	r3, [pc, #556]	; (800a518 <_dtoa_r+0x600>)
 800a2ea:	4630      	mov	r0, r6
 800a2ec:	f7f6 f9b4 	bl	8000658 <__aeabi_dmul>
 800a2f0:	e9cd 0100 	strd	r0, r1, [sp]
 800a2f4:	9f02      	ldr	r7, [sp, #8]
 800a2f6:	3501      	adds	r5, #1
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	f7f6 f943 	bl	8000584 <__aeabi_i2d>
 800a2fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a302:	f7f6 f9a9 	bl	8000658 <__aeabi_dmul>
 800a306:	2200      	movs	r2, #0
 800a308:	4b84      	ldr	r3, [pc, #528]	; (800a51c <_dtoa_r+0x604>)
 800a30a:	f7f5 ffef 	bl	80002ec <__adddf3>
 800a30e:	4605      	mov	r5, r0
 800a310:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a314:	2f00      	cmp	r7, #0
 800a316:	d15d      	bne.n	800a3d4 <_dtoa_r+0x4bc>
 800a318:	2200      	movs	r2, #0
 800a31a:	4b81      	ldr	r3, [pc, #516]	; (800a520 <_dtoa_r+0x608>)
 800a31c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a320:	f7f5 ffe2 	bl	80002e8 <__aeabi_dsub>
 800a324:	462a      	mov	r2, r5
 800a326:	4633      	mov	r3, r6
 800a328:	e9cd 0100 	strd	r0, r1, [sp]
 800a32c:	f7f6 fc24 	bl	8000b78 <__aeabi_dcmpgt>
 800a330:	2800      	cmp	r0, #0
 800a332:	f040 8288 	bne.w	800a846 <_dtoa_r+0x92e>
 800a336:	462a      	mov	r2, r5
 800a338:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a33c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a340:	f7f6 fbfc 	bl	8000b3c <__aeabi_dcmplt>
 800a344:	2800      	cmp	r0, #0
 800a346:	f040 827c 	bne.w	800a842 <_dtoa_r+0x92a>
 800a34a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a34e:	e9cd 2300 	strd	r2, r3, [sp]
 800a352:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a354:	2b00      	cmp	r3, #0
 800a356:	f2c0 8150 	blt.w	800a5fa <_dtoa_r+0x6e2>
 800a35a:	f1ba 0f0e 	cmp.w	sl, #14
 800a35e:	f300 814c 	bgt.w	800a5fa <_dtoa_r+0x6e2>
 800a362:	4b6a      	ldr	r3, [pc, #424]	; (800a50c <_dtoa_r+0x5f4>)
 800a364:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a368:	ed93 7b00 	vldr	d7, [r3]
 800a36c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a36e:	2b00      	cmp	r3, #0
 800a370:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a374:	f280 80d8 	bge.w	800a528 <_dtoa_r+0x610>
 800a378:	f1b9 0f00 	cmp.w	r9, #0
 800a37c:	f300 80d4 	bgt.w	800a528 <_dtoa_r+0x610>
 800a380:	f040 825e 	bne.w	800a840 <_dtoa_r+0x928>
 800a384:	2200      	movs	r2, #0
 800a386:	4b66      	ldr	r3, [pc, #408]	; (800a520 <_dtoa_r+0x608>)
 800a388:	ec51 0b17 	vmov	r0, r1, d7
 800a38c:	f7f6 f964 	bl	8000658 <__aeabi_dmul>
 800a390:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a394:	f7f6 fbe6 	bl	8000b64 <__aeabi_dcmpge>
 800a398:	464f      	mov	r7, r9
 800a39a:	464e      	mov	r6, r9
 800a39c:	2800      	cmp	r0, #0
 800a39e:	f040 8234 	bne.w	800a80a <_dtoa_r+0x8f2>
 800a3a2:	2331      	movs	r3, #49	; 0x31
 800a3a4:	f10b 0501 	add.w	r5, fp, #1
 800a3a8:	f88b 3000 	strb.w	r3, [fp]
 800a3ac:	f10a 0a01 	add.w	sl, sl, #1
 800a3b0:	e22f      	b.n	800a812 <_dtoa_r+0x8fa>
 800a3b2:	07f2      	lsls	r2, r6, #31
 800a3b4:	d505      	bpl.n	800a3c2 <_dtoa_r+0x4aa>
 800a3b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3ba:	f7f6 f94d 	bl	8000658 <__aeabi_dmul>
 800a3be:	3501      	adds	r5, #1
 800a3c0:	2301      	movs	r3, #1
 800a3c2:	1076      	asrs	r6, r6, #1
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	e772      	b.n	800a2ae <_dtoa_r+0x396>
 800a3c8:	2502      	movs	r5, #2
 800a3ca:	e774      	b.n	800a2b6 <_dtoa_r+0x39e>
 800a3cc:	f8cd a020 	str.w	sl, [sp, #32]
 800a3d0:	464f      	mov	r7, r9
 800a3d2:	e791      	b.n	800a2f8 <_dtoa_r+0x3e0>
 800a3d4:	4b4d      	ldr	r3, [pc, #308]	; (800a50c <_dtoa_r+0x5f4>)
 800a3d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a3da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800a3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d047      	beq.n	800a474 <_dtoa_r+0x55c>
 800a3e4:	4602      	mov	r2, r0
 800a3e6:	460b      	mov	r3, r1
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	494e      	ldr	r1, [pc, #312]	; (800a524 <_dtoa_r+0x60c>)
 800a3ec:	f7f6 fa5e 	bl	80008ac <__aeabi_ddiv>
 800a3f0:	462a      	mov	r2, r5
 800a3f2:	4633      	mov	r3, r6
 800a3f4:	f7f5 ff78 	bl	80002e8 <__aeabi_dsub>
 800a3f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a3fc:	465d      	mov	r5, fp
 800a3fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a402:	f7f6 fbd9 	bl	8000bb8 <__aeabi_d2iz>
 800a406:	4606      	mov	r6, r0
 800a408:	f7f6 f8bc 	bl	8000584 <__aeabi_i2d>
 800a40c:	4602      	mov	r2, r0
 800a40e:	460b      	mov	r3, r1
 800a410:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a414:	f7f5 ff68 	bl	80002e8 <__aeabi_dsub>
 800a418:	3630      	adds	r6, #48	; 0x30
 800a41a:	f805 6b01 	strb.w	r6, [r5], #1
 800a41e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a422:	e9cd 0100 	strd	r0, r1, [sp]
 800a426:	f7f6 fb89 	bl	8000b3c <__aeabi_dcmplt>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	d163      	bne.n	800a4f6 <_dtoa_r+0x5de>
 800a42e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a432:	2000      	movs	r0, #0
 800a434:	4937      	ldr	r1, [pc, #220]	; (800a514 <_dtoa_r+0x5fc>)
 800a436:	f7f5 ff57 	bl	80002e8 <__aeabi_dsub>
 800a43a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a43e:	f7f6 fb7d 	bl	8000b3c <__aeabi_dcmplt>
 800a442:	2800      	cmp	r0, #0
 800a444:	f040 80b7 	bne.w	800a5b6 <_dtoa_r+0x69e>
 800a448:	eba5 030b 	sub.w	r3, r5, fp
 800a44c:	429f      	cmp	r7, r3
 800a44e:	f77f af7c 	ble.w	800a34a <_dtoa_r+0x432>
 800a452:	2200      	movs	r2, #0
 800a454:	4b30      	ldr	r3, [pc, #192]	; (800a518 <_dtoa_r+0x600>)
 800a456:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a45a:	f7f6 f8fd 	bl	8000658 <__aeabi_dmul>
 800a45e:	2200      	movs	r2, #0
 800a460:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a464:	4b2c      	ldr	r3, [pc, #176]	; (800a518 <_dtoa_r+0x600>)
 800a466:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a46a:	f7f6 f8f5 	bl	8000658 <__aeabi_dmul>
 800a46e:	e9cd 0100 	strd	r0, r1, [sp]
 800a472:	e7c4      	b.n	800a3fe <_dtoa_r+0x4e6>
 800a474:	462a      	mov	r2, r5
 800a476:	4633      	mov	r3, r6
 800a478:	f7f6 f8ee 	bl	8000658 <__aeabi_dmul>
 800a47c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800a480:	eb0b 0507 	add.w	r5, fp, r7
 800a484:	465e      	mov	r6, fp
 800a486:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a48a:	f7f6 fb95 	bl	8000bb8 <__aeabi_d2iz>
 800a48e:	4607      	mov	r7, r0
 800a490:	f7f6 f878 	bl	8000584 <__aeabi_i2d>
 800a494:	3730      	adds	r7, #48	; 0x30
 800a496:	4602      	mov	r2, r0
 800a498:	460b      	mov	r3, r1
 800a49a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a49e:	f7f5 ff23 	bl	80002e8 <__aeabi_dsub>
 800a4a2:	f806 7b01 	strb.w	r7, [r6], #1
 800a4a6:	42ae      	cmp	r6, r5
 800a4a8:	e9cd 0100 	strd	r0, r1, [sp]
 800a4ac:	f04f 0200 	mov.w	r2, #0
 800a4b0:	d126      	bne.n	800a500 <_dtoa_r+0x5e8>
 800a4b2:	4b1c      	ldr	r3, [pc, #112]	; (800a524 <_dtoa_r+0x60c>)
 800a4b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a4b8:	f7f5 ff18 	bl	80002ec <__adddf3>
 800a4bc:	4602      	mov	r2, r0
 800a4be:	460b      	mov	r3, r1
 800a4c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4c4:	f7f6 fb58 	bl	8000b78 <__aeabi_dcmpgt>
 800a4c8:	2800      	cmp	r0, #0
 800a4ca:	d174      	bne.n	800a5b6 <_dtoa_r+0x69e>
 800a4cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	4914      	ldr	r1, [pc, #80]	; (800a524 <_dtoa_r+0x60c>)
 800a4d4:	f7f5 ff08 	bl	80002e8 <__aeabi_dsub>
 800a4d8:	4602      	mov	r2, r0
 800a4da:	460b      	mov	r3, r1
 800a4dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a4e0:	f7f6 fb2c 	bl	8000b3c <__aeabi_dcmplt>
 800a4e4:	2800      	cmp	r0, #0
 800a4e6:	f43f af30 	beq.w	800a34a <_dtoa_r+0x432>
 800a4ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a4ee:	2b30      	cmp	r3, #48	; 0x30
 800a4f0:	f105 32ff 	add.w	r2, r5, #4294967295
 800a4f4:	d002      	beq.n	800a4fc <_dtoa_r+0x5e4>
 800a4f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a4fa:	e04a      	b.n	800a592 <_dtoa_r+0x67a>
 800a4fc:	4615      	mov	r5, r2
 800a4fe:	e7f4      	b.n	800a4ea <_dtoa_r+0x5d2>
 800a500:	4b05      	ldr	r3, [pc, #20]	; (800a518 <_dtoa_r+0x600>)
 800a502:	f7f6 f8a9 	bl	8000658 <__aeabi_dmul>
 800a506:	e9cd 0100 	strd	r0, r1, [sp]
 800a50a:	e7bc      	b.n	800a486 <_dtoa_r+0x56e>
 800a50c:	080138a8 	.word	0x080138a8
 800a510:	08013880 	.word	0x08013880
 800a514:	3ff00000 	.word	0x3ff00000
 800a518:	40240000 	.word	0x40240000
 800a51c:	401c0000 	.word	0x401c0000
 800a520:	40140000 	.word	0x40140000
 800a524:	3fe00000 	.word	0x3fe00000
 800a528:	e9dd 6700 	ldrd	r6, r7, [sp]
 800a52c:	465d      	mov	r5, fp
 800a52e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a532:	4630      	mov	r0, r6
 800a534:	4639      	mov	r1, r7
 800a536:	f7f6 f9b9 	bl	80008ac <__aeabi_ddiv>
 800a53a:	f7f6 fb3d 	bl	8000bb8 <__aeabi_d2iz>
 800a53e:	4680      	mov	r8, r0
 800a540:	f7f6 f820 	bl	8000584 <__aeabi_i2d>
 800a544:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a548:	f7f6 f886 	bl	8000658 <__aeabi_dmul>
 800a54c:	4602      	mov	r2, r0
 800a54e:	460b      	mov	r3, r1
 800a550:	4630      	mov	r0, r6
 800a552:	4639      	mov	r1, r7
 800a554:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800a558:	f7f5 fec6 	bl	80002e8 <__aeabi_dsub>
 800a55c:	f805 6b01 	strb.w	r6, [r5], #1
 800a560:	eba5 060b 	sub.w	r6, r5, fp
 800a564:	45b1      	cmp	r9, r6
 800a566:	4602      	mov	r2, r0
 800a568:	460b      	mov	r3, r1
 800a56a:	d139      	bne.n	800a5e0 <_dtoa_r+0x6c8>
 800a56c:	f7f5 febe 	bl	80002ec <__adddf3>
 800a570:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a574:	4606      	mov	r6, r0
 800a576:	460f      	mov	r7, r1
 800a578:	f7f6 fafe 	bl	8000b78 <__aeabi_dcmpgt>
 800a57c:	b9c8      	cbnz	r0, 800a5b2 <_dtoa_r+0x69a>
 800a57e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a582:	4630      	mov	r0, r6
 800a584:	4639      	mov	r1, r7
 800a586:	f7f6 facf 	bl	8000b28 <__aeabi_dcmpeq>
 800a58a:	b110      	cbz	r0, 800a592 <_dtoa_r+0x67a>
 800a58c:	f018 0f01 	tst.w	r8, #1
 800a590:	d10f      	bne.n	800a5b2 <_dtoa_r+0x69a>
 800a592:	9904      	ldr	r1, [sp, #16]
 800a594:	4620      	mov	r0, r4
 800a596:	f000 fca4 	bl	800aee2 <_Bfree>
 800a59a:	2300      	movs	r3, #0
 800a59c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a59e:	702b      	strb	r3, [r5, #0]
 800a5a0:	f10a 0301 	add.w	r3, sl, #1
 800a5a4:	6013      	str	r3, [r2, #0]
 800a5a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	f000 8241 	beq.w	800aa30 <_dtoa_r+0xb18>
 800a5ae:	601d      	str	r5, [r3, #0]
 800a5b0:	e23e      	b.n	800aa30 <_dtoa_r+0xb18>
 800a5b2:	f8cd a020 	str.w	sl, [sp, #32]
 800a5b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a5ba:	2a39      	cmp	r2, #57	; 0x39
 800a5bc:	f105 33ff 	add.w	r3, r5, #4294967295
 800a5c0:	d108      	bne.n	800a5d4 <_dtoa_r+0x6bc>
 800a5c2:	459b      	cmp	fp, r3
 800a5c4:	d10a      	bne.n	800a5dc <_dtoa_r+0x6c4>
 800a5c6:	9b08      	ldr	r3, [sp, #32]
 800a5c8:	3301      	adds	r3, #1
 800a5ca:	9308      	str	r3, [sp, #32]
 800a5cc:	2330      	movs	r3, #48	; 0x30
 800a5ce:	f88b 3000 	strb.w	r3, [fp]
 800a5d2:	465b      	mov	r3, fp
 800a5d4:	781a      	ldrb	r2, [r3, #0]
 800a5d6:	3201      	adds	r2, #1
 800a5d8:	701a      	strb	r2, [r3, #0]
 800a5da:	e78c      	b.n	800a4f6 <_dtoa_r+0x5de>
 800a5dc:	461d      	mov	r5, r3
 800a5de:	e7ea      	b.n	800a5b6 <_dtoa_r+0x69e>
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	4b9b      	ldr	r3, [pc, #620]	; (800a850 <_dtoa_r+0x938>)
 800a5e4:	f7f6 f838 	bl	8000658 <__aeabi_dmul>
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	4606      	mov	r6, r0
 800a5ee:	460f      	mov	r7, r1
 800a5f0:	f7f6 fa9a 	bl	8000b28 <__aeabi_dcmpeq>
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d09a      	beq.n	800a52e <_dtoa_r+0x616>
 800a5f8:	e7cb      	b.n	800a592 <_dtoa_r+0x67a>
 800a5fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5fc:	2a00      	cmp	r2, #0
 800a5fe:	f000 808b 	beq.w	800a718 <_dtoa_r+0x800>
 800a602:	9a06      	ldr	r2, [sp, #24]
 800a604:	2a01      	cmp	r2, #1
 800a606:	dc6e      	bgt.n	800a6e6 <_dtoa_r+0x7ce>
 800a608:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a60a:	2a00      	cmp	r2, #0
 800a60c:	d067      	beq.n	800a6de <_dtoa_r+0x7c6>
 800a60e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a612:	9f07      	ldr	r7, [sp, #28]
 800a614:	9d05      	ldr	r5, [sp, #20]
 800a616:	9a05      	ldr	r2, [sp, #20]
 800a618:	2101      	movs	r1, #1
 800a61a:	441a      	add	r2, r3
 800a61c:	4620      	mov	r0, r4
 800a61e:	9205      	str	r2, [sp, #20]
 800a620:	4498      	add	r8, r3
 800a622:	f000 fcfe 	bl	800b022 <__i2b>
 800a626:	4606      	mov	r6, r0
 800a628:	2d00      	cmp	r5, #0
 800a62a:	dd0c      	ble.n	800a646 <_dtoa_r+0x72e>
 800a62c:	f1b8 0f00 	cmp.w	r8, #0
 800a630:	dd09      	ble.n	800a646 <_dtoa_r+0x72e>
 800a632:	4545      	cmp	r5, r8
 800a634:	9a05      	ldr	r2, [sp, #20]
 800a636:	462b      	mov	r3, r5
 800a638:	bfa8      	it	ge
 800a63a:	4643      	movge	r3, r8
 800a63c:	1ad2      	subs	r2, r2, r3
 800a63e:	9205      	str	r2, [sp, #20]
 800a640:	1aed      	subs	r5, r5, r3
 800a642:	eba8 0803 	sub.w	r8, r8, r3
 800a646:	9b07      	ldr	r3, [sp, #28]
 800a648:	b1eb      	cbz	r3, 800a686 <_dtoa_r+0x76e>
 800a64a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d067      	beq.n	800a720 <_dtoa_r+0x808>
 800a650:	b18f      	cbz	r7, 800a676 <_dtoa_r+0x75e>
 800a652:	4631      	mov	r1, r6
 800a654:	463a      	mov	r2, r7
 800a656:	4620      	mov	r0, r4
 800a658:	f000 fd82 	bl	800b160 <__pow5mult>
 800a65c:	9a04      	ldr	r2, [sp, #16]
 800a65e:	4601      	mov	r1, r0
 800a660:	4606      	mov	r6, r0
 800a662:	4620      	mov	r0, r4
 800a664:	f000 fce6 	bl	800b034 <__multiply>
 800a668:	9904      	ldr	r1, [sp, #16]
 800a66a:	9008      	str	r0, [sp, #32]
 800a66c:	4620      	mov	r0, r4
 800a66e:	f000 fc38 	bl	800aee2 <_Bfree>
 800a672:	9b08      	ldr	r3, [sp, #32]
 800a674:	9304      	str	r3, [sp, #16]
 800a676:	9b07      	ldr	r3, [sp, #28]
 800a678:	1bda      	subs	r2, r3, r7
 800a67a:	d004      	beq.n	800a686 <_dtoa_r+0x76e>
 800a67c:	9904      	ldr	r1, [sp, #16]
 800a67e:	4620      	mov	r0, r4
 800a680:	f000 fd6e 	bl	800b160 <__pow5mult>
 800a684:	9004      	str	r0, [sp, #16]
 800a686:	2101      	movs	r1, #1
 800a688:	4620      	mov	r0, r4
 800a68a:	f000 fcca 	bl	800b022 <__i2b>
 800a68e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a690:	4607      	mov	r7, r0
 800a692:	2b00      	cmp	r3, #0
 800a694:	f000 81d0 	beq.w	800aa38 <_dtoa_r+0xb20>
 800a698:	461a      	mov	r2, r3
 800a69a:	4601      	mov	r1, r0
 800a69c:	4620      	mov	r0, r4
 800a69e:	f000 fd5f 	bl	800b160 <__pow5mult>
 800a6a2:	9b06      	ldr	r3, [sp, #24]
 800a6a4:	2b01      	cmp	r3, #1
 800a6a6:	4607      	mov	r7, r0
 800a6a8:	dc40      	bgt.n	800a72c <_dtoa_r+0x814>
 800a6aa:	9b00      	ldr	r3, [sp, #0]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d139      	bne.n	800a724 <_dtoa_r+0x80c>
 800a6b0:	9b01      	ldr	r3, [sp, #4]
 800a6b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d136      	bne.n	800a728 <_dtoa_r+0x810>
 800a6ba:	9b01      	ldr	r3, [sp, #4]
 800a6bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a6c0:	0d1b      	lsrs	r3, r3, #20
 800a6c2:	051b      	lsls	r3, r3, #20
 800a6c4:	b12b      	cbz	r3, 800a6d2 <_dtoa_r+0x7ba>
 800a6c6:	9b05      	ldr	r3, [sp, #20]
 800a6c8:	3301      	adds	r3, #1
 800a6ca:	9305      	str	r3, [sp, #20]
 800a6cc:	f108 0801 	add.w	r8, r8, #1
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	9307      	str	r3, [sp, #28]
 800a6d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d12a      	bne.n	800a730 <_dtoa_r+0x818>
 800a6da:	2001      	movs	r0, #1
 800a6dc:	e030      	b.n	800a740 <_dtoa_r+0x828>
 800a6de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a6e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a6e4:	e795      	b.n	800a612 <_dtoa_r+0x6fa>
 800a6e6:	9b07      	ldr	r3, [sp, #28]
 800a6e8:	f109 37ff 	add.w	r7, r9, #4294967295
 800a6ec:	42bb      	cmp	r3, r7
 800a6ee:	bfbf      	itttt	lt
 800a6f0:	9b07      	ldrlt	r3, [sp, #28]
 800a6f2:	9707      	strlt	r7, [sp, #28]
 800a6f4:	1afa      	sublt	r2, r7, r3
 800a6f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800a6f8:	bfbb      	ittet	lt
 800a6fa:	189b      	addlt	r3, r3, r2
 800a6fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800a6fe:	1bdf      	subge	r7, r3, r7
 800a700:	2700      	movlt	r7, #0
 800a702:	f1b9 0f00 	cmp.w	r9, #0
 800a706:	bfb5      	itete	lt
 800a708:	9b05      	ldrlt	r3, [sp, #20]
 800a70a:	9d05      	ldrge	r5, [sp, #20]
 800a70c:	eba3 0509 	sublt.w	r5, r3, r9
 800a710:	464b      	movge	r3, r9
 800a712:	bfb8      	it	lt
 800a714:	2300      	movlt	r3, #0
 800a716:	e77e      	b.n	800a616 <_dtoa_r+0x6fe>
 800a718:	9f07      	ldr	r7, [sp, #28]
 800a71a:	9d05      	ldr	r5, [sp, #20]
 800a71c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800a71e:	e783      	b.n	800a628 <_dtoa_r+0x710>
 800a720:	9a07      	ldr	r2, [sp, #28]
 800a722:	e7ab      	b.n	800a67c <_dtoa_r+0x764>
 800a724:	2300      	movs	r3, #0
 800a726:	e7d4      	b.n	800a6d2 <_dtoa_r+0x7ba>
 800a728:	9b00      	ldr	r3, [sp, #0]
 800a72a:	e7d2      	b.n	800a6d2 <_dtoa_r+0x7ba>
 800a72c:	2300      	movs	r3, #0
 800a72e:	9307      	str	r3, [sp, #28]
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800a736:	6918      	ldr	r0, [r3, #16]
 800a738:	f000 fc25 	bl	800af86 <__hi0bits>
 800a73c:	f1c0 0020 	rsb	r0, r0, #32
 800a740:	4440      	add	r0, r8
 800a742:	f010 001f 	ands.w	r0, r0, #31
 800a746:	d047      	beq.n	800a7d8 <_dtoa_r+0x8c0>
 800a748:	f1c0 0320 	rsb	r3, r0, #32
 800a74c:	2b04      	cmp	r3, #4
 800a74e:	dd3b      	ble.n	800a7c8 <_dtoa_r+0x8b0>
 800a750:	9b05      	ldr	r3, [sp, #20]
 800a752:	f1c0 001c 	rsb	r0, r0, #28
 800a756:	4403      	add	r3, r0
 800a758:	9305      	str	r3, [sp, #20]
 800a75a:	4405      	add	r5, r0
 800a75c:	4480      	add	r8, r0
 800a75e:	9b05      	ldr	r3, [sp, #20]
 800a760:	2b00      	cmp	r3, #0
 800a762:	dd05      	ble.n	800a770 <_dtoa_r+0x858>
 800a764:	461a      	mov	r2, r3
 800a766:	9904      	ldr	r1, [sp, #16]
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 fd47 	bl	800b1fc <__lshift>
 800a76e:	9004      	str	r0, [sp, #16]
 800a770:	f1b8 0f00 	cmp.w	r8, #0
 800a774:	dd05      	ble.n	800a782 <_dtoa_r+0x86a>
 800a776:	4639      	mov	r1, r7
 800a778:	4642      	mov	r2, r8
 800a77a:	4620      	mov	r0, r4
 800a77c:	f000 fd3e 	bl	800b1fc <__lshift>
 800a780:	4607      	mov	r7, r0
 800a782:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a784:	b353      	cbz	r3, 800a7dc <_dtoa_r+0x8c4>
 800a786:	4639      	mov	r1, r7
 800a788:	9804      	ldr	r0, [sp, #16]
 800a78a:	f000 fd8b 	bl	800b2a4 <__mcmp>
 800a78e:	2800      	cmp	r0, #0
 800a790:	da24      	bge.n	800a7dc <_dtoa_r+0x8c4>
 800a792:	2300      	movs	r3, #0
 800a794:	220a      	movs	r2, #10
 800a796:	9904      	ldr	r1, [sp, #16]
 800a798:	4620      	mov	r0, r4
 800a79a:	f000 fbb9 	bl	800af10 <__multadd>
 800a79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a0:	9004      	str	r0, [sp, #16]
 800a7a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	f000 814d 	beq.w	800aa46 <_dtoa_r+0xb2e>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	4631      	mov	r1, r6
 800a7b0:	220a      	movs	r2, #10
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 fbac 	bl	800af10 <__multadd>
 800a7b8:	9b02      	ldr	r3, [sp, #8]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	4606      	mov	r6, r0
 800a7be:	dc4f      	bgt.n	800a860 <_dtoa_r+0x948>
 800a7c0:	9b06      	ldr	r3, [sp, #24]
 800a7c2:	2b02      	cmp	r3, #2
 800a7c4:	dd4c      	ble.n	800a860 <_dtoa_r+0x948>
 800a7c6:	e011      	b.n	800a7ec <_dtoa_r+0x8d4>
 800a7c8:	d0c9      	beq.n	800a75e <_dtoa_r+0x846>
 800a7ca:	9a05      	ldr	r2, [sp, #20]
 800a7cc:	331c      	adds	r3, #28
 800a7ce:	441a      	add	r2, r3
 800a7d0:	9205      	str	r2, [sp, #20]
 800a7d2:	441d      	add	r5, r3
 800a7d4:	4498      	add	r8, r3
 800a7d6:	e7c2      	b.n	800a75e <_dtoa_r+0x846>
 800a7d8:	4603      	mov	r3, r0
 800a7da:	e7f6      	b.n	800a7ca <_dtoa_r+0x8b2>
 800a7dc:	f1b9 0f00 	cmp.w	r9, #0
 800a7e0:	dc38      	bgt.n	800a854 <_dtoa_r+0x93c>
 800a7e2:	9b06      	ldr	r3, [sp, #24]
 800a7e4:	2b02      	cmp	r3, #2
 800a7e6:	dd35      	ble.n	800a854 <_dtoa_r+0x93c>
 800a7e8:	f8cd 9008 	str.w	r9, [sp, #8]
 800a7ec:	9b02      	ldr	r3, [sp, #8]
 800a7ee:	b963      	cbnz	r3, 800a80a <_dtoa_r+0x8f2>
 800a7f0:	4639      	mov	r1, r7
 800a7f2:	2205      	movs	r2, #5
 800a7f4:	4620      	mov	r0, r4
 800a7f6:	f000 fb8b 	bl	800af10 <__multadd>
 800a7fa:	4601      	mov	r1, r0
 800a7fc:	4607      	mov	r7, r0
 800a7fe:	9804      	ldr	r0, [sp, #16]
 800a800:	f000 fd50 	bl	800b2a4 <__mcmp>
 800a804:	2800      	cmp	r0, #0
 800a806:	f73f adcc 	bgt.w	800a3a2 <_dtoa_r+0x48a>
 800a80a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a80c:	465d      	mov	r5, fp
 800a80e:	ea6f 0a03 	mvn.w	sl, r3
 800a812:	f04f 0900 	mov.w	r9, #0
 800a816:	4639      	mov	r1, r7
 800a818:	4620      	mov	r0, r4
 800a81a:	f000 fb62 	bl	800aee2 <_Bfree>
 800a81e:	2e00      	cmp	r6, #0
 800a820:	f43f aeb7 	beq.w	800a592 <_dtoa_r+0x67a>
 800a824:	f1b9 0f00 	cmp.w	r9, #0
 800a828:	d005      	beq.n	800a836 <_dtoa_r+0x91e>
 800a82a:	45b1      	cmp	r9, r6
 800a82c:	d003      	beq.n	800a836 <_dtoa_r+0x91e>
 800a82e:	4649      	mov	r1, r9
 800a830:	4620      	mov	r0, r4
 800a832:	f000 fb56 	bl	800aee2 <_Bfree>
 800a836:	4631      	mov	r1, r6
 800a838:	4620      	mov	r0, r4
 800a83a:	f000 fb52 	bl	800aee2 <_Bfree>
 800a83e:	e6a8      	b.n	800a592 <_dtoa_r+0x67a>
 800a840:	2700      	movs	r7, #0
 800a842:	463e      	mov	r6, r7
 800a844:	e7e1      	b.n	800a80a <_dtoa_r+0x8f2>
 800a846:	f8dd a020 	ldr.w	sl, [sp, #32]
 800a84a:	463e      	mov	r6, r7
 800a84c:	e5a9      	b.n	800a3a2 <_dtoa_r+0x48a>
 800a84e:	bf00      	nop
 800a850:	40240000 	.word	0x40240000
 800a854:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a856:	f8cd 9008 	str.w	r9, [sp, #8]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	f000 80fa 	beq.w	800aa54 <_dtoa_r+0xb3c>
 800a860:	2d00      	cmp	r5, #0
 800a862:	dd05      	ble.n	800a870 <_dtoa_r+0x958>
 800a864:	4631      	mov	r1, r6
 800a866:	462a      	mov	r2, r5
 800a868:	4620      	mov	r0, r4
 800a86a:	f000 fcc7 	bl	800b1fc <__lshift>
 800a86e:	4606      	mov	r6, r0
 800a870:	9b07      	ldr	r3, [sp, #28]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d04c      	beq.n	800a910 <_dtoa_r+0x9f8>
 800a876:	6871      	ldr	r1, [r6, #4]
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 fafe 	bl	800ae7a <_Balloc>
 800a87e:	6932      	ldr	r2, [r6, #16]
 800a880:	3202      	adds	r2, #2
 800a882:	4605      	mov	r5, r0
 800a884:	0092      	lsls	r2, r2, #2
 800a886:	f106 010c 	add.w	r1, r6, #12
 800a88a:	300c      	adds	r0, #12
 800a88c:	f000 fae8 	bl	800ae60 <memcpy>
 800a890:	2201      	movs	r2, #1
 800a892:	4629      	mov	r1, r5
 800a894:	4620      	mov	r0, r4
 800a896:	f000 fcb1 	bl	800b1fc <__lshift>
 800a89a:	9b00      	ldr	r3, [sp, #0]
 800a89c:	f8cd b014 	str.w	fp, [sp, #20]
 800a8a0:	f003 0301 	and.w	r3, r3, #1
 800a8a4:	46b1      	mov	r9, r6
 800a8a6:	9307      	str	r3, [sp, #28]
 800a8a8:	4606      	mov	r6, r0
 800a8aa:	4639      	mov	r1, r7
 800a8ac:	9804      	ldr	r0, [sp, #16]
 800a8ae:	f7ff faa5 	bl	8009dfc <quorem>
 800a8b2:	4649      	mov	r1, r9
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a8ba:	9804      	ldr	r0, [sp, #16]
 800a8bc:	f000 fcf2 	bl	800b2a4 <__mcmp>
 800a8c0:	4632      	mov	r2, r6
 800a8c2:	9000      	str	r0, [sp, #0]
 800a8c4:	4639      	mov	r1, r7
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f000 fd06 	bl	800b2d8 <__mdiff>
 800a8cc:	68c3      	ldr	r3, [r0, #12]
 800a8ce:	4602      	mov	r2, r0
 800a8d0:	bb03      	cbnz	r3, 800a914 <_dtoa_r+0x9fc>
 800a8d2:	4601      	mov	r1, r0
 800a8d4:	9008      	str	r0, [sp, #32]
 800a8d6:	9804      	ldr	r0, [sp, #16]
 800a8d8:	f000 fce4 	bl	800b2a4 <__mcmp>
 800a8dc:	9a08      	ldr	r2, [sp, #32]
 800a8de:	4603      	mov	r3, r0
 800a8e0:	4611      	mov	r1, r2
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	9308      	str	r3, [sp, #32]
 800a8e6:	f000 fafc 	bl	800aee2 <_Bfree>
 800a8ea:	9b08      	ldr	r3, [sp, #32]
 800a8ec:	b9a3      	cbnz	r3, 800a918 <_dtoa_r+0xa00>
 800a8ee:	9a06      	ldr	r2, [sp, #24]
 800a8f0:	b992      	cbnz	r2, 800a918 <_dtoa_r+0xa00>
 800a8f2:	9a07      	ldr	r2, [sp, #28]
 800a8f4:	b982      	cbnz	r2, 800a918 <_dtoa_r+0xa00>
 800a8f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a8fa:	d029      	beq.n	800a950 <_dtoa_r+0xa38>
 800a8fc:	9b00      	ldr	r3, [sp, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	dd01      	ble.n	800a906 <_dtoa_r+0x9ee>
 800a902:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800a906:	9b05      	ldr	r3, [sp, #20]
 800a908:	1c5d      	adds	r5, r3, #1
 800a90a:	f883 8000 	strb.w	r8, [r3]
 800a90e:	e782      	b.n	800a816 <_dtoa_r+0x8fe>
 800a910:	4630      	mov	r0, r6
 800a912:	e7c2      	b.n	800a89a <_dtoa_r+0x982>
 800a914:	2301      	movs	r3, #1
 800a916:	e7e3      	b.n	800a8e0 <_dtoa_r+0x9c8>
 800a918:	9a00      	ldr	r2, [sp, #0]
 800a91a:	2a00      	cmp	r2, #0
 800a91c:	db04      	blt.n	800a928 <_dtoa_r+0xa10>
 800a91e:	d125      	bne.n	800a96c <_dtoa_r+0xa54>
 800a920:	9a06      	ldr	r2, [sp, #24]
 800a922:	bb1a      	cbnz	r2, 800a96c <_dtoa_r+0xa54>
 800a924:	9a07      	ldr	r2, [sp, #28]
 800a926:	bb0a      	cbnz	r2, 800a96c <_dtoa_r+0xa54>
 800a928:	2b00      	cmp	r3, #0
 800a92a:	ddec      	ble.n	800a906 <_dtoa_r+0x9ee>
 800a92c:	2201      	movs	r2, #1
 800a92e:	9904      	ldr	r1, [sp, #16]
 800a930:	4620      	mov	r0, r4
 800a932:	f000 fc63 	bl	800b1fc <__lshift>
 800a936:	4639      	mov	r1, r7
 800a938:	9004      	str	r0, [sp, #16]
 800a93a:	f000 fcb3 	bl	800b2a4 <__mcmp>
 800a93e:	2800      	cmp	r0, #0
 800a940:	dc03      	bgt.n	800a94a <_dtoa_r+0xa32>
 800a942:	d1e0      	bne.n	800a906 <_dtoa_r+0x9ee>
 800a944:	f018 0f01 	tst.w	r8, #1
 800a948:	d0dd      	beq.n	800a906 <_dtoa_r+0x9ee>
 800a94a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a94e:	d1d8      	bne.n	800a902 <_dtoa_r+0x9ea>
 800a950:	9b05      	ldr	r3, [sp, #20]
 800a952:	9a05      	ldr	r2, [sp, #20]
 800a954:	1c5d      	adds	r5, r3, #1
 800a956:	2339      	movs	r3, #57	; 0x39
 800a958:	7013      	strb	r3, [r2, #0]
 800a95a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a95e:	2b39      	cmp	r3, #57	; 0x39
 800a960:	f105 32ff 	add.w	r2, r5, #4294967295
 800a964:	d04f      	beq.n	800aa06 <_dtoa_r+0xaee>
 800a966:	3301      	adds	r3, #1
 800a968:	7013      	strb	r3, [r2, #0]
 800a96a:	e754      	b.n	800a816 <_dtoa_r+0x8fe>
 800a96c:	9a05      	ldr	r2, [sp, #20]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	f102 0501 	add.w	r5, r2, #1
 800a974:	dd06      	ble.n	800a984 <_dtoa_r+0xa6c>
 800a976:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800a97a:	d0e9      	beq.n	800a950 <_dtoa_r+0xa38>
 800a97c:	f108 0801 	add.w	r8, r8, #1
 800a980:	9b05      	ldr	r3, [sp, #20]
 800a982:	e7c2      	b.n	800a90a <_dtoa_r+0x9f2>
 800a984:	9a02      	ldr	r2, [sp, #8]
 800a986:	f805 8c01 	strb.w	r8, [r5, #-1]
 800a98a:	eba5 030b 	sub.w	r3, r5, fp
 800a98e:	4293      	cmp	r3, r2
 800a990:	d021      	beq.n	800a9d6 <_dtoa_r+0xabe>
 800a992:	2300      	movs	r3, #0
 800a994:	220a      	movs	r2, #10
 800a996:	9904      	ldr	r1, [sp, #16]
 800a998:	4620      	mov	r0, r4
 800a99a:	f000 fab9 	bl	800af10 <__multadd>
 800a99e:	45b1      	cmp	r9, r6
 800a9a0:	9004      	str	r0, [sp, #16]
 800a9a2:	f04f 0300 	mov.w	r3, #0
 800a9a6:	f04f 020a 	mov.w	r2, #10
 800a9aa:	4649      	mov	r1, r9
 800a9ac:	4620      	mov	r0, r4
 800a9ae:	d105      	bne.n	800a9bc <_dtoa_r+0xaa4>
 800a9b0:	f000 faae 	bl	800af10 <__multadd>
 800a9b4:	4681      	mov	r9, r0
 800a9b6:	4606      	mov	r6, r0
 800a9b8:	9505      	str	r5, [sp, #20]
 800a9ba:	e776      	b.n	800a8aa <_dtoa_r+0x992>
 800a9bc:	f000 faa8 	bl	800af10 <__multadd>
 800a9c0:	4631      	mov	r1, r6
 800a9c2:	4681      	mov	r9, r0
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	220a      	movs	r2, #10
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 faa1 	bl	800af10 <__multadd>
 800a9ce:	4606      	mov	r6, r0
 800a9d0:	e7f2      	b.n	800a9b8 <_dtoa_r+0xaa0>
 800a9d2:	f04f 0900 	mov.w	r9, #0
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	9904      	ldr	r1, [sp, #16]
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 fc0e 	bl	800b1fc <__lshift>
 800a9e0:	4639      	mov	r1, r7
 800a9e2:	9004      	str	r0, [sp, #16]
 800a9e4:	f000 fc5e 	bl	800b2a4 <__mcmp>
 800a9e8:	2800      	cmp	r0, #0
 800a9ea:	dcb6      	bgt.n	800a95a <_dtoa_r+0xa42>
 800a9ec:	d102      	bne.n	800a9f4 <_dtoa_r+0xadc>
 800a9ee:	f018 0f01 	tst.w	r8, #1
 800a9f2:	d1b2      	bne.n	800a95a <_dtoa_r+0xa42>
 800a9f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a9f8:	2b30      	cmp	r3, #48	; 0x30
 800a9fa:	f105 32ff 	add.w	r2, r5, #4294967295
 800a9fe:	f47f af0a 	bne.w	800a816 <_dtoa_r+0x8fe>
 800aa02:	4615      	mov	r5, r2
 800aa04:	e7f6      	b.n	800a9f4 <_dtoa_r+0xadc>
 800aa06:	4593      	cmp	fp, r2
 800aa08:	d105      	bne.n	800aa16 <_dtoa_r+0xafe>
 800aa0a:	2331      	movs	r3, #49	; 0x31
 800aa0c:	f10a 0a01 	add.w	sl, sl, #1
 800aa10:	f88b 3000 	strb.w	r3, [fp]
 800aa14:	e6ff      	b.n	800a816 <_dtoa_r+0x8fe>
 800aa16:	4615      	mov	r5, r2
 800aa18:	e79f      	b.n	800a95a <_dtoa_r+0xa42>
 800aa1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800aa80 <_dtoa_r+0xb68>
 800aa1e:	e007      	b.n	800aa30 <_dtoa_r+0xb18>
 800aa20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa22:	f8df b060 	ldr.w	fp, [pc, #96]	; 800aa84 <_dtoa_r+0xb6c>
 800aa26:	b11b      	cbz	r3, 800aa30 <_dtoa_r+0xb18>
 800aa28:	f10b 0308 	add.w	r3, fp, #8
 800aa2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800aa2e:	6013      	str	r3, [r2, #0]
 800aa30:	4658      	mov	r0, fp
 800aa32:	b017      	add	sp, #92	; 0x5c
 800aa34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa38:	9b06      	ldr	r3, [sp, #24]
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	f77f ae35 	ble.w	800a6aa <_dtoa_r+0x792>
 800aa40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa42:	9307      	str	r3, [sp, #28]
 800aa44:	e649      	b.n	800a6da <_dtoa_r+0x7c2>
 800aa46:	9b02      	ldr	r3, [sp, #8]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	dc03      	bgt.n	800aa54 <_dtoa_r+0xb3c>
 800aa4c:	9b06      	ldr	r3, [sp, #24]
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	f73f aecc 	bgt.w	800a7ec <_dtoa_r+0x8d4>
 800aa54:	465d      	mov	r5, fp
 800aa56:	4639      	mov	r1, r7
 800aa58:	9804      	ldr	r0, [sp, #16]
 800aa5a:	f7ff f9cf 	bl	8009dfc <quorem>
 800aa5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800aa62:	f805 8b01 	strb.w	r8, [r5], #1
 800aa66:	9a02      	ldr	r2, [sp, #8]
 800aa68:	eba5 030b 	sub.w	r3, r5, fp
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	ddb0      	ble.n	800a9d2 <_dtoa_r+0xaba>
 800aa70:	2300      	movs	r3, #0
 800aa72:	220a      	movs	r2, #10
 800aa74:	9904      	ldr	r1, [sp, #16]
 800aa76:	4620      	mov	r0, r4
 800aa78:	f000 fa4a 	bl	800af10 <__multadd>
 800aa7c:	9004      	str	r0, [sp, #16]
 800aa7e:	e7ea      	b.n	800aa56 <_dtoa_r+0xb3e>
 800aa80:	080137ec 	.word	0x080137ec
 800aa84:	08013810 	.word	0x08013810

0800aa88 <__sflush_r>:
 800aa88:	898a      	ldrh	r2, [r1, #12]
 800aa8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa8e:	4605      	mov	r5, r0
 800aa90:	0710      	lsls	r0, r2, #28
 800aa92:	460c      	mov	r4, r1
 800aa94:	d458      	bmi.n	800ab48 <__sflush_r+0xc0>
 800aa96:	684b      	ldr	r3, [r1, #4]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	dc05      	bgt.n	800aaa8 <__sflush_r+0x20>
 800aa9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	dc02      	bgt.n	800aaa8 <__sflush_r+0x20>
 800aaa2:	2000      	movs	r0, #0
 800aaa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aaaa:	2e00      	cmp	r6, #0
 800aaac:	d0f9      	beq.n	800aaa2 <__sflush_r+0x1a>
 800aaae:	2300      	movs	r3, #0
 800aab0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aab4:	682f      	ldr	r7, [r5, #0]
 800aab6:	6a21      	ldr	r1, [r4, #32]
 800aab8:	602b      	str	r3, [r5, #0]
 800aaba:	d032      	beq.n	800ab22 <__sflush_r+0x9a>
 800aabc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	075a      	lsls	r2, r3, #29
 800aac2:	d505      	bpl.n	800aad0 <__sflush_r+0x48>
 800aac4:	6863      	ldr	r3, [r4, #4]
 800aac6:	1ac0      	subs	r0, r0, r3
 800aac8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aaca:	b10b      	cbz	r3, 800aad0 <__sflush_r+0x48>
 800aacc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aace:	1ac0      	subs	r0, r0, r3
 800aad0:	2300      	movs	r3, #0
 800aad2:	4602      	mov	r2, r0
 800aad4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aad6:	6a21      	ldr	r1, [r4, #32]
 800aad8:	4628      	mov	r0, r5
 800aada:	47b0      	blx	r6
 800aadc:	1c43      	adds	r3, r0, #1
 800aade:	89a3      	ldrh	r3, [r4, #12]
 800aae0:	d106      	bne.n	800aaf0 <__sflush_r+0x68>
 800aae2:	6829      	ldr	r1, [r5, #0]
 800aae4:	291d      	cmp	r1, #29
 800aae6:	d848      	bhi.n	800ab7a <__sflush_r+0xf2>
 800aae8:	4a29      	ldr	r2, [pc, #164]	; (800ab90 <__sflush_r+0x108>)
 800aaea:	40ca      	lsrs	r2, r1
 800aaec:	07d6      	lsls	r6, r2, #31
 800aaee:	d544      	bpl.n	800ab7a <__sflush_r+0xf2>
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	6062      	str	r2, [r4, #4]
 800aaf4:	04d9      	lsls	r1, r3, #19
 800aaf6:	6922      	ldr	r2, [r4, #16]
 800aaf8:	6022      	str	r2, [r4, #0]
 800aafa:	d504      	bpl.n	800ab06 <__sflush_r+0x7e>
 800aafc:	1c42      	adds	r2, r0, #1
 800aafe:	d101      	bne.n	800ab04 <__sflush_r+0x7c>
 800ab00:	682b      	ldr	r3, [r5, #0]
 800ab02:	b903      	cbnz	r3, 800ab06 <__sflush_r+0x7e>
 800ab04:	6560      	str	r0, [r4, #84]	; 0x54
 800ab06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ab08:	602f      	str	r7, [r5, #0]
 800ab0a:	2900      	cmp	r1, #0
 800ab0c:	d0c9      	beq.n	800aaa2 <__sflush_r+0x1a>
 800ab0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ab12:	4299      	cmp	r1, r3
 800ab14:	d002      	beq.n	800ab1c <__sflush_r+0x94>
 800ab16:	4628      	mov	r0, r5
 800ab18:	f7fe fac4 	bl	80090a4 <_free_r>
 800ab1c:	2000      	movs	r0, #0
 800ab1e:	6360      	str	r0, [r4, #52]	; 0x34
 800ab20:	e7c0      	b.n	800aaa4 <__sflush_r+0x1c>
 800ab22:	2301      	movs	r3, #1
 800ab24:	4628      	mov	r0, r5
 800ab26:	47b0      	blx	r6
 800ab28:	1c41      	adds	r1, r0, #1
 800ab2a:	d1c8      	bne.n	800aabe <__sflush_r+0x36>
 800ab2c:	682b      	ldr	r3, [r5, #0]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d0c5      	beq.n	800aabe <__sflush_r+0x36>
 800ab32:	2b1d      	cmp	r3, #29
 800ab34:	d001      	beq.n	800ab3a <__sflush_r+0xb2>
 800ab36:	2b16      	cmp	r3, #22
 800ab38:	d101      	bne.n	800ab3e <__sflush_r+0xb6>
 800ab3a:	602f      	str	r7, [r5, #0]
 800ab3c:	e7b1      	b.n	800aaa2 <__sflush_r+0x1a>
 800ab3e:	89a3      	ldrh	r3, [r4, #12]
 800ab40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab44:	81a3      	strh	r3, [r4, #12]
 800ab46:	e7ad      	b.n	800aaa4 <__sflush_r+0x1c>
 800ab48:	690f      	ldr	r7, [r1, #16]
 800ab4a:	2f00      	cmp	r7, #0
 800ab4c:	d0a9      	beq.n	800aaa2 <__sflush_r+0x1a>
 800ab4e:	0793      	lsls	r3, r2, #30
 800ab50:	680e      	ldr	r6, [r1, #0]
 800ab52:	bf08      	it	eq
 800ab54:	694b      	ldreq	r3, [r1, #20]
 800ab56:	600f      	str	r7, [r1, #0]
 800ab58:	bf18      	it	ne
 800ab5a:	2300      	movne	r3, #0
 800ab5c:	eba6 0807 	sub.w	r8, r6, r7
 800ab60:	608b      	str	r3, [r1, #8]
 800ab62:	f1b8 0f00 	cmp.w	r8, #0
 800ab66:	dd9c      	ble.n	800aaa2 <__sflush_r+0x1a>
 800ab68:	4643      	mov	r3, r8
 800ab6a:	463a      	mov	r2, r7
 800ab6c:	6a21      	ldr	r1, [r4, #32]
 800ab6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab70:	4628      	mov	r0, r5
 800ab72:	47b0      	blx	r6
 800ab74:	2800      	cmp	r0, #0
 800ab76:	dc06      	bgt.n	800ab86 <__sflush_r+0xfe>
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab7e:	81a3      	strh	r3, [r4, #12]
 800ab80:	f04f 30ff 	mov.w	r0, #4294967295
 800ab84:	e78e      	b.n	800aaa4 <__sflush_r+0x1c>
 800ab86:	4407      	add	r7, r0
 800ab88:	eba8 0800 	sub.w	r8, r8, r0
 800ab8c:	e7e9      	b.n	800ab62 <__sflush_r+0xda>
 800ab8e:	bf00      	nop
 800ab90:	20400001 	.word	0x20400001

0800ab94 <_fflush_r>:
 800ab94:	b538      	push	{r3, r4, r5, lr}
 800ab96:	690b      	ldr	r3, [r1, #16]
 800ab98:	4605      	mov	r5, r0
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	b1db      	cbz	r3, 800abd6 <_fflush_r+0x42>
 800ab9e:	b118      	cbz	r0, 800aba8 <_fflush_r+0x14>
 800aba0:	6983      	ldr	r3, [r0, #24]
 800aba2:	b90b      	cbnz	r3, 800aba8 <_fflush_r+0x14>
 800aba4:	f000 f860 	bl	800ac68 <__sinit>
 800aba8:	4b0c      	ldr	r3, [pc, #48]	; (800abdc <_fflush_r+0x48>)
 800abaa:	429c      	cmp	r4, r3
 800abac:	d109      	bne.n	800abc2 <_fflush_r+0x2e>
 800abae:	686c      	ldr	r4, [r5, #4]
 800abb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abb4:	b17b      	cbz	r3, 800abd6 <_fflush_r+0x42>
 800abb6:	4621      	mov	r1, r4
 800abb8:	4628      	mov	r0, r5
 800abba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abbe:	f7ff bf63 	b.w	800aa88 <__sflush_r>
 800abc2:	4b07      	ldr	r3, [pc, #28]	; (800abe0 <_fflush_r+0x4c>)
 800abc4:	429c      	cmp	r4, r3
 800abc6:	d101      	bne.n	800abcc <_fflush_r+0x38>
 800abc8:	68ac      	ldr	r4, [r5, #8]
 800abca:	e7f1      	b.n	800abb0 <_fflush_r+0x1c>
 800abcc:	4b05      	ldr	r3, [pc, #20]	; (800abe4 <_fflush_r+0x50>)
 800abce:	429c      	cmp	r4, r3
 800abd0:	bf08      	it	eq
 800abd2:	68ec      	ldreq	r4, [r5, #12]
 800abd4:	e7ec      	b.n	800abb0 <_fflush_r+0x1c>
 800abd6:	2000      	movs	r0, #0
 800abd8:	bd38      	pop	{r3, r4, r5, pc}
 800abda:	bf00      	nop
 800abdc:	08013840 	.word	0x08013840
 800abe0:	08013860 	.word	0x08013860
 800abe4:	08013820 	.word	0x08013820

0800abe8 <std>:
 800abe8:	2300      	movs	r3, #0
 800abea:	b510      	push	{r4, lr}
 800abec:	4604      	mov	r4, r0
 800abee:	e9c0 3300 	strd	r3, r3, [r0]
 800abf2:	6083      	str	r3, [r0, #8]
 800abf4:	8181      	strh	r1, [r0, #12]
 800abf6:	6643      	str	r3, [r0, #100]	; 0x64
 800abf8:	81c2      	strh	r2, [r0, #14]
 800abfa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800abfe:	6183      	str	r3, [r0, #24]
 800ac00:	4619      	mov	r1, r3
 800ac02:	2208      	movs	r2, #8
 800ac04:	305c      	adds	r0, #92	; 0x5c
 800ac06:	f7fe fa45 	bl	8009094 <memset>
 800ac0a:	4b05      	ldr	r3, [pc, #20]	; (800ac20 <std+0x38>)
 800ac0c:	6263      	str	r3, [r4, #36]	; 0x24
 800ac0e:	4b05      	ldr	r3, [pc, #20]	; (800ac24 <std+0x3c>)
 800ac10:	62a3      	str	r3, [r4, #40]	; 0x28
 800ac12:	4b05      	ldr	r3, [pc, #20]	; (800ac28 <std+0x40>)
 800ac14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ac16:	4b05      	ldr	r3, [pc, #20]	; (800ac2c <std+0x44>)
 800ac18:	6224      	str	r4, [r4, #32]
 800ac1a:	6323      	str	r3, [r4, #48]	; 0x30
 800ac1c:	bd10      	pop	{r4, pc}
 800ac1e:	bf00      	nop
 800ac20:	0800b971 	.word	0x0800b971
 800ac24:	0800b993 	.word	0x0800b993
 800ac28:	0800b9cb 	.word	0x0800b9cb
 800ac2c:	0800b9ef 	.word	0x0800b9ef

0800ac30 <_cleanup_r>:
 800ac30:	4901      	ldr	r1, [pc, #4]	; (800ac38 <_cleanup_r+0x8>)
 800ac32:	f000 b885 	b.w	800ad40 <_fwalk_reent>
 800ac36:	bf00      	nop
 800ac38:	0800ab95 	.word	0x0800ab95

0800ac3c <__sfmoreglue>:
 800ac3c:	b570      	push	{r4, r5, r6, lr}
 800ac3e:	1e4a      	subs	r2, r1, #1
 800ac40:	2568      	movs	r5, #104	; 0x68
 800ac42:	4355      	muls	r5, r2
 800ac44:	460e      	mov	r6, r1
 800ac46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ac4a:	f7fe fa79 	bl	8009140 <_malloc_r>
 800ac4e:	4604      	mov	r4, r0
 800ac50:	b140      	cbz	r0, 800ac64 <__sfmoreglue+0x28>
 800ac52:	2100      	movs	r1, #0
 800ac54:	e9c0 1600 	strd	r1, r6, [r0]
 800ac58:	300c      	adds	r0, #12
 800ac5a:	60a0      	str	r0, [r4, #8]
 800ac5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ac60:	f7fe fa18 	bl	8009094 <memset>
 800ac64:	4620      	mov	r0, r4
 800ac66:	bd70      	pop	{r4, r5, r6, pc}

0800ac68 <__sinit>:
 800ac68:	6983      	ldr	r3, [r0, #24]
 800ac6a:	b510      	push	{r4, lr}
 800ac6c:	4604      	mov	r4, r0
 800ac6e:	bb33      	cbnz	r3, 800acbe <__sinit+0x56>
 800ac70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ac74:	6503      	str	r3, [r0, #80]	; 0x50
 800ac76:	4b12      	ldr	r3, [pc, #72]	; (800acc0 <__sinit+0x58>)
 800ac78:	4a12      	ldr	r2, [pc, #72]	; (800acc4 <__sinit+0x5c>)
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	6282      	str	r2, [r0, #40]	; 0x28
 800ac7e:	4298      	cmp	r0, r3
 800ac80:	bf04      	itt	eq
 800ac82:	2301      	moveq	r3, #1
 800ac84:	6183      	streq	r3, [r0, #24]
 800ac86:	f000 f81f 	bl	800acc8 <__sfp>
 800ac8a:	6060      	str	r0, [r4, #4]
 800ac8c:	4620      	mov	r0, r4
 800ac8e:	f000 f81b 	bl	800acc8 <__sfp>
 800ac92:	60a0      	str	r0, [r4, #8]
 800ac94:	4620      	mov	r0, r4
 800ac96:	f000 f817 	bl	800acc8 <__sfp>
 800ac9a:	2200      	movs	r2, #0
 800ac9c:	60e0      	str	r0, [r4, #12]
 800ac9e:	2104      	movs	r1, #4
 800aca0:	6860      	ldr	r0, [r4, #4]
 800aca2:	f7ff ffa1 	bl	800abe8 <std>
 800aca6:	2201      	movs	r2, #1
 800aca8:	2109      	movs	r1, #9
 800acaa:	68a0      	ldr	r0, [r4, #8]
 800acac:	f7ff ff9c 	bl	800abe8 <std>
 800acb0:	2202      	movs	r2, #2
 800acb2:	2112      	movs	r1, #18
 800acb4:	68e0      	ldr	r0, [r4, #12]
 800acb6:	f7ff ff97 	bl	800abe8 <std>
 800acba:	2301      	movs	r3, #1
 800acbc:	61a3      	str	r3, [r4, #24]
 800acbe:	bd10      	pop	{r4, pc}
 800acc0:	080137d8 	.word	0x080137d8
 800acc4:	0800ac31 	.word	0x0800ac31

0800acc8 <__sfp>:
 800acc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acca:	4b1b      	ldr	r3, [pc, #108]	; (800ad38 <__sfp+0x70>)
 800accc:	681e      	ldr	r6, [r3, #0]
 800acce:	69b3      	ldr	r3, [r6, #24]
 800acd0:	4607      	mov	r7, r0
 800acd2:	b913      	cbnz	r3, 800acda <__sfp+0x12>
 800acd4:	4630      	mov	r0, r6
 800acd6:	f7ff ffc7 	bl	800ac68 <__sinit>
 800acda:	3648      	adds	r6, #72	; 0x48
 800acdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ace0:	3b01      	subs	r3, #1
 800ace2:	d503      	bpl.n	800acec <__sfp+0x24>
 800ace4:	6833      	ldr	r3, [r6, #0]
 800ace6:	b133      	cbz	r3, 800acf6 <__sfp+0x2e>
 800ace8:	6836      	ldr	r6, [r6, #0]
 800acea:	e7f7      	b.n	800acdc <__sfp+0x14>
 800acec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800acf0:	b16d      	cbz	r5, 800ad0e <__sfp+0x46>
 800acf2:	3468      	adds	r4, #104	; 0x68
 800acf4:	e7f4      	b.n	800ace0 <__sfp+0x18>
 800acf6:	2104      	movs	r1, #4
 800acf8:	4638      	mov	r0, r7
 800acfa:	f7ff ff9f 	bl	800ac3c <__sfmoreglue>
 800acfe:	6030      	str	r0, [r6, #0]
 800ad00:	2800      	cmp	r0, #0
 800ad02:	d1f1      	bne.n	800ace8 <__sfp+0x20>
 800ad04:	230c      	movs	r3, #12
 800ad06:	603b      	str	r3, [r7, #0]
 800ad08:	4604      	mov	r4, r0
 800ad0a:	4620      	mov	r0, r4
 800ad0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad0e:	4b0b      	ldr	r3, [pc, #44]	; (800ad3c <__sfp+0x74>)
 800ad10:	6665      	str	r5, [r4, #100]	; 0x64
 800ad12:	e9c4 5500 	strd	r5, r5, [r4]
 800ad16:	60a5      	str	r5, [r4, #8]
 800ad18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800ad1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800ad20:	2208      	movs	r2, #8
 800ad22:	4629      	mov	r1, r5
 800ad24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ad28:	f7fe f9b4 	bl	8009094 <memset>
 800ad2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ad30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ad34:	e7e9      	b.n	800ad0a <__sfp+0x42>
 800ad36:	bf00      	nop
 800ad38:	080137d8 	.word	0x080137d8
 800ad3c:	ffff0001 	.word	0xffff0001

0800ad40 <_fwalk_reent>:
 800ad40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad44:	4680      	mov	r8, r0
 800ad46:	4689      	mov	r9, r1
 800ad48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ad4c:	2600      	movs	r6, #0
 800ad4e:	b914      	cbnz	r4, 800ad56 <_fwalk_reent+0x16>
 800ad50:	4630      	mov	r0, r6
 800ad52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800ad5a:	3f01      	subs	r7, #1
 800ad5c:	d501      	bpl.n	800ad62 <_fwalk_reent+0x22>
 800ad5e:	6824      	ldr	r4, [r4, #0]
 800ad60:	e7f5      	b.n	800ad4e <_fwalk_reent+0xe>
 800ad62:	89ab      	ldrh	r3, [r5, #12]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d907      	bls.n	800ad78 <_fwalk_reent+0x38>
 800ad68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	d003      	beq.n	800ad78 <_fwalk_reent+0x38>
 800ad70:	4629      	mov	r1, r5
 800ad72:	4640      	mov	r0, r8
 800ad74:	47c8      	blx	r9
 800ad76:	4306      	orrs	r6, r0
 800ad78:	3568      	adds	r5, #104	; 0x68
 800ad7a:	e7ee      	b.n	800ad5a <_fwalk_reent+0x1a>

0800ad7c <_localeconv_r>:
 800ad7c:	4b04      	ldr	r3, [pc, #16]	; (800ad90 <_localeconv_r+0x14>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	6a18      	ldr	r0, [r3, #32]
 800ad82:	4b04      	ldr	r3, [pc, #16]	; (800ad94 <_localeconv_r+0x18>)
 800ad84:	2800      	cmp	r0, #0
 800ad86:	bf08      	it	eq
 800ad88:	4618      	moveq	r0, r3
 800ad8a:	30f0      	adds	r0, #240	; 0xf0
 800ad8c:	4770      	bx	lr
 800ad8e:	bf00      	nop
 800ad90:	2000000c 	.word	0x2000000c
 800ad94:	20000070 	.word	0x20000070

0800ad98 <__swhatbuf_r>:
 800ad98:	b570      	push	{r4, r5, r6, lr}
 800ad9a:	460e      	mov	r6, r1
 800ad9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ada0:	2900      	cmp	r1, #0
 800ada2:	b096      	sub	sp, #88	; 0x58
 800ada4:	4614      	mov	r4, r2
 800ada6:	461d      	mov	r5, r3
 800ada8:	da07      	bge.n	800adba <__swhatbuf_r+0x22>
 800adaa:	2300      	movs	r3, #0
 800adac:	602b      	str	r3, [r5, #0]
 800adae:	89b3      	ldrh	r3, [r6, #12]
 800adb0:	061a      	lsls	r2, r3, #24
 800adb2:	d410      	bmi.n	800add6 <__swhatbuf_r+0x3e>
 800adb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adb8:	e00e      	b.n	800add8 <__swhatbuf_r+0x40>
 800adba:	466a      	mov	r2, sp
 800adbc:	f000 fe3e 	bl	800ba3c <_fstat_r>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	dbf2      	blt.n	800adaa <__swhatbuf_r+0x12>
 800adc4:	9a01      	ldr	r2, [sp, #4]
 800adc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800adca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800adce:	425a      	negs	r2, r3
 800add0:	415a      	adcs	r2, r3
 800add2:	602a      	str	r2, [r5, #0]
 800add4:	e7ee      	b.n	800adb4 <__swhatbuf_r+0x1c>
 800add6:	2340      	movs	r3, #64	; 0x40
 800add8:	2000      	movs	r0, #0
 800adda:	6023      	str	r3, [r4, #0]
 800addc:	b016      	add	sp, #88	; 0x58
 800adde:	bd70      	pop	{r4, r5, r6, pc}

0800ade0 <__smakebuf_r>:
 800ade0:	898b      	ldrh	r3, [r1, #12]
 800ade2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ade4:	079d      	lsls	r5, r3, #30
 800ade6:	4606      	mov	r6, r0
 800ade8:	460c      	mov	r4, r1
 800adea:	d507      	bpl.n	800adfc <__smakebuf_r+0x1c>
 800adec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	6123      	str	r3, [r4, #16]
 800adf4:	2301      	movs	r3, #1
 800adf6:	6163      	str	r3, [r4, #20]
 800adf8:	b002      	add	sp, #8
 800adfa:	bd70      	pop	{r4, r5, r6, pc}
 800adfc:	ab01      	add	r3, sp, #4
 800adfe:	466a      	mov	r2, sp
 800ae00:	f7ff ffca 	bl	800ad98 <__swhatbuf_r>
 800ae04:	9900      	ldr	r1, [sp, #0]
 800ae06:	4605      	mov	r5, r0
 800ae08:	4630      	mov	r0, r6
 800ae0a:	f7fe f999 	bl	8009140 <_malloc_r>
 800ae0e:	b948      	cbnz	r0, 800ae24 <__smakebuf_r+0x44>
 800ae10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae14:	059a      	lsls	r2, r3, #22
 800ae16:	d4ef      	bmi.n	800adf8 <__smakebuf_r+0x18>
 800ae18:	f023 0303 	bic.w	r3, r3, #3
 800ae1c:	f043 0302 	orr.w	r3, r3, #2
 800ae20:	81a3      	strh	r3, [r4, #12]
 800ae22:	e7e3      	b.n	800adec <__smakebuf_r+0xc>
 800ae24:	4b0d      	ldr	r3, [pc, #52]	; (800ae5c <__smakebuf_r+0x7c>)
 800ae26:	62b3      	str	r3, [r6, #40]	; 0x28
 800ae28:	89a3      	ldrh	r3, [r4, #12]
 800ae2a:	6020      	str	r0, [r4, #0]
 800ae2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae30:	81a3      	strh	r3, [r4, #12]
 800ae32:	9b00      	ldr	r3, [sp, #0]
 800ae34:	6163      	str	r3, [r4, #20]
 800ae36:	9b01      	ldr	r3, [sp, #4]
 800ae38:	6120      	str	r0, [r4, #16]
 800ae3a:	b15b      	cbz	r3, 800ae54 <__smakebuf_r+0x74>
 800ae3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae40:	4630      	mov	r0, r6
 800ae42:	f000 fe0d 	bl	800ba60 <_isatty_r>
 800ae46:	b128      	cbz	r0, 800ae54 <__smakebuf_r+0x74>
 800ae48:	89a3      	ldrh	r3, [r4, #12]
 800ae4a:	f023 0303 	bic.w	r3, r3, #3
 800ae4e:	f043 0301 	orr.w	r3, r3, #1
 800ae52:	81a3      	strh	r3, [r4, #12]
 800ae54:	89a3      	ldrh	r3, [r4, #12]
 800ae56:	431d      	orrs	r5, r3
 800ae58:	81a5      	strh	r5, [r4, #12]
 800ae5a:	e7cd      	b.n	800adf8 <__smakebuf_r+0x18>
 800ae5c:	0800ac31 	.word	0x0800ac31

0800ae60 <memcpy>:
 800ae60:	b510      	push	{r4, lr}
 800ae62:	1e43      	subs	r3, r0, #1
 800ae64:	440a      	add	r2, r1
 800ae66:	4291      	cmp	r1, r2
 800ae68:	d100      	bne.n	800ae6c <memcpy+0xc>
 800ae6a:	bd10      	pop	{r4, pc}
 800ae6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae74:	e7f7      	b.n	800ae66 <memcpy+0x6>

0800ae76 <__malloc_lock>:
 800ae76:	4770      	bx	lr

0800ae78 <__malloc_unlock>:
 800ae78:	4770      	bx	lr

0800ae7a <_Balloc>:
 800ae7a:	b570      	push	{r4, r5, r6, lr}
 800ae7c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ae7e:	4604      	mov	r4, r0
 800ae80:	460e      	mov	r6, r1
 800ae82:	b93d      	cbnz	r5, 800ae94 <_Balloc+0x1a>
 800ae84:	2010      	movs	r0, #16
 800ae86:	f7fe f8f5 	bl	8009074 <malloc>
 800ae8a:	6260      	str	r0, [r4, #36]	; 0x24
 800ae8c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ae90:	6005      	str	r5, [r0, #0]
 800ae92:	60c5      	str	r5, [r0, #12]
 800ae94:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800ae96:	68eb      	ldr	r3, [r5, #12]
 800ae98:	b183      	cbz	r3, 800aebc <_Balloc+0x42>
 800ae9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800aea2:	b9b8      	cbnz	r0, 800aed4 <_Balloc+0x5a>
 800aea4:	2101      	movs	r1, #1
 800aea6:	fa01 f506 	lsl.w	r5, r1, r6
 800aeaa:	1d6a      	adds	r2, r5, #5
 800aeac:	0092      	lsls	r2, r2, #2
 800aeae:	4620      	mov	r0, r4
 800aeb0:	f000 fabe 	bl	800b430 <_calloc_r>
 800aeb4:	b160      	cbz	r0, 800aed0 <_Balloc+0x56>
 800aeb6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800aeba:	e00e      	b.n	800aeda <_Balloc+0x60>
 800aebc:	2221      	movs	r2, #33	; 0x21
 800aebe:	2104      	movs	r1, #4
 800aec0:	4620      	mov	r0, r4
 800aec2:	f000 fab5 	bl	800b430 <_calloc_r>
 800aec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aec8:	60e8      	str	r0, [r5, #12]
 800aeca:	68db      	ldr	r3, [r3, #12]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d1e4      	bne.n	800ae9a <_Balloc+0x20>
 800aed0:	2000      	movs	r0, #0
 800aed2:	bd70      	pop	{r4, r5, r6, pc}
 800aed4:	6802      	ldr	r2, [r0, #0]
 800aed6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800aeda:	2300      	movs	r3, #0
 800aedc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aee0:	e7f7      	b.n	800aed2 <_Balloc+0x58>

0800aee2 <_Bfree>:
 800aee2:	b570      	push	{r4, r5, r6, lr}
 800aee4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800aee6:	4606      	mov	r6, r0
 800aee8:	460d      	mov	r5, r1
 800aeea:	b93c      	cbnz	r4, 800aefc <_Bfree+0x1a>
 800aeec:	2010      	movs	r0, #16
 800aeee:	f7fe f8c1 	bl	8009074 <malloc>
 800aef2:	6270      	str	r0, [r6, #36]	; 0x24
 800aef4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aef8:	6004      	str	r4, [r0, #0]
 800aefa:	60c4      	str	r4, [r0, #12]
 800aefc:	b13d      	cbz	r5, 800af0e <_Bfree+0x2c>
 800aefe:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800af00:	686a      	ldr	r2, [r5, #4]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af08:	6029      	str	r1, [r5, #0]
 800af0a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800af0e:	bd70      	pop	{r4, r5, r6, pc}

0800af10 <__multadd>:
 800af10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af14:	690d      	ldr	r5, [r1, #16]
 800af16:	461f      	mov	r7, r3
 800af18:	4606      	mov	r6, r0
 800af1a:	460c      	mov	r4, r1
 800af1c:	f101 0c14 	add.w	ip, r1, #20
 800af20:	2300      	movs	r3, #0
 800af22:	f8dc 0000 	ldr.w	r0, [ip]
 800af26:	b281      	uxth	r1, r0
 800af28:	fb02 7101 	mla	r1, r2, r1, r7
 800af2c:	0c0f      	lsrs	r7, r1, #16
 800af2e:	0c00      	lsrs	r0, r0, #16
 800af30:	fb02 7000 	mla	r0, r2, r0, r7
 800af34:	b289      	uxth	r1, r1
 800af36:	3301      	adds	r3, #1
 800af38:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800af3c:	429d      	cmp	r5, r3
 800af3e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800af42:	f84c 1b04 	str.w	r1, [ip], #4
 800af46:	dcec      	bgt.n	800af22 <__multadd+0x12>
 800af48:	b1d7      	cbz	r7, 800af80 <__multadd+0x70>
 800af4a:	68a3      	ldr	r3, [r4, #8]
 800af4c:	42ab      	cmp	r3, r5
 800af4e:	dc12      	bgt.n	800af76 <__multadd+0x66>
 800af50:	6861      	ldr	r1, [r4, #4]
 800af52:	4630      	mov	r0, r6
 800af54:	3101      	adds	r1, #1
 800af56:	f7ff ff90 	bl	800ae7a <_Balloc>
 800af5a:	6922      	ldr	r2, [r4, #16]
 800af5c:	3202      	adds	r2, #2
 800af5e:	f104 010c 	add.w	r1, r4, #12
 800af62:	4680      	mov	r8, r0
 800af64:	0092      	lsls	r2, r2, #2
 800af66:	300c      	adds	r0, #12
 800af68:	f7ff ff7a 	bl	800ae60 <memcpy>
 800af6c:	4621      	mov	r1, r4
 800af6e:	4630      	mov	r0, r6
 800af70:	f7ff ffb7 	bl	800aee2 <_Bfree>
 800af74:	4644      	mov	r4, r8
 800af76:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af7a:	3501      	adds	r5, #1
 800af7c:	615f      	str	r7, [r3, #20]
 800af7e:	6125      	str	r5, [r4, #16]
 800af80:	4620      	mov	r0, r4
 800af82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800af86 <__hi0bits>:
 800af86:	0c02      	lsrs	r2, r0, #16
 800af88:	0412      	lsls	r2, r2, #16
 800af8a:	4603      	mov	r3, r0
 800af8c:	b9b2      	cbnz	r2, 800afbc <__hi0bits+0x36>
 800af8e:	0403      	lsls	r3, r0, #16
 800af90:	2010      	movs	r0, #16
 800af92:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800af96:	bf04      	itt	eq
 800af98:	021b      	lsleq	r3, r3, #8
 800af9a:	3008      	addeq	r0, #8
 800af9c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800afa0:	bf04      	itt	eq
 800afa2:	011b      	lsleq	r3, r3, #4
 800afa4:	3004      	addeq	r0, #4
 800afa6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800afaa:	bf04      	itt	eq
 800afac:	009b      	lsleq	r3, r3, #2
 800afae:	3002      	addeq	r0, #2
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	db06      	blt.n	800afc2 <__hi0bits+0x3c>
 800afb4:	005b      	lsls	r3, r3, #1
 800afb6:	d503      	bpl.n	800afc0 <__hi0bits+0x3a>
 800afb8:	3001      	adds	r0, #1
 800afba:	4770      	bx	lr
 800afbc:	2000      	movs	r0, #0
 800afbe:	e7e8      	b.n	800af92 <__hi0bits+0xc>
 800afc0:	2020      	movs	r0, #32
 800afc2:	4770      	bx	lr

0800afc4 <__lo0bits>:
 800afc4:	6803      	ldr	r3, [r0, #0]
 800afc6:	f013 0207 	ands.w	r2, r3, #7
 800afca:	4601      	mov	r1, r0
 800afcc:	d00b      	beq.n	800afe6 <__lo0bits+0x22>
 800afce:	07da      	lsls	r2, r3, #31
 800afd0:	d423      	bmi.n	800b01a <__lo0bits+0x56>
 800afd2:	0798      	lsls	r0, r3, #30
 800afd4:	bf49      	itett	mi
 800afd6:	085b      	lsrmi	r3, r3, #1
 800afd8:	089b      	lsrpl	r3, r3, #2
 800afda:	2001      	movmi	r0, #1
 800afdc:	600b      	strmi	r3, [r1, #0]
 800afde:	bf5c      	itt	pl
 800afe0:	600b      	strpl	r3, [r1, #0]
 800afe2:	2002      	movpl	r0, #2
 800afe4:	4770      	bx	lr
 800afe6:	b298      	uxth	r0, r3
 800afe8:	b9a8      	cbnz	r0, 800b016 <__lo0bits+0x52>
 800afea:	0c1b      	lsrs	r3, r3, #16
 800afec:	2010      	movs	r0, #16
 800afee:	f013 0fff 	tst.w	r3, #255	; 0xff
 800aff2:	bf04      	itt	eq
 800aff4:	0a1b      	lsreq	r3, r3, #8
 800aff6:	3008      	addeq	r0, #8
 800aff8:	071a      	lsls	r2, r3, #28
 800affa:	bf04      	itt	eq
 800affc:	091b      	lsreq	r3, r3, #4
 800affe:	3004      	addeq	r0, #4
 800b000:	079a      	lsls	r2, r3, #30
 800b002:	bf04      	itt	eq
 800b004:	089b      	lsreq	r3, r3, #2
 800b006:	3002      	addeq	r0, #2
 800b008:	07da      	lsls	r2, r3, #31
 800b00a:	d402      	bmi.n	800b012 <__lo0bits+0x4e>
 800b00c:	085b      	lsrs	r3, r3, #1
 800b00e:	d006      	beq.n	800b01e <__lo0bits+0x5a>
 800b010:	3001      	adds	r0, #1
 800b012:	600b      	str	r3, [r1, #0]
 800b014:	4770      	bx	lr
 800b016:	4610      	mov	r0, r2
 800b018:	e7e9      	b.n	800afee <__lo0bits+0x2a>
 800b01a:	2000      	movs	r0, #0
 800b01c:	4770      	bx	lr
 800b01e:	2020      	movs	r0, #32
 800b020:	4770      	bx	lr

0800b022 <__i2b>:
 800b022:	b510      	push	{r4, lr}
 800b024:	460c      	mov	r4, r1
 800b026:	2101      	movs	r1, #1
 800b028:	f7ff ff27 	bl	800ae7a <_Balloc>
 800b02c:	2201      	movs	r2, #1
 800b02e:	6144      	str	r4, [r0, #20]
 800b030:	6102      	str	r2, [r0, #16]
 800b032:	bd10      	pop	{r4, pc}

0800b034 <__multiply>:
 800b034:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b038:	4614      	mov	r4, r2
 800b03a:	690a      	ldr	r2, [r1, #16]
 800b03c:	6923      	ldr	r3, [r4, #16]
 800b03e:	429a      	cmp	r2, r3
 800b040:	bfb8      	it	lt
 800b042:	460b      	movlt	r3, r1
 800b044:	4688      	mov	r8, r1
 800b046:	bfbc      	itt	lt
 800b048:	46a0      	movlt	r8, r4
 800b04a:	461c      	movlt	r4, r3
 800b04c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b050:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b054:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b058:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b05c:	eb07 0609 	add.w	r6, r7, r9
 800b060:	42b3      	cmp	r3, r6
 800b062:	bfb8      	it	lt
 800b064:	3101      	addlt	r1, #1
 800b066:	f7ff ff08 	bl	800ae7a <_Balloc>
 800b06a:	f100 0514 	add.w	r5, r0, #20
 800b06e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800b072:	462b      	mov	r3, r5
 800b074:	2200      	movs	r2, #0
 800b076:	4573      	cmp	r3, lr
 800b078:	d316      	bcc.n	800b0a8 <__multiply+0x74>
 800b07a:	f104 0214 	add.w	r2, r4, #20
 800b07e:	f108 0114 	add.w	r1, r8, #20
 800b082:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800b086:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	9b00      	ldr	r3, [sp, #0]
 800b08e:	9201      	str	r2, [sp, #4]
 800b090:	4293      	cmp	r3, r2
 800b092:	d80c      	bhi.n	800b0ae <__multiply+0x7a>
 800b094:	2e00      	cmp	r6, #0
 800b096:	dd03      	ble.n	800b0a0 <__multiply+0x6c>
 800b098:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d05d      	beq.n	800b15c <__multiply+0x128>
 800b0a0:	6106      	str	r6, [r0, #16]
 800b0a2:	b003      	add	sp, #12
 800b0a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0a8:	f843 2b04 	str.w	r2, [r3], #4
 800b0ac:	e7e3      	b.n	800b076 <__multiply+0x42>
 800b0ae:	f8b2 b000 	ldrh.w	fp, [r2]
 800b0b2:	f1bb 0f00 	cmp.w	fp, #0
 800b0b6:	d023      	beq.n	800b100 <__multiply+0xcc>
 800b0b8:	4689      	mov	r9, r1
 800b0ba:	46ac      	mov	ip, r5
 800b0bc:	f04f 0800 	mov.w	r8, #0
 800b0c0:	f859 4b04 	ldr.w	r4, [r9], #4
 800b0c4:	f8dc a000 	ldr.w	sl, [ip]
 800b0c8:	b2a3      	uxth	r3, r4
 800b0ca:	fa1f fa8a 	uxth.w	sl, sl
 800b0ce:	fb0b a303 	mla	r3, fp, r3, sl
 800b0d2:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b0d6:	f8dc 4000 	ldr.w	r4, [ip]
 800b0da:	4443      	add	r3, r8
 800b0dc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b0e0:	fb0b 840a 	mla	r4, fp, sl, r8
 800b0e4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800b0e8:	46e2      	mov	sl, ip
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b0f0:	454f      	cmp	r7, r9
 800b0f2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800b0f6:	f84a 3b04 	str.w	r3, [sl], #4
 800b0fa:	d82b      	bhi.n	800b154 <__multiply+0x120>
 800b0fc:	f8cc 8004 	str.w	r8, [ip, #4]
 800b100:	9b01      	ldr	r3, [sp, #4]
 800b102:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800b106:	3204      	adds	r2, #4
 800b108:	f1ba 0f00 	cmp.w	sl, #0
 800b10c:	d020      	beq.n	800b150 <__multiply+0x11c>
 800b10e:	682b      	ldr	r3, [r5, #0]
 800b110:	4689      	mov	r9, r1
 800b112:	46a8      	mov	r8, r5
 800b114:	f04f 0b00 	mov.w	fp, #0
 800b118:	f8b9 c000 	ldrh.w	ip, [r9]
 800b11c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800b120:	fb0a 440c 	mla	r4, sl, ip, r4
 800b124:	445c      	add	r4, fp
 800b126:	46c4      	mov	ip, r8
 800b128:	b29b      	uxth	r3, r3
 800b12a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800b12e:	f84c 3b04 	str.w	r3, [ip], #4
 800b132:	f859 3b04 	ldr.w	r3, [r9], #4
 800b136:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800b13a:	0c1b      	lsrs	r3, r3, #16
 800b13c:	fb0a b303 	mla	r3, sl, r3, fp
 800b140:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800b144:	454f      	cmp	r7, r9
 800b146:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800b14a:	d805      	bhi.n	800b158 <__multiply+0x124>
 800b14c:	f8c8 3004 	str.w	r3, [r8, #4]
 800b150:	3504      	adds	r5, #4
 800b152:	e79b      	b.n	800b08c <__multiply+0x58>
 800b154:	46d4      	mov	ip, sl
 800b156:	e7b3      	b.n	800b0c0 <__multiply+0x8c>
 800b158:	46e0      	mov	r8, ip
 800b15a:	e7dd      	b.n	800b118 <__multiply+0xe4>
 800b15c:	3e01      	subs	r6, #1
 800b15e:	e799      	b.n	800b094 <__multiply+0x60>

0800b160 <__pow5mult>:
 800b160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b164:	4615      	mov	r5, r2
 800b166:	f012 0203 	ands.w	r2, r2, #3
 800b16a:	4606      	mov	r6, r0
 800b16c:	460f      	mov	r7, r1
 800b16e:	d007      	beq.n	800b180 <__pow5mult+0x20>
 800b170:	3a01      	subs	r2, #1
 800b172:	4c21      	ldr	r4, [pc, #132]	; (800b1f8 <__pow5mult+0x98>)
 800b174:	2300      	movs	r3, #0
 800b176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b17a:	f7ff fec9 	bl	800af10 <__multadd>
 800b17e:	4607      	mov	r7, r0
 800b180:	10ad      	asrs	r5, r5, #2
 800b182:	d035      	beq.n	800b1f0 <__pow5mult+0x90>
 800b184:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b186:	b93c      	cbnz	r4, 800b198 <__pow5mult+0x38>
 800b188:	2010      	movs	r0, #16
 800b18a:	f7fd ff73 	bl	8009074 <malloc>
 800b18e:	6270      	str	r0, [r6, #36]	; 0x24
 800b190:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b194:	6004      	str	r4, [r0, #0]
 800b196:	60c4      	str	r4, [r0, #12]
 800b198:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b19c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1a0:	b94c      	cbnz	r4, 800b1b6 <__pow5mult+0x56>
 800b1a2:	f240 2171 	movw	r1, #625	; 0x271
 800b1a6:	4630      	mov	r0, r6
 800b1a8:	f7ff ff3b 	bl	800b022 <__i2b>
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1b2:	4604      	mov	r4, r0
 800b1b4:	6003      	str	r3, [r0, #0]
 800b1b6:	f04f 0800 	mov.w	r8, #0
 800b1ba:	07eb      	lsls	r3, r5, #31
 800b1bc:	d50a      	bpl.n	800b1d4 <__pow5mult+0x74>
 800b1be:	4639      	mov	r1, r7
 800b1c0:	4622      	mov	r2, r4
 800b1c2:	4630      	mov	r0, r6
 800b1c4:	f7ff ff36 	bl	800b034 <__multiply>
 800b1c8:	4639      	mov	r1, r7
 800b1ca:	4681      	mov	r9, r0
 800b1cc:	4630      	mov	r0, r6
 800b1ce:	f7ff fe88 	bl	800aee2 <_Bfree>
 800b1d2:	464f      	mov	r7, r9
 800b1d4:	106d      	asrs	r5, r5, #1
 800b1d6:	d00b      	beq.n	800b1f0 <__pow5mult+0x90>
 800b1d8:	6820      	ldr	r0, [r4, #0]
 800b1da:	b938      	cbnz	r0, 800b1ec <__pow5mult+0x8c>
 800b1dc:	4622      	mov	r2, r4
 800b1de:	4621      	mov	r1, r4
 800b1e0:	4630      	mov	r0, r6
 800b1e2:	f7ff ff27 	bl	800b034 <__multiply>
 800b1e6:	6020      	str	r0, [r4, #0]
 800b1e8:	f8c0 8000 	str.w	r8, [r0]
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	e7e4      	b.n	800b1ba <__pow5mult+0x5a>
 800b1f0:	4638      	mov	r0, r7
 800b1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1f6:	bf00      	nop
 800b1f8:	08013970 	.word	0x08013970

0800b1fc <__lshift>:
 800b1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b200:	460c      	mov	r4, r1
 800b202:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b206:	6923      	ldr	r3, [r4, #16]
 800b208:	6849      	ldr	r1, [r1, #4]
 800b20a:	eb0a 0903 	add.w	r9, sl, r3
 800b20e:	68a3      	ldr	r3, [r4, #8]
 800b210:	4607      	mov	r7, r0
 800b212:	4616      	mov	r6, r2
 800b214:	f109 0501 	add.w	r5, r9, #1
 800b218:	42ab      	cmp	r3, r5
 800b21a:	db32      	blt.n	800b282 <__lshift+0x86>
 800b21c:	4638      	mov	r0, r7
 800b21e:	f7ff fe2c 	bl	800ae7a <_Balloc>
 800b222:	2300      	movs	r3, #0
 800b224:	4680      	mov	r8, r0
 800b226:	f100 0114 	add.w	r1, r0, #20
 800b22a:	461a      	mov	r2, r3
 800b22c:	4553      	cmp	r3, sl
 800b22e:	db2b      	blt.n	800b288 <__lshift+0x8c>
 800b230:	6920      	ldr	r0, [r4, #16]
 800b232:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b236:	f104 0314 	add.w	r3, r4, #20
 800b23a:	f016 021f 	ands.w	r2, r6, #31
 800b23e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b242:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b246:	d025      	beq.n	800b294 <__lshift+0x98>
 800b248:	f1c2 0e20 	rsb	lr, r2, #32
 800b24c:	2000      	movs	r0, #0
 800b24e:	681e      	ldr	r6, [r3, #0]
 800b250:	468a      	mov	sl, r1
 800b252:	4096      	lsls	r6, r2
 800b254:	4330      	orrs	r0, r6
 800b256:	f84a 0b04 	str.w	r0, [sl], #4
 800b25a:	f853 0b04 	ldr.w	r0, [r3], #4
 800b25e:	459c      	cmp	ip, r3
 800b260:	fa20 f00e 	lsr.w	r0, r0, lr
 800b264:	d814      	bhi.n	800b290 <__lshift+0x94>
 800b266:	6048      	str	r0, [r1, #4]
 800b268:	b108      	cbz	r0, 800b26e <__lshift+0x72>
 800b26a:	f109 0502 	add.w	r5, r9, #2
 800b26e:	3d01      	subs	r5, #1
 800b270:	4638      	mov	r0, r7
 800b272:	f8c8 5010 	str.w	r5, [r8, #16]
 800b276:	4621      	mov	r1, r4
 800b278:	f7ff fe33 	bl	800aee2 <_Bfree>
 800b27c:	4640      	mov	r0, r8
 800b27e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b282:	3101      	adds	r1, #1
 800b284:	005b      	lsls	r3, r3, #1
 800b286:	e7c7      	b.n	800b218 <__lshift+0x1c>
 800b288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b28c:	3301      	adds	r3, #1
 800b28e:	e7cd      	b.n	800b22c <__lshift+0x30>
 800b290:	4651      	mov	r1, sl
 800b292:	e7dc      	b.n	800b24e <__lshift+0x52>
 800b294:	3904      	subs	r1, #4
 800b296:	f853 2b04 	ldr.w	r2, [r3], #4
 800b29a:	f841 2f04 	str.w	r2, [r1, #4]!
 800b29e:	459c      	cmp	ip, r3
 800b2a0:	d8f9      	bhi.n	800b296 <__lshift+0x9a>
 800b2a2:	e7e4      	b.n	800b26e <__lshift+0x72>

0800b2a4 <__mcmp>:
 800b2a4:	6903      	ldr	r3, [r0, #16]
 800b2a6:	690a      	ldr	r2, [r1, #16]
 800b2a8:	1a9b      	subs	r3, r3, r2
 800b2aa:	b530      	push	{r4, r5, lr}
 800b2ac:	d10c      	bne.n	800b2c8 <__mcmp+0x24>
 800b2ae:	0092      	lsls	r2, r2, #2
 800b2b0:	3014      	adds	r0, #20
 800b2b2:	3114      	adds	r1, #20
 800b2b4:	1884      	adds	r4, r0, r2
 800b2b6:	4411      	add	r1, r2
 800b2b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b2bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b2c0:	4295      	cmp	r5, r2
 800b2c2:	d003      	beq.n	800b2cc <__mcmp+0x28>
 800b2c4:	d305      	bcc.n	800b2d2 <__mcmp+0x2e>
 800b2c6:	2301      	movs	r3, #1
 800b2c8:	4618      	mov	r0, r3
 800b2ca:	bd30      	pop	{r4, r5, pc}
 800b2cc:	42a0      	cmp	r0, r4
 800b2ce:	d3f3      	bcc.n	800b2b8 <__mcmp+0x14>
 800b2d0:	e7fa      	b.n	800b2c8 <__mcmp+0x24>
 800b2d2:	f04f 33ff 	mov.w	r3, #4294967295
 800b2d6:	e7f7      	b.n	800b2c8 <__mcmp+0x24>

0800b2d8 <__mdiff>:
 800b2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2dc:	460d      	mov	r5, r1
 800b2de:	4607      	mov	r7, r0
 800b2e0:	4611      	mov	r1, r2
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	4614      	mov	r4, r2
 800b2e6:	f7ff ffdd 	bl	800b2a4 <__mcmp>
 800b2ea:	1e06      	subs	r6, r0, #0
 800b2ec:	d108      	bne.n	800b300 <__mdiff+0x28>
 800b2ee:	4631      	mov	r1, r6
 800b2f0:	4638      	mov	r0, r7
 800b2f2:	f7ff fdc2 	bl	800ae7a <_Balloc>
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b2fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b300:	bfa4      	itt	ge
 800b302:	4623      	movge	r3, r4
 800b304:	462c      	movge	r4, r5
 800b306:	4638      	mov	r0, r7
 800b308:	6861      	ldr	r1, [r4, #4]
 800b30a:	bfa6      	itte	ge
 800b30c:	461d      	movge	r5, r3
 800b30e:	2600      	movge	r6, #0
 800b310:	2601      	movlt	r6, #1
 800b312:	f7ff fdb2 	bl	800ae7a <_Balloc>
 800b316:	692b      	ldr	r3, [r5, #16]
 800b318:	60c6      	str	r6, [r0, #12]
 800b31a:	6926      	ldr	r6, [r4, #16]
 800b31c:	f105 0914 	add.w	r9, r5, #20
 800b320:	f104 0214 	add.w	r2, r4, #20
 800b324:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800b328:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800b32c:	f100 0514 	add.w	r5, r0, #20
 800b330:	f04f 0e00 	mov.w	lr, #0
 800b334:	f852 ab04 	ldr.w	sl, [r2], #4
 800b338:	f859 4b04 	ldr.w	r4, [r9], #4
 800b33c:	fa1e f18a 	uxtah	r1, lr, sl
 800b340:	b2a3      	uxth	r3, r4
 800b342:	1ac9      	subs	r1, r1, r3
 800b344:	0c23      	lsrs	r3, r4, #16
 800b346:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800b34a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800b34e:	b289      	uxth	r1, r1
 800b350:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800b354:	45c8      	cmp	r8, r9
 800b356:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800b35a:	4694      	mov	ip, r2
 800b35c:	f845 3b04 	str.w	r3, [r5], #4
 800b360:	d8e8      	bhi.n	800b334 <__mdiff+0x5c>
 800b362:	45bc      	cmp	ip, r7
 800b364:	d304      	bcc.n	800b370 <__mdiff+0x98>
 800b366:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800b36a:	b183      	cbz	r3, 800b38e <__mdiff+0xb6>
 800b36c:	6106      	str	r6, [r0, #16]
 800b36e:	e7c5      	b.n	800b2fc <__mdiff+0x24>
 800b370:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b374:	fa1e f381 	uxtah	r3, lr, r1
 800b378:	141a      	asrs	r2, r3, #16
 800b37a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b37e:	b29b      	uxth	r3, r3
 800b380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b384:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800b388:	f845 3b04 	str.w	r3, [r5], #4
 800b38c:	e7e9      	b.n	800b362 <__mdiff+0x8a>
 800b38e:	3e01      	subs	r6, #1
 800b390:	e7e9      	b.n	800b366 <__mdiff+0x8e>

0800b392 <__d2b>:
 800b392:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b396:	460e      	mov	r6, r1
 800b398:	2101      	movs	r1, #1
 800b39a:	ec59 8b10 	vmov	r8, r9, d0
 800b39e:	4615      	mov	r5, r2
 800b3a0:	f7ff fd6b 	bl	800ae7a <_Balloc>
 800b3a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b3a8:	4607      	mov	r7, r0
 800b3aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b3ae:	bb34      	cbnz	r4, 800b3fe <__d2b+0x6c>
 800b3b0:	9301      	str	r3, [sp, #4]
 800b3b2:	f1b8 0300 	subs.w	r3, r8, #0
 800b3b6:	d027      	beq.n	800b408 <__d2b+0x76>
 800b3b8:	a802      	add	r0, sp, #8
 800b3ba:	f840 3d08 	str.w	r3, [r0, #-8]!
 800b3be:	f7ff fe01 	bl	800afc4 <__lo0bits>
 800b3c2:	9900      	ldr	r1, [sp, #0]
 800b3c4:	b1f0      	cbz	r0, 800b404 <__d2b+0x72>
 800b3c6:	9a01      	ldr	r2, [sp, #4]
 800b3c8:	f1c0 0320 	rsb	r3, r0, #32
 800b3cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d0:	430b      	orrs	r3, r1
 800b3d2:	40c2      	lsrs	r2, r0
 800b3d4:	617b      	str	r3, [r7, #20]
 800b3d6:	9201      	str	r2, [sp, #4]
 800b3d8:	9b01      	ldr	r3, [sp, #4]
 800b3da:	61bb      	str	r3, [r7, #24]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	bf14      	ite	ne
 800b3e0:	2102      	movne	r1, #2
 800b3e2:	2101      	moveq	r1, #1
 800b3e4:	6139      	str	r1, [r7, #16]
 800b3e6:	b1c4      	cbz	r4, 800b41a <__d2b+0x88>
 800b3e8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b3ec:	4404      	add	r4, r0
 800b3ee:	6034      	str	r4, [r6, #0]
 800b3f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b3f4:	6028      	str	r0, [r5, #0]
 800b3f6:	4638      	mov	r0, r7
 800b3f8:	b003      	add	sp, #12
 800b3fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b3fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b402:	e7d5      	b.n	800b3b0 <__d2b+0x1e>
 800b404:	6179      	str	r1, [r7, #20]
 800b406:	e7e7      	b.n	800b3d8 <__d2b+0x46>
 800b408:	a801      	add	r0, sp, #4
 800b40a:	f7ff fddb 	bl	800afc4 <__lo0bits>
 800b40e:	9b01      	ldr	r3, [sp, #4]
 800b410:	617b      	str	r3, [r7, #20]
 800b412:	2101      	movs	r1, #1
 800b414:	6139      	str	r1, [r7, #16]
 800b416:	3020      	adds	r0, #32
 800b418:	e7e5      	b.n	800b3e6 <__d2b+0x54>
 800b41a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800b41e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b422:	6030      	str	r0, [r6, #0]
 800b424:	6918      	ldr	r0, [r3, #16]
 800b426:	f7ff fdae 	bl	800af86 <__hi0bits>
 800b42a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b42e:	e7e1      	b.n	800b3f4 <__d2b+0x62>

0800b430 <_calloc_r>:
 800b430:	b538      	push	{r3, r4, r5, lr}
 800b432:	fb02 f401 	mul.w	r4, r2, r1
 800b436:	4621      	mov	r1, r4
 800b438:	f7fd fe82 	bl	8009140 <_malloc_r>
 800b43c:	4605      	mov	r5, r0
 800b43e:	b118      	cbz	r0, 800b448 <_calloc_r+0x18>
 800b440:	4622      	mov	r2, r4
 800b442:	2100      	movs	r1, #0
 800b444:	f7fd fe26 	bl	8009094 <memset>
 800b448:	4628      	mov	r0, r5
 800b44a:	bd38      	pop	{r3, r4, r5, pc}

0800b44c <__ssputs_r>:
 800b44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b450:	688e      	ldr	r6, [r1, #8]
 800b452:	429e      	cmp	r6, r3
 800b454:	4682      	mov	sl, r0
 800b456:	460c      	mov	r4, r1
 800b458:	4690      	mov	r8, r2
 800b45a:	4699      	mov	r9, r3
 800b45c:	d837      	bhi.n	800b4ce <__ssputs_r+0x82>
 800b45e:	898a      	ldrh	r2, [r1, #12]
 800b460:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b464:	d031      	beq.n	800b4ca <__ssputs_r+0x7e>
 800b466:	6825      	ldr	r5, [r4, #0]
 800b468:	6909      	ldr	r1, [r1, #16]
 800b46a:	1a6f      	subs	r7, r5, r1
 800b46c:	6965      	ldr	r5, [r4, #20]
 800b46e:	2302      	movs	r3, #2
 800b470:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b474:	fb95 f5f3 	sdiv	r5, r5, r3
 800b478:	f109 0301 	add.w	r3, r9, #1
 800b47c:	443b      	add	r3, r7
 800b47e:	429d      	cmp	r5, r3
 800b480:	bf38      	it	cc
 800b482:	461d      	movcc	r5, r3
 800b484:	0553      	lsls	r3, r2, #21
 800b486:	d530      	bpl.n	800b4ea <__ssputs_r+0x9e>
 800b488:	4629      	mov	r1, r5
 800b48a:	f7fd fe59 	bl	8009140 <_malloc_r>
 800b48e:	4606      	mov	r6, r0
 800b490:	b950      	cbnz	r0, 800b4a8 <__ssputs_r+0x5c>
 800b492:	230c      	movs	r3, #12
 800b494:	f8ca 3000 	str.w	r3, [sl]
 800b498:	89a3      	ldrh	r3, [r4, #12]
 800b49a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b49e:	81a3      	strh	r3, [r4, #12]
 800b4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4a8:	463a      	mov	r2, r7
 800b4aa:	6921      	ldr	r1, [r4, #16]
 800b4ac:	f7ff fcd8 	bl	800ae60 <memcpy>
 800b4b0:	89a3      	ldrh	r3, [r4, #12]
 800b4b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b4b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b4ba:	81a3      	strh	r3, [r4, #12]
 800b4bc:	6126      	str	r6, [r4, #16]
 800b4be:	6165      	str	r5, [r4, #20]
 800b4c0:	443e      	add	r6, r7
 800b4c2:	1bed      	subs	r5, r5, r7
 800b4c4:	6026      	str	r6, [r4, #0]
 800b4c6:	60a5      	str	r5, [r4, #8]
 800b4c8:	464e      	mov	r6, r9
 800b4ca:	454e      	cmp	r6, r9
 800b4cc:	d900      	bls.n	800b4d0 <__ssputs_r+0x84>
 800b4ce:	464e      	mov	r6, r9
 800b4d0:	4632      	mov	r2, r6
 800b4d2:	4641      	mov	r1, r8
 800b4d4:	6820      	ldr	r0, [r4, #0]
 800b4d6:	f000 faf7 	bl	800bac8 <memmove>
 800b4da:	68a3      	ldr	r3, [r4, #8]
 800b4dc:	1b9b      	subs	r3, r3, r6
 800b4de:	60a3      	str	r3, [r4, #8]
 800b4e0:	6823      	ldr	r3, [r4, #0]
 800b4e2:	441e      	add	r6, r3
 800b4e4:	6026      	str	r6, [r4, #0]
 800b4e6:	2000      	movs	r0, #0
 800b4e8:	e7dc      	b.n	800b4a4 <__ssputs_r+0x58>
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	f000 fb05 	bl	800bafa <_realloc_r>
 800b4f0:	4606      	mov	r6, r0
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	d1e2      	bne.n	800b4bc <__ssputs_r+0x70>
 800b4f6:	6921      	ldr	r1, [r4, #16]
 800b4f8:	4650      	mov	r0, sl
 800b4fa:	f7fd fdd3 	bl	80090a4 <_free_r>
 800b4fe:	e7c8      	b.n	800b492 <__ssputs_r+0x46>

0800b500 <_svfiprintf_r>:
 800b500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b504:	461d      	mov	r5, r3
 800b506:	898b      	ldrh	r3, [r1, #12]
 800b508:	061f      	lsls	r7, r3, #24
 800b50a:	b09d      	sub	sp, #116	; 0x74
 800b50c:	4680      	mov	r8, r0
 800b50e:	460c      	mov	r4, r1
 800b510:	4616      	mov	r6, r2
 800b512:	d50f      	bpl.n	800b534 <_svfiprintf_r+0x34>
 800b514:	690b      	ldr	r3, [r1, #16]
 800b516:	b96b      	cbnz	r3, 800b534 <_svfiprintf_r+0x34>
 800b518:	2140      	movs	r1, #64	; 0x40
 800b51a:	f7fd fe11 	bl	8009140 <_malloc_r>
 800b51e:	6020      	str	r0, [r4, #0]
 800b520:	6120      	str	r0, [r4, #16]
 800b522:	b928      	cbnz	r0, 800b530 <_svfiprintf_r+0x30>
 800b524:	230c      	movs	r3, #12
 800b526:	f8c8 3000 	str.w	r3, [r8]
 800b52a:	f04f 30ff 	mov.w	r0, #4294967295
 800b52e:	e0c8      	b.n	800b6c2 <_svfiprintf_r+0x1c2>
 800b530:	2340      	movs	r3, #64	; 0x40
 800b532:	6163      	str	r3, [r4, #20]
 800b534:	2300      	movs	r3, #0
 800b536:	9309      	str	r3, [sp, #36]	; 0x24
 800b538:	2320      	movs	r3, #32
 800b53a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b53e:	2330      	movs	r3, #48	; 0x30
 800b540:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b544:	9503      	str	r5, [sp, #12]
 800b546:	f04f 0b01 	mov.w	fp, #1
 800b54a:	4637      	mov	r7, r6
 800b54c:	463d      	mov	r5, r7
 800b54e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b552:	b10b      	cbz	r3, 800b558 <_svfiprintf_r+0x58>
 800b554:	2b25      	cmp	r3, #37	; 0x25
 800b556:	d13e      	bne.n	800b5d6 <_svfiprintf_r+0xd6>
 800b558:	ebb7 0a06 	subs.w	sl, r7, r6
 800b55c:	d00b      	beq.n	800b576 <_svfiprintf_r+0x76>
 800b55e:	4653      	mov	r3, sl
 800b560:	4632      	mov	r2, r6
 800b562:	4621      	mov	r1, r4
 800b564:	4640      	mov	r0, r8
 800b566:	f7ff ff71 	bl	800b44c <__ssputs_r>
 800b56a:	3001      	adds	r0, #1
 800b56c:	f000 80a4 	beq.w	800b6b8 <_svfiprintf_r+0x1b8>
 800b570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b572:	4453      	add	r3, sl
 800b574:	9309      	str	r3, [sp, #36]	; 0x24
 800b576:	783b      	ldrb	r3, [r7, #0]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	f000 809d 	beq.w	800b6b8 <_svfiprintf_r+0x1b8>
 800b57e:	2300      	movs	r3, #0
 800b580:	f04f 32ff 	mov.w	r2, #4294967295
 800b584:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b588:	9304      	str	r3, [sp, #16]
 800b58a:	9307      	str	r3, [sp, #28]
 800b58c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b590:	931a      	str	r3, [sp, #104]	; 0x68
 800b592:	462f      	mov	r7, r5
 800b594:	2205      	movs	r2, #5
 800b596:	f817 1b01 	ldrb.w	r1, [r7], #1
 800b59a:	4850      	ldr	r0, [pc, #320]	; (800b6dc <_svfiprintf_r+0x1dc>)
 800b59c:	f7f4 fe50 	bl	8000240 <memchr>
 800b5a0:	9b04      	ldr	r3, [sp, #16]
 800b5a2:	b9d0      	cbnz	r0, 800b5da <_svfiprintf_r+0xda>
 800b5a4:	06d9      	lsls	r1, r3, #27
 800b5a6:	bf44      	itt	mi
 800b5a8:	2220      	movmi	r2, #32
 800b5aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b5ae:	071a      	lsls	r2, r3, #28
 800b5b0:	bf44      	itt	mi
 800b5b2:	222b      	movmi	r2, #43	; 0x2b
 800b5b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b5b8:	782a      	ldrb	r2, [r5, #0]
 800b5ba:	2a2a      	cmp	r2, #42	; 0x2a
 800b5bc:	d015      	beq.n	800b5ea <_svfiprintf_r+0xea>
 800b5be:	9a07      	ldr	r2, [sp, #28]
 800b5c0:	462f      	mov	r7, r5
 800b5c2:	2000      	movs	r0, #0
 800b5c4:	250a      	movs	r5, #10
 800b5c6:	4639      	mov	r1, r7
 800b5c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5cc:	3b30      	subs	r3, #48	; 0x30
 800b5ce:	2b09      	cmp	r3, #9
 800b5d0:	d94d      	bls.n	800b66e <_svfiprintf_r+0x16e>
 800b5d2:	b1b8      	cbz	r0, 800b604 <_svfiprintf_r+0x104>
 800b5d4:	e00f      	b.n	800b5f6 <_svfiprintf_r+0xf6>
 800b5d6:	462f      	mov	r7, r5
 800b5d8:	e7b8      	b.n	800b54c <_svfiprintf_r+0x4c>
 800b5da:	4a40      	ldr	r2, [pc, #256]	; (800b6dc <_svfiprintf_r+0x1dc>)
 800b5dc:	1a80      	subs	r0, r0, r2
 800b5de:	fa0b f000 	lsl.w	r0, fp, r0
 800b5e2:	4318      	orrs	r0, r3
 800b5e4:	9004      	str	r0, [sp, #16]
 800b5e6:	463d      	mov	r5, r7
 800b5e8:	e7d3      	b.n	800b592 <_svfiprintf_r+0x92>
 800b5ea:	9a03      	ldr	r2, [sp, #12]
 800b5ec:	1d11      	adds	r1, r2, #4
 800b5ee:	6812      	ldr	r2, [r2, #0]
 800b5f0:	9103      	str	r1, [sp, #12]
 800b5f2:	2a00      	cmp	r2, #0
 800b5f4:	db01      	blt.n	800b5fa <_svfiprintf_r+0xfa>
 800b5f6:	9207      	str	r2, [sp, #28]
 800b5f8:	e004      	b.n	800b604 <_svfiprintf_r+0x104>
 800b5fa:	4252      	negs	r2, r2
 800b5fc:	f043 0302 	orr.w	r3, r3, #2
 800b600:	9207      	str	r2, [sp, #28]
 800b602:	9304      	str	r3, [sp, #16]
 800b604:	783b      	ldrb	r3, [r7, #0]
 800b606:	2b2e      	cmp	r3, #46	; 0x2e
 800b608:	d10c      	bne.n	800b624 <_svfiprintf_r+0x124>
 800b60a:	787b      	ldrb	r3, [r7, #1]
 800b60c:	2b2a      	cmp	r3, #42	; 0x2a
 800b60e:	d133      	bne.n	800b678 <_svfiprintf_r+0x178>
 800b610:	9b03      	ldr	r3, [sp, #12]
 800b612:	1d1a      	adds	r2, r3, #4
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	9203      	str	r2, [sp, #12]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	bfb8      	it	lt
 800b61c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b620:	3702      	adds	r7, #2
 800b622:	9305      	str	r3, [sp, #20]
 800b624:	4d2e      	ldr	r5, [pc, #184]	; (800b6e0 <_svfiprintf_r+0x1e0>)
 800b626:	7839      	ldrb	r1, [r7, #0]
 800b628:	2203      	movs	r2, #3
 800b62a:	4628      	mov	r0, r5
 800b62c:	f7f4 fe08 	bl	8000240 <memchr>
 800b630:	b138      	cbz	r0, 800b642 <_svfiprintf_r+0x142>
 800b632:	2340      	movs	r3, #64	; 0x40
 800b634:	1b40      	subs	r0, r0, r5
 800b636:	fa03 f000 	lsl.w	r0, r3, r0
 800b63a:	9b04      	ldr	r3, [sp, #16]
 800b63c:	4303      	orrs	r3, r0
 800b63e:	3701      	adds	r7, #1
 800b640:	9304      	str	r3, [sp, #16]
 800b642:	7839      	ldrb	r1, [r7, #0]
 800b644:	4827      	ldr	r0, [pc, #156]	; (800b6e4 <_svfiprintf_r+0x1e4>)
 800b646:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b64a:	2206      	movs	r2, #6
 800b64c:	1c7e      	adds	r6, r7, #1
 800b64e:	f7f4 fdf7 	bl	8000240 <memchr>
 800b652:	2800      	cmp	r0, #0
 800b654:	d038      	beq.n	800b6c8 <_svfiprintf_r+0x1c8>
 800b656:	4b24      	ldr	r3, [pc, #144]	; (800b6e8 <_svfiprintf_r+0x1e8>)
 800b658:	bb13      	cbnz	r3, 800b6a0 <_svfiprintf_r+0x1a0>
 800b65a:	9b03      	ldr	r3, [sp, #12]
 800b65c:	3307      	adds	r3, #7
 800b65e:	f023 0307 	bic.w	r3, r3, #7
 800b662:	3308      	adds	r3, #8
 800b664:	9303      	str	r3, [sp, #12]
 800b666:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b668:	444b      	add	r3, r9
 800b66a:	9309      	str	r3, [sp, #36]	; 0x24
 800b66c:	e76d      	b.n	800b54a <_svfiprintf_r+0x4a>
 800b66e:	fb05 3202 	mla	r2, r5, r2, r3
 800b672:	2001      	movs	r0, #1
 800b674:	460f      	mov	r7, r1
 800b676:	e7a6      	b.n	800b5c6 <_svfiprintf_r+0xc6>
 800b678:	2300      	movs	r3, #0
 800b67a:	3701      	adds	r7, #1
 800b67c:	9305      	str	r3, [sp, #20]
 800b67e:	4619      	mov	r1, r3
 800b680:	250a      	movs	r5, #10
 800b682:	4638      	mov	r0, r7
 800b684:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b688:	3a30      	subs	r2, #48	; 0x30
 800b68a:	2a09      	cmp	r2, #9
 800b68c:	d903      	bls.n	800b696 <_svfiprintf_r+0x196>
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d0c8      	beq.n	800b624 <_svfiprintf_r+0x124>
 800b692:	9105      	str	r1, [sp, #20]
 800b694:	e7c6      	b.n	800b624 <_svfiprintf_r+0x124>
 800b696:	fb05 2101 	mla	r1, r5, r1, r2
 800b69a:	2301      	movs	r3, #1
 800b69c:	4607      	mov	r7, r0
 800b69e:	e7f0      	b.n	800b682 <_svfiprintf_r+0x182>
 800b6a0:	ab03      	add	r3, sp, #12
 800b6a2:	9300      	str	r3, [sp, #0]
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	4b11      	ldr	r3, [pc, #68]	; (800b6ec <_svfiprintf_r+0x1ec>)
 800b6a8:	a904      	add	r1, sp, #16
 800b6aa:	4640      	mov	r0, r8
 800b6ac:	f7fd fe36 	bl	800931c <_printf_float>
 800b6b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b6b4:	4681      	mov	r9, r0
 800b6b6:	d1d6      	bne.n	800b666 <_svfiprintf_r+0x166>
 800b6b8:	89a3      	ldrh	r3, [r4, #12]
 800b6ba:	065b      	lsls	r3, r3, #25
 800b6bc:	f53f af35 	bmi.w	800b52a <_svfiprintf_r+0x2a>
 800b6c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6c2:	b01d      	add	sp, #116	; 0x74
 800b6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6c8:	ab03      	add	r3, sp, #12
 800b6ca:	9300      	str	r3, [sp, #0]
 800b6cc:	4622      	mov	r2, r4
 800b6ce:	4b07      	ldr	r3, [pc, #28]	; (800b6ec <_svfiprintf_r+0x1ec>)
 800b6d0:	a904      	add	r1, sp, #16
 800b6d2:	4640      	mov	r0, r8
 800b6d4:	f7fe f8d8 	bl	8009888 <_printf_i>
 800b6d8:	e7ea      	b.n	800b6b0 <_svfiprintf_r+0x1b0>
 800b6da:	bf00      	nop
 800b6dc:	0801397c 	.word	0x0801397c
 800b6e0:	08013982 	.word	0x08013982
 800b6e4:	08013986 	.word	0x08013986
 800b6e8:	0800931d 	.word	0x0800931d
 800b6ec:	0800b44d 	.word	0x0800b44d

0800b6f0 <__sfputc_r>:
 800b6f0:	6893      	ldr	r3, [r2, #8]
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	b410      	push	{r4}
 800b6f8:	6093      	str	r3, [r2, #8]
 800b6fa:	da08      	bge.n	800b70e <__sfputc_r+0x1e>
 800b6fc:	6994      	ldr	r4, [r2, #24]
 800b6fe:	42a3      	cmp	r3, r4
 800b700:	db01      	blt.n	800b706 <__sfputc_r+0x16>
 800b702:	290a      	cmp	r1, #10
 800b704:	d103      	bne.n	800b70e <__sfputc_r+0x1e>
 800b706:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b70a:	f7fe bab7 	b.w	8009c7c <__swbuf_r>
 800b70e:	6813      	ldr	r3, [r2, #0]
 800b710:	1c58      	adds	r0, r3, #1
 800b712:	6010      	str	r0, [r2, #0]
 800b714:	7019      	strb	r1, [r3, #0]
 800b716:	4608      	mov	r0, r1
 800b718:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <__sfputs_r>:
 800b71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b720:	4606      	mov	r6, r0
 800b722:	460f      	mov	r7, r1
 800b724:	4614      	mov	r4, r2
 800b726:	18d5      	adds	r5, r2, r3
 800b728:	42ac      	cmp	r4, r5
 800b72a:	d101      	bne.n	800b730 <__sfputs_r+0x12>
 800b72c:	2000      	movs	r0, #0
 800b72e:	e007      	b.n	800b740 <__sfputs_r+0x22>
 800b730:	463a      	mov	r2, r7
 800b732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b736:	4630      	mov	r0, r6
 800b738:	f7ff ffda 	bl	800b6f0 <__sfputc_r>
 800b73c:	1c43      	adds	r3, r0, #1
 800b73e:	d1f3      	bne.n	800b728 <__sfputs_r+0xa>
 800b740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b744 <_vfiprintf_r>:
 800b744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b748:	460c      	mov	r4, r1
 800b74a:	b09d      	sub	sp, #116	; 0x74
 800b74c:	4617      	mov	r7, r2
 800b74e:	461d      	mov	r5, r3
 800b750:	4606      	mov	r6, r0
 800b752:	b118      	cbz	r0, 800b75c <_vfiprintf_r+0x18>
 800b754:	6983      	ldr	r3, [r0, #24]
 800b756:	b90b      	cbnz	r3, 800b75c <_vfiprintf_r+0x18>
 800b758:	f7ff fa86 	bl	800ac68 <__sinit>
 800b75c:	4b7c      	ldr	r3, [pc, #496]	; (800b950 <_vfiprintf_r+0x20c>)
 800b75e:	429c      	cmp	r4, r3
 800b760:	d158      	bne.n	800b814 <_vfiprintf_r+0xd0>
 800b762:	6874      	ldr	r4, [r6, #4]
 800b764:	89a3      	ldrh	r3, [r4, #12]
 800b766:	0718      	lsls	r0, r3, #28
 800b768:	d55e      	bpl.n	800b828 <_vfiprintf_r+0xe4>
 800b76a:	6923      	ldr	r3, [r4, #16]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d05b      	beq.n	800b828 <_vfiprintf_r+0xe4>
 800b770:	2300      	movs	r3, #0
 800b772:	9309      	str	r3, [sp, #36]	; 0x24
 800b774:	2320      	movs	r3, #32
 800b776:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b77a:	2330      	movs	r3, #48	; 0x30
 800b77c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b780:	9503      	str	r5, [sp, #12]
 800b782:	f04f 0b01 	mov.w	fp, #1
 800b786:	46b8      	mov	r8, r7
 800b788:	4645      	mov	r5, r8
 800b78a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b78e:	b10b      	cbz	r3, 800b794 <_vfiprintf_r+0x50>
 800b790:	2b25      	cmp	r3, #37	; 0x25
 800b792:	d154      	bne.n	800b83e <_vfiprintf_r+0xfa>
 800b794:	ebb8 0a07 	subs.w	sl, r8, r7
 800b798:	d00b      	beq.n	800b7b2 <_vfiprintf_r+0x6e>
 800b79a:	4653      	mov	r3, sl
 800b79c:	463a      	mov	r2, r7
 800b79e:	4621      	mov	r1, r4
 800b7a0:	4630      	mov	r0, r6
 800b7a2:	f7ff ffbc 	bl	800b71e <__sfputs_r>
 800b7a6:	3001      	adds	r0, #1
 800b7a8:	f000 80c2 	beq.w	800b930 <_vfiprintf_r+0x1ec>
 800b7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ae:	4453      	add	r3, sl
 800b7b0:	9309      	str	r3, [sp, #36]	; 0x24
 800b7b2:	f898 3000 	ldrb.w	r3, [r8]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	f000 80ba 	beq.w	800b930 <_vfiprintf_r+0x1ec>
 800b7bc:	2300      	movs	r3, #0
 800b7be:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7c6:	9304      	str	r3, [sp, #16]
 800b7c8:	9307      	str	r3, [sp, #28]
 800b7ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7ce:	931a      	str	r3, [sp, #104]	; 0x68
 800b7d0:	46a8      	mov	r8, r5
 800b7d2:	2205      	movs	r2, #5
 800b7d4:	f818 1b01 	ldrb.w	r1, [r8], #1
 800b7d8:	485e      	ldr	r0, [pc, #376]	; (800b954 <_vfiprintf_r+0x210>)
 800b7da:	f7f4 fd31 	bl	8000240 <memchr>
 800b7de:	9b04      	ldr	r3, [sp, #16]
 800b7e0:	bb78      	cbnz	r0, 800b842 <_vfiprintf_r+0xfe>
 800b7e2:	06d9      	lsls	r1, r3, #27
 800b7e4:	bf44      	itt	mi
 800b7e6:	2220      	movmi	r2, #32
 800b7e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b7ec:	071a      	lsls	r2, r3, #28
 800b7ee:	bf44      	itt	mi
 800b7f0:	222b      	movmi	r2, #43	; 0x2b
 800b7f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800b7f6:	782a      	ldrb	r2, [r5, #0]
 800b7f8:	2a2a      	cmp	r2, #42	; 0x2a
 800b7fa:	d02a      	beq.n	800b852 <_vfiprintf_r+0x10e>
 800b7fc:	9a07      	ldr	r2, [sp, #28]
 800b7fe:	46a8      	mov	r8, r5
 800b800:	2000      	movs	r0, #0
 800b802:	250a      	movs	r5, #10
 800b804:	4641      	mov	r1, r8
 800b806:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b80a:	3b30      	subs	r3, #48	; 0x30
 800b80c:	2b09      	cmp	r3, #9
 800b80e:	d969      	bls.n	800b8e4 <_vfiprintf_r+0x1a0>
 800b810:	b360      	cbz	r0, 800b86c <_vfiprintf_r+0x128>
 800b812:	e024      	b.n	800b85e <_vfiprintf_r+0x11a>
 800b814:	4b50      	ldr	r3, [pc, #320]	; (800b958 <_vfiprintf_r+0x214>)
 800b816:	429c      	cmp	r4, r3
 800b818:	d101      	bne.n	800b81e <_vfiprintf_r+0xda>
 800b81a:	68b4      	ldr	r4, [r6, #8]
 800b81c:	e7a2      	b.n	800b764 <_vfiprintf_r+0x20>
 800b81e:	4b4f      	ldr	r3, [pc, #316]	; (800b95c <_vfiprintf_r+0x218>)
 800b820:	429c      	cmp	r4, r3
 800b822:	bf08      	it	eq
 800b824:	68f4      	ldreq	r4, [r6, #12]
 800b826:	e79d      	b.n	800b764 <_vfiprintf_r+0x20>
 800b828:	4621      	mov	r1, r4
 800b82a:	4630      	mov	r0, r6
 800b82c:	f7fe fa78 	bl	8009d20 <__swsetup_r>
 800b830:	2800      	cmp	r0, #0
 800b832:	d09d      	beq.n	800b770 <_vfiprintf_r+0x2c>
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	b01d      	add	sp, #116	; 0x74
 800b83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83e:	46a8      	mov	r8, r5
 800b840:	e7a2      	b.n	800b788 <_vfiprintf_r+0x44>
 800b842:	4a44      	ldr	r2, [pc, #272]	; (800b954 <_vfiprintf_r+0x210>)
 800b844:	1a80      	subs	r0, r0, r2
 800b846:	fa0b f000 	lsl.w	r0, fp, r0
 800b84a:	4318      	orrs	r0, r3
 800b84c:	9004      	str	r0, [sp, #16]
 800b84e:	4645      	mov	r5, r8
 800b850:	e7be      	b.n	800b7d0 <_vfiprintf_r+0x8c>
 800b852:	9a03      	ldr	r2, [sp, #12]
 800b854:	1d11      	adds	r1, r2, #4
 800b856:	6812      	ldr	r2, [r2, #0]
 800b858:	9103      	str	r1, [sp, #12]
 800b85a:	2a00      	cmp	r2, #0
 800b85c:	db01      	blt.n	800b862 <_vfiprintf_r+0x11e>
 800b85e:	9207      	str	r2, [sp, #28]
 800b860:	e004      	b.n	800b86c <_vfiprintf_r+0x128>
 800b862:	4252      	negs	r2, r2
 800b864:	f043 0302 	orr.w	r3, r3, #2
 800b868:	9207      	str	r2, [sp, #28]
 800b86a:	9304      	str	r3, [sp, #16]
 800b86c:	f898 3000 	ldrb.w	r3, [r8]
 800b870:	2b2e      	cmp	r3, #46	; 0x2e
 800b872:	d10e      	bne.n	800b892 <_vfiprintf_r+0x14e>
 800b874:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b878:	2b2a      	cmp	r3, #42	; 0x2a
 800b87a:	d138      	bne.n	800b8ee <_vfiprintf_r+0x1aa>
 800b87c:	9b03      	ldr	r3, [sp, #12]
 800b87e:	1d1a      	adds	r2, r3, #4
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	9203      	str	r2, [sp, #12]
 800b884:	2b00      	cmp	r3, #0
 800b886:	bfb8      	it	lt
 800b888:	f04f 33ff 	movlt.w	r3, #4294967295
 800b88c:	f108 0802 	add.w	r8, r8, #2
 800b890:	9305      	str	r3, [sp, #20]
 800b892:	4d33      	ldr	r5, [pc, #204]	; (800b960 <_vfiprintf_r+0x21c>)
 800b894:	f898 1000 	ldrb.w	r1, [r8]
 800b898:	2203      	movs	r2, #3
 800b89a:	4628      	mov	r0, r5
 800b89c:	f7f4 fcd0 	bl	8000240 <memchr>
 800b8a0:	b140      	cbz	r0, 800b8b4 <_vfiprintf_r+0x170>
 800b8a2:	2340      	movs	r3, #64	; 0x40
 800b8a4:	1b40      	subs	r0, r0, r5
 800b8a6:	fa03 f000 	lsl.w	r0, r3, r0
 800b8aa:	9b04      	ldr	r3, [sp, #16]
 800b8ac:	4303      	orrs	r3, r0
 800b8ae:	f108 0801 	add.w	r8, r8, #1
 800b8b2:	9304      	str	r3, [sp, #16]
 800b8b4:	f898 1000 	ldrb.w	r1, [r8]
 800b8b8:	482a      	ldr	r0, [pc, #168]	; (800b964 <_vfiprintf_r+0x220>)
 800b8ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b8be:	2206      	movs	r2, #6
 800b8c0:	f108 0701 	add.w	r7, r8, #1
 800b8c4:	f7f4 fcbc 	bl	8000240 <memchr>
 800b8c8:	2800      	cmp	r0, #0
 800b8ca:	d037      	beq.n	800b93c <_vfiprintf_r+0x1f8>
 800b8cc:	4b26      	ldr	r3, [pc, #152]	; (800b968 <_vfiprintf_r+0x224>)
 800b8ce:	bb1b      	cbnz	r3, 800b918 <_vfiprintf_r+0x1d4>
 800b8d0:	9b03      	ldr	r3, [sp, #12]
 800b8d2:	3307      	adds	r3, #7
 800b8d4:	f023 0307 	bic.w	r3, r3, #7
 800b8d8:	3308      	adds	r3, #8
 800b8da:	9303      	str	r3, [sp, #12]
 800b8dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8de:	444b      	add	r3, r9
 800b8e0:	9309      	str	r3, [sp, #36]	; 0x24
 800b8e2:	e750      	b.n	800b786 <_vfiprintf_r+0x42>
 800b8e4:	fb05 3202 	mla	r2, r5, r2, r3
 800b8e8:	2001      	movs	r0, #1
 800b8ea:	4688      	mov	r8, r1
 800b8ec:	e78a      	b.n	800b804 <_vfiprintf_r+0xc0>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f108 0801 	add.w	r8, r8, #1
 800b8f4:	9305      	str	r3, [sp, #20]
 800b8f6:	4619      	mov	r1, r3
 800b8f8:	250a      	movs	r5, #10
 800b8fa:	4640      	mov	r0, r8
 800b8fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b900:	3a30      	subs	r2, #48	; 0x30
 800b902:	2a09      	cmp	r2, #9
 800b904:	d903      	bls.n	800b90e <_vfiprintf_r+0x1ca>
 800b906:	2b00      	cmp	r3, #0
 800b908:	d0c3      	beq.n	800b892 <_vfiprintf_r+0x14e>
 800b90a:	9105      	str	r1, [sp, #20]
 800b90c:	e7c1      	b.n	800b892 <_vfiprintf_r+0x14e>
 800b90e:	fb05 2101 	mla	r1, r5, r1, r2
 800b912:	2301      	movs	r3, #1
 800b914:	4680      	mov	r8, r0
 800b916:	e7f0      	b.n	800b8fa <_vfiprintf_r+0x1b6>
 800b918:	ab03      	add	r3, sp, #12
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	4622      	mov	r2, r4
 800b91e:	4b13      	ldr	r3, [pc, #76]	; (800b96c <_vfiprintf_r+0x228>)
 800b920:	a904      	add	r1, sp, #16
 800b922:	4630      	mov	r0, r6
 800b924:	f7fd fcfa 	bl	800931c <_printf_float>
 800b928:	f1b0 3fff 	cmp.w	r0, #4294967295
 800b92c:	4681      	mov	r9, r0
 800b92e:	d1d5      	bne.n	800b8dc <_vfiprintf_r+0x198>
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	065b      	lsls	r3, r3, #25
 800b934:	f53f af7e 	bmi.w	800b834 <_vfiprintf_r+0xf0>
 800b938:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b93a:	e77d      	b.n	800b838 <_vfiprintf_r+0xf4>
 800b93c:	ab03      	add	r3, sp, #12
 800b93e:	9300      	str	r3, [sp, #0]
 800b940:	4622      	mov	r2, r4
 800b942:	4b0a      	ldr	r3, [pc, #40]	; (800b96c <_vfiprintf_r+0x228>)
 800b944:	a904      	add	r1, sp, #16
 800b946:	4630      	mov	r0, r6
 800b948:	f7fd ff9e 	bl	8009888 <_printf_i>
 800b94c:	e7ec      	b.n	800b928 <_vfiprintf_r+0x1e4>
 800b94e:	bf00      	nop
 800b950:	08013840 	.word	0x08013840
 800b954:	0801397c 	.word	0x0801397c
 800b958:	08013860 	.word	0x08013860
 800b95c:	08013820 	.word	0x08013820
 800b960:	08013982 	.word	0x08013982
 800b964:	08013986 	.word	0x08013986
 800b968:	0800931d 	.word	0x0800931d
 800b96c:	0800b71f 	.word	0x0800b71f

0800b970 <__sread>:
 800b970:	b510      	push	{r4, lr}
 800b972:	460c      	mov	r4, r1
 800b974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b978:	f000 f8e6 	bl	800bb48 <_read_r>
 800b97c:	2800      	cmp	r0, #0
 800b97e:	bfab      	itete	ge
 800b980:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b982:	89a3      	ldrhlt	r3, [r4, #12]
 800b984:	181b      	addge	r3, r3, r0
 800b986:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b98a:	bfac      	ite	ge
 800b98c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b98e:	81a3      	strhlt	r3, [r4, #12]
 800b990:	bd10      	pop	{r4, pc}

0800b992 <__swrite>:
 800b992:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b996:	461f      	mov	r7, r3
 800b998:	898b      	ldrh	r3, [r1, #12]
 800b99a:	05db      	lsls	r3, r3, #23
 800b99c:	4605      	mov	r5, r0
 800b99e:	460c      	mov	r4, r1
 800b9a0:	4616      	mov	r6, r2
 800b9a2:	d505      	bpl.n	800b9b0 <__swrite+0x1e>
 800b9a4:	2302      	movs	r3, #2
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9ac:	f000 f868 	bl	800ba80 <_lseek_r>
 800b9b0:	89a3      	ldrh	r3, [r4, #12]
 800b9b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b9b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b9ba:	81a3      	strh	r3, [r4, #12]
 800b9bc:	4632      	mov	r2, r6
 800b9be:	463b      	mov	r3, r7
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9c6:	f000 b817 	b.w	800b9f8 <_write_r>

0800b9ca <__sseek>:
 800b9ca:	b510      	push	{r4, lr}
 800b9cc:	460c      	mov	r4, r1
 800b9ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9d2:	f000 f855 	bl	800ba80 <_lseek_r>
 800b9d6:	1c43      	adds	r3, r0, #1
 800b9d8:	89a3      	ldrh	r3, [r4, #12]
 800b9da:	bf15      	itete	ne
 800b9dc:	6560      	strne	r0, [r4, #84]	; 0x54
 800b9de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b9e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b9e6:	81a3      	strheq	r3, [r4, #12]
 800b9e8:	bf18      	it	ne
 800b9ea:	81a3      	strhne	r3, [r4, #12]
 800b9ec:	bd10      	pop	{r4, pc}

0800b9ee <__sclose>:
 800b9ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b9f2:	f000 b813 	b.w	800ba1c <_close_r>
	...

0800b9f8 <_write_r>:
 800b9f8:	b538      	push	{r3, r4, r5, lr}
 800b9fa:	4c07      	ldr	r4, [pc, #28]	; (800ba18 <_write_r+0x20>)
 800b9fc:	4605      	mov	r5, r0
 800b9fe:	4608      	mov	r0, r1
 800ba00:	4611      	mov	r1, r2
 800ba02:	2200      	movs	r2, #0
 800ba04:	6022      	str	r2, [r4, #0]
 800ba06:	461a      	mov	r2, r3
 800ba08:	f7f5 fb27 	bl	800105a <_write>
 800ba0c:	1c43      	adds	r3, r0, #1
 800ba0e:	d102      	bne.n	800ba16 <_write_r+0x1e>
 800ba10:	6823      	ldr	r3, [r4, #0]
 800ba12:	b103      	cbz	r3, 800ba16 <_write_r+0x1e>
 800ba14:	602b      	str	r3, [r5, #0]
 800ba16:	bd38      	pop	{r3, r4, r5, pc}
 800ba18:	20000ec8 	.word	0x20000ec8

0800ba1c <_close_r>:
 800ba1c:	b538      	push	{r3, r4, r5, lr}
 800ba1e:	4c06      	ldr	r4, [pc, #24]	; (800ba38 <_close_r+0x1c>)
 800ba20:	2300      	movs	r3, #0
 800ba22:	4605      	mov	r5, r0
 800ba24:	4608      	mov	r0, r1
 800ba26:	6023      	str	r3, [r4, #0]
 800ba28:	f7f6 fc45 	bl	80022b6 <_close>
 800ba2c:	1c43      	adds	r3, r0, #1
 800ba2e:	d102      	bne.n	800ba36 <_close_r+0x1a>
 800ba30:	6823      	ldr	r3, [r4, #0]
 800ba32:	b103      	cbz	r3, 800ba36 <_close_r+0x1a>
 800ba34:	602b      	str	r3, [r5, #0]
 800ba36:	bd38      	pop	{r3, r4, r5, pc}
 800ba38:	20000ec8 	.word	0x20000ec8

0800ba3c <_fstat_r>:
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	4c07      	ldr	r4, [pc, #28]	; (800ba5c <_fstat_r+0x20>)
 800ba40:	2300      	movs	r3, #0
 800ba42:	4605      	mov	r5, r0
 800ba44:	4608      	mov	r0, r1
 800ba46:	4611      	mov	r1, r2
 800ba48:	6023      	str	r3, [r4, #0]
 800ba4a:	f7f6 fc40 	bl	80022ce <_fstat>
 800ba4e:	1c43      	adds	r3, r0, #1
 800ba50:	d102      	bne.n	800ba58 <_fstat_r+0x1c>
 800ba52:	6823      	ldr	r3, [r4, #0]
 800ba54:	b103      	cbz	r3, 800ba58 <_fstat_r+0x1c>
 800ba56:	602b      	str	r3, [r5, #0]
 800ba58:	bd38      	pop	{r3, r4, r5, pc}
 800ba5a:	bf00      	nop
 800ba5c:	20000ec8 	.word	0x20000ec8

0800ba60 <_isatty_r>:
 800ba60:	b538      	push	{r3, r4, r5, lr}
 800ba62:	4c06      	ldr	r4, [pc, #24]	; (800ba7c <_isatty_r+0x1c>)
 800ba64:	2300      	movs	r3, #0
 800ba66:	4605      	mov	r5, r0
 800ba68:	4608      	mov	r0, r1
 800ba6a:	6023      	str	r3, [r4, #0]
 800ba6c:	f7f6 fc3f 	bl	80022ee <_isatty>
 800ba70:	1c43      	adds	r3, r0, #1
 800ba72:	d102      	bne.n	800ba7a <_isatty_r+0x1a>
 800ba74:	6823      	ldr	r3, [r4, #0]
 800ba76:	b103      	cbz	r3, 800ba7a <_isatty_r+0x1a>
 800ba78:	602b      	str	r3, [r5, #0]
 800ba7a:	bd38      	pop	{r3, r4, r5, pc}
 800ba7c:	20000ec8 	.word	0x20000ec8

0800ba80 <_lseek_r>:
 800ba80:	b538      	push	{r3, r4, r5, lr}
 800ba82:	4c07      	ldr	r4, [pc, #28]	; (800baa0 <_lseek_r+0x20>)
 800ba84:	4605      	mov	r5, r0
 800ba86:	4608      	mov	r0, r1
 800ba88:	4611      	mov	r1, r2
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	6022      	str	r2, [r4, #0]
 800ba8e:	461a      	mov	r2, r3
 800ba90:	f7f6 fc38 	bl	8002304 <_lseek>
 800ba94:	1c43      	adds	r3, r0, #1
 800ba96:	d102      	bne.n	800ba9e <_lseek_r+0x1e>
 800ba98:	6823      	ldr	r3, [r4, #0]
 800ba9a:	b103      	cbz	r3, 800ba9e <_lseek_r+0x1e>
 800ba9c:	602b      	str	r3, [r5, #0]
 800ba9e:	bd38      	pop	{r3, r4, r5, pc}
 800baa0:	20000ec8 	.word	0x20000ec8

0800baa4 <__ascii_mbtowc>:
 800baa4:	b082      	sub	sp, #8
 800baa6:	b901      	cbnz	r1, 800baaa <__ascii_mbtowc+0x6>
 800baa8:	a901      	add	r1, sp, #4
 800baaa:	b142      	cbz	r2, 800babe <__ascii_mbtowc+0x1a>
 800baac:	b14b      	cbz	r3, 800bac2 <__ascii_mbtowc+0x1e>
 800baae:	7813      	ldrb	r3, [r2, #0]
 800bab0:	600b      	str	r3, [r1, #0]
 800bab2:	7812      	ldrb	r2, [r2, #0]
 800bab4:	1c10      	adds	r0, r2, #0
 800bab6:	bf18      	it	ne
 800bab8:	2001      	movne	r0, #1
 800baba:	b002      	add	sp, #8
 800babc:	4770      	bx	lr
 800babe:	4610      	mov	r0, r2
 800bac0:	e7fb      	b.n	800baba <__ascii_mbtowc+0x16>
 800bac2:	f06f 0001 	mvn.w	r0, #1
 800bac6:	e7f8      	b.n	800baba <__ascii_mbtowc+0x16>

0800bac8 <memmove>:
 800bac8:	4288      	cmp	r0, r1
 800baca:	b510      	push	{r4, lr}
 800bacc:	eb01 0302 	add.w	r3, r1, r2
 800bad0:	d807      	bhi.n	800bae2 <memmove+0x1a>
 800bad2:	1e42      	subs	r2, r0, #1
 800bad4:	4299      	cmp	r1, r3
 800bad6:	d00a      	beq.n	800baee <memmove+0x26>
 800bad8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800badc:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bae0:	e7f8      	b.n	800bad4 <memmove+0xc>
 800bae2:	4283      	cmp	r3, r0
 800bae4:	d9f5      	bls.n	800bad2 <memmove+0xa>
 800bae6:	1881      	adds	r1, r0, r2
 800bae8:	1ad2      	subs	r2, r2, r3
 800baea:	42d3      	cmn	r3, r2
 800baec:	d100      	bne.n	800baf0 <memmove+0x28>
 800baee:	bd10      	pop	{r4, pc}
 800baf0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baf4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800baf8:	e7f7      	b.n	800baea <memmove+0x22>

0800bafa <_realloc_r>:
 800bafa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bafc:	4607      	mov	r7, r0
 800bafe:	4614      	mov	r4, r2
 800bb00:	460e      	mov	r6, r1
 800bb02:	b921      	cbnz	r1, 800bb0e <_realloc_r+0x14>
 800bb04:	4611      	mov	r1, r2
 800bb06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bb0a:	f7fd bb19 	b.w	8009140 <_malloc_r>
 800bb0e:	b922      	cbnz	r2, 800bb1a <_realloc_r+0x20>
 800bb10:	f7fd fac8 	bl	80090a4 <_free_r>
 800bb14:	4625      	mov	r5, r4
 800bb16:	4628      	mov	r0, r5
 800bb18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb1a:	f000 f834 	bl	800bb86 <_malloc_usable_size_r>
 800bb1e:	42a0      	cmp	r0, r4
 800bb20:	d20f      	bcs.n	800bb42 <_realloc_r+0x48>
 800bb22:	4621      	mov	r1, r4
 800bb24:	4638      	mov	r0, r7
 800bb26:	f7fd fb0b 	bl	8009140 <_malloc_r>
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d0f2      	beq.n	800bb16 <_realloc_r+0x1c>
 800bb30:	4631      	mov	r1, r6
 800bb32:	4622      	mov	r2, r4
 800bb34:	f7ff f994 	bl	800ae60 <memcpy>
 800bb38:	4631      	mov	r1, r6
 800bb3a:	4638      	mov	r0, r7
 800bb3c:	f7fd fab2 	bl	80090a4 <_free_r>
 800bb40:	e7e9      	b.n	800bb16 <_realloc_r+0x1c>
 800bb42:	4635      	mov	r5, r6
 800bb44:	e7e7      	b.n	800bb16 <_realloc_r+0x1c>
	...

0800bb48 <_read_r>:
 800bb48:	b538      	push	{r3, r4, r5, lr}
 800bb4a:	4c07      	ldr	r4, [pc, #28]	; (800bb68 <_read_r+0x20>)
 800bb4c:	4605      	mov	r5, r0
 800bb4e:	4608      	mov	r0, r1
 800bb50:	4611      	mov	r1, r2
 800bb52:	2200      	movs	r2, #0
 800bb54:	6022      	str	r2, [r4, #0]
 800bb56:	461a      	mov	r2, r3
 800bb58:	f7f6 fb90 	bl	800227c <_read>
 800bb5c:	1c43      	adds	r3, r0, #1
 800bb5e:	d102      	bne.n	800bb66 <_read_r+0x1e>
 800bb60:	6823      	ldr	r3, [r4, #0]
 800bb62:	b103      	cbz	r3, 800bb66 <_read_r+0x1e>
 800bb64:	602b      	str	r3, [r5, #0]
 800bb66:	bd38      	pop	{r3, r4, r5, pc}
 800bb68:	20000ec8 	.word	0x20000ec8

0800bb6c <__ascii_wctomb>:
 800bb6c:	b149      	cbz	r1, 800bb82 <__ascii_wctomb+0x16>
 800bb6e:	2aff      	cmp	r2, #255	; 0xff
 800bb70:	bf85      	ittet	hi
 800bb72:	238a      	movhi	r3, #138	; 0x8a
 800bb74:	6003      	strhi	r3, [r0, #0]
 800bb76:	700a      	strbls	r2, [r1, #0]
 800bb78:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb7c:	bf98      	it	ls
 800bb7e:	2001      	movls	r0, #1
 800bb80:	4770      	bx	lr
 800bb82:	4608      	mov	r0, r1
 800bb84:	4770      	bx	lr

0800bb86 <_malloc_usable_size_r>:
 800bb86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb8a:	1f18      	subs	r0, r3, #4
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	bfbc      	itt	lt
 800bb90:	580b      	ldrlt	r3, [r1, r0]
 800bb92:	18c0      	addlt	r0, r0, r3
 800bb94:	4770      	bx	lr
	...

0800bb98 <_init>:
 800bb98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb9a:	bf00      	nop
 800bb9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb9e:	bc08      	pop	{r3}
 800bba0:	469e      	mov	lr, r3
 800bba2:	4770      	bx	lr

0800bba4 <_fini>:
 800bba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bba6:	bf00      	nop
 800bba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bbaa:	bc08      	pop	{r3}
 800bbac:	469e      	mov	lr, r3
 800bbae:	4770      	bx	lr
