
SDIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be44  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00008084  0800c018  0800c018  0001c018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801409c  0801409c  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  0801409c  0801409c  0002409c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080140a4  080140a4  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080140a4  080140a4  000240a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080140a8  080140a8  000240a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080140ac  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d00  200001e0  0801428c  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ee0  0801428c  00030ee0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e88  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec3  00000000  00000000  00045098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc0  00000000  00000000  00047f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00048c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002479c  00000000  00000000  000497a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011f15  00000000  00000000  0006df44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce632  00000000  00000000  0007fe59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014e48b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045b0  00000000  00000000  0014e4e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800bffc 	.word	0x0800bffc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0800bffc 	.word	0x0800bffc

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_uldivmod>:
 8000c08:	b953      	cbnz	r3, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0a:	b94a      	cbnz	r2, 8000c20 <__aeabi_uldivmod+0x18>
 8000c0c:	2900      	cmp	r1, #0
 8000c0e:	bf08      	it	eq
 8000c10:	2800      	cmpeq	r0, #0
 8000c12:	bf1c      	itt	ne
 8000c14:	f04f 31ff 	movne.w	r1, #4294967295
 8000c18:	f04f 30ff 	movne.w	r0, #4294967295
 8000c1c:	f000 b96e 	b.w	8000efc <__aeabi_idiv0>
 8000c20:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c24:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c28:	f000 f806 	bl	8000c38 <__udivmoddi4>
 8000c2c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c30:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c34:	b004      	add	sp, #16
 8000c36:	4770      	bx	lr

08000c38 <__udivmoddi4>:
 8000c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c3c:	9d08      	ldr	r5, [sp, #32]
 8000c3e:	4604      	mov	r4, r0
 8000c40:	468c      	mov	ip, r1
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	f040 8083 	bne.w	8000d4e <__udivmoddi4+0x116>
 8000c48:	428a      	cmp	r2, r1
 8000c4a:	4617      	mov	r7, r2
 8000c4c:	d947      	bls.n	8000cde <__udivmoddi4+0xa6>
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b142      	cbz	r2, 8000c66 <__udivmoddi4+0x2e>
 8000c54:	f1c2 0020 	rsb	r0, r2, #32
 8000c58:	fa24 f000 	lsr.w	r0, r4, r0
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4097      	lsls	r7, r2
 8000c60:	ea40 0c01 	orr.w	ip, r0, r1
 8000c64:	4094      	lsls	r4, r2
 8000c66:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000c6a:	0c23      	lsrs	r3, r4, #16
 8000c6c:	fbbc f6f8 	udiv	r6, ip, r8
 8000c70:	fa1f fe87 	uxth.w	lr, r7
 8000c74:	fb08 c116 	mls	r1, r8, r6, ip
 8000c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c7c:	fb06 f10e 	mul.w	r1, r6, lr
 8000c80:	4299      	cmp	r1, r3
 8000c82:	d909      	bls.n	8000c98 <__udivmoddi4+0x60>
 8000c84:	18fb      	adds	r3, r7, r3
 8000c86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c8a:	f080 8119 	bcs.w	8000ec0 <__udivmoddi4+0x288>
 8000c8e:	4299      	cmp	r1, r3
 8000c90:	f240 8116 	bls.w	8000ec0 <__udivmoddi4+0x288>
 8000c94:	3e02      	subs	r6, #2
 8000c96:	443b      	add	r3, r7
 8000c98:	1a5b      	subs	r3, r3, r1
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ca0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ca4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d909      	bls.n	8000cc4 <__udivmoddi4+0x8c>
 8000cb0:	193c      	adds	r4, r7, r4
 8000cb2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cb6:	f080 8105 	bcs.w	8000ec4 <__udivmoddi4+0x28c>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	f240 8102 	bls.w	8000ec4 <__udivmoddi4+0x28c>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	443c      	add	r4, r7
 8000cc4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cc8:	eba4 040e 	sub.w	r4, r4, lr
 8000ccc:	2600      	movs	r6, #0
 8000cce:	b11d      	cbz	r5, 8000cd8 <__udivmoddi4+0xa0>
 8000cd0:	40d4      	lsrs	r4, r2
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	b902      	cbnz	r2, 8000ce2 <__udivmoddi4+0xaa>
 8000ce0:	deff      	udf	#255	; 0xff
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	2a00      	cmp	r2, #0
 8000ce8:	d150      	bne.n	8000d8c <__udivmoddi4+0x154>
 8000cea:	1bcb      	subs	r3, r1, r7
 8000cec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cf0:	fa1f f887 	uxth.w	r8, r7
 8000cf4:	2601      	movs	r6, #1
 8000cf6:	fbb3 fcfe 	udiv	ip, r3, lr
 8000cfa:	0c21      	lsrs	r1, r4, #16
 8000cfc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d00:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d04:	fb08 f30c 	mul.w	r3, r8, ip
 8000d08:	428b      	cmp	r3, r1
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0xe4>
 8000d0c:	1879      	adds	r1, r7, r1
 8000d0e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0xe2>
 8000d14:	428b      	cmp	r3, r1
 8000d16:	f200 80e9 	bhi.w	8000eec <__udivmoddi4+0x2b4>
 8000d1a:	4684      	mov	ip, r0
 8000d1c:	1ac9      	subs	r1, r1, r3
 8000d1e:	b2a3      	uxth	r3, r4
 8000d20:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d24:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d28:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d2c:	fb08 f800 	mul.w	r8, r8, r0
 8000d30:	45a0      	cmp	r8, r4
 8000d32:	d907      	bls.n	8000d44 <__udivmoddi4+0x10c>
 8000d34:	193c      	adds	r4, r7, r4
 8000d36:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x10a>
 8000d3c:	45a0      	cmp	r8, r4
 8000d3e:	f200 80d9 	bhi.w	8000ef4 <__udivmoddi4+0x2bc>
 8000d42:	4618      	mov	r0, r3
 8000d44:	eba4 0408 	sub.w	r4, r4, r8
 8000d48:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d4c:	e7bf      	b.n	8000cce <__udivmoddi4+0x96>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d909      	bls.n	8000d66 <__udivmoddi4+0x12e>
 8000d52:	2d00      	cmp	r5, #0
 8000d54:	f000 80b1 	beq.w	8000eba <__udivmoddi4+0x282>
 8000d58:	2600      	movs	r6, #0
 8000d5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d5e:	4630      	mov	r0, r6
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	fab3 f683 	clz	r6, r3
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d14a      	bne.n	8000e04 <__udivmoddi4+0x1cc>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d302      	bcc.n	8000d78 <__udivmoddi4+0x140>
 8000d72:	4282      	cmp	r2, r0
 8000d74:	f200 80b8 	bhi.w	8000ee8 <__udivmoddi4+0x2b0>
 8000d78:	1a84      	subs	r4, r0, r2
 8000d7a:	eb61 0103 	sbc.w	r1, r1, r3
 8000d7e:	2001      	movs	r0, #1
 8000d80:	468c      	mov	ip, r1
 8000d82:	2d00      	cmp	r5, #0
 8000d84:	d0a8      	beq.n	8000cd8 <__udivmoddi4+0xa0>
 8000d86:	e9c5 4c00 	strd	r4, ip, [r5]
 8000d8a:	e7a5      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000d8c:	f1c2 0320 	rsb	r3, r2, #32
 8000d90:	fa20 f603 	lsr.w	r6, r0, r3
 8000d94:	4097      	lsls	r7, r2
 8000d96:	fa01 f002 	lsl.w	r0, r1, r2
 8000d9a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d9e:	40d9      	lsrs	r1, r3
 8000da0:	4330      	orrs	r0, r6
 8000da2:	0c03      	lsrs	r3, r0, #16
 8000da4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000da8:	fa1f f887 	uxth.w	r8, r7
 8000dac:	fb0e 1116 	mls	r1, lr, r6, r1
 8000db0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000db4:	fb06 f108 	mul.w	r1, r6, r8
 8000db8:	4299      	cmp	r1, r3
 8000dba:	fa04 f402 	lsl.w	r4, r4, r2
 8000dbe:	d909      	bls.n	8000dd4 <__udivmoddi4+0x19c>
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	f106 3cff 	add.w	ip, r6, #4294967295
 8000dc6:	f080 808d 	bcs.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dca:	4299      	cmp	r1, r3
 8000dcc:	f240 808a 	bls.w	8000ee4 <__udivmoddi4+0x2ac>
 8000dd0:	3e02      	subs	r6, #2
 8000dd2:	443b      	add	r3, r7
 8000dd4:	1a5b      	subs	r3, r3, r1
 8000dd6:	b281      	uxth	r1, r0
 8000dd8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ddc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000de4:	fb00 f308 	mul.w	r3, r0, r8
 8000de8:	428b      	cmp	r3, r1
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x1c4>
 8000dec:	1879      	adds	r1, r7, r1
 8000dee:	f100 3cff 	add.w	ip, r0, #4294967295
 8000df2:	d273      	bcs.n	8000edc <__udivmoddi4+0x2a4>
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d971      	bls.n	8000edc <__udivmoddi4+0x2a4>
 8000df8:	3802      	subs	r0, #2
 8000dfa:	4439      	add	r1, r7
 8000dfc:	1acb      	subs	r3, r1, r3
 8000dfe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e02:	e778      	b.n	8000cf6 <__udivmoddi4+0xbe>
 8000e04:	f1c6 0c20 	rsb	ip, r6, #32
 8000e08:	fa03 f406 	lsl.w	r4, r3, r6
 8000e0c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e10:	431c      	orrs	r4, r3
 8000e12:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e16:	fa01 f306 	lsl.w	r3, r1, r6
 8000e1a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e1e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e22:	431f      	orrs	r7, r3
 8000e24:	0c3b      	lsrs	r3, r7, #16
 8000e26:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e2a:	fa1f f884 	uxth.w	r8, r4
 8000e2e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e32:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e36:	fb09 fa08 	mul.w	sl, r9, r8
 8000e3a:	458a      	cmp	sl, r1
 8000e3c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e40:	fa00 f306 	lsl.w	r3, r0, r6
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x220>
 8000e46:	1861      	adds	r1, r4, r1
 8000e48:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e4c:	d248      	bcs.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e4e:	458a      	cmp	sl, r1
 8000e50:	d946      	bls.n	8000ee0 <__udivmoddi4+0x2a8>
 8000e52:	f1a9 0902 	sub.w	r9, r9, #2
 8000e56:	4421      	add	r1, r4
 8000e58:	eba1 010a 	sub.w	r1, r1, sl
 8000e5c:	b2bf      	uxth	r7, r7
 8000e5e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e62:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e66:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000e6a:	fb00 f808 	mul.w	r8, r0, r8
 8000e6e:	45b8      	cmp	r8, r7
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x24a>
 8000e72:	19e7      	adds	r7, r4, r7
 8000e74:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e78:	d22e      	bcs.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7a:	45b8      	cmp	r8, r7
 8000e7c:	d92c      	bls.n	8000ed8 <__udivmoddi4+0x2a0>
 8000e7e:	3802      	subs	r0, #2
 8000e80:	4427      	add	r7, r4
 8000e82:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e86:	eba7 0708 	sub.w	r7, r7, r8
 8000e8a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e8e:	454f      	cmp	r7, r9
 8000e90:	46c6      	mov	lr, r8
 8000e92:	4649      	mov	r1, r9
 8000e94:	d31a      	bcc.n	8000ecc <__udivmoddi4+0x294>
 8000e96:	d017      	beq.n	8000ec8 <__udivmoddi4+0x290>
 8000e98:	b15d      	cbz	r5, 8000eb2 <__udivmoddi4+0x27a>
 8000e9a:	ebb3 020e 	subs.w	r2, r3, lr
 8000e9e:	eb67 0701 	sbc.w	r7, r7, r1
 8000ea2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ea6:	40f2      	lsrs	r2, r6
 8000ea8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eac:	40f7      	lsrs	r7, r6
 8000eae:	e9c5 2700 	strd	r2, r7, [r5]
 8000eb2:	2600      	movs	r6, #0
 8000eb4:	4631      	mov	r1, r6
 8000eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e70b      	b.n	8000cd8 <__udivmoddi4+0xa0>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0x60>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6fd      	b.n	8000cc4 <__udivmoddi4+0x8c>
 8000ec8:	4543      	cmp	r3, r8
 8000eca:	d2e5      	bcs.n	8000e98 <__udivmoddi4+0x260>
 8000ecc:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ed0:	eb69 0104 	sbc.w	r1, r9, r4
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7df      	b.n	8000e98 <__udivmoddi4+0x260>
 8000ed8:	4608      	mov	r0, r1
 8000eda:	e7d2      	b.n	8000e82 <__udivmoddi4+0x24a>
 8000edc:	4660      	mov	r0, ip
 8000ede:	e78d      	b.n	8000dfc <__udivmoddi4+0x1c4>
 8000ee0:	4681      	mov	r9, r0
 8000ee2:	e7b9      	b.n	8000e58 <__udivmoddi4+0x220>
 8000ee4:	4666      	mov	r6, ip
 8000ee6:	e775      	b.n	8000dd4 <__udivmoddi4+0x19c>
 8000ee8:	4630      	mov	r0, r6
 8000eea:	e74a      	b.n	8000d82 <__udivmoddi4+0x14a>
 8000eec:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef0:	4439      	add	r1, r7
 8000ef2:	e713      	b.n	8000d1c <__udivmoddi4+0xe4>
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	443c      	add	r4, r7
 8000ef8:	e724      	b.n	8000d44 <__udivmoddi4+0x10c>
 8000efa:	bf00      	nop

08000efc <__aeabi_idiv0>:
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <ff_convert>:

WCHAR ff_convert (	/* Converted code, 0 means conversion error */
	WCHAR	src,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b089      	sub	sp, #36	; 0x24
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	6039      	str	r1, [r7, #0]
 8000f0a:	80fb      	strh	r3, [r7, #6]
	const WCHAR *p;
	WCHAR c;
	int i, n, li, hi;


	if (src <= 0x80) {	/* ASCII */
 8000f0c:	88fb      	ldrh	r3, [r7, #6]
 8000f0e:	2b80      	cmp	r3, #128	; 0x80
 8000f10:	d802      	bhi.n	8000f18 <ff_convert+0x18>
		c = src;
 8000f12:	88fb      	ldrh	r3, [r7, #6]
 8000f14:	837b      	strh	r3, [r7, #26]
 8000f16:	e053      	b.n	8000fc0 <ff_convert+0xc0>
			else
				hi = i;
		}
		c = n ? p[i * 2 + 1] : 0;
#else
		if (dir) {		/* OEMCP to unicode (Incremental search)*/
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d015      	beq.n	8000f4a <ff_convert+0x4a>
			p = &uni2sjis[1];
 8000f1e:	4b2c      	ldr	r3, [pc, #176]	; (8000fd0 <ff_convert+0xd0>)
 8000f20:	61fb      	str	r3, [r7, #28]
			do {
				c = *p;
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	881b      	ldrh	r3, [r3, #0]
 8000f26:	837b      	strh	r3, [r7, #26]
				p += 2;
 8000f28:	69fb      	ldr	r3, [r7, #28]
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	61fb      	str	r3, [r7, #28]
			} while (c && c != src);
 8000f2e:	8b7b      	ldrh	r3, [r7, #26]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d003      	beq.n	8000f3c <ff_convert+0x3c>
 8000f34:	8b7a      	ldrh	r2, [r7, #26]
 8000f36:	88fb      	ldrh	r3, [r7, #6]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d1f2      	bne.n	8000f22 <ff_convert+0x22>
			p -= 3;
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	3b06      	subs	r3, #6
 8000f40:	61fb      	str	r3, [r7, #28]
			c = *p;
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	881b      	ldrh	r3, [r3, #0]
 8000f46:	837b      	strh	r3, [r7, #26]
 8000f48:	e03a      	b.n	8000fc0 <ff_convert+0xc0>
		} else {		/* Unicode to OEMCP */
			li = 0; hi = sizeof(uni2sjis) / 4 - 1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
 8000f4e:	f641 43dd 	movw	r3, #7389	; 0x1cdd
 8000f52:	60bb      	str	r3, [r7, #8]
			for (n = 16; n; n--) {
 8000f54:	2310      	movs	r3, #16
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	e021      	b.n	8000f9e <ff_convert+0x9e>
				i = li + (hi - li) / 2;
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	0fda      	lsrs	r2, r3, #31
 8000f62:	4413      	add	r3, r2
 8000f64:	105b      	asrs	r3, r3, #1
 8000f66:	461a      	mov	r2, r3
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	617b      	str	r3, [r7, #20]
				if (src == uni2sjis[i * 2]) break;
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	4a18      	ldr	r2, [pc, #96]	; (8000fd4 <ff_convert+0xd4>)
 8000f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f78:	88fa      	ldrh	r2, [r7, #6]
 8000f7a:	429a      	cmp	r2, r3
 8000f7c:	d013      	beq.n	8000fa6 <ff_convert+0xa6>
				if (src > uni2sjis[i * 2])
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4a14      	ldr	r2, [pc, #80]	; (8000fd4 <ff_convert+0xd4>)
 8000f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000f88:	88fa      	ldrh	r2, [r7, #6]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d902      	bls.n	8000f94 <ff_convert+0x94>
					li = i;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	e001      	b.n	8000f98 <ff_convert+0x98>
				else
					hi = i;
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	60bb      	str	r3, [r7, #8]
			for (n = 16; n; n--) {
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	613b      	str	r3, [r7, #16]
 8000f9e:	693b      	ldr	r3, [r7, #16]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d1da      	bne.n	8000f5a <ff_convert+0x5a>
 8000fa4:	e000      	b.n	8000fa8 <ff_convert+0xa8>
				if (src == uni2sjis[i * 2]) break;
 8000fa6:	bf00      	nop
			}
			c = n ? uni2sjis[i * 2 + 1] : 0;
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d006      	beq.n	8000fbc <ff_convert+0xbc>
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <ff_convert+0xd4>)
 8000fb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fba:	e000      	b.n	8000fbe <ff_convert+0xbe>
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	837b      	strh	r3, [r7, #26]
		}
#endif
	}

	return c;
 8000fc0:	8b7b      	ldrh	r3, [r7, #26]
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3724      	adds	r7, #36	; 0x24
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	0800c892 	.word	0x0800c892
 8000fd4:	0800c890 	.word	0x0800c890

08000fd8 <ff_wtoupper>:

WCHAR ff_wtoupper(WCHAR chr)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	80fb      	strh	r3, [r7, #6]
	if(chr >= 'a' && chr <= 'z')
 8000fe2:	88fb      	ldrh	r3, [r7, #6]
 8000fe4:	2b60      	cmp	r3, #96	; 0x60
 8000fe6:	d906      	bls.n	8000ff6 <ff_wtoupper+0x1e>
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	2b7a      	cmp	r3, #122	; 0x7a
 8000fec:	d803      	bhi.n	8000ff6 <ff_wtoupper+0x1e>
		return (chr - 32);
 8000fee:	88fb      	ldrh	r3, [r7, #6]
 8000ff0:	3b20      	subs	r3, #32
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	e000      	b.n	8000ff8 <ff_wtoupper+0x20>
	else
		return chr;
 8000ff6:	88fb      	ldrh	r3, [r7, #6]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr

08001004 <Mount_SD>:
//Debugging
const short sdioPrints = 0;


FRESULT Mount_SD (const TCHAR* path)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 1);
 800100c:	2201      	movs	r2, #1
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	480e      	ldr	r0, [pc, #56]	; (800104c <Mount_SD+0x48>)
 8001012:	f007 f92f 	bl	8008274 <f_mount>
 8001016:	4603      	mov	r3, r0
 8001018:	461a      	mov	r2, r3
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <Mount_SD+0x4c>)
 800101c:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK) {
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <Mount_SD+0x4c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d006      	beq.n	8001034 <Mount_SD+0x30>
		if(sdioPrints) printf("ERROR!!! in mounting SD CARD...\n");
 8001026:	2300      	movs	r3, #0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d009      	beq.n	8001040 <Mount_SD+0x3c>
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <Mount_SD+0x50>)
 800102e:	f008 fe29 	bl	8009c84 <puts>
 8001032:	e005      	b.n	8001040 <Mount_SD+0x3c>
	}
	else if(sdioPrints) printf("SD CARD mounted successfully...\n");
 8001034:	2300      	movs	r3, #0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d002      	beq.n	8001040 <Mount_SD+0x3c>
 800103a:	4807      	ldr	r0, [pc, #28]	; (8001058 <Mount_SD+0x54>)
 800103c:	f008 fe22 	bl	8009c84 <puts>

	return fresult;
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <Mount_SD+0x4c>)
 8001042:	781b      	ldrb	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20000428 	.word	0x20000428
 8001050:	2000066c 	.word	0x2000066c
 8001054:	0800c018 	.word	0x0800c018
 8001058:	0800c038 	.word	0x0800c038

0800105c <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8001064:	2201      	movs	r2, #1
 8001066:	6879      	ldr	r1, [r7, #4]
 8001068:	2000      	movs	r0, #0
 800106a:	f007 f903 	bl	8008274 <f_mount>
 800106e:	4603      	mov	r3, r0
 8001070:	461a      	mov	r2, r3
 8001072:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <Unmount_SD+0x44>)
 8001074:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) {
 8001076:	4b0a      	ldr	r3, [pc, #40]	; (80010a0 <Unmount_SD+0x44>)
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d106      	bne.n	800108c <Unmount_SD+0x30>
		if(sdioPrints) printf("SD CARD UNMOUNTED successfully...\n\n");
 800107e:	2300      	movs	r3, #0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d009      	beq.n	8001098 <Unmount_SD+0x3c>
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <Unmount_SD+0x48>)
 8001086:	f008 fdfd 	bl	8009c84 <puts>
	}
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
}
 800108a:	e005      	b.n	8001098 <Unmount_SD+0x3c>
	else if(sdioPrints) printf("ERROR!!! in UNMOUNTING SD CARD\n\n");
 800108c:	2300      	movs	r3, #0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <Unmount_SD+0x3c>
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <Unmount_SD+0x4c>)
 8001094:	f008 fdf6 	bl	8009c84 <puts>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000066c 	.word	0x2000066c
 80010a4:	0800c058 	.word	0x0800c058
 80010a8:	0800c07c 	.word	0x0800c07c

080010ac <Format_SD>:
    return fresult;
}

/* Only supports removing files from home directory */
FRESULT Format_SD (void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	; 0x38
 80010b0:	af00      	add	r7, sp, #0
    DIR dir;
    char *path = malloc(20*sizeof (char));
 80010b2:	2014      	movs	r0, #20
 80010b4:	f008 f834 	bl	8009120 <malloc>
 80010b8:	4603      	mov	r3, r0
 80010ba:	637b      	str	r3, [r7, #52]	; 0x34
    sprintf (path, "%s","/");
 80010bc:	4a28      	ldr	r2, [pc, #160]	; (8001160 <Format_SD+0xb4>)
 80010be:	4929      	ldr	r1, [pc, #164]	; (8001164 <Format_SD+0xb8>)
 80010c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80010c2:	f008 fe2b 	bl	8009d1c <siprintf>

    fresult = f_opendir(&dir, path);                       /* Open the directory */
 80010c6:	463b      	mov	r3, r7
 80010c8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80010ca:	4618      	mov	r0, r3
 80010cc:	f007 fd7f 	bl	8008bce <f_opendir>
 80010d0:	4603      	mov	r3, r0
 80010d2:	461a      	mov	r2, r3
 80010d4:	4b24      	ldr	r3, [pc, #144]	; (8001168 <Format_SD+0xbc>)
 80010d6:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80010d8:	4b23      	ldr	r3, [pc, #140]	; (8001168 <Format_SD+0xbc>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d136      	bne.n	800114e <Format_SD+0xa2>
    {
        for (;;)
        {
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 80010e0:	463b      	mov	r3, r7
 80010e2:	4922      	ldr	r1, [pc, #136]	; (800116c <Format_SD+0xc0>)
 80010e4:	4618      	mov	r0, r3
 80010e6:	f007 fe36 	bl	8008d56 <f_readdir>
 80010ea:	4603      	mov	r3, r0
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b1e      	ldr	r3, [pc, #120]	; (8001168 <Format_SD+0xbc>)
 80010f0:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) break;  /* Break on error or end of dir */
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <Format_SD+0xbc>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d125      	bne.n	8001146 <Format_SD+0x9a>
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <Format_SD+0xc0>)
 80010fc:	7d9b      	ldrb	r3, [r3, #22]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d021      	beq.n	8001146 <Format_SD+0x9a>
            if (fno.fattrib & AM_DIR)     /* It is a directory */
 8001102:	4b1a      	ldr	r3, [pc, #104]	; (800116c <Format_SD+0xc0>)
 8001104:	7a1b      	ldrb	r3, [r3, #8]
 8001106:	f003 0310 	and.w	r3, r3, #16
 800110a:	2b00      	cmp	r3, #0
 800110c:	d011      	beq.n	8001132 <Format_SD+0x86>
            {
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 800110e:	4918      	ldr	r1, [pc, #96]	; (8001170 <Format_SD+0xc4>)
 8001110:	4818      	ldr	r0, [pc, #96]	; (8001174 <Format_SD+0xc8>)
 8001112:	f7ff f87d 	bl	8000210 <strcmp>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d012      	beq.n	8001142 <Format_SD+0x96>
            	fresult = f_unlink(fno.fname);
 800111c:	4814      	ldr	r0, [pc, #80]	; (8001170 <Format_SD+0xc4>)
 800111e:	f007 feb7 	bl	8008e90 <f_unlink>
 8001122:	4603      	mov	r3, r0
 8001124:	461a      	mov	r2, r3
 8001126:	4b10      	ldr	r3, [pc, #64]	; (8001168 <Format_SD+0xbc>)
 8001128:	701a      	strb	r2, [r3, #0]
            	if (fresult == FR_DENIED) continue;
 800112a:	4b0f      	ldr	r3, [pc, #60]	; (8001168 <Format_SD+0xbc>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b07      	cmp	r3, #7
 8001130:	e7d6      	b.n	80010e0 <Format_SD+0x34>
            }
            else
            {   /* It is a file. */
               fresult = f_unlink(fno.fname);
 8001132:	480f      	ldr	r0, [pc, #60]	; (8001170 <Format_SD+0xc4>)
 8001134:	f007 feac 	bl	8008e90 <f_unlink>
 8001138:	4603      	mov	r3, r0
 800113a:	461a      	mov	r2, r3
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <Format_SD+0xbc>)
 800113e:	701a      	strb	r2, [r3, #0]
 8001140:	e7ce      	b.n	80010e0 <Format_SD+0x34>
            	if (!(strcmp ("SYSTEM~1", fno.fname))) continue;
 8001142:	bf00      	nop
            fresult = f_readdir(&dir, &fno);                   /* Read a directory item */
 8001144:	e7cc      	b.n	80010e0 <Format_SD+0x34>
            }
        }
        f_closedir(&dir);
 8001146:	463b      	mov	r3, r7
 8001148:	4618      	mov	r0, r3
 800114a:	f007 fdde 	bl	8008d0a <f_closedir>
    }
    free(path);
 800114e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001150:	f007 ffee 	bl	8009130 <free>
    return fresult;
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <Format_SD+0xbc>)
 8001156:	781b      	ldrb	r3, [r3, #0]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3738      	adds	r7, #56	; 0x38
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}
 8001160:	0800c0cc 	.word	0x0800c0cc
 8001164:	0800c09c 	.word	0x0800c09c
 8001168:	2000066c 	.word	0x2000066c
 800116c:	20000310 	.word	0x20000310
 8001170:	20000326 	.word	0x20000326
 8001174:	0800c0a0 	.word	0x0800c0a0

08001178 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 8001180:	494a      	ldr	r1, [pc, #296]	; (80012ac <Create_File+0x134>)
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f007 fe3f 	bl	8008e06 <f_stat>
 8001188:	4603      	mov	r3, r0
 800118a:	461a      	mov	r2, r3
 800118c:	4b48      	ldr	r3, [pc, #288]	; (80012b0 <Create_File+0x138>)
 800118e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8001190:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <Create_File+0x138>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d115      	bne.n	80011c4 <Create_File+0x4c>
	{
		char *buf = malloc(100*sizeof(char));
 8001198:	2064      	movs	r0, #100	; 0x64
 800119a:	f007 ffc1 	bl	8009120 <malloc>
 800119e:	4603      	mov	r3, r0
 80011a0:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n",name);
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	4943      	ldr	r1, [pc, #268]	; (80012b4 <Create_File+0x13c>)
 80011a6:	68f8      	ldr	r0, [r7, #12]
 80011a8:	f008 fdb8 	bl	8009d1c <siprintf>
		if(sdioPrints) printf(buf);
 80011ac:	2300      	movs	r3, #0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <Create_File+0x40>
 80011b2:	68f8      	ldr	r0, [r7, #12]
 80011b4:	f008 fce0 	bl	8009b78 <iprintf>
		free(buf);
 80011b8:	68f8      	ldr	r0, [r7, #12]
 80011ba:	f007 ffb9 	bl	8009130 <free>
	    return fresult;
 80011be:	4b3c      	ldr	r3, [pc, #240]	; (80012b0 <Create_File+0x138>)
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	e06f      	b.n	80012a4 <Create_File+0x12c>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 80011c4:	220b      	movs	r2, #11
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	483b      	ldr	r0, [pc, #236]	; (80012b8 <Create_File+0x140>)
 80011ca:	f007 f899 	bl	8008300 <f_open>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b37      	ldr	r3, [pc, #220]	; (80012b0 <Create_File+0x138>)
 80011d4:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80011d6:	4b36      	ldr	r3, [pc, #216]	; (80012b0 <Create_File+0x138>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d018      	beq.n	8001210 <Create_File+0x98>
		{
			char *buf = malloc(100*sizeof(char));
 80011de:	2064      	movs	r0, #100	; 0x64
 80011e0:	f007 ff9e 	bl	8009120 <malloc>
 80011e4:	4603      	mov	r3, r0
 80011e6:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n", fresult, name);
 80011e8:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <Create_File+0x138>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	461a      	mov	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4932      	ldr	r1, [pc, #200]	; (80012bc <Create_File+0x144>)
 80011f2:	6938      	ldr	r0, [r7, #16]
 80011f4:	f008 fd92 	bl	8009d1c <siprintf>
			if(sdioPrints) printf(buf);
 80011f8:	2300      	movs	r3, #0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d002      	beq.n	8001204 <Create_File+0x8c>
 80011fe:	6938      	ldr	r0, [r7, #16]
 8001200:	f008 fcba 	bl	8009b78 <iprintf>
			free(buf);
 8001204:	6938      	ldr	r0, [r7, #16]
 8001206:	f007 ff93 	bl	8009130 <free>
		    return fresult;
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <Create_File+0x138>)
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	e049      	b.n	80012a4 <Create_File+0x12c>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8001210:	2064      	movs	r0, #100	; 0x64
 8001212:	f007 ff85 	bl	8009120 <malloc>
 8001216:	4603      	mov	r3, r0
 8001218:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	4928      	ldr	r1, [pc, #160]	; (80012c0 <Create_File+0x148>)
 800121e:	69f8      	ldr	r0, [r7, #28]
 8001220:	f008 fd7c 	bl	8009d1c <siprintf>
			if(sdioPrints) printf(buf);
 8001224:	2300      	movs	r3, #0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d002      	beq.n	8001230 <Create_File+0xb8>
 800122a:	69f8      	ldr	r0, [r7, #28]
 800122c:	f008 fca4 	bl	8009b78 <iprintf>
			free(buf);
 8001230:	69f8      	ldr	r0, [r7, #28]
 8001232:	f007 ff7d 	bl	8009130 <free>
		}

		fresult = f_close(&fil);
 8001236:	4820      	ldr	r0, [pc, #128]	; (80012b8 <Create_File+0x140>)
 8001238:	f007 fc9f 	bl	8008b7a <f_close>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <Create_File+0x138>)
 8001242:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8001244:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <Create_File+0x138>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d016      	beq.n	800127a <Create_File+0x102>
		{
			char *buf = malloc(100*sizeof(char));
 800124c:	2064      	movs	r0, #100	; 0x64
 800124e:	f007 ff67 	bl	8009120 <malloc>
 8001252:	4603      	mov	r3, r0
 8001254:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n", fresult, name);
 8001256:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <Create_File+0x138>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4919      	ldr	r1, [pc, #100]	; (80012c4 <Create_File+0x14c>)
 8001260:	6978      	ldr	r0, [r7, #20]
 8001262:	f008 fd5b 	bl	8009d1c <siprintf>
			if(sdioPrints) printf(buf);
 8001266:	2300      	movs	r3, #0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d002      	beq.n	8001272 <Create_File+0xfa>
 800126c:	6978      	ldr	r0, [r7, #20]
 800126e:	f008 fc83 	bl	8009b78 <iprintf>
			free(buf);
 8001272:	6978      	ldr	r0, [r7, #20]
 8001274:	f007 ff5c 	bl	8009130 <free>
 8001278:	e012      	b.n	80012a0 <Create_File+0x128>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 800127a:	2064      	movs	r0, #100	; 0x64
 800127c:	f007 ff50 	bl	8009120 <malloc>
 8001280:	4603      	mov	r3, r0
 8001282:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8001284:	687a      	ldr	r2, [r7, #4]
 8001286:	4910      	ldr	r1, [pc, #64]	; (80012c8 <Create_File+0x150>)
 8001288:	69b8      	ldr	r0, [r7, #24]
 800128a:	f008 fd47 	bl	8009d1c <siprintf>
			if(sdioPrints) printf(buf);
 800128e:	2300      	movs	r3, #0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d002      	beq.n	800129a <Create_File+0x122>
 8001294:	69b8      	ldr	r0, [r7, #24]
 8001296:	f008 fc6f 	bl	8009b78 <iprintf>
			free(buf);
 800129a:	69b8      	ldr	r0, [r7, #24]
 800129c:	f007 ff48 	bl	8009130 <free>
		}
	}
    return fresult;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <Create_File+0x138>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3720      	adds	r7, #32
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000310 	.word	0x20000310
 80012b0:	2000066c 	.word	0x2000066c
 80012b4:	0800c240 	.word	0x0800c240
 80012b8:	20000674 	.word	0x20000674
 80012bc:	0800c274 	.word	0x0800c274
 80012c0:	0800c29c 	.word	0x0800c29c
 80012c4:	0800c2dc 	.word	0x0800c2dc
 80012c8:	0800c220 	.word	0x0800c220

080012cc <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 80012d6:	495f      	ldr	r1, [pc, #380]	; (8001454 <Update_File+0x188>)
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f007 fd94 	bl	8008e06 <f_stat>
 80012de:	4603      	mov	r3, r0
 80012e0:	461a      	mov	r2, r3
 80012e2:	4b5d      	ldr	r3, [pc, #372]	; (8001458 <Update_File+0x18c>)
 80012e4:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80012e6:	4b5c      	ldr	r3, [pc, #368]	; (8001458 <Update_File+0x18c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d015      	beq.n	800131a <Update_File+0x4e>
	{
		char *buf = malloc(100*sizeof(char));
 80012ee:	2064      	movs	r0, #100	; 0x64
 80012f0:	f007 ff16 	bl	8009120 <malloc>
 80012f4:	4603      	mov	r3, r0
 80012f6:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n", name);
 80012f8:	687a      	ldr	r2, [r7, #4]
 80012fa:	4958      	ldr	r1, [pc, #352]	; (800145c <Update_File+0x190>)
 80012fc:	68b8      	ldr	r0, [r7, #8]
 80012fe:	f008 fd0d 	bl	8009d1c <siprintf>
		if(sdioPrints) printf (buf);
 8001302:	2300      	movs	r3, #0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d002      	beq.n	800130e <Update_File+0x42>
 8001308:	68b8      	ldr	r0, [r7, #8]
 800130a:	f008 fc35 	bl	8009b78 <iprintf>
		free(buf);
 800130e:	68b8      	ldr	r0, [r7, #8]
 8001310:	f007 ff0e 	bl	8009130 <free>
	    return fresult;
 8001314:	4b50      	ldr	r3, [pc, #320]	; (8001458 <Update_File+0x18c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	e097      	b.n	800144a <Update_File+0x17e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 800131a:	2232      	movs	r2, #50	; 0x32
 800131c:	6879      	ldr	r1, [r7, #4]
 800131e:	4850      	ldr	r0, [pc, #320]	; (8001460 <Update_File+0x194>)
 8001320:	f006 ffee 	bl	8008300 <f_open>
 8001324:	4603      	mov	r3, r0
 8001326:	461a      	mov	r2, r3
 8001328:	4b4b      	ldr	r3, [pc, #300]	; (8001458 <Update_File+0x18c>)
 800132a:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800132c:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <Update_File+0x18c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d018      	beq.n	8001366 <Update_File+0x9a>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001334:	2064      	movs	r0, #100	; 0x64
 8001336:	f007 fef3 	bl	8009120 <malloc>
 800133a:	4603      	mov	r3, r0
 800133c:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n", fresult, name);
 800133e:	4b46      	ldr	r3, [pc, #280]	; (8001458 <Update_File+0x18c>)
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	461a      	mov	r2, r3
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4947      	ldr	r1, [pc, #284]	; (8001464 <Update_File+0x198>)
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	f008 fce7 	bl	8009d1c <siprintf>
	    	if(sdioPrints) printf(buf);
 800134e:	2300      	movs	r3, #0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d002      	beq.n	800135a <Update_File+0x8e>
 8001354:	68f8      	ldr	r0, [r7, #12]
 8001356:	f008 fc0f 	bl	8009b78 <iprintf>
	        free(buf);
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f007 fee8 	bl	8009130 <free>
	        return fresult;
 8001360:	4b3d      	ldr	r3, [pc, #244]	; (8001458 <Update_File+0x18c>)
 8001362:	781b      	ldrb	r3, [r3, #0]
 8001364:	e071      	b.n	800144a <Update_File+0x17e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 8001366:	6838      	ldr	r0, [r7, #0]
 8001368:	f7fe ff5c 	bl	8000224 <strlen>
 800136c:	4602      	mov	r2, r0
 800136e:	4b3e      	ldr	r3, [pc, #248]	; (8001468 <Update_File+0x19c>)
 8001370:	6839      	ldr	r1, [r7, #0]
 8001372:	483b      	ldr	r0, [pc, #236]	; (8001460 <Update_File+0x194>)
 8001374:	f007 fa0e 	bl	8008794 <f_write>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	4b36      	ldr	r3, [pc, #216]	; (8001458 <Update_File+0x18c>)
 800137e:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8001380:	4b35      	ldr	r3, [pc, #212]	; (8001458 <Update_File+0x18c>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d016      	beq.n	80013b6 <Update_File+0xea>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001388:	2064      	movs	r0, #100	; 0x64
 800138a:	f007 fec9 	bl	8009120 <malloc>
 800138e:	4603      	mov	r3, r0
 8001390:	61bb      	str	r3, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n", fresult, name);
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <Update_File+0x18c>)
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4934      	ldr	r1, [pc, #208]	; (800146c <Update_File+0x1a0>)
 800139c:	69b8      	ldr	r0, [r7, #24]
 800139e:	f008 fcbd 	bl	8009d1c <siprintf>
	    	if(sdioPrints) printf(buf);
 80013a2:	2300      	movs	r3, #0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d002      	beq.n	80013ae <Update_File+0xe2>
 80013a8:	69b8      	ldr	r0, [r7, #24]
 80013aa:	f008 fbe5 	bl	8009b78 <iprintf>
	    	free(buf);
 80013ae:	69b8      	ldr	r0, [r7, #24]
 80013b0:	f007 febe 	bl	8009130 <free>
 80013b4:	e012      	b.n	80013dc <Update_File+0x110>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013b6:	2064      	movs	r0, #100	; 0x64
 80013b8:	f007 feb2 	bl	8009120 <malloc>
 80013bc:	4603      	mov	r3, r0
 80013be:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	492b      	ldr	r1, [pc, #172]	; (8001470 <Update_File+0x1a4>)
 80013c4:	69f8      	ldr	r0, [r7, #28]
 80013c6:	f008 fca9 	bl	8009d1c <siprintf>
	    	if(sdioPrints) printf(buf);
 80013ca:	2300      	movs	r3, #0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d002      	beq.n	80013d6 <Update_File+0x10a>
 80013d0:	69f8      	ldr	r0, [r7, #28]
 80013d2:	f008 fbd1 	bl	8009b78 <iprintf>
	    	free(buf);
 80013d6:	69f8      	ldr	r0, [r7, #28]
 80013d8:	f007 feaa 	bl	8009130 <free>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 80013dc:	4820      	ldr	r0, [pc, #128]	; (8001460 <Update_File+0x194>)
 80013de:	f007 fbcc 	bl	8008b7a <f_close>
 80013e2:	4603      	mov	r3, r0
 80013e4:	461a      	mov	r2, r3
 80013e6:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <Update_File+0x18c>)
 80013e8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80013ea:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <Update_File+0x18c>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d016      	beq.n	8001420 <Update_File+0x154>
	    {
	    	char *buf = malloc(100*sizeof(char));
 80013f2:	2064      	movs	r0, #100	; 0x64
 80013f4:	f007 fe94 	bl	8009120 <malloc>
 80013f8:	4603      	mov	r3, r0
 80013fa:	613b      	str	r3, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n", fresult, name);
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <Update_File+0x18c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	491b      	ldr	r1, [pc, #108]	; (8001474 <Update_File+0x1a8>)
 8001406:	6938      	ldr	r0, [r7, #16]
 8001408:	f008 fc88 	bl	8009d1c <siprintf>
	    	if(sdioPrints) printf(buf);
 800140c:	2300      	movs	r3, #0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d002      	beq.n	8001418 <Update_File+0x14c>
 8001412:	6938      	ldr	r0, [r7, #16]
 8001414:	f008 fbb0 	bl	8009b78 <iprintf>
	    	free(buf);
 8001418:	6938      	ldr	r0, [r7, #16]
 800141a:	f007 fe89 	bl	8009130 <free>
 800141e:	e012      	b.n	8001446 <Update_File+0x17a>
	    }
	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 8001420:	2064      	movs	r0, #100	; 0x64
 8001422:	f007 fe7d 	bl	8009120 <malloc>
 8001426:	4603      	mov	r3, r0
 8001428:	617b      	str	r3, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	4912      	ldr	r1, [pc, #72]	; (8001478 <Update_File+0x1ac>)
 800142e:	6978      	ldr	r0, [r7, #20]
 8001430:	f008 fc74 	bl	8009d1c <siprintf>
	    	if(sdioPrints) printf(buf);
 8001434:	2300      	movs	r3, #0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d002      	beq.n	8001440 <Update_File+0x174>
 800143a:	6978      	ldr	r0, [r7, #20]
 800143c:	f008 fb9c 	bl	8009b78 <iprintf>
	    	free(buf);
 8001440:	6978      	ldr	r0, [r7, #20]
 8001442:	f007 fe75 	bl	8009130 <free>
	     }
	}
    return fresult;
 8001446:	4b04      	ldr	r3, [pc, #16]	; (8001458 <Update_File+0x18c>)
 8001448:	781b      	ldrb	r3, [r3, #0]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3720      	adds	r7, #32
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000310 	.word	0x20000310
 8001458:	2000066c 	.word	0x2000066c
 800145c:	0800c0d0 	.word	0x0800c0d0
 8001460:	20000674 	.word	0x20000674
 8001464:	0800c0f0 	.word	0x0800c0f0
 8001468:	20000664 	.word	0x20000664
 800146c:	0800c300 	.word	0x0800c300
 8001470:	0800c328 	.word	0x0800c328
 8001474:	0800c1f8 	.word	0x0800c1f8
 8001478:	0800c220 	.word	0x0800c220

0800147c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001484:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001488:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b00      	cmp	r3, #0
 8001492:	d013      	beq.n	80014bc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001494:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001498:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800149c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00b      	beq.n	80014bc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014a4:	e000      	b.n	80014a8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014a6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d0f9      	beq.n	80014a6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014b2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014bc:	687b      	ldr	r3, [r7, #4]
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b086      	sub	sp, #24
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	60f8      	str	r0, [r7, #12]
 80014d2:	60b9      	str	r1, [r7, #8]
 80014d4:	607a      	str	r2, [r7, #4]
	for(int i=0; i<len; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e009      	b.n	80014f0 <_write+0x26>
		ITM_SendChar((*ptr++));
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	1c5a      	adds	r2, r3, #1
 80014e0:	60ba      	str	r2, [r7, #8]
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff ffc9 	bl	800147c <ITM_SendChar>
	for(int i=0; i<len; i++)
 80014ea:	697b      	ldr	r3, [r7, #20]
 80014ec:	3301      	adds	r3, #1
 80014ee:	617b      	str	r3, [r7, #20]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	dbf1      	blt.n	80014dc <_write+0x12>

	return len;
 80014f8:	687b      	ldr	r3, [r7, #4]
}
 80014fa:	4618      	mov	r0, r3
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
	...

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b09d      	sub	sp, #116	; 0x74
 8001508:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800150a:	f000 ff53 	bl	80023b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150e:	f000 f923 	bl	8001758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001512:	f000 f9cd 	bl	80018b0 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8001516:	f000 f9ab 	bl	8001870 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800151a:	f004 f9d1 	bl	80058c0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */

	/* Initialize all configured peripherals */
    MX_GPIO_Init();
 800151e:	f000 f9c7 	bl	80018b0 <MX_GPIO_Init>
    MX_SDIO_SD_Init();
 8001522:	f000 f9a5 	bl	8001870 <MX_SDIO_SD_Init>
    MX_FATFS_Init();
 8001526:	f004 f9cb 	bl	80058c0 <MX_FATFS_Init>
    /* USER CODE BEGIN 2 */

    //Check if the card is already inserted or not
    if(Mount_SD("/")==FR_OK) {
 800152a:	487c      	ldr	r0, [pc, #496]	; (800171c <main+0x218>)
 800152c:	f7ff fd6a 	bl	8001004 <Mount_SD>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d10a      	bne.n	800154c <main+0x48>
		detect = 1;
 8001536:	4b7a      	ldr	r3, [pc, #488]	; (8001720 <main+0x21c>)
 8001538:	2201      	movs	r2, #1
 800153a:	801a      	strh	r2, [r3, #0]
		printf("%d) Card is already detected\n\n",detect);
 800153c:	4b78      	ldr	r3, [pc, #480]	; (8001720 <main+0x21c>)
 800153e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001542:	4619      	mov	r1, r3
 8001544:	4877      	ldr	r0, [pc, #476]	; (8001724 <main+0x220>)
 8001546:	f008 fb17 	bl	8009b78 <iprintf>
 800154a:	e009      	b.n	8001560 <main+0x5c>
	}
	else {
		detect = 0;
 800154c:	4b74      	ldr	r3, [pc, #464]	; (8001720 <main+0x21c>)
 800154e:	2200      	movs	r2, #0
 8001550:	801a      	strh	r2, [r3, #0]
		printf("%d) No card detected\n\n",detect);
 8001552:	4b73      	ldr	r3, [pc, #460]	; (8001720 <main+0x21c>)
 8001554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001558:	4619      	mov	r1, r3
 800155a:	4873      	ldr	r0, [pc, #460]	; (8001728 <main+0x224>)
 800155c:	f008 fb0c 	bl	8009b78 <iprintf>
	}

	Unmount_SD("/");
 8001560:	486e      	ldr	r0, [pc, #440]	; (800171c <main+0x218>)
 8001562:	f7ff fd7b 	bl	800105c <Unmount_SD>


    //Create new file with a GPS naming convention
	second = 53;
 8001566:	4b71      	ldr	r3, [pc, #452]	; (800172c <main+0x228>)
 8001568:	2235      	movs	r2, #53	; 0x35
 800156a:	601a      	str	r2, [r3, #0]
	minute = 33;
 800156c:	4b70      	ldr	r3, [pc, #448]	; (8001730 <main+0x22c>)
 800156e:	2221      	movs	r2, #33	; 0x21
 8001570:	601a      	str	r2, [r3, #0]
	hour = 14;
 8001572:	4b70      	ldr	r3, [pc, #448]	; (8001734 <main+0x230>)
 8001574:	220e      	movs	r2, #14
 8001576:	601a      	str	r2, [r3, #0]
	day = 24;
 8001578:	4b6f      	ldr	r3, [pc, #444]	; (8001738 <main+0x234>)
 800157a:	2218      	movs	r2, #24
 800157c:	601a      	str	r2, [r3, #0]
	month = 3;
 800157e:	4b6f      	ldr	r3, [pc, #444]	; (800173c <main+0x238>)
 8001580:	2203      	movs	r2, #3
 8001582:	601a      	str	r2, [r3, #0]
	year = 2021;
 8001584:	4b6e      	ldr	r3, [pc, #440]	; (8001740 <main+0x23c>)
 8001586:	f240 72e5 	movw	r2, #2021	; 0x7e5
 800158a:	601a      	str	r2, [r3, #0]
	char dayS[12], monthS[12], yearS[12], hourS[12], minuteS[12], secondS[12];
	sprintf(dayS, "%d", day);
 800158c:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <main+0x234>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001594:	496b      	ldr	r1, [pc, #428]	; (8001744 <main+0x240>)
 8001596:	4618      	mov	r0, r3
 8001598:	f008 fbc0 	bl	8009d1c <siprintf>
	sprintf(monthS, "%d", month);
 800159c:	4b67      	ldr	r3, [pc, #412]	; (800173c <main+0x238>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015a4:	4967      	ldr	r1, [pc, #412]	; (8001744 <main+0x240>)
 80015a6:	4618      	mov	r0, r3
 80015a8:	f008 fbb8 	bl	8009d1c <siprintf>
	sprintf(yearS, "%d", year);
 80015ac:	4b64      	ldr	r3, [pc, #400]	; (8001740 <main+0x23c>)
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b4:	4963      	ldr	r1, [pc, #396]	; (8001744 <main+0x240>)
 80015b6:	4618      	mov	r0, r3
 80015b8:	f008 fbb0 	bl	8009d1c <siprintf>
	sprintf(hourS, "%d", hour);
 80015bc:	4b5d      	ldr	r3, [pc, #372]	; (8001734 <main+0x230>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	f107 031c 	add.w	r3, r7, #28
 80015c4:	495f      	ldr	r1, [pc, #380]	; (8001744 <main+0x240>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f008 fba8 	bl	8009d1c <siprintf>
	sprintf(minuteS, "%d", minute);
 80015cc:	4b58      	ldr	r3, [pc, #352]	; (8001730 <main+0x22c>)
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	f107 0310 	add.w	r3, r7, #16
 80015d4:	495b      	ldr	r1, [pc, #364]	; (8001744 <main+0x240>)
 80015d6:	4618      	mov	r0, r3
 80015d8:	f008 fba0 	bl	8009d1c <siprintf>
	sprintf(secondS, "%d", second);
 80015dc:	4b53      	ldr	r3, [pc, #332]	; (800172c <main+0x228>)
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	4958      	ldr	r1, [pc, #352]	; (8001744 <main+0x240>)
 80015e4:	4618      	mov	r0, r3
 80015e6:	f008 fb99 	bl	8009d1c <siprintf>
	int lenF = strlen("DFR_")+strlen(dayS)+strlen("-")+strlen(monthS)+strlen("-")+strlen(yearS)+strlen("_")+strlen(secondS)+strlen("-")+strlen(minuteS)+strlen("-")+strlen(hourS)+strlen(".csv")+1;
 80015ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7fe fe18 	bl	8000224 <strlen>
 80015f4:	4604      	mov	r4, r0
 80015f6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe fe12 	bl	8000224 <strlen>
 8001600:	4603      	mov	r3, r0
 8001602:	441c      	add	r4, r3
 8001604:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe fe0b 	bl	8000224 <strlen>
 800160e:	4603      	mov	r3, r0
 8001610:	441c      	add	r4, r3
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	4618      	mov	r0, r3
 8001616:	f7fe fe05 	bl	8000224 <strlen>
 800161a:	4603      	mov	r3, r0
 800161c:	441c      	add	r4, r3
 800161e:	f107 0310 	add.w	r3, r7, #16
 8001622:	4618      	mov	r0, r3
 8001624:	f7fe fdfe 	bl	8000224 <strlen>
 8001628:	4603      	mov	r3, r0
 800162a:	441c      	add	r4, r3
 800162c:	f107 031c 	add.w	r3, r7, #28
 8001630:	4618      	mov	r0, r3
 8001632:	f7fe fdf7 	bl	8000224 <strlen>
 8001636:	4603      	mov	r3, r0
 8001638:	4423      	add	r3, r4
 800163a:	330e      	adds	r3, #14
 800163c:	657b      	str	r3, [r7, #84]	; 0x54
	char FileName[lenF];
 800163e:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8001640:	1e63      	subs	r3, r4, #1
 8001642:	653b      	str	r3, [r7, #80]	; 0x50
 8001644:	4623      	mov	r3, r4
 8001646:	4618      	mov	r0, r3
 8001648:	f04f 0100 	mov.w	r1, #0
 800164c:	f04f 0200 	mov.w	r2, #0
 8001650:	f04f 0300 	mov.w	r3, #0
 8001654:	00cb      	lsls	r3, r1, #3
 8001656:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800165a:	00c2      	lsls	r2, r0, #3
 800165c:	4623      	mov	r3, r4
 800165e:	4618      	mov	r0, r3
 8001660:	f04f 0100 	mov.w	r1, #0
 8001664:	f04f 0200 	mov.w	r2, #0
 8001668:	f04f 0300 	mov.w	r3, #0
 800166c:	00cb      	lsls	r3, r1, #3
 800166e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001672:	00c2      	lsls	r2, r0, #3
 8001674:	4623      	mov	r3, r4
 8001676:	3307      	adds	r3, #7
 8001678:	08db      	lsrs	r3, r3, #3
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	ebad 0d03 	sub.w	sp, sp, r3
 8001680:	ab06      	add	r3, sp, #24
 8001682:	3300      	adds	r3, #0
 8001684:	64fb      	str	r3, [r7, #76]	; 0x4c
	snprintf(FileName,lenF,"DFR_%s-%s-%s_%s-%s-%s.CSV", dayS, monthS, yearS, secondS, minuteS, hourS);
 8001686:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001688:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800168a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800168e:	f107 031c 	add.w	r3, r7, #28
 8001692:	9304      	str	r3, [sp, #16]
 8001694:	f107 0310 	add.w	r3, r7, #16
 8001698:	9303      	str	r3, [sp, #12]
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	9302      	str	r3, [sp, #8]
 800169e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	4613      	mov	r3, r2
 80016ac:	4a26      	ldr	r2, [pc, #152]	; (8001748 <main+0x244>)
 80016ae:	f008 fb01 	bl	8009cb4 <sniprintf>

	fresult = Mount_SD("/");
 80016b2:	481a      	ldr	r0, [pc, #104]	; (800171c <main+0x218>)
 80016b4:	f7ff fca6 	bl	8001004 <Mount_SD>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	4b23      	ldr	r3, [pc, #140]	; (800174c <main+0x248>)
 80016be:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 80016c0:	4b22      	ldr	r3, [pc, #136]	; (800174c <main+0x248>)
 80016c2:	781b      	ldrb	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f000 f98f 	bl	80019e8 <SD_Check>
	Format_SD();
 80016ca:	f7ff fcef 	bl	80010ac <Format_SD>
	fresult = Create_File(FileName);
 80016ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fd51 	bl	8001178 <Create_File>
 80016d6:	4603      	mov	r3, r0
 80016d8:	461a      	mov	r2, r3
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <main+0x248>)
 80016dc:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <main+0x248>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 f980 	bl	80019e8 <SD_Check>
	Unmount_SD("/");
 80016e8:	480c      	ldr	r0, [pc, #48]	; (800171c <main+0x218>)
 80016ea:	f7ff fcb7 	bl	800105c <Unmount_SD>



	csvHeader(FileName, lenF);
 80016ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016f2:	4618      	mov	r0, r3
 80016f4:	f000 f9a4 	bl	8001a40 <csvHeader>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		csvUpdate(FileName, lenF);
 80016f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80016fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80016fc:	4618      	mov	r0, r3
 80016fe:	f000 fa97 	bl	8001c30 <csvUpdate>
		indx++;
 8001702:	4b13      	ldr	r3, [pc, #76]	; (8001750 <main+0x24c>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	3301      	adds	r3, #1
 8001708:	4a11      	ldr	r2, [pc, #68]	; (8001750 <main+0x24c>)
 800170a:	6013      	str	r3, [r2, #0]
		printf("\n Count: %d \n", indx);
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <main+0x24c>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	4810      	ldr	r0, [pc, #64]	; (8001754 <main+0x250>)
 8001714:	f008 fa30 	bl	8009b78 <iprintf>
		csvUpdate(FileName, lenF);
 8001718:	e7ee      	b.n	80016f8 <main+0x1f4>
 800171a:	bf00      	nop
 800171c:	0800c414 	.word	0x0800c414
 8001720:	200002c6 	.word	0x200002c6
 8001724:	0800c418 	.word	0x0800c418
 8001728:	0800c438 	.word	0x0800c438
 800172c:	200008d4 	.word	0x200008d4
 8001730:	200008dc 	.word	0x200008dc
 8001734:	2000096c 	.word	0x2000096c
 8001738:	20000a20 	.word	0x20000a20
 800173c:	200008d0 	.word	0x200008d0
 8001740:	20000a14 	.word	0x20000a14
 8001744:	0800c450 	.word	0x0800c450
 8001748:	0800c454 	.word	0x0800c454
 800174c:	2000066c 	.word	0x2000066c
 8001750:	200002c8 	.word	0x200002c8
 8001754:	0800c470 	.word	0x0800c470

08001758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b0ac      	sub	sp, #176	; 0xb0
 800175c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800175e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001762:	2234      	movs	r2, #52	; 0x34
 8001764:	2100      	movs	r1, #0
 8001766:	4618      	mov	r0, r3
 8001768:	f007 fcea 	bl	8009140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800176c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	225c      	movs	r2, #92	; 0x5c
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f007 fcdb 	bl	8009140 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	60bb      	str	r3, [r7, #8]
 800178e:	4b36      	ldr	r3, [pc, #216]	; (8001868 <SystemClock_Config+0x110>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a35      	ldr	r2, [pc, #212]	; (8001868 <SystemClock_Config+0x110>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b33      	ldr	r3, [pc, #204]	; (8001868 <SystemClock_Config+0x110>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017a6:	2300      	movs	r3, #0
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	4b30      	ldr	r3, [pc, #192]	; (800186c <SystemClock_Config+0x114>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017b2:	4a2e      	ldr	r2, [pc, #184]	; (800186c <SystemClock_Config+0x114>)
 80017b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b2c      	ldr	r3, [pc, #176]	; (800186c <SystemClock_Config+0x114>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c6:	2301      	movs	r3, #1
 80017c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017d2:	2302      	movs	r3, #2
 80017d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017e0:	2308      	movs	r3, #8
 80017e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 100;
 80017e6:	2364      	movs	r3, #100	; 0x64
 80017e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017ec:	2302      	movs	r3, #2
 80017ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80017f2:	2303      	movs	r3, #3
 80017f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017f8:	2302      	movs	r3, #2
 80017fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fe:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001802:	4618      	mov	r0, r3
 8001804:	f001 fec2 	bl	800358c <HAL_RCC_OscConfig>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <SystemClock_Config+0xba>
  {
    Error_Handler();
 800180e:	f000 fc21 	bl	8002054 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001812:	230f      	movs	r3, #15
 8001814:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001816:	2302      	movs	r3, #2
 8001818:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800181a:	2300      	movs	r3, #0
 800181c:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800181e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001822:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001824:	2300      	movs	r3, #0
 8001826:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001828:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800182c:	2101      	movs	r1, #1
 800182e:	4618      	mov	r0, r3
 8001830:	f001 f8ea 	bl	8002a08 <HAL_RCC_ClockConfig>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800183a:	f000 fc0b 	bl	8002054 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 800183e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001842:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001844:	2300      	movs	r3, #0
 8001846:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8001848:	2300      	movs	r3, #0
 800184a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4618      	mov	r0, r3
 8001852:	f001 f9bf 	bl	8002bd4 <HAL_RCCEx_PeriphCLKConfig>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <SystemClock_Config+0x108>
  {
    Error_Handler();
 800185c:	f000 fbfa 	bl	8002054 <Error_Handler>
  }
}
 8001860:	bf00      	nop
 8001862:	37b0      	adds	r7, #176	; 0xb0
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40023800 	.word	0x40023800
 800186c:	40007000 	.word	0x40007000

08001870 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <MX_SDIO_SD_Init+0x38>)
 8001876:	4a0d      	ldr	r2, [pc, #52]	; (80018ac <MX_SDIO_SD_Init+0x3c>)
 8001878:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <MX_SDIO_SD_Init+0x38>)
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001880:	4b09      	ldr	r3, [pc, #36]	; (80018a8 <MX_SDIO_SD_Init+0x38>)
 8001882:	2200      	movs	r2, #0
 8001884:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <MX_SDIO_SD_Init+0x38>)
 8001888:	2200      	movs	r2, #0
 800188a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <MX_SDIO_SD_Init+0x38>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001892:	4b05      	ldr	r3, [pc, #20]	; (80018a8 <MX_SDIO_SD_Init+0x38>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 16;
 8001898:	4b03      	ldr	r3, [pc, #12]	; (80018a8 <MX_SDIO_SD_Init+0x38>)
 800189a:	2210      	movs	r2, #16
 800189c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr
 80018a8:	20000980 	.word	0x20000980
 80018ac:	40012c00 	.word	0x40012c00

080018b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b6:	f107 0314 	add.w	r3, r7, #20
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b42      	ldr	r3, [pc, #264]	; (80019d4 <MX_GPIO_Init+0x124>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a41      	ldr	r2, [pc, #260]	; (80019d4 <MX_GPIO_Init+0x124>)
 80018d0:	f043 0304 	orr.w	r3, r3, #4
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b3f      	ldr	r3, [pc, #252]	; (80019d4 <MX_GPIO_Init+0x124>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0304 	and.w	r3, r3, #4
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b3b      	ldr	r3, [pc, #236]	; (80019d4 <MX_GPIO_Init+0x124>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a3a      	ldr	r2, [pc, #232]	; (80019d4 <MX_GPIO_Init+0x124>)
 80018ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b38      	ldr	r3, [pc, #224]	; (80019d4 <MX_GPIO_Init+0x124>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	4b34      	ldr	r3, [pc, #208]	; (80019d4 <MX_GPIO_Init+0x124>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a33      	ldr	r2, [pc, #204]	; (80019d4 <MX_GPIO_Init+0x124>)
 8001908:	f043 0301 	orr.w	r3, r3, #1
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b31      	ldr	r3, [pc, #196]	; (80019d4 <MX_GPIO_Init+0x124>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	607b      	str	r3, [r7, #4]
 800191e:	4b2d      	ldr	r3, [pc, #180]	; (80019d4 <MX_GPIO_Init+0x124>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4a2c      	ldr	r2, [pc, #176]	; (80019d4 <MX_GPIO_Init+0x124>)
 8001924:	f043 0308 	orr.w	r3, r3, #8
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4b2a      	ldr	r3, [pc, #168]	; (80019d4 <MX_GPIO_Init+0x124>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	603b      	str	r3, [r7, #0]
 800193a:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <MX_GPIO_Init+0x124>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a25      	ldr	r2, [pc, #148]	; (80019d4 <MX_GPIO_Init+0x124>)
 8001940:	f043 0302 	orr.w	r3, r3, #2
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <MX_GPIO_Init+0x124>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0302 	and.w	r3, r3, #2
 800194e:	603b      	str	r3, [r7, #0]
 8001950:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001952:	2200      	movs	r2, #0
 8001954:	2120      	movs	r1, #32
 8001956:	4820      	ldr	r0, [pc, #128]	; (80019d8 <MX_GPIO_Init+0x128>)
 8001958:	f001 f83c 	bl	80029d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800195c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001960:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001962:	4b1e      	ldr	r3, [pc, #120]	; (80019dc <MX_GPIO_Init+0x12c>)
 8001964:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 0314 	add.w	r3, r7, #20
 800196e:	4619      	mov	r1, r3
 8001970:	481b      	ldr	r0, [pc, #108]	; (80019e0 <MX_GPIO_Init+0x130>)
 8001972:	f000 fe9b 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_RX_Pin;
 8001976:	2308      	movs	r3, #8
 8001978:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001986:	2307      	movs	r3, #7
 8001988:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USART_RX_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 0314 	add.w	r3, r7, #20
 800198e:	4619      	mov	r1, r3
 8001990:	4811      	ldr	r0, [pc, #68]	; (80019d8 <MX_GPIO_Init+0x128>)
 8001992:	f000 fe8b 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001996:	2320      	movs	r3, #32
 8001998:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80019a6:	f107 0314 	add.w	r3, r7, #20
 80019aa:	4619      	mov	r1, r3
 80019ac:	480a      	ldr	r0, [pc, #40]	; (80019d8 <MX_GPIO_Init+0x128>)
 80019ae:	f000 fe7d 	bl	80026ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019b2:	2340      	movs	r3, #64	; 0x40
 80019b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b6:	2300      	movs	r3, #0
 80019b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019be:	f107 0314 	add.w	r3, r7, #20
 80019c2:	4619      	mov	r1, r3
 80019c4:	4807      	ldr	r0, [pc, #28]	; (80019e4 <MX_GPIO_Init+0x134>)
 80019c6:	f000 fe71 	bl	80026ac <HAL_GPIO_Init>

}
 80019ca:	bf00      	nop
 80019cc:	3728      	adds	r7, #40	; 0x28
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020000 	.word	0x40020000
 80019dc:	10210000 	.word	0x10210000
 80019e0:	40020800 	.word	0x40020800
 80019e4:	40020400 	.word	0x40020400

080019e8 <SD_Check>:

/* USER CODE BEGIN 4 */


void SD_Check(FRESULT fresult) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	4603      	mov	r3, r0
 80019f0:	71fb      	strb	r3, [r7, #7]
	if(fresult != FR_OK) {
 80019f2:	79fb      	ldrb	r3, [r7, #7]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00b      	beq.n	8001a10 <SD_Check+0x28>
		isSaving = 0;
 80019f8:	4b0d      	ldr	r3, [pc, #52]	; (8001a30 <SD_Check+0x48>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	801a      	strh	r2, [r3, #0]
		if(enablePrintf)
 80019fe:	4b0d      	ldr	r3, [pc, #52]	; (8001a34 <SD_Check+0x4c>)
 8001a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00e      	beq.n	8001a26 <SD_Check+0x3e>
			printf("ERROR - SD card is NOT saving!\n");
 8001a08:	480b      	ldr	r0, [pc, #44]	; (8001a38 <SD_Check+0x50>)
 8001a0a:	f008 f93b 	bl	8009c84 <puts>
	else {
		isSaving = 1;
		if(enablePrintf)
			printf("Successfully saved to SD Card\n");
	}
}
 8001a0e:	e00a      	b.n	8001a26 <SD_Check+0x3e>
		isSaving = 1;
 8001a10:	4b07      	ldr	r3, [pc, #28]	; (8001a30 <SD_Check+0x48>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	801a      	strh	r2, [r3, #0]
		if(enablePrintf)
 8001a16:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <SD_Check+0x4c>)
 8001a18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d002      	beq.n	8001a26 <SD_Check+0x3e>
			printf("Successfully saved to SD Card\n");
 8001a20:	4806      	ldr	r0, [pc, #24]	; (8001a3c <SD_Check+0x54>)
 8001a22:	f008 f92f 	bl	8009c84 <puts>
}
 8001a26:	bf00      	nop
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200002c4 	.word	0x200002c4
 8001a34:	20000000 	.word	0x20000000
 8001a38:	0800c480 	.word	0x0800c480
 8001a3c:	0800c4a0 	.word	0x0800c4a0

08001a40 <csvHeader>:

int SD_Status() { return isSaving; }

void csvHeader(char* FileName, int lenF) {
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	466b      	mov	r3, sp
 8001a4c:	461d      	mov	r5, r3

	char name[lenF];
 8001a4e:	683c      	ldr	r4, [r7, #0]
 8001a50:	1e63      	subs	r3, r4, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	4623      	mov	r3, r4
 8001a56:	4618      	mov	r0, r3
 8001a58:	f04f 0100 	mov.w	r1, #0
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	00cb      	lsls	r3, r1, #3
 8001a66:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a6a:	00c2      	lsls	r2, r0, #3
 8001a6c:	4623      	mov	r3, r4
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f04f 0100 	mov.w	r1, #0
 8001a74:	f04f 0200 	mov.w	r2, #0
 8001a78:	f04f 0300 	mov.w	r3, #0
 8001a7c:	00cb      	lsls	r3, r1, #3
 8001a7e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001a82:	00c2      	lsls	r2, r0, #3
 8001a84:	4623      	mov	r3, r4
 8001a86:	3307      	adds	r3, #7
 8001a88:	08db      	lsrs	r3, r3, #3
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	ebad 0d03 	sub.w	sp, sp, r3
 8001a90:	466b      	mov	r3, sp
 8001a92:	3300      	adds	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
	strcpy(name, FileName);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f008 f95e 	bl	8009d5c <strcpy>

	fresult = Mount_SD("/");
 8001aa0:	4851      	ldr	r0, [pc, #324]	; (8001be8 <csvHeader+0x1a8>)
 8001aa2:	f7ff faaf 	bl	8001004 <Mount_SD>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4b50      	ldr	r3, [pc, #320]	; (8001bec <csvHeader+0x1ac>)
 8001aac:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 8001aae:	4b4f      	ldr	r3, [pc, #316]	; (8001bec <csvHeader+0x1ac>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	f7ff ff98 	bl	80019e8 <SD_Check>

	//CAN Bus
	sprintf(buffer, "Time, RPM, TPS (%%), Fuel Open Time (ms), Ignition Angle (Degrees),");
 8001ab8:	494d      	ldr	r1, [pc, #308]	; (8001bf0 <csvHeader+0x1b0>)
 8001aba:	484e      	ldr	r0, [pc, #312]	; (8001bf4 <csvHeader+0x1b4>)
 8001abc:	f008 f92e 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	494c      	ldr	r1, [pc, #304]	; (8001bf4 <csvHeader+0x1b4>)
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fc01 	bl	80012cc <Update_File>
	sprintf(buffer, "Barometer (PSI), MAP (PSI), Pressure Type,");
 8001aca:	494b      	ldr	r1, [pc, #300]	; (8001bf8 <csvHeader+0x1b8>)
 8001acc:	4849      	ldr	r0, [pc, #292]	; (8001bf4 <csvHeader+0x1b4>)
 8001ace:	f008 f925 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	4947      	ldr	r1, [pc, #284]	; (8001bf4 <csvHeader+0x1b4>)
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fbf8 	bl	80012cc <Update_File>
	sprintf(buffer, "Pre Radiator Air Temp (C), Post Radiator Air Temp (C),");
 8001adc:	4947      	ldr	r1, [pc, #284]	; (8001bfc <csvHeader+0x1bc>)
 8001ade:	4845      	ldr	r0, [pc, #276]	; (8001bf4 <csvHeader+0x1b4>)
 8001ae0:	f008 f91c 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4943      	ldr	r1, [pc, #268]	; (8001bf4 <csvHeader+0x1b4>)
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fbef 	bl	80012cc <Update_File>
	sprintf(buffer, "Labmda #1 (A/F R), Lambda #2 (A/F R),");
 8001aee:	4944      	ldr	r1, [pc, #272]	; (8001c00 <csvHeader+0x1c0>)
 8001af0:	4840      	ldr	r0, [pc, #256]	; (8001bf4 <csvHeader+0x1b4>)
 8001af2:	f008 f913 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	493e      	ldr	r1, [pc, #248]	; (8001bf4 <csvHeader+0x1b4>)
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff fbe6 	bl	80012cc <Update_File>
	sprintf(buffer, "Pre Radiator Coolant Temp (C), Post Radiator Coolant Temp (C),");
 8001b00:	4940      	ldr	r1, [pc, #256]	; (8001c04 <csvHeader+0x1c4>)
 8001b02:	483c      	ldr	r0, [pc, #240]	; (8001bf4 <csvHeader+0x1b4>)
 8001b04:	f008 f90a 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	493a      	ldr	r1, [pc, #232]	; (8001bf4 <csvHeader+0x1b4>)
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f7ff fbdd 	bl	80012cc <Update_File>
	sprintf(buffer, "Oil Pressure (PSI), Mass Air Flow Sensor (kg/s),");
 8001b12:	493d      	ldr	r1, [pc, #244]	; (8001c08 <csvHeader+0x1c8>)
 8001b14:	4837      	ldr	r0, [pc, #220]	; (8001bf4 <csvHeader+0x1b4>)
 8001b16:	f008 f901 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	4935      	ldr	r1, [pc, #212]	; (8001bf4 <csvHeader+0x1b4>)
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fbd4 	bl	80012cc <Update_File>
	sprintf(buffer, "FR Wheel Speed (mph), FL Wheel Speed (mph),");
 8001b24:	4939      	ldr	r1, [pc, #228]	; (8001c0c <csvHeader+0x1cc>)
 8001b26:	4833      	ldr	r0, [pc, #204]	; (8001bf4 <csvHeader+0x1b4>)
 8001b28:	f008 f8f8 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	4931      	ldr	r1, [pc, #196]	; (8001bf4 <csvHeader+0x1b4>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7ff fbcb 	bl	80012cc <Update_File>
	sprintf(buffer, "RR Wheel Speed (mph), RL Wheel Speed (mph),");
 8001b36:	4936      	ldr	r1, [pc, #216]	; (8001c10 <csvHeader+0x1d0>)
 8001b38:	482e      	ldr	r0, [pc, #184]	; (8001bf4 <csvHeader+0x1b4>)
 8001b3a:	f008 f8ef 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	492c      	ldr	r1, [pc, #176]	; (8001bf4 <csvHeader+0x1b4>)
 8001b42:	4618      	mov	r0, r3
 8001b44:	f7ff fbc2 	bl	80012cc <Update_File>
	sprintf(buffer, "Battery Voltage (V), Air Temp (C), Coolant Temp (C),");
 8001b48:	4932      	ldr	r1, [pc, #200]	; (8001c14 <csvHeader+0x1d4>)
 8001b4a:	482a      	ldr	r0, [pc, #168]	; (8001bf4 <csvHeader+0x1b4>)
 8001b4c:	f008 f8e6 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	4928      	ldr	r1, [pc, #160]	; (8001bf4 <csvHeader+0x1b4>)
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff fbb9 	bl	80012cc <Update_File>

	//GPS
	sprintf(buffer, "Day, Month, Year, Hour, Minute, Second, gSpeed,");
 8001b5a:	492f      	ldr	r1, [pc, #188]	; (8001c18 <csvHeader+0x1d8>)
 8001b5c:	4825      	ldr	r0, [pc, #148]	; (8001bf4 <csvHeader+0x1b4>)
 8001b5e:	f008 f8dd 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	4923      	ldr	r1, [pc, #140]	; (8001bf4 <csvHeader+0x1b4>)
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fbb0 	bl	80012cc <Update_File>
	sprintf(buffer, "Latitude, Longitude, Height Ellipsoid, Height Sea Level,");
 8001b6c:	492b      	ldr	r1, [pc, #172]	; (8001c1c <csvHeader+0x1dc>)
 8001b6e:	4821      	ldr	r0, [pc, #132]	; (8001bf4 <csvHeader+0x1b4>)
 8001b70:	f008 f8d4 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	491f      	ldr	r1, [pc, #124]	; (8001bf4 <csvHeader+0x1b4>)
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fba7 	bl	80012cc <Update_File>

	//ADC1
	sprintf(buffer, "FL Damper Sensor, FR Damper Sensor,");
 8001b7e:	4928      	ldr	r1, [pc, #160]	; (8001c20 <csvHeader+0x1e0>)
 8001b80:	481c      	ldr	r0, [pc, #112]	; (8001bf4 <csvHeader+0x1b4>)
 8001b82:	f008 f8cb 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	491a      	ldr	r1, [pc, #104]	; (8001bf4 <csvHeader+0x1b4>)
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f7ff fb9e 	bl	80012cc <Update_File>
	sprintf(buffer, "RL Damper Sensor, RR Damper Sensor,");
 8001b90:	4924      	ldr	r1, [pc, #144]	; (8001c24 <csvHeader+0x1e4>)
 8001b92:	4818      	ldr	r0, [pc, #96]	; (8001bf4 <csvHeader+0x1b4>)
 8001b94:	f008 f8c2 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	4916      	ldr	r1, [pc, #88]	; (8001bf4 <csvHeader+0x1b4>)
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff fb95 	bl	80012cc <Update_File>

	//ADC2
	sprintf(buffer, "Steering Sensor, Brake Sensor #1, Brake Sensor #2,");
 8001ba2:	4921      	ldr	r1, [pc, #132]	; (8001c28 <csvHeader+0x1e8>)
 8001ba4:	4813      	ldr	r0, [pc, #76]	; (8001bf4 <csvHeader+0x1b4>)
 8001ba6:	f008 f8b9 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	4911      	ldr	r1, [pc, #68]	; (8001bf4 <csvHeader+0x1b4>)
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff fb8c 	bl	80012cc <Update_File>

	//Ask about Unused #1 and #2

	//Accelerometer & Gyroscope
	sprintf(buffer, "X, Y, Z, Roll, Pitch, Yaw\n\n");
 8001bb4:	491d      	ldr	r1, [pc, #116]	; (8001c2c <csvHeader+0x1ec>)
 8001bb6:	480f      	ldr	r0, [pc, #60]	; (8001bf4 <csvHeader+0x1b4>)
 8001bb8:	f008 f8b0 	bl	8009d1c <siprintf>
	fresult = Update_File(name, buffer);
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	490d      	ldr	r1, [pc, #52]	; (8001bf4 <csvHeader+0x1b4>)
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fb83 	bl	80012cc <Update_File>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <csvHeader+0x1ac>)
 8001bcc:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <csvHeader+0x1ac>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff ff08 	bl	80019e8 <SD_Check>


	Unmount_SD("/");
 8001bd8:	4803      	ldr	r0, [pc, #12]	; (8001be8 <csvHeader+0x1a8>)
 8001bda:	f7ff fa3f 	bl	800105c <Unmount_SD>
 8001bde:	46ad      	mov	sp, r5
}
 8001be0:	bf00      	nop
 8001be2:	3710      	adds	r7, #16
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bdb0      	pop	{r4, r5, r7, pc}
 8001be8:	0800c414 	.word	0x0800c414
 8001bec:	2000066c 	.word	0x2000066c
 8001bf0:	0800c4c0 	.word	0x0800c4c0
 8001bf4:	200008e0 	.word	0x200008e0
 8001bf8:	0800c504 	.word	0x0800c504
 8001bfc:	0800c530 	.word	0x0800c530
 8001c00:	0800c568 	.word	0x0800c568
 8001c04:	0800c590 	.word	0x0800c590
 8001c08:	0800c5d0 	.word	0x0800c5d0
 8001c0c:	0800c604 	.word	0x0800c604
 8001c10:	0800c630 	.word	0x0800c630
 8001c14:	0800c65c 	.word	0x0800c65c
 8001c18:	0800c694 	.word	0x0800c694
 8001c1c:	0800c6c4 	.word	0x0800c6c4
 8001c20:	0800c700 	.word	0x0800c700
 8001c24:	0800c724 	.word	0x0800c724
 8001c28:	0800c748 	.word	0x0800c748
 8001c2c:	0800c77c 	.word	0x0800c77c

08001c30 <csvUpdate>:

void csvUpdate(char* FileName, int lenF) {
 8001c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c34:	b097      	sub	sp, #92	; 0x5c
 8001c36:	af0e      	add	r7, sp, #56	; 0x38
 8001c38:	6178      	str	r0, [r7, #20]
 8001c3a:	6139      	str	r1, [r7, #16]
 8001c3c:	466b      	mov	r3, sp
 8001c3e:	60fb      	str	r3, [r7, #12]

	char name[lenF];
 8001c40:	693c      	ldr	r4, [r7, #16]
 8001c42:	1e63      	subs	r3, r4, #1
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	4623      	mov	r3, r4
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f04f 0100 	mov.w	r1, #0
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	00cb      	lsls	r3, r1, #3
 8001c58:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c5c:	00c2      	lsls	r2, r0, #3
 8001c5e:	4623      	mov	r3, r4
 8001c60:	4618      	mov	r0, r3
 8001c62:	f04f 0100 	mov.w	r1, #0
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	00cb      	lsls	r3, r1, #3
 8001c70:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001c74:	00c2      	lsls	r2, r0, #3
 8001c76:	4623      	mov	r3, r4
 8001c78:	3307      	adds	r3, #7
 8001c7a:	08db      	lsrs	r3, r3, #3
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	ebad 0d03 	sub.w	sp, sp, r3
 8001c82:	ab0e      	add	r3, sp, #56	; 0x38
 8001c84:	3300      	adds	r3, #0
 8001c86:	61bb      	str	r3, [r7, #24]
	strcpy(name, FileName);
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6979      	ldr	r1, [r7, #20]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f008 f865 	bl	8009d5c <strcpy>

	fresult = Mount_SD("/");
 8001c92:	4897      	ldr	r0, [pc, #604]	; (8001ef0 <csvUpdate+0x2c0>)
 8001c94:	f7ff f9b6 	bl	8001004 <Mount_SD>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b95      	ldr	r3, [pc, #596]	; (8001ef4 <csvUpdate+0x2c4>)
 8001c9e:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 8001ca0:	4b94      	ldr	r3, [pc, #592]	; (8001ef4 <csvUpdate+0x2c4>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fe9f 	bl	80019e8 <SD_Check>


	sprintf(buffer, "%d,%hu,%f,%f,%f,", indx, RPM, TPS, fuelOpenTime, ignitionAngle);
 8001caa:	4b93      	ldr	r3, [pc, #588]	; (8001ef8 <csvUpdate+0x2c8>)
 8001cac:	681e      	ldr	r6, [r3, #0]
 8001cae:	4b93      	ldr	r3, [pc, #588]	; (8001efc <csvUpdate+0x2cc>)
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	603a      	str	r2, [r7, #0]
 8001cb4:	4b92      	ldr	r3, [pc, #584]	; (8001f00 <csvUpdate+0x2d0>)
 8001cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cba:	4992      	ldr	r1, [pc, #584]	; (8001f04 <csvUpdate+0x2d4>)
 8001cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cc0:	4c91      	ldr	r4, [pc, #580]	; (8001f08 <csvUpdate+0x2d8>)
 8001cc2:	e9d4 4500 	ldrd	r4, r5, [r4]
 8001cc6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001cca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001cce:	e9cd 2300 	strd	r2, r3, [sp]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	4632      	mov	r2, r6
 8001cd6:	498d      	ldr	r1, [pc, #564]	; (8001f0c <csvUpdate+0x2dc>)
 8001cd8:	488d      	ldr	r0, [pc, #564]	; (8001f10 <csvUpdate+0x2e0>)
 8001cda:	f008 f81f 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	498b      	ldr	r1, [pc, #556]	; (8001f10 <csvUpdate+0x2e0>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff faf2 	bl	80012cc <Update_File>
	sprintf(buffer, "%f,%f,%i,", barometer, MAP, pressureType);
 8001ce8:	4b8a      	ldr	r3, [pc, #552]	; (8001f14 <csvUpdate+0x2e4>)
 8001cea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cee:	4b8a      	ldr	r3, [pc, #552]	; (8001f18 <csvUpdate+0x2e8>)
 8001cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cf4:	4c89      	ldr	r4, [pc, #548]	; (8001f1c <csvUpdate+0x2ec>)
 8001cf6:	6824      	ldr	r4, [r4, #0]
 8001cf8:	9402      	str	r4, [sp, #8]
 8001cfa:	e9cd 2300 	strd	r2, r3, [sp]
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4987      	ldr	r1, [pc, #540]	; (8001f20 <csvUpdate+0x2f0>)
 8001d04:	4882      	ldr	r0, [pc, #520]	; (8001f10 <csvUpdate+0x2e0>)
 8001d06:	f008 f809 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	4980      	ldr	r1, [pc, #512]	; (8001f10 <csvUpdate+0x2e0>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fadc 	bl	80012cc <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,%f,%f,%f,%f,", AnIn1, AnIn2, AnIn3, AnIn4, AnIn5, AnIn6, AnIn7, AnIn8);
 8001d14:	4b83      	ldr	r3, [pc, #524]	; (8001f24 <csvUpdate+0x2f4>)
 8001d16:	ed93 7b00 	vldr	d7, [r3]
 8001d1a:	ed87 7b00 	vstr	d7, [r7]
 8001d1e:	4b82      	ldr	r3, [pc, #520]	; (8001f28 <csvUpdate+0x2f8>)
 8001d20:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001d24:	4b81      	ldr	r3, [pc, #516]	; (8001f2c <csvUpdate+0x2fc>)
 8001d26:	e9d3 8900 	ldrd	r8, r9, [r3]
 8001d2a:	4b81      	ldr	r3, [pc, #516]	; (8001f30 <csvUpdate+0x300>)
 8001d2c:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001d30:	4b80      	ldr	r3, [pc, #512]	; (8001f34 <csvUpdate+0x304>)
 8001d32:	ed93 7b00 	vldr	d7, [r3]
 8001d36:	4b80      	ldr	r3, [pc, #512]	; (8001f38 <csvUpdate+0x308>)
 8001d38:	ed93 6b00 	vldr	d6, [r3]
 8001d3c:	4b7f      	ldr	r3, [pc, #508]	; (8001f3c <csvUpdate+0x30c>)
 8001d3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d42:	4b7f      	ldr	r3, [pc, #508]	; (8001f40 <csvUpdate+0x310>)
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001d4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001d50:	ed8d 6b08 	vstr	d6, [sp, #32]
 8001d54:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001d58:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8001d5c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d60:	e9cd 4500 	strd	r4, r5, [sp]
 8001d64:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d68:	4976      	ldr	r1, [pc, #472]	; (8001f44 <csvUpdate+0x314>)
 8001d6a:	4869      	ldr	r0, [pc, #420]	; (8001f10 <csvUpdate+0x2e0>)
 8001d6c:	f007 ffd6 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	4967      	ldr	r1, [pc, #412]	; (8001f10 <csvUpdate+0x2e0>)
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff faa9 	bl	80012cc <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,%f,", freq1, freq2, freq3, freq4, batteryVoltage);
 8001d7a:	4b73      	ldr	r3, [pc, #460]	; (8001f48 <csvUpdate+0x318>)
 8001d7c:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001d80:	4b72      	ldr	r3, [pc, #456]	; (8001f4c <csvUpdate+0x31c>)
 8001d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d86:	4972      	ldr	r1, [pc, #456]	; (8001f50 <csvUpdate+0x320>)
 8001d88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d8c:	4c71      	ldr	r4, [pc, #452]	; (8001f54 <csvUpdate+0x324>)
 8001d8e:	e9d4 4500 	ldrd	r4, r5, [r4]
 8001d92:	4e71      	ldr	r6, [pc, #452]	; (8001f58 <csvUpdate+0x328>)
 8001d94:	e9d6 8900 	ldrd	r8, r9, [r6]
 8001d98:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001d9c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001da0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001da4:	e9cd 2300 	strd	r2, r3, [sp]
 8001da8:	4652      	mov	r2, sl
 8001daa:	465b      	mov	r3, fp
 8001dac:	496b      	ldr	r1, [pc, #428]	; (8001f5c <csvUpdate+0x32c>)
 8001dae:	4858      	ldr	r0, [pc, #352]	; (8001f10 <csvUpdate+0x2e0>)
 8001db0:	f007 ffb4 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001db4:	69bb      	ldr	r3, [r7, #24]
 8001db6:	4956      	ldr	r1, [pc, #344]	; (8001f10 <csvUpdate+0x2e0>)
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff fa87 	bl	80012cc <Update_File>
	sprintf(buffer, "%f,%f,", airTemp, coolantTemp);
 8001dbe:	4b68      	ldr	r3, [pc, #416]	; (8001f60 <csvUpdate+0x330>)
 8001dc0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dc4:	4b67      	ldr	r3, [pc, #412]	; (8001f64 <csvUpdate+0x334>)
 8001dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dca:	e9cd 2300 	strd	r2, r3, [sp]
 8001dce:	4602      	mov	r2, r0
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	4965      	ldr	r1, [pc, #404]	; (8001f68 <csvUpdate+0x338>)
 8001dd4:	484e      	ldr	r0, [pc, #312]	; (8001f10 <csvUpdate+0x2e0>)
 8001dd6:	f007 ffa1 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	494c      	ldr	r1, [pc, #304]	; (8001f10 <csvUpdate+0x2e0>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fa74 	bl	80012cc <Update_File>

	sprintf(buffer, "%d,%d,%d,%d,%d,%d,%d,", day, month, year, hour, minute, second, gSpeed);
 8001de4:	4b61      	ldr	r3, [pc, #388]	; (8001f6c <csvUpdate+0x33c>)
 8001de6:	681d      	ldr	r5, [r3, #0]
 8001de8:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <csvUpdate+0x340>)
 8001dea:	681e      	ldr	r6, [r3, #0]
 8001dec:	4b61      	ldr	r3, [pc, #388]	; (8001f74 <csvUpdate+0x344>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a61      	ldr	r2, [pc, #388]	; (8001f78 <csvUpdate+0x348>)
 8001df2:	6812      	ldr	r2, [r2, #0]
 8001df4:	4961      	ldr	r1, [pc, #388]	; (8001f7c <csvUpdate+0x34c>)
 8001df6:	6809      	ldr	r1, [r1, #0]
 8001df8:	4861      	ldr	r0, [pc, #388]	; (8001f80 <csvUpdate+0x350>)
 8001dfa:	6800      	ldr	r0, [r0, #0]
 8001dfc:	4c61      	ldr	r4, [pc, #388]	; (8001f84 <csvUpdate+0x354>)
 8001dfe:	6824      	ldr	r4, [r4, #0]
 8001e00:	9404      	str	r4, [sp, #16]
 8001e02:	9003      	str	r0, [sp, #12]
 8001e04:	9102      	str	r1, [sp, #8]
 8001e06:	9201      	str	r2, [sp, #4]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	4633      	mov	r3, r6
 8001e0c:	462a      	mov	r2, r5
 8001e0e:	495e      	ldr	r1, [pc, #376]	; (8001f88 <csvUpdate+0x358>)
 8001e10:	483f      	ldr	r0, [pc, #252]	; (8001f10 <csvUpdate+0x2e0>)
 8001e12:	f007 ff83 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	493d      	ldr	r1, [pc, #244]	; (8001f10 <csvUpdate+0x2e0>)
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fa56 	bl	80012cc <Update_File>
	sprintf(buffer, "%f,%f,%f,%f,", latitude, longitude, height_Ellipsoid, height_SeaLvl);
 8001e20:	4b5a      	ldr	r3, [pc, #360]	; (8001f8c <csvUpdate+0x35c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fbbf 	bl	80005a8 <__aeabi_f2d>
 8001e2a:	4682      	mov	sl, r0
 8001e2c:	468b      	mov	fp, r1
 8001e2e:	4b58      	ldr	r3, [pc, #352]	; (8001f90 <csvUpdate+0x360>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fbb8 	bl	80005a8 <__aeabi_f2d>
 8001e38:	4604      	mov	r4, r0
 8001e3a:	460d      	mov	r5, r1
 8001e3c:	4b55      	ldr	r3, [pc, #340]	; (8001f94 <csvUpdate+0x364>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fbb1 	bl	80005a8 <__aeabi_f2d>
 8001e46:	4680      	mov	r8, r0
 8001e48:	4689      	mov	r9, r1
 8001e4a:	4b53      	ldr	r3, [pc, #332]	; (8001f98 <csvUpdate+0x368>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fbaa 	bl	80005a8 <__aeabi_f2d>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001e5c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001e60:	e9cd 4500 	strd	r4, r5, [sp]
 8001e64:	4652      	mov	r2, sl
 8001e66:	465b      	mov	r3, fp
 8001e68:	494c      	ldr	r1, [pc, #304]	; (8001f9c <csvUpdate+0x36c>)
 8001e6a:	4829      	ldr	r0, [pc, #164]	; (8001f10 <csvUpdate+0x2e0>)
 8001e6c:	f007 ff56 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	4927      	ldr	r1, [pc, #156]	; (8001f10 <csvUpdate+0x2e0>)
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff fa29 	bl	80012cc <Update_File>

	sprintf(buffer, "%d,%d,%d,%d,", damperT_Sense_FL, damperT_Sense_FR, damperT_Sense_RL, damperT_Sense_RR);
 8001e7a:	4b49      	ldr	r3, [pc, #292]	; (8001fa0 <csvUpdate+0x370>)
 8001e7c:	6819      	ldr	r1, [r3, #0]
 8001e7e:	4b49      	ldr	r3, [pc, #292]	; (8001fa4 <csvUpdate+0x374>)
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	4b49      	ldr	r3, [pc, #292]	; (8001fa8 <csvUpdate+0x378>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a49      	ldr	r2, [pc, #292]	; (8001fac <csvUpdate+0x37c>)
 8001e88:	6812      	ldr	r2, [r2, #0]
 8001e8a:	9201      	str	r2, [sp, #4]
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	4603      	mov	r3, r0
 8001e90:	460a      	mov	r2, r1
 8001e92:	4947      	ldr	r1, [pc, #284]	; (8001fb0 <csvUpdate+0x380>)
 8001e94:	481e      	ldr	r0, [pc, #120]	; (8001f10 <csvUpdate+0x2e0>)
 8001e96:	f007 ff41 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	491c      	ldr	r1, [pc, #112]	; (8001f10 <csvUpdate+0x2e0>)
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fa14 	bl	80012cc <Update_File>

	sprintf(buffer, "%d,%d,%d,", steeringA_Sense, brakeP_Sense1, brakeP_Sense2);
 8001ea4:	4b43      	ldr	r3, [pc, #268]	; (8001fb4 <csvUpdate+0x384>)
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	4b43      	ldr	r3, [pc, #268]	; (8001fb8 <csvUpdate+0x388>)
 8001eaa:	6819      	ldr	r1, [r3, #0]
 8001eac:	4b43      	ldr	r3, [pc, #268]	; (8001fbc <csvUpdate+0x38c>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	4942      	ldr	r1, [pc, #264]	; (8001fc0 <csvUpdate+0x390>)
 8001eb6:	4816      	ldr	r0, [pc, #88]	; (8001f10 <csvUpdate+0x2e0>)
 8001eb8:	f007 ff30 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001ebc:	69bb      	ldr	r3, [r7, #24]
 8001ebe:	4914      	ldr	r1, [pc, #80]	; (8001f10 <csvUpdate+0x2e0>)
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fa03 	bl	80012cc <Update_File>

	sprintf(buffer, "%f,%f,%f,%f,%f,%f", x_LS, y_LS, z_LS, roll_LS, pitch_LS, yaw_LS);
 8001ec6:	4b3f      	ldr	r3, [pc, #252]	; (8001fc4 <csvUpdate+0x394>)
 8001ec8:	ed93 7b00 	vldr	d7, [r3]
 8001ecc:	ed87 7b00 	vstr	d7, [r7]
 8001ed0:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <csvUpdate+0x398>)
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	493d      	ldr	r1, [pc, #244]	; (8001fcc <csvUpdate+0x39c>)
 8001ed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001edc:	4c3c      	ldr	r4, [pc, #240]	; (8001fd0 <csvUpdate+0x3a0>)
 8001ede:	e9d4 4500 	ldrd	r4, r5, [r4]
 8001ee2:	4e3c      	ldr	r6, [pc, #240]	; (8001fd4 <csvUpdate+0x3a4>)
 8001ee4:	e9d6 8900 	ldrd	r8, r9, [r6]
 8001ee8:	4e3b      	ldr	r6, [pc, #236]	; (8001fd8 <csvUpdate+0x3a8>)
 8001eea:	e9d6 ab00 	ldrd	sl, fp, [r6]
 8001eee:	e075      	b.n	8001fdc <csvUpdate+0x3ac>
 8001ef0:	0800c414 	.word	0x0800c414
 8001ef4:	2000066c 	.word	0x2000066c
 8001ef8:	200002c8 	.word	0x200002c8
 8001efc:	200001fc 	.word	0x200001fc
 8001f00:	20000200 	.word	0x20000200
 8001f04:	20000208 	.word	0x20000208
 8001f08:	20000210 	.word	0x20000210
 8001f0c:	0800c798 	.word	0x0800c798
 8001f10:	200008e0 	.word	0x200008e0
 8001f14:	20000218 	.word	0x20000218
 8001f18:	20000220 	.word	0x20000220
 8001f1c:	20000228 	.word	0x20000228
 8001f20:	0800c7ac 	.word	0x0800c7ac
 8001f24:	20000230 	.word	0x20000230
 8001f28:	20000238 	.word	0x20000238
 8001f2c:	20000240 	.word	0x20000240
 8001f30:	20000248 	.word	0x20000248
 8001f34:	20000250 	.word	0x20000250
 8001f38:	20000258 	.word	0x20000258
 8001f3c:	20000260 	.word	0x20000260
 8001f40:	20000268 	.word	0x20000268
 8001f44:	0800c7b8 	.word	0x0800c7b8
 8001f48:	20000270 	.word	0x20000270
 8001f4c:	20000278 	.word	0x20000278
 8001f50:	20000280 	.word	0x20000280
 8001f54:	20000288 	.word	0x20000288
 8001f58:	20000290 	.word	0x20000290
 8001f5c:	0800c7d4 	.word	0x0800c7d4
 8001f60:	20000298 	.word	0x20000298
 8001f64:	200002a0 	.word	0x200002a0
 8001f68:	0800c7e4 	.word	0x0800c7e4
 8001f6c:	20000a20 	.word	0x20000a20
 8001f70:	200008d0 	.word	0x200008d0
 8001f74:	20000a14 	.word	0x20000a14
 8001f78:	2000096c 	.word	0x2000096c
 8001f7c:	200008dc 	.word	0x200008dc
 8001f80:	200008d4 	.word	0x200008d4
 8001f84:	200008d8 	.word	0x200008d8
 8001f88:	0800c7ec 	.word	0x0800c7ec
 8001f8c:	20000a1c 	.word	0x20000a1c
 8001f90:	20000970 	.word	0x20000970
 8001f94:	200008b4 	.word	0x200008b4
 8001f98:	20000944 	.word	0x20000944
 8001f9c:	0800c804 	.word	0x0800c804
 8001fa0:	200002a8 	.word	0x200002a8
 8001fa4:	200002ac 	.word	0x200002ac
 8001fa8:	200002b0 	.word	0x200002b0
 8001fac:	200002b4 	.word	0x200002b4
 8001fb0:	0800c814 	.word	0x0800c814
 8001fb4:	200002b8 	.word	0x200002b8
 8001fb8:	200002bc 	.word	0x200002bc
 8001fbc:	200002c0 	.word	0x200002c0
 8001fc0:	0800c824 	.word	0x0800c824
 8001fc4:	20000978 	.word	0x20000978
 8001fc8:	20000a08 	.word	0x20000a08
 8001fcc:	200008a8 	.word	0x200008a8
 8001fd0:	20000a28 	.word	0x20000a28
 8001fd4:	20000948 	.word	0x20000948
 8001fd8:	20000960 	.word	0x20000960
 8001fdc:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8001fe0:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001fe4:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8001fe8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001fec:	e9cd 2300 	strd	r2, r3, [sp]
 8001ff0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001ff4:	4912      	ldr	r1, [pc, #72]	; (8002040 <csvUpdate+0x410>)
 8001ff6:	4813      	ldr	r0, [pc, #76]	; (8002044 <csvUpdate+0x414>)
 8001ff8:	f007 fe90 	bl	8009d1c <siprintf>
	Update_File(name, buffer);
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	4911      	ldr	r1, [pc, #68]	; (8002044 <csvUpdate+0x414>)
 8002000:	4618      	mov	r0, r3
 8002002:	f7ff f963 	bl	80012cc <Update_File>

	sprintf(buffer, "\n\n");
 8002006:	4910      	ldr	r1, [pc, #64]	; (8002048 <csvUpdate+0x418>)
 8002008:	480e      	ldr	r0, [pc, #56]	; (8002044 <csvUpdate+0x414>)
 800200a:	f007 fe87 	bl	8009d1c <siprintf>
	fresult = Update_File(name, buffer);
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	490c      	ldr	r1, [pc, #48]	; (8002044 <csvUpdate+0x414>)
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff f95a 	bl	80012cc <Update_File>
 8002018:	4603      	mov	r3, r0
 800201a:	461a      	mov	r2, r3
 800201c:	4b0b      	ldr	r3, [pc, #44]	; (800204c <csvUpdate+0x41c>)
 800201e:	701a      	strb	r2, [r3, #0]
	SD_Check(fresult);
 8002020:	4b0a      	ldr	r3, [pc, #40]	; (800204c <csvUpdate+0x41c>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fcdf 	bl	80019e8 <SD_Check>


	Unmount_SD("/");
 800202a:	4809      	ldr	r0, [pc, #36]	; (8002050 <csvUpdate+0x420>)
 800202c:	f7ff f816 	bl	800105c <Unmount_SD>
 8002030:	f8d7 d00c 	ldr.w	sp, [r7, #12]
}
 8002034:	bf00      	nop
 8002036:	3724      	adds	r7, #36	; 0x24
 8002038:	46bd      	mov	sp, r7
 800203a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800203e:	bf00      	nop
 8002040:	0800c830 	.word	0x0800c830
 8002044:	200008e0 	.word	0x200008e0
 8002048:	0800c844 	.word	0x0800c844
 800204c:	2000066c 	.word	0x2000066c
 8002050:	0800c414 	.word	0x0800c414

08002054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
	...

08002064 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	607b      	str	r3, [r7, #4]
 800206e:	4b10      	ldr	r3, [pc, #64]	; (80020b0 <HAL_MspInit+0x4c>)
 8002070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002072:	4a0f      	ldr	r2, [pc, #60]	; (80020b0 <HAL_MspInit+0x4c>)
 8002074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002078:	6453      	str	r3, [r2, #68]	; 0x44
 800207a:	4b0d      	ldr	r3, [pc, #52]	; (80020b0 <HAL_MspInit+0x4c>)
 800207c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002086:	2300      	movs	r3, #0
 8002088:	603b      	str	r3, [r7, #0]
 800208a:	4b09      	ldr	r3, [pc, #36]	; (80020b0 <HAL_MspInit+0x4c>)
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	4a08      	ldr	r2, [pc, #32]	; (80020b0 <HAL_MspInit+0x4c>)
 8002090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002094:	6413      	str	r3, [r2, #64]	; 0x40
 8002096:	4b06      	ldr	r3, [pc, #24]	; (80020b0 <HAL_MspInit+0x4c>)
 8002098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209e:	603b      	str	r3, [r7, #0]
 80020a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80020a2:	2007      	movs	r0, #7
 80020a4:	f000 face 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a8:	bf00      	nop
 80020aa:	3708      	adds	r7, #8
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40023800 	.word	0x40023800

080020b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	; 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a28      	ldr	r2, [pc, #160]	; (8002174 <HAL_SD_MspInit+0xc0>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d14a      	bne.n	800216c <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b27      	ldr	r3, [pc, #156]	; (8002178 <HAL_SD_MspInit+0xc4>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	4a26      	ldr	r2, [pc, #152]	; (8002178 <HAL_SD_MspInit+0xc4>)
 80020e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020e4:	6453      	str	r3, [r2, #68]	; 0x44
 80020e6:	4b24      	ldr	r3, [pc, #144]	; (8002178 <HAL_SD_MspInit+0xc4>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_SD_MspInit+0xc4>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a1f      	ldr	r2, [pc, #124]	; (8002178 <HAL_SD_MspInit+0xc4>)
 80020fc:	f043 0304 	orr.w	r3, r3, #4
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b1d      	ldr	r3, [pc, #116]	; (8002178 <HAL_SD_MspInit+0xc4>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0304 	and.w	r3, r3, #4
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b19      	ldr	r3, [pc, #100]	; (8002178 <HAL_SD_MspInit+0xc4>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002116:	4a18      	ldr	r2, [pc, #96]	; (8002178 <HAL_SD_MspInit+0xc4>)
 8002118:	f043 0308 	orr.w	r3, r3, #8
 800211c:	6313      	str	r3, [r2, #48]	; 0x30
 800211e:	4b16      	ldr	r3, [pc, #88]	; (8002178 <HAL_SD_MspInit+0xc4>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	f003 0308 	and.w	r3, r3, #8
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800212a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800212e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002138:	2303      	movs	r3, #3
 800213a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800213c:	230c      	movs	r3, #12
 800213e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002140:	f107 0314 	add.w	r3, r7, #20
 8002144:	4619      	mov	r1, r3
 8002146:	480d      	ldr	r0, [pc, #52]	; (800217c <HAL_SD_MspInit+0xc8>)
 8002148:	f000 fab0 	bl	80026ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800214c:	2304      	movs	r3, #4
 800214e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002150:	2302      	movs	r3, #2
 8002152:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002154:	2300      	movs	r3, #0
 8002156:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002158:	2303      	movs	r3, #3
 800215a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 800215c:	230c      	movs	r3, #12
 800215e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002160:	f107 0314 	add.w	r3, r7, #20
 8002164:	4619      	mov	r1, r3
 8002166:	4806      	ldr	r0, [pc, #24]	; (8002180 <HAL_SD_MspInit+0xcc>)
 8002168:	f000 faa0 	bl	80026ac <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 800216c:	bf00      	nop
 800216e:	3728      	adds	r7, #40	; 0x28
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	40012c00 	.word	0x40012c00
 8002178:	40023800 	.word	0x40023800
 800217c:	40020800 	.word	0x40020800
 8002180:	40020c00 	.word	0x40020c00

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002188:	bf00      	nop
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002192:	b480      	push	{r7}
 8002194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002196:	e7fe      	b.n	8002196 <HardFault_Handler+0x4>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219c:	e7fe      	b.n	800219c <MemManage_Handler+0x4>

0800219e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800219e:	b480      	push	{r7}
 80021a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a2:	e7fe      	b.n	80021a2 <BusFault_Handler+0x4>

080021a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <UsageFault_Handler+0x4>

080021aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021aa:	b480      	push	{r7}
 80021ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c6:	b480      	push	{r7}
 80021c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ca:	bf00      	nop
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d8:	f000 f93e 	bl	8002458 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
	return 1;
 80021e4:	2301      	movs	r3, #1
}
 80021e6:	4618      	mov	r0, r3
 80021e8:	46bd      	mov	sp, r7
 80021ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ee:	4770      	bx	lr

080021f0 <_kill>:

int _kill(int pid, int sig)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021fa:	f006 ff67 	bl	80090cc <__errno>
 80021fe:	4603      	mov	r3, r0
 8002200:	2216      	movs	r2, #22
 8002202:	601a      	str	r2, [r3, #0]
	return -1;
 8002204:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002208:	4618      	mov	r0, r3
 800220a:	3708      	adds	r7, #8
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}

08002210 <_exit>:

void _exit (int status)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ffe7 	bl	80021f0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002222:	e7fe      	b.n	8002222 <_exit+0x12>

08002224 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b086      	sub	sp, #24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]
 8002234:	e00a      	b.n	800224c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002236:	f3af 8000 	nop.w
 800223a:	4601      	mov	r1, r0
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	60ba      	str	r2, [r7, #8]
 8002242:	b2ca      	uxtb	r2, r1
 8002244:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	dbf0      	blt.n	8002236 <_read+0x12>
	}

return len;
 8002254:	687b      	ldr	r3, [r7, #4]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_close>:
	}
	return len;
}

int _close(int file)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
	return -1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002286:	605a      	str	r2, [r3, #4]
	return 0;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <_isatty>:

int _isatty(int file)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
	return 1;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
	return 0;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d0:	4a14      	ldr	r2, [pc, #80]	; (8002324 <_sbrk+0x5c>)
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <_sbrk+0x60>)
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <_sbrk+0x64>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <_sbrk+0x64>)
 80022e6:	4a12      	ldr	r2, [pc, #72]	; (8002330 <_sbrk+0x68>)
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d207      	bcs.n	8002308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f8:	f006 fee8 	bl	80090cc <__errno>
 80022fc:	4603      	mov	r3, r0
 80022fe:	220c      	movs	r2, #12
 8002300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
 8002306:	e009      	b.n	800231c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <_sbrk+0x64>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	4a05      	ldr	r2, [pc, #20]	; (800232c <_sbrk+0x64>)
 8002318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800231a:	68fb      	ldr	r3, [r7, #12]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20020000 	.word	0x20020000
 8002328:	00000400 	.word	0x00000400
 800232c:	200002cc 	.word	0x200002cc
 8002330:	20000ee0 	.word	0x20000ee0

08002334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002338:	4b08      	ldr	r3, [pc, #32]	; (800235c <SystemInit+0x28>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	4a07      	ldr	r2, [pc, #28]	; (800235c <SystemInit+0x28>)
 8002340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <SystemInit+0x28>)
 800234a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800234e:	609a      	str	r2, [r3, #8]
#endif
}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	e000ed00 	.word	0xe000ed00

08002360 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002360:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002398 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002364:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002366:	e003      	b.n	8002370 <LoopCopyDataInit>

08002368 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800236a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800236c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800236e:	3104      	adds	r1, #4

08002370 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002370:	480b      	ldr	r0, [pc, #44]	; (80023a0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002372:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002374:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002376:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002378:	d3f6      	bcc.n	8002368 <CopyDataInit>
  ldr  r2, =_sbss
 800237a:	4a0b      	ldr	r2, [pc, #44]	; (80023a8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800237c:	e002      	b.n	8002384 <LoopFillZerobss>

0800237e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800237e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002380:	f842 3b04 	str.w	r3, [r2], #4

08002384 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002386:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002388:	d3f9      	bcc.n	800237e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800238a:	f7ff ffd3 	bl	8002334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800238e:	f006 fea3 	bl	80090d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002392:	f7ff f8b7 	bl	8001504 <main>
  bx  lr    
 8002396:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002398:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800239c:	080140ac 	.word	0x080140ac
  ldr  r0, =_sdata
 80023a0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023a4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80023a8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80023ac:	20000ee0 	.word	0x20000ee0

080023b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b0:	e7fe      	b.n	80023b0 <ADC_IRQHandler>
	...

080023b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023b8:	4b0e      	ldr	r3, [pc, #56]	; (80023f4 <HAL_Init+0x40>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a0d      	ldr	r2, [pc, #52]	; (80023f4 <HAL_Init+0x40>)
 80023be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_Init+0x40>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a0a      	ldr	r2, [pc, #40]	; (80023f4 <HAL_Init+0x40>)
 80023ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80023d0:	4b08      	ldr	r3, [pc, #32]	; (80023f4 <HAL_Init+0x40>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a07      	ldr	r2, [pc, #28]	; (80023f4 <HAL_Init+0x40>)
 80023d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023dc:	2003      	movs	r0, #3
 80023de:	f000 f931 	bl	8002644 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80023e2:	2000      	movs	r0, #0
 80023e4:	f000 f808 	bl	80023f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80023e8:	f7ff fe3c 	bl	8002064 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	40023c00 	.word	0x40023c00

080023f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002400:	4b12      	ldr	r3, [pc, #72]	; (800244c <HAL_InitTick+0x54>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b12      	ldr	r3, [pc, #72]	; (8002450 <HAL_InitTick+0x58>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4619      	mov	r1, r3
 800240a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800240e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002412:	fbb2 f3f3 	udiv	r3, r2, r3
 8002416:	4618      	mov	r0, r3
 8002418:	f000 f93b 	bl	8002692 <HAL_SYSTICK_Config>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e00e      	b.n	8002444 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b0f      	cmp	r3, #15
 800242a:	d80a      	bhi.n	8002442 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800242c:	2200      	movs	r2, #0
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	f04f 30ff 	mov.w	r0, #4294967295
 8002434:	f000 f911 	bl	800265a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002438:	4a06      	ldr	r2, [pc, #24]	; (8002454 <HAL_InitTick+0x5c>)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
 8002440:	e000      	b.n	8002444 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
}
 8002444:	4618      	mov	r0, r3
 8002446:	3708      	adds	r7, #8
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000004 	.word	0x20000004
 8002450:	2000000c 	.word	0x2000000c
 8002454:	20000008 	.word	0x20000008

08002458 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <HAL_IncTick+0x20>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	461a      	mov	r2, r3
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_IncTick+0x24>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4413      	add	r3, r2
 8002468:	4a04      	ldr	r2, [pc, #16]	; (800247c <HAL_IncTick+0x24>)
 800246a:	6013      	str	r3, [r2, #0]
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	2000000c 	.word	0x2000000c
 800247c:	20000a60 	.word	0x20000a60

08002480 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  return uwTick;
 8002484:	4b03      	ldr	r3, [pc, #12]	; (8002494 <HAL_GetTick+0x14>)
 8002486:	681b      	ldr	r3, [r3, #0]
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	20000a60 	.word	0x20000a60

08002498 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024a0:	f7ff ffee 	bl	8002480 <HAL_GetTick>
 80024a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b0:	d005      	beq.n	80024be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024b2:	4b0a      	ldr	r3, [pc, #40]	; (80024dc <HAL_Delay+0x44>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80024be:	bf00      	nop
 80024c0:	f7ff ffde 	bl	8002480 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d8f7      	bhi.n	80024c0 <HAL_Delay+0x28>
  {
  }
}
 80024d0:	bf00      	nop
 80024d2:	bf00      	nop
 80024d4:	3710      	adds	r7, #16
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	2000000c 	.word	0x2000000c

080024e0 <__NVIC_SetPriorityGrouping>:
{
 80024e0:	b480      	push	{r7}
 80024e2:	b085      	sub	sp, #20
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024fc:	4013      	ands	r3, r2
 80024fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800250c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002512:	4a04      	ldr	r2, [pc, #16]	; (8002524 <__NVIC_SetPriorityGrouping+0x44>)
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	60d3      	str	r3, [r2, #12]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	e000ed00 	.word	0xe000ed00

08002528 <__NVIC_GetPriorityGrouping>:
{
 8002528:	b480      	push	{r7}
 800252a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800252c:	4b04      	ldr	r3, [pc, #16]	; (8002540 <__NVIC_GetPriorityGrouping+0x18>)
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 0307 	and.w	r3, r3, #7
}
 8002536:	4618      	mov	r0, r3
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_SetPriority>:
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	4603      	mov	r3, r0
 800254c:	6039      	str	r1, [r7, #0]
 800254e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002554:	2b00      	cmp	r3, #0
 8002556:	db0a      	blt.n	800256e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	b2da      	uxtb	r2, r3
 800255c:	490c      	ldr	r1, [pc, #48]	; (8002590 <__NVIC_SetPriority+0x4c>)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	0112      	lsls	r2, r2, #4
 8002564:	b2d2      	uxtb	r2, r2
 8002566:	440b      	add	r3, r1
 8002568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800256c:	e00a      	b.n	8002584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	b2da      	uxtb	r2, r3
 8002572:	4908      	ldr	r1, [pc, #32]	; (8002594 <__NVIC_SetPriority+0x50>)
 8002574:	79fb      	ldrb	r3, [r7, #7]
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	3b04      	subs	r3, #4
 800257c:	0112      	lsls	r2, r2, #4
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	440b      	add	r3, r1
 8002582:	761a      	strb	r2, [r3, #24]
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000e100 	.word	0xe000e100
 8002594:	e000ed00 	.word	0xe000ed00

08002598 <NVIC_EncodePriority>:
{
 8002598:	b480      	push	{r7}
 800259a:	b089      	sub	sp, #36	; 0x24
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 0307 	and.w	r3, r3, #7
 80025aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	f1c3 0307 	rsb	r3, r3, #7
 80025b2:	2b04      	cmp	r3, #4
 80025b4:	bf28      	it	cs
 80025b6:	2304      	movcs	r3, #4
 80025b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	3304      	adds	r3, #4
 80025be:	2b06      	cmp	r3, #6
 80025c0:	d902      	bls.n	80025c8 <NVIC_EncodePriority+0x30>
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	3b03      	subs	r3, #3
 80025c6:	e000      	b.n	80025ca <NVIC_EncodePriority+0x32>
 80025c8:	2300      	movs	r3, #0
 80025ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025cc:	f04f 32ff 	mov.w	r2, #4294967295
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	43da      	mvns	r2, r3
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	401a      	ands	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025e0:	f04f 31ff 	mov.w	r1, #4294967295
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ea:	43d9      	mvns	r1, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	4313      	orrs	r3, r2
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3724      	adds	r7, #36	; 0x24
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
	...

08002600 <SysTick_Config>:
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3b01      	subs	r3, #1
 800260c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002610:	d301      	bcc.n	8002616 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002612:	2301      	movs	r3, #1
 8002614:	e00f      	b.n	8002636 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002616:	4a0a      	ldr	r2, [pc, #40]	; (8002640 <SysTick_Config+0x40>)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3b01      	subs	r3, #1
 800261c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800261e:	210f      	movs	r1, #15
 8002620:	f04f 30ff 	mov.w	r0, #4294967295
 8002624:	f7ff ff8e 	bl	8002544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002628:	4b05      	ldr	r3, [pc, #20]	; (8002640 <SysTick_Config+0x40>)
 800262a:	2200      	movs	r2, #0
 800262c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <SysTick_Config+0x40>)
 8002630:	2207      	movs	r2, #7
 8002632:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002634:	2300      	movs	r3, #0
}
 8002636:	4618      	mov	r0, r3
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	e000e010 	.word	0xe000e010

08002644 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f7ff ff47 	bl	80024e0 <__NVIC_SetPriorityGrouping>
}
 8002652:	bf00      	nop
 8002654:	3708      	adds	r7, #8
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
 8002666:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800266c:	f7ff ff5c 	bl	8002528 <__NVIC_GetPriorityGrouping>
 8002670:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002672:	687a      	ldr	r2, [r7, #4]
 8002674:	68b9      	ldr	r1, [r7, #8]
 8002676:	6978      	ldr	r0, [r7, #20]
 8002678:	f7ff ff8e 	bl	8002598 <NVIC_EncodePriority>
 800267c:	4602      	mov	r2, r0
 800267e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002682:	4611      	mov	r1, r2
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff5d 	bl	8002544 <__NVIC_SetPriority>
}
 800268a:	bf00      	nop
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b082      	sub	sp, #8
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7ff ffb0 	bl	8002600 <SysTick_Config>
 80026a0:	4603      	mov	r3, r0
}
 80026a2:	4618      	mov	r0, r3
 80026a4:	3708      	adds	r7, #8
 80026a6:	46bd      	mov	sp, r7
 80026a8:	bd80      	pop	{r7, pc}
	...

080026ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b089      	sub	sp, #36	; 0x24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
 80026b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026be:	2300      	movs	r3, #0
 80026c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026c2:	2300      	movs	r3, #0
 80026c4:	61fb      	str	r3, [r7, #28]
 80026c6:	e165      	b.n	8002994 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026c8:	2201      	movs	r2, #1
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	4013      	ands	r3, r2
 80026da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026dc:	693a      	ldr	r2, [r7, #16]
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	f040 8154 	bne.w	800298e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f003 0303 	and.w	r3, r3, #3
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d005      	beq.n	80026fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026fa:	2b02      	cmp	r3, #2
 80026fc:	d130      	bne.n	8002760 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	2203      	movs	r2, #3
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	43db      	mvns	r3, r3
 8002710:	69ba      	ldr	r2, [r7, #24]
 8002712:	4013      	ands	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68da      	ldr	r2, [r3, #12]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	fa02 f303 	lsl.w	r3, r2, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002734:	2201      	movs	r2, #1
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	fa02 f303 	lsl.w	r3, r2, r3
 800273c:	43db      	mvns	r3, r3
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4013      	ands	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	091b      	lsrs	r3, r3, #4
 800274a:	f003 0201 	and.w	r2, r3, #1
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	69ba      	ldr	r2, [r7, #24]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69ba      	ldr	r2, [r7, #24]
 800275e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f003 0303 	and.w	r3, r3, #3
 8002768:	2b03      	cmp	r3, #3
 800276a:	d017      	beq.n	800279c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	005b      	lsls	r3, r3, #1
 8002776:	2203      	movs	r2, #3
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	43db      	mvns	r3, r3
 800277e:	69ba      	ldr	r2, [r7, #24]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	69ba      	ldr	r2, [r7, #24]
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	f003 0303 	and.w	r3, r3, #3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d123      	bne.n	80027f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	08da      	lsrs	r2, r3, #3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3208      	adds	r2, #8
 80027b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	f003 0307 	and.w	r3, r3, #7
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	220f      	movs	r2, #15
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	691a      	ldr	r2, [r3, #16]
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	08da      	lsrs	r2, r3, #3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	3208      	adds	r2, #8
 80027ea:	69b9      	ldr	r1, [r7, #24]
 80027ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027f6:	69fb      	ldr	r3, [r7, #28]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	2203      	movs	r2, #3
 80027fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4013      	ands	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	f003 0203 	and.w	r2, r3, #3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 80ae 	beq.w	800298e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002832:	2300      	movs	r3, #0
 8002834:	60fb      	str	r3, [r7, #12]
 8002836:	4b5d      	ldr	r3, [pc, #372]	; (80029ac <HAL_GPIO_Init+0x300>)
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	4a5c      	ldr	r2, [pc, #368]	; (80029ac <HAL_GPIO_Init+0x300>)
 800283c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002840:	6453      	str	r3, [r2, #68]	; 0x44
 8002842:	4b5a      	ldr	r3, [pc, #360]	; (80029ac <HAL_GPIO_Init+0x300>)
 8002844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800284e:	4a58      	ldr	r2, [pc, #352]	; (80029b0 <HAL_GPIO_Init+0x304>)
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	089b      	lsrs	r3, r3, #2
 8002854:	3302      	adds	r3, #2
 8002856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0303 	and.w	r3, r3, #3
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4f      	ldr	r2, [pc, #316]	; (80029b4 <HAL_GPIO_Init+0x308>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d025      	beq.n	80028c6 <HAL_GPIO_Init+0x21a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4e      	ldr	r2, [pc, #312]	; (80029b8 <HAL_GPIO_Init+0x30c>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d01f      	beq.n	80028c2 <HAL_GPIO_Init+0x216>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	4a4d      	ldr	r2, [pc, #308]	; (80029bc <HAL_GPIO_Init+0x310>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d019      	beq.n	80028be <HAL_GPIO_Init+0x212>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	4a4c      	ldr	r2, [pc, #304]	; (80029c0 <HAL_GPIO_Init+0x314>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d013      	beq.n	80028ba <HAL_GPIO_Init+0x20e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4a4b      	ldr	r2, [pc, #300]	; (80029c4 <HAL_GPIO_Init+0x318>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d00d      	beq.n	80028b6 <HAL_GPIO_Init+0x20a>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a4a      	ldr	r2, [pc, #296]	; (80029c8 <HAL_GPIO_Init+0x31c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d007      	beq.n	80028b2 <HAL_GPIO_Init+0x206>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a49      	ldr	r2, [pc, #292]	; (80029cc <HAL_GPIO_Init+0x320>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d101      	bne.n	80028ae <HAL_GPIO_Init+0x202>
 80028aa:	2306      	movs	r3, #6
 80028ac:	e00c      	b.n	80028c8 <HAL_GPIO_Init+0x21c>
 80028ae:	2307      	movs	r3, #7
 80028b0:	e00a      	b.n	80028c8 <HAL_GPIO_Init+0x21c>
 80028b2:	2305      	movs	r3, #5
 80028b4:	e008      	b.n	80028c8 <HAL_GPIO_Init+0x21c>
 80028b6:	2304      	movs	r3, #4
 80028b8:	e006      	b.n	80028c8 <HAL_GPIO_Init+0x21c>
 80028ba:	2303      	movs	r3, #3
 80028bc:	e004      	b.n	80028c8 <HAL_GPIO_Init+0x21c>
 80028be:	2302      	movs	r3, #2
 80028c0:	e002      	b.n	80028c8 <HAL_GPIO_Init+0x21c>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_GPIO_Init+0x21c>
 80028c6:	2300      	movs	r3, #0
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	f002 0203 	and.w	r2, r2, #3
 80028ce:	0092      	lsls	r2, r2, #2
 80028d0:	4093      	lsls	r3, r2
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028d8:	4935      	ldr	r1, [pc, #212]	; (80029b0 <HAL_GPIO_Init+0x304>)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	089b      	lsrs	r3, r3, #2
 80028de:	3302      	adds	r3, #2
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028e6:	4b3a      	ldr	r3, [pc, #232]	; (80029d0 <HAL_GPIO_Init+0x324>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d003      	beq.n	800290a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800290a:	4a31      	ldr	r2, [pc, #196]	; (80029d0 <HAL_GPIO_Init+0x324>)
 800290c:	69bb      	ldr	r3, [r7, #24]
 800290e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002910:	4b2f      	ldr	r3, [pc, #188]	; (80029d0 <HAL_GPIO_Init+0x324>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	43db      	mvns	r3, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4013      	ands	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d003      	beq.n	8002934 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002934:	4a26      	ldr	r2, [pc, #152]	; (80029d0 <HAL_GPIO_Init+0x324>)
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800293a:	4b25      	ldr	r3, [pc, #148]	; (80029d0 <HAL_GPIO_Init+0x324>)
 800293c:	689b      	ldr	r3, [r3, #8]
 800293e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	43db      	mvns	r3, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4013      	ands	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002952:	2b00      	cmp	r3, #0
 8002954:	d003      	beq.n	800295e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002956:	69ba      	ldr	r2, [r7, #24]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800295e:	4a1c      	ldr	r2, [pc, #112]	; (80029d0 <HAL_GPIO_Init+0x324>)
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002964:	4b1a      	ldr	r3, [pc, #104]	; (80029d0 <HAL_GPIO_Init+0x324>)
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	43db      	mvns	r3, r3
 800296e:	69ba      	ldr	r2, [r7, #24]
 8002970:	4013      	ands	r3, r2
 8002972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d003      	beq.n	8002988 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002988:	4a11      	ldr	r2, [pc, #68]	; (80029d0 <HAL_GPIO_Init+0x324>)
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	3301      	adds	r3, #1
 8002992:	61fb      	str	r3, [r7, #28]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	2b0f      	cmp	r3, #15
 8002998:	f67f ae96 	bls.w	80026c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3724      	adds	r7, #36	; 0x24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40013800 	.word	0x40013800
 80029b4:	40020000 	.word	0x40020000
 80029b8:	40020400 	.word	0x40020400
 80029bc:	40020800 	.word	0x40020800
 80029c0:	40020c00 	.word	0x40020c00
 80029c4:	40021000 	.word	0x40021000
 80029c8:	40021400 	.word	0x40021400
 80029cc:	40021800 	.word	0x40021800
 80029d0:	40013c00 	.word	0x40013c00

080029d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	460b      	mov	r3, r1
 80029de:	807b      	strh	r3, [r7, #2]
 80029e0:	4613      	mov	r3, r2
 80029e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029e4:	787b      	ldrb	r3, [r7, #1]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ea:	887a      	ldrh	r2, [r7, #2]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029f0:	e003      	b.n	80029fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	041a      	lsls	r2, r3, #16
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	619a      	str	r2, [r3, #24]
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b084      	sub	sp, #16
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e0cc      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a1c:	4b68      	ldr	r3, [pc, #416]	; (8002bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 030f 	and.w	r3, r3, #15
 8002a24:	683a      	ldr	r2, [r7, #0]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d90c      	bls.n	8002a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2a:	4b65      	ldr	r3, [pc, #404]	; (8002bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	b2d2      	uxtb	r2, r2
 8002a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a32:	4b63      	ldr	r3, [pc, #396]	; (8002bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	683a      	ldr	r2, [r7, #0]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d001      	beq.n	8002a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0b8      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d020      	beq.n	8002a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d005      	beq.n	8002a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a5c:	4b59      	ldr	r3, [pc, #356]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	4a58      	ldr	r2, [pc, #352]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a74:	4b53      	ldr	r3, [pc, #332]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4a52      	ldr	r2, [pc, #328]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a80:	4b50      	ldr	r3, [pc, #320]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	494d      	ldr	r1, [pc, #308]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d044      	beq.n	8002b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aa6:	4b47      	ldr	r3, [pc, #284]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d119      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e07f      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d003      	beq.n	8002ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d107      	bne.n	8002ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ac6:	4b3f      	ldr	r3, [pc, #252]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d109      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e06f      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad6:	4b3b      	ldr	r3, [pc, #236]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e067      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ae6:	4b37      	ldr	r3, [pc, #220]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f023 0203 	bic.w	r2, r3, #3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	4934      	ldr	r1, [pc, #208]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002af8:	f7ff fcc2 	bl	8002480 <HAL_GetTick>
 8002afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b00:	f7ff fcbe 	bl	8002480 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e04f      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b16:	4b2b      	ldr	r3, [pc, #172]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 020c 	and.w	r2, r3, #12
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d1eb      	bne.n	8002b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b28:	4b25      	ldr	r3, [pc, #148]	; (8002bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 030f 	and.w	r3, r3, #15
 8002b30:	683a      	ldr	r2, [r7, #0]
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d20c      	bcs.n	8002b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b36:	4b22      	ldr	r3, [pc, #136]	; (8002bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	b2d2      	uxtb	r2, r2
 8002b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d001      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e032      	b.n	8002bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b5c:	4b19      	ldr	r3, [pc, #100]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4916      	ldr	r1, [pc, #88]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b7a:	4b12      	ldr	r3, [pc, #72]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	490e      	ldr	r1, [pc, #56]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b8e:	f000 fb4b 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 8002b92:	4602      	mov	r2, r0
 8002b94:	4b0b      	ldr	r3, [pc, #44]	; (8002bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	490a      	ldr	r1, [pc, #40]	; (8002bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ba0:	5ccb      	ldrb	r3, [r1, r3]
 8002ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ba6:	4a09      	ldr	r2, [pc, #36]	; (8002bcc <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002baa:	4b09      	ldr	r3, [pc, #36]	; (8002bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fc22 	bl	80023f8 <HAL_InitTick>

  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023c00 	.word	0x40023c00
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	08013c08 	.word	0x08013c08
 8002bcc:	20000004 	.word	0x20000004
 8002bd0:	20000008 	.word	0x20000008

08002bd4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08c      	sub	sp, #48	; 0x30
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002be4:	2300      	movs	r3, #0
 8002be6:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002be8:	2300      	movs	r3, #0
 8002bea:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002bec:	2300      	movs	r3, #0
 8002bee:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0301 	and.w	r3, r3, #1
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d010      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002c0c:	4b6f      	ldr	r3, [pc, #444]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c12:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1a:	496c      	ldr	r1, [pc, #432]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 0302 	and.w	r3, r3, #2
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d010      	beq.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002c3a:	4b64      	ldr	r3, [pc, #400]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c40:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c48:	4960      	ldr	r1, [pc, #384]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0304 	and.w	r3, r3, #4
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d017      	beq.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c68:	4b58      	ldr	r3, [pc, #352]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4955      	ldr	r1, [pc, #340]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c86:	d101      	bne.n	8002c8c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002c94:	2301      	movs	r3, #1
 8002c96:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0308 	and.w	r3, r3, #8
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d017      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002ca4:	4b49      	ldr	r3, [pc, #292]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002caa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cb2:	4946      	ldr	r1, [pc, #280]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d101      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0320 	and.w	r3, r3, #32
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 808a 	beq.w	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	4b39      	ldr	r3, [pc, #228]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cea:	4a38      	ldr	r2, [pc, #224]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cf2:	4b36      	ldr	r3, [pc, #216]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	60bb      	str	r3, [r7, #8]
 8002cfc:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002cfe:	4b34      	ldr	r3, [pc, #208]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a33      	ldr	r2, [pc, #204]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d08:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d0a:	f7ff fbb9 	bl	8002480 <HAL_GetTick>
 8002d0e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d12:	f7ff fbb5 	bl	8002480 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e278      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d24:	4b2a      	ldr	r3, [pc, #168]	; (8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d30:	4b26      	ldr	r3, [pc, #152]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d38:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d3a:	6a3b      	ldr	r3, [r7, #32]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d02f      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d48:	6a3a      	ldr	r2, [r7, #32]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d028      	beq.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d56:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d58:	4b1e      	ldr	r3, [pc, #120]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d5e:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002d64:	4a19      	ldr	r2, [pc, #100]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d6a:	4b18      	ldr	r3, [pc, #96]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6e:	f003 0301 	and.w	r3, r3, #1
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d114      	bne.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002d76:	f7ff fb83 	bl	8002480 <HAL_GetTick>
 8002d7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7c:	e00a      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7e:	f7ff fb7f 	bl	8002480 <HAL_GetTick>
 8002d82:	4602      	mov	r2, r0
 8002d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d86:	1ad3      	subs	r3, r2, r3
 8002d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e240      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d94:	4b0d      	ldr	r3, [pc, #52]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d98:	f003 0302 	and.w	r3, r3, #2
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0ee      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002dac:	d114      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002dae:	4b07      	ldr	r3, [pc, #28]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc2:	4902      	ldr	r1, [pc, #8]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	608b      	str	r3, [r1, #8]
 8002dc8:	e00c      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002dca:	bf00      	nop
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	40007000 	.word	0x40007000
 8002dd4:	42470e40 	.word	0x42470e40
 8002dd8:	4b4a      	ldr	r3, [pc, #296]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	4a49      	ldr	r2, [pc, #292]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002dde:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002de2:	6093      	str	r3, [r2, #8]
 8002de4:	4b47      	ldr	r3, [pc, #284]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002df0:	4944      	ldr	r1, [pc, #272]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0310 	and.w	r3, r3, #16
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d004      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002e08:	4b3f      	ldr	r3, [pc, #252]	; (8002f08 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002e0a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00a      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002e18:	4b3a      	ldr	r3, [pc, #232]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e1e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e26:	4937      	ldr	r1, [pc, #220]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d00a      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e3a:	4b32      	ldr	r3, [pc, #200]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e40:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e48:	492e      	ldr	r1, [pc, #184]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d011      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e5c:	4b29      	ldr	r3, [pc, #164]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e62:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e6a:	4926      	ldr	r1, [pc, #152]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e7a:	d101      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00a      	beq.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002e8c:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e92:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9a:	491a      	ldr	r1, [pc, #104]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d011      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002eae:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002eb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002eb4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ebc:	4911      	ldr	r1, [pc, #68]	; (8002f04 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ecc:	d101      	bne.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d005      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ee0:	f040 80ff 	bne.w	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ee4:	4b09      	ldr	r3, [pc, #36]	; (8002f0c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002eea:	f7ff fac9 	bl	8002480 <HAL_GetTick>
 8002eee:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ef0:	e00e      	b.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ef2:	f7ff fac5 	bl	8002480 <HAL_GetTick>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002efa:	1ad3      	subs	r3, r2, r3
 8002efc:	2b02      	cmp	r3, #2
 8002efe:	d907      	bls.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e188      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002f04:	40023800 	.word	0x40023800
 8002f08:	424711e0 	.word	0x424711e0
 8002f0c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f10:	4b7e      	ldr	r3, [pc, #504]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1ea      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d003      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d009      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d028      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d124      	bne.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002f44:	4b71      	ldr	r3, [pc, #452]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f4a:	0c1b      	lsrs	r3, r3, #16
 8002f4c:	f003 0303 	and.w	r3, r3, #3
 8002f50:	3301      	adds	r3, #1
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f56:	4b6d      	ldr	r3, [pc, #436]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f5c:	0e1b      	lsrs	r3, r3, #24
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	019b      	lsls	r3, r3, #6
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	085b      	lsrs	r3, r3, #1
 8002f74:	3b01      	subs	r3, #1
 8002f76:	041b      	lsls	r3, r3, #16
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	69bb      	ldr	r3, [r7, #24]
 8002f7c:	061b      	lsls	r3, r3, #24
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	695b      	ldr	r3, [r3, #20]
 8002f84:	071b      	lsls	r3, r3, #28
 8002f86:	4961      	ldr	r1, [pc, #388]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0304 	and.w	r3, r3, #4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d004      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fa2:	d00a      	beq.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d035      	beq.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fb8:	d130      	bne.n	800301c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002fba:	4b54      	ldr	r3, [pc, #336]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fc0:	0c1b      	lsrs	r3, r3, #16
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002fcc:	4b4f      	ldr	r3, [pc, #316]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd2:	0f1b      	lsrs	r3, r3, #28
 8002fd4:	f003 0307 	and.w	r3, r3, #7
 8002fd8:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	019b      	lsls	r3, r3, #6
 8002fe4:	431a      	orrs	r2, r3
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	085b      	lsrs	r3, r3, #1
 8002fea:	3b01      	subs	r3, #1
 8002fec:	041b      	lsls	r3, r3, #16
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	691b      	ldr	r3, [r3, #16]
 8002ff4:	061b      	lsls	r3, r3, #24
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	071b      	lsls	r3, r3, #28
 8002ffc:	4943      	ldr	r1, [pc, #268]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003004:	4b41      	ldr	r3, [pc, #260]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003006:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800300a:	f023 021f 	bic.w	r2, r3, #31
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003012:	3b01      	subs	r3, #1
 8003014:	493d      	ldr	r1, [pc, #244]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003016:	4313      	orrs	r3, r2
 8003018:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003024:	2b00      	cmp	r3, #0
 8003026:	d029      	beq.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003030:	d124      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003032:	4b36      	ldr	r3, [pc, #216]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003034:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	3301      	adds	r3, #1
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003044:	4b31      	ldr	r3, [pc, #196]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800304a:	0f1b      	lsrs	r3, r3, #28
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	019b      	lsls	r3, r3, #6
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	3b01      	subs	r3, #1
 8003066:	041b      	lsls	r3, r3, #16
 8003068:	431a      	orrs	r2, r3
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	061b      	lsls	r3, r3, #24
 800306e:	431a      	orrs	r2, r3
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	071b      	lsls	r3, r3, #28
 8003074:	4925      	ldr	r1, [pc, #148]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003076:	4313      	orrs	r3, r2
 8003078:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003084:	2b00      	cmp	r3, #0
 8003086:	d016      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685a      	ldr	r2, [r3, #4]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	019b      	lsls	r3, r3, #6
 8003092:	431a      	orrs	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	085b      	lsrs	r3, r3, #1
 800309a:	3b01      	subs	r3, #1
 800309c:	041b      	lsls	r3, r3, #16
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	691b      	ldr	r3, [r3, #16]
 80030a4:	061b      	lsls	r3, r3, #24
 80030a6:	431a      	orrs	r2, r3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	071b      	lsls	r3, r3, #28
 80030ae:	4917      	ldr	r1, [pc, #92]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030b6:	4b16      	ldr	r3, [pc, #88]	; (8003110 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80030b8:	2201      	movs	r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030bc:	f7ff f9e0 	bl	8002480 <HAL_GetTick>
 80030c0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030c4:	f7ff f9dc 	bl	8002480 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e09f      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030d6:	4b0d      	ldr	r3, [pc, #52]	; (800310c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d0f0      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80030e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	f040 8095 	bne.w	8003214 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030f0:	f7ff f9c6 	bl	8002480 <HAL_GetTick>
 80030f4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80030f6:	e00f      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80030f8:	f7ff f9c2 	bl	8002480 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b02      	cmp	r3, #2
 8003104:	d908      	bls.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e085      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800310a:	bf00      	nop
 800310c:	40023800 	.word	0x40023800
 8003110:	42470068 	.word	0x42470068
 8003114:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003118:	4b41      	ldr	r3, [pc, #260]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003120:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003124:	d0e8      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f003 0304 	and.w	r3, r3, #4
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003142:	2b00      	cmp	r3, #0
 8003144:	d02b      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314a:	2b00      	cmp	r3, #0
 800314c:	d127      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800314e:	4b34      	ldr	r3, [pc, #208]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	0c1b      	lsrs	r3, r3, #16
 8003156:	f003 0303 	and.w	r3, r3, #3
 800315a:	3301      	adds	r3, #1
 800315c:	005b      	lsls	r3, r3, #1
 800315e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	699a      	ldr	r2, [r3, #24]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	019b      	lsls	r3, r3, #6
 800316a:	431a      	orrs	r2, r3
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	085b      	lsrs	r3, r3, #1
 8003170:	3b01      	subs	r3, #1
 8003172:	041b      	lsls	r3, r3, #16
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317a:	061b      	lsls	r3, r3, #24
 800317c:	4928      	ldr	r1, [pc, #160]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003184:	4b26      	ldr	r3, [pc, #152]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003186:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800318a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003192:	3b01      	subs	r3, #1
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	4922      	ldr	r1, [pc, #136]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d01d      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031b2:	d118      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80031b4:	4b1a      	ldr	r3, [pc, #104]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	0e1b      	lsrs	r3, r3, #24
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	019b      	lsls	r3, r3, #6
 80031cc:	431a      	orrs	r2, r3
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	3b01      	subs	r3, #1
 80031d6:	041b      	lsls	r3, r3, #16
 80031d8:	431a      	orrs	r2, r3
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	4910      	ldr	r1, [pc, #64]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80031e6:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80031e8:	2201      	movs	r2, #1
 80031ea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031ec:	f7ff f948 	bl	8002480 <HAL_GetTick>
 80031f0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80031f4:	f7ff f944 	bl	8002480 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e007      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003206:	4b06      	ldr	r3, [pc, #24]	; (8003220 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800320e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003212:	d1ef      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3730      	adds	r7, #48	; 0x30
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	42470070 	.word	0x42470070

08003228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003228:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800322c:	b088      	sub	sp, #32
 800322e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8003240:	2300      	movs	r3, #0
 8003242:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003244:	4bce      	ldr	r3, [pc, #824]	; (8003580 <HAL_RCC_GetSysClockFreq+0x358>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	2b0c      	cmp	r3, #12
 800324e:	f200 818d 	bhi.w	800356c <HAL_RCC_GetSysClockFreq+0x344>
 8003252:	a201      	add	r2, pc, #4	; (adr r2, 8003258 <HAL_RCC_GetSysClockFreq+0x30>)
 8003254:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003258:	0800328d 	.word	0x0800328d
 800325c:	0800356d 	.word	0x0800356d
 8003260:	0800356d 	.word	0x0800356d
 8003264:	0800356d 	.word	0x0800356d
 8003268:	08003293 	.word	0x08003293
 800326c:	0800356d 	.word	0x0800356d
 8003270:	0800356d 	.word	0x0800356d
 8003274:	0800356d 	.word	0x0800356d
 8003278:	08003299 	.word	0x08003299
 800327c:	0800356d 	.word	0x0800356d
 8003280:	0800356d 	.word	0x0800356d
 8003284:	0800356d 	.word	0x0800356d
 8003288:	0800340d 	.word	0x0800340d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800328c:	4bbd      	ldr	r3, [pc, #756]	; (8003584 <HAL_RCC_GetSysClockFreq+0x35c>)
 800328e:	61bb      	str	r3, [r7, #24]
       break;
 8003290:	e16f      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003292:	4bbd      	ldr	r3, [pc, #756]	; (8003588 <HAL_RCC_GetSysClockFreq+0x360>)
 8003294:	61bb      	str	r3, [r7, #24]
      break;
 8003296:	e16c      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003298:	4bb9      	ldr	r3, [pc, #740]	; (8003580 <HAL_RCC_GetSysClockFreq+0x358>)
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032a0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032a2:	4bb7      	ldr	r3, [pc, #732]	; (8003580 <HAL_RCC_GetSysClockFreq+0x358>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d053      	beq.n	8003356 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ae:	4bb4      	ldr	r3, [pc, #720]	; (8003580 <HAL_RCC_GetSysClockFreq+0x358>)
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	099b      	lsrs	r3, r3, #6
 80032b4:	461a      	mov	r2, r3
 80032b6:	f04f 0300 	mov.w	r3, #0
 80032ba:	f240 10ff 	movw	r0, #511	; 0x1ff
 80032be:	f04f 0100 	mov.w	r1, #0
 80032c2:	ea02 0400 	and.w	r4, r2, r0
 80032c6:	603c      	str	r4, [r7, #0]
 80032c8:	400b      	ands	r3, r1
 80032ca:	607b      	str	r3, [r7, #4]
 80032cc:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032d0:	4620      	mov	r0, r4
 80032d2:	4629      	mov	r1, r5
 80032d4:	f04f 0200 	mov.w	r2, #0
 80032d8:	f04f 0300 	mov.w	r3, #0
 80032dc:	014b      	lsls	r3, r1, #5
 80032de:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80032e2:	0142      	lsls	r2, r0, #5
 80032e4:	4610      	mov	r0, r2
 80032e6:	4619      	mov	r1, r3
 80032e8:	4623      	mov	r3, r4
 80032ea:	1ac0      	subs	r0, r0, r3
 80032ec:	462b      	mov	r3, r5
 80032ee:	eb61 0103 	sbc.w	r1, r1, r3
 80032f2:	f04f 0200 	mov.w	r2, #0
 80032f6:	f04f 0300 	mov.w	r3, #0
 80032fa:	018b      	lsls	r3, r1, #6
 80032fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003300:	0182      	lsls	r2, r0, #6
 8003302:	1a12      	subs	r2, r2, r0
 8003304:	eb63 0301 	sbc.w	r3, r3, r1
 8003308:	f04f 0000 	mov.w	r0, #0
 800330c:	f04f 0100 	mov.w	r1, #0
 8003310:	00d9      	lsls	r1, r3, #3
 8003312:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003316:	00d0      	lsls	r0, r2, #3
 8003318:	4602      	mov	r2, r0
 800331a:	460b      	mov	r3, r1
 800331c:	4621      	mov	r1, r4
 800331e:	1852      	adds	r2, r2, r1
 8003320:	4629      	mov	r1, r5
 8003322:	eb43 0101 	adc.w	r1, r3, r1
 8003326:	460b      	mov	r3, r1
 8003328:	f04f 0000 	mov.w	r0, #0
 800332c:	f04f 0100 	mov.w	r1, #0
 8003330:	0259      	lsls	r1, r3, #9
 8003332:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003336:	0250      	lsls	r0, r2, #9
 8003338:	4602      	mov	r2, r0
 800333a:	460b      	mov	r3, r1
 800333c:	4610      	mov	r0, r2
 800333e:	4619      	mov	r1, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	461a      	mov	r2, r3
 8003344:	f04f 0300 	mov.w	r3, #0
 8003348:	f7fd fc5e 	bl	8000c08 <__aeabi_uldivmod>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4613      	mov	r3, r2
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	e04c      	b.n	80033f0 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003356:	4b8a      	ldr	r3, [pc, #552]	; (8003580 <HAL_RCC_GetSysClockFreq+0x358>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	099b      	lsrs	r3, r3, #6
 800335c:	461a      	mov	r2, r3
 800335e:	f04f 0300 	mov.w	r3, #0
 8003362:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003366:	f04f 0100 	mov.w	r1, #0
 800336a:	ea02 0a00 	and.w	sl, r2, r0
 800336e:	ea03 0b01 	and.w	fp, r3, r1
 8003372:	4650      	mov	r0, sl
 8003374:	4659      	mov	r1, fp
 8003376:	f04f 0200 	mov.w	r2, #0
 800337a:	f04f 0300 	mov.w	r3, #0
 800337e:	014b      	lsls	r3, r1, #5
 8003380:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003384:	0142      	lsls	r2, r0, #5
 8003386:	4610      	mov	r0, r2
 8003388:	4619      	mov	r1, r3
 800338a:	ebb0 000a 	subs.w	r0, r0, sl
 800338e:	eb61 010b 	sbc.w	r1, r1, fp
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	018b      	lsls	r3, r1, #6
 800339c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80033a0:	0182      	lsls	r2, r0, #6
 80033a2:	1a12      	subs	r2, r2, r0
 80033a4:	eb63 0301 	sbc.w	r3, r3, r1
 80033a8:	f04f 0000 	mov.w	r0, #0
 80033ac:	f04f 0100 	mov.w	r1, #0
 80033b0:	00d9      	lsls	r1, r3, #3
 80033b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80033b6:	00d0      	lsls	r0, r2, #3
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	eb12 020a 	adds.w	r2, r2, sl
 80033c0:	eb43 030b 	adc.w	r3, r3, fp
 80033c4:	f04f 0000 	mov.w	r0, #0
 80033c8:	f04f 0100 	mov.w	r1, #0
 80033cc:	0299      	lsls	r1, r3, #10
 80033ce:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80033d2:	0290      	lsls	r0, r2, #10
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4610      	mov	r0, r2
 80033da:	4619      	mov	r1, r3
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	461a      	mov	r2, r3
 80033e0:	f04f 0300 	mov.w	r3, #0
 80033e4:	f7fd fc10 	bl	8000c08 <__aeabi_uldivmod>
 80033e8:	4602      	mov	r2, r0
 80033ea:	460b      	mov	r3, r1
 80033ec:	4613      	mov	r3, r2
 80033ee:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80033f0:	4b63      	ldr	r3, [pc, #396]	; (8003580 <HAL_RCC_GetSysClockFreq+0x358>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	0c1b      	lsrs	r3, r3, #16
 80033f6:	f003 0303 	and.w	r3, r3, #3
 80033fa:	3301      	adds	r3, #1
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003400:	69fa      	ldr	r2, [r7, #28]
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	fbb2 f3f3 	udiv	r3, r2, r3
 8003408:	61bb      	str	r3, [r7, #24]
      break;
 800340a:	e0b2      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800340c:	4b5c      	ldr	r3, [pc, #368]	; (8003580 <HAL_RCC_GetSysClockFreq+0x358>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003414:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003416:	4b5a      	ldr	r3, [pc, #360]	; (8003580 <HAL_RCC_GetSysClockFreq+0x358>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d04d      	beq.n	80034be <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003422:	4b57      	ldr	r3, [pc, #348]	; (8003580 <HAL_RCC_GetSysClockFreq+0x358>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	099b      	lsrs	r3, r3, #6
 8003428:	461a      	mov	r2, r3
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003432:	f04f 0100 	mov.w	r1, #0
 8003436:	ea02 0800 	and.w	r8, r2, r0
 800343a:	ea03 0901 	and.w	r9, r3, r1
 800343e:	4640      	mov	r0, r8
 8003440:	4649      	mov	r1, r9
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	014b      	lsls	r3, r1, #5
 800344c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003450:	0142      	lsls	r2, r0, #5
 8003452:	4610      	mov	r0, r2
 8003454:	4619      	mov	r1, r3
 8003456:	ebb0 0008 	subs.w	r0, r0, r8
 800345a:	eb61 0109 	sbc.w	r1, r1, r9
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	018b      	lsls	r3, r1, #6
 8003468:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800346c:	0182      	lsls	r2, r0, #6
 800346e:	1a12      	subs	r2, r2, r0
 8003470:	eb63 0301 	sbc.w	r3, r3, r1
 8003474:	f04f 0000 	mov.w	r0, #0
 8003478:	f04f 0100 	mov.w	r1, #0
 800347c:	00d9      	lsls	r1, r3, #3
 800347e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003482:	00d0      	lsls	r0, r2, #3
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	eb12 0208 	adds.w	r2, r2, r8
 800348c:	eb43 0309 	adc.w	r3, r3, r9
 8003490:	f04f 0000 	mov.w	r0, #0
 8003494:	f04f 0100 	mov.w	r1, #0
 8003498:	0259      	lsls	r1, r3, #9
 800349a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800349e:	0250      	lsls	r0, r2, #9
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4610      	mov	r0, r2
 80034a6:	4619      	mov	r1, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	461a      	mov	r2, r3
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	f7fd fbaa 	bl	8000c08 <__aeabi_uldivmod>
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4613      	mov	r3, r2
 80034ba:	61fb      	str	r3, [r7, #28]
 80034bc:	e04a      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034be:	4b30      	ldr	r3, [pc, #192]	; (8003580 <HAL_RCC_GetSysClockFreq+0x358>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	099b      	lsrs	r3, r3, #6
 80034c4:	461a      	mov	r2, r3
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034ce:	f04f 0100 	mov.w	r1, #0
 80034d2:	ea02 0400 	and.w	r4, r2, r0
 80034d6:	ea03 0501 	and.w	r5, r3, r1
 80034da:	4620      	mov	r0, r4
 80034dc:	4629      	mov	r1, r5
 80034de:	f04f 0200 	mov.w	r2, #0
 80034e2:	f04f 0300 	mov.w	r3, #0
 80034e6:	014b      	lsls	r3, r1, #5
 80034e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034ec:	0142      	lsls	r2, r0, #5
 80034ee:	4610      	mov	r0, r2
 80034f0:	4619      	mov	r1, r3
 80034f2:	1b00      	subs	r0, r0, r4
 80034f4:	eb61 0105 	sbc.w	r1, r1, r5
 80034f8:	f04f 0200 	mov.w	r2, #0
 80034fc:	f04f 0300 	mov.w	r3, #0
 8003500:	018b      	lsls	r3, r1, #6
 8003502:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003506:	0182      	lsls	r2, r0, #6
 8003508:	1a12      	subs	r2, r2, r0
 800350a:	eb63 0301 	sbc.w	r3, r3, r1
 800350e:	f04f 0000 	mov.w	r0, #0
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	00d9      	lsls	r1, r3, #3
 8003518:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800351c:	00d0      	lsls	r0, r2, #3
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	1912      	adds	r2, r2, r4
 8003524:	eb45 0303 	adc.w	r3, r5, r3
 8003528:	f04f 0000 	mov.w	r0, #0
 800352c:	f04f 0100 	mov.w	r1, #0
 8003530:	0299      	lsls	r1, r3, #10
 8003532:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003536:	0290      	lsls	r0, r2, #10
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4610      	mov	r0, r2
 800353e:	4619      	mov	r1, r3
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	461a      	mov	r2, r3
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	f7fd fb5e 	bl	8000c08 <__aeabi_uldivmod>
 800354c:	4602      	mov	r2, r0
 800354e:	460b      	mov	r3, r1
 8003550:	4613      	mov	r3, r2
 8003552:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003554:	4b0a      	ldr	r3, [pc, #40]	; (8003580 <HAL_RCC_GetSysClockFreq+0x358>)
 8003556:	685b      	ldr	r3, [r3, #4]
 8003558:	0f1b      	lsrs	r3, r3, #28
 800355a:	f003 0307 	and.w	r3, r3, #7
 800355e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003560:	69fa      	ldr	r2, [r7, #28]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	fbb2 f3f3 	udiv	r3, r2, r3
 8003568:	61bb      	str	r3, [r7, #24]
      break;
 800356a:	e002      	b.n	8003572 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800356c:	4b05      	ldr	r3, [pc, #20]	; (8003584 <HAL_RCC_GetSysClockFreq+0x35c>)
 800356e:	61bb      	str	r3, [r7, #24]
      break;
 8003570:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003572:	69bb      	ldr	r3, [r7, #24]
}
 8003574:	4618      	mov	r0, r3
 8003576:	3720      	adds	r7, #32
 8003578:	46bd      	mov	sp, r7
 800357a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800357e:	bf00      	nop
 8003580:	40023800 	.word	0x40023800
 8003584:	00f42400 	.word	0x00f42400
 8003588:	007a1200 	.word	0x007a1200

0800358c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b086      	sub	sp, #24
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e28d      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0301 	and.w	r3, r3, #1
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f000 8083 	beq.w	80036b2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035ac:	4b94      	ldr	r3, [pc, #592]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f003 030c 	and.w	r3, r3, #12
 80035b4:	2b04      	cmp	r3, #4
 80035b6:	d019      	beq.n	80035ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035b8:	4b91      	ldr	r3, [pc, #580]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d106      	bne.n	80035d2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035c4:	4b8e      	ldr	r3, [pc, #568]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035d0:	d00c      	beq.n	80035ec <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d2:	4b8b      	ldr	r3, [pc, #556]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d112      	bne.n	8003604 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035de:	4b88      	ldr	r3, [pc, #544]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035ea:	d10b      	bne.n	8003604 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ec:	4b84      	ldr	r3, [pc, #528]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d05b      	beq.n	80036b0 <HAL_RCC_OscConfig+0x124>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d157      	bne.n	80036b0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e25a      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800360c:	d106      	bne.n	800361c <HAL_RCC_OscConfig+0x90>
 800360e:	4b7c      	ldr	r3, [pc, #496]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a7b      	ldr	r2, [pc, #492]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 8003614:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003618:	6013      	str	r3, [r2, #0]
 800361a:	e01d      	b.n	8003658 <HAL_RCC_OscConfig+0xcc>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003624:	d10c      	bne.n	8003640 <HAL_RCC_OscConfig+0xb4>
 8003626:	4b76      	ldr	r3, [pc, #472]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a75      	ldr	r2, [pc, #468]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 800362c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003630:	6013      	str	r3, [r2, #0]
 8003632:	4b73      	ldr	r3, [pc, #460]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a72      	ldr	r2, [pc, #456]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 8003638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800363c:	6013      	str	r3, [r2, #0]
 800363e:	e00b      	b.n	8003658 <HAL_RCC_OscConfig+0xcc>
 8003640:	4b6f      	ldr	r3, [pc, #444]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a6e      	ldr	r2, [pc, #440]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 8003646:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	4b6c      	ldr	r3, [pc, #432]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a6b      	ldr	r2, [pc, #428]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 8003652:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003656:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003660:	f7fe ff0e 	bl	8002480 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003668:	f7fe ff0a 	bl	8002480 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b64      	cmp	r3, #100	; 0x64
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e21f      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	4b61      	ldr	r3, [pc, #388]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d0f0      	beq.n	8003668 <HAL_RCC_OscConfig+0xdc>
 8003686:	e014      	b.n	80036b2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fe fefa 	bl	8002480 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003690:	f7fe fef6 	bl	8002480 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e20b      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a2:	4b57      	ldr	r3, [pc, #348]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x104>
 80036ae:	e000      	b.n	80036b2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0302 	and.w	r3, r3, #2
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d06f      	beq.n	800379e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036be:	4b50      	ldr	r3, [pc, #320]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d017      	beq.n	80036fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036ca:	4b4d      	ldr	r3, [pc, #308]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d105      	bne.n	80036e2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036d6:	4b4a      	ldr	r3, [pc, #296]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d00b      	beq.n	80036fa <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036e2:	4b47      	ldr	r3, [pc, #284]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80036ea:	2b0c      	cmp	r3, #12
 80036ec:	d11c      	bne.n	8003728 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ee:	4b44      	ldr	r3, [pc, #272]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d116      	bne.n	8003728 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036fa:	4b41      	ldr	r3, [pc, #260]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d005      	beq.n	8003712 <HAL_RCC_OscConfig+0x186>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d001      	beq.n	8003712 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e1d3      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003712:	4b3b      	ldr	r3, [pc, #236]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	4937      	ldr	r1, [pc, #220]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 8003722:	4313      	orrs	r3, r2
 8003724:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003726:	e03a      	b.n	800379e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d020      	beq.n	8003772 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003730:	4b34      	ldr	r3, [pc, #208]	; (8003804 <HAL_RCC_OscConfig+0x278>)
 8003732:	2201      	movs	r2, #1
 8003734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003736:	f7fe fea3 	bl	8002480 <HAL_GetTick>
 800373a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800373c:	e008      	b.n	8003750 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373e:	f7fe fe9f 	bl	8002480 <HAL_GetTick>
 8003742:	4602      	mov	r2, r0
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	2b02      	cmp	r3, #2
 800374a:	d901      	bls.n	8003750 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e1b4      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003750:	4b2b      	ldr	r3, [pc, #172]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0f0      	beq.n	800373e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800375c:	4b28      	ldr	r3, [pc, #160]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	00db      	lsls	r3, r3, #3
 800376a:	4925      	ldr	r1, [pc, #148]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]
 8003770:	e015      	b.n	800379e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003772:	4b24      	ldr	r3, [pc, #144]	; (8003804 <HAL_RCC_OscConfig+0x278>)
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003778:	f7fe fe82 	bl	8002480 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003780:	f7fe fe7e 	bl	8002480 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b02      	cmp	r3, #2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e193      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003792:	4b1b      	ldr	r3, [pc, #108]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1f0      	bne.n	8003780 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d036      	beq.n	8003818 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	695b      	ldr	r3, [r3, #20]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d016      	beq.n	80037e0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037b2:	4b15      	ldr	r3, [pc, #84]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b8:	f7fe fe62 	bl	8002480 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037c0:	f7fe fe5e 	bl	8002480 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e173      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037d2:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCC_OscConfig+0x274>)
 80037d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037d6:	f003 0302 	and.w	r3, r3, #2
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d0f0      	beq.n	80037c0 <HAL_RCC_OscConfig+0x234>
 80037de:	e01b      	b.n	8003818 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037e0:	4b09      	ldr	r3, [pc, #36]	; (8003808 <HAL_RCC_OscConfig+0x27c>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037e6:	f7fe fe4b 	bl	8002480 <HAL_GetTick>
 80037ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ec:	e00e      	b.n	800380c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ee:	f7fe fe47 	bl	8002480 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d907      	bls.n	800380c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e15c      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
 8003800:	40023800 	.word	0x40023800
 8003804:	42470000 	.word	0x42470000
 8003808:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	4b8a      	ldr	r3, [pc, #552]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800380e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1ea      	bne.n	80037ee <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0304 	and.w	r3, r3, #4
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 8097 	beq.w	8003954 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003826:	2300      	movs	r3, #0
 8003828:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800382a:	4b83      	ldr	r3, [pc, #524]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800382c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d10f      	bne.n	8003856 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003836:	2300      	movs	r3, #0
 8003838:	60bb      	str	r3, [r7, #8]
 800383a:	4b7f      	ldr	r3, [pc, #508]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	4a7e      	ldr	r2, [pc, #504]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003844:	6413      	str	r3, [r2, #64]	; 0x40
 8003846:	4b7c      	ldr	r3, [pc, #496]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384e:	60bb      	str	r3, [r7, #8]
 8003850:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003852:	2301      	movs	r3, #1
 8003854:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003856:	4b79      	ldr	r3, [pc, #484]	; (8003a3c <HAL_RCC_OscConfig+0x4b0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800385e:	2b00      	cmp	r3, #0
 8003860:	d118      	bne.n	8003894 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003862:	4b76      	ldr	r3, [pc, #472]	; (8003a3c <HAL_RCC_OscConfig+0x4b0>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a75      	ldr	r2, [pc, #468]	; (8003a3c <HAL_RCC_OscConfig+0x4b0>)
 8003868:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386e:	f7fe fe07 	bl	8002480 <HAL_GetTick>
 8003872:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003874:	e008      	b.n	8003888 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003876:	f7fe fe03 	bl	8002480 <HAL_GetTick>
 800387a:	4602      	mov	r2, r0
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	2b02      	cmp	r3, #2
 8003882:	d901      	bls.n	8003888 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003884:	2303      	movs	r3, #3
 8003886:	e118      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003888:	4b6c      	ldr	r3, [pc, #432]	; (8003a3c <HAL_RCC_OscConfig+0x4b0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0f0      	beq.n	8003876 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d106      	bne.n	80038aa <HAL_RCC_OscConfig+0x31e>
 800389c:	4b66      	ldr	r3, [pc, #408]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	4a65      	ldr	r2, [pc, #404]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6713      	str	r3, [r2, #112]	; 0x70
 80038a8:	e01c      	b.n	80038e4 <HAL_RCC_OscConfig+0x358>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	2b05      	cmp	r3, #5
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0x340>
 80038b2:	4b61      	ldr	r3, [pc, #388]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b6:	4a60      	ldr	r2, [pc, #384]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038b8:	f043 0304 	orr.w	r3, r3, #4
 80038bc:	6713      	str	r3, [r2, #112]	; 0x70
 80038be:	4b5e      	ldr	r3, [pc, #376]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c2:	4a5d      	ldr	r2, [pc, #372]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038c4:	f043 0301 	orr.w	r3, r3, #1
 80038c8:	6713      	str	r3, [r2, #112]	; 0x70
 80038ca:	e00b      	b.n	80038e4 <HAL_RCC_OscConfig+0x358>
 80038cc:	4b5a      	ldr	r3, [pc, #360]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d0:	4a59      	ldr	r2, [pc, #356]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038d2:	f023 0301 	bic.w	r3, r3, #1
 80038d6:	6713      	str	r3, [r2, #112]	; 0x70
 80038d8:	4b57      	ldr	r3, [pc, #348]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038dc:	4a56      	ldr	r2, [pc, #344]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80038de:	f023 0304 	bic.w	r3, r3, #4
 80038e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d015      	beq.n	8003918 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038ec:	f7fe fdc8 	bl	8002480 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038f2:	e00a      	b.n	800390a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f4:	f7fe fdc4 	bl	8002480 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003902:	4293      	cmp	r3, r2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e0d7      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390a:	4b4b      	ldr	r3, [pc, #300]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800390c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800390e:	f003 0302 	and.w	r3, r3, #2
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0ee      	beq.n	80038f4 <HAL_RCC_OscConfig+0x368>
 8003916:	e014      	b.n	8003942 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003918:	f7fe fdb2 	bl	8002480 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391e:	e00a      	b.n	8003936 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003920:	f7fe fdae 	bl	8002480 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	f241 3288 	movw	r2, #5000	; 0x1388
 800392e:	4293      	cmp	r3, r2
 8003930:	d901      	bls.n	8003936 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003932:	2303      	movs	r3, #3
 8003934:	e0c1      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003936:	4b40      	ldr	r3, [pc, #256]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800393a:	f003 0302 	and.w	r3, r3, #2
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1ee      	bne.n	8003920 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003942:	7dfb      	ldrb	r3, [r7, #23]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d105      	bne.n	8003954 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003948:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	4a3a      	ldr	r2, [pc, #232]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 800394e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003952:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 80ad 	beq.w	8003ab8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800395e:	4b36      	ldr	r3, [pc, #216]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b08      	cmp	r3, #8
 8003968:	d060      	beq.n	8003a2c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	2b02      	cmp	r3, #2
 8003970:	d145      	bne.n	80039fe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003972:	4b33      	ldr	r3, [pc, #204]	; (8003a40 <HAL_RCC_OscConfig+0x4b4>)
 8003974:	2200      	movs	r2, #0
 8003976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003978:	f7fe fd82 	bl	8002480 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397e:	e008      	b.n	8003992 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003980:	f7fe fd7e 	bl	8002480 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	2b02      	cmp	r3, #2
 800398c:	d901      	bls.n	8003992 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800398e:	2303      	movs	r3, #3
 8003990:	e093      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003992:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1f0      	bne.n	8003980 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69da      	ldr	r2, [r3, #28]
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6a1b      	ldr	r3, [r3, #32]
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	019b      	lsls	r3, r3, #6
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b4:	085b      	lsrs	r3, r3, #1
 80039b6:	3b01      	subs	r3, #1
 80039b8:	041b      	lsls	r3, r3, #16
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c0:	061b      	lsls	r3, r3, #24
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c8:	071b      	lsls	r3, r3, #28
 80039ca:	491b      	ldr	r1, [pc, #108]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	4313      	orrs	r3, r2
 80039ce:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <HAL_RCC_OscConfig+0x4b4>)
 80039d2:	2201      	movs	r2, #1
 80039d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d6:	f7fe fd53 	bl	8002480 <HAL_GetTick>
 80039da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039dc:	e008      	b.n	80039f0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039de:	f7fe fd4f 	bl	8002480 <HAL_GetTick>
 80039e2:	4602      	mov	r2, r0
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	1ad3      	subs	r3, r2, r3
 80039e8:	2b02      	cmp	r3, #2
 80039ea:	d901      	bls.n	80039f0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80039ec:	2303      	movs	r3, #3
 80039ee:	e064      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f0:	4b11      	ldr	r3, [pc, #68]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d0f0      	beq.n	80039de <HAL_RCC_OscConfig+0x452>
 80039fc:	e05c      	b.n	8003ab8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fe:	4b10      	ldr	r3, [pc, #64]	; (8003a40 <HAL_RCC_OscConfig+0x4b4>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fe fd3c 	bl	8002480 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0c:	f7fe fd38 	bl	8002480 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e04d      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	4b06      	ldr	r3, [pc, #24]	; (8003a38 <HAL_RCC_OscConfig+0x4ac>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x480>
 8003a2a:	e045      	b.n	8003ab8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	699b      	ldr	r3, [r3, #24]
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d107      	bne.n	8003a44 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e040      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	40007000 	.word	0x40007000
 8003a40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a44:	4b1f      	ldr	r3, [pc, #124]	; (8003ac4 <HAL_RCC_OscConfig+0x538>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d030      	beq.n	8003ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d129      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d122      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a6e:	68fa      	ldr	r2, [r7, #12]
 8003a70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a74:	4013      	ands	r3, r2
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d119      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	085b      	lsrs	r3, r3, #1
 8003a8c:	3b01      	subs	r3, #1
 8003a8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d10f      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa0:	429a      	cmp	r2, r3
 8003aa2:	d107      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aae:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d001      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3718      	adds	r7, #24
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	40023800 	.word	0x40023800

08003ac8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d101      	bne.n	8003ada <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e022      	b.n	8003b20 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d105      	bne.n	8003af2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f7fe fae1 	bl	80020b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2203      	movs	r2, #3
 8003af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f814 	bl	8003b28 <HAL_SD_InitCard>
 8003b00:	4603      	mov	r3, r0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e00a      	b.n	8003b20 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003b28:	b5b0      	push	{r4, r5, r7, lr}
 8003b2a:	b08e      	sub	sp, #56	; 0x38
 8003b2c:	af04      	add	r7, sp, #16
 8003b2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003b30:	2300      	movs	r3, #0
 8003b32:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003b34:	2300      	movs	r3, #0
 8003b36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003b44:	2376      	movs	r3, #118	; 0x76
 8003b46:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681d      	ldr	r5, [r3, #0]
 8003b4c:	466c      	mov	r4, sp
 8003b4e:	f107 0314 	add.w	r3, r7, #20
 8003b52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003b56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003b5a:	f107 0308 	add.w	r3, r7, #8
 8003b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b60:	4628      	mov	r0, r5
 8003b62:	f001 f938 	bl	8004dd6 <SDIO_Init>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d001      	beq.n	8003b78 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003b74:	2301      	movs	r3, #1
 8003b76:	e04c      	b.n	8003c12 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003b78:	4b28      	ldr	r3, [pc, #160]	; (8003c1c <HAL_SD_InitCard+0xf4>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f001 f970 	bl	8004e68 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003b88:	4b24      	ldr	r3, [pc, #144]	; (8003c1c <HAL_SD_InitCard+0xf4>)
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 ff02 	bl	8004998 <SD_PowerON>
 8003b94:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00b      	beq.n	8003bb4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ba8:	6a3b      	ldr	r3, [r7, #32]
 8003baa:	431a      	orrs	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e02e      	b.n	8003c12 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fe23 	bl	8004800 <SD_InitCard>
 8003bba:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bbc:	6a3b      	ldr	r3, [r7, #32]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00b      	beq.n	8003bda <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e01b      	b.n	8003c12 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003be2:	4618      	mov	r0, r3
 8003be4:	f001 f9d3 	bl	8004f8e <SDMMC_CmdBlockLength>
 8003be8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003bea:	6a3b      	ldr	r3, [r7, #32]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00f      	beq.n	8003c10 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <HAL_SD_InitCard+0xf8>)
 8003bf6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bfc:	6a3b      	ldr	r3, [r7, #32]
 8003bfe:	431a      	orrs	r2, r3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2201      	movs	r2, #1
 8003c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003c10:	2300      	movs	r3, #0
}
 8003c12:	4618      	mov	r0, r3
 8003c14:	3728      	adds	r7, #40	; 0x28
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bdb0      	pop	{r4, r5, r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	422580a0 	.word	0x422580a0
 8003c20:	004005ff 	.word	0x004005ff

08003c24 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b092      	sub	sp, #72	; 0x48
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003c32:	f7fe fc25 	bl	8002480 <HAL_GetTick>
 8003c36:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d107      	bne.n	8003c56 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e1bd      	b.n	8003fd2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	f040 81b0 	bne.w	8003fc4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	2200      	movs	r2, #0
 8003c68:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c6a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	441a      	add	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d907      	bls.n	8003c88 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c7c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e1a4      	b.n	8003fd2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2203      	movs	r2, #3
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	2200      	movs	r2, #0
 8003c96:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d002      	beq.n	8003ca6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca2:	025b      	lsls	r3, r3, #9
 8003ca4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
 8003caa:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	025b      	lsls	r3, r3, #9
 8003cb0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003cb2:	2390      	movs	r3, #144	; 0x90
 8003cb4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f107 0214 	add.w	r2, r7, #20
 8003cca:	4611      	mov	r1, r2
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f001 f932 	bl	8004f36 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d90a      	bls.n	8003cee <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f001 f996 	bl	8005016 <SDMMC_CmdReadMultiBlock>
 8003cea:	6478      	str	r0, [r7, #68]	; 0x44
 8003cec:	e009      	b.n	8003d02 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f001 f969 	bl	8004fd2 <SDMMC_CmdReadSingleBlock>
 8003d00:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d012      	beq.n	8003d2e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a7a      	ldr	r2, [pc, #488]	; (8003ef8 <HAL_SD_ReadBlocks+0x2d4>)
 8003d0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d16:	431a      	orrs	r2, r3
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e151      	b.n	8003fd2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003d32:	e061      	b.n	8003df8 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d03c      	beq.n	8003dbc <HAL_SD_ReadBlocks+0x198>
 8003d42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d039      	beq.n	8003dbc <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003d48:	2300      	movs	r3, #0
 8003d4a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d4c:	e033      	b.n	8003db6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f001 f86a 	bl	8004e2c <SDIO_ReadFIFO>
 8003d58:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8003d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d60:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d64:	3301      	adds	r3, #1
 8003d66:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	0a1b      	lsrs	r3, r3, #8
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d76:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d80:	3b01      	subs	r3, #1
 8003d82:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d86:	0c1b      	lsrs	r3, r3, #16
 8003d88:	b2da      	uxtb	r2, r3
 8003d8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d90:	3301      	adds	r3, #1
 8003d92:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d96:	3b01      	subs	r3, #1
 8003d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d9c:	0e1b      	lsrs	r3, r3, #24
 8003d9e:	b2da      	uxtb	r2, r3
 8003da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003da4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da6:	3301      	adds	r3, #1
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dac:	3b01      	subs	r3, #1
 8003dae:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db2:	3301      	adds	r3, #1
 8003db4:	643b      	str	r3, [r7, #64]	; 0x40
 8003db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003db8:	2b07      	cmp	r3, #7
 8003dba:	d9c8      	bls.n	8003d4e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003dbc:	f7fe fb60 	bl	8002480 <HAL_GetTick>
 8003dc0:	4602      	mov	r2, r0
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	1ad3      	subs	r3, r2, r3
 8003dc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d902      	bls.n	8003dd2 <HAL_SD_ReadBlocks+0x1ae>
 8003dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d112      	bne.n	8003df8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a48      	ldr	r2, [pc, #288]	; (8003ef8 <HAL_SD_ReadBlocks+0x2d4>)
 8003dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e0ec      	b.n	8003fd2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfe:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d096      	beq.n	8003d34 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d022      	beq.n	8003e5a <HAL_SD_ReadBlocks+0x236>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d91f      	bls.n	8003e5a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	2b03      	cmp	r3, #3
 8003e20:	d01b      	beq.n	8003e5a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f001 f95c 	bl	80050e4 <SDMMC_CmdStopTransfer>
 8003e2c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d012      	beq.n	8003e5a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a2f      	ldr	r2, [pc, #188]	; (8003ef8 <HAL_SD_ReadBlocks+0x2d4>)
 8003e3a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e42:	431a      	orrs	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e0bb      	b.n	8003fd2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e60:	f003 0308 	and.w	r3, r3, #8
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d012      	beq.n	8003e8e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a22      	ldr	r2, [pc, #136]	; (8003ef8 <HAL_SD_ReadBlocks+0x2d4>)
 8003e6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e74:	f043 0208 	orr.w	r2, r3, #8
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2200      	movs	r2, #0
 8003e88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e0a1      	b.n	8003fd2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d012      	beq.n	8003ec2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a15      	ldr	r2, [pc, #84]	; (8003ef8 <HAL_SD_ReadBlocks+0x2d4>)
 8003ea2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea8:	f043 0202 	orr.w	r2, r3, #2
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e087      	b.n	8003fd2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ec8:	f003 0320 	and.w	r3, r3, #32
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d064      	beq.n	8003f9a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a08      	ldr	r2, [pc, #32]	; (8003ef8 <HAL_SD_ReadBlocks+0x2d4>)
 8003ed6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e06d      	b.n	8003fd2 <HAL_SD_ReadBlocks+0x3ae>
 8003ef6:	bf00      	nop
 8003ef8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 ff93 	bl	8004e2c <SDIO_ReadFIFO>
 8003f06:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f0a:	b2da      	uxtb	r2, r3
 8003f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f0e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f12:	3301      	adds	r3, #1
 8003f14:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003f16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f18:	3b01      	subs	r3, #1
 8003f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	b2da      	uxtb	r2, r3
 8003f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f24:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f28:	3301      	adds	r3, #1
 8003f2a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f34:	0c1b      	lsrs	r3, r3, #16
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f3e:	3301      	adds	r3, #1
 8003f40:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f44:	3b01      	subs	r3, #1
 8003f46:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4a:	0e1b      	lsrs	r3, r3, #24
 8003f4c:	b2da      	uxtb	r2, r3
 8003f4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f50:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f54:	3301      	adds	r3, #1
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003f5e:	f7fe fa8f 	bl	8002480 <HAL_GetTick>
 8003f62:	4602      	mov	r2, r0
 8003f64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f66:	1ad3      	subs	r3, r2, r3
 8003f68:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d902      	bls.n	8003f74 <HAL_SD_ReadBlocks+0x350>
 8003f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d112      	bne.n	8003f9a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a18      	ldr	r2, [pc, #96]	; (8003fdc <HAL_SD_ReadBlocks+0x3b8>)
 8003f7a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f80:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	e01b      	b.n	8003fd2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d002      	beq.n	8003fae <HAL_SD_ReadBlocks+0x38a>
 8003fa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d1a6      	bne.n	8003efc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	e006      	b.n	8003fd2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
  }
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3748      	adds	r7, #72	; 0x48
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	004005ff 	.word	0x004005ff

08003fe0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b092      	sub	sp, #72	; 0x48
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003fee:	f7fe fa47 	bl	8002480 <HAL_GetTick>
 8003ff2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d107      	bne.n	8004012 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004006:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e165      	b.n	80042de <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	f040 8158 	bne.w	80042d0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2200      	movs	r2, #0
 8004024:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8004026:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	441a      	add	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004030:	429a      	cmp	r2, r3
 8004032:	d907      	bls.n	8004044 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004038:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e14c      	b.n	80042de <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2203      	movs	r2, #3
 8004048:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2200      	movs	r2, #0
 8004052:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	2b01      	cmp	r3, #1
 800405a:	d002      	beq.n	8004062 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	025b      	lsls	r3, r3, #9
 8004060:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004062:	f04f 33ff 	mov.w	r3, #4294967295
 8004066:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	025b      	lsls	r3, r3, #9
 800406c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800406e:	2390      	movs	r3, #144	; 0x90
 8004070:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8004072:	2300      	movs	r3, #0
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004076:	2300      	movs	r3, #0
 8004078:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800407a:	2301      	movs	r3, #1
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f107 0218 	add.w	r2, r7, #24
 8004086:	4611      	mov	r1, r2
 8004088:	4618      	mov	r0, r3
 800408a:	f000 ff54 	bl	8004f36 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	d90a      	bls.n	80040aa <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040a0:	4618      	mov	r0, r3
 80040a2:	f000 fffc 	bl	800509e <SDMMC_CmdWriteMultiBlock>
 80040a6:	6478      	str	r0, [r7, #68]	; 0x44
 80040a8:	e009      	b.n	80040be <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2210      	movs	r2, #16
 80040ae:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80040b6:	4618      	mov	r0, r3
 80040b8:	f000 ffcf 	bl	800505a <SDMMC_CmdWriteSingleBlock>
 80040bc:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80040be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d012      	beq.n	80040ea <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a87      	ldr	r2, [pc, #540]	; (80042e8 <HAL_SD_WriteBlocks+0x308>)
 80040ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d2:	431a      	orrs	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	e0f9      	b.n	80042de <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80040ee:	e065      	b.n	80041bc <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d040      	beq.n	8004180 <HAL_SD_WriteBlocks+0x1a0>
 80040fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004100:	2b00      	cmp	r3, #0
 8004102:	d03d      	beq.n	8004180 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8004104:	2300      	movs	r3, #0
 8004106:	643b      	str	r3, [r7, #64]	; 0x40
 8004108:	e037      	b.n	800417a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 800410a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004110:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004112:	3301      	adds	r3, #1
 8004114:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004116:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004118:	3b01      	subs	r3, #1
 800411a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800411c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	021a      	lsls	r2, r3, #8
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	4313      	orrs	r3, r2
 8004126:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412a:	3301      	adds	r3, #1
 800412c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800412e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004130:	3b01      	subs	r3, #1
 8004132:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8004134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	041a      	lsls	r2, r3, #16
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	4313      	orrs	r3, r2
 800413e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004142:	3301      	adds	r3, #1
 8004144:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8004146:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004148:	3b01      	subs	r3, #1
 800414a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800414c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	061a      	lsls	r2, r3, #24
 8004152:	697b      	ldr	r3, [r7, #20]
 8004154:	4313      	orrs	r3, r2
 8004156:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8004158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415a:	3301      	adds	r3, #1
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	3b01      	subs	r3, #1
 8004162:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f107 0214 	add.w	r2, r7, #20
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fe69 	bl	8004e46 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8004174:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004176:	3301      	adds	r3, #1
 8004178:	643b      	str	r3, [r7, #64]	; 0x40
 800417a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800417c:	2b07      	cmp	r3, #7
 800417e:	d9c4      	bls.n	800410a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8004180:	f7fe f97e 	bl	8002480 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800418c:	429a      	cmp	r2, r3
 800418e:	d902      	bls.n	8004196 <HAL_SD_WriteBlocks+0x1b6>
 8004190:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004192:	2b00      	cmp	r3, #0
 8004194:	d112      	bne.n	80041bc <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a53      	ldr	r2, [pc, #332]	; (80042e8 <HAL_SD_WriteBlocks+0x308>)
 800419c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041a4:	431a      	orrs	r2, r3
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2201      	movs	r2, #1
 80041ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e090      	b.n	80042de <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d092      	beq.n	80040f0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d022      	beq.n	800421e <HAL_SD_WriteBlocks+0x23e>
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d91f      	bls.n	800421e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d01b      	beq.n	800421e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 ff7a 	bl	80050e4 <SDMMC_CmdStopTransfer>
 80041f0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80041f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d012      	beq.n	800421e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a3a      	ldr	r2, [pc, #232]	; (80042e8 <HAL_SD_WriteBlocks+0x308>)
 80041fe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004204:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004206:	431a      	orrs	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2201      	movs	r2, #1
 8004210:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e05f      	b.n	80042de <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004224:	f003 0308 	and.w	r3, r3, #8
 8004228:	2b00      	cmp	r3, #0
 800422a:	d012      	beq.n	8004252 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a2d      	ldr	r2, [pc, #180]	; (80042e8 <HAL_SD_WriteBlocks+0x308>)
 8004232:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004238:	f043 0208 	orr.w	r2, r3, #8
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e045      	b.n	80042de <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d012      	beq.n	8004286 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a20      	ldr	r2, [pc, #128]	; (80042e8 <HAL_SD_WriteBlocks+0x308>)
 8004266:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	f043 0202 	orr.w	r2, r3, #2
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e02b      	b.n	80042de <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b00      	cmp	r3, #0
 8004292:	d012      	beq.n	80042ba <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a13      	ldr	r2, [pc, #76]	; (80042e8 <HAL_SD_WriteBlocks+0x308>)
 800429a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042a0:	f043 0210 	orr.w	r2, r3, #16
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2201      	movs	r2, #1
 80042ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e011      	b.n	80042de <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f240 523a 	movw	r2, #1338	; 0x53a
 80042c2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	e006      	b.n	80042de <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
  }
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3748      	adds	r7, #72	; 0x48
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	004005ff 	.word	0x004005ff

080042ec <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042fa:	0f9b      	lsrs	r3, r3, #30
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004306:	0e9b      	lsrs	r3, r3, #26
 8004308:	b2db      	uxtb	r3, r3
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	b2da      	uxtb	r2, r3
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004318:	0e1b      	lsrs	r3, r3, #24
 800431a:	b2db      	uxtb	r3, r3
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	b2da      	uxtb	r2, r3
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800432a:	0c1b      	lsrs	r3, r3, #16
 800432c:	b2da      	uxtb	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004336:	0a1b      	lsrs	r3, r3, #8
 8004338:	b2da      	uxtb	r2, r3
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004342:	b2da      	uxtb	r2, r3
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800434c:	0d1b      	lsrs	r3, r3, #20
 800434e:	b29a      	uxth	r2, r3
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004358:	0c1b      	lsrs	r3, r3, #16
 800435a:	b2db      	uxtb	r3, r3
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	b2da      	uxtb	r2, r3
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800436a:	0bdb      	lsrs	r3, r3, #15
 800436c:	b2db      	uxtb	r3, r3
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	b2da      	uxtb	r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800437c:	0b9b      	lsrs	r3, r3, #14
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f003 0301 	and.w	r3, r3, #1
 8004384:	b2da      	uxtb	r2, r3
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800438e:	0b5b      	lsrs	r3, r3, #13
 8004390:	b2db      	uxtb	r3, r3
 8004392:	f003 0301 	and.w	r3, r3, #1
 8004396:	b2da      	uxtb	r2, r3
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043a0:	0b1b      	lsrs	r3, r3, #12
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f003 0301 	and.w	r3, r3, #1
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2200      	movs	r2, #0
 80043b2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d163      	bne.n	8004484 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043c0:	009a      	lsls	r2, r3, #2
 80043c2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043c6:	4013      	ands	r3, r2
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80043cc:	0f92      	lsrs	r2, r2, #30
 80043ce:	431a      	orrs	r2, r3
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043d8:	0edb      	lsrs	r3, r3, #27
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	b2da      	uxtb	r2, r3
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043ea:	0e1b      	lsrs	r3, r3, #24
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	b2da      	uxtb	r2, r3
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043fc:	0d5b      	lsrs	r3, r3, #21
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	f003 0307 	and.w	r3, r3, #7
 8004404:	b2da      	uxtb	r2, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800440e:	0c9b      	lsrs	r3, r3, #18
 8004410:	b2db      	uxtb	r3, r3
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	b2da      	uxtb	r2, r3
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004420:	0bdb      	lsrs	r3, r3, #15
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	b2da      	uxtb	r2, r3
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	1c5a      	adds	r2, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	7e1b      	ldrb	r3, [r3, #24]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	3302      	adds	r3, #2
 8004444:	2201      	movs	r2, #1
 8004446:	fa02 f303 	lsl.w	r3, r2, r3
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800444e:	fb02 f203 	mul.w	r2, r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	7a1b      	ldrb	r3, [r3, #8]
 800445a:	b2db      	uxtb	r3, r3
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	2201      	movs	r2, #1
 8004462:	409a      	lsls	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004470:	0a52      	lsrs	r2, r2, #9
 8004472:	fb02 f203 	mul.w	r2, r2, r3
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004480:	661a      	str	r2, [r3, #96]	; 0x60
 8004482:	e031      	b.n	80044e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	2b01      	cmp	r3, #1
 800448a:	d11d      	bne.n	80044c8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004490:	041b      	lsls	r3, r3, #16
 8004492:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800449a:	0c1b      	lsrs	r3, r3, #16
 800449c:	431a      	orrs	r2, r3
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	3301      	adds	r3, #1
 80044a8:	029a      	lsls	r2, r3, #10
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80044bc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	661a      	str	r2, [r3, #96]	; 0x60
 80044c6:	e00f      	b.n	80044e8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a58      	ldr	r2, [pc, #352]	; (8004630 <HAL_SD_GetCardCSD+0x344>)
 80044ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e09d      	b.n	8004624 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044ec:	0b9b      	lsrs	r3, r3, #14
 80044ee:	b2db      	uxtb	r3, r3
 80044f0:	f003 0301 	and.w	r3, r3, #1
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044fe:	09db      	lsrs	r3, r3, #7
 8004500:	b2db      	uxtb	r3, r3
 8004502:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004506:	b2da      	uxtb	r2, r3
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004510:	b2db      	uxtb	r3, r3
 8004512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004516:	b2da      	uxtb	r2, r3
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004520:	0fdb      	lsrs	r3, r3, #31
 8004522:	b2da      	uxtb	r2, r3
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	0f5b      	lsrs	r3, r3, #29
 800452e:	b2db      	uxtb	r3, r3
 8004530:	f003 0303 	and.w	r3, r3, #3
 8004534:	b2da      	uxtb	r2, r3
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	0e9b      	lsrs	r3, r3, #26
 8004540:	b2db      	uxtb	r3, r3
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	b2da      	uxtb	r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004550:	0d9b      	lsrs	r3, r3, #22
 8004552:	b2db      	uxtb	r3, r3
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	b2da      	uxtb	r2, r3
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004562:	0d5b      	lsrs	r3, r3, #21
 8004564:	b2db      	uxtb	r3, r3
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	b2da      	uxtb	r2, r3
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457e:	0c1b      	lsrs	r3, r3, #16
 8004580:	b2db      	uxtb	r3, r3
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	b2da      	uxtb	r2, r3
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004592:	0bdb      	lsrs	r3, r3, #15
 8004594:	b2db      	uxtb	r3, r3
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	b2da      	uxtb	r2, r3
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	0b9b      	lsrs	r3, r3, #14
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	f003 0301 	and.w	r3, r3, #1
 80045ae:	b2da      	uxtb	r2, r3
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	0b5b      	lsrs	r3, r3, #13
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	b2da      	uxtb	r2, r3
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	0b1b      	lsrs	r3, r3, #12
 80045d0:	b2db      	uxtb	r3, r3
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	b2da      	uxtb	r2, r3
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	0a9b      	lsrs	r3, r3, #10
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	b2da      	uxtb	r2, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f6:	0a1b      	lsrs	r3, r3, #8
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	b2da      	uxtb	r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	085b      	lsrs	r3, r3, #1
 800460c:	b2db      	uxtb	r3, r3
 800460e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004612:	b2da      	uxtb	r2, r3
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004622:	2300      	movs	r3, #0
}
 8004624:	4618      	mov	r0, r3
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	004005ff 	.word	0x004005ff

08004634 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
 800463c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800468c:	b5b0      	push	{r4, r5, r7, lr}
 800468e:	b08e      	sub	sp, #56	; 0x38
 8004690:	af04      	add	r7, sp, #16
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2203      	movs	r2, #3
 80046a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a8:	2b03      	cmp	r3, #3
 80046aa:	d02e      	beq.n	800470a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046b2:	d106      	bne.n	80046c2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	639a      	str	r2, [r3, #56]	; 0x38
 80046c0:	e029      	b.n	8004716 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c8:	d10a      	bne.n	80046e0 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f000 fa1a 	bl	8004b04 <SD_WideBus_Enable>
 80046d0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	639a      	str	r2, [r3, #56]	; 0x38
 80046de:	e01a      	b.n	8004716 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10a      	bne.n	80046fc <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fa57 	bl	8004b9a <SD_WideBus_Disable>
 80046ec:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046f2:	6a3b      	ldr	r3, [r7, #32]
 80046f4:	431a      	orrs	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	639a      	str	r2, [r3, #56]	; 0x38
 80046fa:	e00c      	b.n	8004716 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004700:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	639a      	str	r2, [r3, #56]	; 0x38
 8004708:	e005      	b.n	8004716 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471a:	2b00      	cmp	r3, #0
 800471c:	d00b      	beq.n	8004736 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a26      	ldr	r2, [pc, #152]	; (80047bc <HAL_SD_ConfigWideBusOperation+0x130>)
 8004724:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2201      	movs	r2, #1
 800472a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8004734:	e01f      	b.n	8004776 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	68db      	ldr	r3, [r3, #12]
 8004746:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	695b      	ldr	r3, [r3, #20]
 8004750:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681d      	ldr	r5, [r3, #0]
 800475c:	466c      	mov	r4, sp
 800475e:	f107 0314 	add.w	r3, r7, #20
 8004762:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004766:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800476a:	f107 0308 	add.w	r3, r7, #8
 800476e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004770:	4628      	mov	r0, r5
 8004772:	f000 fb30 	bl	8004dd6 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800477e:	4618      	mov	r0, r3
 8004780:	f000 fc05 	bl	8004f8e <SDMMC_CmdBlockLength>
 8004784:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004786:	6a3b      	ldr	r3, [r7, #32]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d00c      	beq.n	80047a6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <HAL_SD_ConfigWideBusOperation+0x130>)
 8004792:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004798:	6a3b      	ldr	r3, [r7, #32]
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80047ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3728      	adds	r7, #40	; 0x28
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ba:	bf00      	nop
 80047bc:	004005ff 	.word	0x004005ff

080047c0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80047cc:	f107 030c 	add.w	r3, r7, #12
 80047d0:	4619      	mov	r1, r3
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f96e 	bl	8004ab4 <SD_SendStatus>
 80047d8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	431a      	orrs	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	0a5b      	lsrs	r3, r3, #9
 80047f0:	f003 030f 	and.w	r3, r3, #15
 80047f4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80047f6:	693b      	ldr	r3, [r7, #16]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}

08004800 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004800:	b5b0      	push	{r4, r5, r7, lr}
 8004802:	b094      	sub	sp, #80	; 0x50
 8004804:	af04      	add	r7, sp, #16
 8004806:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004808:	2301      	movs	r3, #1
 800480a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4618      	mov	r0, r3
 8004812:	f000 fb38 	bl	8004e86 <SDIO_GetPowerState>
 8004816:	4603      	mov	r3, r0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d102      	bne.n	8004822 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800481c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004820:	e0b6      	b.n	8004990 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	2b03      	cmp	r3, #3
 8004828:	d02f      	beq.n	800488a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fd62 	bl	80052f8 <SDMMC_CmdSendCID>
 8004834:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d001      	beq.n	8004840 <SD_InitCard+0x40>
    {
      return errorstate;
 800483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483e:	e0a7      	b.n	8004990 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f000 fb62 	bl	8004f10 <SDIO_GetResponse>
 800484c:	4602      	mov	r2, r0
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2104      	movs	r1, #4
 8004858:	4618      	mov	r0, r3
 800485a:	f000 fb59 	bl	8004f10 <SDIO_GetResponse>
 800485e:	4602      	mov	r2, r0
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	2108      	movs	r1, #8
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fb50 	bl	8004f10 <SDIO_GetResponse>
 8004870:	4602      	mov	r2, r0
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	210c      	movs	r1, #12
 800487c:	4618      	mov	r0, r3
 800487e:	f000 fb47 	bl	8004f10 <SDIO_GetResponse>
 8004882:	4602      	mov	r2, r0
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800488e:	2b03      	cmp	r3, #3
 8004890:	d00d      	beq.n	80048ae <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f107 020e 	add.w	r2, r7, #14
 800489a:	4611      	mov	r1, r2
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fd68 	bl	8005372 <SDMMC_CmdSetRelAdd>
 80048a2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <SD_InitCard+0xae>
    {
      return errorstate;
 80048aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048ac:	e070      	b.n	8004990 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048b2:	2b03      	cmp	r3, #3
 80048b4:	d036      	beq.n	8004924 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80048b6:	89fb      	ldrh	r3, [r7, #14]
 80048b8:	461a      	mov	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	4619      	mov	r1, r3
 80048ca:	4610      	mov	r0, r2
 80048cc:	f000 fd32 	bl	8005334 <SDMMC_CmdSendCSD>
 80048d0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80048d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <SD_InitCard+0xdc>
    {
      return errorstate;
 80048d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048da:	e059      	b.n	8004990 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fb14 	bl	8004f10 <SDIO_GetResponse>
 80048e8:	4602      	mov	r2, r0
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	2104      	movs	r1, #4
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fb0b 	bl	8004f10 <SDIO_GetResponse>
 80048fa:	4602      	mov	r2, r0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2108      	movs	r1, #8
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fb02 	bl	8004f10 <SDIO_GetResponse>
 800490c:	4602      	mov	r2, r0
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	210c      	movs	r1, #12
 8004918:	4618      	mov	r0, r3
 800491a:	f000 faf9 	bl	8004f10 <SDIO_GetResponse>
 800491e:	4602      	mov	r2, r0
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2104      	movs	r1, #4
 800492a:	4618      	mov	r0, r3
 800492c:	f000 faf0 	bl	8004f10 <SDIO_GetResponse>
 8004930:	4603      	mov	r3, r0
 8004932:	0d1a      	lsrs	r2, r3, #20
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004938:	f107 0310 	add.w	r3, r7, #16
 800493c:	4619      	mov	r1, r3
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f7ff fcd4 	bl	80042ec <HAL_SD_GetCardCSD>
 8004944:	4603      	mov	r3, r0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d002      	beq.n	8004950 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800494a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800494e:	e01f      	b.n	8004990 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004958:	041b      	lsls	r3, r3, #16
 800495a:	461a      	mov	r2, r3
 800495c:	f04f 0300 	mov.w	r3, #0
 8004960:	4608      	mov	r0, r1
 8004962:	f000 fbe1 	bl	8005128 <SDMMC_CmdSelDesel>
 8004966:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800496a:	2b00      	cmp	r3, #0
 800496c:	d001      	beq.n	8004972 <SD_InitCard+0x172>
  {
    return errorstate;
 800496e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004970:	e00e      	b.n	8004990 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681d      	ldr	r5, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	466c      	mov	r4, sp
 800497a:	f103 0210 	add.w	r2, r3, #16
 800497e:	ca07      	ldmia	r2, {r0, r1, r2}
 8004980:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004984:	3304      	adds	r3, #4
 8004986:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004988:	4628      	mov	r0, r5
 800498a:	f000 fa24 	bl	8004dd6 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3740      	adds	r7, #64	; 0x40
 8004994:	46bd      	mov	sp, r7
 8004996:	bdb0      	pop	{r4, r5, r7, pc}

08004998 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b086      	sub	sp, #24
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049a0:	2300      	movs	r3, #0
 80049a2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]
 80049a8:	2300      	movs	r3, #0
 80049aa:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4618      	mov	r0, r3
 80049b2:	f000 fbdc 	bl	800516e <SDMMC_CmdGoIdleState>
 80049b6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	e072      	b.n	8004aa8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fbef 	bl	80051aa <SDMMC_CmdOperCond>
 80049cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00d      	beq.n	80049f0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4618      	mov	r0, r3
 80049e0:	f000 fbc5 	bl	800516e <SDMMC_CmdGoIdleState>
 80049e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d004      	beq.n	80049f6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	e05b      	b.n	8004aa8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d137      	bne.n	8004a6e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2100      	movs	r1, #0
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fbef 	bl	80051e8 <SDMMC_CmdAppCommand>
 8004a0a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d02d      	beq.n	8004a6e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a16:	e047      	b.n	8004aa8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fbe2 	bl	80051e8 <SDMMC_CmdAppCommand>
 8004a24:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d001      	beq.n	8004a30 <SD_PowerON+0x98>
    {
      return errorstate;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	e03b      	b.n	8004aa8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	491e      	ldr	r1, [pc, #120]	; (8004ab0 <SD_PowerON+0x118>)
 8004a36:	4618      	mov	r0, r3
 8004a38:	f000 fbf8 	bl	800522c <SDMMC_CmdAppOperCommand>
 8004a3c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d002      	beq.n	8004a4a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004a44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004a48:	e02e      	b.n	8004aa8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2100      	movs	r1, #0
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fa5d 	bl	8004f10 <SDIO_GetResponse>
 8004a56:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	0fdb      	lsrs	r3, r3, #31
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <SD_PowerON+0xcc>
 8004a60:	2301      	movs	r3, #1
 8004a62:	e000      	b.n	8004a66 <SD_PowerON+0xce>
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]

    count++;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d802      	bhi.n	8004a7e <SD_PowerON+0xe6>
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0cc      	beq.n	8004a18 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d902      	bls.n	8004a8e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004a88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a8c:	e00c      	b.n	8004aa8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	645a      	str	r2, [r3, #68]	; 0x44
 8004a9e:	e002      	b.n	8004aa6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3718      	adds	r7, #24
 8004aac:	46bd      	mov	sp, r7
 8004aae:	bd80      	pop	{r7, pc}
 8004ab0:	c1100000 	.word	0xc1100000

08004ab4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d102      	bne.n	8004aca <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004ac4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ac8:	e018      	b.n	8004afc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681a      	ldr	r2, [r3, #0]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ad2:	041b      	lsls	r3, r3, #16
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4610      	mov	r0, r2
 8004ad8:	f000 fc6c 	bl	80053b4 <SDMMC_CmdSendStatus>
 8004adc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	e009      	b.n	8004afc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2100      	movs	r1, #0
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fa0e 	bl	8004f10 <SDIO_GetResponse>
 8004af4:	4602      	mov	r2, r0
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004afa:	2300      	movs	r3, #0
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	2300      	movs	r3, #0
 8004b12:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2100      	movs	r1, #0
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f9f8 	bl	8004f10 <SDIO_GetResponse>
 8004b20:	4603      	mov	r3, r0
 8004b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b2a:	d102      	bne.n	8004b32 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004b2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004b30:	e02f      	b.n	8004b92 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004b32:	f107 030c 	add.w	r3, r7, #12
 8004b36:	4619      	mov	r1, r3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 f879 	bl	8004c30 <SD_FindSCR>
 8004b3e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d001      	beq.n	8004b4a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	e023      	b.n	8004b92 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01c      	beq.n	8004b8e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b5c:	041b      	lsls	r3, r3, #16
 8004b5e:	4619      	mov	r1, r3
 8004b60:	4610      	mov	r0, r2
 8004b62:	f000 fb41 	bl	80051e8 <SDMMC_CmdAppCommand>
 8004b66:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	e00f      	b.n	8004b92 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2102      	movs	r1, #2
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fb7a 	bl	8005272 <SDMMC_CmdBusWidth>
 8004b7e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d001      	beq.n	8004b8a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	e003      	b.n	8004b92 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	e001      	b.n	8004b92 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004b8e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b086      	sub	sp, #24
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2100      	movs	r1, #0
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f000 f9ad 	bl	8004f10 <SDIO_GetResponse>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bc0:	d102      	bne.n	8004bc8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8004bc2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004bc6:	e02f      	b.n	8004c28 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8004bc8:	f107 030c 	add.w	r3, r7, #12
 8004bcc:	4619      	mov	r1, r3
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 f82e 	bl	8004c30 <SD_FindSCR>
 8004bd4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8004bdc:	697b      	ldr	r3, [r7, #20]
 8004bde:	e023      	b.n	8004c28 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d01c      	beq.n	8004c24 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	4610      	mov	r0, r2
 8004bf8:	f000 faf6 	bl	80051e8 <SDMMC_CmdAppCommand>
 8004bfc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	e00f      	b.n	8004c28 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f000 fb2f 	bl	8005272 <SDMMC_CmdBusWidth>
 8004c14:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8004c1c:	697b      	ldr	r3, [r7, #20]
 8004c1e:	e003      	b.n	8004c28 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8004c20:	2300      	movs	r3, #0
 8004c22:	e001      	b.n	8004c28 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004c24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b08f      	sub	sp, #60	; 0x3c
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8004c3a:	f7fd fc21 	bl	8002480 <HAL_GetTick>
 8004c3e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8004c44:	2300      	movs	r3, #0
 8004c46:	60bb      	str	r3, [r7, #8]
 8004c48:	2300      	movs	r3, #0
 8004c4a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2108      	movs	r1, #8
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 f999 	bl	8004f8e <SDMMC_CmdBlockLength>
 8004c5c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <SD_FindSCR+0x38>
  {
    return errorstate;
 8004c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c66:	e0b2      	b.n	8004dce <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f000 fab7 	bl	80051e8 <SDMMC_CmdAppCommand>
 8004c7a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d001      	beq.n	8004c86 <SD_FindSCR+0x56>
  {
    return errorstate;
 8004c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c84:	e0a3      	b.n	8004dce <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8004c86:	f04f 33ff 	mov.w	r3, #4294967295
 8004c8a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8004c90:	2330      	movs	r3, #48	; 0x30
 8004c92:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8004c94:	2302      	movs	r3, #2
 8004c96:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f107 0210 	add.w	r2, r7, #16
 8004ca8:	4611      	mov	r1, r2
 8004caa:	4618      	mov	r0, r3
 8004cac:	f000 f943 	bl	8004f36 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fafe 	bl	80052b6 <SDMMC_CmdSendSCR>
 8004cba:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8004cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d02a      	beq.n	8004d18 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8004cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc4:	e083      	b.n	8004dce <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ccc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d00f      	beq.n	8004cf4 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6819      	ldr	r1, [r3, #0]
 8004cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	f107 0208 	add.w	r2, r7, #8
 8004ce0:	18d4      	adds	r4, r2, r3
 8004ce2:	4608      	mov	r0, r1
 8004ce4:	f000 f8a2 	bl	8004e2c <SDIO_ReadFIFO>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	6023      	str	r3, [r4, #0]
      index++;
 8004cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cee:	3301      	adds	r3, #1
 8004cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8004cf2:	e006      	b.n	8004d02 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d012      	beq.n	8004d28 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8004d02:	f7fd fbbd 	bl	8002480 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d10:	d102      	bne.n	8004d18 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8004d12:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004d16:	e05a      	b.n	8004dce <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d1e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0cf      	beq.n	8004cc6 <SD_FindSCR+0x96>
 8004d26:	e000      	b.n	8004d2a <SD_FindSCR+0xfa>
      break;
 8004d28:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2208      	movs	r2, #8
 8004d3e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8004d40:	2308      	movs	r3, #8
 8004d42:	e044      	b.n	8004dce <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d005      	beq.n	8004d5e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2202      	movs	r2, #2
 8004d58:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e037      	b.n	8004dce <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d64:	f003 0320 	and.w	r3, r3, #32
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d005      	beq.n	8004d78 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2220      	movs	r2, #32
 8004d72:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004d74:	2320      	movs	r3, #32
 8004d76:	e02a      	b.n	8004dce <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004d80:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	061a      	lsls	r2, r3, #24
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d8e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004d98:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	0e1b      	lsrs	r3, r3, #24
 8004d9e:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8004da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da2:	601a      	str	r2, [r3, #0]
    scr++;
 8004da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004da6:	3304      	adds	r3, #4
 8004da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	061a      	lsls	r2, r3, #24
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	021b      	lsls	r3, r3, #8
 8004db2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004db6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	0a1b      	lsrs	r3, r3, #8
 8004dbc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004dc0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	0e1b      	lsrs	r3, r3, #24
 8004dc6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8004dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dca:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	373c      	adds	r7, #60	; 0x3c
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd90      	pop	{r4, r7, pc}

08004dd6 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004dd6:	b084      	sub	sp, #16
 8004dd8:	b480      	push	{r7}
 8004dda:	b085      	sub	sp, #20
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	f107 001c 	add.w	r0, r7, #28
 8004de4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004de8:	2300      	movs	r3, #0
 8004dea:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004dec:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004dee:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004df0:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8004df4:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8004df8:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004dfc:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004e00:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8004e10:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004e1c:	2300      	movs	r3, #0
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3714      	adds	r7, #20
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	b004      	add	sp, #16
 8004e2a:	4770      	bx	lr

08004e2c <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004e46:	b480      	push	{r7}
 8004e48:	b083      	sub	sp, #12
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2203      	movs	r2, #3
 8004e74:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8004e76:	2002      	movs	r0, #2
 8004e78:	f7fd fb0e 	bl	8002498 <HAL_Delay>
  
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f003 0303 	and.w	r3, r3, #3
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	370c      	adds	r7, #12
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr

08004ea2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004ea2:	b480      	push	{r7}
 8004ea4:	b085      	sub	sp, #20
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ec0:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004ec6:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004ecc:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004edc:	f023 030f 	bic.w	r3, r3, #15
 8004ee0:	68fa      	ldr	r2, [r7, #12]
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	b2db      	uxtb	r3, r3
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr

08004f10 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b085      	sub	sp, #20
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3314      	adds	r3, #20
 8004f1e:	461a      	mov	r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	4413      	add	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
}  
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3714      	adds	r7, #20
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f34:	4770      	bx	lr

08004f36 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004f36:	b480      	push	{r7}
 8004f38:	b085      	sub	sp, #20
 8004f3a:	af00      	add	r7, sp, #0
 8004f3c:	6078      	str	r0, [r7, #4]
 8004f3e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f5c:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004f62:	431a      	orrs	r2, r3
                       Data->DPSM);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8004f68:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f74:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0

}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b088      	sub	sp, #32
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004f9c:	2310      	movs	r3, #16
 8004f9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fa0:	2340      	movs	r3, #64	; 0x40
 8004fa2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004fae:	f107 0308 	add.w	r3, r7, #8
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f7ff ff74 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fbe:	2110      	movs	r1, #16
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fa45 	bl	8005450 <SDMMC_GetCmdResp1>
 8004fc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004fc8:	69fb      	ldr	r3, [r7, #28]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3720      	adds	r7, #32
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b088      	sub	sp, #32
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004fe0:	2311      	movs	r3, #17
 8004fe2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004fe4:	2340      	movs	r3, #64	; 0x40
 8004fe6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004fec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ff0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ff2:	f107 0308 	add.w	r3, r7, #8
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff ff52 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005002:	2111      	movs	r1, #17
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f000 fa23 	bl	8005450 <SDMMC_GetCmdResp1>
 800500a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800500c:	69fb      	ldr	r3, [r7, #28]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3720      	adds	r7, #32
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b088      	sub	sp, #32
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005024:	2312      	movs	r3, #18
 8005026:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005028:	2340      	movs	r3, #64	; 0x40
 800502a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800502c:	2300      	movs	r3, #0
 800502e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005034:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005036:	f107 0308 	add.w	r3, r7, #8
 800503a:	4619      	mov	r1, r3
 800503c:	6878      	ldr	r0, [r7, #4]
 800503e:	f7ff ff30 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8005042:	f241 3288 	movw	r2, #5000	; 0x1388
 8005046:	2112      	movs	r1, #18
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 fa01 	bl	8005450 <SDMMC_GetCmdResp1>
 800504e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005050:	69fb      	ldr	r3, [r7, #28]
}
 8005052:	4618      	mov	r0, r3
 8005054:	3720      	adds	r7, #32
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b088      	sub	sp, #32
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8005068:	2318      	movs	r3, #24
 800506a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800506c:	2340      	movs	r3, #64	; 0x40
 800506e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005070:	2300      	movs	r3, #0
 8005072:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005074:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005078:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800507a:	f107 0308 	add.w	r3, r7, #8
 800507e:	4619      	mov	r1, r3
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f7ff ff0e 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005086:	f241 3288 	movw	r2, #5000	; 0x1388
 800508a:	2118      	movs	r1, #24
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 f9df 	bl	8005450 <SDMMC_GetCmdResp1>
 8005092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005094:	69fb      	ldr	r3, [r7, #28]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3720      	adds	r7, #32
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b088      	sub	sp, #32
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80050ac:	2319      	movs	r3, #25
 80050ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050b0:	2340      	movs	r3, #64	; 0x40
 80050b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80050be:	f107 0308 	add.w	r3, r7, #8
 80050c2:	4619      	mov	r1, r3
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f7ff feec 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80050ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80050ce:	2119      	movs	r1, #25
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f000 f9bd 	bl	8005450 <SDMMC_GetCmdResp1>
 80050d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80050d8:	69fb      	ldr	r3, [r7, #28]
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
	...

080050e4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80050f0:	230c      	movs	r3, #12
 80050f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80050f4:	2340      	movs	r3, #64	; 0x40
 80050f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80050f8:	2300      	movs	r3, #0
 80050fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80050fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005100:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005102:	f107 0308 	add.w	r3, r7, #8
 8005106:	4619      	mov	r1, r3
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7ff feca 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800510e:	4a05      	ldr	r2, [pc, #20]	; (8005124 <SDMMC_CmdStopTransfer+0x40>)
 8005110:	210c      	movs	r1, #12
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f99c 	bl	8005450 <SDMMC_GetCmdResp1>
 8005118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800511a:	69fb      	ldr	r3, [r7, #28]
}
 800511c:	4618      	mov	r0, r3
 800511e:	3720      	adds	r7, #32
 8005120:	46bd      	mov	sp, r7
 8005122:	bd80      	pop	{r7, pc}
 8005124:	05f5e100 	.word	0x05f5e100

08005128 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	; 0x28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005138:	2307      	movs	r3, #7
 800513a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800513c:	2340      	movs	r3, #64	; 0x40
 800513e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005140:	2300      	movs	r3, #0
 8005142:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005148:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800514a:	f107 0310 	add.w	r3, r7, #16
 800514e:	4619      	mov	r1, r3
 8005150:	68f8      	ldr	r0, [r7, #12]
 8005152:	f7ff fea6 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8005156:	f241 3288 	movw	r2, #5000	; 0x1388
 800515a:	2107      	movs	r1, #7
 800515c:	68f8      	ldr	r0, [r7, #12]
 800515e:	f000 f977 	bl	8005450 <SDMMC_GetCmdResp1>
 8005162:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8005164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005166:	4618      	mov	r0, r3
 8005168:	3728      	adds	r7, #40	; 0x28
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}

0800516e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b088      	sub	sp, #32
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800517e:	2300      	movs	r3, #0
 8005180:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005186:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800518a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800518c:	f107 0308 	add.w	r3, r7, #8
 8005190:	4619      	mov	r1, r3
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f7ff fe85 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f92d 	bl	80053f8 <SDMMC_GetCmdError>
 800519e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051a0:	69fb      	ldr	r3, [r7, #28]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3720      	adds	r7, #32
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}

080051aa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	b088      	sub	sp, #32
 80051ae:	af00      	add	r7, sp, #0
 80051b0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80051b2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80051b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80051b8:	2308      	movs	r3, #8
 80051ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051bc:	2340      	movs	r3, #64	; 0x40
 80051be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80051c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80051c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80051ca:	f107 0308 	add.w	r3, r7, #8
 80051ce:	4619      	mov	r1, r3
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff fe66 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fb24 	bl	8005824 <SDMMC_GetCmdResp7>
 80051dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80051de:	69fb      	ldr	r3, [r7, #28]
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3720      	adds	r7, #32
 80051e4:	46bd      	mov	sp, r7
 80051e6:	bd80      	pop	{r7, pc}

080051e8 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b088      	sub	sp, #32
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80051f6:	2337      	movs	r3, #55	; 0x37
 80051f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80051fa:	2340      	movs	r3, #64	; 0x40
 80051fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80051fe:	2300      	movs	r3, #0
 8005200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005206:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005208:	f107 0308 	add.w	r3, r7, #8
 800520c:	4619      	mov	r1, r3
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fe47 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005214:	f241 3288 	movw	r2, #5000	; 0x1388
 8005218:	2137      	movs	r1, #55	; 0x37
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f918 	bl	8005450 <SDMMC_GetCmdResp1>
 8005220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005222:	69fb      	ldr	r3, [r7, #28]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3720      	adds	r7, #32
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b088      	sub	sp, #32
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800523c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8005242:	2329      	movs	r3, #41	; 0x29
 8005244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005246:	2340      	movs	r3, #64	; 0x40
 8005248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800524e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005252:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005254:	f107 0308 	add.w	r3, r7, #8
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fe21 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fa2b 	bl	80056bc <SDMMC_GetCmdResp3>
 8005266:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005268:	69fb      	ldr	r3, [r7, #28]
}
 800526a:	4618      	mov	r0, r3
 800526c:	3720      	adds	r7, #32
 800526e:	46bd      	mov	sp, r7
 8005270:	bd80      	pop	{r7, pc}

08005272 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8005272:	b580      	push	{r7, lr}
 8005274:	b088      	sub	sp, #32
 8005276:	af00      	add	r7, sp, #0
 8005278:	6078      	str	r0, [r7, #4]
 800527a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8005280:	2306      	movs	r3, #6
 8005282:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005284:	2340      	movs	r3, #64	; 0x40
 8005286:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800528c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005290:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005292:	f107 0308 	add.w	r3, r7, #8
 8005296:	4619      	mov	r1, r3
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f7ff fe02 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800529e:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a2:	2106      	movs	r1, #6
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	f000 f8d3 	bl	8005450 <SDMMC_GetCmdResp1>
 80052aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ac:	69fb      	ldr	r3, [r7, #28]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3720      	adds	r7, #32
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80052b6:	b580      	push	{r7, lr}
 80052b8:	b088      	sub	sp, #32
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80052be:	2300      	movs	r3, #0
 80052c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80052c2:	2333      	movs	r3, #51	; 0x33
 80052c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052c6:	2340      	movs	r3, #64	; 0x40
 80052c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052ca:	2300      	movs	r3, #0
 80052cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052d4:	f107 0308 	add.w	r3, r7, #8
 80052d8:	4619      	mov	r1, r3
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f7ff fde1 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80052e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e4:	2133      	movs	r1, #51	; 0x33
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 f8b2 	bl	8005450 <SDMMC_GetCmdResp1>
 80052ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052ee:	69fb      	ldr	r3, [r7, #28]
}
 80052f0:	4618      	mov	r0, r3
 80052f2:	3720      	adds	r7, #32
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}

080052f8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b088      	sub	sp, #32
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005304:	2302      	movs	r3, #2
 8005306:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005308:	23c0      	movs	r3, #192	; 0xc0
 800530a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005310:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005314:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005316:	f107 0308 	add.w	r3, r7, #8
 800531a:	4619      	mov	r1, r3
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7ff fdc0 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f982 	bl	800562c <SDMMC_GetCmdResp2>
 8005328:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800532a:	69fb      	ldr	r3, [r7, #28]
}
 800532c:	4618      	mov	r0, r3
 800532e:	3720      	adds	r7, #32
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b088      	sub	sp, #32
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8005342:	2309      	movs	r3, #9
 8005344:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005346:	23c0      	movs	r3, #192	; 0xc0
 8005348:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800534a:	2300      	movs	r3, #0
 800534c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800534e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005352:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005354:	f107 0308 	add.w	r3, r7, #8
 8005358:	4619      	mov	r1, r3
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f7ff fda1 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 f963 	bl	800562c <SDMMC_GetCmdResp2>
 8005366:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005368:	69fb      	ldr	r3, [r7, #28]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3720      	adds	r7, #32
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b088      	sub	sp, #32
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
 800537a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8005380:	2303      	movs	r3, #3
 8005382:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005384:	2340      	movs	r3, #64	; 0x40
 8005386:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005388:	2300      	movs	r3, #0
 800538a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800538c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005390:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005392:	f107 0308 	add.w	r3, r7, #8
 8005396:	4619      	mov	r1, r3
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f7ff fd82 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800539e:	683a      	ldr	r2, [r7, #0]
 80053a0:	2103      	movs	r1, #3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f9c8 	bl	8005738 <SDMMC_GetCmdResp6>
 80053a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053aa:	69fb      	ldr	r3, [r7, #28]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3720      	adds	r7, #32
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b088      	sub	sp, #32
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80053c2:	230d      	movs	r3, #13
 80053c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80053c6:	2340      	movs	r3, #64	; 0x40
 80053c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053ca:	2300      	movs	r3, #0
 80053cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053d4:	f107 0308 	add.w	r3, r7, #8
 80053d8:	4619      	mov	r1, r3
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7ff fd61 	bl	8004ea2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80053e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053e4:	210d      	movs	r1, #13
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f000 f832 	bl	8005450 <SDMMC_GetCmdResp1>
 80053ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80053ee:	69fb      	ldr	r3, [r7, #28]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3720      	adds	r7, #32
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005400:	4b11      	ldr	r3, [pc, #68]	; (8005448 <SDMMC_GetCmdError+0x50>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a11      	ldr	r2, [pc, #68]	; (800544c <SDMMC_GetCmdError+0x54>)
 8005406:	fba2 2303 	umull	r2, r3, r2, r3
 800540a:	0a5b      	lsrs	r3, r3, #9
 800540c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005410:	fb02 f303 	mul.w	r3, r2, r3
 8005414:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	1e5a      	subs	r2, r3, #1
 800541a:	60fa      	str	r2, [r7, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005420:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005424:	e009      	b.n	800543a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800542e:	2b00      	cmp	r3, #0
 8005430:	d0f1      	beq.n	8005416 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	22c5      	movs	r2, #197	; 0xc5
 8005436:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000004 	.word	0x20000004
 800544c:	10624dd3 	.word	0x10624dd3

08005450 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	460b      	mov	r3, r1
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800545e:	4b70      	ldr	r3, [pc, #448]	; (8005620 <SDMMC_GetCmdResp1+0x1d0>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a70      	ldr	r2, [pc, #448]	; (8005624 <SDMMC_GetCmdResp1+0x1d4>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	0a5a      	lsrs	r2, r3, #9
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	fb02 f303 	mul.w	r3, r2, r3
 8005470:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005472:	69fb      	ldr	r3, [r7, #28]
 8005474:	1e5a      	subs	r2, r3, #1
 8005476:	61fa      	str	r2, [r7, #28]
 8005478:	2b00      	cmp	r3, #0
 800547a:	d102      	bne.n	8005482 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800547c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005480:	e0c9      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005486:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0ef      	beq.n	8005472 <SDMMC_GetCmdResp1+0x22>
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005498:	2b00      	cmp	r3, #0
 800549a:	d1ea      	bne.n	8005472 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054a0:	f003 0304 	and.w	r3, r3, #4
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d004      	beq.n	80054b2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2204      	movs	r2, #4
 80054ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80054ae:	2304      	movs	r3, #4
 80054b0:	e0b1      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d004      	beq.n	80054c8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2201      	movs	r2, #1
 80054c2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e0a6      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	22c5      	movs	r2, #197	; 0xc5
 80054cc:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f7ff fd11 	bl	8004ef6 <SDIO_GetCommandResponse>
 80054d4:	4603      	mov	r3, r0
 80054d6:	461a      	mov	r2, r3
 80054d8:	7afb      	ldrb	r3, [r7, #11]
 80054da:	4293      	cmp	r3, r2
 80054dc:	d001      	beq.n	80054e2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80054de:	2301      	movs	r3, #1
 80054e0:	e099      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80054e2:	2100      	movs	r1, #0
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f7ff fd13 	bl	8004f10 <SDIO_GetResponse>
 80054ea:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80054ec:	697a      	ldr	r2, [r7, #20]
 80054ee:	4b4e      	ldr	r3, [pc, #312]	; (8005628 <SDMMC_GetCmdResp1+0x1d8>)
 80054f0:	4013      	ands	r3, r2
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80054f6:	2300      	movs	r3, #0
 80054f8:	e08d      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	da02      	bge.n	8005506 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005500:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005504:	e087      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005510:	2340      	movs	r3, #64	; 0x40
 8005512:	e080      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800551a:	2b00      	cmp	r3, #0
 800551c:	d001      	beq.n	8005522 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800551e:	2380      	movs	r3, #128	; 0x80
 8005520:	e079      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d002      	beq.n	8005532 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800552c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005530:	e071      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800553c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005540:	e069      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005548:	2b00      	cmp	r3, #0
 800554a:	d002      	beq.n	8005552 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800554c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005550:	e061      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800555c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005560:	e059      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005568:	2b00      	cmp	r3, #0
 800556a:	d002      	beq.n	8005572 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800556c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005570:	e051      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8005572:	697b      	ldr	r3, [r7, #20]
 8005574:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800557c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005580:	e049      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d002      	beq.n	8005592 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800558c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005590:	e041      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005598:	2b00      	cmp	r3, #0
 800559a:	d002      	beq.n	80055a2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800559c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a0:	e039      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d002      	beq.n	80055b2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80055ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80055b0:	e031      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80055bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80055c0:	e029      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d002      	beq.n	80055d2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80055cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80055d0:	e021      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d002      	beq.n	80055e2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80055dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80055e0:	e019      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80055ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80055f0:	e011      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80055fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005600:	e009      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b00      	cmp	r3, #0
 800560a:	d002      	beq.n	8005612 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800560c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005610:	e001      	b.n	8005616 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005612:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000004 	.word	0x20000004
 8005624:	10624dd3 	.word	0x10624dd3
 8005628:	fdffe008 	.word	0xfdffe008

0800562c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005634:	4b1f      	ldr	r3, [pc, #124]	; (80056b4 <SDMMC_GetCmdResp2+0x88>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <SDMMC_GetCmdResp2+0x8c>)
 800563a:	fba2 2303 	umull	r2, r3, r2, r3
 800563e:	0a5b      	lsrs	r3, r3, #9
 8005640:	f241 3288 	movw	r2, #5000	; 0x1388
 8005644:	fb02 f303 	mul.w	r3, r2, r3
 8005648:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	1e5a      	subs	r2, r3, #1
 800564e:	60fa      	str	r2, [r7, #12]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d102      	bne.n	800565a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005654:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005658:	e026      	b.n	80056a8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005666:	2b00      	cmp	r3, #0
 8005668:	d0ef      	beq.n	800564a <SDMMC_GetCmdResp2+0x1e>
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1ea      	bne.n	800564a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d004      	beq.n	800568a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2204      	movs	r2, #4
 8005684:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005686:	2304      	movs	r3, #4
 8005688:	e00e      	b.n	80056a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b00      	cmp	r3, #0
 8005694:	d004      	beq.n	80056a0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2201      	movs	r2, #1
 800569a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800569c:	2301      	movs	r3, #1
 800569e:	e003      	b.n	80056a8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	22c5      	movs	r2, #197	; 0xc5
 80056a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80056a6:	2300      	movs	r3, #0
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr
 80056b4:	20000004 	.word	0x20000004
 80056b8:	10624dd3 	.word	0x10624dd3

080056bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80056bc:	b480      	push	{r7}
 80056be:	b085      	sub	sp, #20
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80056c4:	4b1a      	ldr	r3, [pc, #104]	; (8005730 <SDMMC_GetCmdResp3+0x74>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4a1a      	ldr	r2, [pc, #104]	; (8005734 <SDMMC_GetCmdResp3+0x78>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	0a5b      	lsrs	r3, r3, #9
 80056d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d4:	fb02 f303 	mul.w	r3, r2, r3
 80056d8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	1e5a      	subs	r2, r3, #1
 80056de:	60fa      	str	r2, [r7, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d102      	bne.n	80056ea <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056e4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056e8:	e01b      	b.n	8005722 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ee:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0ef      	beq.n	80056da <SDMMC_GetCmdResp3+0x1e>
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1ea      	bne.n	80056da <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2204      	movs	r2, #4
 8005714:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005716:	2304      	movs	r3, #4
 8005718:	e003      	b.n	8005722 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	22c5      	movs	r2, #197	; 0xc5
 800571e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005720:	2300      	movs	r3, #0
}
 8005722:	4618      	mov	r0, r3
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr
 800572e:	bf00      	nop
 8005730:	20000004 	.word	0x20000004
 8005734:	10624dd3 	.word	0x10624dd3

08005738 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b088      	sub	sp, #32
 800573c:	af00      	add	r7, sp, #0
 800573e:	60f8      	str	r0, [r7, #12]
 8005740:	460b      	mov	r3, r1
 8005742:	607a      	str	r2, [r7, #4]
 8005744:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005746:	4b35      	ldr	r3, [pc, #212]	; (800581c <SDMMC_GetCmdResp6+0xe4>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a35      	ldr	r2, [pc, #212]	; (8005820 <SDMMC_GetCmdResp6+0xe8>)
 800574c:	fba2 2303 	umull	r2, r3, r2, r3
 8005750:	0a5b      	lsrs	r3, r3, #9
 8005752:	f241 3288 	movw	r2, #5000	; 0x1388
 8005756:	fb02 f303 	mul.w	r3, r2, r3
 800575a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	1e5a      	subs	r2, r3, #1
 8005760:	61fa      	str	r2, [r7, #28]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d102      	bne.n	800576c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005766:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800576a:	e052      	b.n	8005812 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005770:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0ef      	beq.n	800575c <SDMMC_GetCmdResp6+0x24>
 800577c:	69bb      	ldr	r3, [r7, #24]
 800577e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1ea      	bne.n	800575c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800578a:	f003 0304 	and.w	r3, r3, #4
 800578e:	2b00      	cmp	r3, #0
 8005790:	d004      	beq.n	800579c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2204      	movs	r2, #4
 8005796:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005798:	2304      	movs	r3, #4
 800579a:	e03a      	b.n	8005812 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d004      	beq.n	80057b2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2201      	movs	r2, #1
 80057ac:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e02f      	b.n	8005812 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f7ff fb9f 	bl	8004ef6 <SDIO_GetCommandResponse>
 80057b8:	4603      	mov	r3, r0
 80057ba:	461a      	mov	r2, r3
 80057bc:	7afb      	ldrb	r3, [r7, #11]
 80057be:	4293      	cmp	r3, r2
 80057c0:	d001      	beq.n	80057c6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80057c2:	2301      	movs	r3, #1
 80057c4:	e025      	b.n	8005812 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	22c5      	movs	r2, #197	; 0xc5
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80057cc:	2100      	movs	r1, #0
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f7ff fb9e 	bl	8004f10 <SDIO_GetResponse>
 80057d4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d106      	bne.n	80057ee <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	0c1b      	lsrs	r3, r3, #16
 80057e4:	b29a      	uxth	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80057ea:	2300      	movs	r3, #0
 80057ec:	e011      	b.n	8005812 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80057f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057fc:	e009      	b.n	8005812 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d002      	beq.n	800580e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800580c:	e001      	b.n	8005812 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800580e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005812:	4618      	mov	r0, r3
 8005814:	3720      	adds	r7, #32
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	20000004 	.word	0x20000004
 8005820:	10624dd3 	.word	0x10624dd3

08005824 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800582c:	4b22      	ldr	r3, [pc, #136]	; (80058b8 <SDMMC_GetCmdResp7+0x94>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a22      	ldr	r2, [pc, #136]	; (80058bc <SDMMC_GetCmdResp7+0x98>)
 8005832:	fba2 2303 	umull	r2, r3, r2, r3
 8005836:	0a5b      	lsrs	r3, r3, #9
 8005838:	f241 3288 	movw	r2, #5000	; 0x1388
 800583c:	fb02 f303 	mul.w	r3, r2, r3
 8005840:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	1e5a      	subs	r2, r3, #1
 8005846:	60fa      	str	r2, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d102      	bne.n	8005852 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800584c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005850:	e02c      	b.n	80058ac <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005856:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800585e:	2b00      	cmp	r3, #0
 8005860:	d0ef      	beq.n	8005842 <SDMMC_GetCmdResp7+0x1e>
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1ea      	bne.n	8005842 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005870:	f003 0304 	and.w	r3, r3, #4
 8005874:	2b00      	cmp	r3, #0
 8005876:	d004      	beq.n	8005882 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2204      	movs	r2, #4
 800587c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800587e:	2304      	movs	r3, #4
 8005880:	e014      	b.n	80058ac <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005886:	f003 0301 	and.w	r3, r3, #1
 800588a:	2b00      	cmp	r3, #0
 800588c:	d004      	beq.n	8005898 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005894:	2301      	movs	r3, #1
 8005896:	e009      	b.n	80058ac <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800589c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2240      	movs	r2, #64	; 0x40
 80058a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80058aa:	2300      	movs	r3, #0
  
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3714      	adds	r7, #20
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr
 80058b8:	20000004 	.word	0x20000004
 80058bc:	10624dd3 	.word	0x10624dd3

080058c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80058c4:	4904      	ldr	r1, [pc, #16]	; (80058d8 <MX_FATFS_Init+0x18>)
 80058c6:	4805      	ldr	r0, [pc, #20]	; (80058dc <MX_FATFS_Init+0x1c>)
 80058c8:	f003 fbf0 	bl	80090ac <FATFS_LinkDriver>
 80058cc:	4603      	mov	r3, r0
 80058ce:	461a      	mov	r2, r3
 80058d0:	4b03      	ldr	r3, [pc, #12]	; (80058e0 <MX_FATFS_Init+0x20>)
 80058d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80058d4:	bf00      	nop
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20000a68 	.word	0x20000a68
 80058dc:	08013c18 	.word	0x08013c18
 80058e0:	20000a64 	.word	0x20000a64

080058e4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80058e8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80058fe:	f000 f879 	bl	80059f4 <BSP_SD_IsDetected>
 8005902:	4603      	mov	r3, r0
 8005904:	2b01      	cmp	r3, #1
 8005906:	d001      	beq.n	800590c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e012      	b.n	8005932 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800590c:	480b      	ldr	r0, [pc, #44]	; (800593c <BSP_SD_Init+0x48>)
 800590e:	f7fe f8db 	bl	8003ac8 <HAL_SD_Init>
 8005912:	4603      	mov	r3, r0
 8005914:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005916:	79fb      	ldrb	r3, [r7, #7]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d109      	bne.n	8005930 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800591c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005920:	4806      	ldr	r0, [pc, #24]	; (800593c <BSP_SD_Init+0x48>)
 8005922:	f7fe feb3 	bl	800468c <HAL_SD_ConfigWideBusOperation>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d001      	beq.n	8005930 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005930:	79fb      	ldrb	r3, [r7, #7]
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000980 	.word	0x20000980

08005940 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b088      	sub	sp, #32
 8005944:	af02      	add	r7, sp, #8
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
 800594c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005952:	683b      	ldr	r3, [r7, #0]
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	68f9      	ldr	r1, [r7, #12]
 800595c:	4806      	ldr	r0, [pc, #24]	; (8005978 <BSP_SD_ReadBlocks+0x38>)
 800595e:	f7fe f961 	bl	8003c24 <HAL_SD_ReadBlocks>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800596c:	7dfb      	ldrb	r3, [r7, #23]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3718      	adds	r7, #24
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20000980 	.word	0x20000980

0800597c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b088      	sub	sp, #32
 8005980:	af02      	add	r7, sp, #8
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	9300      	str	r3, [sp, #0]
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	68f9      	ldr	r1, [r7, #12]
 8005998:	4806      	ldr	r0, [pc, #24]	; (80059b4 <BSP_SD_WriteBlocks+0x38>)
 800599a:	f7fe fb21 	bl	8003fe0 <HAL_SD_WriteBlocks>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80059a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000980 	.word	0x20000980

080059b8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80059bc:	4805      	ldr	r0, [pc, #20]	; (80059d4 <BSP_SD_GetCardState+0x1c>)
 80059be:	f7fe feff 	bl	80047c0 <HAL_SD_GetCardState>
 80059c2:	4603      	mov	r3, r0
 80059c4:	2b04      	cmp	r3, #4
 80059c6:	bf14      	ite	ne
 80059c8:	2301      	movne	r3, #1
 80059ca:	2300      	moveq	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000980 	.word	0x20000980

080059d8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80059e0:	6879      	ldr	r1, [r7, #4]
 80059e2:	4803      	ldr	r0, [pc, #12]	; (80059f0 <BSP_SD_GetCardInfo+0x18>)
 80059e4:	f7fe fe26 	bl	8004634 <HAL_SD_GetCardInfo>
}
 80059e8:	bf00      	nop
 80059ea:	3708      	adds	r7, #8
 80059ec:	46bd      	mov	sp, r7
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000980 	.word	0x20000980

080059f4 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b083      	sub	sp, #12
 80059f8:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80059fa:	2301      	movs	r3, #1
 80059fc:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80059fe:	79fb      	ldrb	r3, [r7, #7]
 8005a00:	b2db      	uxtb	r3, r3
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	370c      	adds	r7, #12
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
	...

08005a10 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b082      	sub	sp, #8
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	4603      	mov	r3, r0
 8005a18:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005a1a:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <SD_CheckStatus+0x38>)
 8005a1c:	2201      	movs	r2, #1
 8005a1e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005a20:	f7ff ffca 	bl	80059b8 <BSP_SD_GetCardState>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d107      	bne.n	8005a3a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005a2a:	4b07      	ldr	r3, [pc, #28]	; (8005a48 <SD_CheckStatus+0x38>)
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	f023 0301 	bic.w	r3, r3, #1
 8005a34:	b2da      	uxtb	r2, r3
 8005a36:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <SD_CheckStatus+0x38>)
 8005a38:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005a3a:	4b03      	ldr	r3, [pc, #12]	; (8005a48 <SD_CheckStatus+0x38>)
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	b2db      	uxtb	r3, r3
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}
 8005a48:	2000000d 	.word	0x2000000d

08005a4c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005a56:	4b0b      	ldr	r3, [pc, #44]	; (8005a84 <SD_initialize+0x38>)
 8005a58:	2201      	movs	r2, #1
 8005a5a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005a5c:	f7ff ff4a 	bl	80058f4 <BSP_SD_Init>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d107      	bne.n	8005a76 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7ff ffd1 	bl	8005a10 <SD_CheckStatus>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	461a      	mov	r2, r3
 8005a72:	4b04      	ldr	r3, [pc, #16]	; (8005a84 <SD_initialize+0x38>)
 8005a74:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005a76:	4b03      	ldr	r3, [pc, #12]	; (8005a84 <SD_initialize+0x38>)
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	b2db      	uxtb	r3, r3
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	3708      	adds	r7, #8
 8005a80:	46bd      	mov	sp, r7
 8005a82:	bd80      	pop	{r7, pc}
 8005a84:	2000000d 	.word	0x2000000d

08005a88 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f7ff ffbb 	bl	8005a10 <SD_CheckStatus>
 8005a9a:	4603      	mov	r3, r0
}
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	3708      	adds	r7, #8
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b086      	sub	sp, #24
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60b9      	str	r1, [r7, #8]
 8005aac:	607a      	str	r2, [r7, #4]
 8005aae:	603b      	str	r3, [r7, #0]
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	6879      	ldr	r1, [r7, #4]
 8005ac0:	68b8      	ldr	r0, [r7, #8]
 8005ac2:	f7ff ff3d 	bl	8005940 <BSP_SD_ReadBlocks>
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d107      	bne.n	8005adc <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005acc:	bf00      	nop
 8005ace:	f7ff ff73 	bl	80059b8 <BSP_SD_GetCardState>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1fa      	bne.n	8005ace <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3718      	adds	r7, #24
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b086      	sub	sp, #24
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	603b      	str	r3, [r7, #0]
 8005af2:	4603      	mov	r3, r0
 8005af4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	6879      	ldr	r1, [r7, #4]
 8005b02:	68b8      	ldr	r0, [r7, #8]
 8005b04:	f7ff ff3a 	bl	800597c <BSP_SD_WriteBlocks>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d107      	bne.n	8005b1e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005b0e:	bf00      	nop
 8005b10:	f7ff ff52 	bl	80059b8 <BSP_SD_GetCardState>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1fa      	bne.n	8005b10 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08c      	sub	sp, #48	; 0x30
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	603a      	str	r2, [r7, #0]
 8005b32:	71fb      	strb	r3, [r7, #7]
 8005b34:	460b      	mov	r3, r1
 8005b36:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005b3e:	4b25      	ldr	r3, [pc, #148]	; (8005bd4 <SD_ioctl+0xac>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	f003 0301 	and.w	r3, r3, #1
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <SD_ioctl+0x28>
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e03c      	b.n	8005bca <SD_ioctl+0xa2>

  switch (cmd)
 8005b50:	79bb      	ldrb	r3, [r7, #6]
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d834      	bhi.n	8005bc0 <SD_ioctl+0x98>
 8005b56:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <SD_ioctl+0x34>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005b6d 	.word	0x08005b6d
 8005b60:	08005b75 	.word	0x08005b75
 8005b64:	08005b8d 	.word	0x08005b8d
 8005b68:	08005ba7 	.word	0x08005ba7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b72:	e028      	b.n	8005bc6 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b74:	f107 030c 	add.w	r3, r7, #12
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f7ff ff2d 	bl	80059d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005b84:	2300      	movs	r3, #0
 8005b86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005b8a:	e01c      	b.n	8005bc6 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005b8c:	f107 030c 	add.w	r3, r7, #12
 8005b90:	4618      	mov	r0, r3
 8005b92:	f7ff ff21 	bl	80059d8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b98:	b29a      	uxth	r2, r3
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005ba4:	e00f      	b.n	8005bc6 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005ba6:	f107 030c 	add.w	r3, r7, #12
 8005baa:	4618      	mov	r0, r3
 8005bac:	f7ff ff14 	bl	80059d8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb2:	0a5a      	lsrs	r2, r3, #9
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005bbe:	e002      	b.n	8005bc6 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005bc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3730      	adds	r7, #48	; 0x30
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	2000000d 	.word	0x2000000d

08005bd8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	4603      	mov	r3, r0
 8005be0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005be2:	79fb      	ldrb	r3, [r7, #7]
 8005be4:	4a08      	ldr	r2, [pc, #32]	; (8005c08 <disk_status+0x30>)
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	79fa      	ldrb	r2, [r7, #7]
 8005bf0:	4905      	ldr	r1, [pc, #20]	; (8005c08 <disk_status+0x30>)
 8005bf2:	440a      	add	r2, r1
 8005bf4:	7a12      	ldrb	r2, [r2, #8]
 8005bf6:	4610      	mov	r0, r2
 8005bf8:	4798      	blx	r3
 8005bfa:	4603      	mov	r3, r0
 8005bfc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005bfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	200002f8 	.word	0x200002f8

08005c0c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b084      	sub	sp, #16
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	4603      	mov	r3, r0
 8005c14:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005c16:	2300      	movs	r3, #0
 8005c18:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005c1a:	79fb      	ldrb	r3, [r7, #7]
 8005c1c:	4a0d      	ldr	r2, [pc, #52]	; (8005c54 <disk_initialize+0x48>)
 8005c1e:	5cd3      	ldrb	r3, [r2, r3]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d111      	bne.n	8005c48 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8005c24:	79fb      	ldrb	r3, [r7, #7]
 8005c26:	4a0b      	ldr	r2, [pc, #44]	; (8005c54 <disk_initialize+0x48>)
 8005c28:	2101      	movs	r1, #1
 8005c2a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005c2c:	79fb      	ldrb	r3, [r7, #7]
 8005c2e:	4a09      	ldr	r2, [pc, #36]	; (8005c54 <disk_initialize+0x48>)
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	685b      	ldr	r3, [r3, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	79fa      	ldrb	r2, [r7, #7]
 8005c3a:	4906      	ldr	r1, [pc, #24]	; (8005c54 <disk_initialize+0x48>)
 8005c3c:	440a      	add	r2, r1
 8005c3e:	7a12      	ldrb	r2, [r2, #8]
 8005c40:	4610      	mov	r0, r2
 8005c42:	4798      	blx	r3
 8005c44:	4603      	mov	r3, r0
 8005c46:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	200002f8 	.word	0x200002f8

08005c58 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005c58:	b590      	push	{r4, r7, lr}
 8005c5a:	b087      	sub	sp, #28
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60b9      	str	r1, [r7, #8]
 8005c60:	607a      	str	r2, [r7, #4]
 8005c62:	603b      	str	r3, [r7, #0]
 8005c64:	4603      	mov	r3, r0
 8005c66:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005c68:	7bfb      	ldrb	r3, [r7, #15]
 8005c6a:	4a0a      	ldr	r2, [pc, #40]	; (8005c94 <disk_read+0x3c>)
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	689c      	ldr	r4, [r3, #8]
 8005c74:	7bfb      	ldrb	r3, [r7, #15]
 8005c76:	4a07      	ldr	r2, [pc, #28]	; (8005c94 <disk_read+0x3c>)
 8005c78:	4413      	add	r3, r2
 8005c7a:	7a18      	ldrb	r0, [r3, #8]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	687a      	ldr	r2, [r7, #4]
 8005c80:	68b9      	ldr	r1, [r7, #8]
 8005c82:	47a0      	blx	r4
 8005c84:	4603      	mov	r3, r0
 8005c86:	75fb      	strb	r3, [r7, #23]
  return res;
 8005c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd90      	pop	{r4, r7, pc}
 8005c92:	bf00      	nop
 8005c94:	200002f8 	.word	0x200002f8

08005c98 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005c98:	b590      	push	{r4, r7, lr}
 8005c9a:	b087      	sub	sp, #28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60b9      	str	r1, [r7, #8]
 8005ca0:	607a      	str	r2, [r7, #4]
 8005ca2:	603b      	str	r3, [r7, #0]
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005ca8:	7bfb      	ldrb	r3, [r7, #15]
 8005caa:	4a0a      	ldr	r2, [pc, #40]	; (8005cd4 <disk_write+0x3c>)
 8005cac:	009b      	lsls	r3, r3, #2
 8005cae:	4413      	add	r3, r2
 8005cb0:	685b      	ldr	r3, [r3, #4]
 8005cb2:	68dc      	ldr	r4, [r3, #12]
 8005cb4:	7bfb      	ldrb	r3, [r7, #15]
 8005cb6:	4a07      	ldr	r2, [pc, #28]	; (8005cd4 <disk_write+0x3c>)
 8005cb8:	4413      	add	r3, r2
 8005cba:	7a18      	ldrb	r0, [r3, #8]
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	68b9      	ldr	r1, [r7, #8]
 8005cc2:	47a0      	blx	r4
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	75fb      	strb	r3, [r7, #23]
  return res;
 8005cc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cca:	4618      	mov	r0, r3
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	bd90      	pop	{r4, r7, pc}
 8005cd2:	bf00      	nop
 8005cd4:	200002f8 	.word	0x200002f8

08005cd8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	4603      	mov	r3, r0
 8005ce0:	603a      	str	r2, [r7, #0]
 8005ce2:	71fb      	strb	r3, [r7, #7]
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005ce8:	79fb      	ldrb	r3, [r7, #7]
 8005cea:	4a09      	ldr	r2, [pc, #36]	; (8005d10 <disk_ioctl+0x38>)
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	4413      	add	r3, r2
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	79fa      	ldrb	r2, [r7, #7]
 8005cf6:	4906      	ldr	r1, [pc, #24]	; (8005d10 <disk_ioctl+0x38>)
 8005cf8:	440a      	add	r2, r1
 8005cfa:	7a10      	ldrb	r0, [r2, #8]
 8005cfc:	79b9      	ldrb	r1, [r7, #6]
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	4798      	blx	r3
 8005d02:	4603      	mov	r3, r0
 8005d04:	73fb      	strb	r3, [r7, #15]
  return res;
 8005d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3710      	adds	r7, #16
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	bd80      	pop	{r7, pc}
 8005d10:	200002f8 	.word	0x200002f8

08005d14 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005d14:	b480      	push	{r7}
 8005d16:	b085      	sub	sp, #20
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005d24:	89fb      	ldrh	r3, [r7, #14]
 8005d26:	021b      	lsls	r3, r3, #8
 8005d28:	b21a      	sxth	r2, r3
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	b21b      	sxth	r3, r3
 8005d30:	4313      	orrs	r3, r2
 8005d32:	b21b      	sxth	r3, r3
 8005d34:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005d36:	89fb      	ldrh	r3, [r7, #14]
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3714      	adds	r7, #20
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	3303      	adds	r3, #3
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	021b      	lsls	r3, r3, #8
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	3202      	adds	r2, #2
 8005d5c:	7812      	ldrb	r2, [r2, #0]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	021b      	lsls	r3, r3, #8
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	3201      	adds	r2, #1
 8005d6a:	7812      	ldrb	r2, [r2, #0]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	7812      	ldrb	r2, [r2, #0]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	60fb      	str	r3, [r7, #12]
	return rv;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3714      	adds	r7, #20
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b083      	sub	sp, #12
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
 8005d92:	460b      	mov	r3, r1
 8005d94:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	1c5a      	adds	r2, r3, #1
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	887a      	ldrh	r2, [r7, #2]
 8005d9e:	b2d2      	uxtb	r2, r2
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	887b      	ldrh	r3, [r7, #2]
 8005da4:	0a1b      	lsrs	r3, r3, #8
 8005da6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	1c5a      	adds	r2, r3, #1
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	887a      	ldrh	r2, [r7, #2]
 8005db0:	b2d2      	uxtb	r2, r2
 8005db2:	701a      	strb	r2, [r3, #0]
}
 8005db4:	bf00      	nop
 8005db6:	370c      	adds	r7, #12
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	1c5a      	adds	r2, r3, #1
 8005dce:	607a      	str	r2, [r7, #4]
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	b2d2      	uxtb	r2, r2
 8005dd4:	701a      	strb	r2, [r3, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	0a1b      	lsrs	r3, r3, #8
 8005dda:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	1c5a      	adds	r2, r3, #1
 8005de0:	607a      	str	r2, [r7, #4]
 8005de2:	683a      	ldr	r2, [r7, #0]
 8005de4:	b2d2      	uxtb	r2, r2
 8005de6:	701a      	strb	r2, [r3, #0]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	0a1b      	lsrs	r3, r3, #8
 8005dec:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	1c5a      	adds	r2, r3, #1
 8005df2:	607a      	str	r2, [r7, #4]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	b2d2      	uxtb	r2, r2
 8005df8:	701a      	strb	r2, [r3, #0]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	0a1b      	lsrs	r3, r3, #8
 8005dfe:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	607a      	str	r2, [r7, #4]
 8005e06:	683a      	ldr	r2, [r7, #0]
 8005e08:	b2d2      	uxtb	r2, r2
 8005e0a:	701a      	strb	r2, [r3, #0]
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00d      	beq.n	8005e4e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	1c53      	adds	r3, r2, #1
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	1c59      	adds	r1, r3, #1
 8005e3c:	6179      	str	r1, [r7, #20]
 8005e3e:	7812      	ldrb	r2, [r2, #0]
 8005e40:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	3b01      	subs	r3, #1
 8005e46:	607b      	str	r3, [r7, #4]
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1f1      	bne.n	8005e32 <mem_cpy+0x1a>
	}
}
 8005e4e:	bf00      	nop
 8005e50:	371c      	adds	r7, #28
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005e5a:	b480      	push	{r7}
 8005e5c:	b087      	sub	sp, #28
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	60f8      	str	r0, [r7, #12]
 8005e62:	60b9      	str	r1, [r7, #8]
 8005e64:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	617a      	str	r2, [r7, #20]
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	b2d2      	uxtb	r2, r2
 8005e74:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	607b      	str	r3, [r7, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1f3      	bne.n	8005e6a <mem_set+0x10>
}
 8005e82:	bf00      	nop
 8005e84:	bf00      	nop
 8005e86:	371c      	adds	r7, #28
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005e90:	b480      	push	{r7}
 8005e92:	b089      	sub	sp, #36	; 0x24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	61fb      	str	r3, [r7, #28]
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005ea8:	69fb      	ldr	r3, [r7, #28]
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	61fa      	str	r2, [r7, #28]
 8005eae:	781b      	ldrb	r3, [r3, #0]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	61ba      	str	r2, [r7, #24]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	1acb      	subs	r3, r1, r3
 8005ebc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	607b      	str	r3, [r7, #4]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d002      	beq.n	8005ed0 <mem_cmp+0x40>
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0eb      	beq.n	8005ea8 <mem_cmp+0x18>

	return r;
 8005ed0:	697b      	ldr	r3, [r7, #20]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3724      	adds	r7, #36	; 0x24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr

08005ede <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005ede:	b480      	push	{r7}
 8005ee0:	b083      	sub	sp, #12
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005ee8:	e002      	b.n	8005ef0 <chk_chr+0x12>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3301      	adds	r3, #1
 8005eee:	607b      	str	r3, [r7, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <chk_chr+0x26>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d1f2      	bne.n	8005eea <chk_chr+0xc>
	return *str;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	781b      	ldrb	r3, [r3, #0]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f1e:	2300      	movs	r3, #0
 8005f20:	60bb      	str	r3, [r7, #8]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	60fb      	str	r3, [r7, #12]
 8005f26:	e029      	b.n	8005f7c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005f28:	4a27      	ldr	r2, [pc, #156]	; (8005fc8 <chk_lock+0xb4>)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	011b      	lsls	r3, r3, #4
 8005f2e:	4413      	add	r3, r2
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d01d      	beq.n	8005f72 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f36:	4a24      	ldr	r2, [pc, #144]	; (8005fc8 <chk_lock+0xb4>)
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	4413      	add	r3, r2
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d116      	bne.n	8005f76 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005f48:	4a1f      	ldr	r2, [pc, #124]	; (8005fc8 <chk_lock+0xb4>)
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	011b      	lsls	r3, r3, #4
 8005f4e:	4413      	add	r3, r2
 8005f50:	3304      	adds	r3, #4
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d10c      	bne.n	8005f76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f5c:	4a1a      	ldr	r2, [pc, #104]	; (8005fc8 <chk_lock+0xb4>)
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	011b      	lsls	r3, r3, #4
 8005f62:	4413      	add	r3, r2
 8005f64:	3308      	adds	r3, #8
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d102      	bne.n	8005f76 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005f70:	e007      	b.n	8005f82 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005f72:	2301      	movs	r3, #1
 8005f74:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	60fb      	str	r3, [r7, #12]
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	d9d2      	bls.n	8005f28 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d109      	bne.n	8005f9c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d102      	bne.n	8005f94 <chk_lock+0x80>
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d101      	bne.n	8005f98 <chk_lock+0x84>
 8005f94:	2300      	movs	r3, #0
 8005f96:	e010      	b.n	8005fba <chk_lock+0xa6>
 8005f98:	2312      	movs	r3, #18
 8005f9a:	e00e      	b.n	8005fba <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d108      	bne.n	8005fb4 <chk_lock+0xa0>
 8005fa2:	4a09      	ldr	r2, [pc, #36]	; (8005fc8 <chk_lock+0xb4>)
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	4413      	add	r3, r2
 8005faa:	330c      	adds	r3, #12
 8005fac:	881b      	ldrh	r3, [r3, #0]
 8005fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb2:	d101      	bne.n	8005fb8 <chk_lock+0xa4>
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	e000      	b.n	8005fba <chk_lock+0xa6>
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3714      	adds	r7, #20
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	200002d8 	.word	0x200002d8

08005fcc <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	607b      	str	r3, [r7, #4]
 8005fd6:	e002      	b.n	8005fde <enq_lock+0x12>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	607b      	str	r3, [r7, #4]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d806      	bhi.n	8005ff2 <enq_lock+0x26>
 8005fe4:	4a09      	ldr	r2, [pc, #36]	; (800600c <enq_lock+0x40>)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	011b      	lsls	r3, r3, #4
 8005fea:	4413      	add	r3, r2
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f2      	bne.n	8005fd8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	bf14      	ite	ne
 8005ff8:	2301      	movne	r3, #1
 8005ffa:	2300      	moveq	r3, #0
 8005ffc:	b2db      	uxtb	r3, r3
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	200002d8 	.word	0x200002d8

08006010 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
 8006018:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800601a:	2300      	movs	r3, #0
 800601c:	60fb      	str	r3, [r7, #12]
 800601e:	e01f      	b.n	8006060 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006020:	4a41      	ldr	r2, [pc, #260]	; (8006128 <inc_lock+0x118>)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	4413      	add	r3, r2
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d113      	bne.n	800605a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006032:	4a3d      	ldr	r2, [pc, #244]	; (8006128 <inc_lock+0x118>)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	4413      	add	r3, r2
 800603a:	3304      	adds	r3, #4
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006042:	429a      	cmp	r2, r3
 8006044:	d109      	bne.n	800605a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8006046:	4a38      	ldr	r2, [pc, #224]	; (8006128 <inc_lock+0x118>)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	011b      	lsls	r3, r3, #4
 800604c:	4413      	add	r3, r2
 800604e:	3308      	adds	r3, #8
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8006056:	429a      	cmp	r2, r3
 8006058:	d006      	beq.n	8006068 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	3301      	adds	r3, #1
 800605e:	60fb      	str	r3, [r7, #12]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b01      	cmp	r3, #1
 8006064:	d9dc      	bls.n	8006020 <inc_lock+0x10>
 8006066:	e000      	b.n	800606a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006068:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d132      	bne.n	80060d6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006070:	2300      	movs	r3, #0
 8006072:	60fb      	str	r3, [r7, #12]
 8006074:	e002      	b.n	800607c <inc_lock+0x6c>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	3301      	adds	r3, #1
 800607a:	60fb      	str	r3, [r7, #12]
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2b01      	cmp	r3, #1
 8006080:	d806      	bhi.n	8006090 <inc_lock+0x80>
 8006082:	4a29      	ldr	r2, [pc, #164]	; (8006128 <inc_lock+0x118>)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	4413      	add	r3, r2
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d1f2      	bne.n	8006076 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2b02      	cmp	r3, #2
 8006094:	d101      	bne.n	800609a <inc_lock+0x8a>
 8006096:	2300      	movs	r3, #0
 8006098:	e040      	b.n	800611c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	4922      	ldr	r1, [pc, #136]	; (8006128 <inc_lock+0x118>)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	011b      	lsls	r3, r3, #4
 80060a4:	440b      	add	r3, r1
 80060a6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	491e      	ldr	r1, [pc, #120]	; (8006128 <inc_lock+0x118>)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	011b      	lsls	r3, r3, #4
 80060b2:	440b      	add	r3, r1
 80060b4:	3304      	adds	r3, #4
 80060b6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	695a      	ldr	r2, [r3, #20]
 80060bc:	491a      	ldr	r1, [pc, #104]	; (8006128 <inc_lock+0x118>)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	440b      	add	r3, r1
 80060c4:	3308      	adds	r3, #8
 80060c6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80060c8:	4a17      	ldr	r2, [pc, #92]	; (8006128 <inc_lock+0x118>)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	4413      	add	r3, r2
 80060d0:	330c      	adds	r3, #12
 80060d2:	2200      	movs	r2, #0
 80060d4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d009      	beq.n	80060f0 <inc_lock+0xe0>
 80060dc:	4a12      	ldr	r2, [pc, #72]	; (8006128 <inc_lock+0x118>)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	011b      	lsls	r3, r3, #4
 80060e2:	4413      	add	r3, r2
 80060e4:	330c      	adds	r3, #12
 80060e6:	881b      	ldrh	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <inc_lock+0xe0>
 80060ec:	2300      	movs	r3, #0
 80060ee:	e015      	b.n	800611c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d108      	bne.n	8006108 <inc_lock+0xf8>
 80060f6:	4a0c      	ldr	r2, [pc, #48]	; (8006128 <inc_lock+0x118>)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	4413      	add	r3, r2
 80060fe:	330c      	adds	r3, #12
 8006100:	881b      	ldrh	r3, [r3, #0]
 8006102:	3301      	adds	r3, #1
 8006104:	b29a      	uxth	r2, r3
 8006106:	e001      	b.n	800610c <inc_lock+0xfc>
 8006108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800610c:	4906      	ldr	r1, [pc, #24]	; (8006128 <inc_lock+0x118>)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	440b      	add	r3, r1
 8006114:	330c      	adds	r3, #12
 8006116:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	3301      	adds	r3, #1
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	200002d8 	.word	0x200002d8

0800612c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800612c:	b480      	push	{r7}
 800612e:	b085      	sub	sp, #20
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3b01      	subs	r3, #1
 8006138:	607b      	str	r3, [r7, #4]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2b01      	cmp	r3, #1
 800613e:	d825      	bhi.n	800618c <dec_lock+0x60>
		n = Files[i].ctr;
 8006140:	4a17      	ldr	r2, [pc, #92]	; (80061a0 <dec_lock+0x74>)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	4413      	add	r3, r2
 8006148:	330c      	adds	r3, #12
 800614a:	881b      	ldrh	r3, [r3, #0]
 800614c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800614e:	89fb      	ldrh	r3, [r7, #14]
 8006150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006154:	d101      	bne.n	800615a <dec_lock+0x2e>
 8006156:	2300      	movs	r3, #0
 8006158:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800615a:	89fb      	ldrh	r3, [r7, #14]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d002      	beq.n	8006166 <dec_lock+0x3a>
 8006160:	89fb      	ldrh	r3, [r7, #14]
 8006162:	3b01      	subs	r3, #1
 8006164:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8006166:	4a0e      	ldr	r2, [pc, #56]	; (80061a0 <dec_lock+0x74>)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	4413      	add	r3, r2
 800616e:	330c      	adds	r3, #12
 8006170:	89fa      	ldrh	r2, [r7, #14]
 8006172:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8006174:	89fb      	ldrh	r3, [r7, #14]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d105      	bne.n	8006186 <dec_lock+0x5a>
 800617a:	4a09      	ldr	r2, [pc, #36]	; (80061a0 <dec_lock+0x74>)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	4413      	add	r3, r2
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8006186:	2300      	movs	r3, #0
 8006188:	737b      	strb	r3, [r7, #13]
 800618a:	e001      	b.n	8006190 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800618c:	2302      	movs	r3, #2
 800618e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8006190:	7b7b      	ldrb	r3, [r7, #13]
}
 8006192:	4618      	mov	r0, r3
 8006194:	3714      	adds	r7, #20
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	200002d8 	.word	0x200002d8

080061a4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80061ac:	2300      	movs	r3, #0
 80061ae:	60fb      	str	r3, [r7, #12]
 80061b0:	e010      	b.n	80061d4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80061b2:	4a0d      	ldr	r2, [pc, #52]	; (80061e8 <clear_lock+0x44>)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	4413      	add	r3, r2
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d105      	bne.n	80061ce <clear_lock+0x2a>
 80061c2:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <clear_lock+0x44>)
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	011b      	lsls	r3, r3, #4
 80061c8:	4413      	add	r3, r2
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	3301      	adds	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d9eb      	bls.n	80061b2 <clear_lock+0xe>
	}
}
 80061da:	bf00      	nop
 80061dc:	bf00      	nop
 80061de:	3714      	adds	r7, #20
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr
 80061e8:	200002d8 	.word	0x200002d8

080061ec <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b086      	sub	sp, #24
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80061f4:	2300      	movs	r3, #0
 80061f6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	78db      	ldrb	r3, [r3, #3]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d034      	beq.n	800626a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006204:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	7858      	ldrb	r0, [r3, #1]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006210:	2301      	movs	r3, #1
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	f7ff fd40 	bl	8005c98 <disk_write>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <sync_window+0x38>
			res = FR_DISK_ERR;
 800621e:	2301      	movs	r3, #1
 8006220:	73fb      	strb	r3, [r7, #15]
 8006222:	e022      	b.n	800626a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	1ad2      	subs	r2, r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	69db      	ldr	r3, [r3, #28]
 8006236:	429a      	cmp	r2, r3
 8006238:	d217      	bcs.n	800626a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	789b      	ldrb	r3, [r3, #2]
 800623e:	613b      	str	r3, [r7, #16]
 8006240:	e010      	b.n	8006264 <sync_window+0x78>
					wsect += fs->fsize;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	69db      	ldr	r3, [r3, #28]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	4413      	add	r3, r2
 800624a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	7858      	ldrb	r0, [r3, #1]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006256:	2301      	movs	r3, #1
 8006258:	697a      	ldr	r2, [r7, #20]
 800625a:	f7ff fd1d 	bl	8005c98 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800625e:	693b      	ldr	r3, [r7, #16]
 8006260:	3b01      	subs	r3, #1
 8006262:	613b      	str	r3, [r7, #16]
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d8eb      	bhi.n	8006242 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3718      	adds	r7, #24
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800627e:	2300      	movs	r3, #0
 8006280:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	429a      	cmp	r2, r3
 800628a:	d01b      	beq.n	80062c4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff ffad 	bl	80061ec <sync_window>
 8006292:	4603      	mov	r3, r0
 8006294:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006296:	7bfb      	ldrb	r3, [r7, #15]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d113      	bne.n	80062c4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	7858      	ldrb	r0, [r3, #1]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80062a6:	2301      	movs	r3, #1
 80062a8:	683a      	ldr	r2, [r7, #0]
 80062aa:	f7ff fcd5 	bl	8005c58 <disk_read>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d004      	beq.n	80062be <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80062b4:	f04f 33ff 	mov.w	r3, #4294967295
 80062b8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	683a      	ldr	r2, [r7, #0]
 80062c2:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 80062c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f7ff ff87 	bl	80061ec <sync_window>
 80062de:	4603      	mov	r3, r0
 80062e0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80062e2:	7bfb      	ldrb	r3, [r7, #15]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d158      	bne.n	800639a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b03      	cmp	r3, #3
 80062ee:	d148      	bne.n	8006382 <sync_fs+0xb2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	791b      	ldrb	r3, [r3, #4]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d144      	bne.n	8006382 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	3334      	adds	r3, #52	; 0x34
 80062fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006300:	2100      	movs	r1, #0
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff fda9 	bl	8005e5a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3334      	adds	r3, #52	; 0x34
 800630c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006310:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8006314:	4618      	mov	r0, r3
 8006316:	f7ff fd38 	bl	8005d8a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3334      	adds	r3, #52	; 0x34
 800631e:	4921      	ldr	r1, [pc, #132]	; (80063a4 <sync_fs+0xd4>)
 8006320:	4618      	mov	r0, r3
 8006322:	f7ff fd4d 	bl	8005dc0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	3334      	adds	r3, #52	; 0x34
 800632a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800632e:	491e      	ldr	r1, [pc, #120]	; (80063a8 <sync_fs+0xd8>)
 8006330:	4618      	mov	r0, r3
 8006332:	f7ff fd45 	bl	8005dc0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3334      	adds	r3, #52	; 0x34
 800633a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	4619      	mov	r1, r3
 8006344:	4610      	mov	r0, r2
 8006346:	f7ff fd3b 	bl	8005dc0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3334      	adds	r3, #52	; 0x34
 800634e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	4619      	mov	r1, r3
 8006358:	4610      	mov	r0, r2
 800635a:	f7ff fd31 	bl	8005dc0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	1c5a      	adds	r2, r3, #1
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	7858      	ldrb	r0, [r3, #1]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006376:	2301      	movs	r3, #1
 8006378:	f7ff fc8e 	bl	8005c98 <disk_write>
			fs->fsi_flag = 0;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	785b      	ldrb	r3, [r3, #1]
 8006386:	2200      	movs	r2, #0
 8006388:	2100      	movs	r1, #0
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff fca4 	bl	8005cd8 <disk_ioctl>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <sync_fs+0xca>
 8006396:	2301      	movs	r3, #1
 8006398:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800639a:	7bfb      	ldrb	r3, [r7, #15]
}
 800639c:	4618      	mov	r0, r3
 800639e:	3710      	adds	r7, #16
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	41615252 	.word	0x41615252
 80063a8:	61417272 	.word	0x61417272

080063ac <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	3b02      	subs	r3, #2
 80063ba:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	699b      	ldr	r3, [r3, #24]
 80063c0:	3b02      	subs	r3, #2
 80063c2:	683a      	ldr	r2, [r7, #0]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	d301      	bcc.n	80063cc <clust2sect+0x20>
 80063c8:	2300      	movs	r3, #0
 80063ca:	e008      	b.n	80063de <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	895b      	ldrh	r3, [r3, #10]
 80063d0:	461a      	mov	r2, r3
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	fb03 f202 	mul.w	r2, r3, r2
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	4413      	add	r3, r2
}
 80063de:	4618      	mov	r0, r3
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b086      	sub	sp, #24
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d904      	bls.n	800640a <get_fat+0x20>
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	699b      	ldr	r3, [r3, #24]
 8006404:	683a      	ldr	r2, [r7, #0]
 8006406:	429a      	cmp	r2, r3
 8006408:	d302      	bcc.n	8006410 <get_fat+0x26>
		val = 1;	/* Internal error */
 800640a:	2301      	movs	r3, #1
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e08f      	b.n	8006530 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006410:	f04f 33ff 	mov.w	r3, #4294967295
 8006414:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	781b      	ldrb	r3, [r3, #0]
 800641a:	2b03      	cmp	r3, #3
 800641c:	d062      	beq.n	80064e4 <get_fat+0xfa>
 800641e:	2b03      	cmp	r3, #3
 8006420:	dc7c      	bgt.n	800651c <get_fat+0x132>
 8006422:	2b01      	cmp	r3, #1
 8006424:	d002      	beq.n	800642c <get_fat+0x42>
 8006426:	2b02      	cmp	r3, #2
 8006428:	d042      	beq.n	80064b0 <get_fat+0xc6>
 800642a:	e077      	b.n	800651c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	085b      	lsrs	r3, r3, #1
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	4413      	add	r3, r2
 8006438:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	0a5b      	lsrs	r3, r3, #9
 8006442:	4413      	add	r3, r2
 8006444:	4619      	mov	r1, r3
 8006446:	6938      	ldr	r0, [r7, #16]
 8006448:	f7ff ff14 	bl	8006274 <move_window>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	d167      	bne.n	8006522 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	1c5a      	adds	r2, r3, #1
 8006456:	60fa      	str	r2, [r7, #12]
 8006458:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800645c:	693a      	ldr	r2, [r7, #16]
 800645e:	4413      	add	r3, r2
 8006460:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006464:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	0a5b      	lsrs	r3, r3, #9
 800646e:	4413      	add	r3, r2
 8006470:	4619      	mov	r1, r3
 8006472:	6938      	ldr	r0, [r7, #16]
 8006474:	f7ff fefe 	bl	8006274 <move_window>
 8006478:	4603      	mov	r3, r0
 800647a:	2b00      	cmp	r3, #0
 800647c:	d153      	bne.n	8006526 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4413      	add	r3, r2
 8006488:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	461a      	mov	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4313      	orrs	r3, r2
 8006494:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <get_fat+0xbc>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	091b      	lsrs	r3, r3, #4
 80064a4:	e002      	b.n	80064ac <get_fat+0xc2>
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ac:	617b      	str	r3, [r7, #20]
			break;
 80064ae:	e03f      	b.n	8006530 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064b4:	683b      	ldr	r3, [r7, #0]
 80064b6:	0a1b      	lsrs	r3, r3, #8
 80064b8:	4413      	add	r3, r2
 80064ba:	4619      	mov	r1, r3
 80064bc:	6938      	ldr	r0, [r7, #16]
 80064be:	f7ff fed9 	bl	8006274 <move_window>
 80064c2:	4603      	mov	r3, r0
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d130      	bne.n	800652a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	005b      	lsls	r3, r3, #1
 80064d2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80064d6:	4413      	add	r3, r2
 80064d8:	4618      	mov	r0, r3
 80064da:	f7ff fc1b 	bl	8005d14 <ld_word>
 80064de:	4603      	mov	r3, r0
 80064e0:	617b      	str	r3, [r7, #20]
			break;
 80064e2:	e025      	b.n	8006530 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	09db      	lsrs	r3, r3, #7
 80064ec:	4413      	add	r3, r2
 80064ee:	4619      	mov	r1, r3
 80064f0:	6938      	ldr	r0, [r7, #16]
 80064f2:	f7ff febf 	bl	8006274 <move_window>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d118      	bne.n	800652e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	009b      	lsls	r3, r3, #2
 8006506:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800650a:	4413      	add	r3, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff fc19 	bl	8005d44 <ld_dword>
 8006512:	4603      	mov	r3, r0
 8006514:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006518:	617b      	str	r3, [r7, #20]
			break;
 800651a:	e009      	b.n	8006530 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800651c:	2301      	movs	r3, #1
 800651e:	617b      	str	r3, [r7, #20]
 8006520:	e006      	b.n	8006530 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006522:	bf00      	nop
 8006524:	e004      	b.n	8006530 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006526:	bf00      	nop
 8006528:	e002      	b.n	8006530 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800652a:	bf00      	nop
 800652c:	e000      	b.n	8006530 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800652e:	bf00      	nop
		}
	}

	return val;
 8006530:	697b      	ldr	r3, [r7, #20]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800653a:	b590      	push	{r4, r7, lr}
 800653c:	b089      	sub	sp, #36	; 0x24
 800653e:	af00      	add	r7, sp, #0
 8006540:	60f8      	str	r0, [r7, #12]
 8006542:	60b9      	str	r1, [r7, #8]
 8006544:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006546:	2302      	movs	r3, #2
 8006548:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	2b01      	cmp	r3, #1
 800654e:	f240 80d2 	bls.w	80066f6 <put_fat+0x1bc>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	429a      	cmp	r2, r3
 800655a:	f080 80cc 	bcs.w	80066f6 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b03      	cmp	r3, #3
 8006564:	f000 8096 	beq.w	8006694 <put_fat+0x15a>
 8006568:	2b03      	cmp	r3, #3
 800656a:	f300 80cd 	bgt.w	8006708 <put_fat+0x1ce>
 800656e:	2b01      	cmp	r3, #1
 8006570:	d002      	beq.n	8006578 <put_fat+0x3e>
 8006572:	2b02      	cmp	r3, #2
 8006574:	d06e      	beq.n	8006654 <put_fat+0x11a>
 8006576:	e0c7      	b.n	8006708 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	61bb      	str	r3, [r7, #24]
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	085b      	lsrs	r3, r3, #1
 8006580:	69ba      	ldr	r2, [r7, #24]
 8006582:	4413      	add	r3, r2
 8006584:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800658a:	69bb      	ldr	r3, [r7, #24]
 800658c:	0a5b      	lsrs	r3, r3, #9
 800658e:	4413      	add	r3, r2
 8006590:	4619      	mov	r1, r3
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f7ff fe6e 	bl	8006274 <move_window>
 8006598:	4603      	mov	r3, r0
 800659a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800659c:	7ffb      	ldrb	r3, [r7, #31]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	f040 80ab 	bne.w	80066fa <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	1c59      	adds	r1, r3, #1
 80065ae:	61b9      	str	r1, [r7, #24]
 80065b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b4:	4413      	add	r3, r2
 80065b6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00d      	beq.n	80065de <put_fat+0xa4>
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	b25b      	sxtb	r3, r3
 80065c8:	f003 030f 	and.w	r3, r3, #15
 80065cc:	b25a      	sxtb	r2, r3
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	b2db      	uxtb	r3, r3
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	b25b      	sxtb	r3, r3
 80065d6:	4313      	orrs	r3, r2
 80065d8:	b25b      	sxtb	r3, r3
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	e001      	b.n	80065e2 <put_fat+0xa8>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2201      	movs	r2, #1
 80065ea:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	0a5b      	lsrs	r3, r3, #9
 80065f4:	4413      	add	r3, r2
 80065f6:	4619      	mov	r1, r3
 80065f8:	68f8      	ldr	r0, [r7, #12]
 80065fa:	f7ff fe3b 	bl	8006274 <move_window>
 80065fe:	4603      	mov	r3, r0
 8006600:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006602:	7ffb      	ldrb	r3, [r7, #31]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d17a      	bne.n	80066fe <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006614:	4413      	add	r3, r2
 8006616:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f003 0301 	and.w	r3, r3, #1
 800661e:	2b00      	cmp	r3, #0
 8006620:	d003      	beq.n	800662a <put_fat+0xf0>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	091b      	lsrs	r3, r3, #4
 8006626:	b2db      	uxtb	r3, r3
 8006628:	e00e      	b.n	8006648 <put_fat+0x10e>
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	b25b      	sxtb	r3, r3
 8006630:	f023 030f 	bic.w	r3, r3, #15
 8006634:	b25a      	sxtb	r2, r3
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	0a1b      	lsrs	r3, r3, #8
 800663a:	b25b      	sxtb	r3, r3
 800663c:	f003 030f 	and.w	r3, r3, #15
 8006640:	b25b      	sxtb	r3, r3
 8006642:	4313      	orrs	r3, r2
 8006644:	b25b      	sxtb	r3, r3
 8006646:	b2db      	uxtb	r3, r3
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	2201      	movs	r2, #1
 8006650:	70da      	strb	r2, [r3, #3]
			break;
 8006652:	e059      	b.n	8006708 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	0a1b      	lsrs	r3, r3, #8
 800665c:	4413      	add	r3, r2
 800665e:	4619      	mov	r1, r3
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f7ff fe07 	bl	8006274 <move_window>
 8006666:	4603      	mov	r3, r0
 8006668:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800666a:	7ffb      	ldrb	r3, [r7, #31]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d148      	bne.n	8006702 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	005b      	lsls	r3, r3, #1
 800667a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800667e:	4413      	add	r3, r2
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	b292      	uxth	r2, r2
 8006684:	4611      	mov	r1, r2
 8006686:	4618      	mov	r0, r3
 8006688:	f7ff fb7f 	bl	8005d8a <st_word>
			fs->wflag = 1;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2201      	movs	r2, #1
 8006690:	70da      	strb	r2, [r3, #3]
			break;
 8006692:	e039      	b.n	8006708 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	09db      	lsrs	r3, r3, #7
 800669c:	4413      	add	r3, r2
 800669e:	4619      	mov	r1, r3
 80066a0:	68f8      	ldr	r0, [r7, #12]
 80066a2:	f7ff fde7 	bl	8006274 <move_window>
 80066a6:	4603      	mov	r3, r0
 80066a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066aa:	7ffb      	ldrb	r3, [r7, #31]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d12a      	bne.n	8006706 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066bc:	68bb      	ldr	r3, [r7, #8]
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80066c4:	4413      	add	r3, r2
 80066c6:	4618      	mov	r0, r3
 80066c8:	f7ff fb3c 	bl	8005d44 <ld_dword>
 80066cc:	4603      	mov	r3, r0
 80066ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80066d2:	4323      	orrs	r3, r4
 80066d4:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80066e4:	4413      	add	r3, r2
 80066e6:	6879      	ldr	r1, [r7, #4]
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7ff fb69 	bl	8005dc0 <st_dword>
			fs->wflag = 1;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	70da      	strb	r2, [r3, #3]
			break;
 80066f4:	e008      	b.n	8006708 <put_fat+0x1ce>
		}
	}
 80066f6:	bf00      	nop
 80066f8:	e006      	b.n	8006708 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80066fa:	bf00      	nop
 80066fc:	e004      	b.n	8006708 <put_fat+0x1ce>
			if (res != FR_OK) break;
 80066fe:	bf00      	nop
 8006700:	e002      	b.n	8006708 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006702:	bf00      	nop
 8006704:	e000      	b.n	8006708 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8006706:	bf00      	nop
	return res;
 8006708:	7ffb      	ldrb	r3, [r7, #31]
}
 800670a:	4618      	mov	r0, r3
 800670c:	3724      	adds	r7, #36	; 0x24
 800670e:	46bd      	mov	sp, r7
 8006710:	bd90      	pop	{r4, r7, pc}

08006712 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8006712:	b580      	push	{r7, lr}
 8006714:	b088      	sub	sp, #32
 8006716:	af00      	add	r7, sp, #0
 8006718:	60f8      	str	r0, [r7, #12]
 800671a:	60b9      	str	r1, [r7, #8]
 800671c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800671e:	2300      	movs	r3, #0
 8006720:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	2b01      	cmp	r3, #1
 800672c:	d904      	bls.n	8006738 <remove_chain+0x26>
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	68ba      	ldr	r2, [r7, #8]
 8006734:	429a      	cmp	r2, r3
 8006736:	d301      	bcc.n	800673c <remove_chain+0x2a>
 8006738:	2302      	movs	r3, #2
 800673a:	e04b      	b.n	80067d4 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00c      	beq.n	800675c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006742:	f04f 32ff 	mov.w	r2, #4294967295
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	69b8      	ldr	r0, [r7, #24]
 800674a:	f7ff fef6 	bl	800653a <put_fat>
 800674e:	4603      	mov	r3, r0
 8006750:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006752:	7ffb      	ldrb	r3, [r7, #31]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d001      	beq.n	800675c <remove_chain+0x4a>
 8006758:	7ffb      	ldrb	r3, [r7, #31]
 800675a:	e03b      	b.n	80067d4 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800675c:	68b9      	ldr	r1, [r7, #8]
 800675e:	68f8      	ldr	r0, [r7, #12]
 8006760:	f7ff fe43 	bl	80063ea <get_fat>
 8006764:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d031      	beq.n	80067d0 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d101      	bne.n	8006776 <remove_chain+0x64>
 8006772:	2302      	movs	r3, #2
 8006774:	e02e      	b.n	80067d4 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677c:	d101      	bne.n	8006782 <remove_chain+0x70>
 800677e:	2301      	movs	r3, #1
 8006780:	e028      	b.n	80067d4 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006782:	2200      	movs	r2, #0
 8006784:	68b9      	ldr	r1, [r7, #8]
 8006786:	69b8      	ldr	r0, [r7, #24]
 8006788:	f7ff fed7 	bl	800653a <put_fat>
 800678c:	4603      	mov	r3, r0
 800678e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006790:	7ffb      	ldrb	r3, [r7, #31]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d001      	beq.n	800679a <remove_chain+0x88>
 8006796:	7ffb      	ldrb	r3, [r7, #31]
 8006798:	e01c      	b.n	80067d4 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800679a:	69bb      	ldr	r3, [r7, #24]
 800679c:	695a      	ldr	r2, [r3, #20]
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	3b02      	subs	r3, #2
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d20b      	bcs.n	80067c0 <remove_chain+0xae>
			fs->free_clst++;
 80067a8:	69bb      	ldr	r3, [r7, #24]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	1c5a      	adds	r2, r3, #1
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80067b2:	69bb      	ldr	r3, [r7, #24]
 80067b4:	791b      	ldrb	r3, [r3, #4]
 80067b6:	f043 0301 	orr.w	r3, r3, #1
 80067ba:	b2da      	uxtb	r2, r3
 80067bc:	69bb      	ldr	r3, [r7, #24]
 80067be:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80067c0:	697b      	ldr	r3, [r7, #20]
 80067c2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80067c4:	69bb      	ldr	r3, [r7, #24]
 80067c6:	699b      	ldr	r3, [r3, #24]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d3c6      	bcc.n	800675c <remove_chain+0x4a>
 80067ce:	e000      	b.n	80067d2 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80067d0:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3720      	adds	r7, #32
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b088      	sub	sp, #32
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10d      	bne.n	800680e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d004      	beq.n	8006808 <create_chain+0x2c>
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	699b      	ldr	r3, [r3, #24]
 8006802:	69ba      	ldr	r2, [r7, #24]
 8006804:	429a      	cmp	r2, r3
 8006806:	d31b      	bcc.n	8006840 <create_chain+0x64>
 8006808:	2301      	movs	r3, #1
 800680a:	61bb      	str	r3, [r7, #24]
 800680c:	e018      	b.n	8006840 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f7ff fdea 	bl	80063ea <get_fat>
 8006816:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2b01      	cmp	r3, #1
 800681c:	d801      	bhi.n	8006822 <create_chain+0x46>
 800681e:	2301      	movs	r3, #1
 8006820:	e070      	b.n	8006904 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006828:	d101      	bne.n	800682e <create_chain+0x52>
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	e06a      	b.n	8006904 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800682e:	693b      	ldr	r3, [r7, #16]
 8006830:	699b      	ldr	r3, [r3, #24]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	429a      	cmp	r2, r3
 8006836:	d201      	bcs.n	800683c <create_chain+0x60>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	e063      	b.n	8006904 <create_chain+0x128>
		scl = clst;
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006840:	69bb      	ldr	r3, [r7, #24]
 8006842:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	3301      	adds	r3, #1
 8006848:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	699b      	ldr	r3, [r3, #24]
 800684e:	69fa      	ldr	r2, [r7, #28]
 8006850:	429a      	cmp	r2, r3
 8006852:	d307      	bcc.n	8006864 <create_chain+0x88>
				ncl = 2;
 8006854:	2302      	movs	r3, #2
 8006856:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006858:	69fa      	ldr	r2, [r7, #28]
 800685a:	69bb      	ldr	r3, [r7, #24]
 800685c:	429a      	cmp	r2, r3
 800685e:	d901      	bls.n	8006864 <create_chain+0x88>
 8006860:	2300      	movs	r3, #0
 8006862:	e04f      	b.n	8006904 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006864:	69f9      	ldr	r1, [r7, #28]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f7ff fdbf 	bl	80063ea <get_fat>
 800686c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00e      	beq.n	8006892 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2b01      	cmp	r3, #1
 8006878:	d003      	beq.n	8006882 <create_chain+0xa6>
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006880:	d101      	bne.n	8006886 <create_chain+0xaa>
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	e03e      	b.n	8006904 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006886:	69fa      	ldr	r2, [r7, #28]
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	429a      	cmp	r2, r3
 800688c:	d1da      	bne.n	8006844 <create_chain+0x68>
 800688e:	2300      	movs	r3, #0
 8006890:	e038      	b.n	8006904 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006892:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006894:	f04f 32ff 	mov.w	r2, #4294967295
 8006898:	69f9      	ldr	r1, [r7, #28]
 800689a:	6938      	ldr	r0, [r7, #16]
 800689c:	f7ff fe4d 	bl	800653a <put_fat>
 80068a0:	4603      	mov	r3, r0
 80068a2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80068a4:	7dfb      	ldrb	r3, [r7, #23]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d109      	bne.n	80068be <create_chain+0xe2>
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d006      	beq.n	80068be <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	6839      	ldr	r1, [r7, #0]
 80068b4:	6938      	ldr	r0, [r7, #16]
 80068b6:	f7ff fe40 	bl	800653a <put_fat>
 80068ba:	4603      	mov	r3, r0
 80068bc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80068be:	7dfb      	ldrb	r3, [r7, #23]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d116      	bne.n	80068f2 <create_chain+0x116>
		fs->last_clst = ncl;
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	69fa      	ldr	r2, [r7, #28]
 80068c8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	695a      	ldr	r2, [r3, #20]
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	699b      	ldr	r3, [r3, #24]
 80068d2:	3b02      	subs	r3, #2
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d804      	bhi.n	80068e2 <create_chain+0x106>
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	1e5a      	subs	r2, r3, #1
 80068de:	693b      	ldr	r3, [r7, #16]
 80068e0:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	791b      	ldrb	r3, [r3, #4]
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	711a      	strb	r2, [r3, #4]
 80068f0:	e007      	b.n	8006902 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d102      	bne.n	80068fe <create_chain+0x122>
 80068f8:	f04f 33ff 	mov.w	r3, #4294967295
 80068fc:	e000      	b.n	8006900 <create_chain+0x124>
 80068fe:	2301      	movs	r3, #1
 8006900:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006902:	69fb      	ldr	r3, [r7, #28]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3720      	adds	r7, #32
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800690c:	b480      	push	{r7}
 800690e:	b087      	sub	sp, #28
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	3304      	adds	r3, #4
 8006922:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	0a5b      	lsrs	r3, r3, #9
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	8952      	ldrh	r2, [r2, #10]
 800692c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006930:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	1d1a      	adds	r2, r3, #4
 8006936:	613a      	str	r2, [r7, #16]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d101      	bne.n	8006946 <clmt_clust+0x3a>
 8006942:	2300      	movs	r3, #0
 8006944:	e010      	b.n	8006968 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	429a      	cmp	r2, r3
 800694c:	d307      	bcc.n	800695e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	617b      	str	r3, [r7, #20]
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	3304      	adds	r3, #4
 800695a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800695c:	e7e9      	b.n	8006932 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800695e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	681a      	ldr	r2, [r3, #0]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	4413      	add	r3, r2
}
 8006968:	4618      	mov	r0, r3
 800696a:	371c      	adds	r7, #28
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800698a:	d204      	bcs.n	8006996 <dir_sdi+0x22>
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	f003 031f 	and.w	r3, r3, #31
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <dir_sdi+0x26>
		return FR_INT_ERR;
 8006996:	2302      	movs	r3, #2
 8006998:	e063      	b.n	8006a62 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	689b      	ldr	r3, [r3, #8]
 80069a4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d106      	bne.n	80069ba <dir_sdi+0x46>
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d902      	bls.n	80069ba <dir_sdi+0x46>
		clst = fs->dirbase;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069b8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d10c      	bne.n	80069da <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	095b      	lsrs	r3, r3, #5
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	8912      	ldrh	r2, [r2, #8]
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d301      	bcc.n	80069d0 <dir_sdi+0x5c>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e048      	b.n	8006a62 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80069d0:	693b      	ldr	r3, [r7, #16]
 80069d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	61da      	str	r2, [r3, #28]
 80069d8:	e029      	b.n	8006a2e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	895b      	ldrh	r3, [r3, #10]
 80069de:	025b      	lsls	r3, r3, #9
 80069e0:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80069e2:	e019      	b.n	8006a18 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6979      	ldr	r1, [r7, #20]
 80069e8:	4618      	mov	r0, r3
 80069ea:	f7ff fcfe 	bl	80063ea <get_fat>
 80069ee:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f6:	d101      	bne.n	80069fc <dir_sdi+0x88>
 80069f8:	2301      	movs	r3, #1
 80069fa:	e032      	b.n	8006a62 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d904      	bls.n	8006a0c <dir_sdi+0x98>
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	699b      	ldr	r3, [r3, #24]
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	429a      	cmp	r2, r3
 8006a0a:	d301      	bcc.n	8006a10 <dir_sdi+0x9c>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e028      	b.n	8006a62 <dir_sdi+0xee>
			ofs -= csz;
 8006a10:	683a      	ldr	r2, [r7, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	1ad3      	subs	r3, r2, r3
 8006a16:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006a18:	683a      	ldr	r2, [r7, #0]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d2e1      	bcs.n	80069e4 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8006a20:	6979      	ldr	r1, [r7, #20]
 8006a22:	6938      	ldr	r0, [r7, #16]
 8006a24:	f7ff fcc2 	bl	80063ac <clust2sect>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	697a      	ldr	r2, [r7, #20]
 8006a32:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d101      	bne.n	8006a40 <dir_sdi+0xcc>
 8006a3c:	2302      	movs	r3, #2
 8006a3e:	e010      	b.n	8006a62 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	69da      	ldr	r2, [r3, #28]
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	0a5b      	lsrs	r3, r3, #9
 8006a48:	441a      	add	r2, r3
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5a:	441a      	add	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3718      	adds	r7, #24
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}

08006a6a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b086      	sub	sp, #24
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	3320      	adds	r3, #32
 8006a80:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d003      	beq.n	8006a92 <dir_next+0x28>
 8006a8a:	68bb      	ldr	r3, [r7, #8]
 8006a8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006a90:	d301      	bcc.n	8006a96 <dir_next+0x2c>
 8006a92:	2304      	movs	r3, #4
 8006a94:	e0aa      	b.n	8006bec <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f040 8098 	bne.w	8006bd2 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	69db      	ldr	r3, [r3, #28]
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	699b      	ldr	r3, [r3, #24]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d10b      	bne.n	8006acc <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	8912      	ldrh	r2, [r2, #8]
 8006abc:	4293      	cmp	r3, r2
 8006abe:	f0c0 8088 	bcc.w	8006bd2 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	61da      	str	r2, [r3, #28]
 8006ac8:	2304      	movs	r3, #4
 8006aca:	e08f      	b.n	8006bec <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	0a5b      	lsrs	r3, r3, #9
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	8952      	ldrh	r2, [r2, #10]
 8006ad4:	3a01      	subs	r2, #1
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d17a      	bne.n	8006bd2 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006adc:	687a      	ldr	r2, [r7, #4]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4610      	mov	r0, r2
 8006ae6:	f7ff fc80 	bl	80063ea <get_fat>
 8006aea:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006aec:	697b      	ldr	r3, [r7, #20]
 8006aee:	2b01      	cmp	r3, #1
 8006af0:	d801      	bhi.n	8006af6 <dir_next+0x8c>
 8006af2:	2302      	movs	r3, #2
 8006af4:	e07a      	b.n	8006bec <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006afc:	d101      	bne.n	8006b02 <dir_next+0x98>
 8006afe:	2301      	movs	r3, #1
 8006b00:	e074      	b.n	8006bec <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	699b      	ldr	r3, [r3, #24]
 8006b06:	697a      	ldr	r2, [r7, #20]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d358      	bcc.n	8006bbe <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d104      	bne.n	8006b1c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2200      	movs	r2, #0
 8006b16:	61da      	str	r2, [r3, #28]
 8006b18:	2304      	movs	r3, #4
 8006b1a:	e067      	b.n	8006bec <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	4619      	mov	r1, r3
 8006b24:	4610      	mov	r0, r2
 8006b26:	f7ff fe59 	bl	80067dc <create_chain>
 8006b2a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <dir_next+0xcc>
 8006b32:	2307      	movs	r3, #7
 8006b34:	e05a      	b.n	8006bec <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <dir_next+0xd6>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e055      	b.n	8006bec <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b46:	d101      	bne.n	8006b4c <dir_next+0xe2>
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e04f      	b.n	8006bec <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7ff fb4d 	bl	80061ec <sync_window>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d001      	beq.n	8006b5c <dir_next+0xf2>
 8006b58:	2301      	movs	r3, #1
 8006b5a:	e047      	b.n	8006bec <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	3334      	adds	r3, #52	; 0x34
 8006b60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b64:	2100      	movs	r1, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7ff f977 	bl	8005e5a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	613b      	str	r3, [r7, #16]
 8006b70:	6979      	ldr	r1, [r7, #20]
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f7ff fc1a 	bl	80063ac <clust2sect>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	631a      	str	r2, [r3, #48]	; 0x30
 8006b7e:	e012      	b.n	8006ba6 <dir_next+0x13c>
						fs->wflag = 1;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	2201      	movs	r2, #1
 8006b84:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f7ff fb30 	bl	80061ec <sync_window>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <dir_next+0x12c>
 8006b92:	2301      	movs	r3, #1
 8006b94:	e02a      	b.n	8006bec <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006b96:	693b      	ldr	r3, [r7, #16]
 8006b98:	3301      	adds	r3, #1
 8006b9a:	613b      	str	r3, [r7, #16]
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	631a      	str	r2, [r3, #48]	; 0x30
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	895b      	ldrh	r3, [r3, #10]
 8006baa:	461a      	mov	r2, r3
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d3e6      	bcc.n	8006b80 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	1ad2      	subs	r2, r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	697a      	ldr	r2, [r7, #20]
 8006bc2:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006bc4:	6979      	ldr	r1, [r7, #20]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	f7ff fbf0 	bl	80063ac <clust2sect>
 8006bcc:	4602      	mov	r2, r0
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	68ba      	ldr	r2, [r7, #8]
 8006bd6:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006be4:	441a      	add	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006bea:	2300      	movs	r3, #0
}
 8006bec:	4618      	mov	r0, r3
 8006bee:	3718      	adds	r7, #24
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b086      	sub	sp, #24
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
 8006bfc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006c04:	2100      	movs	r1, #0
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff feb4 	bl	8006974 <dir_sdi>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d12b      	bne.n	8006c6e <dir_alloc+0x7a>
		n = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	69db      	ldr	r3, [r3, #28]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f7ff fb27 	bl	8006274 <move_window>
 8006c26:	4603      	mov	r3, r0
 8006c28:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d11d      	bne.n	8006c6c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a1b      	ldr	r3, [r3, #32]
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	2be5      	cmp	r3, #229	; 0xe5
 8006c38:	d004      	beq.n	8006c44 <dir_alloc+0x50>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6a1b      	ldr	r3, [r3, #32]
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d107      	bne.n	8006c54 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	3301      	adds	r3, #1
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d102      	bne.n	8006c58 <dir_alloc+0x64>
 8006c52:	e00c      	b.n	8006c6e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006c54:	2300      	movs	r3, #0
 8006c56:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006c58:	2101      	movs	r1, #1
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff ff05 	bl	8006a6a <dir_next>
 8006c60:	4603      	mov	r3, r0
 8006c62:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d0d7      	beq.n	8006c1a <dir_alloc+0x26>
 8006c6a:	e000      	b.n	8006c6e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006c6c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	2b04      	cmp	r3, #4
 8006c72:	d101      	bne.n	8006c78 <dir_alloc+0x84>
 8006c74:	2307      	movs	r3, #7
 8006c76:	75fb      	strb	r3, [r7, #23]
	return res;
 8006c78:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3718      	adds	r7, #24
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b084      	sub	sp, #16
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
 8006c8a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006c8c:	683b      	ldr	r3, [r7, #0]
 8006c8e:	331a      	adds	r3, #26
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff f83f 	bl	8005d14 <ld_word>
 8006c96:	4603      	mov	r3, r0
 8006c98:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b03      	cmp	r3, #3
 8006ca0:	d109      	bne.n	8006cb6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	3314      	adds	r3, #20
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7ff f834 	bl	8005d14 <ld_word>
 8006cac:	4603      	mov	r3, r0
 8006cae:	041b      	lsls	r3, r3, #16
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	3710      	adds	r7, #16
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	331a      	adds	r3, #26
 8006cd0:	687a      	ldr	r2, [r7, #4]
 8006cd2:	b292      	uxth	r2, r2
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f7ff f857 	bl	8005d8a <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d109      	bne.n	8006cf8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	f103 0214 	add.w	r2, r3, #20
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	0c1b      	lsrs	r3, r3, #16
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	4619      	mov	r1, r3
 8006cf2:	4610      	mov	r0, r2
 8006cf4:	f7ff f849 	bl	8005d8a <st_word>
	}
}
 8006cf8:	bf00      	nop
 8006cfa:	3710      	adds	r7, #16
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	bd80      	pop	{r7, pc}

08006d00 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006d00:	b590      	push	{r4, r7, lr}
 8006d02:	b087      	sub	sp, #28
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	331a      	adds	r3, #26
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7ff f800 	bl	8005d14 <ld_word>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <cmp_lfn+0x1e>
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e059      	b.n	8006dd2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d26:	1e5a      	subs	r2, r3, #1
 8006d28:	4613      	mov	r3, r2
 8006d2a:	005b      	lsls	r3, r3, #1
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4413      	add	r3, r2
 8006d32:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006d34:	2301      	movs	r3, #1
 8006d36:	81fb      	strh	r3, [r7, #14]
 8006d38:	2300      	movs	r3, #0
 8006d3a:	613b      	str	r3, [r7, #16]
 8006d3c:	e033      	b.n	8006da6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006d3e:	4a27      	ldr	r2, [pc, #156]	; (8006ddc <cmp_lfn+0xdc>)
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	4413      	add	r3, r2
 8006d44:	781b      	ldrb	r3, [r3, #0]
 8006d46:	461a      	mov	r2, r3
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	4413      	add	r3, r2
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fe ffe1 	bl	8005d14 <ld_word>
 8006d52:	4603      	mov	r3, r0
 8006d54:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006d56:	89fb      	ldrh	r3, [r7, #14]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01a      	beq.n	8006d92 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	2bfe      	cmp	r3, #254	; 0xfe
 8006d60:	d812      	bhi.n	8006d88 <cmp_lfn+0x88>
 8006d62:	89bb      	ldrh	r3, [r7, #12]
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fa f937 	bl	8000fd8 <ff_wtoupper>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	461c      	mov	r4, r3
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	1c5a      	adds	r2, r3, #1
 8006d72:	617a      	str	r2, [r7, #20]
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	4413      	add	r3, r2
 8006d7a:	881b      	ldrh	r3, [r3, #0]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f7fa f92b 	bl	8000fd8 <ff_wtoupper>
 8006d82:	4603      	mov	r3, r0
 8006d84:	429c      	cmp	r4, r3
 8006d86:	d001      	beq.n	8006d8c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006d88:	2300      	movs	r3, #0
 8006d8a:	e022      	b.n	8006dd2 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006d8c:	89bb      	ldrh	r3, [r7, #12]
 8006d8e:	81fb      	strh	r3, [r7, #14]
 8006d90:	e006      	b.n	8006da0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006d92:	89bb      	ldrh	r3, [r7, #12]
 8006d94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d001      	beq.n	8006da0 <cmp_lfn+0xa0>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	e018      	b.n	8006dd2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	3301      	adds	r3, #1
 8006da4:	613b      	str	r3, [r7, #16]
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	2b0c      	cmp	r3, #12
 8006daa:	d9c8      	bls.n	8006d3e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00b      	beq.n	8006dd0 <cmp_lfn+0xd0>
 8006db8:	89fb      	ldrh	r3, [r7, #14]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d008      	beq.n	8006dd0 <cmp_lfn+0xd0>
 8006dbe:	697b      	ldr	r3, [r7, #20]
 8006dc0:	005b      	lsls	r3, r3, #1
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <cmp_lfn+0xd0>
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e000      	b.n	8006dd2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006dd0:	2301      	movs	r3, #1
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	371c      	adds	r7, #28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd90      	pop	{r4, r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	08013cac 	.word	0x08013cac

08006de0 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	331a      	adds	r3, #26
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fe ff90 	bl	8005d14 <ld_word>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d001      	beq.n	8006dfe <pick_lfn+0x1e>
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	e04d      	b.n	8006e9a <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e06:	1e5a      	subs	r2, r3, #1
 8006e08:	4613      	mov	r3, r2
 8006e0a:	005b      	lsls	r3, r3, #1
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	4413      	add	r3, r2
 8006e12:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006e14:	2301      	movs	r3, #1
 8006e16:	81fb      	strh	r3, [r7, #14]
 8006e18:	2300      	movs	r3, #0
 8006e1a:	613b      	str	r3, [r7, #16]
 8006e1c:	e028      	b.n	8006e70 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006e1e:	4a21      	ldr	r2, [pc, #132]	; (8006ea4 <pick_lfn+0xc4>)
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	4413      	add	r3, r2
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fe ff71 	bl	8005d14 <ld_word>
 8006e32:	4603      	mov	r3, r0
 8006e34:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006e36:	89fb      	ldrh	r3, [r7, #14]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00f      	beq.n	8006e5c <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	2bfe      	cmp	r3, #254	; 0xfe
 8006e40:	d901      	bls.n	8006e46 <pick_lfn+0x66>
 8006e42:	2300      	movs	r3, #0
 8006e44:	e029      	b.n	8006e9a <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 8006e46:	89bb      	ldrh	r3, [r7, #12]
 8006e48:	81fb      	strh	r3, [r7, #14]
 8006e4a:	697b      	ldr	r3, [r7, #20]
 8006e4c:	1c5a      	adds	r2, r3, #1
 8006e4e:	617a      	str	r2, [r7, #20]
 8006e50:	005b      	lsls	r3, r3, #1
 8006e52:	687a      	ldr	r2, [r7, #4]
 8006e54:	4413      	add	r3, r2
 8006e56:	89fa      	ldrh	r2, [r7, #14]
 8006e58:	801a      	strh	r2, [r3, #0]
 8006e5a:	e006      	b.n	8006e6a <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006e5c:	89bb      	ldrh	r3, [r7, #12]
 8006e5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d001      	beq.n	8006e6a <pick_lfn+0x8a>
 8006e66:	2300      	movs	r3, #0
 8006e68:	e017      	b.n	8006e9a <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	613b      	str	r3, [r7, #16]
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	2b0c      	cmp	r3, #12
 8006e74:	d9d3      	bls.n	8006e1e <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	781b      	ldrb	r3, [r3, #0]
 8006e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d00a      	beq.n	8006e98 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	2bfe      	cmp	r3, #254	; 0xfe
 8006e86:	d901      	bls.n	8006e8c <pick_lfn+0xac>
 8006e88:	2300      	movs	r3, #0
 8006e8a:	e006      	b.n	8006e9a <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	005b      	lsls	r3, r3, #1
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	4413      	add	r3, r2
 8006e94:	2200      	movs	r2, #0
 8006e96:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006e98:	2301      	movs	r3, #1
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3718      	adds	r7, #24
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}
 8006ea2:	bf00      	nop
 8006ea4:	08013cac 	.word	0x08013cac

08006ea8 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	460b      	mov	r3, r1
 8006eb8:	71fb      	strb	r3, [r7, #7]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	330d      	adds	r3, #13
 8006ec2:	79ba      	ldrb	r2, [r7, #6]
 8006ec4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	330b      	adds	r3, #11
 8006eca:	220f      	movs	r2, #15
 8006ecc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	330c      	adds	r3, #12
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006ed6:	68bb      	ldr	r3, [r7, #8]
 8006ed8:	331a      	adds	r3, #26
 8006eda:	2100      	movs	r1, #0
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fe ff54 	bl	8005d8a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006ee2:	79fb      	ldrb	r3, [r7, #7]
 8006ee4:	1e5a      	subs	r2, r3, #1
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	005b      	lsls	r3, r3, #1
 8006eea:	4413      	add	r3, r2
 8006eec:	009b      	lsls	r3, r3, #2
 8006eee:	4413      	add	r3, r2
 8006ef0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	82fb      	strh	r3, [r7, #22]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006efa:	8afb      	ldrh	r3, [r7, #22]
 8006efc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d007      	beq.n	8006f14 <put_lfn+0x6c>
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	1c5a      	adds	r2, r3, #1
 8006f08:	61fa      	str	r2, [r7, #28]
 8006f0a:	005b      	lsls	r3, r3, #1
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4413      	add	r3, r2
 8006f10:	881b      	ldrh	r3, [r3, #0]
 8006f12:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006f14:	4a17      	ldr	r2, [pc, #92]	; (8006f74 <put_lfn+0xcc>)
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	4413      	add	r3, r2
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	461a      	mov	r2, r3
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	4413      	add	r3, r2
 8006f22:	8afa      	ldrh	r2, [r7, #22]
 8006f24:	4611      	mov	r1, r2
 8006f26:	4618      	mov	r0, r3
 8006f28:	f7fe ff2f 	bl	8005d8a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006f2c:	8afb      	ldrh	r3, [r7, #22]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d102      	bne.n	8006f38 <put_lfn+0x90>
 8006f32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f36:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	61bb      	str	r3, [r7, #24]
 8006f3e:	69bb      	ldr	r3, [r7, #24]
 8006f40:	2b0c      	cmp	r3, #12
 8006f42:	d9da      	bls.n	8006efa <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006f44:	8afb      	ldrh	r3, [r7, #22]
 8006f46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d006      	beq.n	8006f5c <put_lfn+0xb4>
 8006f4e:	69fb      	ldr	r3, [r7, #28]
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	68fa      	ldr	r2, [r7, #12]
 8006f54:	4413      	add	r3, r2
 8006f56:	881b      	ldrh	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d103      	bne.n	8006f64 <put_lfn+0xbc>
 8006f5c:	79fb      	ldrb	r3, [r7, #7]
 8006f5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f62:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	79fa      	ldrb	r2, [r7, #7]
 8006f68:	701a      	strb	r2, [r3, #0]
}
 8006f6a:	bf00      	nop
 8006f6c:	3720      	adds	r7, #32
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	08013cac 	.word	0x08013cac

08006f78 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b08c      	sub	sp, #48	; 0x30
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006f86:	220b      	movs	r2, #11
 8006f88:	68b9      	ldr	r1, [r7, #8]
 8006f8a:	68f8      	ldr	r0, [r7, #12]
 8006f8c:	f7fe ff44 	bl	8005e18 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b05      	cmp	r3, #5
 8006f94:	d92b      	bls.n	8006fee <gen_numname+0x76>
		sr = seq;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006f9a:	e022      	b.n	8006fe2 <gen_numname+0x6a>
			wc = *lfn++;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	1c9a      	adds	r2, r3, #2
 8006fa0:	607a      	str	r2, [r7, #4]
 8006fa2:	881b      	ldrh	r3, [r3, #0]
 8006fa4:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006faa:	e017      	b.n	8006fdc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006fac:	69fb      	ldr	r3, [r7, #28]
 8006fae:	005a      	lsls	r2, r3, #1
 8006fb0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	4413      	add	r3, r2
 8006fb8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006fba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006fbc:	085b      	lsrs	r3, r3, #1
 8006fbe:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d005      	beq.n	8006fd6 <gen_numname+0x5e>
 8006fca:	69fb      	ldr	r3, [r7, #28]
 8006fcc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8006fd0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8006fd4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fd8:	3301      	adds	r3, #1
 8006fda:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fde:	2b0f      	cmp	r3, #15
 8006fe0:	d9e4      	bls.n	8006fac <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	881b      	ldrh	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1d8      	bne.n	8006f9c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006fee:	2307      	movs	r3, #7
 8006ff0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	f003 030f 	and.w	r3, r3, #15
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	3330      	adds	r3, #48	; 0x30
 8006ffe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8007002:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007006:	2b39      	cmp	r3, #57	; 0x39
 8007008:	d904      	bls.n	8007014 <gen_numname+0x9c>
 800700a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800700e:	3307      	adds	r3, #7
 8007010:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8007014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007016:	1e5a      	subs	r2, r3, #1
 8007018:	62ba      	str	r2, [r7, #40]	; 0x28
 800701a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800701e:	4413      	add	r3, r2
 8007020:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8007024:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	091b      	lsrs	r3, r3, #4
 800702c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d1de      	bne.n	8006ff2 <gen_numname+0x7a>
	ns[i] = '~';
 8007034:	f107 0214 	add.w	r2, r7, #20
 8007038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703a:	4413      	add	r3, r2
 800703c:	227e      	movs	r2, #126	; 0x7e
 800703e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8007040:	2300      	movs	r3, #0
 8007042:	627b      	str	r3, [r7, #36]	; 0x24
 8007044:	e002      	b.n	800704c <gen_numname+0xd4>
 8007046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007048:	3301      	adds	r3, #1
 800704a:	627b      	str	r3, [r7, #36]	; 0x24
 800704c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800704e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007050:	429a      	cmp	r2, r3
 8007052:	d205      	bcs.n	8007060 <gen_numname+0xe8>
 8007054:	68fa      	ldr	r2, [r7, #12]
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	4413      	add	r3, r2
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2b20      	cmp	r3, #32
 800705e:	d1f2      	bne.n	8007046 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8007060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007062:	2b07      	cmp	r3, #7
 8007064:	d808      	bhi.n	8007078 <gen_numname+0x100>
 8007066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007068:	1c5a      	adds	r2, r3, #1
 800706a:	62ba      	str	r2, [r7, #40]	; 0x28
 800706c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8007070:	4413      	add	r3, r2
 8007072:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8007076:	e000      	b.n	800707a <gen_numname+0x102>
 8007078:	2120      	movs	r1, #32
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	1c5a      	adds	r2, r3, #1
 800707e:	627a      	str	r2, [r7, #36]	; 0x24
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	460a      	mov	r2, r1
 8007086:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8007088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800708a:	2b07      	cmp	r3, #7
 800708c:	d9e8      	bls.n	8007060 <gen_numname+0xe8>
}
 800708e:	bf00      	nop
 8007090:	bf00      	nop
 8007092:	3730      	adds	r7, #48	; 0x30
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8007098:	b480      	push	{r7}
 800709a:	b085      	sub	sp, #20
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 80070a0:	2300      	movs	r3, #0
 80070a2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 80070a4:	230b      	movs	r3, #11
 80070a6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	0852      	lsrs	r2, r2, #1
 80070ae:	01db      	lsls	r3, r3, #7
 80070b0:	4313      	orrs	r3, r2
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	1c59      	adds	r1, r3, #1
 80070b8:	6079      	str	r1, [r7, #4]
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	4413      	add	r3, r2
 80070be:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	3b01      	subs	r3, #1
 80070c4:	60bb      	str	r3, [r7, #8]
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1ed      	bne.n	80070a8 <sum_sfn+0x10>
	return sum;
 80070cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3714      	adds	r7, #20
 80070d2:	46bd      	mov	sp, r7
 80070d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d8:	4770      	bx	lr

080070da <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b086      	sub	sp, #24
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 80070e4:	2304      	movs	r3, #4
 80070e6:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 80070ee:	23ff      	movs	r3, #255	; 0xff
 80070f0:	757b      	strb	r3, [r7, #21]
 80070f2:	23ff      	movs	r3, #255	; 0xff
 80070f4:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80070f6:	e081      	b.n	80071fc <dir_read+0x122>
		res = move_window(fs, dp->sect);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	69db      	ldr	r3, [r3, #28]
 80070fc:	4619      	mov	r1, r3
 80070fe:	6938      	ldr	r0, [r7, #16]
 8007100:	f7ff f8b8 	bl	8006274 <move_window>
 8007104:	4603      	mov	r3, r0
 8007106:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007108:	7dfb      	ldrb	r3, [r7, #23]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d17c      	bne.n	8007208 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a1b      	ldr	r3, [r3, #32]
 8007112:	781b      	ldrb	r3, [r3, #0]
 8007114:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 8007116:	7dbb      	ldrb	r3, [r7, #22]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d102      	bne.n	8007122 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800711c:	2304      	movs	r3, #4
 800711e:	75fb      	strb	r3, [r7, #23]
 8007120:	e077      	b.n	8007212 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	330b      	adds	r3, #11
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800712e:	73fb      	strb	r3, [r7, #15]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	7bfa      	ldrb	r2, [r7, #15]
 8007134:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007136:	7dbb      	ldrb	r3, [r7, #22]
 8007138:	2be5      	cmp	r3, #229	; 0xe5
 800713a:	d00e      	beq.n	800715a <dir_read+0x80>
 800713c:	7dbb      	ldrb	r3, [r7, #22]
 800713e:	2b2e      	cmp	r3, #46	; 0x2e
 8007140:	d00b      	beq.n	800715a <dir_read+0x80>
 8007142:	7bfb      	ldrb	r3, [r7, #15]
 8007144:	f023 0320 	bic.w	r3, r3, #32
 8007148:	2b08      	cmp	r3, #8
 800714a:	bf0c      	ite	eq
 800714c:	2301      	moveq	r3, #1
 800714e:	2300      	movne	r3, #0
 8007150:	b2db      	uxtb	r3, r3
 8007152:	461a      	mov	r2, r3
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	4293      	cmp	r3, r2
 8007158:	d002      	beq.n	8007160 <dir_read+0x86>
				ord = 0xFF;
 800715a:	23ff      	movs	r3, #255	; 0xff
 800715c:	757b      	strb	r3, [r7, #21]
 800715e:	e044      	b.n	80071ea <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 8007160:	7bfb      	ldrb	r3, [r7, #15]
 8007162:	2b0f      	cmp	r3, #15
 8007164:	d12f      	bne.n	80071c6 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 8007166:	7dbb      	ldrb	r3, [r7, #22]
 8007168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800716c:	2b00      	cmp	r3, #0
 800716e:	d00d      	beq.n	800718c <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	6a1b      	ldr	r3, [r3, #32]
 8007174:	7b5b      	ldrb	r3, [r3, #13]
 8007176:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 8007178:	7dbb      	ldrb	r3, [r7, #22]
 800717a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800717e:	75bb      	strb	r3, [r7, #22]
 8007180:	7dbb      	ldrb	r3, [r7, #22]
 8007182:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	695a      	ldr	r2, [r3, #20]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800718c:	7dba      	ldrb	r2, [r7, #22]
 800718e:	7d7b      	ldrb	r3, [r7, #21]
 8007190:	429a      	cmp	r2, r3
 8007192:	d115      	bne.n	80071c0 <dir_read+0xe6>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	330d      	adds	r3, #13
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	7d3a      	ldrb	r2, [r7, #20]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d10e      	bne.n	80071c0 <dir_read+0xe6>
 80071a2:	693b      	ldr	r3, [r7, #16]
 80071a4:	68da      	ldr	r2, [r3, #12]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	6a1b      	ldr	r3, [r3, #32]
 80071aa:	4619      	mov	r1, r3
 80071ac:	4610      	mov	r0, r2
 80071ae:	f7ff fe17 	bl	8006de0 <pick_lfn>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <dir_read+0xe6>
 80071b8:	7d7b      	ldrb	r3, [r7, #21]
 80071ba:	3b01      	subs	r3, #1
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	e000      	b.n	80071c2 <dir_read+0xe8>
 80071c0:	23ff      	movs	r3, #255	; 0xff
 80071c2:	757b      	strb	r3, [r7, #21]
 80071c4:	e011      	b.n	80071ea <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80071c6:	7d7b      	ldrb	r3, [r7, #21]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d109      	bne.n	80071e0 <dir_read+0x106>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a1b      	ldr	r3, [r3, #32]
 80071d0:	4618      	mov	r0, r3
 80071d2:	f7ff ff61 	bl	8007098 <sum_sfn>
 80071d6:	4603      	mov	r3, r0
 80071d8:	461a      	mov	r2, r3
 80071da:	7d3b      	ldrb	r3, [r7, #20]
 80071dc:	4293      	cmp	r3, r2
 80071de:	d015      	beq.n	800720c <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f04f 32ff 	mov.w	r2, #4294967295
 80071e6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 80071e8:	e010      	b.n	800720c <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80071ea:	2100      	movs	r1, #0
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f7ff fc3c 	bl	8006a6a <dir_next>
 80071f2:	4603      	mov	r3, r0
 80071f4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80071f6:	7dfb      	ldrb	r3, [r7, #23]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d109      	bne.n	8007210 <dir_read+0x136>
	while (dp->sect) {
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	69db      	ldr	r3, [r3, #28]
 8007200:	2b00      	cmp	r3, #0
 8007202:	f47f af79 	bne.w	80070f8 <dir_read+0x1e>
 8007206:	e004      	b.n	8007212 <dir_read+0x138>
		if (res != FR_OK) break;
 8007208:	bf00      	nop
 800720a:	e002      	b.n	8007212 <dir_read+0x138>
					break;
 800720c:	bf00      	nop
 800720e:	e000      	b.n	8007212 <dir_read+0x138>
		if (res != FR_OK) break;
 8007210:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007212:	7dfb      	ldrb	r3, [r7, #23]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d002      	beq.n	800721e <dir_read+0x144>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2200      	movs	r2, #0
 800721c:	61da      	str	r2, [r3, #28]
	return res;
 800721e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b086      	sub	sp, #24
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007236:	2100      	movs	r1, #0
 8007238:	6878      	ldr	r0, [r7, #4]
 800723a:	f7ff fb9b 	bl	8006974 <dir_sdi>
 800723e:	4603      	mov	r3, r0
 8007240:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007242:	7dfb      	ldrb	r3, [r7, #23]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <dir_find+0x24>
 8007248:	7dfb      	ldrb	r3, [r7, #23]
 800724a:	e0a9      	b.n	80073a0 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800724c:	23ff      	movs	r3, #255	; 0xff
 800724e:	753b      	strb	r3, [r7, #20]
 8007250:	7d3b      	ldrb	r3, [r7, #20]
 8007252:	757b      	strb	r3, [r7, #21]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f04f 32ff 	mov.w	r2, #4294967295
 800725a:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	69db      	ldr	r3, [r3, #28]
 8007260:	4619      	mov	r1, r3
 8007262:	6938      	ldr	r0, [r7, #16]
 8007264:	f7ff f806 	bl	8006274 <move_window>
 8007268:	4603      	mov	r3, r0
 800726a:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800726c:	7dfb      	ldrb	r3, [r7, #23]
 800726e:	2b00      	cmp	r3, #0
 8007270:	f040 8090 	bne.w	8007394 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6a1b      	ldr	r3, [r3, #32]
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800727c:	7dbb      	ldrb	r3, [r7, #22]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d102      	bne.n	8007288 <dir_find+0x60>
 8007282:	2304      	movs	r3, #4
 8007284:	75fb      	strb	r3, [r7, #23]
 8007286:	e08a      	b.n	800739e <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a1b      	ldr	r3, [r3, #32]
 800728c:	330b      	adds	r3, #11
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007294:	73fb      	strb	r3, [r7, #15]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	7bfa      	ldrb	r2, [r7, #15]
 800729a:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800729c:	7dbb      	ldrb	r3, [r7, #22]
 800729e:	2be5      	cmp	r3, #229	; 0xe5
 80072a0:	d007      	beq.n	80072b2 <dir_find+0x8a>
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	f003 0308 	and.w	r3, r3, #8
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d009      	beq.n	80072c0 <dir_find+0x98>
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	2b0f      	cmp	r3, #15
 80072b0:	d006      	beq.n	80072c0 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80072b2:	23ff      	movs	r3, #255	; 0xff
 80072b4:	757b      	strb	r3, [r7, #21]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f04f 32ff 	mov.w	r2, #4294967295
 80072bc:	631a      	str	r2, [r3, #48]	; 0x30
 80072be:	e05e      	b.n	800737e <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80072c0:	7bfb      	ldrb	r3, [r7, #15]
 80072c2:	2b0f      	cmp	r3, #15
 80072c4:	d136      	bne.n	8007334 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80072cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d154      	bne.n	800737e <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80072d4:	7dbb      	ldrb	r3, [r7, #22]
 80072d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d00d      	beq.n	80072fa <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	7b5b      	ldrb	r3, [r3, #13]
 80072e4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80072e6:	7dbb      	ldrb	r3, [r7, #22]
 80072e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ec:	75bb      	strb	r3, [r7, #22]
 80072ee:	7dbb      	ldrb	r3, [r7, #22]
 80072f0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695a      	ldr	r2, [r3, #20]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80072fa:	7dba      	ldrb	r2, [r7, #22]
 80072fc:	7d7b      	ldrb	r3, [r7, #21]
 80072fe:	429a      	cmp	r2, r3
 8007300:	d115      	bne.n	800732e <dir_find+0x106>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	330d      	adds	r3, #13
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	7d3a      	ldrb	r2, [r7, #20]
 800730c:	429a      	cmp	r2, r3
 800730e:	d10e      	bne.n	800732e <dir_find+0x106>
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6a1b      	ldr	r3, [r3, #32]
 8007318:	4619      	mov	r1, r3
 800731a:	4610      	mov	r0, r2
 800731c:	f7ff fcf0 	bl	8006d00 <cmp_lfn>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <dir_find+0x106>
 8007326:	7d7b      	ldrb	r3, [r7, #21]
 8007328:	3b01      	subs	r3, #1
 800732a:	b2db      	uxtb	r3, r3
 800732c:	e000      	b.n	8007330 <dir_find+0x108>
 800732e:	23ff      	movs	r3, #255	; 0xff
 8007330:	757b      	strb	r3, [r7, #21]
 8007332:	e024      	b.n	800737e <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007334:	7d7b      	ldrb	r3, [r7, #21]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d109      	bne.n	800734e <dir_find+0x126>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	4618      	mov	r0, r3
 8007340:	f7ff feaa 	bl	8007098 <sum_sfn>
 8007344:	4603      	mov	r3, r0
 8007346:	461a      	mov	r2, r3
 8007348:	7d3b      	ldrb	r3, [r7, #20]
 800734a:	4293      	cmp	r3, r2
 800734c:	d024      	beq.n	8007398 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007354:	f003 0301 	and.w	r3, r3, #1
 8007358:	2b00      	cmp	r3, #0
 800735a:	d10a      	bne.n	8007372 <dir_find+0x14a>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6a18      	ldr	r0, [r3, #32]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	3324      	adds	r3, #36	; 0x24
 8007364:	220b      	movs	r2, #11
 8007366:	4619      	mov	r1, r3
 8007368:	f7fe fd92 	bl	8005e90 <mem_cmp>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d014      	beq.n	800739c <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007372:	23ff      	movs	r3, #255	; 0xff
 8007374:	757b      	strb	r3, [r7, #21]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f04f 32ff 	mov.w	r2, #4294967295
 800737c:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800737e:	2100      	movs	r1, #0
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff fb72 	bl	8006a6a <dir_next>
 8007386:	4603      	mov	r3, r0
 8007388:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800738a:	7dfb      	ldrb	r3, [r7, #23]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f43f af65 	beq.w	800725c <dir_find+0x34>
 8007392:	e004      	b.n	800739e <dir_find+0x176>
		if (res != FR_OK) break;
 8007394:	bf00      	nop
 8007396:	e002      	b.n	800739e <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007398:	bf00      	nop
 800739a:	e000      	b.n	800739e <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800739c:	bf00      	nop

	return res;
 800739e:	7dfb      	ldrb	r3, [r7, #23]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3718      	adds	r7, #24
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b08c      	sub	sp, #48	; 0x30
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80073bc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <dir_register+0x20>
 80073c4:	2306      	movs	r3, #6
 80073c6:	e0e0      	b.n	800758a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80073c8:	2300      	movs	r3, #0
 80073ca:	627b      	str	r3, [r7, #36]	; 0x24
 80073cc:	e002      	b.n	80073d4 <dir_register+0x2c>
 80073ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d0:	3301      	adds	r3, #1
 80073d2:	627b      	str	r3, [r7, #36]	; 0x24
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	68da      	ldr	r2, [r3, #12]
 80073d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	4413      	add	r3, r2
 80073de:	881b      	ldrh	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d1f4      	bne.n	80073ce <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80073ea:	f107 030c 	add.w	r3, r7, #12
 80073ee:	220c      	movs	r2, #12
 80073f0:	4618      	mov	r0, r3
 80073f2:	f7fe fd11 	bl	8005e18 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 80073f6:	7dfb      	ldrb	r3, [r7, #23]
 80073f8:	f003 0301 	and.w	r3, r3, #1
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d032      	beq.n	8007466 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2240      	movs	r2, #64	; 0x40
 8007404:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8007408:	2301      	movs	r3, #1
 800740a:	62bb      	str	r3, [r7, #40]	; 0x28
 800740c:	e016      	b.n	800743c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	f107 010c 	add.w	r1, r7, #12
 800741c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800741e:	f7ff fdab 	bl	8006f78 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f7ff ff00 	bl	8007228 <dir_find>
 8007428:	4603      	mov	r3, r0
 800742a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800742e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007432:	2b00      	cmp	r3, #0
 8007434:	d106      	bne.n	8007444 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007438:	3301      	adds	r3, #1
 800743a:	62bb      	str	r3, [r7, #40]	; 0x28
 800743c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743e:	2b63      	cmp	r3, #99	; 0x63
 8007440:	d9e5      	bls.n	800740e <dir_register+0x66>
 8007442:	e000      	b.n	8007446 <dir_register+0x9e>
			if (res != FR_OK) break;
 8007444:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007448:	2b64      	cmp	r3, #100	; 0x64
 800744a:	d101      	bne.n	8007450 <dir_register+0xa8>
 800744c:	2307      	movs	r3, #7
 800744e:	e09c      	b.n	800758a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007450:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007454:	2b04      	cmp	r3, #4
 8007456:	d002      	beq.n	800745e <dir_register+0xb6>
 8007458:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800745c:	e095      	b.n	800758a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800745e:	7dfa      	ldrb	r2, [r7, #23]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007466:	7dfb      	ldrb	r3, [r7, #23]
 8007468:	f003 0302 	and.w	r3, r3, #2
 800746c:	2b00      	cmp	r3, #0
 800746e:	d007      	beq.n	8007480 <dir_register+0xd8>
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	330c      	adds	r3, #12
 8007474:	4a47      	ldr	r2, [pc, #284]	; (8007594 <dir_register+0x1ec>)
 8007476:	fba2 2303 	umull	r2, r3, r2, r3
 800747a:	089b      	lsrs	r3, r3, #2
 800747c:	3301      	adds	r3, #1
 800747e:	e000      	b.n	8007482 <dir_register+0xda>
 8007480:	2301      	movs	r3, #1
 8007482:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007484:	6a39      	ldr	r1, [r7, #32]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7ff fbb4 	bl	8006bf4 <dir_alloc>
 800748c:	4603      	mov	r3, r0
 800748e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007492:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007496:	2b00      	cmp	r3, #0
 8007498:	d148      	bne.n	800752c <dir_register+0x184>
 800749a:	6a3b      	ldr	r3, [r7, #32]
 800749c:	3b01      	subs	r3, #1
 800749e:	623b      	str	r3, [r7, #32]
 80074a0:	6a3b      	ldr	r3, [r7, #32]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d042      	beq.n	800752c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	695a      	ldr	r2, [r3, #20]
 80074aa:	6a3b      	ldr	r3, [r7, #32]
 80074ac:	015b      	lsls	r3, r3, #5
 80074ae:	1ad3      	subs	r3, r2, r3
 80074b0:	4619      	mov	r1, r3
 80074b2:	6878      	ldr	r0, [r7, #4]
 80074b4:	f7ff fa5e 	bl	8006974 <dir_sdi>
 80074b8:	4603      	mov	r3, r0
 80074ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80074be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d132      	bne.n	800752c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3324      	adds	r3, #36	; 0x24
 80074ca:	4618      	mov	r0, r3
 80074cc:	f7ff fde4 	bl	8007098 <sum_sfn>
 80074d0:	4603      	mov	r3, r0
 80074d2:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	69db      	ldr	r3, [r3, #28]
 80074d8:	4619      	mov	r1, r3
 80074da:	69f8      	ldr	r0, [r7, #28]
 80074dc:	f7fe feca 	bl	8006274 <move_window>
 80074e0:	4603      	mov	r3, r0
 80074e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 80074e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d11d      	bne.n	800752a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	68d8      	ldr	r0, [r3, #12]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6a19      	ldr	r1, [r3, #32]
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	7efb      	ldrb	r3, [r7, #27]
 80074fc:	f7ff fcd4 	bl	8006ea8 <put_lfn>
				fs->wflag = 1;
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	2201      	movs	r2, #1
 8007504:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007506:	2100      	movs	r1, #0
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f7ff faae 	bl	8006a6a <dir_next>
 800750e:	4603      	mov	r3, r0
 8007510:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8007514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007518:	2b00      	cmp	r3, #0
 800751a:	d107      	bne.n	800752c <dir_register+0x184>
 800751c:	6a3b      	ldr	r3, [r7, #32]
 800751e:	3b01      	subs	r3, #1
 8007520:	623b      	str	r3, [r7, #32]
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1d5      	bne.n	80074d4 <dir_register+0x12c>
 8007528:	e000      	b.n	800752c <dir_register+0x184>
				if (res != FR_OK) break;
 800752a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800752c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8007530:	2b00      	cmp	r3, #0
 8007532:	d128      	bne.n	8007586 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	69db      	ldr	r3, [r3, #28]
 8007538:	4619      	mov	r1, r3
 800753a:	69f8      	ldr	r0, [r7, #28]
 800753c:	f7fe fe9a 	bl	8006274 <move_window>
 8007540:	4603      	mov	r3, r0
 8007542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8007546:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800754a:	2b00      	cmp	r3, #0
 800754c:	d11b      	bne.n	8007586 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	2220      	movs	r2, #32
 8007554:	2100      	movs	r1, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f7fe fc7f 	bl	8005e5a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a18      	ldr	r0, [r3, #32]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	3324      	adds	r3, #36	; 0x24
 8007564:	220b      	movs	r2, #11
 8007566:	4619      	mov	r1, r3
 8007568:	f7fe fc56 	bl	8005e18 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a1b      	ldr	r3, [r3, #32]
 8007576:	330c      	adds	r3, #12
 8007578:	f002 0218 	and.w	r2, r2, #24
 800757c:	b2d2      	uxtb	r2, r2
 800757e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	2201      	movs	r2, #1
 8007584:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007586:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800758a:	4618      	mov	r0, r3
 800758c:	3730      	adds	r7, #48	; 0x30
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	4ec4ec4f 	.word	0x4ec4ec4f

08007598 <dir_remove>:

static
FRESULT dir_remove (	/* FR_OK:Succeeded, FR_DISK_ERR:A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b086      	sub	sp, #24
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	613b      	str	r3, [r7, #16]
#if _USE_LFN != 0	/* LFN configuration */
	DWORD last = dp->dptr;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	695b      	ldr	r3, [r3, #20]
 80075aa:	60fb      	str	r3, [r7, #12]

	res = (dp->blk_ofs == 0xFFFFFFFF) ? FR_OK : dir_sdi(dp, dp->blk_ofs);	/* Goto top of the entry block if LFN is exist */
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b4:	d007      	beq.n	80075c6 <dir_remove+0x2e>
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff f9d9 	bl	8006974 <dir_sdi>
 80075c2:	4603      	mov	r3, r0
 80075c4:	e000      	b.n	80075c8 <dir_remove+0x30>
 80075c6:	2300      	movs	r3, #0
 80075c8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80075ca:	7dfb      	ldrb	r3, [r7, #23]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d128      	bne.n	8007622 <dir_remove+0x8a>
		do {
			res = move_window(fs, dp->sect);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	69db      	ldr	r3, [r3, #28]
 80075d4:	4619      	mov	r1, r3
 80075d6:	6938      	ldr	r0, [r7, #16]
 80075d8:	f7fe fe4c 	bl	8006274 <move_window>
 80075dc:	4603      	mov	r3, r0
 80075de:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80075e0:	7dfb      	ldrb	r3, [r7, #23]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d115      	bne.n	8007612 <dir_remove+0x7a>
			/* Mark an entry 'deleted' */
			if (_FS_EXFAT && fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
				dp->dir[XDIR_Type] &= 0x7F;
			} else {									/* On the FAT12/16/32 volume */
				dp->dir[DIR_Name] = DDEM;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	22e5      	movs	r2, #229	; 0xe5
 80075ec:	701a      	strb	r2, [r3, #0]
			}
			fs->wflag = 1;
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2201      	movs	r2, #1
 80075f2:	70da      	strb	r2, [r3, #3]
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d90b      	bls.n	8007616 <dir_remove+0x7e>
			res = dir_next(dp, 0);	/* Next entry */
 80075fe:	2100      	movs	r1, #0
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f7ff fa32 	bl	8006a6a <dir_next>
 8007606:	4603      	mov	r3, r0
 8007608:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800760a:	7dfb      	ldrb	r3, [r7, #23]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0df      	beq.n	80075d0 <dir_remove+0x38>
 8007610:	e002      	b.n	8007618 <dir_remove+0x80>
			if (res != FR_OK) break;
 8007612:	bf00      	nop
 8007614:	e000      	b.n	8007618 <dir_remove+0x80>
			if (dp->dptr >= last) break;	/* If reached last entry then all entries of the object has been deleted. */
 8007616:	bf00      	nop
		if (res == FR_NO_FILE) res = FR_INT_ERR;
 8007618:	7dfb      	ldrb	r3, [r7, #23]
 800761a:	2b04      	cmp	r3, #4
 800761c:	d101      	bne.n	8007622 <dir_remove+0x8a>
 800761e:	2302      	movs	r3, #2
 8007620:	75fb      	strb	r3, [r7, #23]
		dp->dir[DIR_Name] = DDEM;
		fs->wflag = 1;
	}
#endif

	return res;
 8007622:	7dfb      	ldrb	r3, [r7, #23]
}
 8007624:	4618      	mov	r0, r3
 8007626:	3718      	adds	r7, #24
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b088      	sub	sp, #32
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	2200      	movs	r2, #0
 8007640:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	69db      	ldr	r3, [r3, #28]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f000 80c9 	beq.w	80077de <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007654:	d032      	beq.n	80076bc <get_fileinfo+0x90>
			i = j = 0;
 8007656:	2300      	movs	r3, #0
 8007658:	61bb      	str	r3, [r7, #24]
 800765a:	69bb      	ldr	r3, [r7, #24]
 800765c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800765e:	e01b      	b.n	8007698 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8007660:	89fb      	ldrh	r3, [r7, #14]
 8007662:	2100      	movs	r1, #0
 8007664:	4618      	mov	r0, r3
 8007666:	f7f9 fc4b 	bl	8000f00 <ff_convert>
 800766a:	4603      	mov	r3, r0
 800766c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800766e:	89fb      	ldrh	r3, [r7, #14]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d102      	bne.n	800767a <get_fileinfo+0x4e>
 8007674:	2300      	movs	r3, #0
 8007676:	61fb      	str	r3, [r7, #28]
 8007678:	e01a      	b.n	80076b0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800767a:	69fb      	ldr	r3, [r7, #28]
 800767c:	2bfe      	cmp	r3, #254	; 0xfe
 800767e:	d902      	bls.n	8007686 <get_fileinfo+0x5a>
 8007680:	2300      	movs	r3, #0
 8007682:	61fb      	str	r3, [r7, #28]
 8007684:	e014      	b.n	80076b0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 8007686:	69fb      	ldr	r3, [r7, #28]
 8007688:	1c5a      	adds	r2, r3, #1
 800768a:	61fa      	str	r2, [r7, #28]
 800768c:	89fa      	ldrh	r2, [r7, #14]
 800768e:	b2d1      	uxtb	r1, r2
 8007690:	683a      	ldr	r2, [r7, #0]
 8007692:	4413      	add	r3, r2
 8007694:	460a      	mov	r2, r1
 8007696:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	68da      	ldr	r2, [r3, #12]
 800769c:	69bb      	ldr	r3, [r7, #24]
 800769e:	1c59      	adds	r1, r3, #1
 80076a0:	61b9      	str	r1, [r7, #24]
 80076a2:	005b      	lsls	r3, r3, #1
 80076a4:	4413      	add	r3, r2
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	81fb      	strh	r3, [r7, #14]
 80076aa:	89fb      	ldrh	r3, [r7, #14]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1d7      	bne.n	8007660 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 80076b0:	683a      	ldr	r2, [r7, #0]
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	4413      	add	r3, r2
 80076b6:	3316      	adds	r3, #22
 80076b8:	2200      	movs	r2, #0
 80076ba:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 80076bc:	2300      	movs	r3, #0
 80076be:	61bb      	str	r3, [r7, #24]
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 80076c4:	683a      	ldr	r2, [r7, #0]
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4413      	add	r3, r2
 80076ca:	3316      	adds	r3, #22
 80076cc:	781b      	ldrb	r3, [r3, #0]
 80076ce:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80076d0:	e04c      	b.n	800776c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	6a1a      	ldr	r2, [r3, #32]
 80076d6:	69fb      	ldr	r3, [r7, #28]
 80076d8:	1c59      	adds	r1, r3, #1
 80076da:	61f9      	str	r1, [r7, #28]
 80076dc:	4413      	add	r3, r2
 80076de:	781b      	ldrb	r3, [r3, #0]
 80076e0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	2b20      	cmp	r3, #32
 80076e6:	d100      	bne.n	80076ea <get_fileinfo+0xbe>
 80076e8:	e040      	b.n	800776c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	2b05      	cmp	r3, #5
 80076ee:	d101      	bne.n	80076f4 <get_fileinfo+0xc8>
 80076f0:	23e5      	movs	r3, #229	; 0xe5
 80076f2:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	2b09      	cmp	r3, #9
 80076f8:	d10f      	bne.n	800771a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80076fa:	89bb      	ldrh	r3, [r7, #12]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d105      	bne.n	800770c <get_fileinfo+0xe0>
 8007700:	683a      	ldr	r2, [r7, #0]
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	4413      	add	r3, r2
 8007706:	3316      	adds	r3, #22
 8007708:	222e      	movs	r2, #46	; 0x2e
 800770a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800770c:	69bb      	ldr	r3, [r7, #24]
 800770e:	1c5a      	adds	r2, r3, #1
 8007710:	61ba      	str	r2, [r7, #24]
 8007712:	683a      	ldr	r2, [r7, #0]
 8007714:	4413      	add	r3, r2
 8007716:	222e      	movs	r2, #46	; 0x2e
 8007718:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	4413      	add	r3, r2
 8007720:	3309      	adds	r3, #9
 8007722:	7dfa      	ldrb	r2, [r7, #23]
 8007724:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 8007726:	89bb      	ldrh	r3, [r7, #12]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d11c      	bne.n	8007766 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800772c:	7dfb      	ldrb	r3, [r7, #23]
 800772e:	2b40      	cmp	r3, #64	; 0x40
 8007730:	d913      	bls.n	800775a <get_fileinfo+0x12e>
 8007732:	7dfb      	ldrb	r3, [r7, #23]
 8007734:	2b5a      	cmp	r3, #90	; 0x5a
 8007736:	d810      	bhi.n	800775a <get_fileinfo+0x12e>
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a1b      	ldr	r3, [r3, #32]
 800773c:	330c      	adds	r3, #12
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	461a      	mov	r2, r3
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	2b08      	cmp	r3, #8
 8007746:	d901      	bls.n	800774c <get_fileinfo+0x120>
 8007748:	2310      	movs	r3, #16
 800774a:	e000      	b.n	800774e <get_fileinfo+0x122>
 800774c:	2308      	movs	r3, #8
 800774e:	4013      	ands	r3, r2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	3320      	adds	r3, #32
 8007758:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800775a:	683a      	ldr	r2, [r7, #0]
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	4413      	add	r3, r2
 8007760:	3316      	adds	r3, #22
 8007762:	7dfa      	ldrb	r2, [r7, #23]
 8007764:	701a      	strb	r2, [r3, #0]
		}
		j++;
 8007766:	69bb      	ldr	r3, [r7, #24]
 8007768:	3301      	adds	r3, #1
 800776a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	2b0a      	cmp	r3, #10
 8007770:	d9af      	bls.n	80076d2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8007772:	89bb      	ldrh	r3, [r7, #12]
 8007774:	2b00      	cmp	r3, #0
 8007776:	d10d      	bne.n	8007794 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	4413      	add	r3, r2
 800777e:	3316      	adds	r3, #22
 8007780:	2200      	movs	r2, #0
 8007782:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6a1b      	ldr	r3, [r3, #32]
 8007788:	330c      	adds	r3, #12
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <get_fileinfo+0x168>
 8007790:	2300      	movs	r3, #0
 8007792:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8007794:	683a      	ldr	r2, [r7, #0]
 8007796:	69bb      	ldr	r3, [r7, #24]
 8007798:	4413      	add	r3, r2
 800779a:	3309      	adds	r3, #9
 800779c:	2200      	movs	r2, #0
 800779e:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a1b      	ldr	r3, [r3, #32]
 80077a4:	7ada      	ldrb	r2, [r3, #11]
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a1b      	ldr	r3, [r3, #32]
 80077ae:	331c      	adds	r3, #28
 80077b0:	4618      	mov	r0, r3
 80077b2:	f7fe fac7 	bl	8005d44 <ld_dword>
 80077b6:	4602      	mov	r2, r0
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	3316      	adds	r3, #22
 80077c2:	4618      	mov	r0, r3
 80077c4:	f7fe fabe 	bl	8005d44 <ld_dword>
 80077c8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	b29a      	uxth	r2, r3
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	80da      	strh	r2, [r3, #6]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	0c1b      	lsrs	r3, r3, #16
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	809a      	strh	r2, [r3, #4]
 80077dc:	e000      	b.n	80077e0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80077de:	bf00      	nop
}
 80077e0:	3720      	adds	r7, #32
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
	...

080077e8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	b08a      	sub	sp, #40	; 0x28
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	613b      	str	r3, [r7, #16]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	60fb      	str	r3, [r7, #12]
 8007800:	2300      	movs	r3, #0
 8007802:	617b      	str	r3, [r7, #20]
 8007804:	697b      	ldr	r3, [r7, #20]
 8007806:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	1c5a      	adds	r2, r3, #1
 800780c:	61ba      	str	r2, [r7, #24]
 800780e:	693a      	ldr	r2, [r7, #16]
 8007810:	4413      	add	r3, r2
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007818:	2b1f      	cmp	r3, #31
 800781a:	d940      	bls.n	800789e <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800781c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800781e:	2b2f      	cmp	r3, #47	; 0x2f
 8007820:	d006      	beq.n	8007830 <create_name+0x48>
 8007822:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007824:	2b5c      	cmp	r3, #92	; 0x5c
 8007826:	d110      	bne.n	800784a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007828:	e002      	b.n	8007830 <create_name+0x48>
 800782a:	69bb      	ldr	r3, [r7, #24]
 800782c:	3301      	adds	r3, #1
 800782e:	61bb      	str	r3, [r7, #24]
 8007830:	693a      	ldr	r2, [r7, #16]
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	4413      	add	r3, r2
 8007836:	781b      	ldrb	r3, [r3, #0]
 8007838:	2b2f      	cmp	r3, #47	; 0x2f
 800783a:	d0f6      	beq.n	800782a <create_name+0x42>
 800783c:	693a      	ldr	r2, [r7, #16]
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	4413      	add	r3, r2
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b5c      	cmp	r3, #92	; 0x5c
 8007846:	d0f0      	beq.n	800782a <create_name+0x42>
			break;
 8007848:	e02a      	b.n	80078a0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800784a:	697b      	ldr	r3, [r7, #20]
 800784c:	2bfe      	cmp	r3, #254	; 0xfe
 800784e:	d901      	bls.n	8007854 <create_name+0x6c>
 8007850:	2306      	movs	r3, #6
 8007852:	e177      	b.n	8007b44 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007854:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007856:	b2db      	uxtb	r3, r3
 8007858:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800785a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800785c:	2101      	movs	r1, #1
 800785e:	4618      	mov	r0, r3
 8007860:	f7f9 fb4e 	bl	8000f00 <ff_convert>
 8007864:	4603      	mov	r3, r0
 8007866:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007868:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800786a:	2b00      	cmp	r3, #0
 800786c:	d101      	bne.n	8007872 <create_name+0x8a>
 800786e:	2306      	movs	r3, #6
 8007870:	e168      	b.n	8007b44 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007874:	2b7f      	cmp	r3, #127	; 0x7f
 8007876:	d809      	bhi.n	800788c <create_name+0xa4>
 8007878:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800787a:	4619      	mov	r1, r3
 800787c:	48b3      	ldr	r0, [pc, #716]	; (8007b4c <create_name+0x364>)
 800787e:	f7fe fb2e 	bl	8005ede <chk_chr>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d001      	beq.n	800788c <create_name+0xa4>
 8007888:	2306      	movs	r3, #6
 800788a:	e15b      	b.n	8007b44 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	1c5a      	adds	r2, r3, #1
 8007890:	617a      	str	r2, [r7, #20]
 8007892:	005b      	lsls	r3, r3, #1
 8007894:	68fa      	ldr	r2, [r7, #12]
 8007896:	4413      	add	r3, r2
 8007898:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800789a:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800789c:	e7b4      	b.n	8007808 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800789e:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80078a0:	693a      	ldr	r2, [r7, #16]
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	441a      	add	r2, r3
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80078aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078ac:	2b1f      	cmp	r3, #31
 80078ae:	d801      	bhi.n	80078b4 <create_name+0xcc>
 80078b0:	2304      	movs	r3, #4
 80078b2:	e000      	b.n	80078b6 <create_name+0xce>
 80078b4:	2300      	movs	r3, #0
 80078b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80078ba:	e011      	b.n	80078e0 <create_name+0xf8>
		w = lfn[di - 1];
 80078bc:	697b      	ldr	r3, [r7, #20]
 80078be:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80078c2:	3b01      	subs	r3, #1
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	68fa      	ldr	r2, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	881b      	ldrh	r3, [r3, #0]
 80078cc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80078ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078d0:	2b20      	cmp	r3, #32
 80078d2:	d002      	beq.n	80078da <create_name+0xf2>
 80078d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80078d6:	2b2e      	cmp	r3, #46	; 0x2e
 80078d8:	d106      	bne.n	80078e8 <create_name+0x100>
		di--;
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	3b01      	subs	r3, #1
 80078de:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1ea      	bne.n	80078bc <create_name+0xd4>
 80078e6:	e000      	b.n	80078ea <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80078e8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	005b      	lsls	r3, r3, #1
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	4413      	add	r3, r2
 80078f2:	2200      	movs	r2, #0
 80078f4:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d101      	bne.n	8007900 <create_name+0x118>
 80078fc:	2306      	movs	r3, #6
 80078fe:	e121      	b.n	8007b44 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3324      	adds	r3, #36	; 0x24
 8007904:	220b      	movs	r2, #11
 8007906:	2120      	movs	r1, #32
 8007908:	4618      	mov	r0, r3
 800790a:	f7fe faa6 	bl	8005e5a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800790e:	2300      	movs	r3, #0
 8007910:	61bb      	str	r3, [r7, #24]
 8007912:	e002      	b.n	800791a <create_name+0x132>
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	3301      	adds	r3, #1
 8007918:	61bb      	str	r3, [r7, #24]
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	68fa      	ldr	r2, [r7, #12]
 8007920:	4413      	add	r3, r2
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	2b20      	cmp	r3, #32
 8007926:	d0f5      	beq.n	8007914 <create_name+0x12c>
 8007928:	69bb      	ldr	r3, [r7, #24]
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	4413      	add	r3, r2
 8007930:	881b      	ldrh	r3, [r3, #0]
 8007932:	2b2e      	cmp	r3, #46	; 0x2e
 8007934:	d0ee      	beq.n	8007914 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d009      	beq.n	8007950 <create_name+0x168>
 800793c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007940:	f043 0303 	orr.w	r3, r3, #3
 8007944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007948:	e002      	b.n	8007950 <create_name+0x168>
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	3b01      	subs	r3, #1
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d009      	beq.n	800796a <create_name+0x182>
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800795c:	3b01      	subs	r3, #1
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	881b      	ldrh	r3, [r3, #0]
 8007966:	2b2e      	cmp	r3, #46	; 0x2e
 8007968:	d1ef      	bne.n	800794a <create_name+0x162>

	i = b = 0; ni = 8;
 800796a:	2300      	movs	r3, #0
 800796c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007970:	2300      	movs	r3, #0
 8007972:	623b      	str	r3, [r7, #32]
 8007974:	2308      	movs	r3, #8
 8007976:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	61ba      	str	r2, [r7, #24]
 800797e:	005b      	lsls	r3, r3, #1
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	4413      	add	r3, r2
 8007984:	881b      	ldrh	r3, [r3, #0]
 8007986:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 8090 	beq.w	8007ab0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007990:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007992:	2b20      	cmp	r3, #32
 8007994:	d006      	beq.n	80079a4 <create_name+0x1bc>
 8007996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007998:	2b2e      	cmp	r3, #46	; 0x2e
 800799a:	d10a      	bne.n	80079b2 <create_name+0x1ca>
 800799c:	69ba      	ldr	r2, [r7, #24]
 800799e:	697b      	ldr	r3, [r7, #20]
 80079a0:	429a      	cmp	r2, r3
 80079a2:	d006      	beq.n	80079b2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80079a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079a8:	f043 0303 	orr.w	r3, r3, #3
 80079ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079b0:	e07d      	b.n	8007aae <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80079b2:	6a3a      	ldr	r2, [r7, #32]
 80079b4:	69fb      	ldr	r3, [r7, #28]
 80079b6:	429a      	cmp	r2, r3
 80079b8:	d203      	bcs.n	80079c2 <create_name+0x1da>
 80079ba:	69ba      	ldr	r2, [r7, #24]
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	429a      	cmp	r2, r3
 80079c0:	d123      	bne.n	8007a0a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	2b0b      	cmp	r3, #11
 80079c6:	d106      	bne.n	80079d6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80079c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079cc:	f043 0303 	orr.w	r3, r3, #3
 80079d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80079d4:	e06f      	b.n	8007ab6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80079d6:	69ba      	ldr	r2, [r7, #24]
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d005      	beq.n	80079ea <create_name+0x202>
 80079de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079e2:	f043 0303 	orr.w	r3, r3, #3
 80079e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d860      	bhi.n	8007ab4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	61bb      	str	r3, [r7, #24]
 80079f6:	2308      	movs	r3, #8
 80079f8:	623b      	str	r3, [r7, #32]
 80079fa:	230b      	movs	r3, #11
 80079fc:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80079fe:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a02:	009b      	lsls	r3, r3, #2
 8007a04:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007a08:	e051      	b.n	8007aae <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007a0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a0c:	2b7f      	cmp	r3, #127	; 0x7f
 8007a0e:	d914      	bls.n	8007a3a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007a10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a12:	2100      	movs	r1, #0
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7f9 fa73 	bl	8000f00 <ff_convert>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007a1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d004      	beq.n	8007a2e <create_name+0x246>
 8007a24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a26:	3b80      	subs	r3, #128	; 0x80
 8007a28:	4a49      	ldr	r2, [pc, #292]	; (8007b50 <create_name+0x368>)
 8007a2a:	5cd3      	ldrb	r3, [r2, r3]
 8007a2c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007a2e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a32:	f043 0302 	orr.w	r3, r3, #2
 8007a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d007      	beq.n	8007a50 <create_name+0x268>
 8007a40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a42:	4619      	mov	r1, r3
 8007a44:	4843      	ldr	r0, [pc, #268]	; (8007b54 <create_name+0x36c>)
 8007a46:	f7fe fa4a 	bl	8005ede <chk_chr>
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d008      	beq.n	8007a62 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007a50:	235f      	movs	r3, #95	; 0x5f
 8007a52:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007a54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007a58:	f043 0303 	orr.w	r3, r3, #3
 8007a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007a60:	e01b      	b.n	8007a9a <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007a62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a64:	2b40      	cmp	r3, #64	; 0x40
 8007a66:	d909      	bls.n	8007a7c <create_name+0x294>
 8007a68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a6a:	2b5a      	cmp	r3, #90	; 0x5a
 8007a6c:	d806      	bhi.n	8007a7c <create_name+0x294>
					b |= 2;
 8007a6e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a72:	f043 0302 	orr.w	r3, r3, #2
 8007a76:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007a7a:	e00e      	b.n	8007a9a <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007a7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a7e:	2b60      	cmp	r3, #96	; 0x60
 8007a80:	d90b      	bls.n	8007a9a <create_name+0x2b2>
 8007a82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a84:	2b7a      	cmp	r3, #122	; 0x7a
 8007a86:	d808      	bhi.n	8007a9a <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007a88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007a8c:	f043 0301 	orr.w	r3, r3, #1
 8007a90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007a94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007a96:	3b20      	subs	r3, #32
 8007a98:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	623a      	str	r2, [r7, #32]
 8007aa0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007aa2:	b2d1      	uxtb	r1, r2
 8007aa4:	687a      	ldr	r2, [r7, #4]
 8007aa6:	4413      	add	r3, r2
 8007aa8:	460a      	mov	r2, r1
 8007aaa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007aae:	e763      	b.n	8007978 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007ab0:	bf00      	nop
 8007ab2:	e000      	b.n	8007ab6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8007ab4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007abc:	2be5      	cmp	r3, #229	; 0xe5
 8007abe:	d103      	bne.n	8007ac8 <create_name+0x2e0>
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2205      	movs	r2, #5
 8007ac4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	2b08      	cmp	r3, #8
 8007acc:	d104      	bne.n	8007ad8 <create_name+0x2f0>
 8007ace:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ad2:	009b      	lsls	r3, r3, #2
 8007ad4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007ad8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007adc:	f003 030c 	and.w	r3, r3, #12
 8007ae0:	2b0c      	cmp	r3, #12
 8007ae2:	d005      	beq.n	8007af0 <create_name+0x308>
 8007ae4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007ae8:	f003 0303 	and.w	r3, r3, #3
 8007aec:	2b03      	cmp	r3, #3
 8007aee:	d105      	bne.n	8007afc <create_name+0x314>
 8007af0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007af4:	f043 0302 	orr.w	r3, r3, #2
 8007af8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b00:	f003 0302 	and.w	r3, r3, #2
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d117      	bne.n	8007b38 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007b08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	2b01      	cmp	r3, #1
 8007b12:	d105      	bne.n	8007b20 <create_name+0x338>
 8007b14:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b18:	f043 0310 	orr.w	r3, r3, #16
 8007b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007b20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007b24:	f003 030c 	and.w	r3, r3, #12
 8007b28:	2b04      	cmp	r3, #4
 8007b2a:	d105      	bne.n	8007b38 <create_name+0x350>
 8007b2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007b30:	f043 0308 	orr.w	r3, r3, #8
 8007b34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007b3e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8007b42:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3728      	adds	r7, #40	; 0x28
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	0800c848 	.word	0x0800c848
 8007b50:	08013c2c 	.word	0x08013c2c
 8007b54:	0800c854 	.word	0x0800c854

08007b58 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b086      	sub	sp, #24
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007b6c:	e002      	b.n	8007b74 <follow_path+0x1c>
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	3301      	adds	r3, #1
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	2b2f      	cmp	r3, #47	; 0x2f
 8007b7a:	d0f8      	beq.n	8007b6e <follow_path+0x16>
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b5c      	cmp	r3, #92	; 0x5c
 8007b82:	d0f4      	beq.n	8007b6e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007b84:	693b      	ldr	r3, [r7, #16]
 8007b86:	2200      	movs	r2, #0
 8007b88:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b1f      	cmp	r3, #31
 8007b90:	d80a      	bhi.n	8007ba8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2280      	movs	r2, #128	; 0x80
 8007b96:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f7fe fee9 	bl	8006974 <dir_sdi>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	75fb      	strb	r3, [r7, #23]
 8007ba6:	e043      	b.n	8007c30 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ba8:	463b      	mov	r3, r7
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f7ff fe1b 	bl	80077e8 <create_name>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d134      	bne.n	8007c26 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff fb33 	bl	8007228 <dir_find>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007bcc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00a      	beq.n	8007bea <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d127      	bne.n	8007c2a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007bda:	7afb      	ldrb	r3, [r7, #11]
 8007bdc:	f003 0304 	and.w	r3, r3, #4
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d122      	bne.n	8007c2a <follow_path+0xd2>
 8007be4:	2305      	movs	r3, #5
 8007be6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007be8:	e01f      	b.n	8007c2a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007bea:	7afb      	ldrb	r3, [r7, #11]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d11c      	bne.n	8007c2e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007bf4:	693b      	ldr	r3, [r7, #16]
 8007bf6:	799b      	ldrb	r3, [r3, #6]
 8007bf8:	f003 0310 	and.w	r3, r3, #16
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d102      	bne.n	8007c06 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8007c00:	2305      	movs	r3, #5
 8007c02:	75fb      	strb	r3, [r7, #23]
 8007c04:	e014      	b.n	8007c30 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c14:	4413      	add	r3, r2
 8007c16:	4619      	mov	r1, r3
 8007c18:	68f8      	ldr	r0, [r7, #12]
 8007c1a:	f7ff f832 	bl	8006c82 <ld_clust>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	693b      	ldr	r3, [r7, #16]
 8007c22:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007c24:	e7c0      	b.n	8007ba8 <follow_path+0x50>
			if (res != FR_OK) break;
 8007c26:	bf00      	nop
 8007c28:	e002      	b.n	8007c30 <follow_path+0xd8>
				break;
 8007c2a:	bf00      	nop
 8007c2c:	e000      	b.n	8007c30 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007c2e:	bf00      	nop
			}
		}
	}

	return res;
 8007c30:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	3718      	adds	r7, #24
 8007c36:	46bd      	mov	sp, r7
 8007c38:	bd80      	pop	{r7, pc}

08007c3a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007c3a:	b480      	push	{r7}
 8007c3c:	b087      	sub	sp, #28
 8007c3e:	af00      	add	r7, sp, #0
 8007c40:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007c42:	f04f 33ff 	mov.w	r3, #4294967295
 8007c46:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d031      	beq.n	8007cb4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	617b      	str	r3, [r7, #20]
 8007c56:	e002      	b.n	8007c5e <get_ldnumber+0x24>
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	3301      	adds	r3, #1
 8007c5c:	617b      	str	r3, [r7, #20]
 8007c5e:	697b      	ldr	r3, [r7, #20]
 8007c60:	781b      	ldrb	r3, [r3, #0]
 8007c62:	2b1f      	cmp	r3, #31
 8007c64:	d903      	bls.n	8007c6e <get_ldnumber+0x34>
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	781b      	ldrb	r3, [r3, #0]
 8007c6a:	2b3a      	cmp	r3, #58	; 0x3a
 8007c6c:	d1f4      	bne.n	8007c58 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b3a      	cmp	r3, #58	; 0x3a
 8007c74:	d11c      	bne.n	8007cb0 <get_ldnumber+0x76>
			tp = *path;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	1c5a      	adds	r2, r3, #1
 8007c80:	60fa      	str	r2, [r7, #12]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	3b30      	subs	r3, #48	; 0x30
 8007c86:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	2b09      	cmp	r3, #9
 8007c8c:	d80e      	bhi.n	8007cac <get_ldnumber+0x72>
 8007c8e:	68fa      	ldr	r2, [r7, #12]
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	429a      	cmp	r2, r3
 8007c94:	d10a      	bne.n	8007cac <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d107      	bne.n	8007cac <get_ldnumber+0x72>
					vol = (int)i;
 8007c9c:	68bb      	ldr	r3, [r7, #8]
 8007c9e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	617b      	str	r3, [r7, #20]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	e002      	b.n	8007cb6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007cb4:	693b      	ldr	r3, [r7, #16]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	371c      	adds	r7, #28
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
	...

08007cc4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b082      	sub	sp, #8
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	70da      	strb	r2, [r3, #3]
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8007cda:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007cdc:	6839      	ldr	r1, [r7, #0]
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f7fe fac8 	bl	8006274 <move_window>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d001      	beq.n	8007cee <check_fs+0x2a>
 8007cea:	2304      	movs	r3, #4
 8007cec:	e038      	b.n	8007d60 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	3334      	adds	r3, #52	; 0x34
 8007cf2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe f80c 	bl	8005d14 <ld_word>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	461a      	mov	r2, r3
 8007d00:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d001      	beq.n	8007d0c <check_fs+0x48>
 8007d08:	2303      	movs	r3, #3
 8007d0a:	e029      	b.n	8007d60 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d12:	2be9      	cmp	r3, #233	; 0xe9
 8007d14:	d009      	beq.n	8007d2a <check_fs+0x66>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d1c:	2beb      	cmp	r3, #235	; 0xeb
 8007d1e:	d11e      	bne.n	8007d5e <check_fs+0x9a>
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007d26:	2b90      	cmp	r3, #144	; 0x90
 8007d28:	d119      	bne.n	8007d5e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	3334      	adds	r3, #52	; 0x34
 8007d2e:	3336      	adds	r3, #54	; 0x36
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7fe f807 	bl	8005d44 <ld_dword>
 8007d36:	4603      	mov	r3, r0
 8007d38:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007d3c:	4a0a      	ldr	r2, [pc, #40]	; (8007d68 <check_fs+0xa4>)
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d101      	bne.n	8007d46 <check_fs+0x82>
 8007d42:	2300      	movs	r3, #0
 8007d44:	e00c      	b.n	8007d60 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3334      	adds	r3, #52	; 0x34
 8007d4a:	3352      	adds	r3, #82	; 0x52
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7fd fff9 	bl	8005d44 <ld_dword>
 8007d52:	4603      	mov	r3, r0
 8007d54:	4a05      	ldr	r2, [pc, #20]	; (8007d6c <check_fs+0xa8>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d101      	bne.n	8007d5e <check_fs+0x9a>
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	e000      	b.n	8007d60 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007d5e:	2302      	movs	r3, #2
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3708      	adds	r7, #8
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}
 8007d68:	00544146 	.word	0x00544146
 8007d6c:	33544146 	.word	0x33544146

08007d70 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b096      	sub	sp, #88	; 0x58
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	4613      	mov	r3, r2
 8007d7c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f7ff ff58 	bl	8007c3a <get_ldnumber>
 8007d8a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	da01      	bge.n	8007d96 <find_volume+0x26>
 8007d92:	230b      	movs	r3, #11
 8007d94:	e22e      	b.n	80081f4 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007d96:	4aa8      	ldr	r2, [pc, #672]	; (8008038 <find_volume+0x2c8>)
 8007d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d9e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d101      	bne.n	8007daa <find_volume+0x3a>
 8007da6:	230c      	movs	r3, #12
 8007da8:	e224      	b.n	80081f4 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007dae:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007db0:	79fb      	ldrb	r3, [r7, #7]
 8007db2:	f023 0301 	bic.w	r3, r3, #1
 8007db6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d01a      	beq.n	8007df6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dc2:	785b      	ldrb	r3, [r3, #1]
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fd ff07 	bl	8005bd8 <disk_status>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007dd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10c      	bne.n	8007df6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d007      	beq.n	8007df2 <find_volume+0x82>
 8007de2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007de6:	f003 0304 	and.w	r3, r3, #4
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d001      	beq.n	8007df2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007dee:	230a      	movs	r3, #10
 8007df0:	e200      	b.n	80081f4 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8007df2:	2300      	movs	r3, #0
 8007df4:	e1fe      	b.n	80081f4 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	2200      	movs	r2, #0
 8007dfa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfe:	b2da      	uxtb	r2, r3
 8007e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e02:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007e04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e06:	785b      	ldrb	r3, [r3, #1]
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7fd feff 	bl	8005c0c <disk_initialize>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007e14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e18:	f003 0301 	and.w	r3, r3, #1
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d001      	beq.n	8007e24 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007e20:	2303      	movs	r3, #3
 8007e22:	e1e7      	b.n	80081f4 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007e24:	79fb      	ldrb	r3, [r7, #7]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d007      	beq.n	8007e3a <find_volume+0xca>
 8007e2a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007e2e:	f003 0304 	and.w	r3, r3, #4
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007e36:	230a      	movs	r3, #10
 8007e38:	e1dc      	b.n	80081f4 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007e3a:	2300      	movs	r3, #0
 8007e3c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007e3e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007e40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e42:	f7ff ff3f 	bl	8007cc4 <check_fs>
 8007e46:	4603      	mov	r3, r0
 8007e48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007e4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d14b      	bne.n	8007eec <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e54:	2300      	movs	r3, #0
 8007e56:	643b      	str	r3, [r7, #64]	; 0x40
 8007e58:	e01f      	b.n	8007e9a <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e5c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007e60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e62:	011b      	lsls	r3, r3, #4
 8007e64:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007e68:	4413      	add	r3, r2
 8007e6a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e6e:	3304      	adds	r3, #4
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d006      	beq.n	8007e84 <find_volume+0x114>
 8007e76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e78:	3308      	adds	r3, #8
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fd ff62 	bl	8005d44 <ld_dword>
 8007e80:	4602      	mov	r2, r0
 8007e82:	e000      	b.n	8007e86 <find_volume+0x116>
 8007e84:	2200      	movs	r2, #0
 8007e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e88:	009b      	lsls	r3, r3, #2
 8007e8a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007e8e:	440b      	add	r3, r1
 8007e90:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e96:	3301      	adds	r3, #1
 8007e98:	643b      	str	r3, [r7, #64]	; 0x40
 8007e9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e9c:	2b03      	cmp	r3, #3
 8007e9e:	d9dc      	bls.n	8007e5a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8007ea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d002      	beq.n	8007eb0 <find_volume+0x140>
 8007eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eac:	3b01      	subs	r3, #1
 8007eae:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007eb0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007eb2:	009b      	lsls	r3, r3, #2
 8007eb4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8007eb8:	4413      	add	r3, r2
 8007eba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007ebe:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007ec0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d005      	beq.n	8007ed2 <find_volume+0x162>
 8007ec6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007ec8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007eca:	f7ff fefb 	bl	8007cc4 <check_fs>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	e000      	b.n	8007ed4 <find_volume+0x164>
 8007ed2:	2303      	movs	r3, #3
 8007ed4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007ed8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007edc:	2b01      	cmp	r3, #1
 8007ede:	d905      	bls.n	8007eec <find_volume+0x17c>
 8007ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ee2:	3301      	adds	r3, #1
 8007ee4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ee8:	2b03      	cmp	r3, #3
 8007eea:	d9e1      	bls.n	8007eb0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007eec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007ef0:	2b04      	cmp	r3, #4
 8007ef2:	d101      	bne.n	8007ef8 <find_volume+0x188>
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e17d      	b.n	80081f4 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007ef8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007efc:	2b01      	cmp	r3, #1
 8007efe:	d901      	bls.n	8007f04 <find_volume+0x194>
 8007f00:	230d      	movs	r3, #13
 8007f02:	e177      	b.n	80081f4 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f06:	3334      	adds	r3, #52	; 0x34
 8007f08:	330b      	adds	r3, #11
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f7fd ff02 	bl	8005d14 <ld_word>
 8007f10:	4603      	mov	r3, r0
 8007f12:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f16:	d001      	beq.n	8007f1c <find_volume+0x1ac>
 8007f18:	230d      	movs	r3, #13
 8007f1a:	e16b      	b.n	80081f4 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f1e:	3334      	adds	r3, #52	; 0x34
 8007f20:	3316      	adds	r3, #22
 8007f22:	4618      	mov	r0, r3
 8007f24:	f7fd fef6 	bl	8005d14 <ld_word>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007f2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d106      	bne.n	8007f40 <find_volume+0x1d0>
 8007f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f34:	3334      	adds	r3, #52	; 0x34
 8007f36:	3324      	adds	r3, #36	; 0x24
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f7fd ff03 	bl	8005d44 <ld_dword>
 8007f3e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f44:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f48:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007f4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f4e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f52:	789b      	ldrb	r3, [r3, #2]
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d005      	beq.n	8007f64 <find_volume+0x1f4>
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	789b      	ldrb	r3, [r3, #2]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d001      	beq.n	8007f64 <find_volume+0x1f4>
 8007f60:	230d      	movs	r3, #13
 8007f62:	e147      	b.n	80081f4 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f66:	789b      	ldrb	r3, [r3, #2]
 8007f68:	461a      	mov	r2, r3
 8007f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f6c:	fb02 f303 	mul.w	r3, r2, r3
 8007f70:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f78:	b29a      	uxth	r2, r3
 8007f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f7c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f80:	895b      	ldrh	r3, [r3, #10]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d008      	beq.n	8007f98 <find_volume+0x228>
 8007f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f88:	895b      	ldrh	r3, [r3, #10]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f8e:	895b      	ldrh	r3, [r3, #10]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	4013      	ands	r3, r2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <find_volume+0x22c>
 8007f98:	230d      	movs	r3, #13
 8007f9a:	e12b      	b.n	80081f4 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f9e:	3334      	adds	r3, #52	; 0x34
 8007fa0:	3311      	adds	r3, #17
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fd feb6 	bl	8005d14 <ld_word>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	461a      	mov	r2, r3
 8007fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fb2:	891b      	ldrh	r3, [r3, #8]
 8007fb4:	f003 030f 	and.w	r3, r3, #15
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d001      	beq.n	8007fc2 <find_volume+0x252>
 8007fbe:	230d      	movs	r3, #13
 8007fc0:	e118      	b.n	80081f4 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fc4:	3334      	adds	r3, #52	; 0x34
 8007fc6:	3313      	adds	r3, #19
 8007fc8:	4618      	mov	r0, r3
 8007fca:	f7fd fea3 	bl	8005d14 <ld_word>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d106      	bne.n	8007fe6 <find_volume+0x276>
 8007fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fda:	3334      	adds	r3, #52	; 0x34
 8007fdc:	3320      	adds	r3, #32
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f7fd feb0 	bl	8005d44 <ld_dword>
 8007fe4:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fe8:	3334      	adds	r3, #52	; 0x34
 8007fea:	330e      	adds	r3, #14
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fd fe91 	bl	8005d14 <ld_word>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007ff6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <find_volume+0x290>
 8007ffc:	230d      	movs	r3, #13
 8007ffe:	e0f9      	b.n	80081f4 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008000:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008002:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008004:	4413      	add	r3, r2
 8008006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008008:	8912      	ldrh	r2, [r2, #8]
 800800a:	0912      	lsrs	r2, r2, #4
 800800c:	b292      	uxth	r2, r2
 800800e:	4413      	add	r3, r2
 8008010:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008016:	429a      	cmp	r2, r3
 8008018:	d201      	bcs.n	800801e <find_volume+0x2ae>
 800801a:	230d      	movs	r3, #13
 800801c:	e0ea      	b.n	80081f4 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800801e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008022:	1ad3      	subs	r3, r2, r3
 8008024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008026:	8952      	ldrh	r2, [r2, #10]
 8008028:	fbb3 f3f2 	udiv	r3, r3, r2
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800802e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	d103      	bne.n	800803c <find_volume+0x2cc>
 8008034:	230d      	movs	r3, #13
 8008036:	e0dd      	b.n	80081f4 <find_volume+0x484>
 8008038:	200002d0 	.word	0x200002d0
		fmt = FS_FAT32;
 800803c:	2303      	movs	r3, #3
 800803e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008044:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008048:	4293      	cmp	r3, r2
 800804a:	d802      	bhi.n	8008052 <find_volume+0x2e2>
 800804c:	2302      	movs	r3, #2
 800804e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008054:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008058:	4293      	cmp	r3, r2
 800805a:	d802      	bhi.n	8008062 <find_volume+0x2f2>
 800805c:	2301      	movs	r3, #1
 800805e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	1c9a      	adds	r2, r3, #2
 8008066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008068:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800806e:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008070:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008074:	441a      	add	r2, r3
 8008076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008078:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800807a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800807c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800807e:	441a      	add	r2, r3
 8008080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008082:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8008084:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008088:	2b03      	cmp	r3, #3
 800808a:	d11e      	bne.n	80080ca <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	3334      	adds	r3, #52	; 0x34
 8008090:	332a      	adds	r3, #42	; 0x2a
 8008092:	4618      	mov	r0, r3
 8008094:	f7fd fe3e 	bl	8005d14 <ld_word>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <find_volume+0x332>
 800809e:	230d      	movs	r3, #13
 80080a0:	e0a8      	b.n	80081f4 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80080a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a4:	891b      	ldrh	r3, [r3, #8]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d001      	beq.n	80080ae <find_volume+0x33e>
 80080aa:	230d      	movs	r3, #13
 80080ac:	e0a2      	b.n	80081f4 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80080ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b0:	3334      	adds	r3, #52	; 0x34
 80080b2:	332c      	adds	r3, #44	; 0x2c
 80080b4:	4618      	mov	r0, r3
 80080b6:	f7fd fe45 	bl	8005d44 <ld_dword>
 80080ba:	4602      	mov	r2, r0
 80080bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080be:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80080c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080c2:	699b      	ldr	r3, [r3, #24]
 80080c4:	009b      	lsls	r3, r3, #2
 80080c6:	647b      	str	r3, [r7, #68]	; 0x44
 80080c8:	e01f      	b.n	800810a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80080ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080cc:	891b      	ldrh	r3, [r3, #8]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d101      	bne.n	80080d6 <find_volume+0x366>
 80080d2:	230d      	movs	r3, #13
 80080d4:	e08e      	b.n	80081f4 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80080d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080dc:	441a      	add	r2, r3
 80080de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080e0:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80080e2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d103      	bne.n	80080f2 <find_volume+0x382>
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	699b      	ldr	r3, [r3, #24]
 80080ee:	005b      	lsls	r3, r3, #1
 80080f0:	e00a      	b.n	8008108 <find_volume+0x398>
 80080f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f4:	699a      	ldr	r2, [r3, #24]
 80080f6:	4613      	mov	r3, r2
 80080f8:	005b      	lsls	r3, r3, #1
 80080fa:	4413      	add	r3, r2
 80080fc:	085a      	lsrs	r2, r3, #1
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	699b      	ldr	r3, [r3, #24]
 8008102:	f003 0301 	and.w	r3, r3, #1
 8008106:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008108:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800810a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800810c:	69da      	ldr	r2, [r3, #28]
 800810e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008110:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008114:	0a5b      	lsrs	r3, r3, #9
 8008116:	429a      	cmp	r2, r3
 8008118:	d201      	bcs.n	800811e <find_volume+0x3ae>
 800811a:	230d      	movs	r3, #13
 800811c:	e06a      	b.n	80081f4 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800811e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008120:	f04f 32ff 	mov.w	r2, #4294967295
 8008124:	615a      	str	r2, [r3, #20]
 8008126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008128:	695a      	ldr	r2, [r3, #20]
 800812a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800812c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800812e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008130:	2280      	movs	r2, #128	; 0x80
 8008132:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008134:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008138:	2b03      	cmp	r3, #3
 800813a:	d149      	bne.n	80081d0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800813c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800813e:	3334      	adds	r3, #52	; 0x34
 8008140:	3330      	adds	r3, #48	; 0x30
 8008142:	4618      	mov	r0, r3
 8008144:	f7fd fde6 	bl	8005d14 <ld_word>
 8008148:	4603      	mov	r3, r0
 800814a:	2b01      	cmp	r3, #1
 800814c:	d140      	bne.n	80081d0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800814e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008150:	3301      	adds	r3, #1
 8008152:	4619      	mov	r1, r3
 8008154:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008156:	f7fe f88d 	bl	8006274 <move_window>
 800815a:	4603      	mov	r3, r0
 800815c:	2b00      	cmp	r3, #0
 800815e:	d137      	bne.n	80081d0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	2200      	movs	r2, #0
 8008164:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008168:	3334      	adds	r3, #52	; 0x34
 800816a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800816e:	4618      	mov	r0, r3
 8008170:	f7fd fdd0 	bl	8005d14 <ld_word>
 8008174:	4603      	mov	r3, r0
 8008176:	461a      	mov	r2, r3
 8008178:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800817c:	429a      	cmp	r2, r3
 800817e:	d127      	bne.n	80081d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8008180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008182:	3334      	adds	r3, #52	; 0x34
 8008184:	4618      	mov	r0, r3
 8008186:	f7fd fddd 	bl	8005d44 <ld_dword>
 800818a:	4603      	mov	r3, r0
 800818c:	4a1b      	ldr	r2, [pc, #108]	; (80081fc <find_volume+0x48c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d11e      	bne.n	80081d0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8008192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008194:	3334      	adds	r3, #52	; 0x34
 8008196:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800819a:	4618      	mov	r0, r3
 800819c:	f7fd fdd2 	bl	8005d44 <ld_dword>
 80081a0:	4603      	mov	r3, r0
 80081a2:	4a17      	ldr	r2, [pc, #92]	; (8008200 <find_volume+0x490>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d113      	bne.n	80081d0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80081a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081aa:	3334      	adds	r3, #52	; 0x34
 80081ac:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7fd fdc7 	bl	8005d44 <ld_dword>
 80081b6:	4602      	mov	r2, r0
 80081b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ba:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80081bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081be:	3334      	adds	r3, #52	; 0x34
 80081c0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80081c4:	4618      	mov	r0, r3
 80081c6:	f7fd fdbd 	bl	8005d44 <ld_dword>
 80081ca:	4602      	mov	r2, r0
 80081cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ce:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80081d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081d2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80081d6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80081d8:	4b0a      	ldr	r3, [pc, #40]	; (8008204 <find_volume+0x494>)
 80081da:	881b      	ldrh	r3, [r3, #0]
 80081dc:	3301      	adds	r3, #1
 80081de:	b29a      	uxth	r2, r3
 80081e0:	4b08      	ldr	r3, [pc, #32]	; (8008204 <find_volume+0x494>)
 80081e2:	801a      	strh	r2, [r3, #0]
 80081e4:	4b07      	ldr	r3, [pc, #28]	; (8008204 <find_volume+0x494>)
 80081e6:	881a      	ldrh	r2, [r3, #0]
 80081e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081ea:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80081ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80081ee:	f7fd ffd9 	bl	80061a4 <clear_lock>
#endif
	return FR_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3758      	adds	r7, #88	; 0x58
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	41615252 	.word	0x41615252
 8008200:	61417272 	.word	0x61417272
 8008204:	200002d4 	.word	0x200002d4

08008208 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008212:	2309      	movs	r3, #9
 8008214:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d01c      	beq.n	8008256 <validate+0x4e>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d018      	beq.n	8008256 <validate+0x4e>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d013      	beq.n	8008256 <validate+0x4e>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	889a      	ldrh	r2, [r3, #4]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	88db      	ldrh	r3, [r3, #6]
 8008238:	429a      	cmp	r2, r3
 800823a:	d10c      	bne.n	8008256 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	785b      	ldrb	r3, [r3, #1]
 8008242:	4618      	mov	r0, r3
 8008244:	f7fd fcc8 	bl	8005bd8 <disk_status>
 8008248:	4603      	mov	r3, r0
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	2b00      	cmp	r3, #0
 8008250:	d101      	bne.n	8008256 <validate+0x4e>
			res = FR_OK;
 8008252:	2300      	movs	r3, #0
 8008254:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d102      	bne.n	8008262 <validate+0x5a>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	e000      	b.n	8008264 <validate+0x5c>
 8008262:	2300      	movs	r3, #0
 8008264:	683a      	ldr	r2, [r7, #0]
 8008266:	6013      	str	r3, [r2, #0]
	return res;
 8008268:	7bfb      	ldrb	r3, [r7, #15]
}
 800826a:	4618      	mov	r0, r3
 800826c:	3710      	adds	r7, #16
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
	...

08008274 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b088      	sub	sp, #32
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	4613      	mov	r3, r2
 8008280:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8008282:	68bb      	ldr	r3, [r7, #8]
 8008284:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8008286:	f107 0310 	add.w	r3, r7, #16
 800828a:	4618      	mov	r0, r3
 800828c:	f7ff fcd5 	bl	8007c3a <get_ldnumber>
 8008290:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	2b00      	cmp	r3, #0
 8008296:	da01      	bge.n	800829c <f_mount+0x28>
 8008298:	230b      	movs	r3, #11
 800829a:	e02b      	b.n	80082f4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800829c:	4a17      	ldr	r2, [pc, #92]	; (80082fc <f_mount+0x88>)
 800829e:	69fb      	ldr	r3, [r7, #28]
 80082a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082a4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80082a6:	69bb      	ldr	r3, [r7, #24]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d005      	beq.n	80082b8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80082ac:	69b8      	ldr	r0, [r7, #24]
 80082ae:	f7fd ff79 	bl	80061a4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80082b2:	69bb      	ldr	r3, [r7, #24]
 80082b4:	2200      	movs	r2, #0
 80082b6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d002      	beq.n	80082c4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	2200      	movs	r2, #0
 80082c2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	490d      	ldr	r1, [pc, #52]	; (80082fc <f_mount+0x88>)
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <f_mount+0x66>
 80082d4:	79fb      	ldrb	r3, [r7, #7]
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d001      	beq.n	80082de <f_mount+0x6a>
 80082da:	2300      	movs	r3, #0
 80082dc:	e00a      	b.n	80082f4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80082de:	f107 010c 	add.w	r1, r7, #12
 80082e2:	f107 0308 	add.w	r3, r7, #8
 80082e6:	2200      	movs	r2, #0
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7ff fd41 	bl	8007d70 <find_volume>
 80082ee:	4603      	mov	r3, r0
 80082f0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80082f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3720      	adds	r7, #32
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	200002d0 	.word	0x200002d0

08008300 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8008306:	af00      	add	r7, sp, #0
 8008308:	f107 030c 	add.w	r3, r7, #12
 800830c:	6018      	str	r0, [r3, #0]
 800830e:	f107 0308 	add.w	r3, r7, #8
 8008312:	6019      	str	r1, [r3, #0]
 8008314:	1dfb      	adds	r3, r7, #7
 8008316:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008318:	f107 030c 	add.w	r3, r7, #12
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d101      	bne.n	8008326 <f_open+0x26>
 8008322:	2309      	movs	r3, #9
 8008324:	e231      	b.n	800878a <f_open+0x48a>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008326:	1dfb      	adds	r3, r7, #7
 8008328:	1dfa      	adds	r2, r7, #7
 800832a:	7812      	ldrb	r2, [r2, #0]
 800832c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8008330:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8008332:	1dfb      	adds	r3, r7, #7
 8008334:	781a      	ldrb	r2, [r3, #0]
 8008336:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800833a:	f107 0308 	add.w	r3, r7, #8
 800833e:	4618      	mov	r0, r3
 8008340:	f7ff fd16 	bl	8007d70 <find_volume>
 8008344:	4603      	mov	r3, r0
 8008346:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800834a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800834e:	2b00      	cmp	r3, #0
 8008350:	f040 8210 	bne.w	8008774 <f_open+0x474>
		dj.obj.fs = fs;
 8008354:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008358:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800835c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008360:	f107 0214 	add.w	r2, r7, #20
 8008364:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008366:	f107 0308 	add.w	r3, r7, #8
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8008370:	4611      	mov	r1, r2
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff fbf0 	bl	8007b58 <follow_path>
 8008378:	4603      	mov	r3, r0
 800837a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800837e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008382:	2b00      	cmp	r3, #0
 8008384:	d11b      	bne.n	80083be <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008386:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800838a:	b25b      	sxtb	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	da03      	bge.n	8008398 <f_open+0x98>
				res = FR_INVALID_NAME;
 8008390:	2306      	movs	r3, #6
 8008392:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008396:	e012      	b.n	80083be <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008398:	1dfb      	adds	r3, r7, #7
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	f023 0301 	bic.w	r3, r3, #1
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	bf14      	ite	ne
 80083a4:	2301      	movne	r3, #1
 80083a6:	2300      	moveq	r3, #0
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	461a      	mov	r2, r3
 80083ac:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80083b0:	4611      	mov	r1, r2
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fd fdae 	bl	8005f14 <chk_lock>
 80083b8:	4603      	mov	r3, r0
 80083ba:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80083be:	1dfb      	adds	r3, r7, #7
 80083c0:	781b      	ldrb	r3, [r3, #0]
 80083c2:	f003 031c 	and.w	r3, r3, #28
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f000 809b 	beq.w	8008502 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 80083cc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d019      	beq.n	8008408 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80083d4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80083d8:	2b04      	cmp	r3, #4
 80083da:	d10e      	bne.n	80083fa <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80083dc:	f7fd fdf6 	bl	8005fcc <enq_lock>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d006      	beq.n	80083f4 <f_open+0xf4>
 80083e6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80083ea:	4618      	mov	r0, r3
 80083ec:	f7fe ffdc 	bl	80073a8 <dir_register>
 80083f0:	4603      	mov	r3, r0
 80083f2:	e000      	b.n	80083f6 <f_open+0xf6>
 80083f4:	2312      	movs	r3, #18
 80083f6:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80083fa:	1dfb      	adds	r3, r7, #7
 80083fc:	1dfa      	adds	r2, r7, #7
 80083fe:	7812      	ldrb	r2, [r2, #0]
 8008400:	f042 0208 	orr.w	r2, r2, #8
 8008404:	701a      	strb	r2, [r3, #0]
 8008406:	e012      	b.n	800842e <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008408:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800840c:	f003 0311 	and.w	r3, r3, #17
 8008410:	2b00      	cmp	r3, #0
 8008412:	d003      	beq.n	800841c <f_open+0x11c>
					res = FR_DENIED;
 8008414:	2307      	movs	r3, #7
 8008416:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800841a:	e008      	b.n	800842e <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800841c:	1dfb      	adds	r3, r7, #7
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	f003 0304 	and.w	r3, r3, #4
 8008424:	2b00      	cmp	r3, #0
 8008426:	d002      	beq.n	800842e <f_open+0x12e>
 8008428:	2308      	movs	r3, #8
 800842a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800842e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008432:	2b00      	cmp	r3, #0
 8008434:	f040 8082 	bne.w	800853c <f_open+0x23c>
 8008438:	1dfb      	adds	r3, r7, #7
 800843a:	781b      	ldrb	r3, [r3, #0]
 800843c:	f003 0308 	and.w	r3, r3, #8
 8008440:	2b00      	cmp	r3, #0
 8008442:	d07b      	beq.n	800853c <f_open+0x23c>
				dw = GET_FATTIME();
 8008444:	f7fd fa4e 	bl	80058e4 <get_fattime>
 8008448:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800844c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008450:	330e      	adds	r3, #14
 8008452:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8008456:	4618      	mov	r0, r3
 8008458:	f7fd fcb2 	bl	8005dc0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800845c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008460:	3316      	adds	r3, #22
 8008462:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8008466:	4618      	mov	r0, r3
 8008468:	f7fd fcaa 	bl	8005dc0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800846c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8008470:	330b      	adds	r3, #11
 8008472:	2220      	movs	r2, #32
 8008474:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008476:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800847a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800847e:	4611      	mov	r1, r2
 8008480:	4618      	mov	r0, r3
 8008482:	f7fe fbfe 	bl	8006c82 <ld_clust>
 8008486:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800848a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800848e:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8008492:	2200      	movs	r2, #0
 8008494:	4618      	mov	r0, r3
 8008496:	f7fe fc13 	bl	8006cc0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800849a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800849e:	331c      	adds	r3, #28
 80084a0:	2100      	movs	r1, #0
 80084a2:	4618      	mov	r0, r3
 80084a4:	f7fd fc8c 	bl	8005dc0 <st_dword>
					fs->wflag = 1;
 80084a8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80084ac:	2201      	movs	r2, #1
 80084ae:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80084b0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d041      	beq.n	800853c <f_open+0x23c>
						dw = fs->winsect;
 80084b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 80084c2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80084c6:	2200      	movs	r2, #0
 80084c8:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7fe f920 	bl	8006712 <remove_chain>
 80084d2:	4603      	mov	r3, r0
 80084d4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 80084d8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d12d      	bne.n	800853c <f_open+0x23c>
							res = move_window(fs, dw);
 80084e0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80084e4:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80084e8:	4618      	mov	r0, r3
 80084ea:	f7fd fec3 	bl	8006274 <move_window>
 80084ee:	4603      	mov	r3, r0
 80084f0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80084f4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80084f8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80084fc:	3a01      	subs	r2, #1
 80084fe:	611a      	str	r2, [r3, #16]
 8008500:	e01c      	b.n	800853c <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008502:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008506:	2b00      	cmp	r3, #0
 8008508:	d118      	bne.n	800853c <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800850a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800850e:	f003 0310 	and.w	r3, r3, #16
 8008512:	2b00      	cmp	r3, #0
 8008514:	d003      	beq.n	800851e <f_open+0x21e>
					res = FR_NO_FILE;
 8008516:	2304      	movs	r3, #4
 8008518:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800851c:	e00e      	b.n	800853c <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800851e:	1dfb      	adds	r3, r7, #7
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d008      	beq.n	800853c <f_open+0x23c>
 800852a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d002      	beq.n	800853c <f_open+0x23c>
						res = FR_DENIED;
 8008536:	2307      	movs	r3, #7
 8008538:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800853c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008540:	2b00      	cmp	r3, #0
 8008542:	d136      	bne.n	80085b2 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008544:	1dfb      	adds	r3, r7, #7
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	f003 0308 	and.w	r3, r3, #8
 800854c:	2b00      	cmp	r3, #0
 800854e:	d005      	beq.n	800855c <f_open+0x25c>
				mode |= FA_MODIFIED;
 8008550:	1dfb      	adds	r3, r7, #7
 8008552:	1dfa      	adds	r2, r7, #7
 8008554:	7812      	ldrb	r2, [r2, #0]
 8008556:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800855a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800855c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008562:	f107 030c 	add.w	r3, r7, #12
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800856a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800856e:	f107 030c 	add.w	r3, r7, #12
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008576:	1dfb      	adds	r3, r7, #7
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	f023 0301 	bic.w	r3, r3, #1
 800857e:	2b00      	cmp	r3, #0
 8008580:	bf14      	ite	ne
 8008582:	2301      	movne	r3, #1
 8008584:	2300      	moveq	r3, #0
 8008586:	b2db      	uxtb	r3, r3
 8008588:	461a      	mov	r2, r3
 800858a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800858e:	4611      	mov	r1, r2
 8008590:	4618      	mov	r0, r3
 8008592:	f7fd fd3d 	bl	8006010 <inc_lock>
 8008596:	4602      	mov	r2, r0
 8008598:	f107 030c 	add.w	r3, r7, #12
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80085a0:	f107 030c 	add.w	r3, r7, #12
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	691b      	ldr	r3, [r3, #16]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d102      	bne.n	80085b2 <f_open+0x2b2>
 80085ac:	2302      	movs	r3, #2
 80085ae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 80085b2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	f040 80dc 	bne.w	8008774 <f_open+0x474>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80085bc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80085c0:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80085c4:	4611      	mov	r1, r2
 80085c6:	4618      	mov	r0, r3
 80085c8:	f7fe fb5b 	bl	8006c82 <ld_clust>
 80085cc:	4602      	mov	r2, r0
 80085ce:	f107 030c 	add.w	r3, r7, #12
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80085d6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80085da:	331c      	adds	r3, #28
 80085dc:	4618      	mov	r0, r3
 80085de:	f7fd fbb1 	bl	8005d44 <ld_dword>
 80085e2:	4602      	mov	r2, r0
 80085e4:	f107 030c 	add.w	r3, r7, #12
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80085ec:	f107 030c 	add.w	r3, r7, #12
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2200      	movs	r2, #0
 80085f4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80085f6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80085fa:	f107 030c 	add.w	r3, r7, #12
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008602:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008606:	88da      	ldrh	r2, [r3, #6]
 8008608:	f107 030c 	add.w	r3, r7, #12
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008610:	f107 030c 	add.w	r3, r7, #12
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	1dfa      	adds	r2, r7, #7
 8008618:	7812      	ldrb	r2, [r2, #0]
 800861a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800861c:	f107 030c 	add.w	r3, r7, #12
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2200      	movs	r2, #0
 8008624:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008626:	f107 030c 	add.w	r3, r7, #12
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2200      	movs	r2, #0
 800862e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008630:	f107 030c 	add.w	r3, r7, #12
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	2200      	movs	r2, #0
 8008638:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800863a:	f107 030c 	add.w	r3, r7, #12
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	3330      	adds	r3, #48	; 0x30
 8008642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008646:	2100      	movs	r1, #0
 8008648:	4618      	mov	r0, r3
 800864a:	f7fd fc06 	bl	8005e5a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800864e:	1dfb      	adds	r3, r7, #7
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	f003 0320 	and.w	r3, r3, #32
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 808c 	beq.w	8008774 <f_open+0x474>
 800865c:	f107 030c 	add.w	r3, r7, #12
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	68db      	ldr	r3, [r3, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 8085 	beq.w	8008774 <f_open+0x474>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800866a:	f107 030c 	add.w	r3, r7, #12
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	f107 030c 	add.w	r3, r7, #12
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800867a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800867e:	895b      	ldrh	r3, [r3, #10]
 8008680:	025b      	lsls	r3, r3, #9
 8008682:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008686:	f107 030c 	add.w	r3, r7, #12
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008692:	f107 030c 	add.w	r3, r7, #12
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	68db      	ldr	r3, [r3, #12]
 800869a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800869e:	e01f      	b.n	80086e0 <f_open+0x3e0>
					clst = get_fat(&fp->obj, clst);
 80086a0:	f107 030c 	add.w	r3, r7, #12
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fd fe9d 	bl	80063ea <get_fat>
 80086b0:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 80086b4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d802      	bhi.n	80086c2 <f_open+0x3c2>
 80086bc:	2302      	movs	r3, #2
 80086be:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80086c2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80086c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ca:	d102      	bne.n	80086d2 <f_open+0x3d2>
 80086cc:	2301      	movs	r3, #1
 80086ce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80086d2:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80086d6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80086da:	1ad3      	subs	r3, r2, r3
 80086dc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80086e0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d105      	bne.n	80086f4 <f_open+0x3f4>
 80086e8:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80086ec:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80086f0:	429a      	cmp	r2, r3
 80086f2:	d8d5      	bhi.n	80086a0 <f_open+0x3a0>
				}
				fp->clust = clst;
 80086f4:	f107 030c 	add.w	r3, r7, #12
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80086fe:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008700:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008704:	2b00      	cmp	r3, #0
 8008706:	d135      	bne.n	8008774 <f_open+0x474>
 8008708:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800870c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008710:	2b00      	cmp	r3, #0
 8008712:	d02f      	beq.n	8008774 <f_open+0x474>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008714:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8008718:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800871c:	4618      	mov	r0, r3
 800871e:	f7fd fe45 	bl	80063ac <clust2sect>
 8008722:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8008726:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800872a:	2b00      	cmp	r3, #0
 800872c:	d103      	bne.n	8008736 <f_open+0x436>
						res = FR_INT_ERR;
 800872e:	2302      	movs	r3, #2
 8008730:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8008734:	e01e      	b.n	8008774 <f_open+0x474>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008736:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800873a:	0a5a      	lsrs	r2, r3, #9
 800873c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8008740:	441a      	add	r2, r3
 8008742:	f107 030c 	add.w	r3, r7, #12
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800874a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800874e:	7858      	ldrb	r0, [r3, #1]
 8008750:	f107 030c 	add.w	r3, r7, #12
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800875a:	f107 030c 	add.w	r3, r7, #12
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	6a1a      	ldr	r2, [r3, #32]
 8008762:	2301      	movs	r3, #1
 8008764:	f7fd fa78 	bl	8005c58 <disk_read>
 8008768:	4603      	mov	r3, r0
 800876a:	2b00      	cmp	r3, #0
 800876c:	d002      	beq.n	8008774 <f_open+0x474>
 800876e:	2301      	movs	r3, #1
 8008770:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008774:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8008778:	2b00      	cmp	r3, #0
 800877a:	d004      	beq.n	8008786 <f_open+0x486>
 800877c:	f107 030c 	add.w	r3, r7, #12
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008786:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 800878a:	4618      	mov	r0, r3
 800878c:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}

08008794 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08c      	sub	sp, #48	; 0x30
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80087a2:	68bb      	ldr	r3, [r7, #8]
 80087a4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	2200      	movs	r2, #0
 80087aa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f107 0210 	add.w	r2, r7, #16
 80087b2:	4611      	mov	r1, r2
 80087b4:	4618      	mov	r0, r3
 80087b6:	f7ff fd27 	bl	8008208 <validate>
 80087ba:	4603      	mov	r3, r0
 80087bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80087c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d107      	bne.n	80087d8 <f_write+0x44>
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	7d5b      	ldrb	r3, [r3, #21]
 80087cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80087d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d002      	beq.n	80087de <f_write+0x4a>
 80087d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80087dc:	e14b      	b.n	8008a76 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	7d1b      	ldrb	r3, [r3, #20]
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d101      	bne.n	80087ee <f_write+0x5a>
 80087ea:	2307      	movs	r3, #7
 80087ec:	e143      	b.n	8008a76 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	699a      	ldr	r2, [r3, #24]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	441a      	add	r2, r3
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	f080 812d 	bcs.w	8008a5a <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	699b      	ldr	r3, [r3, #24]
 8008804:	43db      	mvns	r3, r3
 8008806:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008808:	e127      	b.n	8008a5a <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	699b      	ldr	r3, [r3, #24]
 800880e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008812:	2b00      	cmp	r3, #0
 8008814:	f040 80e3 	bne.w	80089de <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	699b      	ldr	r3, [r3, #24]
 800881c:	0a5b      	lsrs	r3, r3, #9
 800881e:	693a      	ldr	r2, [r7, #16]
 8008820:	8952      	ldrh	r2, [r2, #10]
 8008822:	3a01      	subs	r2, #1
 8008824:	4013      	ands	r3, r2
 8008826:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008828:	69bb      	ldr	r3, [r7, #24]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d143      	bne.n	80088b6 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	699b      	ldr	r3, [r3, #24]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10c      	bne.n	8008850 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800883e:	2b00      	cmp	r3, #0
 8008840:	d11a      	bne.n	8008878 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	2100      	movs	r1, #0
 8008846:	4618      	mov	r0, r3
 8008848:	f7fd ffc8 	bl	80067dc <create_chain>
 800884c:	62b8      	str	r0, [r7, #40]	; 0x28
 800884e:	e013      	b.n	8008878 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008854:	2b00      	cmp	r3, #0
 8008856:	d007      	beq.n	8008868 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	699b      	ldr	r3, [r3, #24]
 800885c:	4619      	mov	r1, r3
 800885e:	68f8      	ldr	r0, [r7, #12]
 8008860:	f7fe f854 	bl	800690c <clmt_clust>
 8008864:	62b8      	str	r0, [r7, #40]	; 0x28
 8008866:	e007      	b.n	8008878 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	69db      	ldr	r3, [r3, #28]
 800886e:	4619      	mov	r1, r3
 8008870:	4610      	mov	r0, r2
 8008872:	f7fd ffb3 	bl	80067dc <create_chain>
 8008876:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800887a:	2b00      	cmp	r3, #0
 800887c:	f000 80f2 	beq.w	8008a64 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008882:	2b01      	cmp	r3, #1
 8008884:	d104      	bne.n	8008890 <f_write+0xfc>
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	2202      	movs	r2, #2
 800888a:	755a      	strb	r2, [r3, #21]
 800888c:	2302      	movs	r3, #2
 800888e:	e0f2      	b.n	8008a76 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008896:	d104      	bne.n	80088a2 <f_write+0x10e>
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2201      	movs	r2, #1
 800889c:	755a      	strb	r2, [r3, #21]
 800889e:	2301      	movs	r3, #1
 80088a0:	e0e9      	b.n	8008a76 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088a6:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	689b      	ldr	r3, [r3, #8]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d102      	bne.n	80088b6 <f_write+0x122>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088b4:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	7d1b      	ldrb	r3, [r3, #20]
 80088ba:	b25b      	sxtb	r3, r3
 80088bc:	2b00      	cmp	r3, #0
 80088be:	da18      	bge.n	80088f2 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	7858      	ldrb	r0, [r3, #1]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	6a1a      	ldr	r2, [r3, #32]
 80088ce:	2301      	movs	r3, #1
 80088d0:	f7fd f9e2 	bl	8005c98 <disk_write>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d004      	beq.n	80088e4 <f_write+0x150>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2201      	movs	r2, #1
 80088de:	755a      	strb	r2, [r3, #21]
 80088e0:	2301      	movs	r3, #1
 80088e2:	e0c8      	b.n	8008a76 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	7d1b      	ldrb	r3, [r3, #20]
 80088e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	69db      	ldr	r3, [r3, #28]
 80088f8:	4619      	mov	r1, r3
 80088fa:	4610      	mov	r0, r2
 80088fc:	f7fd fd56 	bl	80063ac <clust2sect>
 8008900:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d104      	bne.n	8008912 <f_write+0x17e>
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2202      	movs	r2, #2
 800890c:	755a      	strb	r2, [r3, #21]
 800890e:	2302      	movs	r3, #2
 8008910:	e0b1      	b.n	8008a76 <f_write+0x2e2>
			sect += csect;
 8008912:	697a      	ldr	r2, [r7, #20]
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	4413      	add	r3, r2
 8008918:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	0a5b      	lsrs	r3, r3, #9
 800891e:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008920:	6a3b      	ldr	r3, [r7, #32]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d03c      	beq.n	80089a0 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008926:	69ba      	ldr	r2, [r7, #24]
 8008928:	6a3b      	ldr	r3, [r7, #32]
 800892a:	4413      	add	r3, r2
 800892c:	693a      	ldr	r2, [r7, #16]
 800892e:	8952      	ldrh	r2, [r2, #10]
 8008930:	4293      	cmp	r3, r2
 8008932:	d905      	bls.n	8008940 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	895b      	ldrh	r3, [r3, #10]
 8008938:	461a      	mov	r2, r3
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	7858      	ldrb	r0, [r3, #1]
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	69f9      	ldr	r1, [r7, #28]
 800894a:	f7fd f9a5 	bl	8005c98 <disk_write>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d004      	beq.n	800895e <f_write+0x1ca>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	2201      	movs	r2, #1
 8008958:	755a      	strb	r2, [r3, #21]
 800895a:	2301      	movs	r3, #1
 800895c:	e08b      	b.n	8008a76 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	6a1a      	ldr	r2, [r3, #32]
 8008962:	697b      	ldr	r3, [r7, #20]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	6a3a      	ldr	r2, [r7, #32]
 8008968:	429a      	cmp	r2, r3
 800896a:	d915      	bls.n	8008998 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	6a1a      	ldr	r2, [r3, #32]
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	1ad3      	subs	r3, r2, r3
 800897a:	025b      	lsls	r3, r3, #9
 800897c:	69fa      	ldr	r2, [r7, #28]
 800897e:	4413      	add	r3, r2
 8008980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008984:	4619      	mov	r1, r3
 8008986:	f7fd fa47 	bl	8005e18 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	7d1b      	ldrb	r3, [r3, #20]
 800898e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008992:	b2da      	uxtb	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008998:	6a3b      	ldr	r3, [r7, #32]
 800899a:	025b      	lsls	r3, r3, #9
 800899c:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800899e:	e03f      	b.n	8008a20 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a1b      	ldr	r3, [r3, #32]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	429a      	cmp	r2, r3
 80089a8:	d016      	beq.n	80089d8 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	699a      	ldr	r2, [r3, #24]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d210      	bcs.n	80089d8 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	7858      	ldrb	r0, [r3, #1]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80089c0:	2301      	movs	r3, #1
 80089c2:	697a      	ldr	r2, [r7, #20]
 80089c4:	f7fd f948 	bl	8005c58 <disk_read>
 80089c8:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d004      	beq.n	80089d8 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2201      	movs	r2, #1
 80089d2:	755a      	strb	r2, [r3, #21]
 80089d4:	2301      	movs	r3, #1
 80089d6:	e04e      	b.n	8008a76 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	697a      	ldr	r2, [r7, #20]
 80089dc:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80089e6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80089ea:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80089ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d901      	bls.n	80089f8 <f_write+0x264>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	699b      	ldr	r3, [r3, #24]
 8008a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a06:	4413      	add	r3, r2
 8008a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a0a:	69f9      	ldr	r1, [r7, #28]
 8008a0c:	4618      	mov	r0, r3
 8008a0e:	f7fd fa03 	bl	8005e18 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	7d1b      	ldrb	r3, [r3, #20]
 8008a16:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008a1a:	b2da      	uxtb	r2, r3
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008a20:	69fa      	ldr	r2, [r7, #28]
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	4413      	add	r3, r2
 8008a26:	61fb      	str	r3, [r7, #28]
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	699a      	ldr	r2, [r3, #24]
 8008a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a2e:	441a      	add	r2, r3
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	619a      	str	r2, [r3, #24]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	68da      	ldr	r2, [r3, #12]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	699b      	ldr	r3, [r3, #24]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	bf38      	it	cc
 8008a40:	461a      	movcc	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	60da      	str	r2, [r3, #12]
 8008a46:	683b      	ldr	r3, [r7, #0]
 8008a48:	681a      	ldr	r2, [r3, #0]
 8008a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4c:	441a      	add	r2, r3
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	601a      	str	r2, [r3, #0]
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a56:	1ad3      	subs	r3, r2, r3
 8008a58:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	f47f aed4 	bne.w	800880a <f_write+0x76>
 8008a62:	e000      	b.n	8008a66 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008a64:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	7d1b      	ldrb	r3, [r3, #20]
 8008a6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a6e:	b2da      	uxtb	r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3730      	adds	r7, #48	; 0x30
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b086      	sub	sp, #24
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	f107 0208 	add.w	r2, r7, #8
 8008a8c:	4611      	mov	r1, r2
 8008a8e:	4618      	mov	r0, r3
 8008a90:	f7ff fbba 	bl	8008208 <validate>
 8008a94:	4603      	mov	r3, r0
 8008a96:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d168      	bne.n	8008b70 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	7d1b      	ldrb	r3, [r3, #20]
 8008aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d062      	beq.n	8008b70 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	7d1b      	ldrb	r3, [r3, #20]
 8008aae:	b25b      	sxtb	r3, r3
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	da15      	bge.n	8008ae0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	7858      	ldrb	r0, [r3, #1]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a1a      	ldr	r2, [r3, #32]
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	f7fd f8e8 	bl	8005c98 <disk_write>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d001      	beq.n	8008ad2 <f_sync+0x54>
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e04f      	b.n	8008b72 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	7d1b      	ldrb	r3, [r3, #20]
 8008ad6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ada:	b2da      	uxtb	r2, r3
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8008ae0:	f7fc ff00 	bl	80058e4 <get_fattime>
 8008ae4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	4619      	mov	r1, r3
 8008aee:	4610      	mov	r0, r2
 8008af0:	f7fd fbc0 	bl	8006274 <move_window>
 8008af4:	4603      	mov	r3, r0
 8008af6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008af8:	7dfb      	ldrb	r3, [r7, #23]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d138      	bne.n	8008b70 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b02:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	330b      	adds	r3, #11
 8008b08:	781a      	ldrb	r2, [r3, #0]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	330b      	adds	r3, #11
 8008b0e:	f042 0220 	orr.w	r2, r2, #32
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	68f9      	ldr	r1, [r7, #12]
 8008b22:	f7fe f8cd 	bl	8006cc0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f103 021c 	add.w	r2, r3, #28
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	68db      	ldr	r3, [r3, #12]
 8008b30:	4619      	mov	r1, r3
 8008b32:	4610      	mov	r0, r2
 8008b34:	f7fd f944 	bl	8005dc0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	3316      	adds	r3, #22
 8008b3c:	6939      	ldr	r1, [r7, #16]
 8008b3e:	4618      	mov	r0, r3
 8008b40:	f7fd f93e 	bl	8005dc0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3312      	adds	r3, #18
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f7fd f91d 	bl	8005d8a <st_word>
					fs->wflag = 1;
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	2201      	movs	r2, #1
 8008b54:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7fd fbb9 	bl	80062d0 <sync_fs>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	7d1b      	ldrb	r3, [r3, #20]
 8008b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b6a:	b2da      	uxtb	r2, r3
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8008b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3718      	adds	r7, #24
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}

08008b7a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008b7a:	b580      	push	{r7, lr}
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	af00      	add	r7, sp, #0
 8008b80:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f7ff ff7b 	bl	8008a7e <f_sync>
 8008b88:	4603      	mov	r3, r0
 8008b8a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8008b8c:	7bfb      	ldrb	r3, [r7, #15]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d118      	bne.n	8008bc4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f107 0208 	add.w	r2, r7, #8
 8008b98:	4611      	mov	r1, r2
 8008b9a:	4618      	mov	r0, r3
 8008b9c:	f7ff fb34 	bl	8008208 <validate>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008ba4:	7bfb      	ldrb	r3, [r7, #15]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d10c      	bne.n	8008bc4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fd fabc 	bl	800612c <dec_lock>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008bb8:	7bfb      	ldrb	r3, [r7, #15]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	1d3b      	adds	r3, r7, #4
 8008bd8:	6018      	str	r0, [r3, #0]
 8008bda:	463b      	mov	r3, r7
 8008bdc:	6019      	str	r1, [r3, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8008bde:	1d3b      	adds	r3, r7, #4
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d101      	bne.n	8008bea <f_opendir+0x1c>
 8008be6:	2309      	movs	r3, #9
 8008be8:	e08a      	b.n	8008d00 <f_opendir+0x132>

	/* Get logical drive */
	obj = &dp->obj;
 8008bea:	1d3b      	adds	r3, r7, #4
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	res = find_volume(&path, &fs, 0);
 8008bf2:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8008bf6:	463b      	mov	r3, r7
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f7ff f8b8 	bl	8007d70 <find_volume>
 8008c00:	4603      	mov	r3, r0
 8008c02:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	if (res == FR_OK) {
 8008c06:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d16e      	bne.n	8008cec <f_opendir+0x11e>
		obj->fs = fs;
 8008c0e:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8008c12:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008c16:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
 8008c18:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008c1c:	f107 020c 	add.w	r2, r7, #12
 8008c20:	60da      	str	r2, [r3, #12]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8008c22:	463b      	mov	r3, r7
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	1d3b      	adds	r3, r7, #4
 8008c28:	4611      	mov	r1, r2
 8008c2a:	6818      	ldr	r0, [r3, #0]
 8008c2c:	f7fe ff94 	bl	8007b58 <follow_path>
 8008c30:	4603      	mov	r3, r0
 8008c32:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
		if (res == FR_OK) {						/* Follow completed */
 8008c36:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d14f      	bne.n	8008cde <f_opendir+0x110>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8008c3e:	1d3b      	adds	r3, r7, #4
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8008c46:	b25b      	sxtb	r3, r3
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	db17      	blt.n	8008c7c <f_opendir+0xae>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8008c4c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008c50:	799b      	ldrb	r3, [r3, #6]
 8008c52:	f003 0310 	and.w	r3, r3, #16
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d00d      	beq.n	8008c76 <f_opendir+0xa8>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8008c5a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8008c5e:	1d3b      	adds	r3, r7, #4
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	6a1b      	ldr	r3, [r3, #32]
 8008c64:	4619      	mov	r1, r3
 8008c66:	4610      	mov	r0, r2
 8008c68:	f7fe f80b 	bl	8006c82 <ld_clust>
 8008c6c:	4602      	mov	r2, r0
 8008c6e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008c72:	609a      	str	r2, [r3, #8]
 8008c74:	e002      	b.n	8008c7c <f_opendir+0xae>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8008c76:	2305      	movs	r3, #5
 8008c78:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
				}
			}
			if (res == FR_OK) {
 8008c7c:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d12c      	bne.n	8008cde <f_opendir+0x110>
				obj->id = fs->id;
 8008c84:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008c88:	88da      	ldrh	r2, [r3, #6]
 8008c8a:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008c8e:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8008c90:	1d3b      	adds	r3, r7, #4
 8008c92:	2100      	movs	r1, #0
 8008c94:	6818      	ldr	r0, [r3, #0]
 8008c96:	f7fd fe6d 	bl	8006974 <dir_sdi>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8008ca0:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d11a      	bne.n	8008cde <f_opendir+0x110>
					if (obj->sclust) {
 8008ca8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d011      	beq.n	8008cd6 <f_opendir+0x108>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8008cb2:	1d3b      	adds	r3, r7, #4
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	6818      	ldr	r0, [r3, #0]
 8008cb8:	f7fd f9aa 	bl	8006010 <inc_lock>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008cc2:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8008cc4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d107      	bne.n	8008cde <f_opendir+0x110>
 8008cce:	2312      	movs	r3, #18
 8008cd0:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
 8008cd4:	e003      	b.n	8008cde <f_opendir+0x110>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8008cd6:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008cda:	2200      	movs	r2, #0
 8008cdc:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8008cde:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008ce2:	2b04      	cmp	r3, #4
 8008ce4:	d102      	bne.n	8008cec <f_opendir+0x11e>
 8008ce6:	2305      	movs	r3, #5
 8008ce8:	f887 3217 	strb.w	r3, [r7, #535]	; 0x217
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8008cec:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d003      	beq.n	8008cfc <f_opendir+0x12e>
 8008cf4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008cfc:	f897 3217 	ldrb.w	r3, [r7, #535]	; 0x217
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8008d06:	46bd      	mov	sp, r7
 8008d08:	bd80      	pop	{r7, pc}

08008d0a <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8008d0a:	b580      	push	{r7, lr}
 8008d0c:	b084      	sub	sp, #16
 8008d0e:	af00      	add	r7, sp, #0
 8008d10:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f107 0208 	add.w	r2, r7, #8
 8008d18:	4611      	mov	r1, r2
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	f7ff fa74 	bl	8008208 <validate>
 8008d20:	4603      	mov	r3, r0
 8008d22:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8008d24:	7bfb      	ldrb	r3, [r7, #15]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d110      	bne.n	8008d4c <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d006      	beq.n	8008d40 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	4618      	mov	r0, r3
 8008d38:	f7fd f9f8 	bl	800612c <dec_lock>
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8008d40:	7bfb      	ldrb	r3, [r7, #15]
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d102      	bne.n	8008d4c <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8008d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3710      	adds	r7, #16
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	1d3b      	adds	r3, r7, #4
 8008d60:	6018      	str	r0, [r3, #0]
 8008d62:	463b      	mov	r3, r7
 8008d64:	6019      	str	r1, [r3, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8008d66:	1d3b      	adds	r3, r7, #4
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008d6e:	4611      	mov	r1, r2
 8008d70:	4618      	mov	r0, r3
 8008d72:	f7ff fa49 	bl	8008208 <validate>
 8008d76:	4603      	mov	r3, r0
 8008d78:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	if (res == FR_OK) {
 8008d7c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d139      	bne.n	8008df8 <f_readdir+0xa2>
		if (!fno) {
 8008d84:	463b      	mov	r3, r7
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d108      	bne.n	8008d9e <f_readdir+0x48>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8008d8c:	1d3b      	adds	r3, r7, #4
 8008d8e:	2100      	movs	r1, #0
 8008d90:	6818      	ldr	r0, [r3, #0]
 8008d92:	f7fd fdef 	bl	8006974 <dir_sdi>
 8008d96:	4603      	mov	r3, r0
 8008d98:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008d9c:	e02c      	b.n	8008df8 <f_readdir+0xa2>
		} else {
			INIT_NAMBUF(fs);
 8008d9e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008da2:	f107 0208 	add.w	r2, r7, #8
 8008da6:	60da      	str	r2, [r3, #12]
			res = dir_read(dp, 0);			/* Read an item */
 8008da8:	1d3b      	adds	r3, r7, #4
 8008daa:	2100      	movs	r1, #0
 8008dac:	6818      	ldr	r0, [r3, #0]
 8008dae:	f7fe f994 	bl	80070da <dir_read>
 8008db2:	4603      	mov	r3, r0
 8008db4:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8008db8:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008dbc:	2b04      	cmp	r3, #4
 8008dbe:	d102      	bne.n	8008dc6 <f_readdir+0x70>
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			if (res == FR_OK) {				/* A valid entry is found */
 8008dc6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d114      	bne.n	8008df8 <f_readdir+0xa2>
				get_fileinfo(dp, fno);		/* Get the object information */
 8008dce:	463a      	mov	r2, r7
 8008dd0:	1d3b      	adds	r3, r7, #4
 8008dd2:	6811      	ldr	r1, [r2, #0]
 8008dd4:	6818      	ldr	r0, [r3, #0]
 8008dd6:	f7fe fc29 	bl	800762c <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8008dda:	1d3b      	adds	r3, r7, #4
 8008ddc:	2100      	movs	r1, #0
 8008dde:	6818      	ldr	r0, [r3, #0]
 8008de0:	f7fd fe43 	bl	8006a6a <dir_next>
 8008de4:	4603      	mov	r3, r0
 8008de6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8008dea:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8008dee:	2b04      	cmp	r3, #4
 8008df0:	d102      	bne.n	8008df8 <f_readdir+0xa2>
 8008df2:	2300      	movs	r3, #0
 8008df4:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8008df8:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
}
 8008dfc:	4618      	mov	r0, r3
 8008dfe:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	1d3b      	adds	r3, r7, #4
 8008e10:	6018      	str	r0, [r3, #0]
 8008e12:	463b      	mov	r3, r7
 8008e14:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8008e16:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8008e1a:	1d3b      	adds	r3, r7, #4
 8008e1c:	2200      	movs	r2, #0
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7fe ffa6 	bl	8007d70 <find_volume>
 8008e24:	4603      	mov	r3, r0
 8008e26:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 8008e2a:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d127      	bne.n	8008e82 <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 8008e32:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8008e36:	f107 0208 	add.w	r2, r7, #8
 8008e3a:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);	/* Follow the file path */
 8008e3c:	1d3b      	adds	r3, r7, #4
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8008e44:	4611      	mov	r1, r2
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fe fe86 	bl	8007b58 <follow_path>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8008e52:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d113      	bne.n	8008e82 <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8008e5a:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8008e5e:	b25b      	sxtb	r3, r3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	da03      	bge.n	8008e6c <f_stat+0x66>
				res = FR_INVALID_NAME;
 8008e64:	2306      	movs	r3, #6
 8008e66:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8008e6a:	e00a      	b.n	8008e82 <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8008e6c:	463b      	mov	r3, r7
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d006      	beq.n	8008e82 <f_stat+0x7c>
 8008e74:	463b      	mov	r3, r7
 8008e76:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8008e7a:	6819      	ldr	r1, [r3, #0]
 8008e7c:	4610      	mov	r0, r2
 8008e7e:	f7fe fbd5 	bl	800762c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8008e82:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	f5ad 7d20 	sub.w	sp, sp, #640	; 0x280
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	1d3b      	adds	r3, r7, #4
 8008e9a:	6018      	str	r0, [r3, #0]
	FRESULT res;
	DIR dj, sdj;
	DWORD dclst = 0;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f8c7 3278 	str.w	r3, [r7, #632]	; 0x278
#endif
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8008ea2:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8008ea6:	1d3b      	adds	r3, r7, #4
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe ff60 	bl	8007d70 <find_volume>
 8008eb0:	4603      	mov	r3, r0
 8008eb2:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
	dj.obj.fs = fs;
 8008eb6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008eba:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
	if (res == FR_OK) {
 8008ebe:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f040 809e 	bne.w	8009004 <f_unlink+0x174>
		INIT_NAMBUF(fs);
 8008ec8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008ecc:	f107 020c 	add.w	r2, r7, #12
 8008ed0:	60da      	str	r2, [r3, #12]
		res = follow_path(&dj, path);		/* Follow the file path */
 8008ed2:	1d3b      	adds	r3, r7, #4
 8008ed4:	681a      	ldr	r2, [r3, #0]
 8008ed6:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8008eda:	4611      	mov	r1, r2
 8008edc:	4618      	mov	r0, r3
 8008ede:	f7fe fe3b 	bl	8007b58 <follow_path>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
		}
#if _FS_LOCK != 0
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Check if it is an open object */
 8008ee8:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d108      	bne.n	8008f02 <f_unlink+0x72>
 8008ef0:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8008ef4:	2102      	movs	r1, #2
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	f7fd f80c 	bl	8005f14 <chk_lock>
 8008efc:	4603      	mov	r3, r0
 8008efe:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8008f02:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d17c      	bne.n	8009004 <f_unlink+0x174>
			if (dj.fn[NSFLAG] & NS_NONAME) {
 8008f0a:	f897 3273 	ldrb.w	r3, [r7, #627]	; 0x273
 8008f0e:	b25b      	sxtb	r3, r3
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	da03      	bge.n	8008f1c <f_unlink+0x8c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 8008f14:	2306      	movs	r3, #6
 8008f16:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
 8008f1a:	e008      	b.n	8008f2e <f_unlink+0x9e>
			} else {
				if (dj.obj.attr & AM_RDO) {
 8008f1c:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8008f20:	f003 0301 	and.w	r3, r3, #1
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d002      	beq.n	8008f2e <f_unlink+0x9e>
					res = FR_DENIED;		/* Cannot remove R/O object */
 8008f28:	2307      	movs	r3, #7
 8008f2a:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				}
			}
			if (res == FR_OK) {
 8008f2e:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d13b      	bne.n	8008fae <f_unlink+0x11e>
					obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
					obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
				} else
#endif
				{
					dclst = ld_clust(fs, dj.dir);
 8008f36:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008f3a:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8008f3e:	4611      	mov	r1, r2
 8008f40:	4618      	mov	r0, r3
 8008f42:	f7fd fe9e 	bl	8006c82 <ld_clust>
 8008f46:	f8c7 0278 	str.w	r0, [r7, #632]	; 0x278
				}
				if (dj.obj.attr & AM_DIR) {			/* Is it a sub-directory? */
 8008f4a:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 8008f4e:	f003 0310 	and.w	r3, r3, #16
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d02b      	beq.n	8008fae <f_unlink+0x11e>
					if (dclst == fs->cdir) {		 		/* Is it the current directory? */
						res = FR_DENIED;
					} else
#endif
					{
						sdj.obj.fs = fs;						/* Open the sub-directory */
 8008f56:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008f5a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
						sdj.obj.sclust = dclst;
 8008f5e:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8008f62:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						if (fs->fs_type == FS_EXFAT) {
							sdj.obj.objsize = obj.objsize;
							sdj.obj.stat = obj.stat;
						}
#endif
						res = dir_sdi(&sdj, 0);
 8008f66:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008f6a:	2100      	movs	r1, #0
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fd fd01 	bl	8006974 <dir_sdi>
 8008f72:	4603      	mov	r3, r0
 8008f74:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						if (res == FR_OK) {
 8008f78:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d116      	bne.n	8008fae <f_unlink+0x11e>
							res = dir_read(&sdj, 0);			/* Read an item */
 8008f80:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008f84:	2100      	movs	r1, #0
 8008f86:	4618      	mov	r0, r3
 8008f88:	f7fe f8a7 	bl	80070da <dir_read>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? */
 8008f92:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d102      	bne.n	8008fa0 <f_unlink+0x110>
 8008f9a:	2307      	movs	r3, #7
 8008f9c:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? */
 8008fa0:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	d102      	bne.n	8008fae <f_unlink+0x11e>
 8008fa8:	2300      	movs	r3, #0
 8008faa:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
						}
					}
				}
			}
			if (res == FR_OK) {
 8008fae:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d126      	bne.n	8009004 <f_unlink+0x174>
				res = dir_remove(&dj);			/* Remove the directory entry */
 8008fb6:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8008fba:	4618      	mov	r0, r3
 8008fbc:	f7fe faec 	bl	8007598 <dir_remove>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
				if (res == FR_OK && dclst) {	/* Remove the cluster chain if exist */
 8008fc6:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10e      	bne.n	8008fec <f_unlink+0x15c>
 8008fce:	f8d7 3278 	ldr.w	r3, [r7, #632]	; 0x278
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d00a      	beq.n	8008fec <f_unlink+0x15c>
#if _FS_EXFAT
					res = remove_chain(&obj, dclst, 0);
#else
					res = remove_chain(&dj.obj, dclst, 0);
 8008fd6:	f507 7311 	add.w	r3, r7, #580	; 0x244
 8008fda:	2200      	movs	r2, #0
 8008fdc:	f8d7 1278 	ldr.w	r1, [r7, #632]	; 0x278
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f7fd fb96 	bl	8006712 <remove_chain>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
#endif
				}
				if (res == FR_OK) res = sync_fs(fs);
 8008fec:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d107      	bne.n	8009004 <f_unlink+0x174>
 8008ff4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7fd f969 	bl	80062d0 <sync_fs>
 8008ffe:	4603      	mov	r3, r0
 8009000:	f887 327f 	strb.w	r3, [r7, #639]	; 0x27f
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8009004:	f897 327f 	ldrb.w	r3, [r7, #639]	; 0x27f
}
 8009008:	4618      	mov	r0, r3
 800900a:	f507 7720 	add.w	r7, r7, #640	; 0x280
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
	...

08009014 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	60f8      	str	r0, [r7, #12]
 800901c:	60b9      	str	r1, [r7, #8]
 800901e:	4613      	mov	r3, r2
 8009020:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009022:	2301      	movs	r3, #1
 8009024:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800902a:	4b1f      	ldr	r3, [pc, #124]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 800902c:	7a5b      	ldrb	r3, [r3, #9]
 800902e:	b2db      	uxtb	r3, r3
 8009030:	2b00      	cmp	r3, #0
 8009032:	d131      	bne.n	8009098 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009034:	4b1c      	ldr	r3, [pc, #112]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 8009036:	7a5b      	ldrb	r3, [r3, #9]
 8009038:	b2db      	uxtb	r3, r3
 800903a:	461a      	mov	r2, r3
 800903c:	4b1a      	ldr	r3, [pc, #104]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 800903e:	2100      	movs	r1, #0
 8009040:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009042:	4b19      	ldr	r3, [pc, #100]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 8009044:	7a5b      	ldrb	r3, [r3, #9]
 8009046:	b2db      	uxtb	r3, r3
 8009048:	4a17      	ldr	r2, [pc, #92]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 800904a:	009b      	lsls	r3, r3, #2
 800904c:	4413      	add	r3, r2
 800904e:	68fa      	ldr	r2, [r7, #12]
 8009050:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009052:	4b15      	ldr	r3, [pc, #84]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 8009054:	7a5b      	ldrb	r3, [r3, #9]
 8009056:	b2db      	uxtb	r3, r3
 8009058:	461a      	mov	r2, r3
 800905a:	4b13      	ldr	r3, [pc, #76]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 800905c:	4413      	add	r3, r2
 800905e:	79fa      	ldrb	r2, [r7, #7]
 8009060:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009062:	4b11      	ldr	r3, [pc, #68]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 8009064:	7a5b      	ldrb	r3, [r3, #9]
 8009066:	b2db      	uxtb	r3, r3
 8009068:	1c5a      	adds	r2, r3, #1
 800906a:	b2d1      	uxtb	r1, r2
 800906c:	4a0e      	ldr	r2, [pc, #56]	; (80090a8 <FATFS_LinkDriverEx+0x94>)
 800906e:	7251      	strb	r1, [r2, #9]
 8009070:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009072:	7dbb      	ldrb	r3, [r7, #22]
 8009074:	3330      	adds	r3, #48	; 0x30
 8009076:	b2da      	uxtb	r2, r3
 8009078:	68bb      	ldr	r3, [r7, #8]
 800907a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	3301      	adds	r3, #1
 8009080:	223a      	movs	r2, #58	; 0x3a
 8009082:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	3302      	adds	r3, #2
 8009088:	222f      	movs	r2, #47	; 0x2f
 800908a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	3303      	adds	r3, #3
 8009090:	2200      	movs	r2, #0
 8009092:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009094:	2300      	movs	r3, #0
 8009096:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009098:	7dfb      	ldrb	r3, [r7, #23]
}
 800909a:	4618      	mov	r0, r3
 800909c:	371c      	adds	r7, #28
 800909e:	46bd      	mov	sp, r7
 80090a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a4:	4770      	bx	lr
 80090a6:	bf00      	nop
 80090a8:	200002f8 	.word	0x200002f8

080090ac <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80090ac:	b580      	push	{r7, lr}
 80090ae:	b082      	sub	sp, #8
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80090b6:	2200      	movs	r2, #0
 80090b8:	6839      	ldr	r1, [r7, #0]
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f7ff ffaa 	bl	8009014 <FATFS_LinkDriverEx>
 80090c0:	4603      	mov	r3, r0
}
 80090c2:	4618      	mov	r0, r3
 80090c4:	3708      	adds	r7, #8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
	...

080090cc <__errno>:
 80090cc:	4b01      	ldr	r3, [pc, #4]	; (80090d4 <__errno+0x8>)
 80090ce:	6818      	ldr	r0, [r3, #0]
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	20000010 	.word	0x20000010

080090d8 <__libc_init_array>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	4d0d      	ldr	r5, [pc, #52]	; (8009110 <__libc_init_array+0x38>)
 80090dc:	4c0d      	ldr	r4, [pc, #52]	; (8009114 <__libc_init_array+0x3c>)
 80090de:	1b64      	subs	r4, r4, r5
 80090e0:	10a4      	asrs	r4, r4, #2
 80090e2:	2600      	movs	r6, #0
 80090e4:	42a6      	cmp	r6, r4
 80090e6:	d109      	bne.n	80090fc <__libc_init_array+0x24>
 80090e8:	4d0b      	ldr	r5, [pc, #44]	; (8009118 <__libc_init_array+0x40>)
 80090ea:	4c0c      	ldr	r4, [pc, #48]	; (800911c <__libc_init_array+0x44>)
 80090ec:	f002 ff86 	bl	800bffc <_init>
 80090f0:	1b64      	subs	r4, r4, r5
 80090f2:	10a4      	asrs	r4, r4, #2
 80090f4:	2600      	movs	r6, #0
 80090f6:	42a6      	cmp	r6, r4
 80090f8:	d105      	bne.n	8009106 <__libc_init_array+0x2e>
 80090fa:	bd70      	pop	{r4, r5, r6, pc}
 80090fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009100:	4798      	blx	r3
 8009102:	3601      	adds	r6, #1
 8009104:	e7ee      	b.n	80090e4 <__libc_init_array+0xc>
 8009106:	f855 3b04 	ldr.w	r3, [r5], #4
 800910a:	4798      	blx	r3
 800910c:	3601      	adds	r6, #1
 800910e:	e7f2      	b.n	80090f6 <__libc_init_array+0x1e>
 8009110:	080140a4 	.word	0x080140a4
 8009114:	080140a4 	.word	0x080140a4
 8009118:	080140a4 	.word	0x080140a4
 800911c:	080140a8 	.word	0x080140a8

08009120 <malloc>:
 8009120:	4b02      	ldr	r3, [pc, #8]	; (800912c <malloc+0xc>)
 8009122:	4601      	mov	r1, r0
 8009124:	6818      	ldr	r0, [r3, #0]
 8009126:	f000 b863 	b.w	80091f0 <_malloc_r>
 800912a:	bf00      	nop
 800912c:	20000010 	.word	0x20000010

08009130 <free>:
 8009130:	4b02      	ldr	r3, [pc, #8]	; (800913c <free+0xc>)
 8009132:	4601      	mov	r1, r0
 8009134:	6818      	ldr	r0, [r3, #0]
 8009136:	f000 b80b 	b.w	8009150 <_free_r>
 800913a:	bf00      	nop
 800913c:	20000010 	.word	0x20000010

08009140 <memset>:
 8009140:	4402      	add	r2, r0
 8009142:	4603      	mov	r3, r0
 8009144:	4293      	cmp	r3, r2
 8009146:	d100      	bne.n	800914a <memset+0xa>
 8009148:	4770      	bx	lr
 800914a:	f803 1b01 	strb.w	r1, [r3], #1
 800914e:	e7f9      	b.n	8009144 <memset+0x4>

08009150 <_free_r>:
 8009150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009152:	2900      	cmp	r1, #0
 8009154:	d048      	beq.n	80091e8 <_free_r+0x98>
 8009156:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800915a:	9001      	str	r0, [sp, #4]
 800915c:	2b00      	cmp	r3, #0
 800915e:	f1a1 0404 	sub.w	r4, r1, #4
 8009162:	bfb8      	it	lt
 8009164:	18e4      	addlt	r4, r4, r3
 8009166:	f001 ff6d 	bl	800b044 <__malloc_lock>
 800916a:	4a20      	ldr	r2, [pc, #128]	; (80091ec <_free_r+0x9c>)
 800916c:	9801      	ldr	r0, [sp, #4]
 800916e:	6813      	ldr	r3, [r2, #0]
 8009170:	4615      	mov	r5, r2
 8009172:	b933      	cbnz	r3, 8009182 <_free_r+0x32>
 8009174:	6063      	str	r3, [r4, #4]
 8009176:	6014      	str	r4, [r2, #0]
 8009178:	b003      	add	sp, #12
 800917a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800917e:	f001 bf67 	b.w	800b050 <__malloc_unlock>
 8009182:	42a3      	cmp	r3, r4
 8009184:	d90b      	bls.n	800919e <_free_r+0x4e>
 8009186:	6821      	ldr	r1, [r4, #0]
 8009188:	1862      	adds	r2, r4, r1
 800918a:	4293      	cmp	r3, r2
 800918c:	bf04      	itt	eq
 800918e:	681a      	ldreq	r2, [r3, #0]
 8009190:	685b      	ldreq	r3, [r3, #4]
 8009192:	6063      	str	r3, [r4, #4]
 8009194:	bf04      	itt	eq
 8009196:	1852      	addeq	r2, r2, r1
 8009198:	6022      	streq	r2, [r4, #0]
 800919a:	602c      	str	r4, [r5, #0]
 800919c:	e7ec      	b.n	8009178 <_free_r+0x28>
 800919e:	461a      	mov	r2, r3
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	b10b      	cbz	r3, 80091a8 <_free_r+0x58>
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	d9fa      	bls.n	800919e <_free_r+0x4e>
 80091a8:	6811      	ldr	r1, [r2, #0]
 80091aa:	1855      	adds	r5, r2, r1
 80091ac:	42a5      	cmp	r5, r4
 80091ae:	d10b      	bne.n	80091c8 <_free_r+0x78>
 80091b0:	6824      	ldr	r4, [r4, #0]
 80091b2:	4421      	add	r1, r4
 80091b4:	1854      	adds	r4, r2, r1
 80091b6:	42a3      	cmp	r3, r4
 80091b8:	6011      	str	r1, [r2, #0]
 80091ba:	d1dd      	bne.n	8009178 <_free_r+0x28>
 80091bc:	681c      	ldr	r4, [r3, #0]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	6053      	str	r3, [r2, #4]
 80091c2:	4421      	add	r1, r4
 80091c4:	6011      	str	r1, [r2, #0]
 80091c6:	e7d7      	b.n	8009178 <_free_r+0x28>
 80091c8:	d902      	bls.n	80091d0 <_free_r+0x80>
 80091ca:	230c      	movs	r3, #12
 80091cc:	6003      	str	r3, [r0, #0]
 80091ce:	e7d3      	b.n	8009178 <_free_r+0x28>
 80091d0:	6825      	ldr	r5, [r4, #0]
 80091d2:	1961      	adds	r1, r4, r5
 80091d4:	428b      	cmp	r3, r1
 80091d6:	bf04      	itt	eq
 80091d8:	6819      	ldreq	r1, [r3, #0]
 80091da:	685b      	ldreq	r3, [r3, #4]
 80091dc:	6063      	str	r3, [r4, #4]
 80091de:	bf04      	itt	eq
 80091e0:	1949      	addeq	r1, r1, r5
 80091e2:	6021      	streq	r1, [r4, #0]
 80091e4:	6054      	str	r4, [r2, #4]
 80091e6:	e7c7      	b.n	8009178 <_free_r+0x28>
 80091e8:	b003      	add	sp, #12
 80091ea:	bd30      	pop	{r4, r5, pc}
 80091ec:	20000304 	.word	0x20000304

080091f0 <_malloc_r>:
 80091f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091f2:	1ccd      	adds	r5, r1, #3
 80091f4:	f025 0503 	bic.w	r5, r5, #3
 80091f8:	3508      	adds	r5, #8
 80091fa:	2d0c      	cmp	r5, #12
 80091fc:	bf38      	it	cc
 80091fe:	250c      	movcc	r5, #12
 8009200:	2d00      	cmp	r5, #0
 8009202:	4606      	mov	r6, r0
 8009204:	db01      	blt.n	800920a <_malloc_r+0x1a>
 8009206:	42a9      	cmp	r1, r5
 8009208:	d903      	bls.n	8009212 <_malloc_r+0x22>
 800920a:	230c      	movs	r3, #12
 800920c:	6033      	str	r3, [r6, #0]
 800920e:	2000      	movs	r0, #0
 8009210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009212:	f001 ff17 	bl	800b044 <__malloc_lock>
 8009216:	4921      	ldr	r1, [pc, #132]	; (800929c <_malloc_r+0xac>)
 8009218:	680a      	ldr	r2, [r1, #0]
 800921a:	4614      	mov	r4, r2
 800921c:	b99c      	cbnz	r4, 8009246 <_malloc_r+0x56>
 800921e:	4f20      	ldr	r7, [pc, #128]	; (80092a0 <_malloc_r+0xb0>)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	b923      	cbnz	r3, 800922e <_malloc_r+0x3e>
 8009224:	4621      	mov	r1, r4
 8009226:	4630      	mov	r0, r6
 8009228:	f000 fd34 	bl	8009c94 <_sbrk_r>
 800922c:	6038      	str	r0, [r7, #0]
 800922e:	4629      	mov	r1, r5
 8009230:	4630      	mov	r0, r6
 8009232:	f000 fd2f 	bl	8009c94 <_sbrk_r>
 8009236:	1c43      	adds	r3, r0, #1
 8009238:	d123      	bne.n	8009282 <_malloc_r+0x92>
 800923a:	230c      	movs	r3, #12
 800923c:	6033      	str	r3, [r6, #0]
 800923e:	4630      	mov	r0, r6
 8009240:	f001 ff06 	bl	800b050 <__malloc_unlock>
 8009244:	e7e3      	b.n	800920e <_malloc_r+0x1e>
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	1b5b      	subs	r3, r3, r5
 800924a:	d417      	bmi.n	800927c <_malloc_r+0x8c>
 800924c:	2b0b      	cmp	r3, #11
 800924e:	d903      	bls.n	8009258 <_malloc_r+0x68>
 8009250:	6023      	str	r3, [r4, #0]
 8009252:	441c      	add	r4, r3
 8009254:	6025      	str	r5, [r4, #0]
 8009256:	e004      	b.n	8009262 <_malloc_r+0x72>
 8009258:	6863      	ldr	r3, [r4, #4]
 800925a:	42a2      	cmp	r2, r4
 800925c:	bf0c      	ite	eq
 800925e:	600b      	streq	r3, [r1, #0]
 8009260:	6053      	strne	r3, [r2, #4]
 8009262:	4630      	mov	r0, r6
 8009264:	f001 fef4 	bl	800b050 <__malloc_unlock>
 8009268:	f104 000b 	add.w	r0, r4, #11
 800926c:	1d23      	adds	r3, r4, #4
 800926e:	f020 0007 	bic.w	r0, r0, #7
 8009272:	1ac2      	subs	r2, r0, r3
 8009274:	d0cc      	beq.n	8009210 <_malloc_r+0x20>
 8009276:	1a1b      	subs	r3, r3, r0
 8009278:	50a3      	str	r3, [r4, r2]
 800927a:	e7c9      	b.n	8009210 <_malloc_r+0x20>
 800927c:	4622      	mov	r2, r4
 800927e:	6864      	ldr	r4, [r4, #4]
 8009280:	e7cc      	b.n	800921c <_malloc_r+0x2c>
 8009282:	1cc4      	adds	r4, r0, #3
 8009284:	f024 0403 	bic.w	r4, r4, #3
 8009288:	42a0      	cmp	r0, r4
 800928a:	d0e3      	beq.n	8009254 <_malloc_r+0x64>
 800928c:	1a21      	subs	r1, r4, r0
 800928e:	4630      	mov	r0, r6
 8009290:	f000 fd00 	bl	8009c94 <_sbrk_r>
 8009294:	3001      	adds	r0, #1
 8009296:	d1dd      	bne.n	8009254 <_malloc_r+0x64>
 8009298:	e7cf      	b.n	800923a <_malloc_r+0x4a>
 800929a:	bf00      	nop
 800929c:	20000304 	.word	0x20000304
 80092a0:	20000308 	.word	0x20000308

080092a4 <__cvt>:
 80092a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80092a8:	ec55 4b10 	vmov	r4, r5, d0
 80092ac:	2d00      	cmp	r5, #0
 80092ae:	460e      	mov	r6, r1
 80092b0:	4619      	mov	r1, r3
 80092b2:	462b      	mov	r3, r5
 80092b4:	bfbb      	ittet	lt
 80092b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80092ba:	461d      	movlt	r5, r3
 80092bc:	2300      	movge	r3, #0
 80092be:	232d      	movlt	r3, #45	; 0x2d
 80092c0:	700b      	strb	r3, [r1, #0]
 80092c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80092c8:	4691      	mov	r9, r2
 80092ca:	f023 0820 	bic.w	r8, r3, #32
 80092ce:	bfbc      	itt	lt
 80092d0:	4622      	movlt	r2, r4
 80092d2:	4614      	movlt	r4, r2
 80092d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80092d8:	d005      	beq.n	80092e6 <__cvt+0x42>
 80092da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80092de:	d100      	bne.n	80092e2 <__cvt+0x3e>
 80092e0:	3601      	adds	r6, #1
 80092e2:	2102      	movs	r1, #2
 80092e4:	e000      	b.n	80092e8 <__cvt+0x44>
 80092e6:	2103      	movs	r1, #3
 80092e8:	ab03      	add	r3, sp, #12
 80092ea:	9301      	str	r3, [sp, #4]
 80092ec:	ab02      	add	r3, sp, #8
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	ec45 4b10 	vmov	d0, r4, r5
 80092f4:	4653      	mov	r3, sl
 80092f6:	4632      	mov	r2, r6
 80092f8:	f000 fe86 	bl	800a008 <_dtoa_r>
 80092fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009300:	4607      	mov	r7, r0
 8009302:	d102      	bne.n	800930a <__cvt+0x66>
 8009304:	f019 0f01 	tst.w	r9, #1
 8009308:	d022      	beq.n	8009350 <__cvt+0xac>
 800930a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800930e:	eb07 0906 	add.w	r9, r7, r6
 8009312:	d110      	bne.n	8009336 <__cvt+0x92>
 8009314:	783b      	ldrb	r3, [r7, #0]
 8009316:	2b30      	cmp	r3, #48	; 0x30
 8009318:	d10a      	bne.n	8009330 <__cvt+0x8c>
 800931a:	2200      	movs	r2, #0
 800931c:	2300      	movs	r3, #0
 800931e:	4620      	mov	r0, r4
 8009320:	4629      	mov	r1, r5
 8009322:	f7f7 fc01 	bl	8000b28 <__aeabi_dcmpeq>
 8009326:	b918      	cbnz	r0, 8009330 <__cvt+0x8c>
 8009328:	f1c6 0601 	rsb	r6, r6, #1
 800932c:	f8ca 6000 	str.w	r6, [sl]
 8009330:	f8da 3000 	ldr.w	r3, [sl]
 8009334:	4499      	add	r9, r3
 8009336:	2200      	movs	r2, #0
 8009338:	2300      	movs	r3, #0
 800933a:	4620      	mov	r0, r4
 800933c:	4629      	mov	r1, r5
 800933e:	f7f7 fbf3 	bl	8000b28 <__aeabi_dcmpeq>
 8009342:	b108      	cbz	r0, 8009348 <__cvt+0xa4>
 8009344:	f8cd 900c 	str.w	r9, [sp, #12]
 8009348:	2230      	movs	r2, #48	; 0x30
 800934a:	9b03      	ldr	r3, [sp, #12]
 800934c:	454b      	cmp	r3, r9
 800934e:	d307      	bcc.n	8009360 <__cvt+0xbc>
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009354:	1bdb      	subs	r3, r3, r7
 8009356:	4638      	mov	r0, r7
 8009358:	6013      	str	r3, [r2, #0]
 800935a:	b004      	add	sp, #16
 800935c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009360:	1c59      	adds	r1, r3, #1
 8009362:	9103      	str	r1, [sp, #12]
 8009364:	701a      	strb	r2, [r3, #0]
 8009366:	e7f0      	b.n	800934a <__cvt+0xa6>

08009368 <__exponent>:
 8009368:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800936a:	4603      	mov	r3, r0
 800936c:	2900      	cmp	r1, #0
 800936e:	bfb8      	it	lt
 8009370:	4249      	neglt	r1, r1
 8009372:	f803 2b02 	strb.w	r2, [r3], #2
 8009376:	bfb4      	ite	lt
 8009378:	222d      	movlt	r2, #45	; 0x2d
 800937a:	222b      	movge	r2, #43	; 0x2b
 800937c:	2909      	cmp	r1, #9
 800937e:	7042      	strb	r2, [r0, #1]
 8009380:	dd2a      	ble.n	80093d8 <__exponent+0x70>
 8009382:	f10d 0407 	add.w	r4, sp, #7
 8009386:	46a4      	mov	ip, r4
 8009388:	270a      	movs	r7, #10
 800938a:	46a6      	mov	lr, r4
 800938c:	460a      	mov	r2, r1
 800938e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009392:	fb07 1516 	mls	r5, r7, r6, r1
 8009396:	3530      	adds	r5, #48	; 0x30
 8009398:	2a63      	cmp	r2, #99	; 0x63
 800939a:	f104 34ff 	add.w	r4, r4, #4294967295
 800939e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80093a2:	4631      	mov	r1, r6
 80093a4:	dcf1      	bgt.n	800938a <__exponent+0x22>
 80093a6:	3130      	adds	r1, #48	; 0x30
 80093a8:	f1ae 0502 	sub.w	r5, lr, #2
 80093ac:	f804 1c01 	strb.w	r1, [r4, #-1]
 80093b0:	1c44      	adds	r4, r0, #1
 80093b2:	4629      	mov	r1, r5
 80093b4:	4561      	cmp	r1, ip
 80093b6:	d30a      	bcc.n	80093ce <__exponent+0x66>
 80093b8:	f10d 0209 	add.w	r2, sp, #9
 80093bc:	eba2 020e 	sub.w	r2, r2, lr
 80093c0:	4565      	cmp	r5, ip
 80093c2:	bf88      	it	hi
 80093c4:	2200      	movhi	r2, #0
 80093c6:	4413      	add	r3, r2
 80093c8:	1a18      	subs	r0, r3, r0
 80093ca:	b003      	add	sp, #12
 80093cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093d2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80093d6:	e7ed      	b.n	80093b4 <__exponent+0x4c>
 80093d8:	2330      	movs	r3, #48	; 0x30
 80093da:	3130      	adds	r1, #48	; 0x30
 80093dc:	7083      	strb	r3, [r0, #2]
 80093de:	70c1      	strb	r1, [r0, #3]
 80093e0:	1d03      	adds	r3, r0, #4
 80093e2:	e7f1      	b.n	80093c8 <__exponent+0x60>

080093e4 <_printf_float>:
 80093e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093e8:	ed2d 8b02 	vpush	{d8}
 80093ec:	b08d      	sub	sp, #52	; 0x34
 80093ee:	460c      	mov	r4, r1
 80093f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80093f4:	4616      	mov	r6, r2
 80093f6:	461f      	mov	r7, r3
 80093f8:	4605      	mov	r5, r0
 80093fa:	f001 fda9 	bl	800af50 <_localeconv_r>
 80093fe:	f8d0 a000 	ldr.w	sl, [r0]
 8009402:	4650      	mov	r0, sl
 8009404:	f7f6 ff0e 	bl	8000224 <strlen>
 8009408:	2300      	movs	r3, #0
 800940a:	930a      	str	r3, [sp, #40]	; 0x28
 800940c:	6823      	ldr	r3, [r4, #0]
 800940e:	9305      	str	r3, [sp, #20]
 8009410:	f8d8 3000 	ldr.w	r3, [r8]
 8009414:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009418:	3307      	adds	r3, #7
 800941a:	f023 0307 	bic.w	r3, r3, #7
 800941e:	f103 0208 	add.w	r2, r3, #8
 8009422:	f8c8 2000 	str.w	r2, [r8]
 8009426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800942a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800942e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009432:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009436:	9307      	str	r3, [sp, #28]
 8009438:	f8cd 8018 	str.w	r8, [sp, #24]
 800943c:	ee08 0a10 	vmov	s16, r0
 8009440:	4b9f      	ldr	r3, [pc, #636]	; (80096c0 <_printf_float+0x2dc>)
 8009442:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009446:	f04f 32ff 	mov.w	r2, #4294967295
 800944a:	f7f7 fb9f 	bl	8000b8c <__aeabi_dcmpun>
 800944e:	bb88      	cbnz	r0, 80094b4 <_printf_float+0xd0>
 8009450:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009454:	4b9a      	ldr	r3, [pc, #616]	; (80096c0 <_printf_float+0x2dc>)
 8009456:	f04f 32ff 	mov.w	r2, #4294967295
 800945a:	f7f7 fb79 	bl	8000b50 <__aeabi_dcmple>
 800945e:	bb48      	cbnz	r0, 80094b4 <_printf_float+0xd0>
 8009460:	2200      	movs	r2, #0
 8009462:	2300      	movs	r3, #0
 8009464:	4640      	mov	r0, r8
 8009466:	4649      	mov	r1, r9
 8009468:	f7f7 fb68 	bl	8000b3c <__aeabi_dcmplt>
 800946c:	b110      	cbz	r0, 8009474 <_printf_float+0x90>
 800946e:	232d      	movs	r3, #45	; 0x2d
 8009470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009474:	4b93      	ldr	r3, [pc, #588]	; (80096c4 <_printf_float+0x2e0>)
 8009476:	4894      	ldr	r0, [pc, #592]	; (80096c8 <_printf_float+0x2e4>)
 8009478:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800947c:	bf94      	ite	ls
 800947e:	4698      	movls	r8, r3
 8009480:	4680      	movhi	r8, r0
 8009482:	2303      	movs	r3, #3
 8009484:	6123      	str	r3, [r4, #16]
 8009486:	9b05      	ldr	r3, [sp, #20]
 8009488:	f023 0204 	bic.w	r2, r3, #4
 800948c:	6022      	str	r2, [r4, #0]
 800948e:	f04f 0900 	mov.w	r9, #0
 8009492:	9700      	str	r7, [sp, #0]
 8009494:	4633      	mov	r3, r6
 8009496:	aa0b      	add	r2, sp, #44	; 0x2c
 8009498:	4621      	mov	r1, r4
 800949a:	4628      	mov	r0, r5
 800949c:	f000 f9d8 	bl	8009850 <_printf_common>
 80094a0:	3001      	adds	r0, #1
 80094a2:	f040 8090 	bne.w	80095c6 <_printf_float+0x1e2>
 80094a6:	f04f 30ff 	mov.w	r0, #4294967295
 80094aa:	b00d      	add	sp, #52	; 0x34
 80094ac:	ecbd 8b02 	vpop	{d8}
 80094b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094b4:	4642      	mov	r2, r8
 80094b6:	464b      	mov	r3, r9
 80094b8:	4640      	mov	r0, r8
 80094ba:	4649      	mov	r1, r9
 80094bc:	f7f7 fb66 	bl	8000b8c <__aeabi_dcmpun>
 80094c0:	b140      	cbz	r0, 80094d4 <_printf_float+0xf0>
 80094c2:	464b      	mov	r3, r9
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	bfbc      	itt	lt
 80094c8:	232d      	movlt	r3, #45	; 0x2d
 80094ca:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80094ce:	487f      	ldr	r0, [pc, #508]	; (80096cc <_printf_float+0x2e8>)
 80094d0:	4b7f      	ldr	r3, [pc, #508]	; (80096d0 <_printf_float+0x2ec>)
 80094d2:	e7d1      	b.n	8009478 <_printf_float+0x94>
 80094d4:	6863      	ldr	r3, [r4, #4]
 80094d6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80094da:	9206      	str	r2, [sp, #24]
 80094dc:	1c5a      	adds	r2, r3, #1
 80094de:	d13f      	bne.n	8009560 <_printf_float+0x17c>
 80094e0:	2306      	movs	r3, #6
 80094e2:	6063      	str	r3, [r4, #4]
 80094e4:	9b05      	ldr	r3, [sp, #20]
 80094e6:	6861      	ldr	r1, [r4, #4]
 80094e8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80094ec:	2300      	movs	r3, #0
 80094ee:	9303      	str	r3, [sp, #12]
 80094f0:	ab0a      	add	r3, sp, #40	; 0x28
 80094f2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80094f6:	ab09      	add	r3, sp, #36	; 0x24
 80094f8:	ec49 8b10 	vmov	d0, r8, r9
 80094fc:	9300      	str	r3, [sp, #0]
 80094fe:	6022      	str	r2, [r4, #0]
 8009500:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009504:	4628      	mov	r0, r5
 8009506:	f7ff fecd 	bl	80092a4 <__cvt>
 800950a:	9b06      	ldr	r3, [sp, #24]
 800950c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800950e:	2b47      	cmp	r3, #71	; 0x47
 8009510:	4680      	mov	r8, r0
 8009512:	d108      	bne.n	8009526 <_printf_float+0x142>
 8009514:	1cc8      	adds	r0, r1, #3
 8009516:	db02      	blt.n	800951e <_printf_float+0x13a>
 8009518:	6863      	ldr	r3, [r4, #4]
 800951a:	4299      	cmp	r1, r3
 800951c:	dd41      	ble.n	80095a2 <_printf_float+0x1be>
 800951e:	f1ab 0b02 	sub.w	fp, fp, #2
 8009522:	fa5f fb8b 	uxtb.w	fp, fp
 8009526:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800952a:	d820      	bhi.n	800956e <_printf_float+0x18a>
 800952c:	3901      	subs	r1, #1
 800952e:	465a      	mov	r2, fp
 8009530:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009534:	9109      	str	r1, [sp, #36]	; 0x24
 8009536:	f7ff ff17 	bl	8009368 <__exponent>
 800953a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800953c:	1813      	adds	r3, r2, r0
 800953e:	2a01      	cmp	r2, #1
 8009540:	4681      	mov	r9, r0
 8009542:	6123      	str	r3, [r4, #16]
 8009544:	dc02      	bgt.n	800954c <_printf_float+0x168>
 8009546:	6822      	ldr	r2, [r4, #0]
 8009548:	07d2      	lsls	r2, r2, #31
 800954a:	d501      	bpl.n	8009550 <_printf_float+0x16c>
 800954c:	3301      	adds	r3, #1
 800954e:	6123      	str	r3, [r4, #16]
 8009550:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009554:	2b00      	cmp	r3, #0
 8009556:	d09c      	beq.n	8009492 <_printf_float+0xae>
 8009558:	232d      	movs	r3, #45	; 0x2d
 800955a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800955e:	e798      	b.n	8009492 <_printf_float+0xae>
 8009560:	9a06      	ldr	r2, [sp, #24]
 8009562:	2a47      	cmp	r2, #71	; 0x47
 8009564:	d1be      	bne.n	80094e4 <_printf_float+0x100>
 8009566:	2b00      	cmp	r3, #0
 8009568:	d1bc      	bne.n	80094e4 <_printf_float+0x100>
 800956a:	2301      	movs	r3, #1
 800956c:	e7b9      	b.n	80094e2 <_printf_float+0xfe>
 800956e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009572:	d118      	bne.n	80095a6 <_printf_float+0x1c2>
 8009574:	2900      	cmp	r1, #0
 8009576:	6863      	ldr	r3, [r4, #4]
 8009578:	dd0b      	ble.n	8009592 <_printf_float+0x1ae>
 800957a:	6121      	str	r1, [r4, #16]
 800957c:	b913      	cbnz	r3, 8009584 <_printf_float+0x1a0>
 800957e:	6822      	ldr	r2, [r4, #0]
 8009580:	07d0      	lsls	r0, r2, #31
 8009582:	d502      	bpl.n	800958a <_printf_float+0x1a6>
 8009584:	3301      	adds	r3, #1
 8009586:	440b      	add	r3, r1
 8009588:	6123      	str	r3, [r4, #16]
 800958a:	65a1      	str	r1, [r4, #88]	; 0x58
 800958c:	f04f 0900 	mov.w	r9, #0
 8009590:	e7de      	b.n	8009550 <_printf_float+0x16c>
 8009592:	b913      	cbnz	r3, 800959a <_printf_float+0x1b6>
 8009594:	6822      	ldr	r2, [r4, #0]
 8009596:	07d2      	lsls	r2, r2, #31
 8009598:	d501      	bpl.n	800959e <_printf_float+0x1ba>
 800959a:	3302      	adds	r3, #2
 800959c:	e7f4      	b.n	8009588 <_printf_float+0x1a4>
 800959e:	2301      	movs	r3, #1
 80095a0:	e7f2      	b.n	8009588 <_printf_float+0x1a4>
 80095a2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80095a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80095a8:	4299      	cmp	r1, r3
 80095aa:	db05      	blt.n	80095b8 <_printf_float+0x1d4>
 80095ac:	6823      	ldr	r3, [r4, #0]
 80095ae:	6121      	str	r1, [r4, #16]
 80095b0:	07d8      	lsls	r0, r3, #31
 80095b2:	d5ea      	bpl.n	800958a <_printf_float+0x1a6>
 80095b4:	1c4b      	adds	r3, r1, #1
 80095b6:	e7e7      	b.n	8009588 <_printf_float+0x1a4>
 80095b8:	2900      	cmp	r1, #0
 80095ba:	bfd4      	ite	le
 80095bc:	f1c1 0202 	rsble	r2, r1, #2
 80095c0:	2201      	movgt	r2, #1
 80095c2:	4413      	add	r3, r2
 80095c4:	e7e0      	b.n	8009588 <_printf_float+0x1a4>
 80095c6:	6823      	ldr	r3, [r4, #0]
 80095c8:	055a      	lsls	r2, r3, #21
 80095ca:	d407      	bmi.n	80095dc <_printf_float+0x1f8>
 80095cc:	6923      	ldr	r3, [r4, #16]
 80095ce:	4642      	mov	r2, r8
 80095d0:	4631      	mov	r1, r6
 80095d2:	4628      	mov	r0, r5
 80095d4:	47b8      	blx	r7
 80095d6:	3001      	adds	r0, #1
 80095d8:	d12c      	bne.n	8009634 <_printf_float+0x250>
 80095da:	e764      	b.n	80094a6 <_printf_float+0xc2>
 80095dc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80095e0:	f240 80e0 	bls.w	80097a4 <_printf_float+0x3c0>
 80095e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80095e8:	2200      	movs	r2, #0
 80095ea:	2300      	movs	r3, #0
 80095ec:	f7f7 fa9c 	bl	8000b28 <__aeabi_dcmpeq>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	d034      	beq.n	800965e <_printf_float+0x27a>
 80095f4:	4a37      	ldr	r2, [pc, #220]	; (80096d4 <_printf_float+0x2f0>)
 80095f6:	2301      	movs	r3, #1
 80095f8:	4631      	mov	r1, r6
 80095fa:	4628      	mov	r0, r5
 80095fc:	47b8      	blx	r7
 80095fe:	3001      	adds	r0, #1
 8009600:	f43f af51 	beq.w	80094a6 <_printf_float+0xc2>
 8009604:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009608:	429a      	cmp	r2, r3
 800960a:	db02      	blt.n	8009612 <_printf_float+0x22e>
 800960c:	6823      	ldr	r3, [r4, #0]
 800960e:	07d8      	lsls	r0, r3, #31
 8009610:	d510      	bpl.n	8009634 <_printf_float+0x250>
 8009612:	ee18 3a10 	vmov	r3, s16
 8009616:	4652      	mov	r2, sl
 8009618:	4631      	mov	r1, r6
 800961a:	4628      	mov	r0, r5
 800961c:	47b8      	blx	r7
 800961e:	3001      	adds	r0, #1
 8009620:	f43f af41 	beq.w	80094a6 <_printf_float+0xc2>
 8009624:	f04f 0800 	mov.w	r8, #0
 8009628:	f104 091a 	add.w	r9, r4, #26
 800962c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800962e:	3b01      	subs	r3, #1
 8009630:	4543      	cmp	r3, r8
 8009632:	dc09      	bgt.n	8009648 <_printf_float+0x264>
 8009634:	6823      	ldr	r3, [r4, #0]
 8009636:	079b      	lsls	r3, r3, #30
 8009638:	f100 8105 	bmi.w	8009846 <_printf_float+0x462>
 800963c:	68e0      	ldr	r0, [r4, #12]
 800963e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009640:	4298      	cmp	r0, r3
 8009642:	bfb8      	it	lt
 8009644:	4618      	movlt	r0, r3
 8009646:	e730      	b.n	80094aa <_printf_float+0xc6>
 8009648:	2301      	movs	r3, #1
 800964a:	464a      	mov	r2, r9
 800964c:	4631      	mov	r1, r6
 800964e:	4628      	mov	r0, r5
 8009650:	47b8      	blx	r7
 8009652:	3001      	adds	r0, #1
 8009654:	f43f af27 	beq.w	80094a6 <_printf_float+0xc2>
 8009658:	f108 0801 	add.w	r8, r8, #1
 800965c:	e7e6      	b.n	800962c <_printf_float+0x248>
 800965e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009660:	2b00      	cmp	r3, #0
 8009662:	dc39      	bgt.n	80096d8 <_printf_float+0x2f4>
 8009664:	4a1b      	ldr	r2, [pc, #108]	; (80096d4 <_printf_float+0x2f0>)
 8009666:	2301      	movs	r3, #1
 8009668:	4631      	mov	r1, r6
 800966a:	4628      	mov	r0, r5
 800966c:	47b8      	blx	r7
 800966e:	3001      	adds	r0, #1
 8009670:	f43f af19 	beq.w	80094a6 <_printf_float+0xc2>
 8009674:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009678:	4313      	orrs	r3, r2
 800967a:	d102      	bne.n	8009682 <_printf_float+0x29e>
 800967c:	6823      	ldr	r3, [r4, #0]
 800967e:	07d9      	lsls	r1, r3, #31
 8009680:	d5d8      	bpl.n	8009634 <_printf_float+0x250>
 8009682:	ee18 3a10 	vmov	r3, s16
 8009686:	4652      	mov	r2, sl
 8009688:	4631      	mov	r1, r6
 800968a:	4628      	mov	r0, r5
 800968c:	47b8      	blx	r7
 800968e:	3001      	adds	r0, #1
 8009690:	f43f af09 	beq.w	80094a6 <_printf_float+0xc2>
 8009694:	f04f 0900 	mov.w	r9, #0
 8009698:	f104 0a1a 	add.w	sl, r4, #26
 800969c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800969e:	425b      	negs	r3, r3
 80096a0:	454b      	cmp	r3, r9
 80096a2:	dc01      	bgt.n	80096a8 <_printf_float+0x2c4>
 80096a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80096a6:	e792      	b.n	80095ce <_printf_float+0x1ea>
 80096a8:	2301      	movs	r3, #1
 80096aa:	4652      	mov	r2, sl
 80096ac:	4631      	mov	r1, r6
 80096ae:	4628      	mov	r0, r5
 80096b0:	47b8      	blx	r7
 80096b2:	3001      	adds	r0, #1
 80096b4:	f43f aef7 	beq.w	80094a6 <_printf_float+0xc2>
 80096b8:	f109 0901 	add.w	r9, r9, #1
 80096bc:	e7ee      	b.n	800969c <_printf_float+0x2b8>
 80096be:	bf00      	nop
 80096c0:	7fefffff 	.word	0x7fefffff
 80096c4:	08013cc0 	.word	0x08013cc0
 80096c8:	08013cc4 	.word	0x08013cc4
 80096cc:	08013ccc 	.word	0x08013ccc
 80096d0:	08013cc8 	.word	0x08013cc8
 80096d4:	08013cd0 	.word	0x08013cd0
 80096d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096dc:	429a      	cmp	r2, r3
 80096de:	bfa8      	it	ge
 80096e0:	461a      	movge	r2, r3
 80096e2:	2a00      	cmp	r2, #0
 80096e4:	4691      	mov	r9, r2
 80096e6:	dc37      	bgt.n	8009758 <_printf_float+0x374>
 80096e8:	f04f 0b00 	mov.w	fp, #0
 80096ec:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80096f0:	f104 021a 	add.w	r2, r4, #26
 80096f4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80096f6:	9305      	str	r3, [sp, #20]
 80096f8:	eba3 0309 	sub.w	r3, r3, r9
 80096fc:	455b      	cmp	r3, fp
 80096fe:	dc33      	bgt.n	8009768 <_printf_float+0x384>
 8009700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009704:	429a      	cmp	r2, r3
 8009706:	db3b      	blt.n	8009780 <_printf_float+0x39c>
 8009708:	6823      	ldr	r3, [r4, #0]
 800970a:	07da      	lsls	r2, r3, #31
 800970c:	d438      	bmi.n	8009780 <_printf_float+0x39c>
 800970e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009710:	9b05      	ldr	r3, [sp, #20]
 8009712:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009714:	1ad3      	subs	r3, r2, r3
 8009716:	eba2 0901 	sub.w	r9, r2, r1
 800971a:	4599      	cmp	r9, r3
 800971c:	bfa8      	it	ge
 800971e:	4699      	movge	r9, r3
 8009720:	f1b9 0f00 	cmp.w	r9, #0
 8009724:	dc35      	bgt.n	8009792 <_printf_float+0x3ae>
 8009726:	f04f 0800 	mov.w	r8, #0
 800972a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800972e:	f104 0a1a 	add.w	sl, r4, #26
 8009732:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009736:	1a9b      	subs	r3, r3, r2
 8009738:	eba3 0309 	sub.w	r3, r3, r9
 800973c:	4543      	cmp	r3, r8
 800973e:	f77f af79 	ble.w	8009634 <_printf_float+0x250>
 8009742:	2301      	movs	r3, #1
 8009744:	4652      	mov	r2, sl
 8009746:	4631      	mov	r1, r6
 8009748:	4628      	mov	r0, r5
 800974a:	47b8      	blx	r7
 800974c:	3001      	adds	r0, #1
 800974e:	f43f aeaa 	beq.w	80094a6 <_printf_float+0xc2>
 8009752:	f108 0801 	add.w	r8, r8, #1
 8009756:	e7ec      	b.n	8009732 <_printf_float+0x34e>
 8009758:	4613      	mov	r3, r2
 800975a:	4631      	mov	r1, r6
 800975c:	4642      	mov	r2, r8
 800975e:	4628      	mov	r0, r5
 8009760:	47b8      	blx	r7
 8009762:	3001      	adds	r0, #1
 8009764:	d1c0      	bne.n	80096e8 <_printf_float+0x304>
 8009766:	e69e      	b.n	80094a6 <_printf_float+0xc2>
 8009768:	2301      	movs	r3, #1
 800976a:	4631      	mov	r1, r6
 800976c:	4628      	mov	r0, r5
 800976e:	9205      	str	r2, [sp, #20]
 8009770:	47b8      	blx	r7
 8009772:	3001      	adds	r0, #1
 8009774:	f43f ae97 	beq.w	80094a6 <_printf_float+0xc2>
 8009778:	9a05      	ldr	r2, [sp, #20]
 800977a:	f10b 0b01 	add.w	fp, fp, #1
 800977e:	e7b9      	b.n	80096f4 <_printf_float+0x310>
 8009780:	ee18 3a10 	vmov	r3, s16
 8009784:	4652      	mov	r2, sl
 8009786:	4631      	mov	r1, r6
 8009788:	4628      	mov	r0, r5
 800978a:	47b8      	blx	r7
 800978c:	3001      	adds	r0, #1
 800978e:	d1be      	bne.n	800970e <_printf_float+0x32a>
 8009790:	e689      	b.n	80094a6 <_printf_float+0xc2>
 8009792:	9a05      	ldr	r2, [sp, #20]
 8009794:	464b      	mov	r3, r9
 8009796:	4442      	add	r2, r8
 8009798:	4631      	mov	r1, r6
 800979a:	4628      	mov	r0, r5
 800979c:	47b8      	blx	r7
 800979e:	3001      	adds	r0, #1
 80097a0:	d1c1      	bne.n	8009726 <_printf_float+0x342>
 80097a2:	e680      	b.n	80094a6 <_printf_float+0xc2>
 80097a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80097a6:	2a01      	cmp	r2, #1
 80097a8:	dc01      	bgt.n	80097ae <_printf_float+0x3ca>
 80097aa:	07db      	lsls	r3, r3, #31
 80097ac:	d538      	bpl.n	8009820 <_printf_float+0x43c>
 80097ae:	2301      	movs	r3, #1
 80097b0:	4642      	mov	r2, r8
 80097b2:	4631      	mov	r1, r6
 80097b4:	4628      	mov	r0, r5
 80097b6:	47b8      	blx	r7
 80097b8:	3001      	adds	r0, #1
 80097ba:	f43f ae74 	beq.w	80094a6 <_printf_float+0xc2>
 80097be:	ee18 3a10 	vmov	r3, s16
 80097c2:	4652      	mov	r2, sl
 80097c4:	4631      	mov	r1, r6
 80097c6:	4628      	mov	r0, r5
 80097c8:	47b8      	blx	r7
 80097ca:	3001      	adds	r0, #1
 80097cc:	f43f ae6b 	beq.w	80094a6 <_printf_float+0xc2>
 80097d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80097d4:	2200      	movs	r2, #0
 80097d6:	2300      	movs	r3, #0
 80097d8:	f7f7 f9a6 	bl	8000b28 <__aeabi_dcmpeq>
 80097dc:	b9d8      	cbnz	r0, 8009816 <_printf_float+0x432>
 80097de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097e0:	f108 0201 	add.w	r2, r8, #1
 80097e4:	3b01      	subs	r3, #1
 80097e6:	4631      	mov	r1, r6
 80097e8:	4628      	mov	r0, r5
 80097ea:	47b8      	blx	r7
 80097ec:	3001      	adds	r0, #1
 80097ee:	d10e      	bne.n	800980e <_printf_float+0x42a>
 80097f0:	e659      	b.n	80094a6 <_printf_float+0xc2>
 80097f2:	2301      	movs	r3, #1
 80097f4:	4652      	mov	r2, sl
 80097f6:	4631      	mov	r1, r6
 80097f8:	4628      	mov	r0, r5
 80097fa:	47b8      	blx	r7
 80097fc:	3001      	adds	r0, #1
 80097fe:	f43f ae52 	beq.w	80094a6 <_printf_float+0xc2>
 8009802:	f108 0801 	add.w	r8, r8, #1
 8009806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009808:	3b01      	subs	r3, #1
 800980a:	4543      	cmp	r3, r8
 800980c:	dcf1      	bgt.n	80097f2 <_printf_float+0x40e>
 800980e:	464b      	mov	r3, r9
 8009810:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009814:	e6dc      	b.n	80095d0 <_printf_float+0x1ec>
 8009816:	f04f 0800 	mov.w	r8, #0
 800981a:	f104 0a1a 	add.w	sl, r4, #26
 800981e:	e7f2      	b.n	8009806 <_printf_float+0x422>
 8009820:	2301      	movs	r3, #1
 8009822:	4642      	mov	r2, r8
 8009824:	e7df      	b.n	80097e6 <_printf_float+0x402>
 8009826:	2301      	movs	r3, #1
 8009828:	464a      	mov	r2, r9
 800982a:	4631      	mov	r1, r6
 800982c:	4628      	mov	r0, r5
 800982e:	47b8      	blx	r7
 8009830:	3001      	adds	r0, #1
 8009832:	f43f ae38 	beq.w	80094a6 <_printf_float+0xc2>
 8009836:	f108 0801 	add.w	r8, r8, #1
 800983a:	68e3      	ldr	r3, [r4, #12]
 800983c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800983e:	1a5b      	subs	r3, r3, r1
 8009840:	4543      	cmp	r3, r8
 8009842:	dcf0      	bgt.n	8009826 <_printf_float+0x442>
 8009844:	e6fa      	b.n	800963c <_printf_float+0x258>
 8009846:	f04f 0800 	mov.w	r8, #0
 800984a:	f104 0919 	add.w	r9, r4, #25
 800984e:	e7f4      	b.n	800983a <_printf_float+0x456>

08009850 <_printf_common>:
 8009850:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009854:	4616      	mov	r6, r2
 8009856:	4699      	mov	r9, r3
 8009858:	688a      	ldr	r2, [r1, #8]
 800985a:	690b      	ldr	r3, [r1, #16]
 800985c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009860:	4293      	cmp	r3, r2
 8009862:	bfb8      	it	lt
 8009864:	4613      	movlt	r3, r2
 8009866:	6033      	str	r3, [r6, #0]
 8009868:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800986c:	4607      	mov	r7, r0
 800986e:	460c      	mov	r4, r1
 8009870:	b10a      	cbz	r2, 8009876 <_printf_common+0x26>
 8009872:	3301      	adds	r3, #1
 8009874:	6033      	str	r3, [r6, #0]
 8009876:	6823      	ldr	r3, [r4, #0]
 8009878:	0699      	lsls	r1, r3, #26
 800987a:	bf42      	ittt	mi
 800987c:	6833      	ldrmi	r3, [r6, #0]
 800987e:	3302      	addmi	r3, #2
 8009880:	6033      	strmi	r3, [r6, #0]
 8009882:	6825      	ldr	r5, [r4, #0]
 8009884:	f015 0506 	ands.w	r5, r5, #6
 8009888:	d106      	bne.n	8009898 <_printf_common+0x48>
 800988a:	f104 0a19 	add.w	sl, r4, #25
 800988e:	68e3      	ldr	r3, [r4, #12]
 8009890:	6832      	ldr	r2, [r6, #0]
 8009892:	1a9b      	subs	r3, r3, r2
 8009894:	42ab      	cmp	r3, r5
 8009896:	dc26      	bgt.n	80098e6 <_printf_common+0x96>
 8009898:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800989c:	1e13      	subs	r3, r2, #0
 800989e:	6822      	ldr	r2, [r4, #0]
 80098a0:	bf18      	it	ne
 80098a2:	2301      	movne	r3, #1
 80098a4:	0692      	lsls	r2, r2, #26
 80098a6:	d42b      	bmi.n	8009900 <_printf_common+0xb0>
 80098a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098ac:	4649      	mov	r1, r9
 80098ae:	4638      	mov	r0, r7
 80098b0:	47c0      	blx	r8
 80098b2:	3001      	adds	r0, #1
 80098b4:	d01e      	beq.n	80098f4 <_printf_common+0xa4>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	68e5      	ldr	r5, [r4, #12]
 80098ba:	6832      	ldr	r2, [r6, #0]
 80098bc:	f003 0306 	and.w	r3, r3, #6
 80098c0:	2b04      	cmp	r3, #4
 80098c2:	bf08      	it	eq
 80098c4:	1aad      	subeq	r5, r5, r2
 80098c6:	68a3      	ldr	r3, [r4, #8]
 80098c8:	6922      	ldr	r2, [r4, #16]
 80098ca:	bf0c      	ite	eq
 80098cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098d0:	2500      	movne	r5, #0
 80098d2:	4293      	cmp	r3, r2
 80098d4:	bfc4      	itt	gt
 80098d6:	1a9b      	subgt	r3, r3, r2
 80098d8:	18ed      	addgt	r5, r5, r3
 80098da:	2600      	movs	r6, #0
 80098dc:	341a      	adds	r4, #26
 80098de:	42b5      	cmp	r5, r6
 80098e0:	d11a      	bne.n	8009918 <_printf_common+0xc8>
 80098e2:	2000      	movs	r0, #0
 80098e4:	e008      	b.n	80098f8 <_printf_common+0xa8>
 80098e6:	2301      	movs	r3, #1
 80098e8:	4652      	mov	r2, sl
 80098ea:	4649      	mov	r1, r9
 80098ec:	4638      	mov	r0, r7
 80098ee:	47c0      	blx	r8
 80098f0:	3001      	adds	r0, #1
 80098f2:	d103      	bne.n	80098fc <_printf_common+0xac>
 80098f4:	f04f 30ff 	mov.w	r0, #4294967295
 80098f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098fc:	3501      	adds	r5, #1
 80098fe:	e7c6      	b.n	800988e <_printf_common+0x3e>
 8009900:	18e1      	adds	r1, r4, r3
 8009902:	1c5a      	adds	r2, r3, #1
 8009904:	2030      	movs	r0, #48	; 0x30
 8009906:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800990a:	4422      	add	r2, r4
 800990c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009910:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009914:	3302      	adds	r3, #2
 8009916:	e7c7      	b.n	80098a8 <_printf_common+0x58>
 8009918:	2301      	movs	r3, #1
 800991a:	4622      	mov	r2, r4
 800991c:	4649      	mov	r1, r9
 800991e:	4638      	mov	r0, r7
 8009920:	47c0      	blx	r8
 8009922:	3001      	adds	r0, #1
 8009924:	d0e6      	beq.n	80098f4 <_printf_common+0xa4>
 8009926:	3601      	adds	r6, #1
 8009928:	e7d9      	b.n	80098de <_printf_common+0x8e>
	...

0800992c <_printf_i>:
 800992c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009930:	460c      	mov	r4, r1
 8009932:	4691      	mov	r9, r2
 8009934:	7e27      	ldrb	r7, [r4, #24]
 8009936:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009938:	2f78      	cmp	r7, #120	; 0x78
 800993a:	4680      	mov	r8, r0
 800993c:	469a      	mov	sl, r3
 800993e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009942:	d807      	bhi.n	8009954 <_printf_i+0x28>
 8009944:	2f62      	cmp	r7, #98	; 0x62
 8009946:	d80a      	bhi.n	800995e <_printf_i+0x32>
 8009948:	2f00      	cmp	r7, #0
 800994a:	f000 80d8 	beq.w	8009afe <_printf_i+0x1d2>
 800994e:	2f58      	cmp	r7, #88	; 0x58
 8009950:	f000 80a3 	beq.w	8009a9a <_printf_i+0x16e>
 8009954:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009958:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800995c:	e03a      	b.n	80099d4 <_printf_i+0xa8>
 800995e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009962:	2b15      	cmp	r3, #21
 8009964:	d8f6      	bhi.n	8009954 <_printf_i+0x28>
 8009966:	a001      	add	r0, pc, #4	; (adr r0, 800996c <_printf_i+0x40>)
 8009968:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800996c:	080099c5 	.word	0x080099c5
 8009970:	080099d9 	.word	0x080099d9
 8009974:	08009955 	.word	0x08009955
 8009978:	08009955 	.word	0x08009955
 800997c:	08009955 	.word	0x08009955
 8009980:	08009955 	.word	0x08009955
 8009984:	080099d9 	.word	0x080099d9
 8009988:	08009955 	.word	0x08009955
 800998c:	08009955 	.word	0x08009955
 8009990:	08009955 	.word	0x08009955
 8009994:	08009955 	.word	0x08009955
 8009998:	08009ae5 	.word	0x08009ae5
 800999c:	08009a09 	.word	0x08009a09
 80099a0:	08009ac7 	.word	0x08009ac7
 80099a4:	08009955 	.word	0x08009955
 80099a8:	08009955 	.word	0x08009955
 80099ac:	08009b07 	.word	0x08009b07
 80099b0:	08009955 	.word	0x08009955
 80099b4:	08009a09 	.word	0x08009a09
 80099b8:	08009955 	.word	0x08009955
 80099bc:	08009955 	.word	0x08009955
 80099c0:	08009acf 	.word	0x08009acf
 80099c4:	680b      	ldr	r3, [r1, #0]
 80099c6:	1d1a      	adds	r2, r3, #4
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	600a      	str	r2, [r1, #0]
 80099cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80099d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099d4:	2301      	movs	r3, #1
 80099d6:	e0a3      	b.n	8009b20 <_printf_i+0x1f4>
 80099d8:	6825      	ldr	r5, [r4, #0]
 80099da:	6808      	ldr	r0, [r1, #0]
 80099dc:	062e      	lsls	r6, r5, #24
 80099de:	f100 0304 	add.w	r3, r0, #4
 80099e2:	d50a      	bpl.n	80099fa <_printf_i+0xce>
 80099e4:	6805      	ldr	r5, [r0, #0]
 80099e6:	600b      	str	r3, [r1, #0]
 80099e8:	2d00      	cmp	r5, #0
 80099ea:	da03      	bge.n	80099f4 <_printf_i+0xc8>
 80099ec:	232d      	movs	r3, #45	; 0x2d
 80099ee:	426d      	negs	r5, r5
 80099f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099f4:	485e      	ldr	r0, [pc, #376]	; (8009b70 <_printf_i+0x244>)
 80099f6:	230a      	movs	r3, #10
 80099f8:	e019      	b.n	8009a2e <_printf_i+0x102>
 80099fa:	f015 0f40 	tst.w	r5, #64	; 0x40
 80099fe:	6805      	ldr	r5, [r0, #0]
 8009a00:	600b      	str	r3, [r1, #0]
 8009a02:	bf18      	it	ne
 8009a04:	b22d      	sxthne	r5, r5
 8009a06:	e7ef      	b.n	80099e8 <_printf_i+0xbc>
 8009a08:	680b      	ldr	r3, [r1, #0]
 8009a0a:	6825      	ldr	r5, [r4, #0]
 8009a0c:	1d18      	adds	r0, r3, #4
 8009a0e:	6008      	str	r0, [r1, #0]
 8009a10:	0628      	lsls	r0, r5, #24
 8009a12:	d501      	bpl.n	8009a18 <_printf_i+0xec>
 8009a14:	681d      	ldr	r5, [r3, #0]
 8009a16:	e002      	b.n	8009a1e <_printf_i+0xf2>
 8009a18:	0669      	lsls	r1, r5, #25
 8009a1a:	d5fb      	bpl.n	8009a14 <_printf_i+0xe8>
 8009a1c:	881d      	ldrh	r5, [r3, #0]
 8009a1e:	4854      	ldr	r0, [pc, #336]	; (8009b70 <_printf_i+0x244>)
 8009a20:	2f6f      	cmp	r7, #111	; 0x6f
 8009a22:	bf0c      	ite	eq
 8009a24:	2308      	moveq	r3, #8
 8009a26:	230a      	movne	r3, #10
 8009a28:	2100      	movs	r1, #0
 8009a2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a2e:	6866      	ldr	r6, [r4, #4]
 8009a30:	60a6      	str	r6, [r4, #8]
 8009a32:	2e00      	cmp	r6, #0
 8009a34:	bfa2      	ittt	ge
 8009a36:	6821      	ldrge	r1, [r4, #0]
 8009a38:	f021 0104 	bicge.w	r1, r1, #4
 8009a3c:	6021      	strge	r1, [r4, #0]
 8009a3e:	b90d      	cbnz	r5, 8009a44 <_printf_i+0x118>
 8009a40:	2e00      	cmp	r6, #0
 8009a42:	d04d      	beq.n	8009ae0 <_printf_i+0x1b4>
 8009a44:	4616      	mov	r6, r2
 8009a46:	fbb5 f1f3 	udiv	r1, r5, r3
 8009a4a:	fb03 5711 	mls	r7, r3, r1, r5
 8009a4e:	5dc7      	ldrb	r7, [r0, r7]
 8009a50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009a54:	462f      	mov	r7, r5
 8009a56:	42bb      	cmp	r3, r7
 8009a58:	460d      	mov	r5, r1
 8009a5a:	d9f4      	bls.n	8009a46 <_printf_i+0x11a>
 8009a5c:	2b08      	cmp	r3, #8
 8009a5e:	d10b      	bne.n	8009a78 <_printf_i+0x14c>
 8009a60:	6823      	ldr	r3, [r4, #0]
 8009a62:	07df      	lsls	r7, r3, #31
 8009a64:	d508      	bpl.n	8009a78 <_printf_i+0x14c>
 8009a66:	6923      	ldr	r3, [r4, #16]
 8009a68:	6861      	ldr	r1, [r4, #4]
 8009a6a:	4299      	cmp	r1, r3
 8009a6c:	bfde      	ittt	le
 8009a6e:	2330      	movle	r3, #48	; 0x30
 8009a70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009a74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009a78:	1b92      	subs	r2, r2, r6
 8009a7a:	6122      	str	r2, [r4, #16]
 8009a7c:	f8cd a000 	str.w	sl, [sp]
 8009a80:	464b      	mov	r3, r9
 8009a82:	aa03      	add	r2, sp, #12
 8009a84:	4621      	mov	r1, r4
 8009a86:	4640      	mov	r0, r8
 8009a88:	f7ff fee2 	bl	8009850 <_printf_common>
 8009a8c:	3001      	adds	r0, #1
 8009a8e:	d14c      	bne.n	8009b2a <_printf_i+0x1fe>
 8009a90:	f04f 30ff 	mov.w	r0, #4294967295
 8009a94:	b004      	add	sp, #16
 8009a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a9a:	4835      	ldr	r0, [pc, #212]	; (8009b70 <_printf_i+0x244>)
 8009a9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	680e      	ldr	r6, [r1, #0]
 8009aa4:	061f      	lsls	r7, r3, #24
 8009aa6:	f856 5b04 	ldr.w	r5, [r6], #4
 8009aaa:	600e      	str	r6, [r1, #0]
 8009aac:	d514      	bpl.n	8009ad8 <_printf_i+0x1ac>
 8009aae:	07d9      	lsls	r1, r3, #31
 8009ab0:	bf44      	itt	mi
 8009ab2:	f043 0320 	orrmi.w	r3, r3, #32
 8009ab6:	6023      	strmi	r3, [r4, #0]
 8009ab8:	b91d      	cbnz	r5, 8009ac2 <_printf_i+0x196>
 8009aba:	6823      	ldr	r3, [r4, #0]
 8009abc:	f023 0320 	bic.w	r3, r3, #32
 8009ac0:	6023      	str	r3, [r4, #0]
 8009ac2:	2310      	movs	r3, #16
 8009ac4:	e7b0      	b.n	8009a28 <_printf_i+0xfc>
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	f043 0320 	orr.w	r3, r3, #32
 8009acc:	6023      	str	r3, [r4, #0]
 8009ace:	2378      	movs	r3, #120	; 0x78
 8009ad0:	4828      	ldr	r0, [pc, #160]	; (8009b74 <_printf_i+0x248>)
 8009ad2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ad6:	e7e3      	b.n	8009aa0 <_printf_i+0x174>
 8009ad8:	065e      	lsls	r6, r3, #25
 8009ada:	bf48      	it	mi
 8009adc:	b2ad      	uxthmi	r5, r5
 8009ade:	e7e6      	b.n	8009aae <_printf_i+0x182>
 8009ae0:	4616      	mov	r6, r2
 8009ae2:	e7bb      	b.n	8009a5c <_printf_i+0x130>
 8009ae4:	680b      	ldr	r3, [r1, #0]
 8009ae6:	6826      	ldr	r6, [r4, #0]
 8009ae8:	6960      	ldr	r0, [r4, #20]
 8009aea:	1d1d      	adds	r5, r3, #4
 8009aec:	600d      	str	r5, [r1, #0]
 8009aee:	0635      	lsls	r5, r6, #24
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	d501      	bpl.n	8009af8 <_printf_i+0x1cc>
 8009af4:	6018      	str	r0, [r3, #0]
 8009af6:	e002      	b.n	8009afe <_printf_i+0x1d2>
 8009af8:	0671      	lsls	r1, r6, #25
 8009afa:	d5fb      	bpl.n	8009af4 <_printf_i+0x1c8>
 8009afc:	8018      	strh	r0, [r3, #0]
 8009afe:	2300      	movs	r3, #0
 8009b00:	6123      	str	r3, [r4, #16]
 8009b02:	4616      	mov	r6, r2
 8009b04:	e7ba      	b.n	8009a7c <_printf_i+0x150>
 8009b06:	680b      	ldr	r3, [r1, #0]
 8009b08:	1d1a      	adds	r2, r3, #4
 8009b0a:	600a      	str	r2, [r1, #0]
 8009b0c:	681e      	ldr	r6, [r3, #0]
 8009b0e:	6862      	ldr	r2, [r4, #4]
 8009b10:	2100      	movs	r1, #0
 8009b12:	4630      	mov	r0, r6
 8009b14:	f7f6 fb94 	bl	8000240 <memchr>
 8009b18:	b108      	cbz	r0, 8009b1e <_printf_i+0x1f2>
 8009b1a:	1b80      	subs	r0, r0, r6
 8009b1c:	6060      	str	r0, [r4, #4]
 8009b1e:	6863      	ldr	r3, [r4, #4]
 8009b20:	6123      	str	r3, [r4, #16]
 8009b22:	2300      	movs	r3, #0
 8009b24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b28:	e7a8      	b.n	8009a7c <_printf_i+0x150>
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	4632      	mov	r2, r6
 8009b2e:	4649      	mov	r1, r9
 8009b30:	4640      	mov	r0, r8
 8009b32:	47d0      	blx	sl
 8009b34:	3001      	adds	r0, #1
 8009b36:	d0ab      	beq.n	8009a90 <_printf_i+0x164>
 8009b38:	6823      	ldr	r3, [r4, #0]
 8009b3a:	079b      	lsls	r3, r3, #30
 8009b3c:	d413      	bmi.n	8009b66 <_printf_i+0x23a>
 8009b3e:	68e0      	ldr	r0, [r4, #12]
 8009b40:	9b03      	ldr	r3, [sp, #12]
 8009b42:	4298      	cmp	r0, r3
 8009b44:	bfb8      	it	lt
 8009b46:	4618      	movlt	r0, r3
 8009b48:	e7a4      	b.n	8009a94 <_printf_i+0x168>
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	4632      	mov	r2, r6
 8009b4e:	4649      	mov	r1, r9
 8009b50:	4640      	mov	r0, r8
 8009b52:	47d0      	blx	sl
 8009b54:	3001      	adds	r0, #1
 8009b56:	d09b      	beq.n	8009a90 <_printf_i+0x164>
 8009b58:	3501      	adds	r5, #1
 8009b5a:	68e3      	ldr	r3, [r4, #12]
 8009b5c:	9903      	ldr	r1, [sp, #12]
 8009b5e:	1a5b      	subs	r3, r3, r1
 8009b60:	42ab      	cmp	r3, r5
 8009b62:	dcf2      	bgt.n	8009b4a <_printf_i+0x21e>
 8009b64:	e7eb      	b.n	8009b3e <_printf_i+0x212>
 8009b66:	2500      	movs	r5, #0
 8009b68:	f104 0619 	add.w	r6, r4, #25
 8009b6c:	e7f5      	b.n	8009b5a <_printf_i+0x22e>
 8009b6e:	bf00      	nop
 8009b70:	08013cd2 	.word	0x08013cd2
 8009b74:	08013ce3 	.word	0x08013ce3

08009b78 <iprintf>:
 8009b78:	b40f      	push	{r0, r1, r2, r3}
 8009b7a:	4b0a      	ldr	r3, [pc, #40]	; (8009ba4 <iprintf+0x2c>)
 8009b7c:	b513      	push	{r0, r1, r4, lr}
 8009b7e:	681c      	ldr	r4, [r3, #0]
 8009b80:	b124      	cbz	r4, 8009b8c <iprintf+0x14>
 8009b82:	69a3      	ldr	r3, [r4, #24]
 8009b84:	b913      	cbnz	r3, 8009b8c <iprintf+0x14>
 8009b86:	4620      	mov	r0, r4
 8009b88:	f001 f944 	bl	800ae14 <__sinit>
 8009b8c:	ab05      	add	r3, sp, #20
 8009b8e:	9a04      	ldr	r2, [sp, #16]
 8009b90:	68a1      	ldr	r1, [r4, #8]
 8009b92:	9301      	str	r3, [sp, #4]
 8009b94:	4620      	mov	r0, r4
 8009b96:	f001 ff73 	bl	800ba80 <_vfiprintf_r>
 8009b9a:	b002      	add	sp, #8
 8009b9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ba0:	b004      	add	sp, #16
 8009ba2:	4770      	bx	lr
 8009ba4:	20000010 	.word	0x20000010

08009ba8 <_puts_r>:
 8009ba8:	b570      	push	{r4, r5, r6, lr}
 8009baa:	460e      	mov	r6, r1
 8009bac:	4605      	mov	r5, r0
 8009bae:	b118      	cbz	r0, 8009bb8 <_puts_r+0x10>
 8009bb0:	6983      	ldr	r3, [r0, #24]
 8009bb2:	b90b      	cbnz	r3, 8009bb8 <_puts_r+0x10>
 8009bb4:	f001 f92e 	bl	800ae14 <__sinit>
 8009bb8:	69ab      	ldr	r3, [r5, #24]
 8009bba:	68ac      	ldr	r4, [r5, #8]
 8009bbc:	b913      	cbnz	r3, 8009bc4 <_puts_r+0x1c>
 8009bbe:	4628      	mov	r0, r5
 8009bc0:	f001 f928 	bl	800ae14 <__sinit>
 8009bc4:	4b2c      	ldr	r3, [pc, #176]	; (8009c78 <_puts_r+0xd0>)
 8009bc6:	429c      	cmp	r4, r3
 8009bc8:	d120      	bne.n	8009c0c <_puts_r+0x64>
 8009bca:	686c      	ldr	r4, [r5, #4]
 8009bcc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009bce:	07db      	lsls	r3, r3, #31
 8009bd0:	d405      	bmi.n	8009bde <_puts_r+0x36>
 8009bd2:	89a3      	ldrh	r3, [r4, #12]
 8009bd4:	0598      	lsls	r0, r3, #22
 8009bd6:	d402      	bmi.n	8009bde <_puts_r+0x36>
 8009bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009bda:	f001 f9be 	bl	800af5a <__retarget_lock_acquire_recursive>
 8009bde:	89a3      	ldrh	r3, [r4, #12]
 8009be0:	0719      	lsls	r1, r3, #28
 8009be2:	d51d      	bpl.n	8009c20 <_puts_r+0x78>
 8009be4:	6923      	ldr	r3, [r4, #16]
 8009be6:	b1db      	cbz	r3, 8009c20 <_puts_r+0x78>
 8009be8:	3e01      	subs	r6, #1
 8009bea:	68a3      	ldr	r3, [r4, #8]
 8009bec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009bf0:	3b01      	subs	r3, #1
 8009bf2:	60a3      	str	r3, [r4, #8]
 8009bf4:	bb39      	cbnz	r1, 8009c46 <_puts_r+0x9e>
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	da38      	bge.n	8009c6c <_puts_r+0xc4>
 8009bfa:	4622      	mov	r2, r4
 8009bfc:	210a      	movs	r1, #10
 8009bfe:	4628      	mov	r0, r5
 8009c00:	f000 f8b4 	bl	8009d6c <__swbuf_r>
 8009c04:	3001      	adds	r0, #1
 8009c06:	d011      	beq.n	8009c2c <_puts_r+0x84>
 8009c08:	250a      	movs	r5, #10
 8009c0a:	e011      	b.n	8009c30 <_puts_r+0x88>
 8009c0c:	4b1b      	ldr	r3, [pc, #108]	; (8009c7c <_puts_r+0xd4>)
 8009c0e:	429c      	cmp	r4, r3
 8009c10:	d101      	bne.n	8009c16 <_puts_r+0x6e>
 8009c12:	68ac      	ldr	r4, [r5, #8]
 8009c14:	e7da      	b.n	8009bcc <_puts_r+0x24>
 8009c16:	4b1a      	ldr	r3, [pc, #104]	; (8009c80 <_puts_r+0xd8>)
 8009c18:	429c      	cmp	r4, r3
 8009c1a:	bf08      	it	eq
 8009c1c:	68ec      	ldreq	r4, [r5, #12]
 8009c1e:	e7d5      	b.n	8009bcc <_puts_r+0x24>
 8009c20:	4621      	mov	r1, r4
 8009c22:	4628      	mov	r0, r5
 8009c24:	f000 f8f4 	bl	8009e10 <__swsetup_r>
 8009c28:	2800      	cmp	r0, #0
 8009c2a:	d0dd      	beq.n	8009be8 <_puts_r+0x40>
 8009c2c:	f04f 35ff 	mov.w	r5, #4294967295
 8009c30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c32:	07da      	lsls	r2, r3, #31
 8009c34:	d405      	bmi.n	8009c42 <_puts_r+0x9a>
 8009c36:	89a3      	ldrh	r3, [r4, #12]
 8009c38:	059b      	lsls	r3, r3, #22
 8009c3a:	d402      	bmi.n	8009c42 <_puts_r+0x9a>
 8009c3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c3e:	f001 f98d 	bl	800af5c <__retarget_lock_release_recursive>
 8009c42:	4628      	mov	r0, r5
 8009c44:	bd70      	pop	{r4, r5, r6, pc}
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	da04      	bge.n	8009c54 <_puts_r+0xac>
 8009c4a:	69a2      	ldr	r2, [r4, #24]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	dc06      	bgt.n	8009c5e <_puts_r+0xb6>
 8009c50:	290a      	cmp	r1, #10
 8009c52:	d004      	beq.n	8009c5e <_puts_r+0xb6>
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	1c5a      	adds	r2, r3, #1
 8009c58:	6022      	str	r2, [r4, #0]
 8009c5a:	7019      	strb	r1, [r3, #0]
 8009c5c:	e7c5      	b.n	8009bea <_puts_r+0x42>
 8009c5e:	4622      	mov	r2, r4
 8009c60:	4628      	mov	r0, r5
 8009c62:	f000 f883 	bl	8009d6c <__swbuf_r>
 8009c66:	3001      	adds	r0, #1
 8009c68:	d1bf      	bne.n	8009bea <_puts_r+0x42>
 8009c6a:	e7df      	b.n	8009c2c <_puts_r+0x84>
 8009c6c:	6823      	ldr	r3, [r4, #0]
 8009c6e:	250a      	movs	r5, #10
 8009c70:	1c5a      	adds	r2, r3, #1
 8009c72:	6022      	str	r2, [r4, #0]
 8009c74:	701d      	strb	r5, [r3, #0]
 8009c76:	e7db      	b.n	8009c30 <_puts_r+0x88>
 8009c78:	08013da8 	.word	0x08013da8
 8009c7c:	08013dc8 	.word	0x08013dc8
 8009c80:	08013d88 	.word	0x08013d88

08009c84 <puts>:
 8009c84:	4b02      	ldr	r3, [pc, #8]	; (8009c90 <puts+0xc>)
 8009c86:	4601      	mov	r1, r0
 8009c88:	6818      	ldr	r0, [r3, #0]
 8009c8a:	f7ff bf8d 	b.w	8009ba8 <_puts_r>
 8009c8e:	bf00      	nop
 8009c90:	20000010 	.word	0x20000010

08009c94 <_sbrk_r>:
 8009c94:	b538      	push	{r3, r4, r5, lr}
 8009c96:	4d06      	ldr	r5, [pc, #24]	; (8009cb0 <_sbrk_r+0x1c>)
 8009c98:	2300      	movs	r3, #0
 8009c9a:	4604      	mov	r4, r0
 8009c9c:	4608      	mov	r0, r1
 8009c9e:	602b      	str	r3, [r5, #0]
 8009ca0:	f7f8 fb12 	bl	80022c8 <_sbrk>
 8009ca4:	1c43      	adds	r3, r0, #1
 8009ca6:	d102      	bne.n	8009cae <_sbrk_r+0x1a>
 8009ca8:	682b      	ldr	r3, [r5, #0]
 8009caa:	b103      	cbz	r3, 8009cae <_sbrk_r+0x1a>
 8009cac:	6023      	str	r3, [r4, #0]
 8009cae:	bd38      	pop	{r3, r4, r5, pc}
 8009cb0:	20000edc 	.word	0x20000edc

08009cb4 <sniprintf>:
 8009cb4:	b40c      	push	{r2, r3}
 8009cb6:	b530      	push	{r4, r5, lr}
 8009cb8:	4b17      	ldr	r3, [pc, #92]	; (8009d18 <sniprintf+0x64>)
 8009cba:	1e0c      	subs	r4, r1, #0
 8009cbc:	681d      	ldr	r5, [r3, #0]
 8009cbe:	b09d      	sub	sp, #116	; 0x74
 8009cc0:	da08      	bge.n	8009cd4 <sniprintf+0x20>
 8009cc2:	238b      	movs	r3, #139	; 0x8b
 8009cc4:	602b      	str	r3, [r5, #0]
 8009cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8009cca:	b01d      	add	sp, #116	; 0x74
 8009ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009cd0:	b002      	add	sp, #8
 8009cd2:	4770      	bx	lr
 8009cd4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009cd8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009cdc:	bf14      	ite	ne
 8009cde:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009ce2:	4623      	moveq	r3, r4
 8009ce4:	9304      	str	r3, [sp, #16]
 8009ce6:	9307      	str	r3, [sp, #28]
 8009ce8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009cec:	9002      	str	r0, [sp, #8]
 8009cee:	9006      	str	r0, [sp, #24]
 8009cf0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009cf4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009cf6:	ab21      	add	r3, sp, #132	; 0x84
 8009cf8:	a902      	add	r1, sp, #8
 8009cfa:	4628      	mov	r0, r5
 8009cfc:	9301      	str	r3, [sp, #4]
 8009cfe:	f001 fd95 	bl	800b82c <_svfiprintf_r>
 8009d02:	1c43      	adds	r3, r0, #1
 8009d04:	bfbc      	itt	lt
 8009d06:	238b      	movlt	r3, #139	; 0x8b
 8009d08:	602b      	strlt	r3, [r5, #0]
 8009d0a:	2c00      	cmp	r4, #0
 8009d0c:	d0dd      	beq.n	8009cca <sniprintf+0x16>
 8009d0e:	9b02      	ldr	r3, [sp, #8]
 8009d10:	2200      	movs	r2, #0
 8009d12:	701a      	strb	r2, [r3, #0]
 8009d14:	e7d9      	b.n	8009cca <sniprintf+0x16>
 8009d16:	bf00      	nop
 8009d18:	20000010 	.word	0x20000010

08009d1c <siprintf>:
 8009d1c:	b40e      	push	{r1, r2, r3}
 8009d1e:	b500      	push	{lr}
 8009d20:	b09c      	sub	sp, #112	; 0x70
 8009d22:	ab1d      	add	r3, sp, #116	; 0x74
 8009d24:	9002      	str	r0, [sp, #8]
 8009d26:	9006      	str	r0, [sp, #24]
 8009d28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d2c:	4809      	ldr	r0, [pc, #36]	; (8009d54 <siprintf+0x38>)
 8009d2e:	9107      	str	r1, [sp, #28]
 8009d30:	9104      	str	r1, [sp, #16]
 8009d32:	4909      	ldr	r1, [pc, #36]	; (8009d58 <siprintf+0x3c>)
 8009d34:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d38:	9105      	str	r1, [sp, #20]
 8009d3a:	6800      	ldr	r0, [r0, #0]
 8009d3c:	9301      	str	r3, [sp, #4]
 8009d3e:	a902      	add	r1, sp, #8
 8009d40:	f001 fd74 	bl	800b82c <_svfiprintf_r>
 8009d44:	9b02      	ldr	r3, [sp, #8]
 8009d46:	2200      	movs	r2, #0
 8009d48:	701a      	strb	r2, [r3, #0]
 8009d4a:	b01c      	add	sp, #112	; 0x70
 8009d4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009d50:	b003      	add	sp, #12
 8009d52:	4770      	bx	lr
 8009d54:	20000010 	.word	0x20000010
 8009d58:	ffff0208 	.word	0xffff0208

08009d5c <strcpy>:
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d62:	f803 2b01 	strb.w	r2, [r3], #1
 8009d66:	2a00      	cmp	r2, #0
 8009d68:	d1f9      	bne.n	8009d5e <strcpy+0x2>
 8009d6a:	4770      	bx	lr

08009d6c <__swbuf_r>:
 8009d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6e:	460e      	mov	r6, r1
 8009d70:	4614      	mov	r4, r2
 8009d72:	4605      	mov	r5, r0
 8009d74:	b118      	cbz	r0, 8009d7e <__swbuf_r+0x12>
 8009d76:	6983      	ldr	r3, [r0, #24]
 8009d78:	b90b      	cbnz	r3, 8009d7e <__swbuf_r+0x12>
 8009d7a:	f001 f84b 	bl	800ae14 <__sinit>
 8009d7e:	4b21      	ldr	r3, [pc, #132]	; (8009e04 <__swbuf_r+0x98>)
 8009d80:	429c      	cmp	r4, r3
 8009d82:	d12b      	bne.n	8009ddc <__swbuf_r+0x70>
 8009d84:	686c      	ldr	r4, [r5, #4]
 8009d86:	69a3      	ldr	r3, [r4, #24]
 8009d88:	60a3      	str	r3, [r4, #8]
 8009d8a:	89a3      	ldrh	r3, [r4, #12]
 8009d8c:	071a      	lsls	r2, r3, #28
 8009d8e:	d52f      	bpl.n	8009df0 <__swbuf_r+0x84>
 8009d90:	6923      	ldr	r3, [r4, #16]
 8009d92:	b36b      	cbz	r3, 8009df0 <__swbuf_r+0x84>
 8009d94:	6923      	ldr	r3, [r4, #16]
 8009d96:	6820      	ldr	r0, [r4, #0]
 8009d98:	1ac0      	subs	r0, r0, r3
 8009d9a:	6963      	ldr	r3, [r4, #20]
 8009d9c:	b2f6      	uxtb	r6, r6
 8009d9e:	4283      	cmp	r3, r0
 8009da0:	4637      	mov	r7, r6
 8009da2:	dc04      	bgt.n	8009dae <__swbuf_r+0x42>
 8009da4:	4621      	mov	r1, r4
 8009da6:	4628      	mov	r0, r5
 8009da8:	f000 ffa0 	bl	800acec <_fflush_r>
 8009dac:	bb30      	cbnz	r0, 8009dfc <__swbuf_r+0x90>
 8009dae:	68a3      	ldr	r3, [r4, #8]
 8009db0:	3b01      	subs	r3, #1
 8009db2:	60a3      	str	r3, [r4, #8]
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	1c5a      	adds	r2, r3, #1
 8009db8:	6022      	str	r2, [r4, #0]
 8009dba:	701e      	strb	r6, [r3, #0]
 8009dbc:	6963      	ldr	r3, [r4, #20]
 8009dbe:	3001      	adds	r0, #1
 8009dc0:	4283      	cmp	r3, r0
 8009dc2:	d004      	beq.n	8009dce <__swbuf_r+0x62>
 8009dc4:	89a3      	ldrh	r3, [r4, #12]
 8009dc6:	07db      	lsls	r3, r3, #31
 8009dc8:	d506      	bpl.n	8009dd8 <__swbuf_r+0x6c>
 8009dca:	2e0a      	cmp	r6, #10
 8009dcc:	d104      	bne.n	8009dd8 <__swbuf_r+0x6c>
 8009dce:	4621      	mov	r1, r4
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f000 ff8b 	bl	800acec <_fflush_r>
 8009dd6:	b988      	cbnz	r0, 8009dfc <__swbuf_r+0x90>
 8009dd8:	4638      	mov	r0, r7
 8009dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ddc:	4b0a      	ldr	r3, [pc, #40]	; (8009e08 <__swbuf_r+0x9c>)
 8009dde:	429c      	cmp	r4, r3
 8009de0:	d101      	bne.n	8009de6 <__swbuf_r+0x7a>
 8009de2:	68ac      	ldr	r4, [r5, #8]
 8009de4:	e7cf      	b.n	8009d86 <__swbuf_r+0x1a>
 8009de6:	4b09      	ldr	r3, [pc, #36]	; (8009e0c <__swbuf_r+0xa0>)
 8009de8:	429c      	cmp	r4, r3
 8009dea:	bf08      	it	eq
 8009dec:	68ec      	ldreq	r4, [r5, #12]
 8009dee:	e7ca      	b.n	8009d86 <__swbuf_r+0x1a>
 8009df0:	4621      	mov	r1, r4
 8009df2:	4628      	mov	r0, r5
 8009df4:	f000 f80c 	bl	8009e10 <__swsetup_r>
 8009df8:	2800      	cmp	r0, #0
 8009dfa:	d0cb      	beq.n	8009d94 <__swbuf_r+0x28>
 8009dfc:	f04f 37ff 	mov.w	r7, #4294967295
 8009e00:	e7ea      	b.n	8009dd8 <__swbuf_r+0x6c>
 8009e02:	bf00      	nop
 8009e04:	08013da8 	.word	0x08013da8
 8009e08:	08013dc8 	.word	0x08013dc8
 8009e0c:	08013d88 	.word	0x08013d88

08009e10 <__swsetup_r>:
 8009e10:	4b32      	ldr	r3, [pc, #200]	; (8009edc <__swsetup_r+0xcc>)
 8009e12:	b570      	push	{r4, r5, r6, lr}
 8009e14:	681d      	ldr	r5, [r3, #0]
 8009e16:	4606      	mov	r6, r0
 8009e18:	460c      	mov	r4, r1
 8009e1a:	b125      	cbz	r5, 8009e26 <__swsetup_r+0x16>
 8009e1c:	69ab      	ldr	r3, [r5, #24]
 8009e1e:	b913      	cbnz	r3, 8009e26 <__swsetup_r+0x16>
 8009e20:	4628      	mov	r0, r5
 8009e22:	f000 fff7 	bl	800ae14 <__sinit>
 8009e26:	4b2e      	ldr	r3, [pc, #184]	; (8009ee0 <__swsetup_r+0xd0>)
 8009e28:	429c      	cmp	r4, r3
 8009e2a:	d10f      	bne.n	8009e4c <__swsetup_r+0x3c>
 8009e2c:	686c      	ldr	r4, [r5, #4]
 8009e2e:	89a3      	ldrh	r3, [r4, #12]
 8009e30:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e34:	0719      	lsls	r1, r3, #28
 8009e36:	d42c      	bmi.n	8009e92 <__swsetup_r+0x82>
 8009e38:	06dd      	lsls	r5, r3, #27
 8009e3a:	d411      	bmi.n	8009e60 <__swsetup_r+0x50>
 8009e3c:	2309      	movs	r3, #9
 8009e3e:	6033      	str	r3, [r6, #0]
 8009e40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e44:	81a3      	strh	r3, [r4, #12]
 8009e46:	f04f 30ff 	mov.w	r0, #4294967295
 8009e4a:	e03e      	b.n	8009eca <__swsetup_r+0xba>
 8009e4c:	4b25      	ldr	r3, [pc, #148]	; (8009ee4 <__swsetup_r+0xd4>)
 8009e4e:	429c      	cmp	r4, r3
 8009e50:	d101      	bne.n	8009e56 <__swsetup_r+0x46>
 8009e52:	68ac      	ldr	r4, [r5, #8]
 8009e54:	e7eb      	b.n	8009e2e <__swsetup_r+0x1e>
 8009e56:	4b24      	ldr	r3, [pc, #144]	; (8009ee8 <__swsetup_r+0xd8>)
 8009e58:	429c      	cmp	r4, r3
 8009e5a:	bf08      	it	eq
 8009e5c:	68ec      	ldreq	r4, [r5, #12]
 8009e5e:	e7e6      	b.n	8009e2e <__swsetup_r+0x1e>
 8009e60:	0758      	lsls	r0, r3, #29
 8009e62:	d512      	bpl.n	8009e8a <__swsetup_r+0x7a>
 8009e64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e66:	b141      	cbz	r1, 8009e7a <__swsetup_r+0x6a>
 8009e68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e6c:	4299      	cmp	r1, r3
 8009e6e:	d002      	beq.n	8009e76 <__swsetup_r+0x66>
 8009e70:	4630      	mov	r0, r6
 8009e72:	f7ff f96d 	bl	8009150 <_free_r>
 8009e76:	2300      	movs	r3, #0
 8009e78:	6363      	str	r3, [r4, #52]	; 0x34
 8009e7a:	89a3      	ldrh	r3, [r4, #12]
 8009e7c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e80:	81a3      	strh	r3, [r4, #12]
 8009e82:	2300      	movs	r3, #0
 8009e84:	6063      	str	r3, [r4, #4]
 8009e86:	6923      	ldr	r3, [r4, #16]
 8009e88:	6023      	str	r3, [r4, #0]
 8009e8a:	89a3      	ldrh	r3, [r4, #12]
 8009e8c:	f043 0308 	orr.w	r3, r3, #8
 8009e90:	81a3      	strh	r3, [r4, #12]
 8009e92:	6923      	ldr	r3, [r4, #16]
 8009e94:	b94b      	cbnz	r3, 8009eaa <__swsetup_r+0x9a>
 8009e96:	89a3      	ldrh	r3, [r4, #12]
 8009e98:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ea0:	d003      	beq.n	8009eaa <__swsetup_r+0x9a>
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	f001 f87f 	bl	800afa8 <__smakebuf_r>
 8009eaa:	89a0      	ldrh	r0, [r4, #12]
 8009eac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009eb0:	f010 0301 	ands.w	r3, r0, #1
 8009eb4:	d00a      	beq.n	8009ecc <__swsetup_r+0xbc>
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	60a3      	str	r3, [r4, #8]
 8009eba:	6963      	ldr	r3, [r4, #20]
 8009ebc:	425b      	negs	r3, r3
 8009ebe:	61a3      	str	r3, [r4, #24]
 8009ec0:	6923      	ldr	r3, [r4, #16]
 8009ec2:	b943      	cbnz	r3, 8009ed6 <__swsetup_r+0xc6>
 8009ec4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ec8:	d1ba      	bne.n	8009e40 <__swsetup_r+0x30>
 8009eca:	bd70      	pop	{r4, r5, r6, pc}
 8009ecc:	0781      	lsls	r1, r0, #30
 8009ece:	bf58      	it	pl
 8009ed0:	6963      	ldrpl	r3, [r4, #20]
 8009ed2:	60a3      	str	r3, [r4, #8]
 8009ed4:	e7f4      	b.n	8009ec0 <__swsetup_r+0xb0>
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	e7f7      	b.n	8009eca <__swsetup_r+0xba>
 8009eda:	bf00      	nop
 8009edc:	20000010 	.word	0x20000010
 8009ee0:	08013da8 	.word	0x08013da8
 8009ee4:	08013dc8 	.word	0x08013dc8
 8009ee8:	08013d88 	.word	0x08013d88

08009eec <quorem>:
 8009eec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ef0:	6903      	ldr	r3, [r0, #16]
 8009ef2:	690c      	ldr	r4, [r1, #16]
 8009ef4:	42a3      	cmp	r3, r4
 8009ef6:	4607      	mov	r7, r0
 8009ef8:	f2c0 8081 	blt.w	8009ffe <quorem+0x112>
 8009efc:	3c01      	subs	r4, #1
 8009efe:	f101 0814 	add.w	r8, r1, #20
 8009f02:	f100 0514 	add.w	r5, r0, #20
 8009f06:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f0a:	9301      	str	r3, [sp, #4]
 8009f0c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f14:	3301      	adds	r3, #1
 8009f16:	429a      	cmp	r2, r3
 8009f18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f20:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f24:	d331      	bcc.n	8009f8a <quorem+0x9e>
 8009f26:	f04f 0e00 	mov.w	lr, #0
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	46ac      	mov	ip, r5
 8009f2e:	46f2      	mov	sl, lr
 8009f30:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f34:	b293      	uxth	r3, r2
 8009f36:	fb06 e303 	mla	r3, r6, r3, lr
 8009f3a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009f3e:	b29b      	uxth	r3, r3
 8009f40:	ebaa 0303 	sub.w	r3, sl, r3
 8009f44:	0c12      	lsrs	r2, r2, #16
 8009f46:	f8dc a000 	ldr.w	sl, [ip]
 8009f4a:	fb06 e202 	mla	r2, r6, r2, lr
 8009f4e:	fa13 f38a 	uxtah	r3, r3, sl
 8009f52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f56:	fa1f fa82 	uxth.w	sl, r2
 8009f5a:	f8dc 2000 	ldr.w	r2, [ip]
 8009f5e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8009f62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f6c:	4581      	cmp	r9, r0
 8009f6e:	f84c 3b04 	str.w	r3, [ip], #4
 8009f72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f76:	d2db      	bcs.n	8009f30 <quorem+0x44>
 8009f78:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f7c:	b92b      	cbnz	r3, 8009f8a <quorem+0x9e>
 8009f7e:	9b01      	ldr	r3, [sp, #4]
 8009f80:	3b04      	subs	r3, #4
 8009f82:	429d      	cmp	r5, r3
 8009f84:	461a      	mov	r2, r3
 8009f86:	d32e      	bcc.n	8009fe6 <quorem+0xfa>
 8009f88:	613c      	str	r4, [r7, #16]
 8009f8a:	4638      	mov	r0, r7
 8009f8c:	f001 fae4 	bl	800b558 <__mcmp>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	db24      	blt.n	8009fde <quorem+0xf2>
 8009f94:	3601      	adds	r6, #1
 8009f96:	4628      	mov	r0, r5
 8009f98:	f04f 0c00 	mov.w	ip, #0
 8009f9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8009fa0:	f8d0 e000 	ldr.w	lr, [r0]
 8009fa4:	b293      	uxth	r3, r2
 8009fa6:	ebac 0303 	sub.w	r3, ip, r3
 8009faa:	0c12      	lsrs	r2, r2, #16
 8009fac:	fa13 f38e 	uxtah	r3, r3, lr
 8009fb0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009fb4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fbe:	45c1      	cmp	r9, r8
 8009fc0:	f840 3b04 	str.w	r3, [r0], #4
 8009fc4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009fc8:	d2e8      	bcs.n	8009f9c <quorem+0xb0>
 8009fca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009fce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009fd2:	b922      	cbnz	r2, 8009fde <quorem+0xf2>
 8009fd4:	3b04      	subs	r3, #4
 8009fd6:	429d      	cmp	r5, r3
 8009fd8:	461a      	mov	r2, r3
 8009fda:	d30a      	bcc.n	8009ff2 <quorem+0x106>
 8009fdc:	613c      	str	r4, [r7, #16]
 8009fde:	4630      	mov	r0, r6
 8009fe0:	b003      	add	sp, #12
 8009fe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe6:	6812      	ldr	r2, [r2, #0]
 8009fe8:	3b04      	subs	r3, #4
 8009fea:	2a00      	cmp	r2, #0
 8009fec:	d1cc      	bne.n	8009f88 <quorem+0x9c>
 8009fee:	3c01      	subs	r4, #1
 8009ff0:	e7c7      	b.n	8009f82 <quorem+0x96>
 8009ff2:	6812      	ldr	r2, [r2, #0]
 8009ff4:	3b04      	subs	r3, #4
 8009ff6:	2a00      	cmp	r2, #0
 8009ff8:	d1f0      	bne.n	8009fdc <quorem+0xf0>
 8009ffa:	3c01      	subs	r4, #1
 8009ffc:	e7eb      	b.n	8009fd6 <quorem+0xea>
 8009ffe:	2000      	movs	r0, #0
 800a000:	e7ee      	b.n	8009fe0 <quorem+0xf4>
 800a002:	0000      	movs	r0, r0
 800a004:	0000      	movs	r0, r0
	...

0800a008 <_dtoa_r>:
 800a008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a00c:	ed2d 8b02 	vpush	{d8}
 800a010:	ec57 6b10 	vmov	r6, r7, d0
 800a014:	b095      	sub	sp, #84	; 0x54
 800a016:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a018:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a01c:	9105      	str	r1, [sp, #20]
 800a01e:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800a022:	4604      	mov	r4, r0
 800a024:	9209      	str	r2, [sp, #36]	; 0x24
 800a026:	930f      	str	r3, [sp, #60]	; 0x3c
 800a028:	b975      	cbnz	r5, 800a048 <_dtoa_r+0x40>
 800a02a:	2010      	movs	r0, #16
 800a02c:	f7ff f878 	bl	8009120 <malloc>
 800a030:	4602      	mov	r2, r0
 800a032:	6260      	str	r0, [r4, #36]	; 0x24
 800a034:	b920      	cbnz	r0, 800a040 <_dtoa_r+0x38>
 800a036:	4bb2      	ldr	r3, [pc, #712]	; (800a300 <_dtoa_r+0x2f8>)
 800a038:	21ea      	movs	r1, #234	; 0xea
 800a03a:	48b2      	ldr	r0, [pc, #712]	; (800a304 <_dtoa_r+0x2fc>)
 800a03c:	f001 fea6 	bl	800bd8c <__assert_func>
 800a040:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a044:	6005      	str	r5, [r0, #0]
 800a046:	60c5      	str	r5, [r0, #12]
 800a048:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a04a:	6819      	ldr	r1, [r3, #0]
 800a04c:	b151      	cbz	r1, 800a064 <_dtoa_r+0x5c>
 800a04e:	685a      	ldr	r2, [r3, #4]
 800a050:	604a      	str	r2, [r1, #4]
 800a052:	2301      	movs	r3, #1
 800a054:	4093      	lsls	r3, r2
 800a056:	608b      	str	r3, [r1, #8]
 800a058:	4620      	mov	r0, r4
 800a05a:	f001 f83f 	bl	800b0dc <_Bfree>
 800a05e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a060:	2200      	movs	r2, #0
 800a062:	601a      	str	r2, [r3, #0]
 800a064:	1e3b      	subs	r3, r7, #0
 800a066:	bfb9      	ittee	lt
 800a068:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a06c:	9303      	strlt	r3, [sp, #12]
 800a06e:	2300      	movge	r3, #0
 800a070:	f8c8 3000 	strge.w	r3, [r8]
 800a074:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800a078:	4ba3      	ldr	r3, [pc, #652]	; (800a308 <_dtoa_r+0x300>)
 800a07a:	bfbc      	itt	lt
 800a07c:	2201      	movlt	r2, #1
 800a07e:	f8c8 2000 	strlt.w	r2, [r8]
 800a082:	ea33 0309 	bics.w	r3, r3, r9
 800a086:	d11b      	bne.n	800a0c0 <_dtoa_r+0xb8>
 800a088:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a08a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a08e:	6013      	str	r3, [r2, #0]
 800a090:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a094:	4333      	orrs	r3, r6
 800a096:	f000 857a 	beq.w	800ab8e <_dtoa_r+0xb86>
 800a09a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a09c:	b963      	cbnz	r3, 800a0b8 <_dtoa_r+0xb0>
 800a09e:	4b9b      	ldr	r3, [pc, #620]	; (800a30c <_dtoa_r+0x304>)
 800a0a0:	e024      	b.n	800a0ec <_dtoa_r+0xe4>
 800a0a2:	4b9b      	ldr	r3, [pc, #620]	; (800a310 <_dtoa_r+0x308>)
 800a0a4:	9300      	str	r3, [sp, #0]
 800a0a6:	3308      	adds	r3, #8
 800a0a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0aa:	6013      	str	r3, [r2, #0]
 800a0ac:	9800      	ldr	r0, [sp, #0]
 800a0ae:	b015      	add	sp, #84	; 0x54
 800a0b0:	ecbd 8b02 	vpop	{d8}
 800a0b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b8:	4b94      	ldr	r3, [pc, #592]	; (800a30c <_dtoa_r+0x304>)
 800a0ba:	9300      	str	r3, [sp, #0]
 800a0bc:	3303      	adds	r3, #3
 800a0be:	e7f3      	b.n	800a0a8 <_dtoa_r+0xa0>
 800a0c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a0c4:	2200      	movs	r2, #0
 800a0c6:	ec51 0b17 	vmov	r0, r1, d7
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800a0d0:	f7f6 fd2a 	bl	8000b28 <__aeabi_dcmpeq>
 800a0d4:	4680      	mov	r8, r0
 800a0d6:	b158      	cbz	r0, 800a0f0 <_dtoa_r+0xe8>
 800a0d8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800a0da:	2301      	movs	r3, #1
 800a0dc:	6013      	str	r3, [r2, #0]
 800a0de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	f000 8551 	beq.w	800ab88 <_dtoa_r+0xb80>
 800a0e6:	488b      	ldr	r0, [pc, #556]	; (800a314 <_dtoa_r+0x30c>)
 800a0e8:	6018      	str	r0, [r3, #0]
 800a0ea:	1e43      	subs	r3, r0, #1
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	e7dd      	b.n	800a0ac <_dtoa_r+0xa4>
 800a0f0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800a0f4:	aa12      	add	r2, sp, #72	; 0x48
 800a0f6:	a913      	add	r1, sp, #76	; 0x4c
 800a0f8:	4620      	mov	r0, r4
 800a0fa:	f001 fad1 	bl	800b6a0 <__d2b>
 800a0fe:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a102:	4683      	mov	fp, r0
 800a104:	2d00      	cmp	r5, #0
 800a106:	d07c      	beq.n	800a202 <_dtoa_r+0x1fa>
 800a108:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a10a:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800a10e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a112:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800a116:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a11a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a11e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a122:	4b7d      	ldr	r3, [pc, #500]	; (800a318 <_dtoa_r+0x310>)
 800a124:	2200      	movs	r2, #0
 800a126:	4630      	mov	r0, r6
 800a128:	4639      	mov	r1, r7
 800a12a:	f7f6 f8dd 	bl	80002e8 <__aeabi_dsub>
 800a12e:	a36e      	add	r3, pc, #440	; (adr r3, 800a2e8 <_dtoa_r+0x2e0>)
 800a130:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a134:	f7f6 fa90 	bl	8000658 <__aeabi_dmul>
 800a138:	a36d      	add	r3, pc, #436	; (adr r3, 800a2f0 <_dtoa_r+0x2e8>)
 800a13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a13e:	f7f6 f8d5 	bl	80002ec <__adddf3>
 800a142:	4606      	mov	r6, r0
 800a144:	4628      	mov	r0, r5
 800a146:	460f      	mov	r7, r1
 800a148:	f7f6 fa1c 	bl	8000584 <__aeabi_i2d>
 800a14c:	a36a      	add	r3, pc, #424	; (adr r3, 800a2f8 <_dtoa_r+0x2f0>)
 800a14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a152:	f7f6 fa81 	bl	8000658 <__aeabi_dmul>
 800a156:	4602      	mov	r2, r0
 800a158:	460b      	mov	r3, r1
 800a15a:	4630      	mov	r0, r6
 800a15c:	4639      	mov	r1, r7
 800a15e:	f7f6 f8c5 	bl	80002ec <__adddf3>
 800a162:	4606      	mov	r6, r0
 800a164:	460f      	mov	r7, r1
 800a166:	f7f6 fd27 	bl	8000bb8 <__aeabi_d2iz>
 800a16a:	2200      	movs	r2, #0
 800a16c:	4682      	mov	sl, r0
 800a16e:	2300      	movs	r3, #0
 800a170:	4630      	mov	r0, r6
 800a172:	4639      	mov	r1, r7
 800a174:	f7f6 fce2 	bl	8000b3c <__aeabi_dcmplt>
 800a178:	b148      	cbz	r0, 800a18e <_dtoa_r+0x186>
 800a17a:	4650      	mov	r0, sl
 800a17c:	f7f6 fa02 	bl	8000584 <__aeabi_i2d>
 800a180:	4632      	mov	r2, r6
 800a182:	463b      	mov	r3, r7
 800a184:	f7f6 fcd0 	bl	8000b28 <__aeabi_dcmpeq>
 800a188:	b908      	cbnz	r0, 800a18e <_dtoa_r+0x186>
 800a18a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a18e:	f1ba 0f16 	cmp.w	sl, #22
 800a192:	d854      	bhi.n	800a23e <_dtoa_r+0x236>
 800a194:	4b61      	ldr	r3, [pc, #388]	; (800a31c <_dtoa_r+0x314>)
 800a196:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a19e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a1a2:	f7f6 fccb 	bl	8000b3c <__aeabi_dcmplt>
 800a1a6:	2800      	cmp	r0, #0
 800a1a8:	d04b      	beq.n	800a242 <_dtoa_r+0x23a>
 800a1aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	930e      	str	r3, [sp, #56]	; 0x38
 800a1b2:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a1b4:	1b5d      	subs	r5, r3, r5
 800a1b6:	1e6b      	subs	r3, r5, #1
 800a1b8:	9304      	str	r3, [sp, #16]
 800a1ba:	bf43      	ittte	mi
 800a1bc:	2300      	movmi	r3, #0
 800a1be:	f1c5 0801 	rsbmi	r8, r5, #1
 800a1c2:	9304      	strmi	r3, [sp, #16]
 800a1c4:	f04f 0800 	movpl.w	r8, #0
 800a1c8:	f1ba 0f00 	cmp.w	sl, #0
 800a1cc:	db3b      	blt.n	800a246 <_dtoa_r+0x23e>
 800a1ce:	9b04      	ldr	r3, [sp, #16]
 800a1d0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800a1d4:	4453      	add	r3, sl
 800a1d6:	9304      	str	r3, [sp, #16]
 800a1d8:	2300      	movs	r3, #0
 800a1da:	9306      	str	r3, [sp, #24]
 800a1dc:	9b05      	ldr	r3, [sp, #20]
 800a1de:	2b09      	cmp	r3, #9
 800a1e0:	d869      	bhi.n	800a2b6 <_dtoa_r+0x2ae>
 800a1e2:	2b05      	cmp	r3, #5
 800a1e4:	bfc4      	itt	gt
 800a1e6:	3b04      	subgt	r3, #4
 800a1e8:	9305      	strgt	r3, [sp, #20]
 800a1ea:	9b05      	ldr	r3, [sp, #20]
 800a1ec:	f1a3 0302 	sub.w	r3, r3, #2
 800a1f0:	bfcc      	ite	gt
 800a1f2:	2500      	movgt	r5, #0
 800a1f4:	2501      	movle	r5, #1
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d869      	bhi.n	800a2ce <_dtoa_r+0x2c6>
 800a1fa:	e8df f003 	tbb	[pc, r3]
 800a1fe:	4e2c      	.short	0x4e2c
 800a200:	5a4c      	.short	0x5a4c
 800a202:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800a206:	441d      	add	r5, r3
 800a208:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a20c:	2b20      	cmp	r3, #32
 800a20e:	bfc1      	itttt	gt
 800a210:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a214:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a218:	fa09 f303 	lslgt.w	r3, r9, r3
 800a21c:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a220:	bfda      	itte	le
 800a222:	f1c3 0320 	rsble	r3, r3, #32
 800a226:	fa06 f003 	lslle.w	r0, r6, r3
 800a22a:	4318      	orrgt	r0, r3
 800a22c:	f7f6 f99a 	bl	8000564 <__aeabi_ui2d>
 800a230:	2301      	movs	r3, #1
 800a232:	4606      	mov	r6, r0
 800a234:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a238:	3d01      	subs	r5, #1
 800a23a:	9310      	str	r3, [sp, #64]	; 0x40
 800a23c:	e771      	b.n	800a122 <_dtoa_r+0x11a>
 800a23e:	2301      	movs	r3, #1
 800a240:	e7b6      	b.n	800a1b0 <_dtoa_r+0x1a8>
 800a242:	900e      	str	r0, [sp, #56]	; 0x38
 800a244:	e7b5      	b.n	800a1b2 <_dtoa_r+0x1aa>
 800a246:	f1ca 0300 	rsb	r3, sl, #0
 800a24a:	9306      	str	r3, [sp, #24]
 800a24c:	2300      	movs	r3, #0
 800a24e:	eba8 080a 	sub.w	r8, r8, sl
 800a252:	930d      	str	r3, [sp, #52]	; 0x34
 800a254:	e7c2      	b.n	800a1dc <_dtoa_r+0x1d4>
 800a256:	2300      	movs	r3, #0
 800a258:	9308      	str	r3, [sp, #32]
 800a25a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	dc39      	bgt.n	800a2d4 <_dtoa_r+0x2cc>
 800a260:	f04f 0901 	mov.w	r9, #1
 800a264:	f8cd 9004 	str.w	r9, [sp, #4]
 800a268:	464b      	mov	r3, r9
 800a26a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a26e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a270:	2200      	movs	r2, #0
 800a272:	6042      	str	r2, [r0, #4]
 800a274:	2204      	movs	r2, #4
 800a276:	f102 0614 	add.w	r6, r2, #20
 800a27a:	429e      	cmp	r6, r3
 800a27c:	6841      	ldr	r1, [r0, #4]
 800a27e:	d92f      	bls.n	800a2e0 <_dtoa_r+0x2d8>
 800a280:	4620      	mov	r0, r4
 800a282:	f000 feeb 	bl	800b05c <_Balloc>
 800a286:	9000      	str	r0, [sp, #0]
 800a288:	2800      	cmp	r0, #0
 800a28a:	d14b      	bne.n	800a324 <_dtoa_r+0x31c>
 800a28c:	4b24      	ldr	r3, [pc, #144]	; (800a320 <_dtoa_r+0x318>)
 800a28e:	4602      	mov	r2, r0
 800a290:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a294:	e6d1      	b.n	800a03a <_dtoa_r+0x32>
 800a296:	2301      	movs	r3, #1
 800a298:	e7de      	b.n	800a258 <_dtoa_r+0x250>
 800a29a:	2300      	movs	r3, #0
 800a29c:	9308      	str	r3, [sp, #32]
 800a29e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a0:	eb0a 0903 	add.w	r9, sl, r3
 800a2a4:	f109 0301 	add.w	r3, r9, #1
 800a2a8:	2b01      	cmp	r3, #1
 800a2aa:	9301      	str	r3, [sp, #4]
 800a2ac:	bfb8      	it	lt
 800a2ae:	2301      	movlt	r3, #1
 800a2b0:	e7dd      	b.n	800a26e <_dtoa_r+0x266>
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e7f2      	b.n	800a29c <_dtoa_r+0x294>
 800a2b6:	2501      	movs	r5, #1
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	9305      	str	r3, [sp, #20]
 800a2bc:	9508      	str	r5, [sp, #32]
 800a2be:	f04f 39ff 	mov.w	r9, #4294967295
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2c8:	2312      	movs	r3, #18
 800a2ca:	9209      	str	r2, [sp, #36]	; 0x24
 800a2cc:	e7cf      	b.n	800a26e <_dtoa_r+0x266>
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	9308      	str	r3, [sp, #32]
 800a2d2:	e7f4      	b.n	800a2be <_dtoa_r+0x2b6>
 800a2d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800a2d8:	f8cd 9004 	str.w	r9, [sp, #4]
 800a2dc:	464b      	mov	r3, r9
 800a2de:	e7c6      	b.n	800a26e <_dtoa_r+0x266>
 800a2e0:	3101      	adds	r1, #1
 800a2e2:	6041      	str	r1, [r0, #4]
 800a2e4:	0052      	lsls	r2, r2, #1
 800a2e6:	e7c6      	b.n	800a276 <_dtoa_r+0x26e>
 800a2e8:	636f4361 	.word	0x636f4361
 800a2ec:	3fd287a7 	.word	0x3fd287a7
 800a2f0:	8b60c8b3 	.word	0x8b60c8b3
 800a2f4:	3fc68a28 	.word	0x3fc68a28
 800a2f8:	509f79fb 	.word	0x509f79fb
 800a2fc:	3fd34413 	.word	0x3fd34413
 800a300:	08013d01 	.word	0x08013d01
 800a304:	08013d18 	.word	0x08013d18
 800a308:	7ff00000 	.word	0x7ff00000
 800a30c:	08013cfd 	.word	0x08013cfd
 800a310:	08013cf4 	.word	0x08013cf4
 800a314:	08013cd1 	.word	0x08013cd1
 800a318:	3ff80000 	.word	0x3ff80000
 800a31c:	08013e70 	.word	0x08013e70
 800a320:	08013d77 	.word	0x08013d77
 800a324:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a326:	9a00      	ldr	r2, [sp, #0]
 800a328:	601a      	str	r2, [r3, #0]
 800a32a:	9b01      	ldr	r3, [sp, #4]
 800a32c:	2b0e      	cmp	r3, #14
 800a32e:	f200 80ad 	bhi.w	800a48c <_dtoa_r+0x484>
 800a332:	2d00      	cmp	r5, #0
 800a334:	f000 80aa 	beq.w	800a48c <_dtoa_r+0x484>
 800a338:	f1ba 0f00 	cmp.w	sl, #0
 800a33c:	dd36      	ble.n	800a3ac <_dtoa_r+0x3a4>
 800a33e:	4ac3      	ldr	r2, [pc, #780]	; (800a64c <_dtoa_r+0x644>)
 800a340:	f00a 030f 	and.w	r3, sl, #15
 800a344:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a348:	ed93 7b00 	vldr	d7, [r3]
 800a34c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800a350:	ea4f 172a 	mov.w	r7, sl, asr #4
 800a354:	eeb0 8a47 	vmov.f32	s16, s14
 800a358:	eef0 8a67 	vmov.f32	s17, s15
 800a35c:	d016      	beq.n	800a38c <_dtoa_r+0x384>
 800a35e:	4bbc      	ldr	r3, [pc, #752]	; (800a650 <_dtoa_r+0x648>)
 800a360:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a364:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a368:	f7f6 faa0 	bl	80008ac <__aeabi_ddiv>
 800a36c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a370:	f007 070f 	and.w	r7, r7, #15
 800a374:	2503      	movs	r5, #3
 800a376:	4eb6      	ldr	r6, [pc, #728]	; (800a650 <_dtoa_r+0x648>)
 800a378:	b957      	cbnz	r7, 800a390 <_dtoa_r+0x388>
 800a37a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a37e:	ec53 2b18 	vmov	r2, r3, d8
 800a382:	f7f6 fa93 	bl	80008ac <__aeabi_ddiv>
 800a386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a38a:	e029      	b.n	800a3e0 <_dtoa_r+0x3d8>
 800a38c:	2502      	movs	r5, #2
 800a38e:	e7f2      	b.n	800a376 <_dtoa_r+0x36e>
 800a390:	07f9      	lsls	r1, r7, #31
 800a392:	d508      	bpl.n	800a3a6 <_dtoa_r+0x39e>
 800a394:	ec51 0b18 	vmov	r0, r1, d8
 800a398:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a39c:	f7f6 f95c 	bl	8000658 <__aeabi_dmul>
 800a3a0:	ec41 0b18 	vmov	d8, r0, r1
 800a3a4:	3501      	adds	r5, #1
 800a3a6:	107f      	asrs	r7, r7, #1
 800a3a8:	3608      	adds	r6, #8
 800a3aa:	e7e5      	b.n	800a378 <_dtoa_r+0x370>
 800a3ac:	f000 80a6 	beq.w	800a4fc <_dtoa_r+0x4f4>
 800a3b0:	f1ca 0600 	rsb	r6, sl, #0
 800a3b4:	4ba5      	ldr	r3, [pc, #660]	; (800a64c <_dtoa_r+0x644>)
 800a3b6:	4fa6      	ldr	r7, [pc, #664]	; (800a650 <_dtoa_r+0x648>)
 800a3b8:	f006 020f 	and.w	r2, r6, #15
 800a3bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800a3c8:	f7f6 f946 	bl	8000658 <__aeabi_dmul>
 800a3cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3d0:	1136      	asrs	r6, r6, #4
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	2502      	movs	r5, #2
 800a3d6:	2e00      	cmp	r6, #0
 800a3d8:	f040 8085 	bne.w	800a4e6 <_dtoa_r+0x4de>
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d1d2      	bne.n	800a386 <_dtoa_r+0x37e>
 800a3e0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	f000 808c 	beq.w	800a500 <_dtoa_r+0x4f8>
 800a3e8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a3ec:	4b99      	ldr	r3, [pc, #612]	; (800a654 <_dtoa_r+0x64c>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	4639      	mov	r1, r7
 800a3f4:	f7f6 fba2 	bl	8000b3c <__aeabi_dcmplt>
 800a3f8:	2800      	cmp	r0, #0
 800a3fa:	f000 8081 	beq.w	800a500 <_dtoa_r+0x4f8>
 800a3fe:	9b01      	ldr	r3, [sp, #4]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d07d      	beq.n	800a500 <_dtoa_r+0x4f8>
 800a404:	f1b9 0f00 	cmp.w	r9, #0
 800a408:	dd3c      	ble.n	800a484 <_dtoa_r+0x47c>
 800a40a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a40e:	9307      	str	r3, [sp, #28]
 800a410:	2200      	movs	r2, #0
 800a412:	4b91      	ldr	r3, [pc, #580]	; (800a658 <_dtoa_r+0x650>)
 800a414:	4630      	mov	r0, r6
 800a416:	4639      	mov	r1, r7
 800a418:	f7f6 f91e 	bl	8000658 <__aeabi_dmul>
 800a41c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a420:	3501      	adds	r5, #1
 800a422:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800a426:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a42a:	4628      	mov	r0, r5
 800a42c:	f7f6 f8aa 	bl	8000584 <__aeabi_i2d>
 800a430:	4632      	mov	r2, r6
 800a432:	463b      	mov	r3, r7
 800a434:	f7f6 f910 	bl	8000658 <__aeabi_dmul>
 800a438:	4b88      	ldr	r3, [pc, #544]	; (800a65c <_dtoa_r+0x654>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	f7f5 ff56 	bl	80002ec <__adddf3>
 800a440:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a444:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a448:	9303      	str	r3, [sp, #12]
 800a44a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d15c      	bne.n	800a50a <_dtoa_r+0x502>
 800a450:	4b83      	ldr	r3, [pc, #524]	; (800a660 <_dtoa_r+0x658>)
 800a452:	2200      	movs	r2, #0
 800a454:	4630      	mov	r0, r6
 800a456:	4639      	mov	r1, r7
 800a458:	f7f5 ff46 	bl	80002e8 <__aeabi_dsub>
 800a45c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a460:	4606      	mov	r6, r0
 800a462:	460f      	mov	r7, r1
 800a464:	f7f6 fb88 	bl	8000b78 <__aeabi_dcmpgt>
 800a468:	2800      	cmp	r0, #0
 800a46a:	f040 8296 	bne.w	800a99a <_dtoa_r+0x992>
 800a46e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a472:	4630      	mov	r0, r6
 800a474:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a478:	4639      	mov	r1, r7
 800a47a:	f7f6 fb5f 	bl	8000b3c <__aeabi_dcmplt>
 800a47e:	2800      	cmp	r0, #0
 800a480:	f040 8288 	bne.w	800a994 <_dtoa_r+0x98c>
 800a484:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800a488:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800a48c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	f2c0 8158 	blt.w	800a744 <_dtoa_r+0x73c>
 800a494:	f1ba 0f0e 	cmp.w	sl, #14
 800a498:	f300 8154 	bgt.w	800a744 <_dtoa_r+0x73c>
 800a49c:	4b6b      	ldr	r3, [pc, #428]	; (800a64c <_dtoa_r+0x644>)
 800a49e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800a4a2:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f280 80e3 	bge.w	800a674 <_dtoa_r+0x66c>
 800a4ae:	9b01      	ldr	r3, [sp, #4]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	f300 80df 	bgt.w	800a674 <_dtoa_r+0x66c>
 800a4b6:	f040 826d 	bne.w	800a994 <_dtoa_r+0x98c>
 800a4ba:	4b69      	ldr	r3, [pc, #420]	; (800a660 <_dtoa_r+0x658>)
 800a4bc:	2200      	movs	r2, #0
 800a4be:	4640      	mov	r0, r8
 800a4c0:	4649      	mov	r1, r9
 800a4c2:	f7f6 f8c9 	bl	8000658 <__aeabi_dmul>
 800a4c6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4ca:	f7f6 fb4b 	bl	8000b64 <__aeabi_dcmpge>
 800a4ce:	9e01      	ldr	r6, [sp, #4]
 800a4d0:	4637      	mov	r7, r6
 800a4d2:	2800      	cmp	r0, #0
 800a4d4:	f040 8243 	bne.w	800a95e <_dtoa_r+0x956>
 800a4d8:	9d00      	ldr	r5, [sp, #0]
 800a4da:	2331      	movs	r3, #49	; 0x31
 800a4dc:	f805 3b01 	strb.w	r3, [r5], #1
 800a4e0:	f10a 0a01 	add.w	sl, sl, #1
 800a4e4:	e23f      	b.n	800a966 <_dtoa_r+0x95e>
 800a4e6:	07f2      	lsls	r2, r6, #31
 800a4e8:	d505      	bpl.n	800a4f6 <_dtoa_r+0x4ee>
 800a4ea:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4ee:	f7f6 f8b3 	bl	8000658 <__aeabi_dmul>
 800a4f2:	3501      	adds	r5, #1
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	1076      	asrs	r6, r6, #1
 800a4f8:	3708      	adds	r7, #8
 800a4fa:	e76c      	b.n	800a3d6 <_dtoa_r+0x3ce>
 800a4fc:	2502      	movs	r5, #2
 800a4fe:	e76f      	b.n	800a3e0 <_dtoa_r+0x3d8>
 800a500:	9b01      	ldr	r3, [sp, #4]
 800a502:	f8cd a01c 	str.w	sl, [sp, #28]
 800a506:	930c      	str	r3, [sp, #48]	; 0x30
 800a508:	e78d      	b.n	800a426 <_dtoa_r+0x41e>
 800a50a:	9900      	ldr	r1, [sp, #0]
 800a50c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800a50e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a510:	4b4e      	ldr	r3, [pc, #312]	; (800a64c <_dtoa_r+0x644>)
 800a512:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a516:	4401      	add	r1, r0
 800a518:	9102      	str	r1, [sp, #8]
 800a51a:	9908      	ldr	r1, [sp, #32]
 800a51c:	eeb0 8a47 	vmov.f32	s16, s14
 800a520:	eef0 8a67 	vmov.f32	s17, s15
 800a524:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a528:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a52c:	2900      	cmp	r1, #0
 800a52e:	d045      	beq.n	800a5bc <_dtoa_r+0x5b4>
 800a530:	494c      	ldr	r1, [pc, #304]	; (800a664 <_dtoa_r+0x65c>)
 800a532:	2000      	movs	r0, #0
 800a534:	f7f6 f9ba 	bl	80008ac <__aeabi_ddiv>
 800a538:	ec53 2b18 	vmov	r2, r3, d8
 800a53c:	f7f5 fed4 	bl	80002e8 <__aeabi_dsub>
 800a540:	9d00      	ldr	r5, [sp, #0]
 800a542:	ec41 0b18 	vmov	d8, r0, r1
 800a546:	4639      	mov	r1, r7
 800a548:	4630      	mov	r0, r6
 800a54a:	f7f6 fb35 	bl	8000bb8 <__aeabi_d2iz>
 800a54e:	900c      	str	r0, [sp, #48]	; 0x30
 800a550:	f7f6 f818 	bl	8000584 <__aeabi_i2d>
 800a554:	4602      	mov	r2, r0
 800a556:	460b      	mov	r3, r1
 800a558:	4630      	mov	r0, r6
 800a55a:	4639      	mov	r1, r7
 800a55c:	f7f5 fec4 	bl	80002e8 <__aeabi_dsub>
 800a560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a562:	3330      	adds	r3, #48	; 0x30
 800a564:	f805 3b01 	strb.w	r3, [r5], #1
 800a568:	ec53 2b18 	vmov	r2, r3, d8
 800a56c:	4606      	mov	r6, r0
 800a56e:	460f      	mov	r7, r1
 800a570:	f7f6 fae4 	bl	8000b3c <__aeabi_dcmplt>
 800a574:	2800      	cmp	r0, #0
 800a576:	d165      	bne.n	800a644 <_dtoa_r+0x63c>
 800a578:	4632      	mov	r2, r6
 800a57a:	463b      	mov	r3, r7
 800a57c:	4935      	ldr	r1, [pc, #212]	; (800a654 <_dtoa_r+0x64c>)
 800a57e:	2000      	movs	r0, #0
 800a580:	f7f5 feb2 	bl	80002e8 <__aeabi_dsub>
 800a584:	ec53 2b18 	vmov	r2, r3, d8
 800a588:	f7f6 fad8 	bl	8000b3c <__aeabi_dcmplt>
 800a58c:	2800      	cmp	r0, #0
 800a58e:	f040 80b9 	bne.w	800a704 <_dtoa_r+0x6fc>
 800a592:	9b02      	ldr	r3, [sp, #8]
 800a594:	429d      	cmp	r5, r3
 800a596:	f43f af75 	beq.w	800a484 <_dtoa_r+0x47c>
 800a59a:	4b2f      	ldr	r3, [pc, #188]	; (800a658 <_dtoa_r+0x650>)
 800a59c:	ec51 0b18 	vmov	r0, r1, d8
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	f7f6 f859 	bl	8000658 <__aeabi_dmul>
 800a5a6:	4b2c      	ldr	r3, [pc, #176]	; (800a658 <_dtoa_r+0x650>)
 800a5a8:	ec41 0b18 	vmov	d8, r0, r1
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	4630      	mov	r0, r6
 800a5b0:	4639      	mov	r1, r7
 800a5b2:	f7f6 f851 	bl	8000658 <__aeabi_dmul>
 800a5b6:	4606      	mov	r6, r0
 800a5b8:	460f      	mov	r7, r1
 800a5ba:	e7c4      	b.n	800a546 <_dtoa_r+0x53e>
 800a5bc:	ec51 0b17 	vmov	r0, r1, d7
 800a5c0:	f7f6 f84a 	bl	8000658 <__aeabi_dmul>
 800a5c4:	9b02      	ldr	r3, [sp, #8]
 800a5c6:	9d00      	ldr	r5, [sp, #0]
 800a5c8:	930c      	str	r3, [sp, #48]	; 0x30
 800a5ca:	ec41 0b18 	vmov	d8, r0, r1
 800a5ce:	4639      	mov	r1, r7
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7f6 faf1 	bl	8000bb8 <__aeabi_d2iz>
 800a5d6:	9011      	str	r0, [sp, #68]	; 0x44
 800a5d8:	f7f5 ffd4 	bl	8000584 <__aeabi_i2d>
 800a5dc:	4602      	mov	r2, r0
 800a5de:	460b      	mov	r3, r1
 800a5e0:	4630      	mov	r0, r6
 800a5e2:	4639      	mov	r1, r7
 800a5e4:	f7f5 fe80 	bl	80002e8 <__aeabi_dsub>
 800a5e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a5ea:	3330      	adds	r3, #48	; 0x30
 800a5ec:	f805 3b01 	strb.w	r3, [r5], #1
 800a5f0:	9b02      	ldr	r3, [sp, #8]
 800a5f2:	429d      	cmp	r5, r3
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	460f      	mov	r7, r1
 800a5f8:	f04f 0200 	mov.w	r2, #0
 800a5fc:	d134      	bne.n	800a668 <_dtoa_r+0x660>
 800a5fe:	4b19      	ldr	r3, [pc, #100]	; (800a664 <_dtoa_r+0x65c>)
 800a600:	ec51 0b18 	vmov	r0, r1, d8
 800a604:	f7f5 fe72 	bl	80002ec <__adddf3>
 800a608:	4602      	mov	r2, r0
 800a60a:	460b      	mov	r3, r1
 800a60c:	4630      	mov	r0, r6
 800a60e:	4639      	mov	r1, r7
 800a610:	f7f6 fab2 	bl	8000b78 <__aeabi_dcmpgt>
 800a614:	2800      	cmp	r0, #0
 800a616:	d175      	bne.n	800a704 <_dtoa_r+0x6fc>
 800a618:	ec53 2b18 	vmov	r2, r3, d8
 800a61c:	4911      	ldr	r1, [pc, #68]	; (800a664 <_dtoa_r+0x65c>)
 800a61e:	2000      	movs	r0, #0
 800a620:	f7f5 fe62 	bl	80002e8 <__aeabi_dsub>
 800a624:	4602      	mov	r2, r0
 800a626:	460b      	mov	r3, r1
 800a628:	4630      	mov	r0, r6
 800a62a:	4639      	mov	r1, r7
 800a62c:	f7f6 fa86 	bl	8000b3c <__aeabi_dcmplt>
 800a630:	2800      	cmp	r0, #0
 800a632:	f43f af27 	beq.w	800a484 <_dtoa_r+0x47c>
 800a636:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a638:	1e6b      	subs	r3, r5, #1
 800a63a:	930c      	str	r3, [sp, #48]	; 0x30
 800a63c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a640:	2b30      	cmp	r3, #48	; 0x30
 800a642:	d0f8      	beq.n	800a636 <_dtoa_r+0x62e>
 800a644:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a648:	e04a      	b.n	800a6e0 <_dtoa_r+0x6d8>
 800a64a:	bf00      	nop
 800a64c:	08013e70 	.word	0x08013e70
 800a650:	08013e48 	.word	0x08013e48
 800a654:	3ff00000 	.word	0x3ff00000
 800a658:	40240000 	.word	0x40240000
 800a65c:	401c0000 	.word	0x401c0000
 800a660:	40140000 	.word	0x40140000
 800a664:	3fe00000 	.word	0x3fe00000
 800a668:	4baf      	ldr	r3, [pc, #700]	; (800a928 <_dtoa_r+0x920>)
 800a66a:	f7f5 fff5 	bl	8000658 <__aeabi_dmul>
 800a66e:	4606      	mov	r6, r0
 800a670:	460f      	mov	r7, r1
 800a672:	e7ac      	b.n	800a5ce <_dtoa_r+0x5c6>
 800a674:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a678:	9d00      	ldr	r5, [sp, #0]
 800a67a:	4642      	mov	r2, r8
 800a67c:	464b      	mov	r3, r9
 800a67e:	4630      	mov	r0, r6
 800a680:	4639      	mov	r1, r7
 800a682:	f7f6 f913 	bl	80008ac <__aeabi_ddiv>
 800a686:	f7f6 fa97 	bl	8000bb8 <__aeabi_d2iz>
 800a68a:	9002      	str	r0, [sp, #8]
 800a68c:	f7f5 ff7a 	bl	8000584 <__aeabi_i2d>
 800a690:	4642      	mov	r2, r8
 800a692:	464b      	mov	r3, r9
 800a694:	f7f5 ffe0 	bl	8000658 <__aeabi_dmul>
 800a698:	4602      	mov	r2, r0
 800a69a:	460b      	mov	r3, r1
 800a69c:	4630      	mov	r0, r6
 800a69e:	4639      	mov	r1, r7
 800a6a0:	f7f5 fe22 	bl	80002e8 <__aeabi_dsub>
 800a6a4:	9e02      	ldr	r6, [sp, #8]
 800a6a6:	9f01      	ldr	r7, [sp, #4]
 800a6a8:	3630      	adds	r6, #48	; 0x30
 800a6aa:	f805 6b01 	strb.w	r6, [r5], #1
 800a6ae:	9e00      	ldr	r6, [sp, #0]
 800a6b0:	1bae      	subs	r6, r5, r6
 800a6b2:	42b7      	cmp	r7, r6
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	460b      	mov	r3, r1
 800a6b8:	d137      	bne.n	800a72a <_dtoa_r+0x722>
 800a6ba:	f7f5 fe17 	bl	80002ec <__adddf3>
 800a6be:	4642      	mov	r2, r8
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	4606      	mov	r6, r0
 800a6c4:	460f      	mov	r7, r1
 800a6c6:	f7f6 fa57 	bl	8000b78 <__aeabi_dcmpgt>
 800a6ca:	b9c8      	cbnz	r0, 800a700 <_dtoa_r+0x6f8>
 800a6cc:	4642      	mov	r2, r8
 800a6ce:	464b      	mov	r3, r9
 800a6d0:	4630      	mov	r0, r6
 800a6d2:	4639      	mov	r1, r7
 800a6d4:	f7f6 fa28 	bl	8000b28 <__aeabi_dcmpeq>
 800a6d8:	b110      	cbz	r0, 800a6e0 <_dtoa_r+0x6d8>
 800a6da:	9b02      	ldr	r3, [sp, #8]
 800a6dc:	07d9      	lsls	r1, r3, #31
 800a6de:	d40f      	bmi.n	800a700 <_dtoa_r+0x6f8>
 800a6e0:	4620      	mov	r0, r4
 800a6e2:	4659      	mov	r1, fp
 800a6e4:	f000 fcfa 	bl	800b0dc <_Bfree>
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	702b      	strb	r3, [r5, #0]
 800a6ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a6ee:	f10a 0001 	add.w	r0, sl, #1
 800a6f2:	6018      	str	r0, [r3, #0]
 800a6f4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	f43f acd8 	beq.w	800a0ac <_dtoa_r+0xa4>
 800a6fc:	601d      	str	r5, [r3, #0]
 800a6fe:	e4d5      	b.n	800a0ac <_dtoa_r+0xa4>
 800a700:	f8cd a01c 	str.w	sl, [sp, #28]
 800a704:	462b      	mov	r3, r5
 800a706:	461d      	mov	r5, r3
 800a708:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a70c:	2a39      	cmp	r2, #57	; 0x39
 800a70e:	d108      	bne.n	800a722 <_dtoa_r+0x71a>
 800a710:	9a00      	ldr	r2, [sp, #0]
 800a712:	429a      	cmp	r2, r3
 800a714:	d1f7      	bne.n	800a706 <_dtoa_r+0x6fe>
 800a716:	9a07      	ldr	r2, [sp, #28]
 800a718:	9900      	ldr	r1, [sp, #0]
 800a71a:	3201      	adds	r2, #1
 800a71c:	9207      	str	r2, [sp, #28]
 800a71e:	2230      	movs	r2, #48	; 0x30
 800a720:	700a      	strb	r2, [r1, #0]
 800a722:	781a      	ldrb	r2, [r3, #0]
 800a724:	3201      	adds	r2, #1
 800a726:	701a      	strb	r2, [r3, #0]
 800a728:	e78c      	b.n	800a644 <_dtoa_r+0x63c>
 800a72a:	4b7f      	ldr	r3, [pc, #508]	; (800a928 <_dtoa_r+0x920>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	f7f5 ff93 	bl	8000658 <__aeabi_dmul>
 800a732:	2200      	movs	r2, #0
 800a734:	2300      	movs	r3, #0
 800a736:	4606      	mov	r6, r0
 800a738:	460f      	mov	r7, r1
 800a73a:	f7f6 f9f5 	bl	8000b28 <__aeabi_dcmpeq>
 800a73e:	2800      	cmp	r0, #0
 800a740:	d09b      	beq.n	800a67a <_dtoa_r+0x672>
 800a742:	e7cd      	b.n	800a6e0 <_dtoa_r+0x6d8>
 800a744:	9a08      	ldr	r2, [sp, #32]
 800a746:	2a00      	cmp	r2, #0
 800a748:	f000 80c4 	beq.w	800a8d4 <_dtoa_r+0x8cc>
 800a74c:	9a05      	ldr	r2, [sp, #20]
 800a74e:	2a01      	cmp	r2, #1
 800a750:	f300 80a8 	bgt.w	800a8a4 <_dtoa_r+0x89c>
 800a754:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a756:	2a00      	cmp	r2, #0
 800a758:	f000 80a0 	beq.w	800a89c <_dtoa_r+0x894>
 800a75c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a760:	9e06      	ldr	r6, [sp, #24]
 800a762:	4645      	mov	r5, r8
 800a764:	9a04      	ldr	r2, [sp, #16]
 800a766:	2101      	movs	r1, #1
 800a768:	441a      	add	r2, r3
 800a76a:	4620      	mov	r0, r4
 800a76c:	4498      	add	r8, r3
 800a76e:	9204      	str	r2, [sp, #16]
 800a770:	f000 fd70 	bl	800b254 <__i2b>
 800a774:	4607      	mov	r7, r0
 800a776:	2d00      	cmp	r5, #0
 800a778:	dd0b      	ble.n	800a792 <_dtoa_r+0x78a>
 800a77a:	9b04      	ldr	r3, [sp, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	dd08      	ble.n	800a792 <_dtoa_r+0x78a>
 800a780:	42ab      	cmp	r3, r5
 800a782:	9a04      	ldr	r2, [sp, #16]
 800a784:	bfa8      	it	ge
 800a786:	462b      	movge	r3, r5
 800a788:	eba8 0803 	sub.w	r8, r8, r3
 800a78c:	1aed      	subs	r5, r5, r3
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	9304      	str	r3, [sp, #16]
 800a792:	9b06      	ldr	r3, [sp, #24]
 800a794:	b1fb      	cbz	r3, 800a7d6 <_dtoa_r+0x7ce>
 800a796:	9b08      	ldr	r3, [sp, #32]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f000 809f 	beq.w	800a8dc <_dtoa_r+0x8d4>
 800a79e:	2e00      	cmp	r6, #0
 800a7a0:	dd11      	ble.n	800a7c6 <_dtoa_r+0x7be>
 800a7a2:	4639      	mov	r1, r7
 800a7a4:	4632      	mov	r2, r6
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	f000 fe10 	bl	800b3cc <__pow5mult>
 800a7ac:	465a      	mov	r2, fp
 800a7ae:	4601      	mov	r1, r0
 800a7b0:	4607      	mov	r7, r0
 800a7b2:	4620      	mov	r0, r4
 800a7b4:	f000 fd64 	bl	800b280 <__multiply>
 800a7b8:	4659      	mov	r1, fp
 800a7ba:	9007      	str	r0, [sp, #28]
 800a7bc:	4620      	mov	r0, r4
 800a7be:	f000 fc8d 	bl	800b0dc <_Bfree>
 800a7c2:	9b07      	ldr	r3, [sp, #28]
 800a7c4:	469b      	mov	fp, r3
 800a7c6:	9b06      	ldr	r3, [sp, #24]
 800a7c8:	1b9a      	subs	r2, r3, r6
 800a7ca:	d004      	beq.n	800a7d6 <_dtoa_r+0x7ce>
 800a7cc:	4659      	mov	r1, fp
 800a7ce:	4620      	mov	r0, r4
 800a7d0:	f000 fdfc 	bl	800b3cc <__pow5mult>
 800a7d4:	4683      	mov	fp, r0
 800a7d6:	2101      	movs	r1, #1
 800a7d8:	4620      	mov	r0, r4
 800a7da:	f000 fd3b 	bl	800b254 <__i2b>
 800a7de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	dd7c      	ble.n	800a8e0 <_dtoa_r+0x8d8>
 800a7e6:	461a      	mov	r2, r3
 800a7e8:	4601      	mov	r1, r0
 800a7ea:	4620      	mov	r0, r4
 800a7ec:	f000 fdee 	bl	800b3cc <__pow5mult>
 800a7f0:	9b05      	ldr	r3, [sp, #20]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	4606      	mov	r6, r0
 800a7f6:	dd76      	ble.n	800a8e6 <_dtoa_r+0x8de>
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	9306      	str	r3, [sp, #24]
 800a7fc:	6933      	ldr	r3, [r6, #16]
 800a7fe:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a802:	6918      	ldr	r0, [r3, #16]
 800a804:	f000 fcd6 	bl	800b1b4 <__hi0bits>
 800a808:	f1c0 0020 	rsb	r0, r0, #32
 800a80c:	9b04      	ldr	r3, [sp, #16]
 800a80e:	4418      	add	r0, r3
 800a810:	f010 001f 	ands.w	r0, r0, #31
 800a814:	f000 8086 	beq.w	800a924 <_dtoa_r+0x91c>
 800a818:	f1c0 0320 	rsb	r3, r0, #32
 800a81c:	2b04      	cmp	r3, #4
 800a81e:	dd7f      	ble.n	800a920 <_dtoa_r+0x918>
 800a820:	f1c0 001c 	rsb	r0, r0, #28
 800a824:	9b04      	ldr	r3, [sp, #16]
 800a826:	4403      	add	r3, r0
 800a828:	4480      	add	r8, r0
 800a82a:	4405      	add	r5, r0
 800a82c:	9304      	str	r3, [sp, #16]
 800a82e:	f1b8 0f00 	cmp.w	r8, #0
 800a832:	dd05      	ble.n	800a840 <_dtoa_r+0x838>
 800a834:	4659      	mov	r1, fp
 800a836:	4642      	mov	r2, r8
 800a838:	4620      	mov	r0, r4
 800a83a:	f000 fe21 	bl	800b480 <__lshift>
 800a83e:	4683      	mov	fp, r0
 800a840:	9b04      	ldr	r3, [sp, #16]
 800a842:	2b00      	cmp	r3, #0
 800a844:	dd05      	ble.n	800a852 <_dtoa_r+0x84a>
 800a846:	4631      	mov	r1, r6
 800a848:	461a      	mov	r2, r3
 800a84a:	4620      	mov	r0, r4
 800a84c:	f000 fe18 	bl	800b480 <__lshift>
 800a850:	4606      	mov	r6, r0
 800a852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a854:	2b00      	cmp	r3, #0
 800a856:	d069      	beq.n	800a92c <_dtoa_r+0x924>
 800a858:	4631      	mov	r1, r6
 800a85a:	4658      	mov	r0, fp
 800a85c:	f000 fe7c 	bl	800b558 <__mcmp>
 800a860:	2800      	cmp	r0, #0
 800a862:	da63      	bge.n	800a92c <_dtoa_r+0x924>
 800a864:	2300      	movs	r3, #0
 800a866:	4659      	mov	r1, fp
 800a868:	220a      	movs	r2, #10
 800a86a:	4620      	mov	r0, r4
 800a86c:	f000 fc58 	bl	800b120 <__multadd>
 800a870:	9b08      	ldr	r3, [sp, #32]
 800a872:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a876:	4683      	mov	fp, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	f000 818f 	beq.w	800ab9c <_dtoa_r+0xb94>
 800a87e:	4639      	mov	r1, r7
 800a880:	2300      	movs	r3, #0
 800a882:	220a      	movs	r2, #10
 800a884:	4620      	mov	r0, r4
 800a886:	f000 fc4b 	bl	800b120 <__multadd>
 800a88a:	f1b9 0f00 	cmp.w	r9, #0
 800a88e:	4607      	mov	r7, r0
 800a890:	f300 808e 	bgt.w	800a9b0 <_dtoa_r+0x9a8>
 800a894:	9b05      	ldr	r3, [sp, #20]
 800a896:	2b02      	cmp	r3, #2
 800a898:	dc50      	bgt.n	800a93c <_dtoa_r+0x934>
 800a89a:	e089      	b.n	800a9b0 <_dtoa_r+0x9a8>
 800a89c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a89e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8a2:	e75d      	b.n	800a760 <_dtoa_r+0x758>
 800a8a4:	9b01      	ldr	r3, [sp, #4]
 800a8a6:	1e5e      	subs	r6, r3, #1
 800a8a8:	9b06      	ldr	r3, [sp, #24]
 800a8aa:	42b3      	cmp	r3, r6
 800a8ac:	bfbf      	itttt	lt
 800a8ae:	9b06      	ldrlt	r3, [sp, #24]
 800a8b0:	9606      	strlt	r6, [sp, #24]
 800a8b2:	1af2      	sublt	r2, r6, r3
 800a8b4:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800a8b6:	bfb6      	itet	lt
 800a8b8:	189b      	addlt	r3, r3, r2
 800a8ba:	1b9e      	subge	r6, r3, r6
 800a8bc:	930d      	strlt	r3, [sp, #52]	; 0x34
 800a8be:	9b01      	ldr	r3, [sp, #4]
 800a8c0:	bfb8      	it	lt
 800a8c2:	2600      	movlt	r6, #0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	bfb5      	itete	lt
 800a8c8:	eba8 0503 	sublt.w	r5, r8, r3
 800a8cc:	9b01      	ldrge	r3, [sp, #4]
 800a8ce:	2300      	movlt	r3, #0
 800a8d0:	4645      	movge	r5, r8
 800a8d2:	e747      	b.n	800a764 <_dtoa_r+0x75c>
 800a8d4:	9e06      	ldr	r6, [sp, #24]
 800a8d6:	9f08      	ldr	r7, [sp, #32]
 800a8d8:	4645      	mov	r5, r8
 800a8da:	e74c      	b.n	800a776 <_dtoa_r+0x76e>
 800a8dc:	9a06      	ldr	r2, [sp, #24]
 800a8de:	e775      	b.n	800a7cc <_dtoa_r+0x7c4>
 800a8e0:	9b05      	ldr	r3, [sp, #20]
 800a8e2:	2b01      	cmp	r3, #1
 800a8e4:	dc18      	bgt.n	800a918 <_dtoa_r+0x910>
 800a8e6:	9b02      	ldr	r3, [sp, #8]
 800a8e8:	b9b3      	cbnz	r3, 800a918 <_dtoa_r+0x910>
 800a8ea:	9b03      	ldr	r3, [sp, #12]
 800a8ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8f0:	b9a3      	cbnz	r3, 800a91c <_dtoa_r+0x914>
 800a8f2:	9b03      	ldr	r3, [sp, #12]
 800a8f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a8f8:	0d1b      	lsrs	r3, r3, #20
 800a8fa:	051b      	lsls	r3, r3, #20
 800a8fc:	b12b      	cbz	r3, 800a90a <_dtoa_r+0x902>
 800a8fe:	9b04      	ldr	r3, [sp, #16]
 800a900:	3301      	adds	r3, #1
 800a902:	9304      	str	r3, [sp, #16]
 800a904:	f108 0801 	add.w	r8, r8, #1
 800a908:	2301      	movs	r3, #1
 800a90a:	9306      	str	r3, [sp, #24]
 800a90c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a90e:	2b00      	cmp	r3, #0
 800a910:	f47f af74 	bne.w	800a7fc <_dtoa_r+0x7f4>
 800a914:	2001      	movs	r0, #1
 800a916:	e779      	b.n	800a80c <_dtoa_r+0x804>
 800a918:	2300      	movs	r3, #0
 800a91a:	e7f6      	b.n	800a90a <_dtoa_r+0x902>
 800a91c:	9b02      	ldr	r3, [sp, #8]
 800a91e:	e7f4      	b.n	800a90a <_dtoa_r+0x902>
 800a920:	d085      	beq.n	800a82e <_dtoa_r+0x826>
 800a922:	4618      	mov	r0, r3
 800a924:	301c      	adds	r0, #28
 800a926:	e77d      	b.n	800a824 <_dtoa_r+0x81c>
 800a928:	40240000 	.word	0x40240000
 800a92c:	9b01      	ldr	r3, [sp, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	dc38      	bgt.n	800a9a4 <_dtoa_r+0x99c>
 800a932:	9b05      	ldr	r3, [sp, #20]
 800a934:	2b02      	cmp	r3, #2
 800a936:	dd35      	ble.n	800a9a4 <_dtoa_r+0x99c>
 800a938:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a93c:	f1b9 0f00 	cmp.w	r9, #0
 800a940:	d10d      	bne.n	800a95e <_dtoa_r+0x956>
 800a942:	4631      	mov	r1, r6
 800a944:	464b      	mov	r3, r9
 800a946:	2205      	movs	r2, #5
 800a948:	4620      	mov	r0, r4
 800a94a:	f000 fbe9 	bl	800b120 <__multadd>
 800a94e:	4601      	mov	r1, r0
 800a950:	4606      	mov	r6, r0
 800a952:	4658      	mov	r0, fp
 800a954:	f000 fe00 	bl	800b558 <__mcmp>
 800a958:	2800      	cmp	r0, #0
 800a95a:	f73f adbd 	bgt.w	800a4d8 <_dtoa_r+0x4d0>
 800a95e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a960:	9d00      	ldr	r5, [sp, #0]
 800a962:	ea6f 0a03 	mvn.w	sl, r3
 800a966:	f04f 0800 	mov.w	r8, #0
 800a96a:	4631      	mov	r1, r6
 800a96c:	4620      	mov	r0, r4
 800a96e:	f000 fbb5 	bl	800b0dc <_Bfree>
 800a972:	2f00      	cmp	r7, #0
 800a974:	f43f aeb4 	beq.w	800a6e0 <_dtoa_r+0x6d8>
 800a978:	f1b8 0f00 	cmp.w	r8, #0
 800a97c:	d005      	beq.n	800a98a <_dtoa_r+0x982>
 800a97e:	45b8      	cmp	r8, r7
 800a980:	d003      	beq.n	800a98a <_dtoa_r+0x982>
 800a982:	4641      	mov	r1, r8
 800a984:	4620      	mov	r0, r4
 800a986:	f000 fba9 	bl	800b0dc <_Bfree>
 800a98a:	4639      	mov	r1, r7
 800a98c:	4620      	mov	r0, r4
 800a98e:	f000 fba5 	bl	800b0dc <_Bfree>
 800a992:	e6a5      	b.n	800a6e0 <_dtoa_r+0x6d8>
 800a994:	2600      	movs	r6, #0
 800a996:	4637      	mov	r7, r6
 800a998:	e7e1      	b.n	800a95e <_dtoa_r+0x956>
 800a99a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800a99c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800a9a0:	4637      	mov	r7, r6
 800a9a2:	e599      	b.n	800a4d8 <_dtoa_r+0x4d0>
 800a9a4:	9b08      	ldr	r3, [sp, #32]
 800a9a6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 80fd 	beq.w	800abaa <_dtoa_r+0xba2>
 800a9b0:	2d00      	cmp	r5, #0
 800a9b2:	dd05      	ble.n	800a9c0 <_dtoa_r+0x9b8>
 800a9b4:	4639      	mov	r1, r7
 800a9b6:	462a      	mov	r2, r5
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f000 fd61 	bl	800b480 <__lshift>
 800a9be:	4607      	mov	r7, r0
 800a9c0:	9b06      	ldr	r3, [sp, #24]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d05c      	beq.n	800aa80 <_dtoa_r+0xa78>
 800a9c6:	6879      	ldr	r1, [r7, #4]
 800a9c8:	4620      	mov	r0, r4
 800a9ca:	f000 fb47 	bl	800b05c <_Balloc>
 800a9ce:	4605      	mov	r5, r0
 800a9d0:	b928      	cbnz	r0, 800a9de <_dtoa_r+0x9d6>
 800a9d2:	4b80      	ldr	r3, [pc, #512]	; (800abd4 <_dtoa_r+0xbcc>)
 800a9d4:	4602      	mov	r2, r0
 800a9d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a9da:	f7ff bb2e 	b.w	800a03a <_dtoa_r+0x32>
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	3202      	adds	r2, #2
 800a9e2:	0092      	lsls	r2, r2, #2
 800a9e4:	f107 010c 	add.w	r1, r7, #12
 800a9e8:	300c      	adds	r0, #12
 800a9ea:	f000 fb1d 	bl	800b028 <memcpy>
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	4629      	mov	r1, r5
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f000 fd44 	bl	800b480 <__lshift>
 800a9f8:	9b00      	ldr	r3, [sp, #0]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	9301      	str	r3, [sp, #4]
 800a9fe:	9b00      	ldr	r3, [sp, #0]
 800aa00:	444b      	add	r3, r9
 800aa02:	9307      	str	r3, [sp, #28]
 800aa04:	9b02      	ldr	r3, [sp, #8]
 800aa06:	f003 0301 	and.w	r3, r3, #1
 800aa0a:	46b8      	mov	r8, r7
 800aa0c:	9306      	str	r3, [sp, #24]
 800aa0e:	4607      	mov	r7, r0
 800aa10:	9b01      	ldr	r3, [sp, #4]
 800aa12:	4631      	mov	r1, r6
 800aa14:	3b01      	subs	r3, #1
 800aa16:	4658      	mov	r0, fp
 800aa18:	9302      	str	r3, [sp, #8]
 800aa1a:	f7ff fa67 	bl	8009eec <quorem>
 800aa1e:	4603      	mov	r3, r0
 800aa20:	3330      	adds	r3, #48	; 0x30
 800aa22:	9004      	str	r0, [sp, #16]
 800aa24:	4641      	mov	r1, r8
 800aa26:	4658      	mov	r0, fp
 800aa28:	9308      	str	r3, [sp, #32]
 800aa2a:	f000 fd95 	bl	800b558 <__mcmp>
 800aa2e:	463a      	mov	r2, r7
 800aa30:	4681      	mov	r9, r0
 800aa32:	4631      	mov	r1, r6
 800aa34:	4620      	mov	r0, r4
 800aa36:	f000 fdab 	bl	800b590 <__mdiff>
 800aa3a:	68c2      	ldr	r2, [r0, #12]
 800aa3c:	9b08      	ldr	r3, [sp, #32]
 800aa3e:	4605      	mov	r5, r0
 800aa40:	bb02      	cbnz	r2, 800aa84 <_dtoa_r+0xa7c>
 800aa42:	4601      	mov	r1, r0
 800aa44:	4658      	mov	r0, fp
 800aa46:	f000 fd87 	bl	800b558 <__mcmp>
 800aa4a:	9b08      	ldr	r3, [sp, #32]
 800aa4c:	4602      	mov	r2, r0
 800aa4e:	4629      	mov	r1, r5
 800aa50:	4620      	mov	r0, r4
 800aa52:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800aa56:	f000 fb41 	bl	800b0dc <_Bfree>
 800aa5a:	9b05      	ldr	r3, [sp, #20]
 800aa5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa5e:	9d01      	ldr	r5, [sp, #4]
 800aa60:	ea43 0102 	orr.w	r1, r3, r2
 800aa64:	9b06      	ldr	r3, [sp, #24]
 800aa66:	430b      	orrs	r3, r1
 800aa68:	9b08      	ldr	r3, [sp, #32]
 800aa6a:	d10d      	bne.n	800aa88 <_dtoa_r+0xa80>
 800aa6c:	2b39      	cmp	r3, #57	; 0x39
 800aa6e:	d029      	beq.n	800aac4 <_dtoa_r+0xabc>
 800aa70:	f1b9 0f00 	cmp.w	r9, #0
 800aa74:	dd01      	ble.n	800aa7a <_dtoa_r+0xa72>
 800aa76:	9b04      	ldr	r3, [sp, #16]
 800aa78:	3331      	adds	r3, #49	; 0x31
 800aa7a:	9a02      	ldr	r2, [sp, #8]
 800aa7c:	7013      	strb	r3, [r2, #0]
 800aa7e:	e774      	b.n	800a96a <_dtoa_r+0x962>
 800aa80:	4638      	mov	r0, r7
 800aa82:	e7b9      	b.n	800a9f8 <_dtoa_r+0x9f0>
 800aa84:	2201      	movs	r2, #1
 800aa86:	e7e2      	b.n	800aa4e <_dtoa_r+0xa46>
 800aa88:	f1b9 0f00 	cmp.w	r9, #0
 800aa8c:	db06      	blt.n	800aa9c <_dtoa_r+0xa94>
 800aa8e:	9905      	ldr	r1, [sp, #20]
 800aa90:	ea41 0909 	orr.w	r9, r1, r9
 800aa94:	9906      	ldr	r1, [sp, #24]
 800aa96:	ea59 0101 	orrs.w	r1, r9, r1
 800aa9a:	d120      	bne.n	800aade <_dtoa_r+0xad6>
 800aa9c:	2a00      	cmp	r2, #0
 800aa9e:	ddec      	ble.n	800aa7a <_dtoa_r+0xa72>
 800aaa0:	4659      	mov	r1, fp
 800aaa2:	2201      	movs	r2, #1
 800aaa4:	4620      	mov	r0, r4
 800aaa6:	9301      	str	r3, [sp, #4]
 800aaa8:	f000 fcea 	bl	800b480 <__lshift>
 800aaac:	4631      	mov	r1, r6
 800aaae:	4683      	mov	fp, r0
 800aab0:	f000 fd52 	bl	800b558 <__mcmp>
 800aab4:	2800      	cmp	r0, #0
 800aab6:	9b01      	ldr	r3, [sp, #4]
 800aab8:	dc02      	bgt.n	800aac0 <_dtoa_r+0xab8>
 800aaba:	d1de      	bne.n	800aa7a <_dtoa_r+0xa72>
 800aabc:	07da      	lsls	r2, r3, #31
 800aabe:	d5dc      	bpl.n	800aa7a <_dtoa_r+0xa72>
 800aac0:	2b39      	cmp	r3, #57	; 0x39
 800aac2:	d1d8      	bne.n	800aa76 <_dtoa_r+0xa6e>
 800aac4:	9a02      	ldr	r2, [sp, #8]
 800aac6:	2339      	movs	r3, #57	; 0x39
 800aac8:	7013      	strb	r3, [r2, #0]
 800aaca:	462b      	mov	r3, r5
 800aacc:	461d      	mov	r5, r3
 800aace:	3b01      	subs	r3, #1
 800aad0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800aad4:	2a39      	cmp	r2, #57	; 0x39
 800aad6:	d050      	beq.n	800ab7a <_dtoa_r+0xb72>
 800aad8:	3201      	adds	r2, #1
 800aada:	701a      	strb	r2, [r3, #0]
 800aadc:	e745      	b.n	800a96a <_dtoa_r+0x962>
 800aade:	2a00      	cmp	r2, #0
 800aae0:	dd03      	ble.n	800aaea <_dtoa_r+0xae2>
 800aae2:	2b39      	cmp	r3, #57	; 0x39
 800aae4:	d0ee      	beq.n	800aac4 <_dtoa_r+0xabc>
 800aae6:	3301      	adds	r3, #1
 800aae8:	e7c7      	b.n	800aa7a <_dtoa_r+0xa72>
 800aaea:	9a01      	ldr	r2, [sp, #4]
 800aaec:	9907      	ldr	r1, [sp, #28]
 800aaee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800aaf2:	428a      	cmp	r2, r1
 800aaf4:	d02a      	beq.n	800ab4c <_dtoa_r+0xb44>
 800aaf6:	4659      	mov	r1, fp
 800aaf8:	2300      	movs	r3, #0
 800aafa:	220a      	movs	r2, #10
 800aafc:	4620      	mov	r0, r4
 800aafe:	f000 fb0f 	bl	800b120 <__multadd>
 800ab02:	45b8      	cmp	r8, r7
 800ab04:	4683      	mov	fp, r0
 800ab06:	f04f 0300 	mov.w	r3, #0
 800ab0a:	f04f 020a 	mov.w	r2, #10
 800ab0e:	4641      	mov	r1, r8
 800ab10:	4620      	mov	r0, r4
 800ab12:	d107      	bne.n	800ab24 <_dtoa_r+0xb1c>
 800ab14:	f000 fb04 	bl	800b120 <__multadd>
 800ab18:	4680      	mov	r8, r0
 800ab1a:	4607      	mov	r7, r0
 800ab1c:	9b01      	ldr	r3, [sp, #4]
 800ab1e:	3301      	adds	r3, #1
 800ab20:	9301      	str	r3, [sp, #4]
 800ab22:	e775      	b.n	800aa10 <_dtoa_r+0xa08>
 800ab24:	f000 fafc 	bl	800b120 <__multadd>
 800ab28:	4639      	mov	r1, r7
 800ab2a:	4680      	mov	r8, r0
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	220a      	movs	r2, #10
 800ab30:	4620      	mov	r0, r4
 800ab32:	f000 faf5 	bl	800b120 <__multadd>
 800ab36:	4607      	mov	r7, r0
 800ab38:	e7f0      	b.n	800ab1c <_dtoa_r+0xb14>
 800ab3a:	f1b9 0f00 	cmp.w	r9, #0
 800ab3e:	9a00      	ldr	r2, [sp, #0]
 800ab40:	bfcc      	ite	gt
 800ab42:	464d      	movgt	r5, r9
 800ab44:	2501      	movle	r5, #1
 800ab46:	4415      	add	r5, r2
 800ab48:	f04f 0800 	mov.w	r8, #0
 800ab4c:	4659      	mov	r1, fp
 800ab4e:	2201      	movs	r2, #1
 800ab50:	4620      	mov	r0, r4
 800ab52:	9301      	str	r3, [sp, #4]
 800ab54:	f000 fc94 	bl	800b480 <__lshift>
 800ab58:	4631      	mov	r1, r6
 800ab5a:	4683      	mov	fp, r0
 800ab5c:	f000 fcfc 	bl	800b558 <__mcmp>
 800ab60:	2800      	cmp	r0, #0
 800ab62:	dcb2      	bgt.n	800aaca <_dtoa_r+0xac2>
 800ab64:	d102      	bne.n	800ab6c <_dtoa_r+0xb64>
 800ab66:	9b01      	ldr	r3, [sp, #4]
 800ab68:	07db      	lsls	r3, r3, #31
 800ab6a:	d4ae      	bmi.n	800aaca <_dtoa_r+0xac2>
 800ab6c:	462b      	mov	r3, r5
 800ab6e:	461d      	mov	r5, r3
 800ab70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab74:	2a30      	cmp	r2, #48	; 0x30
 800ab76:	d0fa      	beq.n	800ab6e <_dtoa_r+0xb66>
 800ab78:	e6f7      	b.n	800a96a <_dtoa_r+0x962>
 800ab7a:	9a00      	ldr	r2, [sp, #0]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d1a5      	bne.n	800aacc <_dtoa_r+0xac4>
 800ab80:	f10a 0a01 	add.w	sl, sl, #1
 800ab84:	2331      	movs	r3, #49	; 0x31
 800ab86:	e779      	b.n	800aa7c <_dtoa_r+0xa74>
 800ab88:	4b13      	ldr	r3, [pc, #76]	; (800abd8 <_dtoa_r+0xbd0>)
 800ab8a:	f7ff baaf 	b.w	800a0ec <_dtoa_r+0xe4>
 800ab8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	f47f aa86 	bne.w	800a0a2 <_dtoa_r+0x9a>
 800ab96:	4b11      	ldr	r3, [pc, #68]	; (800abdc <_dtoa_r+0xbd4>)
 800ab98:	f7ff baa8 	b.w	800a0ec <_dtoa_r+0xe4>
 800ab9c:	f1b9 0f00 	cmp.w	r9, #0
 800aba0:	dc03      	bgt.n	800abaa <_dtoa_r+0xba2>
 800aba2:	9b05      	ldr	r3, [sp, #20]
 800aba4:	2b02      	cmp	r3, #2
 800aba6:	f73f aec9 	bgt.w	800a93c <_dtoa_r+0x934>
 800abaa:	9d00      	ldr	r5, [sp, #0]
 800abac:	4631      	mov	r1, r6
 800abae:	4658      	mov	r0, fp
 800abb0:	f7ff f99c 	bl	8009eec <quorem>
 800abb4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800abb8:	f805 3b01 	strb.w	r3, [r5], #1
 800abbc:	9a00      	ldr	r2, [sp, #0]
 800abbe:	1aaa      	subs	r2, r5, r2
 800abc0:	4591      	cmp	r9, r2
 800abc2:	ddba      	ble.n	800ab3a <_dtoa_r+0xb32>
 800abc4:	4659      	mov	r1, fp
 800abc6:	2300      	movs	r3, #0
 800abc8:	220a      	movs	r2, #10
 800abca:	4620      	mov	r0, r4
 800abcc:	f000 faa8 	bl	800b120 <__multadd>
 800abd0:	4683      	mov	fp, r0
 800abd2:	e7eb      	b.n	800abac <_dtoa_r+0xba4>
 800abd4:	08013d77 	.word	0x08013d77
 800abd8:	08013cd0 	.word	0x08013cd0
 800abdc:	08013cf4 	.word	0x08013cf4

0800abe0 <__sflush_r>:
 800abe0:	898a      	ldrh	r2, [r1, #12]
 800abe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abe6:	4605      	mov	r5, r0
 800abe8:	0710      	lsls	r0, r2, #28
 800abea:	460c      	mov	r4, r1
 800abec:	d458      	bmi.n	800aca0 <__sflush_r+0xc0>
 800abee:	684b      	ldr	r3, [r1, #4]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	dc05      	bgt.n	800ac00 <__sflush_r+0x20>
 800abf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	dc02      	bgt.n	800ac00 <__sflush_r+0x20>
 800abfa:	2000      	movs	r0, #0
 800abfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ac00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac02:	2e00      	cmp	r6, #0
 800ac04:	d0f9      	beq.n	800abfa <__sflush_r+0x1a>
 800ac06:	2300      	movs	r3, #0
 800ac08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ac0c:	682f      	ldr	r7, [r5, #0]
 800ac0e:	602b      	str	r3, [r5, #0]
 800ac10:	d032      	beq.n	800ac78 <__sflush_r+0x98>
 800ac12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ac14:	89a3      	ldrh	r3, [r4, #12]
 800ac16:	075a      	lsls	r2, r3, #29
 800ac18:	d505      	bpl.n	800ac26 <__sflush_r+0x46>
 800ac1a:	6863      	ldr	r3, [r4, #4]
 800ac1c:	1ac0      	subs	r0, r0, r3
 800ac1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ac20:	b10b      	cbz	r3, 800ac26 <__sflush_r+0x46>
 800ac22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ac24:	1ac0      	subs	r0, r0, r3
 800ac26:	2300      	movs	r3, #0
 800ac28:	4602      	mov	r2, r0
 800ac2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ac2c:	6a21      	ldr	r1, [r4, #32]
 800ac2e:	4628      	mov	r0, r5
 800ac30:	47b0      	blx	r6
 800ac32:	1c43      	adds	r3, r0, #1
 800ac34:	89a3      	ldrh	r3, [r4, #12]
 800ac36:	d106      	bne.n	800ac46 <__sflush_r+0x66>
 800ac38:	6829      	ldr	r1, [r5, #0]
 800ac3a:	291d      	cmp	r1, #29
 800ac3c:	d82c      	bhi.n	800ac98 <__sflush_r+0xb8>
 800ac3e:	4a2a      	ldr	r2, [pc, #168]	; (800ace8 <__sflush_r+0x108>)
 800ac40:	40ca      	lsrs	r2, r1
 800ac42:	07d6      	lsls	r6, r2, #31
 800ac44:	d528      	bpl.n	800ac98 <__sflush_r+0xb8>
 800ac46:	2200      	movs	r2, #0
 800ac48:	6062      	str	r2, [r4, #4]
 800ac4a:	04d9      	lsls	r1, r3, #19
 800ac4c:	6922      	ldr	r2, [r4, #16]
 800ac4e:	6022      	str	r2, [r4, #0]
 800ac50:	d504      	bpl.n	800ac5c <__sflush_r+0x7c>
 800ac52:	1c42      	adds	r2, r0, #1
 800ac54:	d101      	bne.n	800ac5a <__sflush_r+0x7a>
 800ac56:	682b      	ldr	r3, [r5, #0]
 800ac58:	b903      	cbnz	r3, 800ac5c <__sflush_r+0x7c>
 800ac5a:	6560      	str	r0, [r4, #84]	; 0x54
 800ac5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac5e:	602f      	str	r7, [r5, #0]
 800ac60:	2900      	cmp	r1, #0
 800ac62:	d0ca      	beq.n	800abfa <__sflush_r+0x1a>
 800ac64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac68:	4299      	cmp	r1, r3
 800ac6a:	d002      	beq.n	800ac72 <__sflush_r+0x92>
 800ac6c:	4628      	mov	r0, r5
 800ac6e:	f7fe fa6f 	bl	8009150 <_free_r>
 800ac72:	2000      	movs	r0, #0
 800ac74:	6360      	str	r0, [r4, #52]	; 0x34
 800ac76:	e7c1      	b.n	800abfc <__sflush_r+0x1c>
 800ac78:	6a21      	ldr	r1, [r4, #32]
 800ac7a:	2301      	movs	r3, #1
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	47b0      	blx	r6
 800ac80:	1c41      	adds	r1, r0, #1
 800ac82:	d1c7      	bne.n	800ac14 <__sflush_r+0x34>
 800ac84:	682b      	ldr	r3, [r5, #0]
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d0c4      	beq.n	800ac14 <__sflush_r+0x34>
 800ac8a:	2b1d      	cmp	r3, #29
 800ac8c:	d001      	beq.n	800ac92 <__sflush_r+0xb2>
 800ac8e:	2b16      	cmp	r3, #22
 800ac90:	d101      	bne.n	800ac96 <__sflush_r+0xb6>
 800ac92:	602f      	str	r7, [r5, #0]
 800ac94:	e7b1      	b.n	800abfa <__sflush_r+0x1a>
 800ac96:	89a3      	ldrh	r3, [r4, #12]
 800ac98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ac9c:	81a3      	strh	r3, [r4, #12]
 800ac9e:	e7ad      	b.n	800abfc <__sflush_r+0x1c>
 800aca0:	690f      	ldr	r7, [r1, #16]
 800aca2:	2f00      	cmp	r7, #0
 800aca4:	d0a9      	beq.n	800abfa <__sflush_r+0x1a>
 800aca6:	0793      	lsls	r3, r2, #30
 800aca8:	680e      	ldr	r6, [r1, #0]
 800acaa:	bf08      	it	eq
 800acac:	694b      	ldreq	r3, [r1, #20]
 800acae:	600f      	str	r7, [r1, #0]
 800acb0:	bf18      	it	ne
 800acb2:	2300      	movne	r3, #0
 800acb4:	eba6 0807 	sub.w	r8, r6, r7
 800acb8:	608b      	str	r3, [r1, #8]
 800acba:	f1b8 0f00 	cmp.w	r8, #0
 800acbe:	dd9c      	ble.n	800abfa <__sflush_r+0x1a>
 800acc0:	6a21      	ldr	r1, [r4, #32]
 800acc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800acc4:	4643      	mov	r3, r8
 800acc6:	463a      	mov	r2, r7
 800acc8:	4628      	mov	r0, r5
 800acca:	47b0      	blx	r6
 800accc:	2800      	cmp	r0, #0
 800acce:	dc06      	bgt.n	800acde <__sflush_r+0xfe>
 800acd0:	89a3      	ldrh	r3, [r4, #12]
 800acd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800acd6:	81a3      	strh	r3, [r4, #12]
 800acd8:	f04f 30ff 	mov.w	r0, #4294967295
 800acdc:	e78e      	b.n	800abfc <__sflush_r+0x1c>
 800acde:	4407      	add	r7, r0
 800ace0:	eba8 0800 	sub.w	r8, r8, r0
 800ace4:	e7e9      	b.n	800acba <__sflush_r+0xda>
 800ace6:	bf00      	nop
 800ace8:	20400001 	.word	0x20400001

0800acec <_fflush_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	690b      	ldr	r3, [r1, #16]
 800acf0:	4605      	mov	r5, r0
 800acf2:	460c      	mov	r4, r1
 800acf4:	b913      	cbnz	r3, 800acfc <_fflush_r+0x10>
 800acf6:	2500      	movs	r5, #0
 800acf8:	4628      	mov	r0, r5
 800acfa:	bd38      	pop	{r3, r4, r5, pc}
 800acfc:	b118      	cbz	r0, 800ad06 <_fflush_r+0x1a>
 800acfe:	6983      	ldr	r3, [r0, #24]
 800ad00:	b90b      	cbnz	r3, 800ad06 <_fflush_r+0x1a>
 800ad02:	f000 f887 	bl	800ae14 <__sinit>
 800ad06:	4b14      	ldr	r3, [pc, #80]	; (800ad58 <_fflush_r+0x6c>)
 800ad08:	429c      	cmp	r4, r3
 800ad0a:	d11b      	bne.n	800ad44 <_fflush_r+0x58>
 800ad0c:	686c      	ldr	r4, [r5, #4]
 800ad0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d0ef      	beq.n	800acf6 <_fflush_r+0xa>
 800ad16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ad18:	07d0      	lsls	r0, r2, #31
 800ad1a:	d404      	bmi.n	800ad26 <_fflush_r+0x3a>
 800ad1c:	0599      	lsls	r1, r3, #22
 800ad1e:	d402      	bmi.n	800ad26 <_fflush_r+0x3a>
 800ad20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad22:	f000 f91a 	bl	800af5a <__retarget_lock_acquire_recursive>
 800ad26:	4628      	mov	r0, r5
 800ad28:	4621      	mov	r1, r4
 800ad2a:	f7ff ff59 	bl	800abe0 <__sflush_r>
 800ad2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ad30:	07da      	lsls	r2, r3, #31
 800ad32:	4605      	mov	r5, r0
 800ad34:	d4e0      	bmi.n	800acf8 <_fflush_r+0xc>
 800ad36:	89a3      	ldrh	r3, [r4, #12]
 800ad38:	059b      	lsls	r3, r3, #22
 800ad3a:	d4dd      	bmi.n	800acf8 <_fflush_r+0xc>
 800ad3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ad3e:	f000 f90d 	bl	800af5c <__retarget_lock_release_recursive>
 800ad42:	e7d9      	b.n	800acf8 <_fflush_r+0xc>
 800ad44:	4b05      	ldr	r3, [pc, #20]	; (800ad5c <_fflush_r+0x70>)
 800ad46:	429c      	cmp	r4, r3
 800ad48:	d101      	bne.n	800ad4e <_fflush_r+0x62>
 800ad4a:	68ac      	ldr	r4, [r5, #8]
 800ad4c:	e7df      	b.n	800ad0e <_fflush_r+0x22>
 800ad4e:	4b04      	ldr	r3, [pc, #16]	; (800ad60 <_fflush_r+0x74>)
 800ad50:	429c      	cmp	r4, r3
 800ad52:	bf08      	it	eq
 800ad54:	68ec      	ldreq	r4, [r5, #12]
 800ad56:	e7da      	b.n	800ad0e <_fflush_r+0x22>
 800ad58:	08013da8 	.word	0x08013da8
 800ad5c:	08013dc8 	.word	0x08013dc8
 800ad60:	08013d88 	.word	0x08013d88

0800ad64 <std>:
 800ad64:	2300      	movs	r3, #0
 800ad66:	b510      	push	{r4, lr}
 800ad68:	4604      	mov	r4, r0
 800ad6a:	e9c0 3300 	strd	r3, r3, [r0]
 800ad6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ad72:	6083      	str	r3, [r0, #8]
 800ad74:	8181      	strh	r1, [r0, #12]
 800ad76:	6643      	str	r3, [r0, #100]	; 0x64
 800ad78:	81c2      	strh	r2, [r0, #14]
 800ad7a:	6183      	str	r3, [r0, #24]
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	2208      	movs	r2, #8
 800ad80:	305c      	adds	r0, #92	; 0x5c
 800ad82:	f7fe f9dd 	bl	8009140 <memset>
 800ad86:	4b05      	ldr	r3, [pc, #20]	; (800ad9c <std+0x38>)
 800ad88:	6263      	str	r3, [r4, #36]	; 0x24
 800ad8a:	4b05      	ldr	r3, [pc, #20]	; (800ada0 <std+0x3c>)
 800ad8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad8e:	4b05      	ldr	r3, [pc, #20]	; (800ada4 <std+0x40>)
 800ad90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad92:	4b05      	ldr	r3, [pc, #20]	; (800ada8 <std+0x44>)
 800ad94:	6224      	str	r4, [r4, #32]
 800ad96:	6323      	str	r3, [r4, #48]	; 0x30
 800ad98:	bd10      	pop	{r4, pc}
 800ad9a:	bf00      	nop
 800ad9c:	0800bce1 	.word	0x0800bce1
 800ada0:	0800bd03 	.word	0x0800bd03
 800ada4:	0800bd3b 	.word	0x0800bd3b
 800ada8:	0800bd5f 	.word	0x0800bd5f

0800adac <_cleanup_r>:
 800adac:	4901      	ldr	r1, [pc, #4]	; (800adb4 <_cleanup_r+0x8>)
 800adae:	f000 b8af 	b.w	800af10 <_fwalk_reent>
 800adb2:	bf00      	nop
 800adb4:	0800aced 	.word	0x0800aced

0800adb8 <__sfmoreglue>:
 800adb8:	b570      	push	{r4, r5, r6, lr}
 800adba:	1e4a      	subs	r2, r1, #1
 800adbc:	2568      	movs	r5, #104	; 0x68
 800adbe:	4355      	muls	r5, r2
 800adc0:	460e      	mov	r6, r1
 800adc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800adc6:	f7fe fa13 	bl	80091f0 <_malloc_r>
 800adca:	4604      	mov	r4, r0
 800adcc:	b140      	cbz	r0, 800ade0 <__sfmoreglue+0x28>
 800adce:	2100      	movs	r1, #0
 800add0:	e9c0 1600 	strd	r1, r6, [r0]
 800add4:	300c      	adds	r0, #12
 800add6:	60a0      	str	r0, [r4, #8]
 800add8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800addc:	f7fe f9b0 	bl	8009140 <memset>
 800ade0:	4620      	mov	r0, r4
 800ade2:	bd70      	pop	{r4, r5, r6, pc}

0800ade4 <__sfp_lock_acquire>:
 800ade4:	4801      	ldr	r0, [pc, #4]	; (800adec <__sfp_lock_acquire+0x8>)
 800ade6:	f000 b8b8 	b.w	800af5a <__retarget_lock_acquire_recursive>
 800adea:	bf00      	nop
 800adec:	20000ed8 	.word	0x20000ed8

0800adf0 <__sfp_lock_release>:
 800adf0:	4801      	ldr	r0, [pc, #4]	; (800adf8 <__sfp_lock_release+0x8>)
 800adf2:	f000 b8b3 	b.w	800af5c <__retarget_lock_release_recursive>
 800adf6:	bf00      	nop
 800adf8:	20000ed8 	.word	0x20000ed8

0800adfc <__sinit_lock_acquire>:
 800adfc:	4801      	ldr	r0, [pc, #4]	; (800ae04 <__sinit_lock_acquire+0x8>)
 800adfe:	f000 b8ac 	b.w	800af5a <__retarget_lock_acquire_recursive>
 800ae02:	bf00      	nop
 800ae04:	20000ed3 	.word	0x20000ed3

0800ae08 <__sinit_lock_release>:
 800ae08:	4801      	ldr	r0, [pc, #4]	; (800ae10 <__sinit_lock_release+0x8>)
 800ae0a:	f000 b8a7 	b.w	800af5c <__retarget_lock_release_recursive>
 800ae0e:	bf00      	nop
 800ae10:	20000ed3 	.word	0x20000ed3

0800ae14 <__sinit>:
 800ae14:	b510      	push	{r4, lr}
 800ae16:	4604      	mov	r4, r0
 800ae18:	f7ff fff0 	bl	800adfc <__sinit_lock_acquire>
 800ae1c:	69a3      	ldr	r3, [r4, #24]
 800ae1e:	b11b      	cbz	r3, 800ae28 <__sinit+0x14>
 800ae20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ae24:	f7ff bff0 	b.w	800ae08 <__sinit_lock_release>
 800ae28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ae2c:	6523      	str	r3, [r4, #80]	; 0x50
 800ae2e:	4b13      	ldr	r3, [pc, #76]	; (800ae7c <__sinit+0x68>)
 800ae30:	4a13      	ldr	r2, [pc, #76]	; (800ae80 <__sinit+0x6c>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	62a2      	str	r2, [r4, #40]	; 0x28
 800ae36:	42a3      	cmp	r3, r4
 800ae38:	bf04      	itt	eq
 800ae3a:	2301      	moveq	r3, #1
 800ae3c:	61a3      	streq	r3, [r4, #24]
 800ae3e:	4620      	mov	r0, r4
 800ae40:	f000 f820 	bl	800ae84 <__sfp>
 800ae44:	6060      	str	r0, [r4, #4]
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 f81c 	bl	800ae84 <__sfp>
 800ae4c:	60a0      	str	r0, [r4, #8]
 800ae4e:	4620      	mov	r0, r4
 800ae50:	f000 f818 	bl	800ae84 <__sfp>
 800ae54:	2200      	movs	r2, #0
 800ae56:	60e0      	str	r0, [r4, #12]
 800ae58:	2104      	movs	r1, #4
 800ae5a:	6860      	ldr	r0, [r4, #4]
 800ae5c:	f7ff ff82 	bl	800ad64 <std>
 800ae60:	68a0      	ldr	r0, [r4, #8]
 800ae62:	2201      	movs	r2, #1
 800ae64:	2109      	movs	r1, #9
 800ae66:	f7ff ff7d 	bl	800ad64 <std>
 800ae6a:	68e0      	ldr	r0, [r4, #12]
 800ae6c:	2202      	movs	r2, #2
 800ae6e:	2112      	movs	r1, #18
 800ae70:	f7ff ff78 	bl	800ad64 <std>
 800ae74:	2301      	movs	r3, #1
 800ae76:	61a3      	str	r3, [r4, #24]
 800ae78:	e7d2      	b.n	800ae20 <__sinit+0xc>
 800ae7a:	bf00      	nop
 800ae7c:	08013cbc 	.word	0x08013cbc
 800ae80:	0800adad 	.word	0x0800adad

0800ae84 <__sfp>:
 800ae84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae86:	4607      	mov	r7, r0
 800ae88:	f7ff ffac 	bl	800ade4 <__sfp_lock_acquire>
 800ae8c:	4b1e      	ldr	r3, [pc, #120]	; (800af08 <__sfp+0x84>)
 800ae8e:	681e      	ldr	r6, [r3, #0]
 800ae90:	69b3      	ldr	r3, [r6, #24]
 800ae92:	b913      	cbnz	r3, 800ae9a <__sfp+0x16>
 800ae94:	4630      	mov	r0, r6
 800ae96:	f7ff ffbd 	bl	800ae14 <__sinit>
 800ae9a:	3648      	adds	r6, #72	; 0x48
 800ae9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aea0:	3b01      	subs	r3, #1
 800aea2:	d503      	bpl.n	800aeac <__sfp+0x28>
 800aea4:	6833      	ldr	r3, [r6, #0]
 800aea6:	b30b      	cbz	r3, 800aeec <__sfp+0x68>
 800aea8:	6836      	ldr	r6, [r6, #0]
 800aeaa:	e7f7      	b.n	800ae9c <__sfp+0x18>
 800aeac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aeb0:	b9d5      	cbnz	r5, 800aee8 <__sfp+0x64>
 800aeb2:	4b16      	ldr	r3, [pc, #88]	; (800af0c <__sfp+0x88>)
 800aeb4:	60e3      	str	r3, [r4, #12]
 800aeb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aeba:	6665      	str	r5, [r4, #100]	; 0x64
 800aebc:	f000 f84c 	bl	800af58 <__retarget_lock_init_recursive>
 800aec0:	f7ff ff96 	bl	800adf0 <__sfp_lock_release>
 800aec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aecc:	6025      	str	r5, [r4, #0]
 800aece:	61a5      	str	r5, [r4, #24]
 800aed0:	2208      	movs	r2, #8
 800aed2:	4629      	mov	r1, r5
 800aed4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aed8:	f7fe f932 	bl	8009140 <memset>
 800aedc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aee4:	4620      	mov	r0, r4
 800aee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aee8:	3468      	adds	r4, #104	; 0x68
 800aeea:	e7d9      	b.n	800aea0 <__sfp+0x1c>
 800aeec:	2104      	movs	r1, #4
 800aeee:	4638      	mov	r0, r7
 800aef0:	f7ff ff62 	bl	800adb8 <__sfmoreglue>
 800aef4:	4604      	mov	r4, r0
 800aef6:	6030      	str	r0, [r6, #0]
 800aef8:	2800      	cmp	r0, #0
 800aefa:	d1d5      	bne.n	800aea8 <__sfp+0x24>
 800aefc:	f7ff ff78 	bl	800adf0 <__sfp_lock_release>
 800af00:	230c      	movs	r3, #12
 800af02:	603b      	str	r3, [r7, #0]
 800af04:	e7ee      	b.n	800aee4 <__sfp+0x60>
 800af06:	bf00      	nop
 800af08:	08013cbc 	.word	0x08013cbc
 800af0c:	ffff0001 	.word	0xffff0001

0800af10 <_fwalk_reent>:
 800af10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af14:	4606      	mov	r6, r0
 800af16:	4688      	mov	r8, r1
 800af18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800af1c:	2700      	movs	r7, #0
 800af1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800af22:	f1b9 0901 	subs.w	r9, r9, #1
 800af26:	d505      	bpl.n	800af34 <_fwalk_reent+0x24>
 800af28:	6824      	ldr	r4, [r4, #0]
 800af2a:	2c00      	cmp	r4, #0
 800af2c:	d1f7      	bne.n	800af1e <_fwalk_reent+0xe>
 800af2e:	4638      	mov	r0, r7
 800af30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af34:	89ab      	ldrh	r3, [r5, #12]
 800af36:	2b01      	cmp	r3, #1
 800af38:	d907      	bls.n	800af4a <_fwalk_reent+0x3a>
 800af3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800af3e:	3301      	adds	r3, #1
 800af40:	d003      	beq.n	800af4a <_fwalk_reent+0x3a>
 800af42:	4629      	mov	r1, r5
 800af44:	4630      	mov	r0, r6
 800af46:	47c0      	blx	r8
 800af48:	4307      	orrs	r7, r0
 800af4a:	3568      	adds	r5, #104	; 0x68
 800af4c:	e7e9      	b.n	800af22 <_fwalk_reent+0x12>
	...

0800af50 <_localeconv_r>:
 800af50:	4800      	ldr	r0, [pc, #0]	; (800af54 <_localeconv_r+0x4>)
 800af52:	4770      	bx	lr
 800af54:	20000164 	.word	0x20000164

0800af58 <__retarget_lock_init_recursive>:
 800af58:	4770      	bx	lr

0800af5a <__retarget_lock_acquire_recursive>:
 800af5a:	4770      	bx	lr

0800af5c <__retarget_lock_release_recursive>:
 800af5c:	4770      	bx	lr

0800af5e <__swhatbuf_r>:
 800af5e:	b570      	push	{r4, r5, r6, lr}
 800af60:	460e      	mov	r6, r1
 800af62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af66:	2900      	cmp	r1, #0
 800af68:	b096      	sub	sp, #88	; 0x58
 800af6a:	4614      	mov	r4, r2
 800af6c:	461d      	mov	r5, r3
 800af6e:	da07      	bge.n	800af80 <__swhatbuf_r+0x22>
 800af70:	2300      	movs	r3, #0
 800af72:	602b      	str	r3, [r5, #0]
 800af74:	89b3      	ldrh	r3, [r6, #12]
 800af76:	061a      	lsls	r2, r3, #24
 800af78:	d410      	bmi.n	800af9c <__swhatbuf_r+0x3e>
 800af7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af7e:	e00e      	b.n	800af9e <__swhatbuf_r+0x40>
 800af80:	466a      	mov	r2, sp
 800af82:	f000 ff43 	bl	800be0c <_fstat_r>
 800af86:	2800      	cmp	r0, #0
 800af88:	dbf2      	blt.n	800af70 <__swhatbuf_r+0x12>
 800af8a:	9a01      	ldr	r2, [sp, #4]
 800af8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800af90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800af94:	425a      	negs	r2, r3
 800af96:	415a      	adcs	r2, r3
 800af98:	602a      	str	r2, [r5, #0]
 800af9a:	e7ee      	b.n	800af7a <__swhatbuf_r+0x1c>
 800af9c:	2340      	movs	r3, #64	; 0x40
 800af9e:	2000      	movs	r0, #0
 800afa0:	6023      	str	r3, [r4, #0]
 800afa2:	b016      	add	sp, #88	; 0x58
 800afa4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800afa8 <__smakebuf_r>:
 800afa8:	898b      	ldrh	r3, [r1, #12]
 800afaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800afac:	079d      	lsls	r5, r3, #30
 800afae:	4606      	mov	r6, r0
 800afb0:	460c      	mov	r4, r1
 800afb2:	d507      	bpl.n	800afc4 <__smakebuf_r+0x1c>
 800afb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800afb8:	6023      	str	r3, [r4, #0]
 800afba:	6123      	str	r3, [r4, #16]
 800afbc:	2301      	movs	r3, #1
 800afbe:	6163      	str	r3, [r4, #20]
 800afc0:	b002      	add	sp, #8
 800afc2:	bd70      	pop	{r4, r5, r6, pc}
 800afc4:	ab01      	add	r3, sp, #4
 800afc6:	466a      	mov	r2, sp
 800afc8:	f7ff ffc9 	bl	800af5e <__swhatbuf_r>
 800afcc:	9900      	ldr	r1, [sp, #0]
 800afce:	4605      	mov	r5, r0
 800afd0:	4630      	mov	r0, r6
 800afd2:	f7fe f90d 	bl	80091f0 <_malloc_r>
 800afd6:	b948      	cbnz	r0, 800afec <__smakebuf_r+0x44>
 800afd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afdc:	059a      	lsls	r2, r3, #22
 800afde:	d4ef      	bmi.n	800afc0 <__smakebuf_r+0x18>
 800afe0:	f023 0303 	bic.w	r3, r3, #3
 800afe4:	f043 0302 	orr.w	r3, r3, #2
 800afe8:	81a3      	strh	r3, [r4, #12]
 800afea:	e7e3      	b.n	800afb4 <__smakebuf_r+0xc>
 800afec:	4b0d      	ldr	r3, [pc, #52]	; (800b024 <__smakebuf_r+0x7c>)
 800afee:	62b3      	str	r3, [r6, #40]	; 0x28
 800aff0:	89a3      	ldrh	r3, [r4, #12]
 800aff2:	6020      	str	r0, [r4, #0]
 800aff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aff8:	81a3      	strh	r3, [r4, #12]
 800affa:	9b00      	ldr	r3, [sp, #0]
 800affc:	6163      	str	r3, [r4, #20]
 800affe:	9b01      	ldr	r3, [sp, #4]
 800b000:	6120      	str	r0, [r4, #16]
 800b002:	b15b      	cbz	r3, 800b01c <__smakebuf_r+0x74>
 800b004:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b008:	4630      	mov	r0, r6
 800b00a:	f000 ff11 	bl	800be30 <_isatty_r>
 800b00e:	b128      	cbz	r0, 800b01c <__smakebuf_r+0x74>
 800b010:	89a3      	ldrh	r3, [r4, #12]
 800b012:	f023 0303 	bic.w	r3, r3, #3
 800b016:	f043 0301 	orr.w	r3, r3, #1
 800b01a:	81a3      	strh	r3, [r4, #12]
 800b01c:	89a0      	ldrh	r0, [r4, #12]
 800b01e:	4305      	orrs	r5, r0
 800b020:	81a5      	strh	r5, [r4, #12]
 800b022:	e7cd      	b.n	800afc0 <__smakebuf_r+0x18>
 800b024:	0800adad 	.word	0x0800adad

0800b028 <memcpy>:
 800b028:	440a      	add	r2, r1
 800b02a:	4291      	cmp	r1, r2
 800b02c:	f100 33ff 	add.w	r3, r0, #4294967295
 800b030:	d100      	bne.n	800b034 <memcpy+0xc>
 800b032:	4770      	bx	lr
 800b034:	b510      	push	{r4, lr}
 800b036:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b03a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b03e:	4291      	cmp	r1, r2
 800b040:	d1f9      	bne.n	800b036 <memcpy+0xe>
 800b042:	bd10      	pop	{r4, pc}

0800b044 <__malloc_lock>:
 800b044:	4801      	ldr	r0, [pc, #4]	; (800b04c <__malloc_lock+0x8>)
 800b046:	f7ff bf88 	b.w	800af5a <__retarget_lock_acquire_recursive>
 800b04a:	bf00      	nop
 800b04c:	20000ed4 	.word	0x20000ed4

0800b050 <__malloc_unlock>:
 800b050:	4801      	ldr	r0, [pc, #4]	; (800b058 <__malloc_unlock+0x8>)
 800b052:	f7ff bf83 	b.w	800af5c <__retarget_lock_release_recursive>
 800b056:	bf00      	nop
 800b058:	20000ed4 	.word	0x20000ed4

0800b05c <_Balloc>:
 800b05c:	b570      	push	{r4, r5, r6, lr}
 800b05e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b060:	4604      	mov	r4, r0
 800b062:	460d      	mov	r5, r1
 800b064:	b976      	cbnz	r6, 800b084 <_Balloc+0x28>
 800b066:	2010      	movs	r0, #16
 800b068:	f7fe f85a 	bl	8009120 <malloc>
 800b06c:	4602      	mov	r2, r0
 800b06e:	6260      	str	r0, [r4, #36]	; 0x24
 800b070:	b920      	cbnz	r0, 800b07c <_Balloc+0x20>
 800b072:	4b18      	ldr	r3, [pc, #96]	; (800b0d4 <_Balloc+0x78>)
 800b074:	4818      	ldr	r0, [pc, #96]	; (800b0d8 <_Balloc+0x7c>)
 800b076:	2166      	movs	r1, #102	; 0x66
 800b078:	f000 fe88 	bl	800bd8c <__assert_func>
 800b07c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b080:	6006      	str	r6, [r0, #0]
 800b082:	60c6      	str	r6, [r0, #12]
 800b084:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b086:	68f3      	ldr	r3, [r6, #12]
 800b088:	b183      	cbz	r3, 800b0ac <_Balloc+0x50>
 800b08a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b08c:	68db      	ldr	r3, [r3, #12]
 800b08e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b092:	b9b8      	cbnz	r0, 800b0c4 <_Balloc+0x68>
 800b094:	2101      	movs	r1, #1
 800b096:	fa01 f605 	lsl.w	r6, r1, r5
 800b09a:	1d72      	adds	r2, r6, #5
 800b09c:	0092      	lsls	r2, r2, #2
 800b09e:	4620      	mov	r0, r4
 800b0a0:	f000 fb5a 	bl	800b758 <_calloc_r>
 800b0a4:	b160      	cbz	r0, 800b0c0 <_Balloc+0x64>
 800b0a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b0aa:	e00e      	b.n	800b0ca <_Balloc+0x6e>
 800b0ac:	2221      	movs	r2, #33	; 0x21
 800b0ae:	2104      	movs	r1, #4
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f000 fb51 	bl	800b758 <_calloc_r>
 800b0b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b0b8:	60f0      	str	r0, [r6, #12]
 800b0ba:	68db      	ldr	r3, [r3, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d1e4      	bne.n	800b08a <_Balloc+0x2e>
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	bd70      	pop	{r4, r5, r6, pc}
 800b0c4:	6802      	ldr	r2, [r0, #0]
 800b0c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b0d0:	e7f7      	b.n	800b0c2 <_Balloc+0x66>
 800b0d2:	bf00      	nop
 800b0d4:	08013d01 	.word	0x08013d01
 800b0d8:	08013de8 	.word	0x08013de8

0800b0dc <_Bfree>:
 800b0dc:	b570      	push	{r4, r5, r6, lr}
 800b0de:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b0e0:	4605      	mov	r5, r0
 800b0e2:	460c      	mov	r4, r1
 800b0e4:	b976      	cbnz	r6, 800b104 <_Bfree+0x28>
 800b0e6:	2010      	movs	r0, #16
 800b0e8:	f7fe f81a 	bl	8009120 <malloc>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	6268      	str	r0, [r5, #36]	; 0x24
 800b0f0:	b920      	cbnz	r0, 800b0fc <_Bfree+0x20>
 800b0f2:	4b09      	ldr	r3, [pc, #36]	; (800b118 <_Bfree+0x3c>)
 800b0f4:	4809      	ldr	r0, [pc, #36]	; (800b11c <_Bfree+0x40>)
 800b0f6:	218a      	movs	r1, #138	; 0x8a
 800b0f8:	f000 fe48 	bl	800bd8c <__assert_func>
 800b0fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b100:	6006      	str	r6, [r0, #0]
 800b102:	60c6      	str	r6, [r0, #12]
 800b104:	b13c      	cbz	r4, 800b116 <_Bfree+0x3a>
 800b106:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b108:	6862      	ldr	r2, [r4, #4]
 800b10a:	68db      	ldr	r3, [r3, #12]
 800b10c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b110:	6021      	str	r1, [r4, #0]
 800b112:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b116:	bd70      	pop	{r4, r5, r6, pc}
 800b118:	08013d01 	.word	0x08013d01
 800b11c:	08013de8 	.word	0x08013de8

0800b120 <__multadd>:
 800b120:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b124:	690e      	ldr	r6, [r1, #16]
 800b126:	4607      	mov	r7, r0
 800b128:	4698      	mov	r8, r3
 800b12a:	460c      	mov	r4, r1
 800b12c:	f101 0014 	add.w	r0, r1, #20
 800b130:	2300      	movs	r3, #0
 800b132:	6805      	ldr	r5, [r0, #0]
 800b134:	b2a9      	uxth	r1, r5
 800b136:	fb02 8101 	mla	r1, r2, r1, r8
 800b13a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800b13e:	0c2d      	lsrs	r5, r5, #16
 800b140:	fb02 c505 	mla	r5, r2, r5, ip
 800b144:	b289      	uxth	r1, r1
 800b146:	3301      	adds	r3, #1
 800b148:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800b14c:	429e      	cmp	r6, r3
 800b14e:	f840 1b04 	str.w	r1, [r0], #4
 800b152:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800b156:	dcec      	bgt.n	800b132 <__multadd+0x12>
 800b158:	f1b8 0f00 	cmp.w	r8, #0
 800b15c:	d022      	beq.n	800b1a4 <__multadd+0x84>
 800b15e:	68a3      	ldr	r3, [r4, #8]
 800b160:	42b3      	cmp	r3, r6
 800b162:	dc19      	bgt.n	800b198 <__multadd+0x78>
 800b164:	6861      	ldr	r1, [r4, #4]
 800b166:	4638      	mov	r0, r7
 800b168:	3101      	adds	r1, #1
 800b16a:	f7ff ff77 	bl	800b05c <_Balloc>
 800b16e:	4605      	mov	r5, r0
 800b170:	b928      	cbnz	r0, 800b17e <__multadd+0x5e>
 800b172:	4602      	mov	r2, r0
 800b174:	4b0d      	ldr	r3, [pc, #52]	; (800b1ac <__multadd+0x8c>)
 800b176:	480e      	ldr	r0, [pc, #56]	; (800b1b0 <__multadd+0x90>)
 800b178:	21b5      	movs	r1, #181	; 0xb5
 800b17a:	f000 fe07 	bl	800bd8c <__assert_func>
 800b17e:	6922      	ldr	r2, [r4, #16]
 800b180:	3202      	adds	r2, #2
 800b182:	f104 010c 	add.w	r1, r4, #12
 800b186:	0092      	lsls	r2, r2, #2
 800b188:	300c      	adds	r0, #12
 800b18a:	f7ff ff4d 	bl	800b028 <memcpy>
 800b18e:	4621      	mov	r1, r4
 800b190:	4638      	mov	r0, r7
 800b192:	f7ff ffa3 	bl	800b0dc <_Bfree>
 800b196:	462c      	mov	r4, r5
 800b198:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800b19c:	3601      	adds	r6, #1
 800b19e:	f8c3 8014 	str.w	r8, [r3, #20]
 800b1a2:	6126      	str	r6, [r4, #16]
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1aa:	bf00      	nop
 800b1ac:	08013d77 	.word	0x08013d77
 800b1b0:	08013de8 	.word	0x08013de8

0800b1b4 <__hi0bits>:
 800b1b4:	0c03      	lsrs	r3, r0, #16
 800b1b6:	041b      	lsls	r3, r3, #16
 800b1b8:	b9d3      	cbnz	r3, 800b1f0 <__hi0bits+0x3c>
 800b1ba:	0400      	lsls	r0, r0, #16
 800b1bc:	2310      	movs	r3, #16
 800b1be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b1c2:	bf04      	itt	eq
 800b1c4:	0200      	lsleq	r0, r0, #8
 800b1c6:	3308      	addeq	r3, #8
 800b1c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b1cc:	bf04      	itt	eq
 800b1ce:	0100      	lsleq	r0, r0, #4
 800b1d0:	3304      	addeq	r3, #4
 800b1d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b1d6:	bf04      	itt	eq
 800b1d8:	0080      	lsleq	r0, r0, #2
 800b1da:	3302      	addeq	r3, #2
 800b1dc:	2800      	cmp	r0, #0
 800b1de:	db05      	blt.n	800b1ec <__hi0bits+0x38>
 800b1e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b1e4:	f103 0301 	add.w	r3, r3, #1
 800b1e8:	bf08      	it	eq
 800b1ea:	2320      	moveq	r3, #32
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	4770      	bx	lr
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	e7e4      	b.n	800b1be <__hi0bits+0xa>

0800b1f4 <__lo0bits>:
 800b1f4:	6803      	ldr	r3, [r0, #0]
 800b1f6:	f013 0207 	ands.w	r2, r3, #7
 800b1fa:	4601      	mov	r1, r0
 800b1fc:	d00b      	beq.n	800b216 <__lo0bits+0x22>
 800b1fe:	07da      	lsls	r2, r3, #31
 800b200:	d424      	bmi.n	800b24c <__lo0bits+0x58>
 800b202:	0798      	lsls	r0, r3, #30
 800b204:	bf49      	itett	mi
 800b206:	085b      	lsrmi	r3, r3, #1
 800b208:	089b      	lsrpl	r3, r3, #2
 800b20a:	2001      	movmi	r0, #1
 800b20c:	600b      	strmi	r3, [r1, #0]
 800b20e:	bf5c      	itt	pl
 800b210:	600b      	strpl	r3, [r1, #0]
 800b212:	2002      	movpl	r0, #2
 800b214:	4770      	bx	lr
 800b216:	b298      	uxth	r0, r3
 800b218:	b9b0      	cbnz	r0, 800b248 <__lo0bits+0x54>
 800b21a:	0c1b      	lsrs	r3, r3, #16
 800b21c:	2010      	movs	r0, #16
 800b21e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800b222:	bf04      	itt	eq
 800b224:	0a1b      	lsreq	r3, r3, #8
 800b226:	3008      	addeq	r0, #8
 800b228:	071a      	lsls	r2, r3, #28
 800b22a:	bf04      	itt	eq
 800b22c:	091b      	lsreq	r3, r3, #4
 800b22e:	3004      	addeq	r0, #4
 800b230:	079a      	lsls	r2, r3, #30
 800b232:	bf04      	itt	eq
 800b234:	089b      	lsreq	r3, r3, #2
 800b236:	3002      	addeq	r0, #2
 800b238:	07da      	lsls	r2, r3, #31
 800b23a:	d403      	bmi.n	800b244 <__lo0bits+0x50>
 800b23c:	085b      	lsrs	r3, r3, #1
 800b23e:	f100 0001 	add.w	r0, r0, #1
 800b242:	d005      	beq.n	800b250 <__lo0bits+0x5c>
 800b244:	600b      	str	r3, [r1, #0]
 800b246:	4770      	bx	lr
 800b248:	4610      	mov	r0, r2
 800b24a:	e7e8      	b.n	800b21e <__lo0bits+0x2a>
 800b24c:	2000      	movs	r0, #0
 800b24e:	4770      	bx	lr
 800b250:	2020      	movs	r0, #32
 800b252:	4770      	bx	lr

0800b254 <__i2b>:
 800b254:	b510      	push	{r4, lr}
 800b256:	460c      	mov	r4, r1
 800b258:	2101      	movs	r1, #1
 800b25a:	f7ff feff 	bl	800b05c <_Balloc>
 800b25e:	4602      	mov	r2, r0
 800b260:	b928      	cbnz	r0, 800b26e <__i2b+0x1a>
 800b262:	4b05      	ldr	r3, [pc, #20]	; (800b278 <__i2b+0x24>)
 800b264:	4805      	ldr	r0, [pc, #20]	; (800b27c <__i2b+0x28>)
 800b266:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b26a:	f000 fd8f 	bl	800bd8c <__assert_func>
 800b26e:	2301      	movs	r3, #1
 800b270:	6144      	str	r4, [r0, #20]
 800b272:	6103      	str	r3, [r0, #16]
 800b274:	bd10      	pop	{r4, pc}
 800b276:	bf00      	nop
 800b278:	08013d77 	.word	0x08013d77
 800b27c:	08013de8 	.word	0x08013de8

0800b280 <__multiply>:
 800b280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b284:	4614      	mov	r4, r2
 800b286:	690a      	ldr	r2, [r1, #16]
 800b288:	6923      	ldr	r3, [r4, #16]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	bfb8      	it	lt
 800b28e:	460b      	movlt	r3, r1
 800b290:	460d      	mov	r5, r1
 800b292:	bfbc      	itt	lt
 800b294:	4625      	movlt	r5, r4
 800b296:	461c      	movlt	r4, r3
 800b298:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800b29c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800b2a0:	68ab      	ldr	r3, [r5, #8]
 800b2a2:	6869      	ldr	r1, [r5, #4]
 800b2a4:	eb0a 0709 	add.w	r7, sl, r9
 800b2a8:	42bb      	cmp	r3, r7
 800b2aa:	b085      	sub	sp, #20
 800b2ac:	bfb8      	it	lt
 800b2ae:	3101      	addlt	r1, #1
 800b2b0:	f7ff fed4 	bl	800b05c <_Balloc>
 800b2b4:	b930      	cbnz	r0, 800b2c4 <__multiply+0x44>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	4b42      	ldr	r3, [pc, #264]	; (800b3c4 <__multiply+0x144>)
 800b2ba:	4843      	ldr	r0, [pc, #268]	; (800b3c8 <__multiply+0x148>)
 800b2bc:	f240 115d 	movw	r1, #349	; 0x15d
 800b2c0:	f000 fd64 	bl	800bd8c <__assert_func>
 800b2c4:	f100 0614 	add.w	r6, r0, #20
 800b2c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800b2cc:	4633      	mov	r3, r6
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	4543      	cmp	r3, r8
 800b2d2:	d31e      	bcc.n	800b312 <__multiply+0x92>
 800b2d4:	f105 0c14 	add.w	ip, r5, #20
 800b2d8:	f104 0314 	add.w	r3, r4, #20
 800b2dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800b2e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800b2e4:	9202      	str	r2, [sp, #8]
 800b2e6:	ebac 0205 	sub.w	r2, ip, r5
 800b2ea:	3a15      	subs	r2, #21
 800b2ec:	f022 0203 	bic.w	r2, r2, #3
 800b2f0:	3204      	adds	r2, #4
 800b2f2:	f105 0115 	add.w	r1, r5, #21
 800b2f6:	458c      	cmp	ip, r1
 800b2f8:	bf38      	it	cc
 800b2fa:	2204      	movcc	r2, #4
 800b2fc:	9201      	str	r2, [sp, #4]
 800b2fe:	9a02      	ldr	r2, [sp, #8]
 800b300:	9303      	str	r3, [sp, #12]
 800b302:	429a      	cmp	r2, r3
 800b304:	d808      	bhi.n	800b318 <__multiply+0x98>
 800b306:	2f00      	cmp	r7, #0
 800b308:	dc55      	bgt.n	800b3b6 <__multiply+0x136>
 800b30a:	6107      	str	r7, [r0, #16]
 800b30c:	b005      	add	sp, #20
 800b30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b312:	f843 2b04 	str.w	r2, [r3], #4
 800b316:	e7db      	b.n	800b2d0 <__multiply+0x50>
 800b318:	f8b3 a000 	ldrh.w	sl, [r3]
 800b31c:	f1ba 0f00 	cmp.w	sl, #0
 800b320:	d020      	beq.n	800b364 <__multiply+0xe4>
 800b322:	f105 0e14 	add.w	lr, r5, #20
 800b326:	46b1      	mov	r9, r6
 800b328:	2200      	movs	r2, #0
 800b32a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800b32e:	f8d9 b000 	ldr.w	fp, [r9]
 800b332:	b2a1      	uxth	r1, r4
 800b334:	fa1f fb8b 	uxth.w	fp, fp
 800b338:	fb0a b101 	mla	r1, sl, r1, fp
 800b33c:	4411      	add	r1, r2
 800b33e:	f8d9 2000 	ldr.w	r2, [r9]
 800b342:	0c24      	lsrs	r4, r4, #16
 800b344:	0c12      	lsrs	r2, r2, #16
 800b346:	fb0a 2404 	mla	r4, sl, r4, r2
 800b34a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800b34e:	b289      	uxth	r1, r1
 800b350:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800b354:	45f4      	cmp	ip, lr
 800b356:	f849 1b04 	str.w	r1, [r9], #4
 800b35a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800b35e:	d8e4      	bhi.n	800b32a <__multiply+0xaa>
 800b360:	9901      	ldr	r1, [sp, #4]
 800b362:	5072      	str	r2, [r6, r1]
 800b364:	9a03      	ldr	r2, [sp, #12]
 800b366:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b36a:	3304      	adds	r3, #4
 800b36c:	f1b9 0f00 	cmp.w	r9, #0
 800b370:	d01f      	beq.n	800b3b2 <__multiply+0x132>
 800b372:	6834      	ldr	r4, [r6, #0]
 800b374:	f105 0114 	add.w	r1, r5, #20
 800b378:	46b6      	mov	lr, r6
 800b37a:	f04f 0a00 	mov.w	sl, #0
 800b37e:	880a      	ldrh	r2, [r1, #0]
 800b380:	f8be b002 	ldrh.w	fp, [lr, #2]
 800b384:	fb09 b202 	mla	r2, r9, r2, fp
 800b388:	4492      	add	sl, r2
 800b38a:	b2a4      	uxth	r4, r4
 800b38c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800b390:	f84e 4b04 	str.w	r4, [lr], #4
 800b394:	f851 4b04 	ldr.w	r4, [r1], #4
 800b398:	f8be 2000 	ldrh.w	r2, [lr]
 800b39c:	0c24      	lsrs	r4, r4, #16
 800b39e:	fb09 2404 	mla	r4, r9, r4, r2
 800b3a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800b3a6:	458c      	cmp	ip, r1
 800b3a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800b3ac:	d8e7      	bhi.n	800b37e <__multiply+0xfe>
 800b3ae:	9a01      	ldr	r2, [sp, #4]
 800b3b0:	50b4      	str	r4, [r6, r2]
 800b3b2:	3604      	adds	r6, #4
 800b3b4:	e7a3      	b.n	800b2fe <__multiply+0x7e>
 800b3b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1a5      	bne.n	800b30a <__multiply+0x8a>
 800b3be:	3f01      	subs	r7, #1
 800b3c0:	e7a1      	b.n	800b306 <__multiply+0x86>
 800b3c2:	bf00      	nop
 800b3c4:	08013d77 	.word	0x08013d77
 800b3c8:	08013de8 	.word	0x08013de8

0800b3cc <__pow5mult>:
 800b3cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3d0:	4615      	mov	r5, r2
 800b3d2:	f012 0203 	ands.w	r2, r2, #3
 800b3d6:	4606      	mov	r6, r0
 800b3d8:	460f      	mov	r7, r1
 800b3da:	d007      	beq.n	800b3ec <__pow5mult+0x20>
 800b3dc:	4c25      	ldr	r4, [pc, #148]	; (800b474 <__pow5mult+0xa8>)
 800b3de:	3a01      	subs	r2, #1
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b3e6:	f7ff fe9b 	bl	800b120 <__multadd>
 800b3ea:	4607      	mov	r7, r0
 800b3ec:	10ad      	asrs	r5, r5, #2
 800b3ee:	d03d      	beq.n	800b46c <__pow5mult+0xa0>
 800b3f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b3f2:	b97c      	cbnz	r4, 800b414 <__pow5mult+0x48>
 800b3f4:	2010      	movs	r0, #16
 800b3f6:	f7fd fe93 	bl	8009120 <malloc>
 800b3fa:	4602      	mov	r2, r0
 800b3fc:	6270      	str	r0, [r6, #36]	; 0x24
 800b3fe:	b928      	cbnz	r0, 800b40c <__pow5mult+0x40>
 800b400:	4b1d      	ldr	r3, [pc, #116]	; (800b478 <__pow5mult+0xac>)
 800b402:	481e      	ldr	r0, [pc, #120]	; (800b47c <__pow5mult+0xb0>)
 800b404:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b408:	f000 fcc0 	bl	800bd8c <__assert_func>
 800b40c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b410:	6004      	str	r4, [r0, #0]
 800b412:	60c4      	str	r4, [r0, #12]
 800b414:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b418:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b41c:	b94c      	cbnz	r4, 800b432 <__pow5mult+0x66>
 800b41e:	f240 2171 	movw	r1, #625	; 0x271
 800b422:	4630      	mov	r0, r6
 800b424:	f7ff ff16 	bl	800b254 <__i2b>
 800b428:	2300      	movs	r3, #0
 800b42a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b42e:	4604      	mov	r4, r0
 800b430:	6003      	str	r3, [r0, #0]
 800b432:	f04f 0900 	mov.w	r9, #0
 800b436:	07eb      	lsls	r3, r5, #31
 800b438:	d50a      	bpl.n	800b450 <__pow5mult+0x84>
 800b43a:	4639      	mov	r1, r7
 800b43c:	4622      	mov	r2, r4
 800b43e:	4630      	mov	r0, r6
 800b440:	f7ff ff1e 	bl	800b280 <__multiply>
 800b444:	4639      	mov	r1, r7
 800b446:	4680      	mov	r8, r0
 800b448:	4630      	mov	r0, r6
 800b44a:	f7ff fe47 	bl	800b0dc <_Bfree>
 800b44e:	4647      	mov	r7, r8
 800b450:	106d      	asrs	r5, r5, #1
 800b452:	d00b      	beq.n	800b46c <__pow5mult+0xa0>
 800b454:	6820      	ldr	r0, [r4, #0]
 800b456:	b938      	cbnz	r0, 800b468 <__pow5mult+0x9c>
 800b458:	4622      	mov	r2, r4
 800b45a:	4621      	mov	r1, r4
 800b45c:	4630      	mov	r0, r6
 800b45e:	f7ff ff0f 	bl	800b280 <__multiply>
 800b462:	6020      	str	r0, [r4, #0]
 800b464:	f8c0 9000 	str.w	r9, [r0]
 800b468:	4604      	mov	r4, r0
 800b46a:	e7e4      	b.n	800b436 <__pow5mult+0x6a>
 800b46c:	4638      	mov	r0, r7
 800b46e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b472:	bf00      	nop
 800b474:	08013f38 	.word	0x08013f38
 800b478:	08013d01 	.word	0x08013d01
 800b47c:	08013de8 	.word	0x08013de8

0800b480 <__lshift>:
 800b480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b484:	460c      	mov	r4, r1
 800b486:	6849      	ldr	r1, [r1, #4]
 800b488:	6923      	ldr	r3, [r4, #16]
 800b48a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b48e:	68a3      	ldr	r3, [r4, #8]
 800b490:	4607      	mov	r7, r0
 800b492:	4691      	mov	r9, r2
 800b494:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b498:	f108 0601 	add.w	r6, r8, #1
 800b49c:	42b3      	cmp	r3, r6
 800b49e:	db0b      	blt.n	800b4b8 <__lshift+0x38>
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	f7ff fddb 	bl	800b05c <_Balloc>
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	b948      	cbnz	r0, 800b4be <__lshift+0x3e>
 800b4aa:	4602      	mov	r2, r0
 800b4ac:	4b28      	ldr	r3, [pc, #160]	; (800b550 <__lshift+0xd0>)
 800b4ae:	4829      	ldr	r0, [pc, #164]	; (800b554 <__lshift+0xd4>)
 800b4b0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b4b4:	f000 fc6a 	bl	800bd8c <__assert_func>
 800b4b8:	3101      	adds	r1, #1
 800b4ba:	005b      	lsls	r3, r3, #1
 800b4bc:	e7ee      	b.n	800b49c <__lshift+0x1c>
 800b4be:	2300      	movs	r3, #0
 800b4c0:	f100 0114 	add.w	r1, r0, #20
 800b4c4:	f100 0210 	add.w	r2, r0, #16
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	4553      	cmp	r3, sl
 800b4cc:	db33      	blt.n	800b536 <__lshift+0xb6>
 800b4ce:	6920      	ldr	r0, [r4, #16]
 800b4d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b4d4:	f104 0314 	add.w	r3, r4, #20
 800b4d8:	f019 091f 	ands.w	r9, r9, #31
 800b4dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b4e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b4e4:	d02b      	beq.n	800b53e <__lshift+0xbe>
 800b4e6:	f1c9 0e20 	rsb	lr, r9, #32
 800b4ea:	468a      	mov	sl, r1
 800b4ec:	2200      	movs	r2, #0
 800b4ee:	6818      	ldr	r0, [r3, #0]
 800b4f0:	fa00 f009 	lsl.w	r0, r0, r9
 800b4f4:	4302      	orrs	r2, r0
 800b4f6:	f84a 2b04 	str.w	r2, [sl], #4
 800b4fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b4fe:	459c      	cmp	ip, r3
 800b500:	fa22 f20e 	lsr.w	r2, r2, lr
 800b504:	d8f3      	bhi.n	800b4ee <__lshift+0x6e>
 800b506:	ebac 0304 	sub.w	r3, ip, r4
 800b50a:	3b15      	subs	r3, #21
 800b50c:	f023 0303 	bic.w	r3, r3, #3
 800b510:	3304      	adds	r3, #4
 800b512:	f104 0015 	add.w	r0, r4, #21
 800b516:	4584      	cmp	ip, r0
 800b518:	bf38      	it	cc
 800b51a:	2304      	movcc	r3, #4
 800b51c:	50ca      	str	r2, [r1, r3]
 800b51e:	b10a      	cbz	r2, 800b524 <__lshift+0xa4>
 800b520:	f108 0602 	add.w	r6, r8, #2
 800b524:	3e01      	subs	r6, #1
 800b526:	4638      	mov	r0, r7
 800b528:	612e      	str	r6, [r5, #16]
 800b52a:	4621      	mov	r1, r4
 800b52c:	f7ff fdd6 	bl	800b0dc <_Bfree>
 800b530:	4628      	mov	r0, r5
 800b532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b536:	f842 0f04 	str.w	r0, [r2, #4]!
 800b53a:	3301      	adds	r3, #1
 800b53c:	e7c5      	b.n	800b4ca <__lshift+0x4a>
 800b53e:	3904      	subs	r1, #4
 800b540:	f853 2b04 	ldr.w	r2, [r3], #4
 800b544:	f841 2f04 	str.w	r2, [r1, #4]!
 800b548:	459c      	cmp	ip, r3
 800b54a:	d8f9      	bhi.n	800b540 <__lshift+0xc0>
 800b54c:	e7ea      	b.n	800b524 <__lshift+0xa4>
 800b54e:	bf00      	nop
 800b550:	08013d77 	.word	0x08013d77
 800b554:	08013de8 	.word	0x08013de8

0800b558 <__mcmp>:
 800b558:	b530      	push	{r4, r5, lr}
 800b55a:	6902      	ldr	r2, [r0, #16]
 800b55c:	690c      	ldr	r4, [r1, #16]
 800b55e:	1b12      	subs	r2, r2, r4
 800b560:	d10e      	bne.n	800b580 <__mcmp+0x28>
 800b562:	f100 0314 	add.w	r3, r0, #20
 800b566:	3114      	adds	r1, #20
 800b568:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b56c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b570:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b574:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b578:	42a5      	cmp	r5, r4
 800b57a:	d003      	beq.n	800b584 <__mcmp+0x2c>
 800b57c:	d305      	bcc.n	800b58a <__mcmp+0x32>
 800b57e:	2201      	movs	r2, #1
 800b580:	4610      	mov	r0, r2
 800b582:	bd30      	pop	{r4, r5, pc}
 800b584:	4283      	cmp	r3, r0
 800b586:	d3f3      	bcc.n	800b570 <__mcmp+0x18>
 800b588:	e7fa      	b.n	800b580 <__mcmp+0x28>
 800b58a:	f04f 32ff 	mov.w	r2, #4294967295
 800b58e:	e7f7      	b.n	800b580 <__mcmp+0x28>

0800b590 <__mdiff>:
 800b590:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b594:	460c      	mov	r4, r1
 800b596:	4606      	mov	r6, r0
 800b598:	4611      	mov	r1, r2
 800b59a:	4620      	mov	r0, r4
 800b59c:	4617      	mov	r7, r2
 800b59e:	f7ff ffdb 	bl	800b558 <__mcmp>
 800b5a2:	1e05      	subs	r5, r0, #0
 800b5a4:	d110      	bne.n	800b5c8 <__mdiff+0x38>
 800b5a6:	4629      	mov	r1, r5
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	f7ff fd57 	bl	800b05c <_Balloc>
 800b5ae:	b930      	cbnz	r0, 800b5be <__mdiff+0x2e>
 800b5b0:	4b39      	ldr	r3, [pc, #228]	; (800b698 <__mdiff+0x108>)
 800b5b2:	4602      	mov	r2, r0
 800b5b4:	f240 2132 	movw	r1, #562	; 0x232
 800b5b8:	4838      	ldr	r0, [pc, #224]	; (800b69c <__mdiff+0x10c>)
 800b5ba:	f000 fbe7 	bl	800bd8c <__assert_func>
 800b5be:	2301      	movs	r3, #1
 800b5c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b5c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5c8:	bfa4      	itt	ge
 800b5ca:	463b      	movge	r3, r7
 800b5cc:	4627      	movge	r7, r4
 800b5ce:	4630      	mov	r0, r6
 800b5d0:	6879      	ldr	r1, [r7, #4]
 800b5d2:	bfa6      	itte	ge
 800b5d4:	461c      	movge	r4, r3
 800b5d6:	2500      	movge	r5, #0
 800b5d8:	2501      	movlt	r5, #1
 800b5da:	f7ff fd3f 	bl	800b05c <_Balloc>
 800b5de:	b920      	cbnz	r0, 800b5ea <__mdiff+0x5a>
 800b5e0:	4b2d      	ldr	r3, [pc, #180]	; (800b698 <__mdiff+0x108>)
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b5e8:	e7e6      	b.n	800b5b8 <__mdiff+0x28>
 800b5ea:	693e      	ldr	r6, [r7, #16]
 800b5ec:	60c5      	str	r5, [r0, #12]
 800b5ee:	6925      	ldr	r5, [r4, #16]
 800b5f0:	f107 0114 	add.w	r1, r7, #20
 800b5f4:	f104 0914 	add.w	r9, r4, #20
 800b5f8:	f100 0e14 	add.w	lr, r0, #20
 800b5fc:	f107 0210 	add.w	r2, r7, #16
 800b600:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800b604:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800b608:	46f2      	mov	sl, lr
 800b60a:	2700      	movs	r7, #0
 800b60c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b610:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b614:	fa1f f883 	uxth.w	r8, r3
 800b618:	fa17 f78b 	uxtah	r7, r7, fp
 800b61c:	0c1b      	lsrs	r3, r3, #16
 800b61e:	eba7 0808 	sub.w	r8, r7, r8
 800b622:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b626:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b62a:	fa1f f888 	uxth.w	r8, r8
 800b62e:	141f      	asrs	r7, r3, #16
 800b630:	454d      	cmp	r5, r9
 800b632:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b636:	f84a 3b04 	str.w	r3, [sl], #4
 800b63a:	d8e7      	bhi.n	800b60c <__mdiff+0x7c>
 800b63c:	1b2b      	subs	r3, r5, r4
 800b63e:	3b15      	subs	r3, #21
 800b640:	f023 0303 	bic.w	r3, r3, #3
 800b644:	3304      	adds	r3, #4
 800b646:	3415      	adds	r4, #21
 800b648:	42a5      	cmp	r5, r4
 800b64a:	bf38      	it	cc
 800b64c:	2304      	movcc	r3, #4
 800b64e:	4419      	add	r1, r3
 800b650:	4473      	add	r3, lr
 800b652:	469e      	mov	lr, r3
 800b654:	460d      	mov	r5, r1
 800b656:	4565      	cmp	r5, ip
 800b658:	d30e      	bcc.n	800b678 <__mdiff+0xe8>
 800b65a:	f10c 0203 	add.w	r2, ip, #3
 800b65e:	1a52      	subs	r2, r2, r1
 800b660:	f022 0203 	bic.w	r2, r2, #3
 800b664:	3903      	subs	r1, #3
 800b666:	458c      	cmp	ip, r1
 800b668:	bf38      	it	cc
 800b66a:	2200      	movcc	r2, #0
 800b66c:	441a      	add	r2, r3
 800b66e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b672:	b17b      	cbz	r3, 800b694 <__mdiff+0x104>
 800b674:	6106      	str	r6, [r0, #16]
 800b676:	e7a5      	b.n	800b5c4 <__mdiff+0x34>
 800b678:	f855 8b04 	ldr.w	r8, [r5], #4
 800b67c:	fa17 f488 	uxtah	r4, r7, r8
 800b680:	1422      	asrs	r2, r4, #16
 800b682:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800b686:	b2a4      	uxth	r4, r4
 800b688:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800b68c:	f84e 4b04 	str.w	r4, [lr], #4
 800b690:	1417      	asrs	r7, r2, #16
 800b692:	e7e0      	b.n	800b656 <__mdiff+0xc6>
 800b694:	3e01      	subs	r6, #1
 800b696:	e7ea      	b.n	800b66e <__mdiff+0xde>
 800b698:	08013d77 	.word	0x08013d77
 800b69c:	08013de8 	.word	0x08013de8

0800b6a0 <__d2b>:
 800b6a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b6a4:	4689      	mov	r9, r1
 800b6a6:	2101      	movs	r1, #1
 800b6a8:	ec57 6b10 	vmov	r6, r7, d0
 800b6ac:	4690      	mov	r8, r2
 800b6ae:	f7ff fcd5 	bl	800b05c <_Balloc>
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	b930      	cbnz	r0, 800b6c4 <__d2b+0x24>
 800b6b6:	4602      	mov	r2, r0
 800b6b8:	4b25      	ldr	r3, [pc, #148]	; (800b750 <__d2b+0xb0>)
 800b6ba:	4826      	ldr	r0, [pc, #152]	; (800b754 <__d2b+0xb4>)
 800b6bc:	f240 310a 	movw	r1, #778	; 0x30a
 800b6c0:	f000 fb64 	bl	800bd8c <__assert_func>
 800b6c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b6c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b6cc:	bb35      	cbnz	r5, 800b71c <__d2b+0x7c>
 800b6ce:	2e00      	cmp	r6, #0
 800b6d0:	9301      	str	r3, [sp, #4]
 800b6d2:	d028      	beq.n	800b726 <__d2b+0x86>
 800b6d4:	4668      	mov	r0, sp
 800b6d6:	9600      	str	r6, [sp, #0]
 800b6d8:	f7ff fd8c 	bl	800b1f4 <__lo0bits>
 800b6dc:	9900      	ldr	r1, [sp, #0]
 800b6de:	b300      	cbz	r0, 800b722 <__d2b+0x82>
 800b6e0:	9a01      	ldr	r2, [sp, #4]
 800b6e2:	f1c0 0320 	rsb	r3, r0, #32
 800b6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6ea:	430b      	orrs	r3, r1
 800b6ec:	40c2      	lsrs	r2, r0
 800b6ee:	6163      	str	r3, [r4, #20]
 800b6f0:	9201      	str	r2, [sp, #4]
 800b6f2:	9b01      	ldr	r3, [sp, #4]
 800b6f4:	61a3      	str	r3, [r4, #24]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	bf14      	ite	ne
 800b6fa:	2202      	movne	r2, #2
 800b6fc:	2201      	moveq	r2, #1
 800b6fe:	6122      	str	r2, [r4, #16]
 800b700:	b1d5      	cbz	r5, 800b738 <__d2b+0x98>
 800b702:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b706:	4405      	add	r5, r0
 800b708:	f8c9 5000 	str.w	r5, [r9]
 800b70c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b710:	f8c8 0000 	str.w	r0, [r8]
 800b714:	4620      	mov	r0, r4
 800b716:	b003      	add	sp, #12
 800b718:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b71c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b720:	e7d5      	b.n	800b6ce <__d2b+0x2e>
 800b722:	6161      	str	r1, [r4, #20]
 800b724:	e7e5      	b.n	800b6f2 <__d2b+0x52>
 800b726:	a801      	add	r0, sp, #4
 800b728:	f7ff fd64 	bl	800b1f4 <__lo0bits>
 800b72c:	9b01      	ldr	r3, [sp, #4]
 800b72e:	6163      	str	r3, [r4, #20]
 800b730:	2201      	movs	r2, #1
 800b732:	6122      	str	r2, [r4, #16]
 800b734:	3020      	adds	r0, #32
 800b736:	e7e3      	b.n	800b700 <__d2b+0x60>
 800b738:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b73c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b740:	f8c9 0000 	str.w	r0, [r9]
 800b744:	6918      	ldr	r0, [r3, #16]
 800b746:	f7ff fd35 	bl	800b1b4 <__hi0bits>
 800b74a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b74e:	e7df      	b.n	800b710 <__d2b+0x70>
 800b750:	08013d77 	.word	0x08013d77
 800b754:	08013de8 	.word	0x08013de8

0800b758 <_calloc_r>:
 800b758:	b513      	push	{r0, r1, r4, lr}
 800b75a:	434a      	muls	r2, r1
 800b75c:	4611      	mov	r1, r2
 800b75e:	9201      	str	r2, [sp, #4]
 800b760:	f7fd fd46 	bl	80091f0 <_malloc_r>
 800b764:	4604      	mov	r4, r0
 800b766:	b118      	cbz	r0, 800b770 <_calloc_r+0x18>
 800b768:	9a01      	ldr	r2, [sp, #4]
 800b76a:	2100      	movs	r1, #0
 800b76c:	f7fd fce8 	bl	8009140 <memset>
 800b770:	4620      	mov	r0, r4
 800b772:	b002      	add	sp, #8
 800b774:	bd10      	pop	{r4, pc}

0800b776 <__ssputs_r>:
 800b776:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b77a:	688e      	ldr	r6, [r1, #8]
 800b77c:	429e      	cmp	r6, r3
 800b77e:	4682      	mov	sl, r0
 800b780:	460c      	mov	r4, r1
 800b782:	4690      	mov	r8, r2
 800b784:	461f      	mov	r7, r3
 800b786:	d838      	bhi.n	800b7fa <__ssputs_r+0x84>
 800b788:	898a      	ldrh	r2, [r1, #12]
 800b78a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b78e:	d032      	beq.n	800b7f6 <__ssputs_r+0x80>
 800b790:	6825      	ldr	r5, [r4, #0]
 800b792:	6909      	ldr	r1, [r1, #16]
 800b794:	eba5 0901 	sub.w	r9, r5, r1
 800b798:	6965      	ldr	r5, [r4, #20]
 800b79a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b79e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7a2:	3301      	adds	r3, #1
 800b7a4:	444b      	add	r3, r9
 800b7a6:	106d      	asrs	r5, r5, #1
 800b7a8:	429d      	cmp	r5, r3
 800b7aa:	bf38      	it	cc
 800b7ac:	461d      	movcc	r5, r3
 800b7ae:	0553      	lsls	r3, r2, #21
 800b7b0:	d531      	bpl.n	800b816 <__ssputs_r+0xa0>
 800b7b2:	4629      	mov	r1, r5
 800b7b4:	f7fd fd1c 	bl	80091f0 <_malloc_r>
 800b7b8:	4606      	mov	r6, r0
 800b7ba:	b950      	cbnz	r0, 800b7d2 <__ssputs_r+0x5c>
 800b7bc:	230c      	movs	r3, #12
 800b7be:	f8ca 3000 	str.w	r3, [sl]
 800b7c2:	89a3      	ldrh	r3, [r4, #12]
 800b7c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7c8:	81a3      	strh	r3, [r4, #12]
 800b7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800b7ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7d2:	6921      	ldr	r1, [r4, #16]
 800b7d4:	464a      	mov	r2, r9
 800b7d6:	f7ff fc27 	bl	800b028 <memcpy>
 800b7da:	89a3      	ldrh	r3, [r4, #12]
 800b7dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7e4:	81a3      	strh	r3, [r4, #12]
 800b7e6:	6126      	str	r6, [r4, #16]
 800b7e8:	6165      	str	r5, [r4, #20]
 800b7ea:	444e      	add	r6, r9
 800b7ec:	eba5 0509 	sub.w	r5, r5, r9
 800b7f0:	6026      	str	r6, [r4, #0]
 800b7f2:	60a5      	str	r5, [r4, #8]
 800b7f4:	463e      	mov	r6, r7
 800b7f6:	42be      	cmp	r6, r7
 800b7f8:	d900      	bls.n	800b7fc <__ssputs_r+0x86>
 800b7fa:	463e      	mov	r6, r7
 800b7fc:	4632      	mov	r2, r6
 800b7fe:	6820      	ldr	r0, [r4, #0]
 800b800:	4641      	mov	r1, r8
 800b802:	f000 fb49 	bl	800be98 <memmove>
 800b806:	68a3      	ldr	r3, [r4, #8]
 800b808:	6822      	ldr	r2, [r4, #0]
 800b80a:	1b9b      	subs	r3, r3, r6
 800b80c:	4432      	add	r2, r6
 800b80e:	60a3      	str	r3, [r4, #8]
 800b810:	6022      	str	r2, [r4, #0]
 800b812:	2000      	movs	r0, #0
 800b814:	e7db      	b.n	800b7ce <__ssputs_r+0x58>
 800b816:	462a      	mov	r2, r5
 800b818:	f000 fb58 	bl	800becc <_realloc_r>
 800b81c:	4606      	mov	r6, r0
 800b81e:	2800      	cmp	r0, #0
 800b820:	d1e1      	bne.n	800b7e6 <__ssputs_r+0x70>
 800b822:	6921      	ldr	r1, [r4, #16]
 800b824:	4650      	mov	r0, sl
 800b826:	f7fd fc93 	bl	8009150 <_free_r>
 800b82a:	e7c7      	b.n	800b7bc <__ssputs_r+0x46>

0800b82c <_svfiprintf_r>:
 800b82c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b830:	4698      	mov	r8, r3
 800b832:	898b      	ldrh	r3, [r1, #12]
 800b834:	061b      	lsls	r3, r3, #24
 800b836:	b09d      	sub	sp, #116	; 0x74
 800b838:	4607      	mov	r7, r0
 800b83a:	460d      	mov	r5, r1
 800b83c:	4614      	mov	r4, r2
 800b83e:	d50e      	bpl.n	800b85e <_svfiprintf_r+0x32>
 800b840:	690b      	ldr	r3, [r1, #16]
 800b842:	b963      	cbnz	r3, 800b85e <_svfiprintf_r+0x32>
 800b844:	2140      	movs	r1, #64	; 0x40
 800b846:	f7fd fcd3 	bl	80091f0 <_malloc_r>
 800b84a:	6028      	str	r0, [r5, #0]
 800b84c:	6128      	str	r0, [r5, #16]
 800b84e:	b920      	cbnz	r0, 800b85a <_svfiprintf_r+0x2e>
 800b850:	230c      	movs	r3, #12
 800b852:	603b      	str	r3, [r7, #0]
 800b854:	f04f 30ff 	mov.w	r0, #4294967295
 800b858:	e0d1      	b.n	800b9fe <_svfiprintf_r+0x1d2>
 800b85a:	2340      	movs	r3, #64	; 0x40
 800b85c:	616b      	str	r3, [r5, #20]
 800b85e:	2300      	movs	r3, #0
 800b860:	9309      	str	r3, [sp, #36]	; 0x24
 800b862:	2320      	movs	r3, #32
 800b864:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b868:	f8cd 800c 	str.w	r8, [sp, #12]
 800b86c:	2330      	movs	r3, #48	; 0x30
 800b86e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba18 <_svfiprintf_r+0x1ec>
 800b872:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b876:	f04f 0901 	mov.w	r9, #1
 800b87a:	4623      	mov	r3, r4
 800b87c:	469a      	mov	sl, r3
 800b87e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b882:	b10a      	cbz	r2, 800b888 <_svfiprintf_r+0x5c>
 800b884:	2a25      	cmp	r2, #37	; 0x25
 800b886:	d1f9      	bne.n	800b87c <_svfiprintf_r+0x50>
 800b888:	ebba 0b04 	subs.w	fp, sl, r4
 800b88c:	d00b      	beq.n	800b8a6 <_svfiprintf_r+0x7a>
 800b88e:	465b      	mov	r3, fp
 800b890:	4622      	mov	r2, r4
 800b892:	4629      	mov	r1, r5
 800b894:	4638      	mov	r0, r7
 800b896:	f7ff ff6e 	bl	800b776 <__ssputs_r>
 800b89a:	3001      	adds	r0, #1
 800b89c:	f000 80aa 	beq.w	800b9f4 <_svfiprintf_r+0x1c8>
 800b8a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8a2:	445a      	add	r2, fp
 800b8a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b8a6:	f89a 3000 	ldrb.w	r3, [sl]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	f000 80a2 	beq.w	800b9f4 <_svfiprintf_r+0x1c8>
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	f04f 32ff 	mov.w	r2, #4294967295
 800b8b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8ba:	f10a 0a01 	add.w	sl, sl, #1
 800b8be:	9304      	str	r3, [sp, #16]
 800b8c0:	9307      	str	r3, [sp, #28]
 800b8c2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8c6:	931a      	str	r3, [sp, #104]	; 0x68
 800b8c8:	4654      	mov	r4, sl
 800b8ca:	2205      	movs	r2, #5
 800b8cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8d0:	4851      	ldr	r0, [pc, #324]	; (800ba18 <_svfiprintf_r+0x1ec>)
 800b8d2:	f7f4 fcb5 	bl	8000240 <memchr>
 800b8d6:	9a04      	ldr	r2, [sp, #16]
 800b8d8:	b9d8      	cbnz	r0, 800b912 <_svfiprintf_r+0xe6>
 800b8da:	06d0      	lsls	r0, r2, #27
 800b8dc:	bf44      	itt	mi
 800b8de:	2320      	movmi	r3, #32
 800b8e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8e4:	0711      	lsls	r1, r2, #28
 800b8e6:	bf44      	itt	mi
 800b8e8:	232b      	movmi	r3, #43	; 0x2b
 800b8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b8f2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8f4:	d015      	beq.n	800b922 <_svfiprintf_r+0xf6>
 800b8f6:	9a07      	ldr	r2, [sp, #28]
 800b8f8:	4654      	mov	r4, sl
 800b8fa:	2000      	movs	r0, #0
 800b8fc:	f04f 0c0a 	mov.w	ip, #10
 800b900:	4621      	mov	r1, r4
 800b902:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b906:	3b30      	subs	r3, #48	; 0x30
 800b908:	2b09      	cmp	r3, #9
 800b90a:	d94e      	bls.n	800b9aa <_svfiprintf_r+0x17e>
 800b90c:	b1b0      	cbz	r0, 800b93c <_svfiprintf_r+0x110>
 800b90e:	9207      	str	r2, [sp, #28]
 800b910:	e014      	b.n	800b93c <_svfiprintf_r+0x110>
 800b912:	eba0 0308 	sub.w	r3, r0, r8
 800b916:	fa09 f303 	lsl.w	r3, r9, r3
 800b91a:	4313      	orrs	r3, r2
 800b91c:	9304      	str	r3, [sp, #16]
 800b91e:	46a2      	mov	sl, r4
 800b920:	e7d2      	b.n	800b8c8 <_svfiprintf_r+0x9c>
 800b922:	9b03      	ldr	r3, [sp, #12]
 800b924:	1d19      	adds	r1, r3, #4
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	9103      	str	r1, [sp, #12]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	bfbb      	ittet	lt
 800b92e:	425b      	neglt	r3, r3
 800b930:	f042 0202 	orrlt.w	r2, r2, #2
 800b934:	9307      	strge	r3, [sp, #28]
 800b936:	9307      	strlt	r3, [sp, #28]
 800b938:	bfb8      	it	lt
 800b93a:	9204      	strlt	r2, [sp, #16]
 800b93c:	7823      	ldrb	r3, [r4, #0]
 800b93e:	2b2e      	cmp	r3, #46	; 0x2e
 800b940:	d10c      	bne.n	800b95c <_svfiprintf_r+0x130>
 800b942:	7863      	ldrb	r3, [r4, #1]
 800b944:	2b2a      	cmp	r3, #42	; 0x2a
 800b946:	d135      	bne.n	800b9b4 <_svfiprintf_r+0x188>
 800b948:	9b03      	ldr	r3, [sp, #12]
 800b94a:	1d1a      	adds	r2, r3, #4
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	9203      	str	r2, [sp, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	bfb8      	it	lt
 800b954:	f04f 33ff 	movlt.w	r3, #4294967295
 800b958:	3402      	adds	r4, #2
 800b95a:	9305      	str	r3, [sp, #20]
 800b95c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba28 <_svfiprintf_r+0x1fc>
 800b960:	7821      	ldrb	r1, [r4, #0]
 800b962:	2203      	movs	r2, #3
 800b964:	4650      	mov	r0, sl
 800b966:	f7f4 fc6b 	bl	8000240 <memchr>
 800b96a:	b140      	cbz	r0, 800b97e <_svfiprintf_r+0x152>
 800b96c:	2340      	movs	r3, #64	; 0x40
 800b96e:	eba0 000a 	sub.w	r0, r0, sl
 800b972:	fa03 f000 	lsl.w	r0, r3, r0
 800b976:	9b04      	ldr	r3, [sp, #16]
 800b978:	4303      	orrs	r3, r0
 800b97a:	3401      	adds	r4, #1
 800b97c:	9304      	str	r3, [sp, #16]
 800b97e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b982:	4826      	ldr	r0, [pc, #152]	; (800ba1c <_svfiprintf_r+0x1f0>)
 800b984:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b988:	2206      	movs	r2, #6
 800b98a:	f7f4 fc59 	bl	8000240 <memchr>
 800b98e:	2800      	cmp	r0, #0
 800b990:	d038      	beq.n	800ba04 <_svfiprintf_r+0x1d8>
 800b992:	4b23      	ldr	r3, [pc, #140]	; (800ba20 <_svfiprintf_r+0x1f4>)
 800b994:	bb1b      	cbnz	r3, 800b9de <_svfiprintf_r+0x1b2>
 800b996:	9b03      	ldr	r3, [sp, #12]
 800b998:	3307      	adds	r3, #7
 800b99a:	f023 0307 	bic.w	r3, r3, #7
 800b99e:	3308      	adds	r3, #8
 800b9a0:	9303      	str	r3, [sp, #12]
 800b9a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9a4:	4433      	add	r3, r6
 800b9a6:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a8:	e767      	b.n	800b87a <_svfiprintf_r+0x4e>
 800b9aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	2001      	movs	r0, #1
 800b9b2:	e7a5      	b.n	800b900 <_svfiprintf_r+0xd4>
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	3401      	adds	r4, #1
 800b9b8:	9305      	str	r3, [sp, #20]
 800b9ba:	4619      	mov	r1, r3
 800b9bc:	f04f 0c0a 	mov.w	ip, #10
 800b9c0:	4620      	mov	r0, r4
 800b9c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9c6:	3a30      	subs	r2, #48	; 0x30
 800b9c8:	2a09      	cmp	r2, #9
 800b9ca:	d903      	bls.n	800b9d4 <_svfiprintf_r+0x1a8>
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d0c5      	beq.n	800b95c <_svfiprintf_r+0x130>
 800b9d0:	9105      	str	r1, [sp, #20]
 800b9d2:	e7c3      	b.n	800b95c <_svfiprintf_r+0x130>
 800b9d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9d8:	4604      	mov	r4, r0
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e7f0      	b.n	800b9c0 <_svfiprintf_r+0x194>
 800b9de:	ab03      	add	r3, sp, #12
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	462a      	mov	r2, r5
 800b9e4:	4b0f      	ldr	r3, [pc, #60]	; (800ba24 <_svfiprintf_r+0x1f8>)
 800b9e6:	a904      	add	r1, sp, #16
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	f7fd fcfb 	bl	80093e4 <_printf_float>
 800b9ee:	1c42      	adds	r2, r0, #1
 800b9f0:	4606      	mov	r6, r0
 800b9f2:	d1d6      	bne.n	800b9a2 <_svfiprintf_r+0x176>
 800b9f4:	89ab      	ldrh	r3, [r5, #12]
 800b9f6:	065b      	lsls	r3, r3, #25
 800b9f8:	f53f af2c 	bmi.w	800b854 <_svfiprintf_r+0x28>
 800b9fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9fe:	b01d      	add	sp, #116	; 0x74
 800ba00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba04:	ab03      	add	r3, sp, #12
 800ba06:	9300      	str	r3, [sp, #0]
 800ba08:	462a      	mov	r2, r5
 800ba0a:	4b06      	ldr	r3, [pc, #24]	; (800ba24 <_svfiprintf_r+0x1f8>)
 800ba0c:	a904      	add	r1, sp, #16
 800ba0e:	4638      	mov	r0, r7
 800ba10:	f7fd ff8c 	bl	800992c <_printf_i>
 800ba14:	e7eb      	b.n	800b9ee <_svfiprintf_r+0x1c2>
 800ba16:	bf00      	nop
 800ba18:	08013f44 	.word	0x08013f44
 800ba1c:	08013f4e 	.word	0x08013f4e
 800ba20:	080093e5 	.word	0x080093e5
 800ba24:	0800b777 	.word	0x0800b777
 800ba28:	08013f4a 	.word	0x08013f4a

0800ba2c <__sfputc_r>:
 800ba2c:	6893      	ldr	r3, [r2, #8]
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	b410      	push	{r4}
 800ba34:	6093      	str	r3, [r2, #8]
 800ba36:	da08      	bge.n	800ba4a <__sfputc_r+0x1e>
 800ba38:	6994      	ldr	r4, [r2, #24]
 800ba3a:	42a3      	cmp	r3, r4
 800ba3c:	db01      	blt.n	800ba42 <__sfputc_r+0x16>
 800ba3e:	290a      	cmp	r1, #10
 800ba40:	d103      	bne.n	800ba4a <__sfputc_r+0x1e>
 800ba42:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba46:	f7fe b991 	b.w	8009d6c <__swbuf_r>
 800ba4a:	6813      	ldr	r3, [r2, #0]
 800ba4c:	1c58      	adds	r0, r3, #1
 800ba4e:	6010      	str	r0, [r2, #0]
 800ba50:	7019      	strb	r1, [r3, #0]
 800ba52:	4608      	mov	r0, r1
 800ba54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <__sfputs_r>:
 800ba5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba5c:	4606      	mov	r6, r0
 800ba5e:	460f      	mov	r7, r1
 800ba60:	4614      	mov	r4, r2
 800ba62:	18d5      	adds	r5, r2, r3
 800ba64:	42ac      	cmp	r4, r5
 800ba66:	d101      	bne.n	800ba6c <__sfputs_r+0x12>
 800ba68:	2000      	movs	r0, #0
 800ba6a:	e007      	b.n	800ba7c <__sfputs_r+0x22>
 800ba6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba70:	463a      	mov	r2, r7
 800ba72:	4630      	mov	r0, r6
 800ba74:	f7ff ffda 	bl	800ba2c <__sfputc_r>
 800ba78:	1c43      	adds	r3, r0, #1
 800ba7a:	d1f3      	bne.n	800ba64 <__sfputs_r+0xa>
 800ba7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ba80 <_vfiprintf_r>:
 800ba80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba84:	460d      	mov	r5, r1
 800ba86:	b09d      	sub	sp, #116	; 0x74
 800ba88:	4614      	mov	r4, r2
 800ba8a:	4698      	mov	r8, r3
 800ba8c:	4606      	mov	r6, r0
 800ba8e:	b118      	cbz	r0, 800ba98 <_vfiprintf_r+0x18>
 800ba90:	6983      	ldr	r3, [r0, #24]
 800ba92:	b90b      	cbnz	r3, 800ba98 <_vfiprintf_r+0x18>
 800ba94:	f7ff f9be 	bl	800ae14 <__sinit>
 800ba98:	4b89      	ldr	r3, [pc, #548]	; (800bcc0 <_vfiprintf_r+0x240>)
 800ba9a:	429d      	cmp	r5, r3
 800ba9c:	d11b      	bne.n	800bad6 <_vfiprintf_r+0x56>
 800ba9e:	6875      	ldr	r5, [r6, #4]
 800baa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800baa2:	07d9      	lsls	r1, r3, #31
 800baa4:	d405      	bmi.n	800bab2 <_vfiprintf_r+0x32>
 800baa6:	89ab      	ldrh	r3, [r5, #12]
 800baa8:	059a      	lsls	r2, r3, #22
 800baaa:	d402      	bmi.n	800bab2 <_vfiprintf_r+0x32>
 800baac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baae:	f7ff fa54 	bl	800af5a <__retarget_lock_acquire_recursive>
 800bab2:	89ab      	ldrh	r3, [r5, #12]
 800bab4:	071b      	lsls	r3, r3, #28
 800bab6:	d501      	bpl.n	800babc <_vfiprintf_r+0x3c>
 800bab8:	692b      	ldr	r3, [r5, #16]
 800baba:	b9eb      	cbnz	r3, 800baf8 <_vfiprintf_r+0x78>
 800babc:	4629      	mov	r1, r5
 800babe:	4630      	mov	r0, r6
 800bac0:	f7fe f9a6 	bl	8009e10 <__swsetup_r>
 800bac4:	b1c0      	cbz	r0, 800baf8 <_vfiprintf_r+0x78>
 800bac6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bac8:	07dc      	lsls	r4, r3, #31
 800baca:	d50e      	bpl.n	800baea <_vfiprintf_r+0x6a>
 800bacc:	f04f 30ff 	mov.w	r0, #4294967295
 800bad0:	b01d      	add	sp, #116	; 0x74
 800bad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bad6:	4b7b      	ldr	r3, [pc, #492]	; (800bcc4 <_vfiprintf_r+0x244>)
 800bad8:	429d      	cmp	r5, r3
 800bada:	d101      	bne.n	800bae0 <_vfiprintf_r+0x60>
 800badc:	68b5      	ldr	r5, [r6, #8]
 800bade:	e7df      	b.n	800baa0 <_vfiprintf_r+0x20>
 800bae0:	4b79      	ldr	r3, [pc, #484]	; (800bcc8 <_vfiprintf_r+0x248>)
 800bae2:	429d      	cmp	r5, r3
 800bae4:	bf08      	it	eq
 800bae6:	68f5      	ldreq	r5, [r6, #12]
 800bae8:	e7da      	b.n	800baa0 <_vfiprintf_r+0x20>
 800baea:	89ab      	ldrh	r3, [r5, #12]
 800baec:	0598      	lsls	r0, r3, #22
 800baee:	d4ed      	bmi.n	800bacc <_vfiprintf_r+0x4c>
 800baf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800baf2:	f7ff fa33 	bl	800af5c <__retarget_lock_release_recursive>
 800baf6:	e7e9      	b.n	800bacc <_vfiprintf_r+0x4c>
 800baf8:	2300      	movs	r3, #0
 800bafa:	9309      	str	r3, [sp, #36]	; 0x24
 800bafc:	2320      	movs	r3, #32
 800bafe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb02:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb06:	2330      	movs	r3, #48	; 0x30
 800bb08:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bccc <_vfiprintf_r+0x24c>
 800bb0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb10:	f04f 0901 	mov.w	r9, #1
 800bb14:	4623      	mov	r3, r4
 800bb16:	469a      	mov	sl, r3
 800bb18:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb1c:	b10a      	cbz	r2, 800bb22 <_vfiprintf_r+0xa2>
 800bb1e:	2a25      	cmp	r2, #37	; 0x25
 800bb20:	d1f9      	bne.n	800bb16 <_vfiprintf_r+0x96>
 800bb22:	ebba 0b04 	subs.w	fp, sl, r4
 800bb26:	d00b      	beq.n	800bb40 <_vfiprintf_r+0xc0>
 800bb28:	465b      	mov	r3, fp
 800bb2a:	4622      	mov	r2, r4
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	4630      	mov	r0, r6
 800bb30:	f7ff ff93 	bl	800ba5a <__sfputs_r>
 800bb34:	3001      	adds	r0, #1
 800bb36:	f000 80aa 	beq.w	800bc8e <_vfiprintf_r+0x20e>
 800bb3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb3c:	445a      	add	r2, fp
 800bb3e:	9209      	str	r2, [sp, #36]	; 0x24
 800bb40:	f89a 3000 	ldrb.w	r3, [sl]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f000 80a2 	beq.w	800bc8e <_vfiprintf_r+0x20e>
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	f04f 32ff 	mov.w	r2, #4294967295
 800bb50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb54:	f10a 0a01 	add.w	sl, sl, #1
 800bb58:	9304      	str	r3, [sp, #16]
 800bb5a:	9307      	str	r3, [sp, #28]
 800bb5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bb60:	931a      	str	r3, [sp, #104]	; 0x68
 800bb62:	4654      	mov	r4, sl
 800bb64:	2205      	movs	r2, #5
 800bb66:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb6a:	4858      	ldr	r0, [pc, #352]	; (800bccc <_vfiprintf_r+0x24c>)
 800bb6c:	f7f4 fb68 	bl	8000240 <memchr>
 800bb70:	9a04      	ldr	r2, [sp, #16]
 800bb72:	b9d8      	cbnz	r0, 800bbac <_vfiprintf_r+0x12c>
 800bb74:	06d1      	lsls	r1, r2, #27
 800bb76:	bf44      	itt	mi
 800bb78:	2320      	movmi	r3, #32
 800bb7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb7e:	0713      	lsls	r3, r2, #28
 800bb80:	bf44      	itt	mi
 800bb82:	232b      	movmi	r3, #43	; 0x2b
 800bb84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bb88:	f89a 3000 	ldrb.w	r3, [sl]
 800bb8c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb8e:	d015      	beq.n	800bbbc <_vfiprintf_r+0x13c>
 800bb90:	9a07      	ldr	r2, [sp, #28]
 800bb92:	4654      	mov	r4, sl
 800bb94:	2000      	movs	r0, #0
 800bb96:	f04f 0c0a 	mov.w	ip, #10
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bba0:	3b30      	subs	r3, #48	; 0x30
 800bba2:	2b09      	cmp	r3, #9
 800bba4:	d94e      	bls.n	800bc44 <_vfiprintf_r+0x1c4>
 800bba6:	b1b0      	cbz	r0, 800bbd6 <_vfiprintf_r+0x156>
 800bba8:	9207      	str	r2, [sp, #28]
 800bbaa:	e014      	b.n	800bbd6 <_vfiprintf_r+0x156>
 800bbac:	eba0 0308 	sub.w	r3, r0, r8
 800bbb0:	fa09 f303 	lsl.w	r3, r9, r3
 800bbb4:	4313      	orrs	r3, r2
 800bbb6:	9304      	str	r3, [sp, #16]
 800bbb8:	46a2      	mov	sl, r4
 800bbba:	e7d2      	b.n	800bb62 <_vfiprintf_r+0xe2>
 800bbbc:	9b03      	ldr	r3, [sp, #12]
 800bbbe:	1d19      	adds	r1, r3, #4
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	9103      	str	r1, [sp, #12]
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	bfbb      	ittet	lt
 800bbc8:	425b      	neglt	r3, r3
 800bbca:	f042 0202 	orrlt.w	r2, r2, #2
 800bbce:	9307      	strge	r3, [sp, #28]
 800bbd0:	9307      	strlt	r3, [sp, #28]
 800bbd2:	bfb8      	it	lt
 800bbd4:	9204      	strlt	r2, [sp, #16]
 800bbd6:	7823      	ldrb	r3, [r4, #0]
 800bbd8:	2b2e      	cmp	r3, #46	; 0x2e
 800bbda:	d10c      	bne.n	800bbf6 <_vfiprintf_r+0x176>
 800bbdc:	7863      	ldrb	r3, [r4, #1]
 800bbde:	2b2a      	cmp	r3, #42	; 0x2a
 800bbe0:	d135      	bne.n	800bc4e <_vfiprintf_r+0x1ce>
 800bbe2:	9b03      	ldr	r3, [sp, #12]
 800bbe4:	1d1a      	adds	r2, r3, #4
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	9203      	str	r2, [sp, #12]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	bfb8      	it	lt
 800bbee:	f04f 33ff 	movlt.w	r3, #4294967295
 800bbf2:	3402      	adds	r4, #2
 800bbf4:	9305      	str	r3, [sp, #20]
 800bbf6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bcdc <_vfiprintf_r+0x25c>
 800bbfa:	7821      	ldrb	r1, [r4, #0]
 800bbfc:	2203      	movs	r2, #3
 800bbfe:	4650      	mov	r0, sl
 800bc00:	f7f4 fb1e 	bl	8000240 <memchr>
 800bc04:	b140      	cbz	r0, 800bc18 <_vfiprintf_r+0x198>
 800bc06:	2340      	movs	r3, #64	; 0x40
 800bc08:	eba0 000a 	sub.w	r0, r0, sl
 800bc0c:	fa03 f000 	lsl.w	r0, r3, r0
 800bc10:	9b04      	ldr	r3, [sp, #16]
 800bc12:	4303      	orrs	r3, r0
 800bc14:	3401      	adds	r4, #1
 800bc16:	9304      	str	r3, [sp, #16]
 800bc18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc1c:	482c      	ldr	r0, [pc, #176]	; (800bcd0 <_vfiprintf_r+0x250>)
 800bc1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc22:	2206      	movs	r2, #6
 800bc24:	f7f4 fb0c 	bl	8000240 <memchr>
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	d03f      	beq.n	800bcac <_vfiprintf_r+0x22c>
 800bc2c:	4b29      	ldr	r3, [pc, #164]	; (800bcd4 <_vfiprintf_r+0x254>)
 800bc2e:	bb1b      	cbnz	r3, 800bc78 <_vfiprintf_r+0x1f8>
 800bc30:	9b03      	ldr	r3, [sp, #12]
 800bc32:	3307      	adds	r3, #7
 800bc34:	f023 0307 	bic.w	r3, r3, #7
 800bc38:	3308      	adds	r3, #8
 800bc3a:	9303      	str	r3, [sp, #12]
 800bc3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc3e:	443b      	add	r3, r7
 800bc40:	9309      	str	r3, [sp, #36]	; 0x24
 800bc42:	e767      	b.n	800bb14 <_vfiprintf_r+0x94>
 800bc44:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc48:	460c      	mov	r4, r1
 800bc4a:	2001      	movs	r0, #1
 800bc4c:	e7a5      	b.n	800bb9a <_vfiprintf_r+0x11a>
 800bc4e:	2300      	movs	r3, #0
 800bc50:	3401      	adds	r4, #1
 800bc52:	9305      	str	r3, [sp, #20]
 800bc54:	4619      	mov	r1, r3
 800bc56:	f04f 0c0a 	mov.w	ip, #10
 800bc5a:	4620      	mov	r0, r4
 800bc5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc60:	3a30      	subs	r2, #48	; 0x30
 800bc62:	2a09      	cmp	r2, #9
 800bc64:	d903      	bls.n	800bc6e <_vfiprintf_r+0x1ee>
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	d0c5      	beq.n	800bbf6 <_vfiprintf_r+0x176>
 800bc6a:	9105      	str	r1, [sp, #20]
 800bc6c:	e7c3      	b.n	800bbf6 <_vfiprintf_r+0x176>
 800bc6e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc72:	4604      	mov	r4, r0
 800bc74:	2301      	movs	r3, #1
 800bc76:	e7f0      	b.n	800bc5a <_vfiprintf_r+0x1da>
 800bc78:	ab03      	add	r3, sp, #12
 800bc7a:	9300      	str	r3, [sp, #0]
 800bc7c:	462a      	mov	r2, r5
 800bc7e:	4b16      	ldr	r3, [pc, #88]	; (800bcd8 <_vfiprintf_r+0x258>)
 800bc80:	a904      	add	r1, sp, #16
 800bc82:	4630      	mov	r0, r6
 800bc84:	f7fd fbae 	bl	80093e4 <_printf_float>
 800bc88:	4607      	mov	r7, r0
 800bc8a:	1c78      	adds	r0, r7, #1
 800bc8c:	d1d6      	bne.n	800bc3c <_vfiprintf_r+0x1bc>
 800bc8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bc90:	07d9      	lsls	r1, r3, #31
 800bc92:	d405      	bmi.n	800bca0 <_vfiprintf_r+0x220>
 800bc94:	89ab      	ldrh	r3, [r5, #12]
 800bc96:	059a      	lsls	r2, r3, #22
 800bc98:	d402      	bmi.n	800bca0 <_vfiprintf_r+0x220>
 800bc9a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bc9c:	f7ff f95e 	bl	800af5c <__retarget_lock_release_recursive>
 800bca0:	89ab      	ldrh	r3, [r5, #12]
 800bca2:	065b      	lsls	r3, r3, #25
 800bca4:	f53f af12 	bmi.w	800bacc <_vfiprintf_r+0x4c>
 800bca8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcaa:	e711      	b.n	800bad0 <_vfiprintf_r+0x50>
 800bcac:	ab03      	add	r3, sp, #12
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	462a      	mov	r2, r5
 800bcb2:	4b09      	ldr	r3, [pc, #36]	; (800bcd8 <_vfiprintf_r+0x258>)
 800bcb4:	a904      	add	r1, sp, #16
 800bcb6:	4630      	mov	r0, r6
 800bcb8:	f7fd fe38 	bl	800992c <_printf_i>
 800bcbc:	e7e4      	b.n	800bc88 <_vfiprintf_r+0x208>
 800bcbe:	bf00      	nop
 800bcc0:	08013da8 	.word	0x08013da8
 800bcc4:	08013dc8 	.word	0x08013dc8
 800bcc8:	08013d88 	.word	0x08013d88
 800bccc:	08013f44 	.word	0x08013f44
 800bcd0:	08013f4e 	.word	0x08013f4e
 800bcd4:	080093e5 	.word	0x080093e5
 800bcd8:	0800ba5b 	.word	0x0800ba5b
 800bcdc:	08013f4a 	.word	0x08013f4a

0800bce0 <__sread>:
 800bce0:	b510      	push	{r4, lr}
 800bce2:	460c      	mov	r4, r1
 800bce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bce8:	f000 f916 	bl	800bf18 <_read_r>
 800bcec:	2800      	cmp	r0, #0
 800bcee:	bfab      	itete	ge
 800bcf0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bcf2:	89a3      	ldrhlt	r3, [r4, #12]
 800bcf4:	181b      	addge	r3, r3, r0
 800bcf6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bcfa:	bfac      	ite	ge
 800bcfc:	6563      	strge	r3, [r4, #84]	; 0x54
 800bcfe:	81a3      	strhlt	r3, [r4, #12]
 800bd00:	bd10      	pop	{r4, pc}

0800bd02 <__swrite>:
 800bd02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd06:	461f      	mov	r7, r3
 800bd08:	898b      	ldrh	r3, [r1, #12]
 800bd0a:	05db      	lsls	r3, r3, #23
 800bd0c:	4605      	mov	r5, r0
 800bd0e:	460c      	mov	r4, r1
 800bd10:	4616      	mov	r6, r2
 800bd12:	d505      	bpl.n	800bd20 <__swrite+0x1e>
 800bd14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd18:	2302      	movs	r3, #2
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	f000 f898 	bl	800be50 <_lseek_r>
 800bd20:	89a3      	ldrh	r3, [r4, #12]
 800bd22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bd2a:	81a3      	strh	r3, [r4, #12]
 800bd2c:	4632      	mov	r2, r6
 800bd2e:	463b      	mov	r3, r7
 800bd30:	4628      	mov	r0, r5
 800bd32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd36:	f000 b817 	b.w	800bd68 <_write_r>

0800bd3a <__sseek>:
 800bd3a:	b510      	push	{r4, lr}
 800bd3c:	460c      	mov	r4, r1
 800bd3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd42:	f000 f885 	bl	800be50 <_lseek_r>
 800bd46:	1c43      	adds	r3, r0, #1
 800bd48:	89a3      	ldrh	r3, [r4, #12]
 800bd4a:	bf15      	itete	ne
 800bd4c:	6560      	strne	r0, [r4, #84]	; 0x54
 800bd4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bd52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bd56:	81a3      	strheq	r3, [r4, #12]
 800bd58:	bf18      	it	ne
 800bd5a:	81a3      	strhne	r3, [r4, #12]
 800bd5c:	bd10      	pop	{r4, pc}

0800bd5e <__sclose>:
 800bd5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd62:	f000 b831 	b.w	800bdc8 <_close_r>
	...

0800bd68 <_write_r>:
 800bd68:	b538      	push	{r3, r4, r5, lr}
 800bd6a:	4d07      	ldr	r5, [pc, #28]	; (800bd88 <_write_r+0x20>)
 800bd6c:	4604      	mov	r4, r0
 800bd6e:	4608      	mov	r0, r1
 800bd70:	4611      	mov	r1, r2
 800bd72:	2200      	movs	r2, #0
 800bd74:	602a      	str	r2, [r5, #0]
 800bd76:	461a      	mov	r2, r3
 800bd78:	f7f5 fba7 	bl	80014ca <_write>
 800bd7c:	1c43      	adds	r3, r0, #1
 800bd7e:	d102      	bne.n	800bd86 <_write_r+0x1e>
 800bd80:	682b      	ldr	r3, [r5, #0]
 800bd82:	b103      	cbz	r3, 800bd86 <_write_r+0x1e>
 800bd84:	6023      	str	r3, [r4, #0]
 800bd86:	bd38      	pop	{r3, r4, r5, pc}
 800bd88:	20000edc 	.word	0x20000edc

0800bd8c <__assert_func>:
 800bd8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bd8e:	4614      	mov	r4, r2
 800bd90:	461a      	mov	r2, r3
 800bd92:	4b09      	ldr	r3, [pc, #36]	; (800bdb8 <__assert_func+0x2c>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	4605      	mov	r5, r0
 800bd98:	68d8      	ldr	r0, [r3, #12]
 800bd9a:	b14c      	cbz	r4, 800bdb0 <__assert_func+0x24>
 800bd9c:	4b07      	ldr	r3, [pc, #28]	; (800bdbc <__assert_func+0x30>)
 800bd9e:	9100      	str	r1, [sp, #0]
 800bda0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bda4:	4906      	ldr	r1, [pc, #24]	; (800bdc0 <__assert_func+0x34>)
 800bda6:	462b      	mov	r3, r5
 800bda8:	f000 f81e 	bl	800bde8 <fiprintf>
 800bdac:	f000 f8d3 	bl	800bf56 <abort>
 800bdb0:	4b04      	ldr	r3, [pc, #16]	; (800bdc4 <__assert_func+0x38>)
 800bdb2:	461c      	mov	r4, r3
 800bdb4:	e7f3      	b.n	800bd9e <__assert_func+0x12>
 800bdb6:	bf00      	nop
 800bdb8:	20000010 	.word	0x20000010
 800bdbc:	08013f55 	.word	0x08013f55
 800bdc0:	08013f62 	.word	0x08013f62
 800bdc4:	08013f90 	.word	0x08013f90

0800bdc8 <_close_r>:
 800bdc8:	b538      	push	{r3, r4, r5, lr}
 800bdca:	4d06      	ldr	r5, [pc, #24]	; (800bde4 <_close_r+0x1c>)
 800bdcc:	2300      	movs	r3, #0
 800bdce:	4604      	mov	r4, r0
 800bdd0:	4608      	mov	r0, r1
 800bdd2:	602b      	str	r3, [r5, #0]
 800bdd4:	f7f6 fa43 	bl	800225e <_close>
 800bdd8:	1c43      	adds	r3, r0, #1
 800bdda:	d102      	bne.n	800bde2 <_close_r+0x1a>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	b103      	cbz	r3, 800bde2 <_close_r+0x1a>
 800bde0:	6023      	str	r3, [r4, #0]
 800bde2:	bd38      	pop	{r3, r4, r5, pc}
 800bde4:	20000edc 	.word	0x20000edc

0800bde8 <fiprintf>:
 800bde8:	b40e      	push	{r1, r2, r3}
 800bdea:	b503      	push	{r0, r1, lr}
 800bdec:	4601      	mov	r1, r0
 800bdee:	ab03      	add	r3, sp, #12
 800bdf0:	4805      	ldr	r0, [pc, #20]	; (800be08 <fiprintf+0x20>)
 800bdf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf6:	6800      	ldr	r0, [r0, #0]
 800bdf8:	9301      	str	r3, [sp, #4]
 800bdfa:	f7ff fe41 	bl	800ba80 <_vfiprintf_r>
 800bdfe:	b002      	add	sp, #8
 800be00:	f85d eb04 	ldr.w	lr, [sp], #4
 800be04:	b003      	add	sp, #12
 800be06:	4770      	bx	lr
 800be08:	20000010 	.word	0x20000010

0800be0c <_fstat_r>:
 800be0c:	b538      	push	{r3, r4, r5, lr}
 800be0e:	4d07      	ldr	r5, [pc, #28]	; (800be2c <_fstat_r+0x20>)
 800be10:	2300      	movs	r3, #0
 800be12:	4604      	mov	r4, r0
 800be14:	4608      	mov	r0, r1
 800be16:	4611      	mov	r1, r2
 800be18:	602b      	str	r3, [r5, #0]
 800be1a:	f7f6 fa2c 	bl	8002276 <_fstat>
 800be1e:	1c43      	adds	r3, r0, #1
 800be20:	d102      	bne.n	800be28 <_fstat_r+0x1c>
 800be22:	682b      	ldr	r3, [r5, #0]
 800be24:	b103      	cbz	r3, 800be28 <_fstat_r+0x1c>
 800be26:	6023      	str	r3, [r4, #0]
 800be28:	bd38      	pop	{r3, r4, r5, pc}
 800be2a:	bf00      	nop
 800be2c:	20000edc 	.word	0x20000edc

0800be30 <_isatty_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	4d06      	ldr	r5, [pc, #24]	; (800be4c <_isatty_r+0x1c>)
 800be34:	2300      	movs	r3, #0
 800be36:	4604      	mov	r4, r0
 800be38:	4608      	mov	r0, r1
 800be3a:	602b      	str	r3, [r5, #0]
 800be3c:	f7f6 fa2b 	bl	8002296 <_isatty>
 800be40:	1c43      	adds	r3, r0, #1
 800be42:	d102      	bne.n	800be4a <_isatty_r+0x1a>
 800be44:	682b      	ldr	r3, [r5, #0]
 800be46:	b103      	cbz	r3, 800be4a <_isatty_r+0x1a>
 800be48:	6023      	str	r3, [r4, #0]
 800be4a:	bd38      	pop	{r3, r4, r5, pc}
 800be4c:	20000edc 	.word	0x20000edc

0800be50 <_lseek_r>:
 800be50:	b538      	push	{r3, r4, r5, lr}
 800be52:	4d07      	ldr	r5, [pc, #28]	; (800be70 <_lseek_r+0x20>)
 800be54:	4604      	mov	r4, r0
 800be56:	4608      	mov	r0, r1
 800be58:	4611      	mov	r1, r2
 800be5a:	2200      	movs	r2, #0
 800be5c:	602a      	str	r2, [r5, #0]
 800be5e:	461a      	mov	r2, r3
 800be60:	f7f6 fa24 	bl	80022ac <_lseek>
 800be64:	1c43      	adds	r3, r0, #1
 800be66:	d102      	bne.n	800be6e <_lseek_r+0x1e>
 800be68:	682b      	ldr	r3, [r5, #0]
 800be6a:	b103      	cbz	r3, 800be6e <_lseek_r+0x1e>
 800be6c:	6023      	str	r3, [r4, #0]
 800be6e:	bd38      	pop	{r3, r4, r5, pc}
 800be70:	20000edc 	.word	0x20000edc

0800be74 <__ascii_mbtowc>:
 800be74:	b082      	sub	sp, #8
 800be76:	b901      	cbnz	r1, 800be7a <__ascii_mbtowc+0x6>
 800be78:	a901      	add	r1, sp, #4
 800be7a:	b142      	cbz	r2, 800be8e <__ascii_mbtowc+0x1a>
 800be7c:	b14b      	cbz	r3, 800be92 <__ascii_mbtowc+0x1e>
 800be7e:	7813      	ldrb	r3, [r2, #0]
 800be80:	600b      	str	r3, [r1, #0]
 800be82:	7812      	ldrb	r2, [r2, #0]
 800be84:	1e10      	subs	r0, r2, #0
 800be86:	bf18      	it	ne
 800be88:	2001      	movne	r0, #1
 800be8a:	b002      	add	sp, #8
 800be8c:	4770      	bx	lr
 800be8e:	4610      	mov	r0, r2
 800be90:	e7fb      	b.n	800be8a <__ascii_mbtowc+0x16>
 800be92:	f06f 0001 	mvn.w	r0, #1
 800be96:	e7f8      	b.n	800be8a <__ascii_mbtowc+0x16>

0800be98 <memmove>:
 800be98:	4288      	cmp	r0, r1
 800be9a:	b510      	push	{r4, lr}
 800be9c:	eb01 0402 	add.w	r4, r1, r2
 800bea0:	d902      	bls.n	800bea8 <memmove+0x10>
 800bea2:	4284      	cmp	r4, r0
 800bea4:	4623      	mov	r3, r4
 800bea6:	d807      	bhi.n	800beb8 <memmove+0x20>
 800bea8:	1e43      	subs	r3, r0, #1
 800beaa:	42a1      	cmp	r1, r4
 800beac:	d008      	beq.n	800bec0 <memmove+0x28>
 800beae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800beb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800beb6:	e7f8      	b.n	800beaa <memmove+0x12>
 800beb8:	4402      	add	r2, r0
 800beba:	4601      	mov	r1, r0
 800bebc:	428a      	cmp	r2, r1
 800bebe:	d100      	bne.n	800bec2 <memmove+0x2a>
 800bec0:	bd10      	pop	{r4, pc}
 800bec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800beca:	e7f7      	b.n	800bebc <memmove+0x24>

0800becc <_realloc_r>:
 800becc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bece:	4607      	mov	r7, r0
 800bed0:	4614      	mov	r4, r2
 800bed2:	460e      	mov	r6, r1
 800bed4:	b921      	cbnz	r1, 800bee0 <_realloc_r+0x14>
 800bed6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800beda:	4611      	mov	r1, r2
 800bedc:	f7fd b988 	b.w	80091f0 <_malloc_r>
 800bee0:	b922      	cbnz	r2, 800beec <_realloc_r+0x20>
 800bee2:	f7fd f935 	bl	8009150 <_free_r>
 800bee6:	4625      	mov	r5, r4
 800bee8:	4628      	mov	r0, r5
 800beea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800beec:	f000 f83a 	bl	800bf64 <_malloc_usable_size_r>
 800bef0:	42a0      	cmp	r0, r4
 800bef2:	d20f      	bcs.n	800bf14 <_realloc_r+0x48>
 800bef4:	4621      	mov	r1, r4
 800bef6:	4638      	mov	r0, r7
 800bef8:	f7fd f97a 	bl	80091f0 <_malloc_r>
 800befc:	4605      	mov	r5, r0
 800befe:	2800      	cmp	r0, #0
 800bf00:	d0f2      	beq.n	800bee8 <_realloc_r+0x1c>
 800bf02:	4631      	mov	r1, r6
 800bf04:	4622      	mov	r2, r4
 800bf06:	f7ff f88f 	bl	800b028 <memcpy>
 800bf0a:	4631      	mov	r1, r6
 800bf0c:	4638      	mov	r0, r7
 800bf0e:	f7fd f91f 	bl	8009150 <_free_r>
 800bf12:	e7e9      	b.n	800bee8 <_realloc_r+0x1c>
 800bf14:	4635      	mov	r5, r6
 800bf16:	e7e7      	b.n	800bee8 <_realloc_r+0x1c>

0800bf18 <_read_r>:
 800bf18:	b538      	push	{r3, r4, r5, lr}
 800bf1a:	4d07      	ldr	r5, [pc, #28]	; (800bf38 <_read_r+0x20>)
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	4608      	mov	r0, r1
 800bf20:	4611      	mov	r1, r2
 800bf22:	2200      	movs	r2, #0
 800bf24:	602a      	str	r2, [r5, #0]
 800bf26:	461a      	mov	r2, r3
 800bf28:	f7f6 f97c 	bl	8002224 <_read>
 800bf2c:	1c43      	adds	r3, r0, #1
 800bf2e:	d102      	bne.n	800bf36 <_read_r+0x1e>
 800bf30:	682b      	ldr	r3, [r5, #0]
 800bf32:	b103      	cbz	r3, 800bf36 <_read_r+0x1e>
 800bf34:	6023      	str	r3, [r4, #0]
 800bf36:	bd38      	pop	{r3, r4, r5, pc}
 800bf38:	20000edc 	.word	0x20000edc

0800bf3c <__ascii_wctomb>:
 800bf3c:	b149      	cbz	r1, 800bf52 <__ascii_wctomb+0x16>
 800bf3e:	2aff      	cmp	r2, #255	; 0xff
 800bf40:	bf85      	ittet	hi
 800bf42:	238a      	movhi	r3, #138	; 0x8a
 800bf44:	6003      	strhi	r3, [r0, #0]
 800bf46:	700a      	strbls	r2, [r1, #0]
 800bf48:	f04f 30ff 	movhi.w	r0, #4294967295
 800bf4c:	bf98      	it	ls
 800bf4e:	2001      	movls	r0, #1
 800bf50:	4770      	bx	lr
 800bf52:	4608      	mov	r0, r1
 800bf54:	4770      	bx	lr

0800bf56 <abort>:
 800bf56:	b508      	push	{r3, lr}
 800bf58:	2006      	movs	r0, #6
 800bf5a:	f000 f833 	bl	800bfc4 <raise>
 800bf5e:	2001      	movs	r0, #1
 800bf60:	f7f6 f956 	bl	8002210 <_exit>

0800bf64 <_malloc_usable_size_r>:
 800bf64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf68:	1f18      	subs	r0, r3, #4
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	bfbc      	itt	lt
 800bf6e:	580b      	ldrlt	r3, [r1, r0]
 800bf70:	18c0      	addlt	r0, r0, r3
 800bf72:	4770      	bx	lr

0800bf74 <_raise_r>:
 800bf74:	291f      	cmp	r1, #31
 800bf76:	b538      	push	{r3, r4, r5, lr}
 800bf78:	4604      	mov	r4, r0
 800bf7a:	460d      	mov	r5, r1
 800bf7c:	d904      	bls.n	800bf88 <_raise_r+0x14>
 800bf7e:	2316      	movs	r3, #22
 800bf80:	6003      	str	r3, [r0, #0]
 800bf82:	f04f 30ff 	mov.w	r0, #4294967295
 800bf86:	bd38      	pop	{r3, r4, r5, pc}
 800bf88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf8a:	b112      	cbz	r2, 800bf92 <_raise_r+0x1e>
 800bf8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf90:	b94b      	cbnz	r3, 800bfa6 <_raise_r+0x32>
 800bf92:	4620      	mov	r0, r4
 800bf94:	f000 f830 	bl	800bff8 <_getpid_r>
 800bf98:	462a      	mov	r2, r5
 800bf9a:	4601      	mov	r1, r0
 800bf9c:	4620      	mov	r0, r4
 800bf9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfa2:	f000 b817 	b.w	800bfd4 <_kill_r>
 800bfa6:	2b01      	cmp	r3, #1
 800bfa8:	d00a      	beq.n	800bfc0 <_raise_r+0x4c>
 800bfaa:	1c59      	adds	r1, r3, #1
 800bfac:	d103      	bne.n	800bfb6 <_raise_r+0x42>
 800bfae:	2316      	movs	r3, #22
 800bfb0:	6003      	str	r3, [r0, #0]
 800bfb2:	2001      	movs	r0, #1
 800bfb4:	e7e7      	b.n	800bf86 <_raise_r+0x12>
 800bfb6:	2400      	movs	r4, #0
 800bfb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfbc:	4628      	mov	r0, r5
 800bfbe:	4798      	blx	r3
 800bfc0:	2000      	movs	r0, #0
 800bfc2:	e7e0      	b.n	800bf86 <_raise_r+0x12>

0800bfc4 <raise>:
 800bfc4:	4b02      	ldr	r3, [pc, #8]	; (800bfd0 <raise+0xc>)
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	6818      	ldr	r0, [r3, #0]
 800bfca:	f7ff bfd3 	b.w	800bf74 <_raise_r>
 800bfce:	bf00      	nop
 800bfd0:	20000010 	.word	0x20000010

0800bfd4 <_kill_r>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	4d07      	ldr	r5, [pc, #28]	; (800bff4 <_kill_r+0x20>)
 800bfd8:	2300      	movs	r3, #0
 800bfda:	4604      	mov	r4, r0
 800bfdc:	4608      	mov	r0, r1
 800bfde:	4611      	mov	r1, r2
 800bfe0:	602b      	str	r3, [r5, #0]
 800bfe2:	f7f6 f905 	bl	80021f0 <_kill>
 800bfe6:	1c43      	adds	r3, r0, #1
 800bfe8:	d102      	bne.n	800bff0 <_kill_r+0x1c>
 800bfea:	682b      	ldr	r3, [r5, #0]
 800bfec:	b103      	cbz	r3, 800bff0 <_kill_r+0x1c>
 800bfee:	6023      	str	r3, [r4, #0]
 800bff0:	bd38      	pop	{r3, r4, r5, pc}
 800bff2:	bf00      	nop
 800bff4:	20000edc 	.word	0x20000edc

0800bff8 <_getpid_r>:
 800bff8:	f7f6 b8f2 	b.w	80021e0 <_getpid>

0800bffc <_init>:
 800bffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bffe:	bf00      	nop
 800c000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c002:	bc08      	pop	{r3}
 800c004:	469e      	mov	lr, r3
 800c006:	4770      	bx	lr

0800c008 <_fini>:
 800c008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00a:	bf00      	nop
 800c00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c00e:	bc08      	pop	{r3}
 800c010:	469e      	mov	lr, r3
 800c012:	4770      	bx	lr
