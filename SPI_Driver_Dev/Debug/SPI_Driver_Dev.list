
SPI_Driver_Dev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000834  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080009f8  080009f8  000109f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000a08  08000a08  00010a10  2**0
                  CONTENTS
  4 .ARM          00000000  08000a08  08000a08  00010a10  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a08  08000a10  00010a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a08  08000a08  00010a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a0c  08000a0c  00010a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000a10  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000a10  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010a10  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001890  00000000  00000000  00010a40  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000436  00000000  00000000  000122d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000138  00000000  00000000  00012708  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000100  00000000  00000000  00012840  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001fae  00000000  00000000  00012940  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000121a  00000000  00000000  000148ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008f8e  00000000  00000000  00015b08  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001ea96  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000430  00000000  00000000  0001eb14  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080009e0 	.word	0x080009e0

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080009e0 	.word	0x080009e0

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <SPI2_GPIOInits>:
#include "stm32f446xx.h"
#include <string.h>


void SPI2_GPIOInits(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 800021a:	4b0e      	ldr	r3, [pc, #56]	; (8000254 <SPI2_GPIOInits+0x40>)
 800021c:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800021e:	2302      	movs	r3, #2
 8000220:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000222:	2305      	movs	r3, #5
 8000224:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000226:	2300      	movs	r3, #0
 8000228:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800022a:	2300      	movs	r3, #0
 800022c:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800022e:	2302      	movs	r3, #2
 8000230:	72bb      	strb	r3, [r7, #10]


	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_13;
 8000232:	230d      	movs	r3, #13
 8000234:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000236:	1d3b      	adds	r3, r7, #4
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fa1b 	bl	8000674 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_15;
 800023e:	230f      	movs	r3, #15
 8000240:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	4618      	mov	r0, r3
 8000246:	f000 fa15 	bl	8000674 <GPIO_Init>

	//NSS
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_12;
	//GPIO_Init(&SPIPins);

}
 800024a:	bf00      	nop
 800024c:	3710      	adds	r7, #16
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40020400 	.word	0x40020400

08000258 <SPI2_Inits>:



void SPI2_Inits(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	b084      	sub	sp, #16
 800025c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800025e:	4b0c      	ldr	r3, [pc, #48]	; (8000290 <SPI2_Inits+0x38>)
 8000260:	607b      	str	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000262:	2301      	movs	r3, #1
 8000264:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000266:	2301      	movs	r3, #1
 8000268:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;			//Generates SCLK of 8MHz
 800026a:	2300      	movs	r3, #0
 800026c:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800026e:	2300      	movs	r3, #0
 8000270:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000272:	2300      	movs	r3, #0
 8000274:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000276:	2300      	movs	r3, #0
 8000278:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 800027a:	2301      	movs	r3, #1
 800027c:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 800027e:	1d3b      	adds	r3, r7, #4
 8000280:	4618      	mov	r0, r3
 8000282:	f000 f854 	bl	800032e <SPI_Init>
}
 8000286:	bf00      	nop
 8000288:	3710      	adds	r7, #16
 800028a:	46bd      	mov	sp, r7
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	40003800 	.word	0x40003800

08000294 <main>:


int main(void)
{
 8000294:	b590      	push	{r4, r7, lr}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0

	//Initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 800029a:	f7ff ffbb 	bl	8000214 <SPI2_GPIOInits>

	//Initializes the SPI2 peripheral parameters
	SPI2_Inits();
 800029e:	f7ff ffdb 	bl	8000258 <SPI2_Inits>

	//Makes NSS signal internally high and avoid MODF error
	SPI_SSIConfig(SPI2, ENABLE);
 80002a2:	2101      	movs	r1, #1
 80002a4:	480b      	ldr	r0, [pc, #44]	; (80002d4 <main+0x40>)
 80002a6:	f000 f8f8 	bl	800049a <SPI_SSIConfig>

	//Enable SPI2 peripheral
	SPI_PeripheralControl(SPI2, ENABLE);
 80002aa:	2101      	movs	r1, #1
 80002ac:	4809      	ldr	r0, [pc, #36]	; (80002d4 <main+0x40>)
 80002ae:	f000 f8d8 	bl	8000462 <SPI_PeripheralControl>

	//Send data
	char user_data[] = "Hello World!";
 80002b2:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <main+0x44>)
 80002b4:	463c      	mov	r4, r7
 80002b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80002b8:	c407      	stmia	r4!, {r0, r1, r2}
 80002ba:	7023      	strb	r3, [r4, #0]
	SPI_SendData(SPI2, (uint8_t*) user_data, strlen(user_data));
 80002bc:	463b      	mov	r3, r7
 80002be:	4618      	mov	r0, r3
 80002c0:	f7ff ffa0 	bl	8000204 <strlen>
 80002c4:	4602      	mov	r2, r0
 80002c6:	463b      	mov	r3, r7
 80002c8:	4619      	mov	r1, r3
 80002ca:	4802      	ldr	r0, [pc, #8]	; (80002d4 <main+0x40>)
 80002cc:	f000 f893 	bl	80003f6 <SPI_SendData>

	while (1);
 80002d0:	e7fe      	b.n	80002d0 <main+0x3c>
 80002d2:	bf00      	nop
 80002d4:	40003800 	.word	0x40003800
 80002d8:	080009f8 	.word	0x080009f8

080002dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002dc:	480d      	ldr	r0, [pc, #52]	; (8000314 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002de:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002e0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e4:	480c      	ldr	r0, [pc, #48]	; (8000318 <LoopForever+0x6>)
  ldr r1, =_edata
 80002e6:	490d      	ldr	r1, [pc, #52]	; (800031c <LoopForever+0xa>)
  ldr r2, =_sidata
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <LoopForever+0xe>)
  movs r3, #0
 80002ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002ec:	e002      	b.n	80002f4 <LoopCopyDataInit>

080002ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f2:	3304      	adds	r3, #4

080002f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002f8:	d3f9      	bcc.n	80002ee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fa:	4a0a      	ldr	r2, [pc, #40]	; (8000324 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002fc:	4c0a      	ldr	r4, [pc, #40]	; (8000328 <LoopForever+0x16>)
  movs r3, #0
 80002fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000300:	e001      	b.n	8000306 <LoopFillZerobss>

08000302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000304:	3204      	adds	r2, #4

08000306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000308:	d3fb      	bcc.n	8000302 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030a:	f000 fb45 	bl	8000998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800030e:	f7ff ffc1 	bl	8000294 <main>

08000312 <LoopForever>:

LoopForever:
    b LoopForever
 8000312:	e7fe      	b.n	8000312 <LoopForever>
  ldr   r0, =_estack
 8000314:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800031c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000320:	08000a10 	.word	0x08000a10
  ldr r2, =_sbss
 8000324:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000328:	2000001c 	.word	0x2000001c

0800032c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800032c:	e7fe      	b.n	800032c <ADC_IRQHandler>

0800032e <SPI_Init>:



//Initialization & De-Initialization
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 800032e:	b480      	push	{r7}
 8000330:	b085      	sub	sp, #20
 8000332:	af00      	add	r7, sp, #0
 8000334:	6078      	str	r0, [r7, #4]
	//Configure SPI_CR1 register

	uint32_t tempreg = 0;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]

	//Configure device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	791b      	ldrb	r3, [r3, #4]
 800033e:	009b      	lsls	r3, r3, #2
 8000340:	461a      	mov	r2, r3
 8000342:	68fb      	ldr	r3, [r7, #12]
 8000344:	4313      	orrs	r3, r2
 8000346:	60fb      	str	r3, [r7, #12]

	//Configure the bus configuration
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	795b      	ldrb	r3, [r3, #5]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d104      	bne.n	800035a <SPI_Init+0x2c>
	{
		//Bi-directional mode should be cleared
		tempreg &= ~(1 << 15);
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	e014      	b.n	8000384 <SPI_Init+0x56>
	} else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	795b      	ldrb	r3, [r3, #5]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d104      	bne.n	800036c <SPI_Init+0x3e>
	{
		//Bi-directional mode should be set
		tempreg |= (1 << 15);
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000368:	60fb      	str	r3, [r7, #12]
 800036a:	e00b      	b.n	8000384 <SPI_Init+0x56>
	} else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	795b      	ldrb	r3, [r3, #5]
 8000370:	2b03      	cmp	r3, #3
 8000372:	d107      	bne.n	8000384 <SPI_Init+0x56>
	{
		//BI-directional mode should be cleared
		tempreg &= ~(1 << 15);
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800037a:	60fb      	str	r3, [r7, #12]

		//Set RXONLY bit
		tempreg |= (1 << 10);
 800037c:	68fb      	ldr	r3, [r7, #12]
 800037e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000382:	60fb      	str	r3, [r7, #12]
	}


	//Configure the SPI serial clock speed (Baud Rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	799b      	ldrb	r3, [r3, #6]
 8000388:	00db      	lsls	r3, r3, #3
 800038a:	461a      	mov	r2, r3
 800038c:	68fb      	ldr	r3, [r7, #12]
 800038e:	4313      	orrs	r3, r2
 8000390:	60fb      	str	r3, [r7, #12]

	//Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << 11;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	79db      	ldrb	r3, [r3, #7]
 8000396:	02db      	lsls	r3, r3, #11
 8000398:	461a      	mov	r2, r3
 800039a:	68fb      	ldr	r3, [r7, #12]
 800039c:	4313      	orrs	r3, r2
 800039e:	60fb      	str	r3, [r7, #12]

	//Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << 1;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	7a1b      	ldrb	r3, [r3, #8]
 80003a4:	005b      	lsls	r3, r3, #1
 80003a6:	461a      	mov	r2, r3
 80003a8:	68fb      	ldr	r3, [r7, #12]
 80003aa:	4313      	orrs	r3, r2
 80003ac:	60fb      	str	r3, [r7, #12]

	//Configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	7a5b      	ldrb	r3, [r3, #9]
 80003b2:	461a      	mov	r2, r3
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	4313      	orrs	r3, r2
 80003b8:	60fb      	str	r3, [r7, #12]


	pSPIHandle->pSPIx->CR1 = tempreg;
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	68fa      	ldr	r2, [r7, #12]
 80003c0:	601a      	str	r2, [r3, #0]
}
 80003c2:	bf00      	nop
 80003c4:	3714      	adds	r7, #20
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr

080003ce <SPI_GetFlagStatus>:

}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 80003ce:	b480      	push	{r7}
 80003d0:	b083      	sub	sp, #12
 80003d2:	af00      	add	r7, sp, #0
 80003d4:	6078      	str	r0, [r7, #4]
 80003d6:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	689a      	ldr	r2, [r3, #8]
 80003dc:	683b      	ldr	r3, [r7, #0]
 80003de:	4013      	ands	r3, r2
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80003e4:	2301      	movs	r3, #1
 80003e6:	e000      	b.n	80003ea <SPI_GetFlagStatus+0x1c>
	}

	return FLAG_RESET;
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	370c      	adds	r7, #12
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr

080003f6 <SPI_SendData>:


//Data Send & Receive
//Blocking Call
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b084      	sub	sp, #16
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	60f8      	str	r0, [r7, #12]
 80003fe:	60b9      	str	r1, [r7, #8]
 8000400:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000402:	e027      	b.n	8000454 <SPI_SendData+0x5e>
	{
		//Wait until TXE is set
		while (SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 8000404:	bf00      	nop
 8000406:	2102      	movs	r1, #2
 8000408:	68f8      	ldr	r0, [r7, #12]
 800040a:	f7ff ffe0 	bl	80003ce <SPI_GetFlagStatus>
 800040e:	4603      	mov	r3, r0
 8000410:	2b00      	cmp	r3, #0
 8000412:	d0f8      	beq.n	8000406 <SPI_SendData+0x10>

		//Check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800041c:	2b00      	cmp	r3, #0
 800041e:	d00e      	beq.n	800043e <SPI_SendData+0x48>
		{
			//16 bit DFF
			//Load the data into DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	881b      	ldrh	r3, [r3, #0]
 8000424:	461a      	mov	r2, r3
 8000426:	68fb      	ldr	r3, [r7, #12]
 8000428:	60da      	str	r2, [r3, #12]
			Len--;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	3b01      	subs	r3, #1
 800042e:	607b      	str	r3, [r7, #4]
			Len--;
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	3b01      	subs	r3, #1
 8000434:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	3301      	adds	r3, #1
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	e00a      	b.n	8000454 <SPI_SendData+0x5e>
		} else
		{
			//8 bit DFF
			pSPIx->DR = *pTxBuffer;
 800043e:	68bb      	ldr	r3, [r7, #8]
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	461a      	mov	r2, r3
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	60da      	str	r2, [r3, #12]
			Len--;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3b01      	subs	r3, #1
 800044c:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 800044e:	68bb      	ldr	r3, [r7, #8]
 8000450:	3301      	adds	r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d1d4      	bne.n	8000404 <SPI_SendData+0xe>

	}



}
 800045a:	bf00      	nop
 800045c:	3710      	adds	r7, #16
 800045e:	46bd      	mov	sp, r7
 8000460:	bd80      	pop	{r7, pc}

08000462 <SPI_PeripheralControl>:

}


void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000462:	b480      	push	{r7}
 8000464:	b083      	sub	sp, #12
 8000466:	af00      	add	r7, sp, #0
 8000468:	6078      	str	r0, [r7, #4]
 800046a:	460b      	mov	r3, r1
 800046c:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 800046e:	78fb      	ldrb	r3, [r7, #3]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d106      	bne.n	8000482 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	601a      	str	r2, [r3, #0]
	} else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}

}
 8000480:	e005      	b.n	800048e <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	601a      	str	r2, [r3, #0]
}
 800048e:	bf00      	nop
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <SPI_SSIConfig>:


void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
 80004a2:	460b      	mov	r3, r1
 80004a4:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE)
 80004a6:	78fb      	ldrb	r3, [r7, #3]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d106      	bne.n	80004ba <SPI_SSIConfig+0x20>
		{
			pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	601a      	str	r2, [r3, #0]
		} else
		{
			pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
		}

}
 80004b8:	e005      	b.n	80004c6 <SPI_SSIConfig+0x2c>
			pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	601a      	str	r2, [r3, #0]
}
 80004c6:	bf00      	nop
 80004c8:	370c      	adds	r7, #12
 80004ca:	46bd      	mov	sp, r7
 80004cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004d0:	4770      	bx	lr
	...

080004d4 <GPIO_PeriClockControl>:
 * Return:
 *
 * Note:
 ********************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
 80004dc:	460b      	mov	r3, r1
 80004de:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80004e0:	78fb      	ldrb	r3, [r7, #3]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d157      	bne.n	8000596 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	4a59      	ldr	r2, [pc, #356]	; (8000650 <GPIO_PeriClockControl+0x17c>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d106      	bne.n	80004fc <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80004ee:	4b59      	ldr	r3, [pc, #356]	; (8000654 <GPIO_PeriClockControl+0x180>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a58      	ldr	r2, [pc, #352]	; (8000654 <GPIO_PeriClockControl+0x180>)
 80004f4:	f043 0301 	orr.w	r3, r3, #1
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DI();
		}
	}

}
 80004fa:	e0a3      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	4a56      	ldr	r2, [pc, #344]	; (8000658 <GPIO_PeriClockControl+0x184>)
 8000500:	4293      	cmp	r3, r2
 8000502:	d106      	bne.n	8000512 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000504:	4b53      	ldr	r3, [pc, #332]	; (8000654 <GPIO_PeriClockControl+0x180>)
 8000506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000508:	4a52      	ldr	r2, [pc, #328]	; (8000654 <GPIO_PeriClockControl+0x180>)
 800050a:	f043 0302 	orr.w	r3, r3, #2
 800050e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000510:	e098      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	4a51      	ldr	r2, [pc, #324]	; (800065c <GPIO_PeriClockControl+0x188>)
 8000516:	4293      	cmp	r3, r2
 8000518:	d106      	bne.n	8000528 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800051a:	4b4e      	ldr	r3, [pc, #312]	; (8000654 <GPIO_PeriClockControl+0x180>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a4d      	ldr	r2, [pc, #308]	; (8000654 <GPIO_PeriClockControl+0x180>)
 8000520:	f043 0304 	orr.w	r3, r3, #4
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000526:	e08d      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	4a4d      	ldr	r2, [pc, #308]	; (8000660 <GPIO_PeriClockControl+0x18c>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d106      	bne.n	800053e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000530:	4b48      	ldr	r3, [pc, #288]	; (8000654 <GPIO_PeriClockControl+0x180>)
 8000532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000534:	4a47      	ldr	r2, [pc, #284]	; (8000654 <GPIO_PeriClockControl+0x180>)
 8000536:	f043 0308 	orr.w	r3, r3, #8
 800053a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800053c:	e082      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	4a48      	ldr	r2, [pc, #288]	; (8000664 <GPIO_PeriClockControl+0x190>)
 8000542:	4293      	cmp	r3, r2
 8000544:	d106      	bne.n	8000554 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000546:	4b43      	ldr	r3, [pc, #268]	; (8000654 <GPIO_PeriClockControl+0x180>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	4a42      	ldr	r2, [pc, #264]	; (8000654 <GPIO_PeriClockControl+0x180>)
 800054c:	f043 0310 	orr.w	r3, r3, #16
 8000550:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000552:	e077      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a44      	ldr	r2, [pc, #272]	; (8000668 <GPIO_PeriClockControl+0x194>)
 8000558:	4293      	cmp	r3, r2
 800055a:	d106      	bne.n	800056a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800055c:	4b3d      	ldr	r3, [pc, #244]	; (8000654 <GPIO_PeriClockControl+0x180>)
 800055e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000560:	4a3c      	ldr	r2, [pc, #240]	; (8000654 <GPIO_PeriClockControl+0x180>)
 8000562:	f043 0320 	orr.w	r3, r3, #32
 8000566:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000568:	e06c      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4a3f      	ldr	r2, [pc, #252]	; (800066c <GPIO_PeriClockControl+0x198>)
 800056e:	4293      	cmp	r3, r2
 8000570:	d106      	bne.n	8000580 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000572:	4b38      	ldr	r3, [pc, #224]	; (8000654 <GPIO_PeriClockControl+0x180>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	4a37      	ldr	r2, [pc, #220]	; (8000654 <GPIO_PeriClockControl+0x180>)
 8000578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800057c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800057e:	e061      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	4a3b      	ldr	r2, [pc, #236]	; (8000670 <GPIO_PeriClockControl+0x19c>)
 8000584:	4293      	cmp	r3, r2
 8000586:	d15d      	bne.n	8000644 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000588:	4b32      	ldr	r3, [pc, #200]	; (8000654 <GPIO_PeriClockControl+0x180>)
 800058a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058c:	4a31      	ldr	r2, [pc, #196]	; (8000654 <GPIO_PeriClockControl+0x180>)
 800058e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000592:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000594:	e056      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	4a2d      	ldr	r2, [pc, #180]	; (8000650 <GPIO_PeriClockControl+0x17c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d106      	bne.n	80005ac <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800059e:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <GPIO_PeriClockControl+0x180>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a2c      	ldr	r2, [pc, #176]	; (8000654 <GPIO_PeriClockControl+0x180>)
 80005a4:	f023 0301 	bic.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005aa:	e04b      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	4a2a      	ldr	r2, [pc, #168]	; (8000658 <GPIO_PeriClockControl+0x184>)
 80005b0:	4293      	cmp	r3, r2
 80005b2:	d106      	bne.n	80005c2 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <GPIO_PeriClockControl+0x180>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <GPIO_PeriClockControl+0x180>)
 80005ba:	f023 0302 	bic.w	r3, r3, #2
 80005be:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005c0:	e040      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	4a25      	ldr	r2, [pc, #148]	; (800065c <GPIO_PeriClockControl+0x188>)
 80005c6:	4293      	cmp	r3, r2
 80005c8:	d106      	bne.n	80005d8 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80005ca:	4b22      	ldr	r3, [pc, #136]	; (8000654 <GPIO_PeriClockControl+0x180>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	4a21      	ldr	r2, [pc, #132]	; (8000654 <GPIO_PeriClockControl+0x180>)
 80005d0:	f023 0304 	bic.w	r3, r3, #4
 80005d4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005d6:	e035      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	4a21      	ldr	r2, [pc, #132]	; (8000660 <GPIO_PeriClockControl+0x18c>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d106      	bne.n	80005ee <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <GPIO_PeriClockControl+0x180>)
 80005e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e4:	4a1b      	ldr	r2, [pc, #108]	; (8000654 <GPIO_PeriClockControl+0x180>)
 80005e6:	f023 0308 	bic.w	r3, r3, #8
 80005ea:	6313      	str	r3, [r2, #48]	; 0x30
}
 80005ec:	e02a      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <GPIO_PeriClockControl+0x190>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d106      	bne.n	8000604 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <GPIO_PeriClockControl+0x180>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a16      	ldr	r2, [pc, #88]	; (8000654 <GPIO_PeriClockControl+0x180>)
 80005fc:	f023 0310 	bic.w	r3, r3, #16
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000602:	e01f      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	4a18      	ldr	r2, [pc, #96]	; (8000668 <GPIO_PeriClockControl+0x194>)
 8000608:	4293      	cmp	r3, r2
 800060a:	d106      	bne.n	800061a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <GPIO_PeriClockControl+0x180>)
 800060e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000610:	4a10      	ldr	r2, [pc, #64]	; (8000654 <GPIO_PeriClockControl+0x180>)
 8000612:	f023 0320 	bic.w	r3, r3, #32
 8000616:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000618:	e014      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a13      	ldr	r2, [pc, #76]	; (800066c <GPIO_PeriClockControl+0x198>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d106      	bne.n	8000630 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <GPIO_PeriClockControl+0x180>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a0b      	ldr	r2, [pc, #44]	; (8000654 <GPIO_PeriClockControl+0x180>)
 8000628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800062e:	e009      	b.n	8000644 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a0f      	ldr	r2, [pc, #60]	; (8000670 <GPIO_PeriClockControl+0x19c>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d105      	bne.n	8000644 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <GPIO_PeriClockControl+0x180>)
 800063a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063c:	4a05      	ldr	r2, [pc, #20]	; (8000654 <GPIO_PeriClockControl+0x180>)
 800063e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000642:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000644:	bf00      	nop
 8000646:	370c      	adds	r7, #12
 8000648:	46bd      	mov	sp, r7
 800064a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064e:	4770      	bx	lr
 8000650:	40020000 	.word	0x40020000
 8000654:	40023800 	.word	0x40023800
 8000658:	40020400 	.word	0x40020400
 800065c:	40020800 	.word	0x40020800
 8000660:	40020c00 	.word	0x40020c00
 8000664:	40021000 	.word	0x40021000
 8000668:	40021400 	.word	0x40021400
 800066c:	40021800 	.word	0x40021800
 8000670:	40021c00 	.word	0x40021c00

08000674 <GPIO_Init>:
 * Return:
 *
 * Note:
 ********************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	uint32_t temp; //temp. register will at first hold the desired GPIO config setting, with the bits set at the desired register

	//Enable the peripheral clock, so the user doesn't have to do so explicitly
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2101      	movs	r1, #1
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff26 	bl	80004d4 <GPIO_PeriClockControl>


	// Mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	795b      	ldrb	r3, [r3, #5]
 800068c:	2b03      	cmp	r3, #3
 800068e:	d81f      	bhi.n	80006d0 <GPIO_Init+0x5c>
	{
		//Non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	795b      	ldrb	r3, [r3, #5]
 8000694:	461a      	mov	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	791b      	ldrb	r3, [r3, #4]
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	fa02 f303 	lsl.w	r3, r2, r3
 80006a0:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clear register
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	681a      	ldr	r2, [r3, #0]
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	791b      	ldrb	r3, [r3, #4]
 80006ac:	4619      	mov	r1, r3
 80006ae:	2303      	movs	r3, #3
 80006b0:	408b      	lsls	r3, r1
 80006b2:	43db      	mvns	r3, r3
 80006b4:	4619      	mov	r1, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	400a      	ands	r2, r1
 80006bc:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;   //Handle variable will get the base address and access the speed register. Set register
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	6819      	ldr	r1, [r3, #0]
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	430a      	orrs	r2, r1
 80006cc:	601a      	str	r2, [r3, #0]
 80006ce:	e0bf      	b.n	8000850 <GPIO_Init+0x1dc>

	} else
	{
		//Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	795b      	ldrb	r3, [r3, #5]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d117      	bne.n	8000708 <GPIO_Init+0x94>
		{
			//Configure the Rising Trigger Selection Register
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006d8:	4b47      	ldr	r3, [pc, #284]	; (80007f8 <GPIO_Init+0x184>)
 80006da:	68db      	ldr	r3, [r3, #12]
 80006dc:	687a      	ldr	r2, [r7, #4]
 80006de:	7912      	ldrb	r2, [r2, #4]
 80006e0:	4611      	mov	r1, r2
 80006e2:	2201      	movs	r2, #1
 80006e4:	408a      	lsls	r2, r1
 80006e6:	4611      	mov	r1, r2
 80006e8:	4a43      	ldr	r2, [pc, #268]	; (80007f8 <GPIO_Init+0x184>)
 80006ea:	430b      	orrs	r3, r1
 80006ec:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ee:	4b42      	ldr	r3, [pc, #264]	; (80007f8 <GPIO_Init+0x184>)
 80006f0:	689b      	ldr	r3, [r3, #8]
 80006f2:	687a      	ldr	r2, [r7, #4]
 80006f4:	7912      	ldrb	r2, [r2, #4]
 80006f6:	4611      	mov	r1, r2
 80006f8:	2201      	movs	r2, #1
 80006fa:	408a      	lsls	r2, r1
 80006fc:	43d2      	mvns	r2, r2
 80006fe:	4611      	mov	r1, r2
 8000700:	4a3d      	ldr	r2, [pc, #244]	; (80007f8 <GPIO_Init+0x184>)
 8000702:	400b      	ands	r3, r1
 8000704:	6093      	str	r3, [r2, #8]
 8000706:	e036      	b.n	8000776 <GPIO_Init+0x102>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	795b      	ldrb	r3, [r3, #5]
 800070c:	2b05      	cmp	r3, #5
 800070e:	d117      	bne.n	8000740 <GPIO_Init+0xcc>
		{
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000710:	4b39      	ldr	r3, [pc, #228]	; (80007f8 <GPIO_Init+0x184>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	7912      	ldrb	r2, [r2, #4]
 8000718:	4611      	mov	r1, r2
 800071a:	2201      	movs	r2, #1
 800071c:	408a      	lsls	r2, r1
 800071e:	4611      	mov	r1, r2
 8000720:	4a35      	ldr	r2, [pc, #212]	; (80007f8 <GPIO_Init+0x184>)
 8000722:	430b      	orrs	r3, r1
 8000724:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000726:	4b34      	ldr	r3, [pc, #208]	; (80007f8 <GPIO_Init+0x184>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	7912      	ldrb	r2, [r2, #4]
 800072e:	4611      	mov	r1, r2
 8000730:	2201      	movs	r2, #1
 8000732:	408a      	lsls	r2, r1
 8000734:	43d2      	mvns	r2, r2
 8000736:	4611      	mov	r1, r2
 8000738:	4a2f      	ldr	r2, [pc, #188]	; (80007f8 <GPIO_Init+0x184>)
 800073a:	400b      	ands	r3, r1
 800073c:	60d3      	str	r3, [r2, #12]
 800073e:	e01a      	b.n	8000776 <GPIO_Init+0x102>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	795b      	ldrb	r3, [r3, #5]
 8000744:	2b06      	cmp	r3, #6
 8000746:	d116      	bne.n	8000776 <GPIO_Init+0x102>
		{
			//Configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000748:	4b2b      	ldr	r3, [pc, #172]	; (80007f8 <GPIO_Init+0x184>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	7912      	ldrb	r2, [r2, #4]
 8000750:	4611      	mov	r1, r2
 8000752:	2201      	movs	r2, #1
 8000754:	408a      	lsls	r2, r1
 8000756:	4611      	mov	r1, r2
 8000758:	4a27      	ldr	r2, [pc, #156]	; (80007f8 <GPIO_Init+0x184>)
 800075a:	430b      	orrs	r3, r1
 800075c:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800075e:	4b26      	ldr	r3, [pc, #152]	; (80007f8 <GPIO_Init+0x184>)
 8000760:	68db      	ldr	r3, [r3, #12]
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	7912      	ldrb	r2, [r2, #4]
 8000766:	4611      	mov	r1, r2
 8000768:	2201      	movs	r2, #1
 800076a:	408a      	lsls	r2, r1
 800076c:	43d2      	mvns	r2, r2
 800076e:	4611      	mov	r1, r2
 8000770:	4a21      	ldr	r2, [pc, #132]	; (80007f8 <GPIO_Init+0x184>)
 8000772:	430b      	orrs	r3, r1
 8000774:	60d3      	str	r3, [r2, #12]
		}

		//Configure the GPIO port selection in SYSCFG_EXTIR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode / 4;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	089b      	lsrs	r3, r3, #2
 800077c:	75fb      	strb	r3, [r7, #23]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode % 4;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	795b      	ldrb	r3, [r3, #5]
 8000782:	f003 0303 	and.w	r3, r3, #3
 8000786:	75bb      	strb	r3, [r7, #22]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a1b      	ldr	r2, [pc, #108]	; (80007fc <GPIO_Init+0x188>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d044      	beq.n	800081c <GPIO_Init+0x1a8>
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <GPIO_Init+0x18c>)
 8000798:	4293      	cmp	r3, r2
 800079a:	d02b      	beq.n	80007f4 <GPIO_Init+0x180>
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a18      	ldr	r2, [pc, #96]	; (8000804 <GPIO_Init+0x190>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d024      	beq.n	80007f0 <GPIO_Init+0x17c>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a17      	ldr	r2, [pc, #92]	; (8000808 <GPIO_Init+0x194>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d01d      	beq.n	80007ec <GPIO_Init+0x178>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a15      	ldr	r2, [pc, #84]	; (800080c <GPIO_Init+0x198>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d016      	beq.n	80007e8 <GPIO_Init+0x174>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a14      	ldr	r2, [pc, #80]	; (8000810 <GPIO_Init+0x19c>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d00f      	beq.n	80007e4 <GPIO_Init+0x170>
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a12      	ldr	r2, [pc, #72]	; (8000814 <GPIO_Init+0x1a0>)
 80007ca:	4293      	cmp	r3, r2
 80007cc:	d008      	beq.n	80007e0 <GPIO_Init+0x16c>
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a11      	ldr	r2, [pc, #68]	; (8000818 <GPIO_Init+0x1a4>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d101      	bne.n	80007dc <GPIO_Init+0x168>
 80007d8:	2307      	movs	r3, #7
 80007da:	e020      	b.n	800081e <GPIO_Init+0x1aa>
 80007dc:	2300      	movs	r3, #0
 80007de:	e01e      	b.n	800081e <GPIO_Init+0x1aa>
 80007e0:	2306      	movs	r3, #6
 80007e2:	e01c      	b.n	800081e <GPIO_Init+0x1aa>
 80007e4:	2305      	movs	r3, #5
 80007e6:	e01a      	b.n	800081e <GPIO_Init+0x1aa>
 80007e8:	2304      	movs	r3, #4
 80007ea:	e018      	b.n	800081e <GPIO_Init+0x1aa>
 80007ec:	2303      	movs	r3, #3
 80007ee:	e016      	b.n	800081e <GPIO_Init+0x1aa>
 80007f0:	2302      	movs	r3, #2
 80007f2:	e014      	b.n	800081e <GPIO_Init+0x1aa>
 80007f4:	2301      	movs	r3, #1
 80007f6:	e012      	b.n	800081e <GPIO_Init+0x1aa>
 80007f8:	40013c00 	.word	0x40013c00
 80007fc:	40020000 	.word	0x40020000
 8000800:	40020400 	.word	0x40020400
 8000804:	40020800 	.word	0x40020800
 8000808:	40020c00 	.word	0x40020c00
 800080c:	40021000 	.word	0x40021000
 8000810:	40021400 	.word	0x40021400
 8000814:	40021800 	.word	0x40021800
 8000818:	40021c00 	.word	0x40021c00
 800081c:	2300      	movs	r3, #0
 800081e:	757b      	strb	r3, [r7, #21]
		SYSCFG_PCLK_EN();
 8000820:	4b5a      	ldr	r3, [pc, #360]	; (800098c <GPIO_Init+0x318>)
 8000822:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000824:	4a59      	ldr	r2, [pc, #356]	; (800098c <GPIO_Init+0x318>)
 8000826:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 800082c:	7d7a      	ldrb	r2, [r7, #21]
 800082e:	7dbb      	ldrb	r3, [r7, #22]
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	fa02 f103 	lsl.w	r1, r2, r3
 8000836:	4a56      	ldr	r2, [pc, #344]	; (8000990 <GPIO_Init+0x31c>)
 8000838:	7dfb      	ldrb	r3, [r7, #23]
 800083a:	3302      	adds	r3, #2
 800083c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//Enable the EXTI interrupt delivery via Interrupt Mask Register
		EXTI->IMR |= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000840:	4b54      	ldr	r3, [pc, #336]	; (8000994 <GPIO_Init+0x320>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	7912      	ldrb	r2, [r2, #4]
 8000848:	4611      	mov	r1, r2
 800084a:	4a52      	ldr	r2, [pc, #328]	; (8000994 <GPIO_Init+0x320>)
 800084c:	430b      	orrs	r3, r1
 800084e:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000850:	2300      	movs	r3, #0
 8000852:	613b      	str	r3, [r7, #16]

	//Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	799b      	ldrb	r3, [r3, #6]
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	791b      	ldrb	r3, [r3, #4]
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	fa02 f303 	lsl.w	r3, r2, r3
 8000864:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	689a      	ldr	r2, [r3, #8]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	791b      	ldrb	r3, [r3, #4]
 8000870:	4619      	mov	r1, r3
 8000872:	2303      	movs	r3, #3
 8000874:	408b      	lsls	r3, r1
 8000876:	43db      	mvns	r3, r3
 8000878:	4619      	mov	r1, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	400a      	ands	r2, r1
 8000880:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	6899      	ldr	r1, [r3, #8]
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	693a      	ldr	r2, [r7, #16]
 800088e:	430a      	orrs	r2, r1
 8000890:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	613b      	str	r3, [r7, #16]

	//Pull up pull down
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	79db      	ldrb	r3, [r3, #7]
 800089a:	461a      	mov	r2, r3
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	791b      	ldrb	r3, [r3, #4]
 80008a0:	005b      	lsls	r3, r3, #1
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	68da      	ldr	r2, [r3, #12]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	791b      	ldrb	r3, [r3, #4]
 80008b2:	4619      	mov	r1, r3
 80008b4:	2303      	movs	r3, #3
 80008b6:	408b      	lsls	r3, r1
 80008b8:	43db      	mvns	r3, r3
 80008ba:	4619      	mov	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	400a      	ands	r2, r1
 80008c2:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	68d9      	ldr	r1, [r3, #12]
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	693a      	ldr	r2, [r7, #16]
 80008d0:	430a      	orrs	r2, r1
 80008d2:	60da      	str	r2, [r3, #12]

	temp = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	613b      	str	r3, [r7, #16]

	//Output type - multiplying by 2 is only required for 2-bit registers
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	7a1b      	ldrb	r3, [r3, #8]
 80008dc:	461a      	mov	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	791b      	ldrb	r3, [r3, #4]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	685a      	ldr	r2, [r3, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	791b      	ldrb	r3, [r3, #4]
 80008f2:	4619      	mov	r1, r3
 80008f4:	2303      	movs	r3, #3
 80008f6:	408b      	lsls	r3, r1
 80008f8:	43db      	mvns	r3, r3
 80008fa:	4619      	mov	r1, r3
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	400a      	ands	r2, r1
 8000902:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6859      	ldr	r1, [r3, #4]
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	430a      	orrs	r2, r1
 8000912:	605a      	str	r2, [r3, #4]

	temp = 0;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]

	//Alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	795b      	ldrb	r3, [r3, #5]
 800091c:	2b02      	cmp	r3, #2
 800091e:	d131      	bne.n	8000984 <GPIO_Init+0x310>
	{
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;		//Get high or low alt function registers via 2-element array
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	791b      	ldrb	r3, [r3, #4]
 8000924:	08db      	lsrs	r3, r3, #3
 8000926:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;		//Get the bits (4-bit registers)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	791b      	ldrb	r3, [r3, #4]
 800092c:	f003 0307 	and.w	r3, r3, #7
 8000930:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	7bfa      	ldrb	r2, [r7, #15]
 8000938:	3208      	adds	r2, #8
 800093a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800093e:	7bbb      	ldrb	r3, [r7, #14]
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	220f      	movs	r2, #15
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	43db      	mvns	r3, r3
 800094a:	4618      	mov	r0, r3
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	7bfa      	ldrb	r2, [r7, #15]
 8000952:	4001      	ands	r1, r0
 8000954:	3208      	adds	r2, #8
 8000956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	7bfa      	ldrb	r2, [r7, #15]
 8000960:	3208      	adds	r2, #8
 8000962:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7a5b      	ldrb	r3, [r3, #9]
 800096a:	461a      	mov	r2, r3
 800096c:	7bbb      	ldrb	r3, [r7, #14]
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	fa02 f303 	lsl.w	r3, r2, r3
 8000974:	4618      	mov	r0, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	7bfa      	ldrb	r2, [r7, #15]
 800097c:	4301      	orrs	r1, r0
 800097e:	3208      	adds	r2, #8
 8000980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000984:	bf00      	nop
 8000986:	3718      	adds	r7, #24
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40023800 	.word	0x40023800
 8000990:	40013800 	.word	0x40013800
 8000994:	40013c00 	.word	0x40013c00

08000998 <__libc_init_array>:
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	4e0d      	ldr	r6, [pc, #52]	; (80009d0 <__libc_init_array+0x38>)
 800099c:	4c0d      	ldr	r4, [pc, #52]	; (80009d4 <__libc_init_array+0x3c>)
 800099e:	1ba4      	subs	r4, r4, r6
 80009a0:	10a4      	asrs	r4, r4, #2
 80009a2:	2500      	movs	r5, #0
 80009a4:	42a5      	cmp	r5, r4
 80009a6:	d109      	bne.n	80009bc <__libc_init_array+0x24>
 80009a8:	4e0b      	ldr	r6, [pc, #44]	; (80009d8 <__libc_init_array+0x40>)
 80009aa:	4c0c      	ldr	r4, [pc, #48]	; (80009dc <__libc_init_array+0x44>)
 80009ac:	f000 f818 	bl	80009e0 <_init>
 80009b0:	1ba4      	subs	r4, r4, r6
 80009b2:	10a4      	asrs	r4, r4, #2
 80009b4:	2500      	movs	r5, #0
 80009b6:	42a5      	cmp	r5, r4
 80009b8:	d105      	bne.n	80009c6 <__libc_init_array+0x2e>
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009c0:	4798      	blx	r3
 80009c2:	3501      	adds	r5, #1
 80009c4:	e7ee      	b.n	80009a4 <__libc_init_array+0xc>
 80009c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80009ca:	4798      	blx	r3
 80009cc:	3501      	adds	r5, #1
 80009ce:	e7f2      	b.n	80009b6 <__libc_init_array+0x1e>
 80009d0:	08000a08 	.word	0x08000a08
 80009d4:	08000a08 	.word	0x08000a08
 80009d8:	08000a08 	.word	0x08000a08
 80009dc:	08000a0c 	.word	0x08000a0c

080009e0 <_init>:
 80009e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009e2:	bf00      	nop
 80009e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009e6:	bc08      	pop	{r3}
 80009e8:	469e      	mov	lr, r3
 80009ea:	4770      	bx	lr

080009ec <_fini>:
 80009ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009ee:	bf00      	nop
 80009f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80009f2:	bc08      	pop	{r3}
 80009f4:	469e      	mov	lr, r3
 80009f6:	4770      	bx	lr
