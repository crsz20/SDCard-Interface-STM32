
BlinkingLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000648  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800080c  08000814  00010814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800080c  0800080c  00010814  2**0
                  CONTENTS
  4 .ARM          00000000  0800080c  0800080c  00010814  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800080c  08000814  00010814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800080c  0800080c  0001080c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000810  08000810  00010810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010814  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000814  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000814  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010814  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000977  00000000  00000000  00010844  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000233  00000000  00000000  000111bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c0  00000000  00000000  000113f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000098  00000000  00000000  000114b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000137a  00000000  00000000  00011548  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000b0b  00000000  00000000  000128c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000054c6  00000000  00000000  000133cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00018893  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000024c  00000000  00000000  00018910  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080007f4 	.word	0x080007f4

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	080007f4 	.word	0x080007f4

08000204 <delay>:


#include "stm32f446xx.h"

void delay(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a04      	ldr	r2, [pc, #16]	; (800022c <delay+0x28>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <delay+0xc>
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	0007a11f 	.word	0x0007a11f

08000230 <main>:


int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;

	GpioLed.pGPIOx = GPIOA;
 8000236:	4b0d      	ldr	r3, [pc, #52]	; (800026c <main+0x3c>)
 8000238:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NUM_5;
 800023a:	2305      	movs	r3, #5
 800023c:	723b      	strb	r3, [r7, #8]

	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800023e:	2301      	movs	r3, #1
 8000240:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000242:	2302      	movs	r3, #2
 8000244:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000246:	2300      	movs	r3, #0
 8000248:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]


	GPIO_PeriClockControl(GPIOA, ENABLE);
 800024e:	2101      	movs	r1, #1
 8000250:	4806      	ldr	r0, [pc, #24]	; (800026c <main+0x3c>)
 8000252:	f000 f837 	bl	80002c4 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 8000256:	1d3b      	adds	r3, r7, #4
 8000258:	4618      	mov	r0, r3
 800025a:	f000 f903 	bl	8000464 <GPIO_Init>

	while(1)
	{
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NUM_5);
 800025e:	2105      	movs	r1, #5
 8000260:	4802      	ldr	r0, [pc, #8]	; (800026c <main+0x3c>)
 8000262:	f000 fa8d 	bl	8000780 <GPIO_ToggleOutputPin>
		delay();
 8000266:	f7ff ffcd 	bl	8000204 <delay>
		GPIO_ToggleOutputPin(GPIOA, GPIO_PIN_NUM_5);
 800026a:	e7f8      	b.n	800025e <main+0x2e>
 800026c:	40020000 	.word	0x40020000

08000270 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000272:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000274:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000278:	480c      	ldr	r0, [pc, #48]	; (80002ac <LoopForever+0x6>)
  ldr r1, =_edata
 800027a:	490d      	ldr	r1, [pc, #52]	; (80002b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800027c:	4a0d      	ldr	r2, [pc, #52]	; (80002b4 <LoopForever+0xe>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000280:	e002      	b.n	8000288 <LoopCopyDataInit>

08000282 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000282:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000284:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000286:	3304      	adds	r3, #4

08000288 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000288:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800028c:	d3f9      	bcc.n	8000282 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800028e:	4a0a      	ldr	r2, [pc, #40]	; (80002b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000290:	4c0a      	ldr	r4, [pc, #40]	; (80002bc <LoopForever+0x16>)
  movs r3, #0
 8000292:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000294:	e001      	b.n	800029a <LoopFillZerobss>

08000296 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000296:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000298:	3204      	adds	r2, #4

0800029a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800029c:	d3fb      	bcc.n	8000296 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800029e:	f000 fa85 	bl	80007ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a2:	f7ff ffc5 	bl	8000230 <main>

080002a6 <LoopForever>:

LoopForever:
    b LoopForever
 80002a6:	e7fe      	b.n	80002a6 <LoopForever>
  ldr   r0, =_estack
 80002a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002b4:	08000814 	.word	0x08000814
  ldr r2, =_sbss
 80002b8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002bc:	2000001c 	.word	0x2000001c

080002c0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <ADC_IRQHandler>
	...

080002c4 <GPIO_PeriClockControl>:
 * Return:
 *
 * Note:
 ********************************************************************************/
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	460b      	mov	r3, r1
 80002ce:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80002d0:	78fb      	ldrb	r3, [r7, #3]
 80002d2:	2b01      	cmp	r3, #1
 80002d4:	d157      	bne.n	8000386 <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a59      	ldr	r2, [pc, #356]	; (8000440 <GPIO_PeriClockControl+0x17c>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80002de:	4b59      	ldr	r3, [pc, #356]	; (8000444 <GPIO_PeriClockControl+0x180>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e2:	4a58      	ldr	r2, [pc, #352]	; (8000444 <GPIO_PeriClockControl+0x180>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DI();
		}
	}

}
 80002ea:	e0a3      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a56      	ldr	r2, [pc, #344]	; (8000448 <GPIO_PeriClockControl+0x184>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80002f4:	4b53      	ldr	r3, [pc, #332]	; (8000444 <GPIO_PeriClockControl+0x180>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f8:	4a52      	ldr	r2, [pc, #328]	; (8000444 <GPIO_PeriClockControl+0x180>)
 80002fa:	f043 0302 	orr.w	r3, r3, #2
 80002fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000300:	e098      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a51      	ldr	r2, [pc, #324]	; (800044c <GPIO_PeriClockControl+0x188>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800030a:	4b4e      	ldr	r3, [pc, #312]	; (8000444 <GPIO_PeriClockControl+0x180>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800030e:	4a4d      	ldr	r2, [pc, #308]	; (8000444 <GPIO_PeriClockControl+0x180>)
 8000310:	f043 0304 	orr.w	r3, r3, #4
 8000314:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000316:	e08d      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a4d      	ldr	r2, [pc, #308]	; (8000450 <GPIO_PeriClockControl+0x18c>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000320:	4b48      	ldr	r3, [pc, #288]	; (8000444 <GPIO_PeriClockControl+0x180>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000324:	4a47      	ldr	r2, [pc, #284]	; (8000444 <GPIO_PeriClockControl+0x180>)
 8000326:	f043 0308 	orr.w	r3, r3, #8
 800032a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800032c:	e082      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a48      	ldr	r2, [pc, #288]	; (8000454 <GPIO_PeriClockControl+0x190>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000336:	4b43      	ldr	r3, [pc, #268]	; (8000444 <GPIO_PeriClockControl+0x180>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033a:	4a42      	ldr	r2, [pc, #264]	; (8000444 <GPIO_PeriClockControl+0x180>)
 800033c:	f043 0310 	orr.w	r3, r3, #16
 8000340:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000342:	e077      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a44      	ldr	r2, [pc, #272]	; (8000458 <GPIO_PeriClockControl+0x194>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800034c:	4b3d      	ldr	r3, [pc, #244]	; (8000444 <GPIO_PeriClockControl+0x180>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a3c      	ldr	r2, [pc, #240]	; (8000444 <GPIO_PeriClockControl+0x180>)
 8000352:	f043 0320 	orr.w	r3, r3, #32
 8000356:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000358:	e06c      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a3f      	ldr	r2, [pc, #252]	; (800045c <GPIO_PeriClockControl+0x198>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000362:	4b38      	ldr	r3, [pc, #224]	; (8000444 <GPIO_PeriClockControl+0x180>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000366:	4a37      	ldr	r2, [pc, #220]	; (8000444 <GPIO_PeriClockControl+0x180>)
 8000368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800036c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800036e:	e061      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a3b      	ldr	r2, [pc, #236]	; (8000460 <GPIO_PeriClockControl+0x19c>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d15d      	bne.n	8000434 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000378:	4b32      	ldr	r3, [pc, #200]	; (8000444 <GPIO_PeriClockControl+0x180>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037c:	4a31      	ldr	r2, [pc, #196]	; (8000444 <GPIO_PeriClockControl+0x180>)
 800037e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000382:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000384:	e056      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	4a2d      	ldr	r2, [pc, #180]	; (8000440 <GPIO_PeriClockControl+0x17c>)
 800038a:	4293      	cmp	r3, r2
 800038c:	d106      	bne.n	800039c <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 800038e:	4b2d      	ldr	r3, [pc, #180]	; (8000444 <GPIO_PeriClockControl+0x180>)
 8000390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000392:	4a2c      	ldr	r2, [pc, #176]	; (8000444 <GPIO_PeriClockControl+0x180>)
 8000394:	f023 0301 	bic.w	r3, r3, #1
 8000398:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039a:	e04b      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 800039c:	687b      	ldr	r3, [r7, #4]
 800039e:	4a2a      	ldr	r2, [pc, #168]	; (8000448 <GPIO_PeriClockControl+0x184>)
 80003a0:	4293      	cmp	r3, r2
 80003a2:	d106      	bne.n	80003b2 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80003a4:	4b27      	ldr	r3, [pc, #156]	; (8000444 <GPIO_PeriClockControl+0x180>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a8:	4a26      	ldr	r2, [pc, #152]	; (8000444 <GPIO_PeriClockControl+0x180>)
 80003aa:	f023 0302 	bic.w	r3, r3, #2
 80003ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b0:	e040      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	4a25      	ldr	r2, [pc, #148]	; (800044c <GPIO_PeriClockControl+0x188>)
 80003b6:	4293      	cmp	r3, r2
 80003b8:	d106      	bne.n	80003c8 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80003ba:	4b22      	ldr	r3, [pc, #136]	; (8000444 <GPIO_PeriClockControl+0x180>)
 80003bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003be:	4a21      	ldr	r2, [pc, #132]	; (8000444 <GPIO_PeriClockControl+0x180>)
 80003c0:	f023 0304 	bic.w	r3, r3, #4
 80003c4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c6:	e035      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4a21      	ldr	r2, [pc, #132]	; (8000450 <GPIO_PeriClockControl+0x18c>)
 80003cc:	4293      	cmp	r3, r2
 80003ce:	d106      	bne.n	80003de <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80003d0:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <GPIO_PeriClockControl+0x180>)
 80003d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d4:	4a1b      	ldr	r2, [pc, #108]	; (8000444 <GPIO_PeriClockControl+0x180>)
 80003d6:	f023 0308 	bic.w	r3, r3, #8
 80003da:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003dc:	e02a      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	4a1c      	ldr	r2, [pc, #112]	; (8000454 <GPIO_PeriClockControl+0x190>)
 80003e2:	4293      	cmp	r3, r2
 80003e4:	d106      	bne.n	80003f4 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80003e6:	4b17      	ldr	r3, [pc, #92]	; (8000444 <GPIO_PeriClockControl+0x180>)
 80003e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ea:	4a16      	ldr	r2, [pc, #88]	; (8000444 <GPIO_PeriClockControl+0x180>)
 80003ec:	f023 0310 	bic.w	r3, r3, #16
 80003f0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f2:	e01f      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	4a18      	ldr	r2, [pc, #96]	; (8000458 <GPIO_PeriClockControl+0x194>)
 80003f8:	4293      	cmp	r3, r2
 80003fa:	d106      	bne.n	800040a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80003fc:	4b11      	ldr	r3, [pc, #68]	; (8000444 <GPIO_PeriClockControl+0x180>)
 80003fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000400:	4a10      	ldr	r2, [pc, #64]	; (8000444 <GPIO_PeriClockControl+0x180>)
 8000402:	f023 0320 	bic.w	r3, r3, #32
 8000406:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000408:	e014      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4a13      	ldr	r2, [pc, #76]	; (800045c <GPIO_PeriClockControl+0x198>)
 800040e:	4293      	cmp	r3, r2
 8000410:	d106      	bne.n	8000420 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000412:	4b0c      	ldr	r3, [pc, #48]	; (8000444 <GPIO_PeriClockControl+0x180>)
 8000414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000416:	4a0b      	ldr	r2, [pc, #44]	; (8000444 <GPIO_PeriClockControl+0x180>)
 8000418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800041c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800041e:	e009      	b.n	8000434 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	4a0f      	ldr	r2, [pc, #60]	; (8000460 <GPIO_PeriClockControl+0x19c>)
 8000424:	4293      	cmp	r3, r2
 8000426:	d105      	bne.n	8000434 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000428:	4b06      	ldr	r3, [pc, #24]	; (8000444 <GPIO_PeriClockControl+0x180>)
 800042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042c:	4a05      	ldr	r2, [pc, #20]	; (8000444 <GPIO_PeriClockControl+0x180>)
 800042e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000432:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40020000 	.word	0x40020000
 8000444:	40023800 	.word	0x40023800
 8000448:	40020400 	.word	0x40020400
 800044c:	40020800 	.word	0x40020800
 8000450:	40020c00 	.word	0x40020c00
 8000454:	40021000 	.word	0x40021000
 8000458:	40021400 	.word	0x40021400
 800045c:	40021800 	.word	0x40021800
 8000460:	40021c00 	.word	0x40021c00

08000464 <GPIO_Init>:
 * Return:
 *
 * Note:
 ********************************************************************************/
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000464:	b480      	push	{r7}
 8000466:	b087      	sub	sp, #28
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
	uint32_t temp; //temp. register will at first hold the desired GPIO config setting, with the bits set at the desired register

	// Mode
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	795b      	ldrb	r3, [r3, #5]
 8000470:	2b03      	cmp	r3, #3
 8000472:	d81f      	bhi.n	80004b4 <GPIO_Init+0x50>
	{
		//Non-interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	795b      	ldrb	r3, [r3, #5]
 8000478:	461a      	mov	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	791b      	ldrb	r3, [r3, #4]
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	fa02 f303 	lsl.w	r3, r2, r3
 8000484:	613b      	str	r3, [r7, #16]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);	//Clear register
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	791b      	ldrb	r3, [r3, #4]
 8000490:	4619      	mov	r1, r3
 8000492:	2303      	movs	r3, #3
 8000494:	408b      	lsls	r3, r1
 8000496:	43db      	mvns	r3, r3
 8000498:	4619      	mov	r1, r3
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	400a      	ands	r2, r1
 80004a0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;   //Handle variable will get the base address and access the speed register. Set register
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	6819      	ldr	r1, [r3, #0]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	693a      	ldr	r2, [r7, #16]
 80004ae:	430a      	orrs	r2, r1
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	e0bf      	b.n	8000634 <GPIO_Init+0x1d0>

	} else
	{
		//Interrupt mode
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	795b      	ldrb	r3, [r3, #5]
 80004b8:	2b04      	cmp	r3, #4
 80004ba:	d117      	bne.n	80004ec <GPIO_Init+0x88>
		{
			//Configure the Rising Trigger Selection Register
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004bc:	4b47      	ldr	r3, [pc, #284]	; (80005dc <GPIO_Init+0x178>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	687a      	ldr	r2, [r7, #4]
 80004c2:	7912      	ldrb	r2, [r2, #4]
 80004c4:	4611      	mov	r1, r2
 80004c6:	2201      	movs	r2, #1
 80004c8:	408a      	lsls	r2, r1
 80004ca:	4611      	mov	r1, r2
 80004cc:	4a43      	ldr	r2, [pc, #268]	; (80005dc <GPIO_Init+0x178>)
 80004ce:	430b      	orrs	r3, r1
 80004d0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004d2:	4b42      	ldr	r3, [pc, #264]	; (80005dc <GPIO_Init+0x178>)
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	687a      	ldr	r2, [r7, #4]
 80004d8:	7912      	ldrb	r2, [r2, #4]
 80004da:	4611      	mov	r1, r2
 80004dc:	2201      	movs	r2, #1
 80004de:	408a      	lsls	r2, r1
 80004e0:	43d2      	mvns	r2, r2
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a3d      	ldr	r2, [pc, #244]	; (80005dc <GPIO_Init+0x178>)
 80004e6:	400b      	ands	r3, r1
 80004e8:	6093      	str	r3, [r2, #8]
 80004ea:	e036      	b.n	800055a <GPIO_Init+0xf6>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	2b05      	cmp	r3, #5
 80004f2:	d117      	bne.n	8000524 <GPIO_Init+0xc0>
		{
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f4:	4b39      	ldr	r3, [pc, #228]	; (80005dc <GPIO_Init+0x178>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	687a      	ldr	r2, [r7, #4]
 80004fa:	7912      	ldrb	r2, [r2, #4]
 80004fc:	4611      	mov	r1, r2
 80004fe:	2201      	movs	r2, #1
 8000500:	408a      	lsls	r2, r1
 8000502:	4611      	mov	r1, r2
 8000504:	4a35      	ldr	r2, [pc, #212]	; (80005dc <GPIO_Init+0x178>)
 8000506:	430b      	orrs	r3, r1
 8000508:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800050a:	4b34      	ldr	r3, [pc, #208]	; (80005dc <GPIO_Init+0x178>)
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	7912      	ldrb	r2, [r2, #4]
 8000512:	4611      	mov	r1, r2
 8000514:	2201      	movs	r2, #1
 8000516:	408a      	lsls	r2, r1
 8000518:	43d2      	mvns	r2, r2
 800051a:	4611      	mov	r1, r2
 800051c:	4a2f      	ldr	r2, [pc, #188]	; (80005dc <GPIO_Init+0x178>)
 800051e:	400b      	ands	r3, r1
 8000520:	60d3      	str	r3, [r2, #12]
 8000522:	e01a      	b.n	800055a <GPIO_Init+0xf6>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	2b06      	cmp	r3, #6
 800052a:	d116      	bne.n	800055a <GPIO_Init+0xf6>
		{
			//Configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052c:	4b2b      	ldr	r3, [pc, #172]	; (80005dc <GPIO_Init+0x178>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	7912      	ldrb	r2, [r2, #4]
 8000534:	4611      	mov	r1, r2
 8000536:	2201      	movs	r2, #1
 8000538:	408a      	lsls	r2, r1
 800053a:	4611      	mov	r1, r2
 800053c:	4a27      	ldr	r2, [pc, #156]	; (80005dc <GPIO_Init+0x178>)
 800053e:	430b      	orrs	r3, r1
 8000540:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000542:	4b26      	ldr	r3, [pc, #152]	; (80005dc <GPIO_Init+0x178>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	7912      	ldrb	r2, [r2, #4]
 800054a:	4611      	mov	r1, r2
 800054c:	2201      	movs	r2, #1
 800054e:	408a      	lsls	r2, r1
 8000550:	43d2      	mvns	r2, r2
 8000552:	4611      	mov	r1, r2
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <GPIO_Init+0x178>)
 8000556:	430b      	orrs	r3, r1
 8000558:	60d3      	str	r3, [r2, #12]
		}

		//Configure the GPIO port selection in SYSCFG_EXTIR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode / 4;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	795b      	ldrb	r3, [r3, #5]
 800055e:	089b      	lsrs	r3, r3, #2
 8000560:	75fb      	strb	r3, [r7, #23]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode % 4;
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	795b      	ldrb	r3, [r3, #5]
 8000566:	f003 0303 	and.w	r3, r3, #3
 800056a:	75bb      	strb	r3, [r7, #22]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a1b      	ldr	r2, [pc, #108]	; (80005e0 <GPIO_Init+0x17c>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d044      	beq.n	8000600 <GPIO_Init+0x19c>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a1a      	ldr	r2, [pc, #104]	; (80005e4 <GPIO_Init+0x180>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d02b      	beq.n	80005d8 <GPIO_Init+0x174>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a18      	ldr	r2, [pc, #96]	; (80005e8 <GPIO_Init+0x184>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d024      	beq.n	80005d4 <GPIO_Init+0x170>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a17      	ldr	r2, [pc, #92]	; (80005ec <GPIO_Init+0x188>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d01d      	beq.n	80005d0 <GPIO_Init+0x16c>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <GPIO_Init+0x18c>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d016      	beq.n	80005cc <GPIO_Init+0x168>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a14      	ldr	r2, [pc, #80]	; (80005f4 <GPIO_Init+0x190>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d00f      	beq.n	80005c8 <GPIO_Init+0x164>
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <GPIO_Init+0x194>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d008      	beq.n	80005c4 <GPIO_Init+0x160>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4a11      	ldr	r2, [pc, #68]	; (80005fc <GPIO_Init+0x198>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d101      	bne.n	80005c0 <GPIO_Init+0x15c>
 80005bc:	2307      	movs	r3, #7
 80005be:	e020      	b.n	8000602 <GPIO_Init+0x19e>
 80005c0:	2300      	movs	r3, #0
 80005c2:	e01e      	b.n	8000602 <GPIO_Init+0x19e>
 80005c4:	2306      	movs	r3, #6
 80005c6:	e01c      	b.n	8000602 <GPIO_Init+0x19e>
 80005c8:	2305      	movs	r3, #5
 80005ca:	e01a      	b.n	8000602 <GPIO_Init+0x19e>
 80005cc:	2304      	movs	r3, #4
 80005ce:	e018      	b.n	8000602 <GPIO_Init+0x19e>
 80005d0:	2303      	movs	r3, #3
 80005d2:	e016      	b.n	8000602 <GPIO_Init+0x19e>
 80005d4:	2302      	movs	r3, #2
 80005d6:	e014      	b.n	8000602 <GPIO_Init+0x19e>
 80005d8:	2301      	movs	r3, #1
 80005da:	e012      	b.n	8000602 <GPIO_Init+0x19e>
 80005dc:	40013c00 	.word	0x40013c00
 80005e0:	40020000 	.word	0x40020000
 80005e4:	40020400 	.word	0x40020400
 80005e8:	40020800 	.word	0x40020800
 80005ec:	40020c00 	.word	0x40020c00
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40021400 	.word	0x40021400
 80005f8:	40021800 	.word	0x40021800
 80005fc:	40021c00 	.word	0x40021c00
 8000600:	2300      	movs	r3, #0
 8000602:	757b      	strb	r3, [r7, #21]
		SYSCFG_PCLK_EN();
 8000604:	4b5b      	ldr	r3, [pc, #364]	; (8000774 <GPIO_Init+0x310>)
 8000606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000608:	4a5a      	ldr	r2, [pc, #360]	; (8000774 <GPIO_Init+0x310>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000610:	7d7a      	ldrb	r2, [r7, #21]
 8000612:	7dbb      	ldrb	r3, [r7, #22]
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	fa02 f103 	lsl.w	r1, r2, r3
 800061a:	4a57      	ldr	r2, [pc, #348]	; (8000778 <GPIO_Init+0x314>)
 800061c:	7dfb      	ldrb	r3, [r7, #23]
 800061e:	3302      	adds	r3, #2
 8000620:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//Enable the EXTI interrupt delivery via Interrupt Mask Register
		EXTI->IMR |= pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000624:	4b55      	ldr	r3, [pc, #340]	; (800077c <GPIO_Init+0x318>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	7912      	ldrb	r2, [r2, #4]
 800062c:	4611      	mov	r1, r2
 800062e:	4a53      	ldr	r2, [pc, #332]	; (800077c <GPIO_Init+0x318>)
 8000630:	430b      	orrs	r3, r1
 8000632:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000634:	2300      	movs	r3, #0
 8000636:	613b      	str	r3, [r7, #16]

	//Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	799b      	ldrb	r3, [r3, #6]
 800063c:	461a      	mov	r2, r3
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	791b      	ldrb	r3, [r3, #4]
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	fa02 f303 	lsl.w	r3, r2, r3
 8000648:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	689a      	ldr	r2, [r3, #8]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	791b      	ldrb	r3, [r3, #4]
 8000654:	4619      	mov	r1, r3
 8000656:	2303      	movs	r3, #3
 8000658:	408b      	lsls	r3, r1
 800065a:	43db      	mvns	r3, r3
 800065c:	4619      	mov	r1, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	400a      	ands	r2, r1
 8000664:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	6899      	ldr	r1, [r3, #8]
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	693a      	ldr	r2, [r7, #16]
 8000672:	430a      	orrs	r2, r1
 8000674:	609a      	str	r2, [r3, #8]

	temp = 0;
 8000676:	2300      	movs	r3, #0
 8000678:	613b      	str	r3, [r7, #16]

	//Pull up pull down
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	79db      	ldrb	r3, [r3, #7]
 800067e:	461a      	mov	r2, r3
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	791b      	ldrb	r3, [r3, #4]
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	791b      	ldrb	r3, [r3, #4]
 8000696:	4619      	mov	r1, r3
 8000698:	2303      	movs	r3, #3
 800069a:	408b      	lsls	r3, r1
 800069c:	43db      	mvns	r3, r3
 800069e:	4619      	mov	r1, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	400a      	ands	r2, r1
 80006a6:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	68d9      	ldr	r1, [r3, #12]
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	430a      	orrs	r2, r1
 80006b6:	60da      	str	r2, [r3, #12]

	temp = 0;
 80006b8:	2300      	movs	r3, #0
 80006ba:	613b      	str	r3, [r7, #16]

	//Output type - multiplying by 2 is only required for 2-bit registers
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	7a1b      	ldrb	r3, [r3, #8]
 80006c0:	461a      	mov	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	791b      	ldrb	r3, [r3, #4]
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	613b      	str	r3, [r7, #16]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	685a      	ldr	r2, [r3, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	791b      	ldrb	r3, [r3, #4]
 80006d6:	4619      	mov	r1, r3
 80006d8:	2303      	movs	r3, #3
 80006da:	408b      	lsls	r3, r1
 80006dc:	43db      	mvns	r3, r3
 80006de:	4619      	mov	r1, r3
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	400a      	ands	r2, r1
 80006e6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	6859      	ldr	r1, [r3, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	430a      	orrs	r2, r1
 80006f6:	605a      	str	r2, [r3, #4]

	temp = 0;
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]

	//Alternate functionality
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	795b      	ldrb	r3, [r3, #5]
 8000700:	2b02      	cmp	r3, #2
 8000702:	d131      	bne.n	8000768 <GPIO_Init+0x304>
	{
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;		//Get high or low alt function registers via 2-element array
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	08db      	lsrs	r3, r3, #3
 800070a:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;		//Get the bits (4-bit registers)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	791b      	ldrb	r3, [r3, #4]
 8000710:	f003 0307 	and.w	r3, r3, #7
 8000714:	73bb      	strb	r3, [r7, #14]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	7bfa      	ldrb	r2, [r7, #15]
 800071c:	3208      	adds	r2, #8
 800071e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000722:	7bbb      	ldrb	r3, [r7, #14]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	220f      	movs	r2, #15
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	43db      	mvns	r3, r3
 800072e:	4618      	mov	r0, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	7bfa      	ldrb	r2, [r7, #15]
 8000736:	4001      	ands	r1, r0
 8000738:	3208      	adds	r2, #8
 800073a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	7bfa      	ldrb	r2, [r7, #15]
 8000744:	3208      	adds	r2, #8
 8000746:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	7a5b      	ldrb	r3, [r3, #9]
 800074e:	461a      	mov	r2, r3
 8000750:	7bbb      	ldrb	r3, [r7, #14]
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	fa02 f303 	lsl.w	r3, r2, r3
 8000758:	4618      	mov	r0, r3
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	7bfa      	ldrb	r2, [r7, #15]
 8000760:	4301      	orrs	r1, r0
 8000762:	3208      	adds	r2, #8
 8000764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}


}
 8000768:	bf00      	nop
 800076a:	371c      	adds	r7, #28
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	40023800 	.word	0x40023800
 8000778:	40013800 	.word	0x40013800
 800077c:	40013c00 	.word	0x40013c00

08000780 <GPIO_ToggleOutputPin>:
 * Return:
 *
 * Note:
 ********************************************************************************/
void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	460b      	mov	r3, r1
 800078a:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= ( 1 << PinNumber);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	695b      	ldr	r3, [r3, #20]
 8000790:	78fa      	ldrb	r2, [r7, #3]
 8000792:	2101      	movs	r1, #1
 8000794:	fa01 f202 	lsl.w	r2, r1, r2
 8000798:	405a      	eors	r2, r3
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	615a      	str	r2, [r3, #20]
}
 800079e:	bf00      	nop
 80007a0:	370c      	adds	r7, #12
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <__libc_init_array>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	4e0d      	ldr	r6, [pc, #52]	; (80007e4 <__libc_init_array+0x38>)
 80007b0:	4c0d      	ldr	r4, [pc, #52]	; (80007e8 <__libc_init_array+0x3c>)
 80007b2:	1ba4      	subs	r4, r4, r6
 80007b4:	10a4      	asrs	r4, r4, #2
 80007b6:	2500      	movs	r5, #0
 80007b8:	42a5      	cmp	r5, r4
 80007ba:	d109      	bne.n	80007d0 <__libc_init_array+0x24>
 80007bc:	4e0b      	ldr	r6, [pc, #44]	; (80007ec <__libc_init_array+0x40>)
 80007be:	4c0c      	ldr	r4, [pc, #48]	; (80007f0 <__libc_init_array+0x44>)
 80007c0:	f000 f818 	bl	80007f4 <_init>
 80007c4:	1ba4      	subs	r4, r4, r6
 80007c6:	10a4      	asrs	r4, r4, #2
 80007c8:	2500      	movs	r5, #0
 80007ca:	42a5      	cmp	r5, r4
 80007cc:	d105      	bne.n	80007da <__libc_init_array+0x2e>
 80007ce:	bd70      	pop	{r4, r5, r6, pc}
 80007d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007d4:	4798      	blx	r3
 80007d6:	3501      	adds	r5, #1
 80007d8:	e7ee      	b.n	80007b8 <__libc_init_array+0xc>
 80007da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80007de:	4798      	blx	r3
 80007e0:	3501      	adds	r5, #1
 80007e2:	e7f2      	b.n	80007ca <__libc_init_array+0x1e>
 80007e4:	0800080c 	.word	0x0800080c
 80007e8:	0800080c 	.word	0x0800080c
 80007ec:	0800080c 	.word	0x0800080c
 80007f0:	08000810 	.word	0x08000810

080007f4 <_init>:
 80007f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007f6:	bf00      	nop
 80007f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80007fa:	bc08      	pop	{r3}
 80007fc:	469e      	mov	lr, r3
 80007fe:	4770      	bx	lr

08000800 <_fini>:
 8000800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000802:	bf00      	nop
 8000804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000806:	bc08      	pop	{r3}
 8000808:	469e      	mov	lr, r3
 800080a:	4770      	bx	lr
